/**
 * @license
 * Copyright (C) 1997-2014, Onion Software/onitama.
 * Copyright (C) 2014, zakki.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice, this
 * list of conditions and the following disclaimer.  Redistributions in binary
 * form must reproduce the above copyright notice, this list of conditions and
 * the following disclaimer in the documentation and/or other materials provided
 * with the distribution.  Neither the name of the Onion Software nor the names
 * of its contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 **/
// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  Module['thisProgram'] = process['argv'][1];
  Module['arguments'] = process['argv'].slice(2);

  module['exports'] = Module;
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    return read(f, 'binary');
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  this['Module'] = Module;

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WEB) {
    window['Module'] = Module;
  } else {
    Module['load'] = importScripts;
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] == 'undefined' && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Auto-generated preamble library stuff ===

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  forceAlign: function (target, quantum) {
    quantum = quantum || 4;
    if (quantum == 1) return target;
    if (isNumber(target) && isNumber(quantum)) {
      return Math.ceil(target/quantum)*quantum;
    } else if (isNumber(quantum) && isPowerOfTwo(quantum)) {
      return '(((' +target + ')+' + (quantum-1) + ')&' + -quantum + ')';
    }
    return 'Math.ceil((' + target + ')/' + quantum + ')*' + quantum;
  },
  isNumberType: function (type) {
    return type in Runtime.INT_TYPES || type in Runtime.FLOAT_TYPES;
  },
  isPointerType: function isPointerType(type) {
  return type[type.length-1] == '*';
},
  isStructType: function isStructType(type) {
  if (isPointerType(type)) return false;
  if (isArrayType(type)) return true;
  if (/<?\{ ?[^}]* ?\}>?/.test(type)) return true; // { i32, i8 } etc. - anonymous struct types
  // See comment in isStructPointerType()
  return type[0] == '%';
},
  INT_TYPES: {"i1":0,"i8":0,"i16":0,"i32":0,"i64":0},
  FLOAT_TYPES: {"float":0,"double":0},
  or64: function (x, y) {
    var l = (x | 0) | (y | 0);
    var h = (Math.round(x / 4294967296) | Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  and64: function (x, y) {
    var l = (x | 0) & (y | 0);
    var h = (Math.round(x / 4294967296) & Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  xor64: function (x, y) {
    var l = (x | 0) ^ (y | 0);
    var h = (Math.round(x / 4294967296) ^ Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  dedup: function dedup(items, ident) {
  var seen = {};
  if (ident) {
    return items.filter(function(item) {
      if (seen[item[ident]]) return false;
      seen[item[ident]] = true;
      return true;
    });
  } else {
    return items.filter(function(item) {
      if (seen[item]) return false;
      seen[item] = true;
      return true;
    });
  }
},
  set: function set() {
  var args = typeof arguments[0] === 'object' ? arguments[0] : arguments;
  var ret = {};
  for (var i = 0; i < args.length; i++) {
    ret[args[i]] = 0;
  }
  return ret;
},
  STACK_ALIGN: 8,
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  calculateStructAlignment: function calculateStructAlignment(type) {
    type.flatSize = 0;
    type.alignSize = 0;
    var diffs = [];
    var prev = -1;
    var index = 0;
    type.flatIndexes = type.fields.map(function(field) {
      index++;
      var size, alignSize;
      if (Runtime.isNumberType(field) || Runtime.isPointerType(field)) {
        size = Runtime.getNativeTypeSize(field); // pack char; char; in structs, also char[X]s.
        alignSize = Runtime.getAlignSize(field, size);
      } else if (Runtime.isStructType(field)) {
        if (field[1] === '0') {
          // this is [0 x something]. When inside another structure like here, it must be at the end,
          // and it adds no size
          // XXX this happens in java-nbody for example... assert(index === type.fields.length, 'zero-length in the middle!');
          size = 0;
          if (Types.types[field]) {
            alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
          } else {
            alignSize = type.alignSize || QUANTUM_SIZE;
          }
        } else {
          size = Types.types[field].flatSize;
          alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
        }
      } else if (field[0] == 'b') {
        // bN, large number field, like a [N x i8]
        size = field.substr(1)|0;
        alignSize = 1;
      } else if (field[0] === '<') {
        // vector type
        size = alignSize = Types.types[field].flatSize; // fully aligned
      } else if (field[0] === 'i') {
        // illegal integer field, that could not be legalized because it is an internal structure field
        // it is ok to have such fields, if we just use them as markers of field size and nothing more complex
        size = alignSize = parseInt(field.substr(1))/8;
        assert(size % 1 === 0, 'cannot handle non-byte-size field ' + field);
      } else {
        assert(false, 'invalid type for calculateStructAlignment');
      }
      if (type.packed) alignSize = 1;
      type.alignSize = Math.max(type.alignSize, alignSize);
      var curr = Runtime.alignMemory(type.flatSize, alignSize); // if necessary, place this on aligned memory
      type.flatSize = curr + size;
      if (prev >= 0) {
        diffs.push(curr-prev);
      }
      prev = curr;
      return curr;
    });
    if (type.name_ && type.name_[0] === '[') {
      // arrays have 2 elements, so we get the proper difference. then we scale here. that way we avoid
      // allocating a potentially huge array for [999999 x i8] etc.
      type.flatSize = parseInt(type.name_.substr(1))*type.flatSize/2;
    }
    type.flatSize = Runtime.alignMemory(type.flatSize, type.alignSize);
    if (diffs.length == 0) {
      type.flatFactor = type.flatSize;
    } else if (Runtime.dedup(diffs).length == 1) {
      type.flatFactor = diffs[0];
    }
    type.needsFlattening = (type.flatFactor != 1);
    return type.flatIndexes;
  },
  generateStructInfo: function (struct, typeName, offset) {
    var type, alignment;
    if (typeName) {
      offset = offset || 0;
      type = (typeof Types === 'undefined' ? Runtime.typeInfo : Types.types)[typeName];
      if (!type) return null;
      if (type.fields.length != struct.length) {
        printErr('Number of named fields must match the type for ' + typeName + ': possibly duplicate struct names. Cannot return structInfo');
        return null;
      }
      alignment = type.flatIndexes;
    } else {
      var type = { fields: struct.map(function(item) { return item[0] }) };
      alignment = Runtime.calculateStructAlignment(type);
    }
    var ret = {
      __size__: type.flatSize
    };
    if (typeName) {
      struct.forEach(function(item, i) {
        if (typeof item === 'string') {
          ret[item] = alignment[i] + offset;
        } else {
          // embedded struct
          var key;
          for (var k in item) key = k;
          ret[key] = Runtime.generateStructInfo(item[key], type.fields[i], alignment[i]);
        }
      });
    } else {
      struct.forEach(function(item, i) {
        ret[item[1]] = alignment[i];
      });
    }
    return ret;
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  getAsmConst: function (code, numArgs) {
    // code is a constant string on the heap, so we can cache these
    if (!Runtime.asmConstCache) Runtime.asmConstCache = {};
    var func = Runtime.asmConstCache[code];
    if (func) return func;
    var args = [];
    for (var i = 0; i < numArgs; i++) {
      args.push(String.fromCharCode(36) + i); // $0, $1 etc
    }
    var source = Pointer_stringify(code);
    if (source[0] === '"') {
      // tolerate EM_ASM("..code..") even though EM_ASM(..code..) is correct
      if (source.indexOf('"', 1) === source.length-1) {
        source = source.substr(1, source.length-2);
      } else {
        // something invalid happened, e.g. EM_ASM("..code($0)..", input)
        abort('invalid EM_ASM input |' + source + '|. Please use EM_ASM(..code..) (no quotes) or EM_ASM({ ..code($0).. }, input) (to input values)');
      }
    }
    try {
      var evalled = eval('(function(' + args.join(',') + '){ ' + source + ' })'); // new Function does not allow upvars in node
    } catch(e) {
      Module.printErr('error in executing inline EM_ASM code: ' + e + ' on: \n\n' + source + '\n\nwith args |' + args + '| (make sure to use the right one out of EM_ASM, EM_ASM_ARGS, etc.)');
      throw e;
    }
    return Runtime.asmConstCache[code] = evalled;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[func]) {
      Runtime.funcWrappers[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return Runtime.funcWrappers[func];
  },
  UTF8Processor: function () {
    var buffer = [];
    var needed = 0;
    this.processCChar = function (code) {
      code = code & 0xFF;

      if (buffer.length == 0) {
        if ((code & 0x80) == 0x00) {        // 0xxxxxxx
          return String.fromCharCode(code);
        }
        buffer.push(code);
        if ((code & 0xE0) == 0xC0) {        // 110xxxxx
          needed = 1;
        } else if ((code & 0xF0) == 0xE0) { // 1110xxxx
          needed = 2;
        } else {                            // 11110xxx
          needed = 3;
        }
        return '';
      }

      if (needed) {
        buffer.push(code);
        needed--;
        if (needed > 0) return '';
      }

      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var c4 = buffer[3];
      var ret;
      if (buffer.length == 2) {
        ret = String.fromCharCode(((c1 & 0x1F) << 6)  | (c2 & 0x3F));
      } else if (buffer.length == 3) {
        ret = String.fromCharCode(((c1 & 0x0F) << 12) | ((c2 & 0x3F) << 6)  | (c3 & 0x3F));
      } else {
        // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
        var codePoint = ((c1 & 0x07) << 18) | ((c2 & 0x3F) << 12) |
                        ((c3 & 0x3F) << 6)  | (c4 & 0x3F);
        ret = String.fromCharCode(
          Math.floor((codePoint - 0x10000) / 0x400) + 0xD800,
          (codePoint - 0x10000) % 0x400 + 0xDC00);
      }
      buffer.length = 0;
      return ret;
    }
    this.processJSString = function processJSString(string) {
      /* TODO: use TextEncoder when present,
        var encoder = new TextEncoder();
        encoder['encoding'] = "utf-8";
        var utf8Array = encoder['encode'](aMsg.data);
      */
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    }
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+7)&-8); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = (((DYNAMICTOP)+7)&-8); if (DYNAMICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 8))*(quantum ? quantum : 8); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}


Module['Runtime'] = Runtime;









//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try {
      func = eval('_' + ident); // explicit lookup
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var stack = 0;
  var JSfuncs = {
    'stackSave' : function() {
      stack = Runtime.stackSave();
    },
    'stackRestore' : function() {
      Runtime.stackRestore(stack);
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        ret = Runtime.stackAlloc(str.length + 1); // +1 for the trailing '\0'
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface. A convenient way to call C functions (in C files, or
  // defined with extern "C").
  //
  // Note: ccall/cwrap use the C stack for temporary values. If you pass a string
  //       then it is only alive until the call is complete. If the code being
  //       called saves the pointer to be used later, it may point to invalid
  //       data. If you need a string to live forever, you can create it (and
  //       must later delete it manually!) using malloc and writeStringToMemory,
  //       for example.
  //
  // Note: LLVM optimizations can inline and remove functions, after which you will not be
  //       able to call them. Closure can also do so. To avoid that, add your function to
  //       the exports using something like
  //
  //         -s EXPORTED_FUNCTIONS='["_main", "_myfunc"]'
  //
  // @param ident      The name of the C function (note that C++ functions will be name-mangled - use extern "C")
  // @param returnType The return type of the function, one of the JS types 'number', 'string' or 'array' (use 'number' for any C pointer, and
  //                   'array' for JavaScript arrays and typed arrays; note that arrays are 8-bit).
  // @param argTypes   An array of the types of arguments for the function (if there are no arguments, this can be ommitted). Types are as in returnType,
  //                   except that 'array' is not possible (there is no way for us to know the length of the array)
  // @param args       An array of the arguments to the function, as native JS values (as in returnType)
  //                   Note that string arguments will be stored on the stack (the JS string will become a C string on the stack).
  // @return           The return value, as a native JS value (as in returnType)
  ccall = function ccallFunc(ident, returnType, argTypes, args) {
    assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
    var func = getCFunc(ident);
    var cArgs = [];
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) JSfuncs['stackRestore']();
    return ret;
  }

  var sourceRegex = /^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }
  var JSsource = {};
  for (var fun in JSfuncs) {
    if (JSfuncs.hasOwnProperty(fun)) {
      // Elements of toCsource are arrays of three items:
      // the code, and the return value
      JSsource[fun] = parseJSFunc(JSfuncs[fun]);
    }
  }
  // Returns a native JS wrapper for a C function. This is similar to ccall, but
  // returns a function you can call repeatedly in a normal way. For example:
  //
  //   var my_function = cwrap('my_c_function', 'number', ['number', 'number']);
  //   alert(my_function(5, 22));
  //   alert(my_function(99, 12));
  //
  cwrap = function cwrap(ident, returnType, argTypes) {
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    funcstr += "assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      funcstr += JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=' + convertCode.returnValue + ';';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    if (!numericArgs) {
      // If we had a stack, restore it
      funcstr += JSsource['stackRestore'].body + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["cwrap"] = cwrap;
Module["ccall"] = ccall;

// Sets a value in memory in a dynamic way at run-time. Uses the
// type data. This is the same as makeSetValue, except that
// makeSetValue is done at compile-time and generates the needed
// code then, whereas this function picks the right code at
// run-time.
// Note that setValue and getValue only do *aligned* writes and reads!
// Note that ccall uses JS types as for defining types, while setValue and
// getValue need LLVM types ('i8', 'i32') - this is a lower-level operation
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;

// Parallel to setValue.
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module['allocate'] = allocate;

function Pointer_stringify(ptr, /* optional */ length) {
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = false;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    if (t >= 128) hasUtf = true;
    else if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (!hasUtf) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }

  var utf8 = new Runtime.UTF8Processor();
  for (i = 0; i < length; i++) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    ret += utf8.processCChar(t);
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.
function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module['UTF16ToString'] = UTF16ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16LE form. The copy will require at most (str.length*2+1)*2 bytes of space in the HEAP.
function stringToUTF16(str, outPtr) {
  for(var i = 0; i < str.length; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[(((outPtr)+(i*2))>>1)]=codeUnit;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[(((outPtr)+(str.length*2))>>1)]=0;
}
Module['stringToUTF16'] = stringToUTF16;

// Given a pointer 'ptr' to a null-terminated UTF32LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.
function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module['UTF32ToString'] = UTF32ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32LE form. The copy will require at most (str.length+1)*4 bytes of space in the HEAP,
// but can use less, since str.length does not return the number of characters in the string, but the number of UTF-16 code units in the string.
function stringToUTF32(str, outPtr) {
  var iChar = 0;
  for(var iCodeUnit = 0; iCodeUnit < str.length; ++iCodeUnit) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    var codeUnit = str.charCodeAt(iCodeUnit); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++iCodeUnit);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[(((outPtr)+(iChar*4))>>2)]=codeUnit;
    ++iChar;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[(((outPtr)+(iChar*4))>>2)]=0;
}
Module['stringToUTF32'] = stringToUTF32;

function demangle(func) {
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    return parse();
  } catch(e) {
    return func;
  }
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function stackTrace() {
  var stack = new Error().stack;
  return stack ? demangleAll(stack) : '(no stack trace available)'; // Stack trace is not available at least on IE10 and Safari 6.
}

// Memory management

var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return (x+4095)&-4096;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk

function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}

var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;

var totalMemory = 4096;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be more reasonable');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);

// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;

function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
    Module.printErr('Exiting runtime. Any attempt to access the compiled C code may fail from now. If you want to keep the runtime alive, set Module["noExitRuntime"] = true or build with -s NO_EXIT_RUNTIME=1');
  }
  callRuntimeCallbacks(__ATEXIT__);
  runtimeInitialized = false;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;

// Tools

// This processes a JS string into a C-line array of numbers, 0-terminated.
// For LLVM-originating strings, see parser.js:parseLLVMString function
function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

// Write a Javascript array to somewhere in the heap
function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[(((buffer)+(i))>>0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; i++) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[(((buffer)+(i))>>0)]=str.charCodeAt(i);
  }
  if (!dontAddNull) HEAP8[(((buffer)+(str.length))>>0)]=0;
}
Module['writeAsciiToMemory'] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


var memoryInitializer = null;

// === Body ===
var __ZTVN10__cxxabiv117__class_type_infoE = 29856;
var __ZTVN10__cxxabiv120__si_class_type_infoE = 29984;




STATIC_BASE = 8;

STATICTOP = STATIC_BASE + Runtime.alignMemory(31675);
  /* global initializers */ __ATINIT__.push({ func: function() { __GLOBAL__I_a() } });
  

/* memory initializer */ allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,114,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,80,77,88,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,119,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,97,116,97,46,100,112,109,0,0,0,0,0,0,0,0,43,44,25,42,44,6,25,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,72,83,80,69,82,82,79,82,0,0,0,0,0,0,0,208,116,0,0,96,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,2,0,4,0,4,0,8,0,8,0,8,0,8,0,8,0,8,0,8,0,8,0,8,0,8,0,32,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,10,0,0,0,0,0,0,58,0,0,0,0,0,0,0,37,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,149,207,144,148,150,188,0,0,140,94,0,0,0,0,0,0,40,37,100,44,37,100,44,37,100,44,37,100,41,0,0,0,148,122,151,241,0,0,0,0,131,130,129,91,131,104,0,0,142,103,151,112,131,84,131,67,131,89,0,0,0,0,0,0,131,111,131,98,131,116,131,64,131,84,131,67,131,89,0,0,40,147,224,151,101,37,100,98,121,116,101,115,130,204,136,234,149,148,130,240,149,142,166,130,181,130,196,130,162,130,220,130,183,41,13,10,0,0,0,0,147,224,151,101,58,0,0,0,37,48,52,88,0,0,0,0,32,37,48,50,88,0,0,0,40,148,122,151,241,130,204,136,234,149,148,130,190,130,175,130,240,149,142,166,41,13,10,0,40,37,100,41,61,37,115,13,10,0,0,0,0,0,0,0,76,65,66,69,76,32,36,37,48,56,120,0,0,0,0,0,83,84,82,85,67,84,32,40,69,109,112,116,121,41,0,0,83,84,82,85,67,84,32,73,68,37,100,45,37,100,32,80,84,82,36,37,48,56,120,32,83,73,90,69,37,100,40,37,100,41,0,0,0,0,0,0,67,79,77,80,84,82,32,36,37,48,56,120,0,0,0,0,85,110,107,110,111,119,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,88,6,0,0,96,6,0,0,128,6,0,0,152,6,0,0,184,6,0,0,216,6,0,0,248,6,0,0,24,7,0,0,48,7,0,0,88,7,0,0,136,7,0,0,176,7,0,0,208,7,0,0,248,7,0,0,24,8,0,0,64,8,0,0,96,8,0,0,128,8,0,0,168,8,0,0,208,8,0,0,224,8,0,0,8,9,0,0,48,9,0,0,80,9,0,0,112,9,0,0,144,9,0,0,176,9,0,0,208,9,0,0,240,9,0,0,16,10,0,0,56,10,0,0,104,10,0,0,144,10,0,0,184,10,0,0,216,10,0,0,0,11,0,0,40,11,0,0,72,11,0,0,104,11,0,0,136,11,0,0,184,11,0,0,224,11,0,0,64,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,131,86,131,88,131,101,131,128,131,71,131,137,129,91,130,170,148,173,144,182,130,181,130,220,130,181,130,189,0,0,0,0,149,182,150,64,130,170,138,212,136,225,130,193,130,196,130,162,130,220,130,183,0,0,0,0,131,112,131,137,131,129,129,91,131,94,130,204,146,108,130,170,136,217,143,237,130,197,130,183,0,0,0,0,0,0,0,0,140,118,142,90,142,174,130,197,131,71,131,137,129,91,130,170,148,173,144,182,130,181,130,220,130,181,130,189,0,0,0,0,131,112,131,137,131,129,129,91,131,94,130,204,143,200,151,170,130,205,130,197,130,171,130,220,130,185,130,241,0,0,0,0,131,112,131,137,131,129,129,91,131,94,130,204,140,94,130,170,136,225,130,162,130,220,130,183,0,0,0,0,0,0,0,0,148,122,151,241,130,204,151,118,145,102,130,170,150,179,140,248,130,197,130,183,0,0,0,0,151,76,140,248,130,200,131,137,131,120,131,139,130,170,142,119,146,232,130,179,130,234,130,196,130,162,130,220,130,185,130,241,0,0,0,0,0,0,0,0,131,84,131,117,131,139,129,91,131,96,131,147,130,226,131,139,129,91,131,118,130,204,131,108,131,88,131,103,130,170,144,91,130,183,130,172,130,220,130,183,0,0,0,0,0,0,0,0,131,84,131,117,131,139,129,91,131,96,131,147,138,79,130,204,114,101,116,117,114,110,130,205,150,179,140,248,130,197,130,183,0,0,0,0,0,0,0,0,114,101,112,101,97,116,138,79,130,197,130,204,108,111,111,112,130,205,150,179,140,248,130,197,130,183,0,0,0,0,0,0,131,116,131,64,131,67,131,139,130,170,140,169,130,194,130,169,130,231,130,200,130,162,130,169,150,179,140,248,130,200,150,188,145,79,130,197,130,183,0,0,137,230,145,156,131,116,131,64,131,67,131,139,130,170,130,160,130,232,130,220,130,185,130,241,0,0,0,0,0,0,0,0,138,79,149,148,131,116,131,64,131,67,131,139,140,196,130,209,143,111,130,181,146,134,130,204,131,71,131,137,129,91,130,197,130,183,0,0,0,0,0,0,140,118,142,90,142,174,130,197,131,74,131,98,131,82,130,204,139,76,143,113,130,170,136,225,130,162,130,220,130,183,0,0,131,112,131,137,131,129,129,91,131,94,130,204,144,148,130,170,145,189,130,183,130,172,130,220,130,183,0,0,0,0,0,0,149,182,142,154,151,241,142,174,130,197,136,181,130,166,130,233,149,182,142,154,144,148,130,240,137,122,130,166,130,220,130,181,130,189,0,0,0,0,0,0,145,227,147,252,130,197,130,171,130,200,130,162,149,207,144,148,150,188,130,240,142,119,146,232,130,181,130,196,130,162,130,220,130,183,0,0,0,0,0,0,48,130,197,143,156,142,90,130,181,130,220,130,181,130,189,0,131,111,131,98,131,116,131,64,131,73,129,91,131,111,129,91,131,116,131,141,129,91,130,170,148,173,144,182,130,181,130,220,130,181,130,189,0,0,0,0,131,84,131,124,129,91,131,103,130,179,130,234,130,200,130,162,139,64,148,130,240,145,73,145,240,130,181,130,220,130,181,130,189,0,0,0,0,0,0,0,140,118,142,90,142,174,130,204,131,74,131,98,131,82,130,170,144,91,130,183,130,172,130,220,130,183,0,0,0,0,0,0,149,207,144,148,150,188,130,170,142,119,146,232,130,179,130,234,130,196,130,162,130,220,130,185,130,241,0,0,0,0,0,0,144,174,144,148,136,200,138,79,130,170,142,119,146,232,130,179,130,234,130,196,130,162,130,220,130,183,0,0,0,0,0,0,148,122,151,241,130,204,151,118,145,102,143,145,142,174,130,170,138,212,136,225,130,193,130,196,130,162,130,220,130,183,0,0,131,129,131,130,131,138,130,204,138,109,149,219,130,170,130,197,130,171,130,220,130,185,130,241,130,197,130,181,130,189,0,0,131,94,131,67,131,118,130,204,143,137,138,250,137,187,130,201,142,184,148,115,130,181,130,220,130,181,130,189,0,0,0,0,138,214,144,148,130,201,136,248,144,148,130,170,144,221,146,232,130,179,130,234,130,196,130,162,130,220,130,185,130,241,0,0,131,88,131,94,131,98,131,78,151,204,136,230,130,204,131,73,129,91,131,111,129,91,131,116,131,141,129,91,130,197,130,183,0,0,0,0,0,0,0,0,150,179,140,248,130,200,150,188,145,79,130,170,131,112,131,137,131,129,129,91,131,94,129,91,130,201,142,119,146,232,130,179,130,234,130,196,130,162,130,220,130,183,0,0,0,0,0,0,136,217,130,200,130,233,140,94,130,240,142,157,130,194,148,122,151,241,149,207,144,148,130,201,145,227,147,252,130,181,130,220,130,181,130,189,0,0,0,0,138,214,144,148,130,204,131,112,131,137,131,129,129,91,131,94,129,91,139,76,143,113,130,170,149,115,144,179,130,197,130,183,0,0,0,0,0,0,0,0,131,73,131,117,131,87,131,70,131,78,131,103,144,148,130,170,145,189,130,183,130,172,130,220,130,183,0,0,0,0,0,0,148,122,151,241,129,69,138,214,144,148,130,198,130,181,130,196,142,103,151,112,130,197,130,171,130,200,130,162,140,94,130,197,130,183,0,0,0,0,0,0,131,130,131,87,131,133,129,91,131,139,149,207,144,148,130,170,142,119,146,232,130,179,130,234,130,196,130,162,130,220,130,185,130,241,0,0,0,0,0,0,131,130,131,87,131,133,129,91,131,139,149,207,144,148,130,204,142,119,146,232,130,170,150,179,140,248,130,197,130,183,0,0,149,207,144,148,140,94,130,204,149,207,138,183,130,201,142,184,148,115,130,181,130,220,130,181,130,189,0,0,0,0,0,0,138,79,149,148,68,76,76,130,204,140,196,130,209,143,111,130,181,130,201,142,184,148,115,130,181,130,220,130,181,130,189,0,138,79,149,148,131,73,131,117,131,87,131,70,131,78,131,103,130,204,140,196,130,209,143,111,130,181,130,201,142,184,148,115,130,181,130,220,130,181,130,189,0,0,0,0,0,0,0,0,138,214,144,148,130,204,150,223,130,232,146,108,130,170,144,221,146,232,130,179,130,234,130,196,130,162,130,220,130,185,130,241,129,66,0,0,0,0,0,0,138,214,144,148,130,240,150,189,151,223,130,198,130,181,130,196,139,76,143,113,130,181,130,196,130,162,130,220,130,183,129,66,10,40,72,83,80,50,130,169,130,231,138,214,144,148,137,187,130,179,130,234,130,189,150,188,145,79,130,240,142,103,151,112,130,181,130,196,130,162,130,233,137,194,148,144,171,130,170,130,160,130,232,130,220,130,183,41,0,0,0,0,0,0,0,0,42,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,35,43,45,46,48,49,50,51,52,53,54,55,56,57,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,111,117,98,108,101,0,0,0,0,0,0,0,0,0,0,105,110,116,0,0,0,0,0,0,0,0,0,0,0,0,0,108,97,98,101,108,0,0,0,0,0,0,0,0,0,0,0,115,116,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,100,0,0,0,0,0,0,37,102,0,0,0,0,0,0,115,116,114,117,99,116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,101,120,58,73,68,37,100,32,40,37,100,44,37,100,41,40,37,100,120,37,100,41,0,84,101,120,58,102,97,105,108,101,100,0,0,0,0,0,0,84,101,120,58,73,68,37,100,32,40,37,100,44,37,100,41,32,67,108,101,97,114,0,0,123,32,118,97,114,32,100,32,61,32,100,111,99,117,109,101,110,116,46,103,101,116,69,108,101,109,101,110,116,66,121,73,100,40,39,104,115,112,51,100,105,115,104,70,111,110,116,68,105,118,39,41,59,32,105,102,32,40,33,100,41,32,123,32,100,32,61,32,100,111,99,117,109,101,110,116,46,99,114,101,97,116,101,69,108,101,109,101,110,116,40,34,100,105,118,34,41,59,32,100,46,105,100,32,61,32,39,104,115,112,51,100,105,115,104,70,111,110,116,68,105,118,39,59,32,100,46,115,116,121,108,101,46,115,101,116,80,114,111,112,101,114,116,121,40,34,119,105,100,116,104,34,44,32,34,97,117,116,111,34,41,59,32,100,46,115,116,121,108,101,46,115,101,116,80,114,111,112,101,114,116,121,40,34,104,101,105,103,104,116,34,44,32,34,97,117,116,111,34,41,59,32,100,46,115,116,121,108,101,46,115,101,116,80,114,111,112,101,114,116,121,40,34,112,111,115,105,116,105,111,110,34,44,32,34,97,98,115,111,108,117,116,101,34,41,59,32,100,46,115,116,121,108,101,46,115,101,116,80,114,111,112,101,114,116,121,40,34,118,105,115,105,98,105,108,105,116,121,34,44,32,34,104,105,100,100,101,110,34,41,59,32,125,32,100,46,115,116,121,108,101,46,115,101,116,80,114,111,112,101,114,116,121,40,34,102,111,110,116,34,44,32,36,49,32,43,32,34,112,120,32,39,115,97,110,115,45,115,101,114,105,102,39,34,41,59,32,100,111,99,117,109,101,110,116,46,98,111,100,121,46,97,112,112,101,110,100,67,104,105,108,100,40,100,41,59,32,118,97,114,32,116,32,61,32,100,111,99,117,109,101,110,116,46,99,114,101,97,116,101,84,101,120,116,78,111,100,101,40,80,111,105,110,116,101,114,95,115,116,114,105,110,103,105,102,121,40,36,48,41,41,59,32,105,102,32,40,100,46,104,97,115,67,104,105,108,100,78,111,100,101,115,40,41,41,32,100,46,114,101,109,111,118,101,67,104,105,108,100,40,100,46,102,105,114,115,116,67,104,105,108,100,41,59,32,100,46,97,112,112,101,110,100,67,104,105,108,100,40,116,41,59,32,125,0,0,0,0,0,0,0,0,123,32,118,97,114,32,100,32,61,32,100,111,99,117,109,101,110,116,46,103,101,116,69,108,101,109,101,110,116,66,121,73,100,40,39,104,115,112,51,100,105,115,104,70,111,110,116,68,105,118,39,41,59,32,114,101,116,117,114,110,32,100,46,99,108,105,101,110,116,87,105,100,116,104,59,32,125,0,0,0,123,32,118,97,114,32,100,32,61,32,100,111,99,117,109,101,110,116,46,103,101,116,69,108,101,109,101,110,116,66,121,73,100,40,39,104,115,112,51,100,105,115,104,70,111,110,116,68,105,118,39,41,59,32,114,101,116,117,114,110,32,100,46,99,108,105,101,110,116,72,101,105,103,104,116,59,32,125,0,0,123,32,118,97,114,32,99,97,110,118,97,115,32,61,32,100,111,99,117,109,101,110,116,46,103,101,116,69,108,101,109,101,110,116,66,121,73,100,40,39,104,115,112,51,100,105,115,104,70,111,110,116,67,97,110,118,97,115,39,41,59,32,105,102,32,40,99,97,110,118,97,115,41,32,123,32,100,111,99,117,109,101,110,116,46,98,111,100,121,46,114,101,109,111,118,101,67,104,105,108,100,40,99,97,110,118,97,115,41,59,32,125,32,99,97,110,118,97,115,32,61,32,100,111,99,117,109,101,110,116,46,99,114,101,97,116,101,69,108,101,109,101,110,116,40,34,99,97,110,118,97,115,34,41,59,32,99,97,110,118,97,115,46,105,100,32,61,32,39,104,115,112,51,100,105,115,104,70,111,110,116,67,97,110,118,97,115,39,59,32,99,97,110,118,97,115,46,115,116,121,108,101,46,115,101,116,80,114,111,112,101,114,116,121,40,34,118,105,115,105,98,105,108,105,116,121,34,44,32,34,104,105,100,100,101,110,34,41,59,32,99,97,110,118,97,115,46,119,105,100,116,104,32,61,32,36,50,59,32,99,97,110,118,97,115,46,104,101,105,103,104,116,32,61,32,36,51,59,32,100,111,99,117,109,101,110,116,46,98,111,100,121,46,97,112,112,101,110,100,67,104,105,108,100,40,99,97,110,118,97,115,41,59,32,118,97,114,32,99,111,110,116,101,120,116,32,61,32,99,97,110,118,97,115,46,103,101,116,67,111,110,116,101,120,116,40,34,50,100,34,41,59,32,99,111,110,116,101,120,116,46,102,111,110,116,32,61,32,36,49,32,43,32,34,112,120,32,39,115,97,110,115,45,115,101,114,105,102,39,34,59,32,118,97,114,32,109,115,103,32,61,32,80,111,105,110,116,101,114,95,115,116,114,105,110,103,105,102,121,40,36,48,41,59,32,99,111,110,116,101,120,116,46,99,108,101,97,114,82,101,99,116,32,40,32,48,32,44,32,48,32,44,32,36,50,32,44,32,36,51,41,59,32,99,111,110,116,101,120,116,46,102,105,108,108,83,116,121,108,101,32,61,32,39,114,103,98,97,40,50,53,53,44,32,50,53,53,44,32,50,53,53,44,32,50,53,53,41,39,59,32,99,111,110,116,101,120,116,46,102,105,108,108,84,101,120,116,40,109,115,103,44,32,48,44,32,36,49,41,59,32,99,111,110,115,111,108,101,46,108,111,103,40,109,115,103,41,59,32,71,76,99,116,120,46,116,101,120,73,109,97,103,101,50,68,40,71,76,99,116,120,46,84,69,88,84,85,82,69,95,50,68,44,32,48,44,32,71,76,99,116,120,46,82,71,66,65,44,32,71,76,99,116,120,46,82,71,66,65,44,32,71,76,99,116,120,46,85,78,83,73,71,78,69,68,95,66,89,84,69,44,32,99,97,110,118,97,115,41,59,32,125,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,73,110,105,116,58,72,71,73,79,83,99,114,101,101,110,40,37,100,44,37,100,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,99,97,108,101,40,37,102,44,37,102,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,191,0,0,128,63,0,0,0,0,0,0,128,63,0,0,128,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,0,0,0,0,0,0,128,63,0,0,128,63,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,191,0,0,128,63,0,0,0,0,0,0,128,63,0,0,128,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,0,0,0,0,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,115,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,83,80,72,69,68,126,126,0,95,49,95,95,95,95,95,95,95,95,95,50,95,95,95,95,95,95,95,95,95,51,95,95,95,95,95,95,0,0,0,24,35,32,24,21,20,78,78,72,83,80,95,87,88,0,0,72,83,80,95,87,89,0,0,72,83,80,95,83,88,0,0,72,83,80,95,83,89,0,0,72,83,80,95,65,85,84,79,83,67,65,76,69,0,0,0,83,99,114,101,101,110,32,37,102,32,37,102,10,0,0,0,83,116,97,114,116,117,112,32,102,97,105,108,101,100,46,0,72,83,80,68,105,115,104,32,118,101,114,51,46,52,0,0,35,69,114,114,111,114,32,37,100,10,45,45,62,37,115,10,0,0,0,0,0,0,0,0,35,69,114,114,111,114,32,37,100,32,105,110,32,108,105,110,101,32,37,100,32,40,37,115,41,10,45,45,62,37,115,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,101,109,115,99,114,105,112,116,101,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,110,97,109,101,0,0,0,0,101,114,114,111,114,0,0,0,73,78,73,84,32,37,100,120,37,100,32,37,115,10,0,0,85,110,97,98,108,101,32,116,111,32,105,110,105,116,105,97,108,105,122,101,32,83,68,76,58,32,37,115,10,0,0,0,85,110,97,98,108,101,32,116,111,32,115,101,116,32,118,105,100,101,111,32,109,111,100,101,58,32,37,115,10,0,0,0,0,0,0,0,0,0,0,0,114,101,116,32,61,61,32,48,0,0,0,0,0,0,0,0,101,109,115,99,114,105,112,116,101,110,47,109,109,109,97,110,46,99,112,112,0,0,0,0,77,77,77,97,110,0,0,0,114,98,0,0,0,0,0,0,91,77,77,77,97,110,93,32,70,97,105,108,101,100,32,37,115,32,111,110,32,98,97,110,107,32,35,37,100,32,40,37,100,41,0,0,0,0,0,0,91,77,77,77,97,110,93,32,76,111,97,100,101,100,32,37,115,32,111,110,32,98,97,110,107,32,35,37,100,0,0,0,0,0,0,0,0,0,0,0,117,110,107,110,111,119,110,32,105,109,97,103,101,32,116,121,112,101,0,0,0,0,0,0,46,186,232,62,0,0,0,0,0,0,128,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,35,63,82,65,68,73,65,78,67,69,0,0,0,0,0,0,70,79,82,77,65,84,61,51,50,45,98,105,116,95,114,108,101,95,114,103,98,101,0,0,45,89,32,0,0,0,0,0,43,88,32,0,0,0,0,0,110,111,116,32,71,73,70,0,0,0,0,0,0,0,0,0,109,117,108,116,105,112,108,101,32,73,72,68,82,0,0,0,98,97,100,32,73,72,68,82,32,108,101,110,0,0,0,0,116,111,111,32,108,97,114,103,101,0,0,0,0,0,0,0,56,98,105,116,32,111,110,108,121,0,0,0,0,0,0,0,98,97,100,32,99,116,121,112,101,0,0,0,0,0,0,0,98,97,100,32,99,111,109,112,32,109,101,116,104,111,100,0,98,97,100,32,102,105,108,116,101,114,32,109,101,116,104,111,100,0,0,0,0,0,0,0,98,97,100,32,105,110,116,101,114,108,97,99,101,32,109,101,116,104,111,100,0,0,0,0,48,45,112,105,120,101,108,32,105,109,97,103,101,0,0,0,102,105,114,115,116,32,110,111,116,32,73,72,68,82,0,0,105,110,118,97,108,105,100,32,80,76,84,69,0,0,0,0,116,82,78,83,32,97,102,116,101,114,32,73,68,65,84,0,116,82,78,83,32,98,101,102,111,114,101,32,80,76,84,69,0,0,0,0,0,0,0,0,98,97,100,32,116,82,78,83,32,108,101,110,0,0,0,0,116,82,78,83,32,119,105,116,104,32,97,108,112,104,97,0,110,111,32,80,76,84,69,0,111,117,116,111,102,109,101,109,0,0,0,0,0,0,0,0,111,117,116,111,102,100,97,116,97,0,0,0,0,0,0,0,110,111,32,73,68,65,84,0,88,88,88,88,32,99,104,117,110,107,32,110,111,116,32,107,110,111,119,110,0,0,0,0,115,45,62,105,109,103,95,111,117,116,95,110,32,61,61,32,52,0,0,0,0,0,0,0,101,109,115,99,114,105,112,116,101,110,47,115,116,98,95,105,109,97,103,101,46,99,0,0,115,116,98,105,95,100,101,95,105,112,104,111,110,101,0,0,111,117,116,95,110,32,61,61,32,50,32,124,124,32,111,117,116,95,110,32,61,61,32,52,0,0,0,0,0,0,0,0,99,111,109,112,117,116,101,95,116,114,97,110,115,112,97,114,101,110,99,121,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,8,0,0,0,8,0,0,0,4,0,0,0,4,0,0,0,2,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,4,0,0,0,4,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,111,117,116,95,110,32,61,61,32,115,45,62,105,109,103,95,110,32,124,124,32,111,117,116,95,110,32,61,61,32,115,45,62,105,109,103,95,110,43,49,0,0,0,0,0,0,0,0,99,114,101,97,116,101,95,112,110,103,95,105,109,97,103,101,95,114,97,119,0,0,0,0,110,111,116,32,101,110,111,117,103,104,32,112,105,120,101,108,115,0,0,0,0,0,0,0,105,110,118,97,108,105,100,32,102,105,108,116,101,114,0,0,0,1,0,5,6,0,0,0,105,109,103,95,110,43,49,32,61,61,32,111,117,116,95,110,0,0,0,0,0,0,0,0,137,80,78,71,13,10,26,10,98,97,100,32,112,110,103,32,115,105,103,0,0,0,0,0,110,111,32,83,79,73,0,0,110,111,32,83,79,70,0,0,98,97,100,32,83,79,70,32,108,101,110,0,0,0,0,0,111,110,108,121,32,56,45,98,105,116,0,0,0,0,0,0,110,111,32,104,101,97,100,101,114,32,104,101,105,103,104,116,0,0,0,0,0,0,0,0,48,32,119,105,100,116,104,0,98,97,100,32,99,111,109,112,111,110,101,110,116,32,99,111,117,110,116,0,0,0,0,0,98,97,100,32,99,111,109,112,111,110,101,110,116,32,73,68,0,0,0,0,0,0,0,0,98,97,100,32,72,0,0,0,98,97,100,32,86,0,0,0,98,97,100,32,84,81,0,0,101,120,112,101,99,116,101,100,32,109,97,114,107,101,114,0,112,114,111,103,114,101,115,115,105,118,101,32,106,112,101,103,0,0,0,0,0,0,0,0,98,97,100,32,68,82,73,32,108,101,110,0,0,0,0,0,98,97,100,32,68,81,84,32,116,121,112,101,0,0,0,0,98,97,100,32,68,81,84,32,116,97,98,108,101,0,0,0,0,1,8,16,9,2,3,10,17,24,32,25,18,11,4,5,12,19,26,33,40,48,41,34,27,20,13,6,7,14,21,28,35,42,49,56,57,50,43,36,29,22,15,23,30,37,44,51,58,59,52,45,38,31,39,46,53,60,61,54,47,55,62,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,0,98,97,100,32,68,72,84,32,104,101,97,100,101,114,0,0,98,97,100,32,99,111,100,101,32,108,101,110,103,116,104,115,0,0,0,0,0,0,0,0,110,111,116,32,72,68,82,0,117,110,115,117,112,112,111,114,116,101,100,32,102,111,114,109,97,116,0,0,0,0,0,0,117,110,115,117,112,112,111,114,116,101,100,32,100,97,116,97,32,108,97,121,111,117,116,0,105,110,118,97,108,105,100,32,100,101,99,111,100,101,100,32,115,99,97,110,108,105,110,101,32,108,101,110,103,116,104,0,35,63,82,65,68,73,65,78,67,69,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,98,97,100,32,104,117,102,102,109,97,110,32,99,111,100,101,0,0,0,0,0,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,13,0,0,0,15,0,0,0,17,0,0,0,19,0,0,0,23,0,0,0,27,0,0,0,31,0,0,0,35,0,0,0,43,0,0,0,51,0,0,0,59,0,0,0,67,0,0,0,83,0,0,0,99,0,0,0,115,0,0,0,131,0,0,0,163,0,0,0,195,0,0,0,227,0,0,0,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,7,0,0,0,9,0,0,0,13,0,0,0,17,0,0,0,25,0,0,0,33,0,0,0,49,0,0,0,65,0,0,0,97,0,0,0,129,0,0,0,193,0,0,0,1,1,0,0,129,1,0,0,1,2,0,0,1,3,0,0,1,4,0,0,1,6,0,0,1,8,0,0,1,12,0,0,1,16,0,0,1,24,0,0,1,32,0,0,1,48,0,0,1,64,0,0,1,96,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,4,0,0,0,5,0,0,0,5,0,0,0,6,0,0,0,6,0,0,0,7,0,0,0,7,0,0,0,8,0,0,0,8,0,0,0,9,0,0,0,9,0,0,0,10,0,0,0,10,0,0,0,11,0,0,0,11,0,0,0,12,0,0,0,12,0,0,0,13,0,0,0,13,0,0,0,0,0,0,0,0,0,0,0,98,97,100,32,100,105,115,116,0,0,0,0,0,0,0,0,111,117,116,112,117,116,32,98,117,102,102,101,114,32,108,105,109,105,116,0,0,0,0,0,122,45,62,115,105,122,101,91,98,93,32,61,61,32,115,0,122,104,117,102,102,109,97,110,95,100,101,99,111,100,101,0,98,105,116,115,32,60,61,32,49,54,0,0,0,0,0,0,98,105,116,95,114,101,118,101,114,115,101,0,0,0,0,0,122,45,62,99,111,100,101,95,98,117,102,102,101,114,32,60,32,40,49,85,32,60,60,32,122,45,62,110,117,109,95,98,105,116,115,41,0,0,0,0,102,105,108,108,95,98,105,116,115,0,0,0,0,0,0,0,16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15,0,0,0,0,0,99,32,62,61,32,48,32,38,38,32,99,32,60,32,49,57,0,0,0,0,0,0,0,0,99,111,109,112,117,116,101,95,104,117,102,102,109,97,110,95,99,111,100,101,115,0,0,0,99,32,61,61,32,49,56,0,98,97,100,32,99,111,100,101,108,101,110,103,116,104,115,0,115,105,122,101,115,91,105,93,32,60,61,32,40,49,32,60,60,32,105,41,0,0,0,0,122,98,117,105,108,100,95,104,117,102,102,109,97,110,0,0,97,45,62,110,117,109,95,98,105,116,115,32,61,61,32,48,0,0,0,0,0,0,0,0,112,97,114,115,101,95,117,110,99,111,109,112,114,101,115,115,101,100,95,98,108,111,99,107,0,0,0,0,0,0,0,0,122,108,105,98,32,99,111,114,114,117,112,116,0,0,0,0,114,101,97,100,32,112,97,115,116,32,98,117,102,102,101,114,0,0,0,0,0,0,0,0,98,97,100,32,122,108,105,98,32,104,101,97,100,101,114,0,110,111,32,112,114,101,115,101,116,32,100,105,99,116,0,0,98,97,100,32,99,111,109,112,114,101,115,115,105,111,110,0,98,97,100,32,112,97,108,101,116,116,101,0,0,0,0,0,98,97,100,32,102,105,108,101,0,0,0,0,0,0,0,0,114,101,113,95,99,111,109,112,32,62,61,32,49,32,38,38,32,114,101,113,95,99,111,109,112,32,60,61,32,52,0,0,99,111,110,118,101,114,116,95,102,111,114,109,97,116,0,0,48,0,0,0,0,0,0,0,98,97,100,32,102,111,114,109,97,116,0,0,0,0,0,0,83,128,246,52,0,0,0,0,80,73,67,84,0,0,0,0,110,111,116,32,80,83,68,0,119,114,111,110,103,32,118,101,114,115,105,111,110,0,0,0,119,114,111,110,103,32,99,104,97,110,110,101,108,32,99,111,117,110,116,0,0,0,0,0,117,110,115,117,112,112,111,114,116,101,100,32,98,105,116,32,100,101,112,116,104,0,0,0,119,114,111,110,103,32,99,111,108,111,114,32,102,111,114,109,97,116,0,0,0,0,0,0,98,97,100,32,73,109,97,103,101,32,68,101,115,99,114,105,112,116,111,114,0,0,0,0,109,105,115,115,105,110,103,32,99,111,108,111,114,32,116,97,98,108,101,0,0,0,0,0,117,110,107,110,111,119,110,32,99,111,100,101,0,0,0,0,110,111,32,99,108,101,97,114,32,99,111,100,101,0,0,0,116,111,111,32,109,97,110,121,32,99,111,100,101,115,0,0,105,108,108,101,103,97,108,32,99,111,100,101,32,105,110,32,114,97,115,116,101,114,0,0,110,111,116,32,66,77,80,0,117,110,107,110,111,119,110,32,66,77,80,0,0,0,0,0,98,97,100,32,66,77,80,0,109,111,110,111,99,104,114,111,109,101,0,0,0,0,0,0,66,77,80,32,82,76,69,0,104,115,122,32,61,61,32,49,48,56,0,0,0,0,0,0,98,109,112,95,108,111,97,100,0,0,0,0,0,0,0,0,105,110,118,97,108,105,100,0,98,97,100,32,98,112,112,0,98,97,100,32,109,97,115,107,115,0,0,0,0,0,0,0,98,97,100,32,114,101,113,95,99,111,109,112,0,0,0,0,0,0,0,0,1,0,0,0,3,0,0,0,7,0,0,0,15,0,0,0,31,0,0,0,63,0,0,0,127,0,0,0,255,0,0,0,255,1,0,0,255,3,0,0,255,7,0,0,255,15,0,0,255,31,0,0,255,63,0,0,255,127,0,0,255,255,0,0,0,0,0,0,40,40,40,106,45,62,99,111,100,101,95,98,117,102,102,101,114,41,32,62,62,32,40,51,50,32,45,32,104,45,62,115,105,122,101,91,99,93,41,41,32,38,32,98,109,97,115,107,91,104,45,62,115,105,122,101,91,99,93,93,41,32,61,61,32,104,45,62,99,111,100,101,91,99,93,0,0,0,0,0,100,101,99,111,100,101,0,0,98,97,100,32,83,79,83,32,99,111,109,112,111,110,101,110,116,32,99,111,117,110,116,0,98,97,100,32,83,79,83,32,108,101,110,0,0,0,0,0,98,97,100,32,68,67,32,104,117,102,102,0,0,0,0,0,98,97,100,32,65,67,32,104,117,102,102,0,0,0,0,0,98,97,100,32,83,79,83,0,119,98,0,0,0,0,0,0,114,43,98,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,32,99,111,110,115,111,108,101,46,108,111,103,40,80,111,105,110,116,101,114,95,115,116,114,105,110,103,105,102,121,40,36,48,41,41,59,32,125,0,83,116,57,116,121,112,101,95,105,110,102,111,0,0,0,0,168,116,0,0,24,116,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,54,95,95,115,104,105,109,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,0,40,117,0,0,48,116,0,0,40,116,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,40,117,0,0,104,116,0,0,88,116,0,0,0,0,0,0,0,0,0,0,144,116,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,0,0,0,0,16,117,0,0,1,0,0,0,9,0,0,0,3,0,0,0,4,0,0,0,10,0,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,54,95,95,101,110,117,109,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,0,40,117,0,0,232,116,0,0,88,116,0,0,0,0,0,0,0,0,0,0,112,117,0,0,1,0,0,0,11,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,48,95,95,115,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,40,117,0,0,72,117,0,0,144,116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,176,119,0,0,15,0,0,0,16,0,0,0,17,0,0,0,0,0,0,0,115,116,100,58,58,98,97,100,95,97,108,108,111,99,0,0,83,116,57,98,97,100,95,97,108,108,111,99,0,0,0,0,40,117,0,0,160,119,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,3,4,5,6,7,8,9,255,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,1,2,4,7,3,6,5,0,0,0,0,0,0,0,0,105,110,102,105,110,105,116,121,0,0,0,0,0,0,0,0,110,97,110,0,0,0,0,0,95,112,137,0,255,9,47,15,10,0,0,0,100,0,0,0,232,3,0,0,16,39,0,0,160,134,1,0,64,66,15,0,128,150,152,0,0,225,245,5,17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,45,43,32,32,32,48,88,48,120,0,0,0,0,0,0,0,40,110,117,108,108,41,0,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,0,0,0,0,0,105,110,102,0,0,0,0,0,73,78,70,0,0,0,0,0,110,97,110,0,0,0,0,0,78,65,78,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);




var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}


  
  function _atexit(func, arg) {
      __ATEXIT__.unshift({ func: func, arg: arg });
    }function ___cxa_atexit() {
  return _atexit.apply(null, arguments)
  }

  
   
  Module["_rand_r"] = _rand_r;
  
  var ___rand_seed=allocate([0x0273459b, 0, 0, 0], "i32", ALLOC_STATIC); 
  Module["_rand"] = _rand;

  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value;
      return value;
    }function _strerror_r(errnum, strerrbuf, buflen) {
      if (errnum in ERRNO_MESSAGES) {
        if (ERRNO_MESSAGES[errnum].length > buflen - 1) {
          return ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          var msg = ERRNO_MESSAGES[errnum];
          writeAsciiToMemory(msg, strerrbuf);
          return 0;
        }
      } else {
        return ___setErrNo(ERRNO_CODES.EINVAL);
      }
    }
  
  function _malloc(bytes) {
      /* Over-allocate to make sure it is byte-aligned by 8.
       * This will leak memory, but this is only the dummy
       * implementation (replaced by dlmalloc normally) so
       * not an issue.
       */
      var ptr = Runtime.dynamicAlloc(bytes + 8);
      return (ptr+8) & 0xFFFFFFF8;
    }
  Module["_malloc"] = _malloc;function _strerror(errnum) {
      if (!_strerror.buffer) _strerror.buffer = _malloc(256);
      _strerror_r(errnum, _strerror.buffer, 256);
      return _strerror.buffer;
    }

   
  Module["_i64Subtract"] = _i64Subtract;

  
  var GL={counter:1,lastError:0,buffers:[],programs:[],framebuffers:[],renderbuffers:[],textures:[],uniforms:[],shaders:[],vaos:[],currArrayBuffer:0,currElementArrayBuffer:0,byteSizeByTypeRoot:5120,byteSizeByType:[1,1,2,2,4,4,4,2,3,4,8],programInfos:{},stringCache:{},packAlignment:4,unpackAlignment:4,init:function () {
        GL.createLog2ceilLookup(GL.MAX_TEMP_BUFFER_SIZE);
        Browser.moduleContextCreatedCallbacks.push(GL.initExtensions);
      },recordError:function recordError(errorCode) {
        if (!GL.lastError) {
          GL.lastError = errorCode;
        }
      },getNewId:function (table) {
        var ret = GL.counter++;
        for (var i = table.length; i < ret; i++) {
          table[i] = null;
        }
        return ret;
      },MINI_TEMP_BUFFER_SIZE:16,miniTempBuffer:null,miniTempBufferViews:[0],MAX_TEMP_BUFFER_SIZE:2097152,tempVertexBuffers1:[],tempVertexBufferCounters1:[],tempVertexBuffers2:[],tempVertexBufferCounters2:[],numTempVertexBuffersPerSize:64,tempIndexBuffers:[],tempQuadIndexBuffer:null,log2ceilLookup:null,createLog2ceilLookup:function (maxValue) {
        GL.log2ceilLookup = new Uint8Array(maxValue+1);
        var log2 = 0;
        var pow2 = 1;
        GL.log2ceilLookup[0] = 0;
        for(var i = 1; i <= maxValue; ++i) {
          if (i > pow2) {
            pow2 <<= 1;
            ++log2;
          }
          GL.log2ceilLookup[i] = log2;
        }
      },generateTempBuffers:function (quads) {
        var largestIndex = GL.log2ceilLookup[GL.MAX_TEMP_BUFFER_SIZE];
        GL.tempVertexBufferCounters1.length = GL.tempVertexBufferCounters2.length = largestIndex+1;
        GL.tempVertexBuffers1.length = GL.tempVertexBuffers2.length = largestIndex+1;
        GL.tempIndexBuffers.length = largestIndex+1;
        for(var i = 0; i <= largestIndex; ++i) {
          GL.tempIndexBuffers[i] = null; // Created on-demand
          GL.tempVertexBufferCounters1[i] = GL.tempVertexBufferCounters2[i] = 0;
          var ringbufferLength = GL.numTempVertexBuffersPerSize;
          GL.tempVertexBuffers1[i] = [];
          GL.tempVertexBuffers2[i] = [];
          var ringbuffer1 = GL.tempVertexBuffers1[i];
          var ringbuffer2 = GL.tempVertexBuffers2[i];
          ringbuffer1.length = ringbuffer2.length = ringbufferLength;
          for(var j = 0; j < ringbufferLength; ++j) {
            ringbuffer1[j] = ringbuffer2[j] = null; // Created on-demand
          }
        }
  
        if (quads) {
          // GL_QUAD indexes can be precalculated
          GL.tempQuadIndexBuffer = GLctx.createBuffer();
          GLctx.bindBuffer(GLctx.ELEMENT_ARRAY_BUFFER, GL.tempQuadIndexBuffer);
          var numIndexes = GL.MAX_TEMP_BUFFER_SIZE >> 1;
          var quadIndexes = new Uint16Array(numIndexes);
          var i = 0, v = 0;
          while (1) {
            quadIndexes[i++] = v;
            if (i >= numIndexes) break;
            quadIndexes[i++] = v+1;
            if (i >= numIndexes) break;
            quadIndexes[i++] = v+2;
            if (i >= numIndexes) break;
            quadIndexes[i++] = v;
            if (i >= numIndexes) break;
            quadIndexes[i++] = v+2;
            if (i >= numIndexes) break;
            quadIndexes[i++] = v+3;
            if (i >= numIndexes) break;
            v += 4;
          }
          GLctx.bufferData(GLctx.ELEMENT_ARRAY_BUFFER, quadIndexes, GLctx.STATIC_DRAW);
          GLctx.bindBuffer(GLctx.ELEMENT_ARRAY_BUFFER, null);
        }
      },getTempVertexBuffer:function getTempVertexBuffer(sizeBytes) {
        var idx = GL.log2ceilLookup[sizeBytes];
        var ringbuffer = GL.tempVertexBuffers1[idx];
        var nextFreeBufferIndex = GL.tempVertexBufferCounters1[idx];
        GL.tempVertexBufferCounters1[idx] = (GL.tempVertexBufferCounters1[idx]+1) & (GL.numTempVertexBuffersPerSize-1);
        var vbo = ringbuffer[nextFreeBufferIndex];
        if (vbo) {
          return vbo;
        }
        var prevVBO = GLctx.getParameter(GLctx.ARRAY_BUFFER_BINDING);
        ringbuffer[nextFreeBufferIndex] = GLctx.createBuffer();
        GLctx.bindBuffer(GLctx.ARRAY_BUFFER, ringbuffer[nextFreeBufferIndex]);
        GLctx.bufferData(GLctx.ARRAY_BUFFER, 1 << idx, GLctx.DYNAMIC_DRAW);
        GLctx.bindBuffer(GLctx.ARRAY_BUFFER, prevVBO);
        return ringbuffer[nextFreeBufferIndex];
      },getTempIndexBuffer:function getTempIndexBuffer(sizeBytes) {
        var idx = GL.log2ceilLookup[sizeBytes];
        var ibo = GL.tempIndexBuffers[idx];
        if (ibo) {
          return ibo;
        }
        var prevIBO = GLctx.getParameter(GLctx.ELEMENT_ARRAY_BUFFER_BINDING);
        GL.tempIndexBuffers[idx] = GLctx.createBuffer();
        GLctx.bindBuffer(GLctx.ELEMENT_ARRAY_BUFFER, GL.tempIndexBuffers[idx]);
        GLctx.bufferData(GLctx.ELEMENT_ARRAY_BUFFER, 1 << idx, GLctx.DYNAMIC_DRAW);
        GLctx.bindBuffer(GLctx.ELEMENT_ARRAY_BUFFER, prevIBO);
        return GL.tempIndexBuffers[idx];
      },newRenderingFrameStarted:function newRenderingFrameStarted() {
        var vb = GL.tempVertexBuffers1;
        GL.tempVertexBuffers1 = GL.tempVertexBuffers2;
        GL.tempVertexBuffers2 = vb;
        vb = GL.tempVertexBufferCounters1;
        GL.tempVertexBufferCounters1 = GL.tempVertexBufferCounters2;
        GL.tempVertexBufferCounters2 = vb;
        var largestIndex = GL.log2ceilLookup[GL.MAX_TEMP_BUFFER_SIZE];
        for(var i = 0; i <= largestIndex; ++i) {
          GL.tempVertexBufferCounters1[i] = 0;
        }
      },findToken:function (source, token) {
        function isIdentChar(ch) {
          if (ch >= 48 && ch <= 57) // 0-9
            return true;
          if (ch >= 65 && ch <= 90) // A-Z
            return true;
          if (ch >= 97 && ch <= 122) // a-z
            return true;
          return false;
        }
        var i = -1;
        do {
          i = source.indexOf(token, i + 1);
          if (i < 0) {
            break;
          }
          if (i > 0 && isIdentChar(source[i - 1])) {
            continue;
          }
          i += token.length;
          if (i < source.length - 1 && isIdentChar(source[i + 1])) {
            continue;
          }
          return true;
        } while (true);
        return false;
      },getSource:function (shader, count, string, length) {
        var source = '';
        for (var i = 0; i < count; ++i) {
          var frag;
          if (length) {
            var len = HEAP32[(((length)+(i*4))>>2)];
            if (len < 0) {
              frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)]);
            } else {
              frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)], len);
            }
          } else {
            frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)]);
          }
          source += frag;
        }
        // Let's see if we need to enable the standard derivatives extension
        type = GLctx.getShaderParameter(GL.shaders[shader], 0x8B4F /* GL_SHADER_TYPE */);
        if (type == 0x8B30 /* GL_FRAGMENT_SHADER */) {
          if (GL.findToken(source, "dFdx") ||
              GL.findToken(source, "dFdy") ||
              GL.findToken(source, "fwidth")) {
            source = "#extension GL_OES_standard_derivatives : enable\n" + source;
            var extension = GLctx.getExtension("OES_standard_derivatives");
          }
        }
        return source;
      },computeImageSize:function (width, height, sizePerPixel, alignment) {
        function roundedToNextMultipleOf(x, y) {
          return Math.floor((x + y - 1) / y) * y
        }
        var plainRowSize = width * sizePerPixel;
        var alignedRowSize = roundedToNextMultipleOf(plainRowSize, alignment);
        return (height <= 0) ? 0 :
                 ((height - 1) * alignedRowSize + plainRowSize);
      },get:function (name_, p, type) {
        // Guard against user passing a null pointer.
        // Note that GLES2 spec does not say anything about how passing a null pointer should be treated.
        // Testing on desktop core GL 3, the application crashes on glGetIntegerv to a null pointer, but
        // better to report an error instead of doing anything random.
        if (!p) {
          GL.recordError(0x0501 /* GL_INVALID_VALUE */);
          return;
        }
        var ret = undefined;
        switch(name_) { // Handle a few trivial GLES values
          case 0x8DFA: // GL_SHADER_COMPILER
            ret = 1;
            break;
          case 0x8DF8: // GL_SHADER_BINARY_FORMATS
            if (type !== 'Integer') {
              GL.recordError(0x0500); // GL_INVALID_ENUM
            }
            return; // Do not write anything to the out pointer, since no binary formats are supported.
          case 0x8DF9: // GL_NUM_SHADER_BINARY_FORMATS
            ret = 0;
            break;
          case 0x86A2: // GL_NUM_COMPRESSED_TEXTURE_FORMATS
            // WebGL doesn't have GL_NUM_COMPRESSED_TEXTURE_FORMATS (it's obsolete since GL_COMPRESSED_TEXTURE_FORMATS returns a JS array that can be queried for length),
            // so implement it ourselves to allow C++ GLES2 code get the length.
            var formats = GLctx.getParameter(0x86A3 /*GL_COMPRESSED_TEXTURE_FORMATS*/);
            ret = formats.length;
            break;
          case 0x8B9A: // GL_IMPLEMENTATION_COLOR_READ_TYPE
            ret = 0x1401; // GL_UNSIGNED_BYTE
            break;
          case 0x8B9B: // GL_IMPLEMENTATION_COLOR_READ_FORMAT
            ret = 0x1908; // GL_RGBA
            break;
        }
  
        if (ret === undefined) {
          var result = GLctx.getParameter(name_);
          switch (typeof(result)) {
            case "number":
              ret = result;
              break;
            case "boolean":
              ret = result ? 1 : 0;
              break;
            case "string":
              GL.recordError(0x0500); // GL_INVALID_ENUM
              return;
            case "object":
              if (result === null) {
                // null is a valid result for some (e.g., which buffer is bound - perhaps nothing is bound), but otherwise
                // can mean an invalid name_, which we need to report as an error
                switch(name_) {
                  case 0x8894: // ARRAY_BUFFER_BINDING
                  case 0x8B8D: // CURRENT_PROGRAM
                  case 0x8895: // ELEMENT_ARRAY_BUFFER_BINDING
                  case 0x8CA6: // FRAMEBUFFER_BINDING
                  case 0x8CA7: // RENDERBUFFER_BINDING
                  case 0x8069: // TEXTURE_BINDING_2D
                  case 0x8514: { // TEXTURE_BINDING_CUBE_MAP
                    ret = 0;
                    break;
                  }
                  default: {
                    GL.recordError(0x0500); // GL_INVALID_ENUM
                    return;
                  }
                }
              } else if (result instanceof Float32Array ||
                         result instanceof Uint32Array ||
                         result instanceof Int32Array ||
                         result instanceof Array) {
                for (var i = 0; i < result.length; ++i) {
                  switch (type) {
                    case 'Integer': HEAP32[(((p)+(i*4))>>2)]=result[i];   break;
                    case 'Float':   HEAPF32[(((p)+(i*4))>>2)]=result[i]; break;
                    case 'Boolean': HEAP8[(((p)+(i))>>0)]=result[i] ? 1 : 0;    break;
                    default: throw 'internal glGet error, bad type: ' + type;
                  }
                }
                return;
              } else if (result instanceof WebGLBuffer ||
                         result instanceof WebGLProgram ||
                         result instanceof WebGLFramebuffer ||
                         result instanceof WebGLRenderbuffer ||
                         result instanceof WebGLTexture) {
                ret = result.name | 0;
              } else {
                GL.recordError(0x0500); // GL_INVALID_ENUM
                return;
              }
              break;
            default:
              GL.recordError(0x0500); // GL_INVALID_ENUM
              return;
          }
        }
  
        switch (type) {
          case 'Integer': HEAP32[((p)>>2)]=ret;    break;
          case 'Float':   HEAPF32[((p)>>2)]=ret;  break;
          case 'Boolean': HEAP8[((p)>>0)]=ret ? 1 : 0; break;
          default: throw 'internal glGet error, bad type: ' + type;
        }
      },getTexPixelData:function (type, format, width, height, pixels, internalFormat) {
        var sizePerPixel;
        switch (type) {
          case 0x1401 /* GL_UNSIGNED_BYTE */:
            switch (format) {
              case 0x1906 /* GL_ALPHA */:
              case 0x1909 /* GL_LUMINANCE */:
                sizePerPixel = 1;
                break;
              case 0x1907 /* GL_RGB */:
                sizePerPixel = 3;
                break;
              case 0x1908 /* GL_RGBA */:
                sizePerPixel = 4;
                break;
              case 0x190A /* GL_LUMINANCE_ALPHA */:
                sizePerPixel = 2;
                break;
              default:
                GL.recordError(0x0500); // GL_INVALID_ENUM
                return {
                  pixels: null,
                  internalFormat: 0x0
                };
            }
            break;
          case 0x1403 /* GL_UNSIGNED_SHORT */:
            if (format == 0x1902 /* GL_DEPTH_COMPONENT */) {
              sizePerPixel = 2;
            } else {
              GL.recordError(0x0500); // GL_INVALID_ENUM
              return {
                pixels: null,
                internalFormat: 0x0
              };
            }
            break;
          case 0x1405 /* GL_UNSIGNED_INT */:
            if (format == 0x1902 /* GL_DEPTH_COMPONENT */) {
              sizePerPixel = 4;
            } else {
              GL.recordError(0x0500); // GL_INVALID_ENUM
              return {
                pixels: null,
                internalFormat: 0x0
              };
            }
            break;
          case 0x84FA /* UNSIGNED_INT_24_8_WEBGL */:
            sizePerPixel = 4;
            break;
          case 0x8363 /* GL_UNSIGNED_SHORT_5_6_5 */:
          case 0x8033 /* GL_UNSIGNED_SHORT_4_4_4_4 */:
          case 0x8034 /* GL_UNSIGNED_SHORT_5_5_5_1 */:
            sizePerPixel = 2;
            break;
          case 0x1406 /* GL_FLOAT */:
            assert(GL.floatExt, 'Must have OES_texture_float to use float textures');
            switch (format) {
              case 0x1907 /* GL_RGB */:
                sizePerPixel = 3*4;
                break;
              case 0x1908 /* GL_RGBA */:
                sizePerPixel = 4*4;
                break;
              default:
                GL.recordError(0x0500); // GL_INVALID_ENUM
                return {
                  pixels: null,
                  internalFormat: 0x0
                };
            }
            internalFormat = GLctx.RGBA;
            break;
          default:
            GL.recordError(0x0500); // GL_INVALID_ENUM
            return {
              pixels: null,
              internalFormat: 0x0
            };
        }
        var bytes = GL.computeImageSize(width, height, sizePerPixel, GL.unpackAlignment);
        if (type == 0x1401 /* GL_UNSIGNED_BYTE */) {
          pixels = HEAPU8.subarray((pixels),(pixels+bytes));
        } else if (type == 0x1406 /* GL_FLOAT */) {
          pixels = HEAPF32.subarray((pixels)>>2,(pixels+bytes)>>2);
        } else if (type == 0x1405 /* GL_UNSIGNED_INT */ || type == 0x84FA /* UNSIGNED_INT_24_8_WEBGL */) {
          pixels = HEAPU32.subarray((pixels)>>2,(pixels+bytes)>>2);
        } else {
          pixels = HEAPU16.subarray((pixels)>>1,(pixels+bytes)>>1);
        }
        return {
          pixels: pixels,
          internalFormat: internalFormat
        };
      },initExtensions:function () {
        if (GL.initExtensions.done) return;
        GL.initExtensions.done = true;
  
        if (!Module.useWebGL) return; // an app might link both gl and 2d backends
  
        GL.miniTempBuffer = new Float32Array(GL.MINI_TEMP_BUFFER_SIZE);
        for (var i = 0; i < GL.MINI_TEMP_BUFFER_SIZE; i++) {
          GL.miniTempBufferViews[i] = GL.miniTempBuffer.subarray(0, i+1);
        }
  
        GL.maxVertexAttribs = GLctx.getParameter(GLctx.MAX_VERTEX_ATTRIBS);
  
        // Detect the presence of a few extensions manually, this GL interop layer itself will need to know if they exist. 
        GL.compressionExt = GLctx.getExtension('WEBGL_compressed_texture_s3tc') ||
                            GLctx.getExtension('MOZ_WEBGL_compressed_texture_s3tc') ||
                            GLctx.getExtension('WEBKIT_WEBGL_compressed_texture_s3tc');
  
        GL.anisotropicExt = GLctx.getExtension('EXT_texture_filter_anisotropic') ||
                            GLctx.getExtension('MOZ_EXT_texture_filter_anisotropic') ||
                            GLctx.getExtension('WEBKIT_EXT_texture_filter_anisotropic');
  
        GL.floatExt = GLctx.getExtension('OES_texture_float');
  
        // Extension available from Firefox 26 and Google Chrome 30
        GL.instancedArraysExt = GLctx.getExtension('ANGLE_instanced_arrays');
        
        // Extension available from Firefox 25 and WebKit
        GL.vaoExt = Module.ctx.getExtension('OES_vertex_array_object');
  
        // These are the 'safe' feature-enabling extensions that don't add any performance impact related to e.g. debugging, and
        // should be enabled by default so that client GLES2/GL code will not need to go through extra hoops to get its stuff working.
        // As new extensions are ratified at http://www.khronos.org/registry/webgl/extensions/ , feel free to add your new extensions
        // here, as long as they don't produce a performance impact for users that might not be using those extensions.
        // E.g. debugging-related extensions should probably be off by default.
        var automaticallyEnabledExtensions = [ "OES_texture_float", "OES_texture_half_float", "OES_standard_derivatives",
                                               "OES_vertex_array_object", "WEBGL_compressed_texture_s3tc", "WEBGL_depth_texture",
                                               "OES_element_index_uint", "EXT_texture_filter_anisotropic", "ANGLE_instanced_arrays",
                                               "OES_texture_float_linear", "OES_texture_half_float_linear", "WEBGL_compressed_texture_atc",
                                               "WEBGL_compressed_texture_pvrtc", "EXT_color_buffer_half_float", "WEBGL_color_buffer_float",
                                               "EXT_frag_depth", "EXT_sRGB", "WEBGL_draw_buffers", "WEBGL_shared_resources",
                                               "EXT_shader_texture_lod" ];
  
        function shouldEnableAutomatically(extension) {
          for(var i in automaticallyEnabledExtensions) {
            var include = automaticallyEnabledExtensions[i];
            if (ext.indexOf(include) != -1) {
              return true;
            }
          }
          return false;
        }
  
        var extensions = GLctx.getSupportedExtensions();
        for(var e in extensions) {
          var ext = extensions[e].replace('MOZ_', '').replace('WEBKIT_', '');
          if (automaticallyEnabledExtensions.indexOf(ext) != -1) {
            GLctx.getExtension(ext); // Calling .getExtension enables that extension permanently, no need to store the return value to be enabled.
          }
        }
      },populateUniformTable:function (program) {
        var p = GL.programs[program];
        GL.programInfos[program] = {
          uniforms: {},
          maxUniformLength: 0, // This is eagerly computed below, since we already enumerate all uniforms anyway.
          maxAttributeLength: -1 // This is lazily computed and cached, computed when/if first asked, "-1" meaning not computed yet.
        };
  
        var ptable = GL.programInfos[program];
        var utable = ptable.uniforms;
        // A program's uniform table maps the string name of an uniform to an integer location of that uniform.
        // The global GL.uniforms map maps integer locations to WebGLUniformLocations.
        var numUniforms = GLctx.getProgramParameter(p, GLctx.ACTIVE_UNIFORMS);
        for (var i = 0; i < numUniforms; ++i) {
          var u = GLctx.getActiveUniform(p, i);
  
          var name = u.name;
          ptable.maxUniformLength = Math.max(ptable.maxUniformLength, name.length+1);
  
          // Strip off any trailing array specifier we might have got, e.g. "[0]".
          if (name.indexOf(']', name.length-1) !== -1) {
            var ls = name.lastIndexOf('[');
            name = name.slice(0, ls);
          }
  
          // Optimize memory usage slightly: If we have an array of uniforms, e.g. 'vec3 colors[3];', then 
          // only store the string 'colors' in utable, and 'colors[0]', 'colors[1]' and 'colors[2]' will be parsed as 'colors'+i.
          // Note that for the GL.uniforms table, we still need to fetch the all WebGLUniformLocations for all the indices.
          var loc = GLctx.getUniformLocation(p, name);
          var id = GL.getNewId(GL.uniforms);
          utable[name] = [u.size, id];
          GL.uniforms[id] = loc;
  
          for (var j = 1; j < u.size; ++j) {
            var n = name + '['+j+']';
            loc = GLctx.getUniformLocation(p, n);
            id = GL.getNewId(GL.uniforms);
  
            GL.uniforms[id] = loc;
          }
        }
      }};function _glClearColor(x0, x1, x2, x3) { GLctx.clearColor(x0, x1, x2, x3) }

   
  Module["_i64Add"] = _i64Add;

  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  
  
  function ___cxa_is_number_type(type) {
      var isNumber = false;
      try { if (type == __ZTIi) isNumber = true } catch(e){}
      try { if (type == __ZTIj) isNumber = true } catch(e){}
      try { if (type == __ZTIl) isNumber = true } catch(e){}
      try { if (type == __ZTIm) isNumber = true } catch(e){}
      try { if (type == __ZTIx) isNumber = true } catch(e){}
      try { if (type == __ZTIy) isNumber = true } catch(e){}
      try { if (type == __ZTIf) isNumber = true } catch(e){}
      try { if (type == __ZTId) isNumber = true } catch(e){}
      try { if (type == __ZTIe) isNumber = true } catch(e){}
      try { if (type == __ZTIc) isNumber = true } catch(e){}
      try { if (type == __ZTIa) isNumber = true } catch(e){}
      try { if (type == __ZTIh) isNumber = true } catch(e){}
      try { if (type == __ZTIs) isNumber = true } catch(e){}
      try { if (type == __ZTIt) isNumber = true } catch(e){}
      return isNumber;
    }function ___cxa_does_inherit(definiteType, possibilityType, possibility) {
      if (possibility == 0) return false;
      if (possibilityType == 0 || possibilityType == definiteType)
        return true;
      var possibility_type_info;
      if (___cxa_is_number_type(possibilityType)) {
        possibility_type_info = possibilityType;
      } else {
        var possibility_type_infoAddr = HEAP32[((possibilityType)>>2)] - 8;
        possibility_type_info = HEAP32[((possibility_type_infoAddr)>>2)];
      }
      switch (possibility_type_info) {
      case 0: // possibility is a pointer
        // See if definite type is a pointer
        var definite_type_infoAddr = HEAP32[((definiteType)>>2)] - 8;
        var definite_type_info = HEAP32[((definite_type_infoAddr)>>2)];
        if (definite_type_info == 0) {
          // Also a pointer; compare base types of pointers
          var defPointerBaseAddr = definiteType+8;
          var defPointerBaseType = HEAP32[((defPointerBaseAddr)>>2)];
          var possPointerBaseAddr = possibilityType+8;
          var possPointerBaseType = HEAP32[((possPointerBaseAddr)>>2)];
          return ___cxa_does_inherit(defPointerBaseType, possPointerBaseType, possibility);
        } else
          return false; // one pointer and one non-pointer
      case 1: // class with no base class
        return false;
      case 2: // class with base class
        var parentTypeAddr = possibilityType + 8;
        var parentType = HEAP32[((parentTypeAddr)>>2)];
        return ___cxa_does_inherit(definiteType, parentType, possibility);
      default:
        return false; // some unencountered type
      }
    }
  
  
  
  var ___cxa_last_thrown_exception=0;function ___resumeException(ptr) {
      if (!___cxa_last_thrown_exception) { ___cxa_last_thrown_exception = ptr; }
      throw ptr;
    }
  
  var ___cxa_exception_header_size=8;function ___cxa_find_matching_catch(thrown, throwntype) {
      if (thrown == -1) thrown = ___cxa_last_thrown_exception;
      header = thrown - ___cxa_exception_header_size;
      if (throwntype == -1) throwntype = HEAP32[((header)>>2)];
      var typeArray = Array.prototype.slice.call(arguments, 2);
  
      // If throwntype is a pointer, this means a pointer has been
      // thrown. When a pointer is thrown, actually what's thrown
      // is a pointer to the pointer. We'll dereference it.
      if (throwntype != 0 && !___cxa_is_number_type(throwntype)) {
        var throwntypeInfoAddr= HEAP32[((throwntype)>>2)] - 8;
        var throwntypeInfo= HEAP32[((throwntypeInfoAddr)>>2)];
        if (throwntypeInfo == 0)
          thrown = HEAP32[((thrown)>>2)];
      }
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (___cxa_does_inherit(typeArray[i], throwntype, thrown))
          return ((asm["setTempRet0"](typeArray[i]),thrown)|0);
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      return ((asm["setTempRet0"](throwntype),thrown)|0);
    }function ___cxa_throw(ptr, type, destructor) {
      if (!___cxa_throw.initialized) {
        try {
          HEAP32[((__ZTVN10__cxxabiv119__pointer_type_infoE)>>2)]=0; // Workaround for libcxxabi integration bug
        } catch(e){}
        try {
          HEAP32[((__ZTVN10__cxxabiv117__class_type_infoE)>>2)]=1; // Workaround for libcxxabi integration bug
        } catch(e){}
        try {
          HEAP32[((__ZTVN10__cxxabiv120__si_class_type_infoE)>>2)]=2; // Workaround for libcxxabi integration bug
        } catch(e){}
        ___cxa_throw.initialized = true;
      }
      var header = ptr - ___cxa_exception_header_size;
      HEAP32[((header)>>2)]=type;
      HEAP32[(((header)+(4))>>2)]=destructor;
      ___cxa_last_thrown_exception = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr;
    }

  
  
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            continue;
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          if (stream.tty.output.length) {
            stream.tty.ops.put_char(stream.tty, 10);
          }
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              result = process['stdin']['read']();
              if (!result) {
                if (process['stdin']['_readableState'] && process['stdin']['_readableState']['ended']) {
                  return null;  // EOF
                }
                return undefined;  // no data available
              }
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            },
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.buffer.byteLength which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (node.contents && node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
  
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
  
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else
          {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) { // Can we just reuse the buffer we are given?
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          stream.ungotten = [];
          stream.position = position;
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          fileStore.createIndex('timestamp', 'timestamp', { unique: false });
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function() {
          callback(this.error);
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function() { callback(this.error); };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function() { callback(this.error); };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function() { done(this.error); };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so 
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          return flags;
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          stream.position = position;
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);
  
  function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
      // we don't currently perform any user-space buffering of data
    }var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
              
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); },
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); },
            },
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var accmode = flag & 2097155;
        var perms = ['r', 'w', 'rw'][accmode];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        return FS.nodePermissions(dir, 'x');
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },getStreamFromPtr:function (ptr) {
        return FS.streams[ptr - 1];
      },getPtrForStream:function (stream) {
        return stream ? stream.fd + 1 : 0;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return link.node_ops.readlink(link);
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // check permissions
        var err = FS.mayOpen(node, flags);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        return stream.stream_ops.llseek(stream, offset, whence);
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = '';
          var utf8 = new Runtime.UTF8Processor();
          for (var i = 0; i < length; i++) {
            ret += utf8.processCChar(buf[i]);
          }
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var utf8 = new Runtime.UTF8Processor();
          var buf = new Uint8Array(utf8.processJSString(data));
          FS.write(stream, buf, 0, buf.length, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function() { return 0; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return Math.floor(Math.random()*256); };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        HEAP32[((_stdin)>>2)]=FS.getPtrForStream(stdin);
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        HEAP32[((_stdout)>>2)]=FS.getPtrForStream(stdout);
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        HEAP32[((_stderr)>>2)]=FS.getPtrForStream(stderr);
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno) {
          this.errno = errno;
          for (var key in ERRNO_CODES) {
            if (ERRNO_CODES[key] === errno) {
              this.code = key;
              break;
            }
          }
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = Math.floor(idx / this.chunkSize);
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
            // Find length
            var xhr = new XMLHttpRequest();
            xhr.open('HEAD', url, false);
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            var datalength = Number(xhr.getResponseHeader("Content-length"));
            var header;
            var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
            var chunkSize = 1024*1024; // Chunk size in bytes
  
            if (!hasByteServing) chunkSize = datalength;
  
            // Function to get a range from the remote URL.
            var doXHR = (function(from, to) {
              if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
              if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
              // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
              var xhr = new XMLHttpRequest();
              xhr.open('GET', url, false);
              if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
              // Some hints to the browser that we want binary data.
              if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
              if (xhr.overrideMimeType) {
                xhr.overrideMimeType('text/plain; charset=x-user-defined');
              }
  
              xhr.send(null);
              if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
              if (xhr.response !== undefined) {
                return new Uint8Array(xhr.response || []);
              } else {
                return intArrayFromString(xhr.responseText || '', true);
              }
            });
            var lazyArray = this;
            lazyArray.setDataGetter(function(chunkNum) {
              var start = chunkNum * chunkSize;
              var end = (chunkNum+1) * chunkSize - 1; // including this byte
              end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
              if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
                lazyArray.chunks[chunkNum] = doXHR(start, end);
              }
              if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
              return lazyArray.chunks[chunkNum];
            });
  
            this._length = datalength;
            this._chunkSize = chunkSize;
            this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperty(node, "usedBytes", {
            get: function() { return this.contents.length; }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};function _close(fildes) {
      // int close(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/close.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        FS.close(stream);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  
  function _fsync(fildes) {
      // int fsync(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fsync.html
      var stream = FS.getStream(fildes);
      if (stream) {
        // We write directly to the file system, so there's nothing to do here.
        return 0;
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }
  
  function _fileno(stream) {
      // int fileno(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fileno.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) return -1;
      return stream.fd;
    }function _fclose(stream) {
      // int fclose(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fclose.html
      var fd = _fileno(stream);
      _fsync(fd);
      return _close(fd);
    }

  
  
  var Browser={mainLoop:{scheduler:null,method:"",shouldPause:false,paused:false,queue:[],pause:function () {
          Browser.mainLoop.shouldPause = true;
        },resume:function () {
          if (Browser.mainLoop.paused) {
            Browser.mainLoop.paused = false;
            Browser.mainLoop.scheduler();
          }
          Browser.mainLoop.shouldPause = false;
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && canvas.requestPointerLock) {
                canvas.requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx) return Module.ctx; // no need to recreate singleton GL context
  
        var ctx;
        var errorInfo = '?';
        function onContextCreationError(event) {
          errorInfo = event.statusMessage || errorInfo;
        }
        try {
          if (useWebGL) {
            var contextAttributes = {
              antialias: false,
              alpha: false
            };
  
            if (webGLContextAttributes) {
              for (var attribute in webGLContextAttributes) {
                contextAttributes[attribute] = webGLContextAttributes[attribute];
              }
            }
  
  
            canvas.addEventListener('webglcontextcreationerror', onContextCreationError, false);
            try {
              ['experimental-webgl', 'webgl'].some(function(webglId) {
                return ctx = canvas.getContext(webglId, contextAttributes);
              });
            } finally {
              canvas.removeEventListener('webglcontextcreationerror', onContextCreationError, false);
            }
          } else {
            ctx = canvas.getContext('2d');
          }
          if (!ctx) throw ':(';
        } catch (e) {
          Module.print('Could not create canvas: ' + [errorInfo, e]);
          return null;
        }
        if (useWebGL) {
          // possible GL_DEBUG entry point: ctx = wrapDebugGL(ctx);
  
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
        }
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
          Module.ctx = ctx;
          if (useWebGL) GLctx = ctx;
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
        
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
        canvasContainer.requestFullScreen();
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (!ABORT) func();
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (!ABORT) func();
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (!ABORT) func();
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = -event.wheelDelta;
            break;
          case 'wheel': 
            delta = event.deltaY;
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return Math.max(-1, Math.min(1, delta));
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              Browser.lastTouches[touch.identifier] = Browser.touches[touch.identifier];
              Browser.touches[touch.identifier] = { x: adjustedX, y: adjustedY };
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      }};
  
  
  function _free() {
  }
  Module["_free"] = _free;
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  var _environ=allocate(1, "i32*", ALLOC_STATIC);var ___environ=_environ;function ___buildEnvironment(env) {
      // WARNING: Arbitrary limit!
      var MAX_ENV_VALUES = 64;
      var TOTAL_ENV_SIZE = 1024;
  
      // Statically allocate memory for the environment.
      var poolPtr;
      var envPtr;
      if (!___buildEnvironment.called) {
        ___buildEnvironment.called = true;
        // Set default values. Use string keys for Closure Compiler compatibility.
        ENV['USER'] = 'root';
        ENV['PATH'] = '/';
        ENV['PWD'] = '/';
        ENV['HOME'] = '/home/emscripten';
        ENV['LANG'] = 'en_US.UTF-8';
        ENV['_'] = './this.program';
        // Allocate memory.
        poolPtr = allocate(TOTAL_ENV_SIZE, 'i8', ALLOC_STATIC);
        envPtr = allocate(MAX_ENV_VALUES * 4,
                          'i8*', ALLOC_STATIC);
        HEAP32[((envPtr)>>2)]=poolPtr;
        HEAP32[((_environ)>>2)]=envPtr;
      } else {
        envPtr = HEAP32[((_environ)>>2)];
        poolPtr = HEAP32[((envPtr)>>2)];
      }
  
      // Collect key=value lines.
      var strings = [];
      var totalSize = 0;
      for (var key in env) {
        if (typeof env[key] === 'string') {
          var line = key + '=' + env[key];
          strings.push(line);
          totalSize += line.length;
        }
      }
      if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
      }
  
      // Make new.
      var ptrSize = 4;
      for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        writeAsciiToMemory(line, poolPtr);
        HEAP32[(((envPtr)+(i * ptrSize))>>2)]=poolPtr;
        poolPtr += line.length + 1;
      }
      HEAP32[(((envPtr)+(strings.length * ptrSize))>>2)]=0;
    }var ENV={};function _getenv(name) {
      // char *getenv(const char *name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/getenv.html
      if (name === 0) return 0;
      name = Pointer_stringify(name);
      if (!ENV.hasOwnProperty(name)) return 0;
  
      if (_getenv.ret) _free(_getenv.ret);
      _getenv.ret = allocate(intArrayFromString(ENV[name]), 'i8', ALLOC_NORMAL);
      return _getenv.ret;
    }
  
  function _putenv(string) {
      // int putenv(char *string);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/putenv.html
      // WARNING: According to the standard (and the glibc implementation), the
      //          string is taken by reference so future changes are reflected.
      //          We copy it instead, possibly breaking some uses.
      if (string === 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      }
      string = Pointer_stringify(string);
      var splitPoint = string.indexOf('=')
      if (string === '' || string.indexOf('=') === -1) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      }
      var name = string.slice(0, splitPoint);
      var value = string.slice(splitPoint + 1);
      if (!(name in ENV) || ENV[name] !== value) {
        ENV[name] = value;
        ___buildEnvironment(ENV);
      }
      return 0;
    }
  
  function _SDL_RWFromConstMem(mem, size) {
      var id = SDL.rwops.length; // TODO: recycle ids when they are null
      SDL.rwops.push({ bytes: mem, count: size });
      return id;
    }function _TTF_RenderText_Solid(font, text, color) {
      // XXX the font and color are ignored
      text = Pointer_stringify(text) || ' '; // if given an empty string, still return a valid surface
      var fontData = SDL.fonts[font];
      var w = SDL.estimateTextWidth(fontData, text);
      var h = fontData.size;
      var color = SDL.loadColorToCSSRGB(color); // XXX alpha breaks fonts?
      var fontString = h + 'px ' + fontData.name;
      var surf = SDL.makeSurface(w, h, 0, false, 'text:' + text); // bogus numbers..
      var surfData = SDL.surfaces[surf];
      surfData.ctx.save();
      surfData.ctx.fillStyle = color;
      surfData.ctx.font = fontString;
      surfData.ctx.textBaseline = 'top';
      surfData.ctx.fillText(text, 0, 0);
      surfData.ctx.restore();
      return surf;
    }function _Mix_HaltMusic() {
      var audio = SDL.music.audio;
      if (audio) {
        audio.src = audio.src; // rewind <media> element
        audio.currentPosition = 0; // rewind Web Audio graph playback.
        audio.pause();
      }
      SDL.music.audio = null;
      if (SDL.hookMusicFinished) {
        Runtime.dynCall('v', SDL.hookMusicFinished);
      }
      return 0;
    }function _Mix_PlayMusic(id, loops) {
      // Pause old music if it exists.
      if (SDL.music.audio) {
        if (!SDL.music.audio.paused) Module.printErr('Music is already playing. ' + SDL.music.source);
        SDL.music.audio.pause();
      }
      var info = SDL.audios[id];
      var audio;
      if (info.webAudio) { // Play via Web Audio API
        // Create an instance of the WebAudio object.
        audio = {};
        audio.resource = info; // This new webAudio object is an instance that refers to this existing resource.
        audio.paused = false;
        audio.currentPosition = 0;
        audio.play = function() { SDL.playWebAudio(this); }
        audio.pause = function() { SDL.pauseWebAudio(this); }
      } else if (info.audio) { // Play via the <audio> element
        audio = info.audio;
      }
      audio['onended'] = function() { if (SDL.music.audio == this) _Mix_HaltMusic(); } // will send callback
      audio.loop = loops != 0; // TODO: handle N loops for finite N
      audio.volume = SDL.music.volume;
      SDL.music.audio = audio;
      audio.play();
      return 0;
    }function _Mix_FreeChunk(id) {
      SDL.audios[id] = null;
    }function _Mix_LoadWAV_RW(rwopsID, freesrc) {
      var rwops = SDL.rwops[rwopsID];
  
      if (rwops === undefined)
        return 0;
  
      var filename = '';
      var audio;
      var webAudio;
      var bytes;
  
      if (rwops.filename !== undefined) {
        filename = PATH.resolve(rwops.filename);
        var raw = Module["preloadedAudios"][filename];
        if (!raw) {
          if (raw === null) Module.printErr('Trying to reuse preloaded audio, but freePreloadedMediaOnUse is set!');
          if (!Module.noAudioDecoding) Runtime.warnOnce('Cannot find preloaded audio ' + filename);
  
          // see if we can read the file-contents from the in-memory FS
          try {
            bytes = FS.readFile(filename);
          } catch (e) {
            Module.printErr('Couldn\'t find file for: ' + filename);
            return 0;
          }
        }
        if (Module['freePreloadedMediaOnUse']) {
          Module["preloadedAudios"][filename] = null;
        }
        audio = raw;
      }
      else if (rwops.bytes !== undefined) {
        // For Web Audio context buffer decoding, we must make a clone of the audio data, but for <media> element,
        // a view to existing data is sufficient.
        if (SDL.webAudioAvailable()) bytes = HEAPU8.buffer.slice(rwops.bytes, rwops.bytes + rwops.count);
        else bytes = HEAPU8.subarray(rwops.bytes, rwops.bytes + rwops.count);
      }
      else {
        return 0;
      }
  
      var arrayBuffer = bytes ? bytes.buffer || bytes : bytes;
  
      // To allow user code to work around browser bugs with audio playback on <audio> elements an Web Audio, enable
      // the user code to hook in a callback to decide on a file basis whether each file should use Web Audio or <audio> for decoding and playback.
      // In particular, see https://bugzilla.mozilla.org/show_bug.cgi?id=654787 and ?id=1012801 for tradeoffs.
      var canPlayWithWebAudio = Module['SDL_canPlayWithWebAudio'] === undefined || Module['SDL_canPlayWithWebAudio'](filename, arrayBuffer);
  
      if (bytes !== undefined && SDL.webAudioAvailable() && canPlayWithWebAudio) {
        audio = undefined;
        webAudio = {};
        // The audio decoding process is asynchronous, which gives trouble if user code plays the audio data back immediately
        // after loading. Therefore prepare an array of callback handlers to run when this audio decoding is complete, which
        // will then start the playback (with some delay).
        webAudio.onDecodeComplete = []; // While this member array exists, decoding hasn't finished yet.
        function onDecodeComplete(data) {
          webAudio.decodedBuffer = data;
          // Call all handlers that were waiting for this decode to finish, and clear the handler list.
          webAudio.onDecodeComplete.forEach(function(e) { e(); });
          webAudio.onDecodeComplete = undefined; // Don't allow more callback handlers since audio has finished decoding.
        }
  
        SDL.audioContext['decodeAudioData'](arrayBuffer, onDecodeComplete);
      } else if (audio === undefined && bytes) {
        // Here, we didn't find a preloaded audio but we either were passed a filepath for
        // which we loaded bytes, or we were passed some bytes
        var blob = new Blob([bytes], {type: rwops.mimetype});
        var url = URL.createObjectURL(blob);
        audio = new Audio();
        audio.src = url;
        audio.mozAudioChannelType = 'content'; // bugzilla 910340
      }
  
      var id = SDL.audios.length;
      // Keep the loaded audio in the audio arrays, ready for playback
      SDL.audios.push({
        source: filename,
        audio: audio, // Points to the <audio> element, if loaded
        webAudio: webAudio // Points to a Web Audio -specific resource object, if loaded
      });
      return id;
    }function _Mix_PlayChannel(channel, id, loops) {
      // TODO: handle fixed amount of N loops. Currently loops either 0 or infinite times.
  
      // Get the audio element associated with the ID
      var info = SDL.audios[id];
      if (!info) return -1;
      if (!info.audio && !info.webAudio) return -1;
  
      // If the user asks us to allocate a channel automatically, get the first
      // free one.
      if (channel == -1) {
        for (var i = SDL.channelMinimumNumber; i < SDL.numChannels; i++) {
          if (!SDL.channels[i].audio) {
            channel = i;
            break;
          }
        }
        if (channel == -1) {
          Module.printErr('All ' + SDL.numChannels + ' channels in use!');
          return -1;
        }
      }
      var channelInfo = SDL.channels[channel];
      var audio;
      if (info.webAudio) {
        // Create an instance of the WebAudio object.
        audio = {};
        audio.resource = info; // This new object is an instance that refers to this existing resource.
        audio.paused = false;
        audio.currentPosition = 0;
        // Make our instance look similar to the instance of a <media> to make api simple.
        audio.play = function() { SDL.playWebAudio(this); }
        audio.pause = function() { SDL.pauseWebAudio(this); }
      } else {
        // We clone the audio node to utilize the preloaded audio buffer, since
        // the browser has already preloaded the audio file.
        audio = info.audio.cloneNode(true);
        audio.numChannels = info.audio.numChannels;
        audio.frequency = info.audio.frequency;
      }
      audio['onended'] = function SDL_audio_onended() { // TODO: cache these
        if (channelInfo.audio == this) { channelInfo.audio.paused = true; channelInfo.audio = null; }
        if (SDL.channelFinished) Runtime.getFuncWrapper(SDL.channelFinished, 'vi')(channel);
      }
      channelInfo.audio = audio;
      // TODO: handle N loops. Behavior matches Mix_PlayMusic
      audio.loop = loops != 0;
      audio.volume = channelInfo.volume;
      audio.play();
      return channel;
    }function _SDL_PauseAudio(pauseOn) {
      if (!SDL.audio) {
        return;
      }
      if (pauseOn) {
        if (SDL.audio.timer !== undefined) {
          clearTimeout(SDL.audio.timer);
          SDL.audio.numAudioTimersPending = 0;
          SDL.audio.timer = undefined;
        }
        if (SDL.audio.scriptProcessorNode !== undefined) {
          SDL.audio.scriptProcessorNode['disconnect']();
          SDL.audio.scriptProcessorNode = undefined;
        }
      } else if (!SDL.audio.timer && !SDL.audio.scriptProcessorNode) {
        // If we are using the same sampling frequency as the native sampling rate of the Web Audio graph is using, we can feed our buffers via
        // Web Audio ScriptProcessorNode, which is a pull-mode API that calls back to our code to get audio data.
        if (SDL.audioContext !== undefined && SDL.audio.freq == SDL.audioContext['sampleRate'] && typeof SDL.audioContext['createScriptProcessor'] !== 'undefined') {
          var sizeSamplesPerChannel = SDL.audio.bufferSize / SDL.audio.bytesPerSample / SDL.audio.channels; // How many samples per a single channel fit in the cb buffer?
          SDL.audio.scriptProcessorNode = SDL.audioContext['createScriptProcessor'](sizeSamplesPerChannel, 0, SDL.audio.channels);
          SDL.audio.scriptProcessorNode['onaudioprocess'] = function (e) {
            Runtime.dynCall('viii', SDL.audio.callback, [SDL.audio.userdata, SDL.audio.buffer, SDL.audio.bufferSize]);
            SDL.fillWebAudioBufferFromHeap(SDL.audio.buffer, sizeSamplesPerChannel, e['outputBuffer']);
          }
          SDL.audio.scriptProcessorNode['connect'](SDL.audioContext['destination']);
        } else { // If we are using a different sampling rate, must manually queue audio data to the graph via timers.
          // Start the audio playback timer callback loop.
          SDL.audio.numAudioTimersPending = 1;
          SDL.audio.timer = Browser.safeSetTimeout(SDL.audio.caller, 1);
          SDL.audio.startTime = Date.now() / 1000.0; // Only used for Mozilla Audio Data API. Not needed for Web Audio API.
        }
      }
      SDL.audio.paused = pauseOn;
    }function _SDL_CloseAudio() {
      if (SDL.audio) {
        try{
          for(var i = 0; i < SDL.audio.soundSource.length; ++i) {
            if (!(typeof(SDL.audio.soundSource[i]==='undefined'))) {
              SDL.audio.soundSource[i].stop(0);
            }
          }
        } catch(e) {}
        SDL.audio.soundSource = null;
        _SDL_PauseAudio(1);
        _free(SDL.audio.buffer);
        SDL.audio = null;
        SDL.allocateChannels(0);
      }
    }function _SDL_FreeRW(rwopsID) {
      SDL.rwops[rwopsID] = null;
      while (SDL.rwops.length > 0 && SDL.rwops[SDL.rwops.length-1] === null) {
        SDL.rwops.pop();
      }
    }function _IMG_Load_RW(rwopsID, freeSrc) {
      try {
        // stb_image integration support
        function cleanup() {
          if (rwops && freeSrc) _SDL_FreeRW(rwopsID);
        };
        function addCleanup(func) {
          var old = cleanup;
          cleanup = function added_cleanup() {
            old();
            func();
          }
        }
        function callStbImage(func, params) {
          var x = Module['_malloc'](4);
          var y = Module['_malloc'](4);
          var comp = Module['_malloc'](4);
          addCleanup(function() {
            Module['_free'](x);
            Module['_free'](y);
            Module['_free'](comp);
            if (data) Module['_stbi_image_free'](data);
          });
          var data = Module['_' + func].apply(null, params.concat([x, y, comp, 0]));
          if (!data) return null;
          return {
            rawData: true,
            data: data,
            width: HEAP32[((x)>>2)],
            height: HEAP32[((y)>>2)],
            size: HEAP32[((x)>>2)] * HEAP32[((y)>>2)] * HEAP32[((comp)>>2)],
            bpp: HEAP32[((comp)>>2)]
          };
        }
  
        var rwops = SDL.rwops[rwopsID];
        if (rwops === undefined) {
          return 0;
        }
  
        var filename = rwops.filename;
        if (filename === undefined) {
          Runtime.warnOnce('Only file names that have been preloaded are supported for IMG_Load_RW. Consider using STB_IMAGE=1 if you want synchronous image decoding (see settings.js)');
          return 0;
        }
  
        if (!raw) {
          filename = PATH.resolve(filename);
          var raw = Module["preloadedImages"][filename];
          if (!raw) {
            if (raw === null) Module.printErr('Trying to reuse preloaded image, but freePreloadedMediaOnUse is set!');
            Runtime.warnOnce('Cannot find preloaded image ' + filename);
            Runtime.warnOnce('Cannot find preloaded image ' + filename + '. Consider using STB_IMAGE=1 if you want synchronous image decoding (see settings.js)');
            return 0;
          } else if (Module['freePreloadedMediaOnUse']) {
            Module["preloadedImages"][filename] = null;
          }
        }
  
        var surf = SDL.makeSurface(raw.width, raw.height, 0, false, 'load:' + filename);
        var surfData = SDL.surfaces[surf];
        surfData.ctx.globalCompositeOperation = "copy";
        if (!raw.rawData) {
          surfData.ctx.drawImage(raw, 0, 0, raw.width, raw.height, 0, 0, raw.width, raw.height);
        } else {
          var imageData = surfData.ctx.getImageData(0, 0, surfData.width, surfData.height);
          if (raw.bpp == 4) {
            // rgba
            imageData.data.set(HEAPU8.subarray((raw.data),(raw.data+raw.size)));
          } else if (raw.bpp == 3) {
            // rgb
            var pixels = raw.size/3;
            var data = imageData.data;
            var sourcePtr = raw.data;
            var destPtr = 0;
            for (var i = 0; i < pixels; i++) {
              data[destPtr++] = HEAPU8[((sourcePtr++)>>0)];
              data[destPtr++] = HEAPU8[((sourcePtr++)>>0)];
              data[destPtr++] = HEAPU8[((sourcePtr++)>>0)];
              data[destPtr++] = 255;
            }
          } else if (raw.bpp == 1) {
            // grayscale
            var pixels = raw.size;
            var data = imageData.data;
            var sourcePtr = raw.data;
            var destPtr = 0;
            for (var i = 0; i < pixels; i++) {
              var value = HEAPU8[((sourcePtr++)>>0)];
              data[destPtr++] = value;
              data[destPtr++] = value;
              data[destPtr++] = value;
              data[destPtr++] = 255;
            }
          } else {
            Module.printErr('cannot handle bpp ' + raw.bpp);
            return 0;
          }
          surfData.ctx.putImageData(imageData, 0, 0);
        }
        surfData.ctx.globalCompositeOperation = "source-over";
        // XXX SDL does not specify that loaded images must have available pixel data, in fact
        //     there are cases where you just want to blit them, so you just need the hardware
        //     accelerated version. However, code everywhere seems to assume that the pixels
        //     are in fact available, so we retrieve it here. This does add overhead though.
        _SDL_LockSurface(surf);
        surfData.locked--; // The surface is not actually locked in this hack
        if (SDL.GL) {
          // After getting the pixel data, we can free the canvas and context if we do not need to do 2D canvas blitting
          surfData.canvas = surfData.ctx = null;
        }
        return surf;
      } finally {
        cleanup();
      }
    }
  
  function _SDL_RWFromFile(_name, mode) {
      var id = SDL.rwops.length; // TODO: recycle ids when they are null
      var name = Pointer_stringify(_name)
      SDL.rwops.push({ filename: name, mimetype: Browser.getMimetype(name) });
      return id;
    }function _IMG_Load(filename){
      var rwops = _SDL_RWFromFile(filename);
      var result = _IMG_Load_RW(rwops, 1);
      return result;
    }function _SDL_LockSurface(surf) {
      var surfData = SDL.surfaces[surf];
  
      surfData.locked++;
      if (surfData.locked > 1) return 0;
  
      if (!surfData.buffer) {
        surfData.buffer = _malloc(surfData.width * surfData.height * 4);
        HEAP32[(((surf)+(20))>>2)]=surfData.buffer;
      }
  
      // Mark in C/C++-accessible SDL structure
      // SDL_Surface has the following fields: Uint32 flags, SDL_PixelFormat *format; int w, h; Uint16 pitch; void *pixels; ...
      // So we have fields all of the same size, and 5 of them before us.
      // TODO: Use macros like in library.js
      HEAP32[(((surf)+(20))>>2)]=surfData.buffer;
  
      if (surf == SDL.screen && Module.screenIsReadOnly && surfData.image) return 0;
  
      surfData.image = surfData.ctx.getImageData(0, 0, surfData.width, surfData.height);
      if (surf == SDL.screen) {
        var data = surfData.image.data;
        var num = data.length;
        for (var i = 0; i < num/4; i++) {
          data[i*4+3] = 255; // opacity, as canvases blend alpha
        }
      }
  
      if (SDL.defaults.copyOnLock) {
        // Copy pixel data to somewhere accessible to 'C/C++'
        if (surfData.isFlagSet(0x00200000 /* SDL_HWPALETTE */)) {
          // If this is neaded then
          // we should compact the data from 32bpp to 8bpp index.
          // I think best way to implement this is use
          // additional colorMap hash (color->index).
          // Something like this:
          //
          // var size = surfData.width * surfData.height;
          // var data = '';
          // for (var i = 0; i<size; i++) {
          //   var color = SDL.translateRGBAToColor(
          //     surfData.image.data[i*4   ], 
          //     surfData.image.data[i*4 +1], 
          //     surfData.image.data[i*4 +2], 
          //     255);
          //   var index = surfData.colorMap[color];
          //   HEAP8[(((surfData.buffer)+(i))>>0)]=index;
          // }
          throw 'CopyOnLock is not supported for SDL_LockSurface with SDL_HWPALETTE flag set' + new Error().stack;
        } else {
        HEAPU8.set(surfData.image.data, surfData.buffer);
        }
      }
  
      return 0;
    }function _SDL_UpperBlit(src, srcrect, dst, dstrect) {
      var srcData = SDL.surfaces[src];
      var dstData = SDL.surfaces[dst];
      var sr, dr;
      if (srcrect) {
        sr = SDL.loadRect(srcrect);
      } else {
        sr = { x: 0, y: 0, w: srcData.width, h: srcData.height };
      }
      if (dstrect) {
        dr = SDL.loadRect(dstrect);
      } else {
        dr = { x: 0, y: 0, w: -1, h: -1 };
      }
      var oldAlpha = dstData.ctx.globalAlpha;
      dstData.ctx.globalAlpha = srcData.alpha/255;
      dstData.ctx.drawImage(srcData.canvas, sr.x, sr.y, sr.w, sr.h, dr.x, dr.y, sr.w, sr.h);
      dstData.ctx.globalAlpha = oldAlpha;
      if (dst != SDL.screen) {
        // XXX As in IMG_Load, for compatibility we write out |pixels|
        Runtime.warnOnce('WARNING: copying canvas data to memory for compatibility');
        _SDL_LockSurface(dst);
        dstData.locked--; // The surface is not actually locked in this hack
      }
      return 0;
    }function _SDL_GetTicks() {
      return Math.floor(Date.now() - SDL.startTime);
    }var SDL={defaults:{width:320,height:200,copyOnLock:true},version:null,surfaces:{},canvasPool:[],events:[],fonts:[null],audios:[null],rwops:[null],music:{audio:null,volume:1},mixerFrequency:22050,mixerFormat:32784,mixerNumChannels:2,mixerChunkSize:1024,channelMinimumNumber:0,GL:false,glAttributes:{0:3,1:3,2:2,3:0,4:0,5:1,6:16,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:1,16:0,17:0,18:0},keyboardState:null,keyboardMap:{},canRequestFullscreen:false,isRequestingFullscreen:false,textInput:false,startTime:null,initFlags:0,buttonState:0,modState:0,DOMButtons:[0,0,0],DOMEventToSDLEvent:{},TOUCH_DEFAULT_ID:0,eventHandler:null,eventHandlerContext:null,keyCodes:{16:1249,17:1248,18:1250,20:1081,33:1099,34:1102,35:1101,36:1098,37:1104,38:1106,39:1103,40:1105,44:316,45:1097,46:127,91:1251,93:1125,96:1122,97:1113,98:1114,99:1115,100:1116,101:1117,102:1118,103:1119,104:1120,105:1121,106:1109,107:1111,109:1110,110:1123,111:1108,112:1082,113:1083,114:1084,115:1085,116:1086,117:1087,118:1088,119:1089,120:1090,121:1091,122:1092,123:1093,124:1128,125:1129,126:1130,127:1131,128:1132,129:1133,130:1134,131:1135,132:1136,133:1137,134:1138,135:1139,144:1107,160:94,161:33,162:34,163:35,164:36,165:37,166:38,167:95,168:40,169:41,170:42,171:43,172:124,173:45,174:123,175:125,176:126,181:127,182:129,183:128,188:44,190:46,191:47,192:96,219:91,220:92,221:93,222:39},scanCodes:{8:42,9:43,13:40,27:41,32:44,35:204,39:53,44:54,46:55,47:56,48:39,49:30,50:31,51:32,52:33,53:34,54:35,55:36,56:37,57:38,58:203,59:51,61:46,91:47,92:49,93:48,96:52,97:4,98:5,99:6,100:7,101:8,102:9,103:10,104:11,105:12,106:13,107:14,108:15,109:16,110:17,111:18,112:19,113:20,114:21,115:22,116:23,117:24,118:25,119:26,120:27,121:28,122:29,127:76,305:224,308:226,316:70},loadRect:function (rect) {
        return {
          x: HEAP32[((rect + 0)>>2)],
          y: HEAP32[((rect + 4)>>2)],
          w: HEAP32[((rect + 8)>>2)],
          h: HEAP32[((rect + 12)>>2)]
        };
      },loadColorToCSSRGB:function (color) {
        var rgba = HEAP32[((color)>>2)];
        return 'rgb(' + (rgba&255) + ',' + ((rgba >> 8)&255) + ',' + ((rgba >> 16)&255) + ')';
      },loadColorToCSSRGBA:function (color) {
        var rgba = HEAP32[((color)>>2)];
        return 'rgba(' + (rgba&255) + ',' + ((rgba >> 8)&255) + ',' + ((rgba >> 16)&255) + ',' + (((rgba >> 24)&255)/255) + ')';
      },translateColorToCSSRGBA:function (rgba) {
        return 'rgba(' + (rgba&0xff) + ',' + (rgba>>8 & 0xff) + ',' + (rgba>>16 & 0xff) + ',' + (rgba>>>24)/0xff + ')';
      },translateRGBAToCSSRGBA:function (r, g, b, a) {
        return 'rgba(' + (r&0xff) + ',' + (g&0xff) + ',' + (b&0xff) + ',' + (a&0xff)/255 + ')';
      },translateRGBAToColor:function (r, g, b, a) {
        return r | g << 8 | b << 16 | a << 24;
      },makeSurface:function (width, height, flags, usePageCanvas, source, rmask, gmask, bmask, amask) {
        flags = flags || 0;
        var is_SDL_HWSURFACE = flags & 0x00000001;
        var is_SDL_HWPALETTE = flags & 0x00200000;
        var is_SDL_OPENGL = flags & 0x04000000;
  
        var surf = _malloc(60);
        var pixelFormat = _malloc(44);
        //surface with SDL_HWPALETTE flag is 8bpp surface (1 byte)
        var bpp = is_SDL_HWPALETTE ? 1 : 4;
        var buffer = 0;
  
        // preemptively initialize this for software surfaces,
        // otherwise it will be lazily initialized inside of SDL_LockSurface
        if (!is_SDL_HWSURFACE && !is_SDL_OPENGL) {
          buffer = _malloc(width * height * 4);
        }
  
        HEAP32[((surf)>>2)]=flags;
        HEAP32[(((surf)+(4))>>2)]=pixelFormat;
        HEAP32[(((surf)+(8))>>2)]=width;
        HEAP32[(((surf)+(12))>>2)]=height;
        HEAP32[(((surf)+(16))>>2)]=width * bpp;  // assuming RGBA or indexed for now,
                                                                                          // since that is what ImageData gives us in browsers
        HEAP32[(((surf)+(20))>>2)]=buffer;
  
        HEAP32[(((surf)+(36))>>2)]=0;
        HEAP32[(((surf)+(40))>>2)]=0;
        HEAP32[(((surf)+(44))>>2)]=Module["canvas"].width;
        HEAP32[(((surf)+(48))>>2)]=Module["canvas"].height;
  
        HEAP32[(((surf)+(56))>>2)]=1;
  
        HEAP32[((pixelFormat)>>2)]=0 /* XXX missing C define SDL_PIXELFORMAT_RGBA8888 */;
        HEAP32[(((pixelFormat)+(4))>>2)]=0;// TODO
        HEAP8[(((pixelFormat)+(8))>>0)]=bpp * 8;
        HEAP8[(((pixelFormat)+(9))>>0)]=bpp;
  
        HEAP32[(((pixelFormat)+(12))>>2)]=rmask || 0x000000ff;
        HEAP32[(((pixelFormat)+(16))>>2)]=gmask || 0x0000ff00;
        HEAP32[(((pixelFormat)+(20))>>2)]=bmask || 0x00ff0000;
        HEAP32[(((pixelFormat)+(24))>>2)]=amask || 0xff000000;
  
        // Decide if we want to use WebGL or not
        SDL.GL = SDL.GL || is_SDL_OPENGL;
        var canvas;
        if (!usePageCanvas) {
          if (SDL.canvasPool.length > 0) {
            canvas = SDL.canvasPool.pop();
          } else {
            canvas = document.createElement('canvas');
          }
          canvas.width = width;
          canvas.height = height;
        } else {
          canvas = Module['canvas'];
        }
  
        var webGLContextAttributes = {
          antialias: ((SDL.glAttributes[13 /*SDL_GL_MULTISAMPLEBUFFERS*/] != 0) && (SDL.glAttributes[14 /*SDL_GL_MULTISAMPLESAMPLES*/] > 1)),
          depth: (SDL.glAttributes[6 /*SDL_GL_DEPTH_SIZE*/] > 0),
          stencil: (SDL.glAttributes[7 /*SDL_GL_STENCIL_SIZE*/] > 0)
        };
        
        var ctx = Browser.createContext(canvas, is_SDL_OPENGL, usePageCanvas, webGLContextAttributes);
              
        SDL.surfaces[surf] = {
          width: width,
          height: height,
          canvas: canvas,
          ctx: ctx,
          surf: surf,
          buffer: buffer,
          pixelFormat: pixelFormat,
          alpha: 255,
          flags: flags,
          locked: 0,
          usePageCanvas: usePageCanvas,
          source: source,
  
          isFlagSet: function(flag) {
            return flags & flag;
          }
        };
  
        return surf;
      },copyIndexedColorData:function (surfData, rX, rY, rW, rH) {
        // HWPALETTE works with palette
        // setted by SDL_SetColors
        if (!surfData.colors) {
          return;
        }
        
        var fullWidth  = Module['canvas'].width;
        var fullHeight = Module['canvas'].height;
  
        var startX  = rX || 0;
        var startY  = rY || 0;
        var endX    = (rW || (fullWidth - startX)) + startX;
        var endY    = (rH || (fullHeight - startY)) + startY;
        
        var buffer  = surfData.buffer;
        var data    = surfData.image.data;
        var colors  = surfData.colors;
  
        for (var y = startY; y < endY; ++y) {
          var indexBase = y * fullWidth;
          var colorBase = indexBase * 4;
          for (var x = startX; x < endX; ++x) {
            // HWPALETTE have only 256 colors (not rgba)
            var index = HEAPU8[((buffer + indexBase + x)>>0)] * 3;
            var colorOffset = colorBase + x * 4;
  
            data[colorOffset   ] = colors[index   ];
            data[colorOffset +1] = colors[index +1];
            data[colorOffset +2] = colors[index +2];
            //unused: data[colorOffset +3] = color[index +3];
          }
        }
      },freeSurface:function (surf) {
        var refcountPointer = surf + 56;
        var refcount = HEAP32[((refcountPointer)>>2)];
        if (refcount > 1) {
          HEAP32[((refcountPointer)>>2)]=refcount - 1;
          return;
        }
  
        var info = SDL.surfaces[surf];
        if (!info.usePageCanvas && info.canvas) SDL.canvasPool.push(info.canvas);
        if (info.buffer) _free(info.buffer);
        _free(info.pixelFormat);
        _free(surf);
        SDL.surfaces[surf] = null;
  
        if (surf === SDL.screen) {
          SDL.screen = null;
        }
      },downFingers:{},savedKeydown:null,receiveEvent:function (event) {
        function unpressAllPressedKeys() {
          // Un-press all pressed keys: TODO
          for (var code in SDL.keyboardMap) {
            SDL.events.push({
              type: 'keyup',
              keyCode: SDL.keyboardMap[code]
            });
          }
        };
        switch(event.type) {
          case 'touchstart': case 'touchmove': {
            event.preventDefault();
  
            var touches = [];
            
            // Clear out any touchstart events that we've already processed
            if (event.type === 'touchstart') {
              for (var i = 0; i < event.touches.length; i++) {
                var touch = event.touches[i];
                if (SDL.downFingers[touch.identifier] != true) {
                  SDL.downFingers[touch.identifier] = true;
                  touches.push(touch);
                }
              }
            } else {
              touches = event.touches;
            }
            
            var firstTouch = touches[0];
            if (event.type == 'touchstart') {
              SDL.DOMButtons[0] = 1;
            }
            var mouseEventType;
            switch(event.type) {
              case 'touchstart': mouseEventType = 'mousedown'; break;
              case 'touchmove': mouseEventType = 'mousemove'; break;
            }
            var mouseEvent = {
              type: mouseEventType,
              button: 0,
              pageX: firstTouch.clientX,
              pageY: firstTouch.clientY
            };
            SDL.events.push(mouseEvent);
  
            for (var i = 0; i < touches.length; i++) {
              var touch = touches[i];
              SDL.events.push({
                type: event.type,
                touch: touch
              });
            };
            break;
          }
          case 'touchend': {
            event.preventDefault();
            
            // Remove the entry in the SDL.downFingers hash
            // because the finger is no longer down.
            for(var i = 0; i < event.changedTouches.length; i++) {
              var touch = event.changedTouches[i];
              if (SDL.downFingers[touch.identifier] === true) {
                delete SDL.downFingers[touch.identifier];
              }
            }
  
            var mouseEvent = {
              type: 'mouseup',
              button: 0,
              pageX: event.changedTouches[0].clientX,
              pageY: event.changedTouches[0].clientY
            };
            SDL.DOMButtons[0] = 0;
            SDL.events.push(mouseEvent);
            
            for (var i = 0; i < event.changedTouches.length; i++) {
              var touch = event.changedTouches[i];
              SDL.events.push({
                type: 'touchend',
                touch: touch
              });
            };
            break;
          }
          case 'mousemove':
            if (SDL.DOMButtons[0] === 1) {
              SDL.events.push({
                type: 'touchmove',
                touch: {
                  identifier: 0,
                  deviceID: -1,
                  pageX: event.pageX,
                  pageY: event.pageY
                }
              });
            }
            if (Browser.pointerLock) {
              // workaround for firefox bug 750111
              if ('mozMovementX' in event) {
                event['movementX'] = event['mozMovementX'];
                event['movementY'] = event['mozMovementY'];
              }
              // workaround for Firefox bug 782777
              if (event['movementX'] == 0 && event['movementY'] == 0) {
                // ignore a mousemove event if it doesn't contain any movement info
                // (without pointer lock, we infer movement from pageX/pageY, so this check is unnecessary)
                event.preventDefault();
                return;
              }
            }
            // fall through
          case 'keydown': case 'keyup': case 'keypress': case 'mousedown': case 'mouseup': case 'DOMMouseScroll': case 'mousewheel': case 'wheel':
            // If we preventDefault on keydown events, the subsequent keypress events
            // won't fire. However, it's fine (and in some cases necessary) to
            // preventDefault for keys that don't generate a character. Otherwise,
            // preventDefault is the right thing to do in general.
            if (event.type !== 'keydown' || (!SDL.unicode && !SDL.textInput) || (event.keyCode === 8 /* backspace */ || event.keyCode === 9 /* tab */)) {
              event.preventDefault();
            }
  
            if (event.type == 'DOMMouseScroll' || event.type == 'mousewheel' || event.type == 'wheel') {
              // Simulate old-style SDL events representing mouse wheel input as buttons
              var button = Browser.getMouseWheelDelta(event) > 0 ? 4 : 3;
              var event1 = {
                type: 'mousedown',
                button: button,
                pageX: event.pageX,
                pageY: event.pageY
              };
              SDL.events.push(event1);
              var event2 = {
                type: 'mouseup',
                button: button,
                pageX: event.pageX,
                pageY: event.pageY
              };
              SDL.events.push(event2);
  
              // Convert DOMMouseScroll events to wheel events for new style SDL events.
              if (event.type == 'DOMMouseScroll') {
                SDL.events.push({
                  type: 'wheel',
                  deltaX: 0,
                  deltaY: -event.detail,
                });
                break;
              } else if (event.type == 'mousewheel') {
                SDL.events.push({
                  type: 'wheel',
                  deltaX: 0,
                  deltaY: event.wheelDelta,
                });
                break;
              }
            } else if (event.type == 'mousedown') {
              SDL.DOMButtons[event.button] = 1;
              SDL.events.push({
                type: 'touchstart',
                touch: {
                  identifier: 0,
                  deviceID: -1,
                  pageX: event.pageX,
                  pageY: event.pageY
                }
              });
            } else if (event.type == 'mouseup') {
              // ignore extra ups, can happen if we leave the canvas while pressing down, then return,
              // since we add a mouseup in that case
              if (!SDL.DOMButtons[event.button]) {
                return;
              }
  
              SDL.events.push({
                type: 'touchend',
                touch: {
                  identifier: 0,
                  deviceID: -1,
                  pageX: event.pageX,
                  pageY: event.pageY
                }
              });
              SDL.DOMButtons[event.button] = 0;
            }
  
            // We can only request fullscreen as the result of user input.
            // Due to this limitation, we toggle a boolean on keydown which
            // SDL_WM_ToggleFullScreen will check and subsequently set another
            // flag indicating for us to request fullscreen on the following
            // keyup. This isn't perfect, but it enables SDL_WM_ToggleFullScreen
            // to work as the result of a keypress (which is an extremely
            // common use case).
            if (event.type === 'keydown' || event.type === 'mousedown') {
              SDL.canRequestFullscreen = true;
            } else if (event.type === 'keyup' || event.type === 'mouseup') {
              if (SDL.isRequestingFullscreen) {
                Module['requestFullScreen'](true, true);
                SDL.isRequestingFullscreen = false;
              }
              SDL.canRequestFullscreen = false;
            }
  
            // SDL expects a unicode character to be passed to its keydown events.
            // Unfortunately, the browser APIs only provide a charCode property on
            // keypress events, so we must backfill in keydown events with their
            // subsequent keypress event's charCode.
            if (event.type === 'keypress' && SDL.savedKeydown) {
              // charCode is read-only
              SDL.savedKeydown.keypressCharCode = event.charCode;
              SDL.savedKeydown = null;
            } else if (event.type === 'keydown') {
              SDL.savedKeydown = event;
            }
  
            // Don't push keypress events unless SDL_StartTextInput has been called.
            if (event.type !== 'keypress' || SDL.textInput) {
              SDL.events.push(event);
            }
            break;
          case 'mouseout':
            // Un-press all pressed mouse buttons, because we might miss the release outside of the canvas
            for (var i = 0; i < 3; i++) {
              if (SDL.DOMButtons[i]) {
                SDL.events.push({
                  type: 'mouseup',
                  button: i,
                  pageX: event.pageX,
                  pageY: event.pageY
                });
                SDL.DOMButtons[i] = 0;
              }
            }
            event.preventDefault();
            break;
          case 'focus':
            SDL.events.push(event);
            event.preventDefault();
            break;
          case 'blur':
            SDL.events.push(event);
            unpressAllPressedKeys();
            event.preventDefault();
            break;
          case 'visibilitychange':
            SDL.events.push({
              type: 'visibilitychange',
              visible: !document.hidden
            });
            unpressAllPressedKeys();
            event.preventDefault();
            break;
          case 'unload':
            if (Browser.mainLoop.runner) {
              SDL.events.push(event);
              // Force-run a main event loop, since otherwise this event will never be caught!
              Browser.mainLoop.runner();
            }
            return;
          case 'resize':
            SDL.events.push(event);
            // manually triggered resize event doesn't have a preventDefault member
            if (event.preventDefault) {
              event.preventDefault();
            }
            break;
        }
        if (SDL.events.length >= 10000) {
          Module.printErr('SDL event queue full, dropping events');
          SDL.events = SDL.events.slice(0, 10000);
        }
        // If we have a handler installed, this will push the events to the app
        // instead of the app polling for them.
        SDL.flushEventsToHandler();
        return;
      },handleEvent:function (event) {
        if (event.handled) return;
        event.handled = true;
  
        switch (event.type) {
          case 'touchstart': case 'touchend': case 'touchmove': {
            Browser.calculateMouseEvent(event);
            break;
          }
          case 'keydown': case 'keyup': {
            var down = event.type === 'keydown';
            var code = event.keyCode;
            if (code >= 65 && code <= 90) {
              code += 32; // make lowercase for SDL
            } else {
              code = SDL.keyCodes[event.keyCode] || event.keyCode;
            }
            HEAP8[(((SDL.keyboardState)+(code))>>0)]=down;
            // TODO: lmeta, rmeta, numlock, capslock, KMOD_MODE, KMOD_RESERVED
            SDL.modState = (HEAP8[(((SDL.keyboardState)+(1248))>>0)] ? 0x0040 | 0x0080 : 0) | // KMOD_LCTRL & KMOD_RCTRL
              (HEAP8[(((SDL.keyboardState)+(1249))>>0)] ? 0x0001 | 0x0002 : 0) | // KMOD_LSHIFT & KMOD_RSHIFT
              (HEAP8[(((SDL.keyboardState)+(1250))>>0)] ? 0x0100 | 0x0200 : 0); // KMOD_LALT & KMOD_RALT
  
            if (down) {
              SDL.keyboardMap[code] = event.keyCode; // save the DOM input, which we can use to unpress it during blur
            } else {
              delete SDL.keyboardMap[code];
            }
  
            break;
          }
          case 'mousedown': case 'mouseup':
            if (event.type == 'mousedown') {
              // SDL_BUTTON(x) is defined as (1 << ((x)-1)).  SDL buttons are 1-3,
              // and DOM buttons are 0-2, so this means that the below formula is
              // correct.
              SDL.buttonState |= 1 << event.button;
            } else if (event.type == 'mouseup') {
              SDL.buttonState &= ~(1 << event.button);
            }
            // fall through
          case 'mousemove': {
            Browser.calculateMouseEvent(event);
            break;
          }
        }
      },flushEventsToHandler:function () {
        if (!SDL.eventHandler) return;
  
        // All SDLEvents take the same amount of memory
        var sdlEventPtr = allocate(28, "i8", ALLOC_STACK);
  
        while (SDL.pollEvent(sdlEventPtr)) {
          Runtime.dynCall('iii', SDL.eventHandler, [SDL.eventHandlerContext, sdlEventPtr]);
        }
      },pollEvent:function (ptr) {
        if (SDL.initFlags & 0x200 && SDL.joystickEventState) {
          // If SDL_INIT_JOYSTICK was supplied AND the joystick system is configured
          // to automatically query for events, query for joystick events.
          SDL.queryJoysticks();
        }
        if (ptr) {
          while (SDL.events.length > 0) {
            if (SDL.makeCEvent(SDL.events.shift(), ptr) !== false) return 1;
          }
          return 0;
        } else {
          // XXX: somewhat risky in that we do not check if the event is real or not (makeCEvent returns false) if no pointer supplied
          return SDL.events.length > 0;
        }
      },makeCEvent:function (event, ptr) {
        if (typeof event === 'number') {
          // This is a pointer to a native C event that was SDL_PushEvent'ed
          _memcpy(ptr, event, 28); // XXX
          return;
        }
  
        SDL.handleEvent(event);
  
        switch (event.type) {
          case 'keydown': case 'keyup': {
            var down = event.type === 'keydown';
            //Module.print('Received key event: ' + event.keyCode);
            var key = event.keyCode;
            if (key >= 65 && key <= 90) {
              key += 32; // make lowercase for SDL
            } else {
              key = SDL.keyCodes[event.keyCode] || event.keyCode;
            }
            var scan;
            if (key >= 1024) {
              scan = key - 1024;
            } else {
              scan = SDL.scanCodes[key] || key;
            }
  
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP8[(((ptr)+(8))>>0)]=down ? 1 : 0;
            HEAP8[(((ptr)+(9))>>0)]=0; // TODO
            HEAP32[(((ptr)+(12))>>2)]=scan;
            HEAP32[(((ptr)+(16))>>2)]=key;
            HEAP16[(((ptr)+(20))>>1)]=SDL.modState;
            // some non-character keys (e.g. backspace and tab) won't have keypressCharCode set, fill in with the keyCode.
            HEAP32[(((ptr)+(24))>>2)]=event.keypressCharCode || key;
  
            break;
          }
          case 'keypress': {
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            // Not filling in windowID for now
            var cStr = intArrayFromString(String.fromCharCode(event.charCode));
            for (var i = 0; i < cStr.length; ++i) {
              HEAP8[(((ptr)+(8 + i))>>0)]=cStr[i];
            }
            break;
          }
          case 'mousedown': case 'mouseup': case 'mousemove': {
            if (event.type != 'mousemove') {
              var down = event.type === 'mousedown';
              HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
              HEAP32[(((ptr)+(4))>>2)]=0;
              HEAP32[(((ptr)+(8))>>2)]=0;
              HEAP32[(((ptr)+(12))>>2)]=0;
              HEAP8[(((ptr)+(16))>>0)]=event.button+1; // DOM buttons are 0-2, SDL 1-3
              HEAP8[(((ptr)+(17))>>0)]=down ? 1 : 0;
              HEAP32[(((ptr)+(20))>>2)]=Browser.mouseX;
              HEAP32[(((ptr)+(24))>>2)]=Browser.mouseY;
            } else {
              HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
              HEAP32[(((ptr)+(4))>>2)]=0;
              HEAP32[(((ptr)+(8))>>2)]=0;
              HEAP32[(((ptr)+(12))>>2)]=0;
              HEAP32[(((ptr)+(16))>>2)]=SDL.buttonState;
              HEAP32[(((ptr)+(20))>>2)]=Browser.mouseX;
              HEAP32[(((ptr)+(24))>>2)]=Browser.mouseY;
              HEAP32[(((ptr)+(28))>>2)]=Browser.mouseMovementX;
              HEAP32[(((ptr)+(32))>>2)]=Browser.mouseMovementY;
            }
            break;
          }
          case 'wheel': {
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP32[(((ptr)+(16))>>2)]=event.deltaX;
            HEAP32[(((ptr)+(20))>>2)]=event.deltaY; 
            break;       
          }
          case 'touchstart': case 'touchend': case 'touchmove': {
            var touch = event.touch;
            if (!Browser.touches[touch.identifier]) break;
            var w = Module['canvas'].width;
            var h = Module['canvas'].height;
            var x = Browser.touches[touch.identifier].x / w;
            var y = Browser.touches[touch.identifier].y / h;
            var lx = Browser.lastTouches[touch.identifier].x / w;
            var ly = Browser.lastTouches[touch.identifier].y / h;
            var dx = x - lx;
            var dy = y - ly;
            if (touch['deviceID'] === undefined) touch.deviceID = SDL.TOUCH_DEFAULT_ID;
            if (dx === 0 && dy === 0 && event.type === 'touchmove') return false; // don't send these if nothing happened
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP32[(((ptr)+(4))>>2)]=_SDL_GetTicks();
            (tempI64 = [touch.deviceID>>>0,(tempDouble=touch.deviceID,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((ptr)+(8))>>2)]=tempI64[0],HEAP32[(((ptr)+(12))>>2)]=tempI64[1]);
            (tempI64 = [touch.identifier>>>0,(tempDouble=touch.identifier,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((ptr)+(16))>>2)]=tempI64[0],HEAP32[(((ptr)+(20))>>2)]=tempI64[1]);
            HEAPF32[(((ptr)+(24))>>2)]=x;
            HEAPF32[(((ptr)+(28))>>2)]=y;
            HEAPF32[(((ptr)+(32))>>2)]=dx;
            HEAPF32[(((ptr)+(36))>>2)]=dy;
            if (touch.force !== undefined) {
              HEAPF32[(((ptr)+(40))>>2)]=touch.force;
            } else { // No pressure data, send a digital 0/1 pressure.
              HEAPF32[(((ptr)+(40))>>2)]=event.type == "touchend" ? 0 : 1;
            }
            break;
          }
          case 'unload': {
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            break;
          }
          case 'resize': {
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP32[(((ptr)+(4))>>2)]=event.w;
            HEAP32[(((ptr)+(8))>>2)]=event.h;
            break;
          }
          case 'joystick_button_up': case 'joystick_button_down': {
            var state = event.type === 'joystick_button_up' ? 0 : 1;
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP8[(((ptr)+(4))>>0)]=event.index;
            HEAP8[(((ptr)+(5))>>0)]=event.button;
            HEAP8[(((ptr)+(6))>>0)]=state;
            break;
          }
          case 'joystick_axis_motion': {
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP8[(((ptr)+(4))>>0)]=event.index;
            HEAP8[(((ptr)+(5))>>0)]=event.axis;
            HEAP32[(((ptr)+(8))>>2)]=SDL.joystickAxisValueConversion(event.value);
            break;
          }
          case 'focus': {
            var SDL_WINDOWEVENT_FOCUS_GAINED = 12 /* SDL_WINDOWEVENT_FOCUS_GAINED */;
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP32[(((ptr)+(4))>>2)]=0;
            HEAP8[(((ptr)+(8))>>0)]=SDL_WINDOWEVENT_FOCUS_GAINED;
            break;
          }
          case 'blur': {
            var SDL_WINDOWEVENT_FOCUS_LOST = 13 /* SDL_WINDOWEVENT_FOCUS_LOST */;
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP32[(((ptr)+(4))>>2)]=0;
            HEAP8[(((ptr)+(8))>>0)]=SDL_WINDOWEVENT_FOCUS_LOST;
            break;
          }
          case 'visibilitychange': {
            var SDL_WINDOWEVENT_SHOWN  = 1 /* SDL_WINDOWEVENT_SHOWN */;
            var SDL_WINDOWEVENT_HIDDEN = 2 /* SDL_WINDOWEVENT_HIDDEN */;
            var visibilityEventID = event.visible ? SDL_WINDOWEVENT_SHOWN : SDL_WINDOWEVENT_HIDDEN;
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP32[(((ptr)+(4))>>2)]=0;
            HEAP8[(((ptr)+(8))>>0)]=visibilityEventID;
            break;
          }
          default: throw 'Unhandled SDL event: ' + event.type;
        }
      },estimateTextWidth:function (fontData, text) {
        var h = fontData.size;
        var fontString = h + 'px ' + fontData.name;
        var tempCtx = SDL.ttfContext;
        assert(tempCtx, 'TTF_Init must have been called');
        tempCtx.save();
        tempCtx.font = fontString;
        var ret = tempCtx.measureText(text).width | 0;
        tempCtx.restore();
        return ret;
      },allocateChannels:function (num) { // called from Mix_AllocateChannels and init
        if (SDL.numChannels && SDL.numChannels >= num && num != 0) return;
        SDL.numChannels = num;
        SDL.channels = [];
        for (var i = 0; i < num; i++) {
          SDL.channels[i] = {
            audio: null,
            volume: 1.0
          };
        }
      },setGetVolume:function (info, volume) {
        if (!info) return 0;
        var ret = info.volume * 128; // MIX_MAX_VOLUME
        if (volume != -1) {
          info.volume = Math.min(Math.max(volume, 0), 128) / 128;
          if (info.audio) {
            try {
              info.audio.volume = info.volume; // For <audio> element
              if (info.audio.webAudioGainNode) info.audio.webAudioGainNode['gain']['value'] = info.volume; // For WebAudio playback
            } catch(e) {
              Module.printErr('setGetVolume failed to set audio volume: ' + e);
            }
          }
        }
        return ret;
      },playWebAudio:function (audio) {
        if (!audio) return;
        if (audio.webAudioNode) return; // This instance is already playing, don't start again.
        if (!SDL.webAudioAvailable()) return;
        try {
          var webAudio = audio.resource.webAudio;
          audio.paused = false;
          if (!webAudio.decodedBuffer) {
            if (webAudio.onDecodeComplete === undefined) abort("Cannot play back audio object that was not loaded");
            webAudio.onDecodeComplete.push(function() { if (!audio.paused) SDL.playWebAudio(audio); });
            return;
          }
          audio.webAudioNode = SDL.audioContext['createBufferSource']();
          audio.webAudioNode['buffer'] = webAudio.decodedBuffer;
          audio.webAudioNode['loop'] = audio.loop;
          audio.webAudioNode['onended'] = function() { audio.onended(); } // For <media> element compatibility, route the onended signal to the instance.
  
          // Add an intermediate gain node to control volume.
          audio.webAudioGainNode = SDL.audioContext['createGain']();
          audio.webAudioGainNode['gain']['value'] = audio.volume;
          audio.webAudioNode['connect'](audio.webAudioGainNode);
          audio.webAudioGainNode['connect'](SDL.audioContext['destination']);
          audio.webAudioNode['start'](0, audio.currentPosition);
          audio.startTime = SDL.audioContext['currentTime'] - audio.currentPosition;
        } catch(e) {
          Module.printErr('playWebAudio failed: ' + e);
        }
      },pauseWebAudio:function (audio) {
        if (!audio) return;
        if (audio.webAudioNode) {
          try {
            // Remember where we left off, so that if/when we resume, we can restart the playback at a proper place.
            audio.currentPosition = (SDL.audioContext['currentTime'] - audio.startTime) % audio.resource.webAudio.decodedBuffer.duration;
            // Important: When we reach here, the audio playback is stopped by the user. But when calling .stop() below, the Web Audio
            // graph will send the onended signal, but we don't want to process that, since pausing should not clear/destroy the audio
            // channel.
            audio.webAudioNode['onended'] = undefined;
            audio.webAudioNode.stop();
            audio.webAudioNode = undefined;
          } catch(e) {
            Module.printErr('pauseWebAudio failed: ' + e);
          }
        }
        audio.paused = true;
      },openAudioContext:function () {
        // Initialize Web Audio API if we haven't done so yet. Note: Only initialize Web Audio context ever once on the web page,
        // since initializing multiple times fails on Chrome saying 'audio resources have been exhausted'.
        if (!SDL.audioContext) {
          if (typeof(AudioContext) !== 'undefined') SDL.audioContext = new AudioContext();
          else if (typeof(webkitAudioContext) !== 'undefined') SDL.audioContext = new webkitAudioContext();
        }
      },webAudioAvailable:function () { return !!SDL.audioContext; },fillWebAudioBufferFromHeap:function (heapPtr, sizeSamplesPerChannel, dstAudioBuffer) {
        // The input audio data is interleaved across the channels, i.e. [L, R, L, R, L, R, ...] and is either 8-bit or 16-bit as
        // supported by the SDL API. The output audio wave data for Web Audio API must be in planar buffers of [-1,1]-normalized Float32 data,
        // so perform a buffer conversion for the data.
        var numChannels = SDL.audio.channels;
        for(var c = 0; c < numChannels; ++c) {
          var channelData = dstAudioBuffer['getChannelData'](c);
          if (channelData.length != sizeSamplesPerChannel) {
            throw 'Web Audio output buffer length mismatch! Destination size: ' + channelData.length + ' samples vs expected ' + sizeSamplesPerChannel + ' samples!';
          }
          if (SDL.audio.format == 0x8010 /*AUDIO_S16LSB*/) {
            for(var j = 0; j < sizeSamplesPerChannel; ++j) {
              channelData[j] = (HEAP16[(((heapPtr)+((j*numChannels + c)*2))>>1)]) / 0x8000;
            }
          } else if (SDL.audio.format == 0x0008 /*AUDIO_U8*/) {
            for(var j = 0; j < sizeSamplesPerChannel; ++j) {
              var v = (HEAP8[(((heapPtr)+(j*numChannels + c))>>0)]);
              channelData[j] = ((v >= 0) ? v-128 : v+128) /128;
            }
          }
        }
      },debugSurface:function (surfData) {
        console.log('dumping surface ' + [surfData.surf, surfData.source, surfData.width, surfData.height]);
        var image = surfData.ctx.getImageData(0, 0, surfData.width, surfData.height);
        var data = image.data;
        var num = Math.min(surfData.width, surfData.height);
        for (var i = 0; i < num; i++) {
          console.log('   diagonal ' + i + ':' + [data[i*surfData.width*4 + i*4 + 0], data[i*surfData.width*4 + i*4 + 1], data[i*surfData.width*4 + i*4 + 2], data[i*surfData.width*4 + i*4 + 3]]);
        }
      },joystickEventState:1,lastJoystickState:{},joystickNamePool:{},recordJoystickState:function (joystick, state) {
        // Standardize button state.
        var buttons = new Array(state.buttons.length);
        for (var i = 0; i < state.buttons.length; i++) {
          buttons[i] = SDL.getJoystickButtonState(state.buttons[i]);
        }
  
        SDL.lastJoystickState[joystick] = {
          buttons: buttons,
          axes: state.axes.slice(0),
          timestamp: state.timestamp,
          index: state.index,
          id: state.id
        };
      },getJoystickButtonState:function (button) {
        if (typeof button === 'object') {
          // Current gamepad API editor's draft (Firefox Nightly)
          // https://dvcs.w3.org/hg/gamepad/raw-file/default/gamepad.html#idl-def-GamepadButton
          return button.pressed;
        } else {
          // Current gamepad API working draft (Firefox / Chrome Stable)
          // http://www.w3.org/TR/2012/WD-gamepad-20120529/#gamepad-interface
          return button > 0;
        }
      },queryJoysticks:function () {
        for (var joystick in SDL.lastJoystickState) {
          var state = SDL.getGamepad(joystick - 1);
          var prevState = SDL.lastJoystickState[joystick];
          // Check only if the timestamp has differed.
          // NOTE: Timestamp is not available in Firefox.
          if (typeof state.timestamp !== 'number' || state.timestamp !== prevState.timestamp) {
            var i;
            for (i = 0; i < state.buttons.length; i++) {
              var buttonState = SDL.getJoystickButtonState(state.buttons[i]);
              // NOTE: The previous state already has a boolean representation of
              //       its button, so no need to standardize its button state here.
              if (buttonState !== prevState.buttons[i]) {
                // Insert button-press event.
                SDL.events.push({
                  type: buttonState ? 'joystick_button_down' : 'joystick_button_up',
                  joystick: joystick,
                  index: joystick - 1,
                  button: i
                });
              }
            }
            for (i = 0; i < state.axes.length; i++) {
              if (state.axes[i] !== prevState.axes[i]) {
                // Insert axes-change event.
                SDL.events.push({
                  type: 'joystick_axis_motion',
                  joystick: joystick,
                  index: joystick - 1,
                  axis: i,
                  value: state.axes[i]
                });
              }
            }
  
            SDL.recordJoystickState(joystick, state);
          }
        }
      },joystickAxisValueConversion:function (value) {
        // Ensures that 0 is 0, 1 is 32767, and -1 is 32768.
        return Math.ceil(((value+1) * 32767.5) - 32768);
      },getGamepads:function () {
        var fcn = navigator.getGamepads || navigator.webkitGamepads || navigator.mozGamepads || navigator.gamepads || navigator.webkitGetGamepads;
        if (fcn !== undefined) {
          // The function must be applied on the navigator object.
          return fcn.apply(navigator);
        } else {
          return [];
        }
      },getGamepad:function (deviceIndex) {
        var gamepads = SDL.getGamepads();
        if (gamepads.length > deviceIndex && deviceIndex >= 0) {
          return gamepads[deviceIndex];
        }
        return null;
      }};function _Mix_Volume(channel, volume) {
      if (channel == -1) {
        for (var i = 0; i < SDL.numChannels-1; i++) {
          _Mix_Volume(i, volume);
        }
        return _Mix_Volume(SDL.numChannels-1, volume);
      }
      return SDL.setGetVolume(SDL.channels[channel], volume);
    }

  function _Mix_Playing(channel) {
      if (channel === -1) {
        var count = 0;
        for (var i = 0; i < SDL.channels.length; i++) {
          count += _Mix_Playing(i);
        }
        return count;
      }
      var info = SDL.channels[channel];
      if (info && info.audio && !info.audio.paused) {
        return 1;
      }
      return 0;
    }

  var _emscripten_landingpad=true;

  
  function ___cxa_free_exception(ptr) {
      try {
        return _free(ptr - ___cxa_exception_header_size);
      } catch(e) { // XXX FIXME
        Module.printErr('exception during cxa_free_exception: ' + e);
      }
    }
  
  var ___cxa_caught_exceptions=[];function ___cxa_end_catch() {
      if (___cxa_end_catch.rethrown) {
        ___cxa_end_catch.rethrown = false;
        return;
      }
      // Clear state flag.
      asm['setThrew'](0);
      // Call destructor if one is registered then clear it.
      var ptr = ___cxa_caught_exceptions.pop();
      if (ptr) {
        header = ptr - ___cxa_exception_header_size;
        var destructor = HEAP32[(((header)+(4))>>2)];
        if (destructor) {
          Runtime.dynCall('vi', destructor, [ptr]);
          HEAP32[(((header)+(4))>>2)]=0;
        }
        ___cxa_free_exception(ptr);
        ___cxa_last_thrown_exception = 0;
      }
    }

  
  
  
  
  
  
  function _mkport() { throw 'TODO' }var SOCKFS={mount:function (mount) {
        return FS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createSocket:function (family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
  
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
  
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
  
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
  
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
  
        return sock;
      },getSocket:function (fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function (stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function (stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function (stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function () {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function (sock, addr, port) {
          var ws;
  
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
  
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              // runtimeConfig gets set to true if WebSocket runtime configuration is available.
              var runtimeConfig = (Module['websocket'] && ('object' === typeof Module['websocket']));
  
              // The default value is 'ws://' the replace is needed because the compiler replaces "//" comments with '#'
              // comments without checking context, so we'd end up with ws:#, the replace swaps the "#" for "//" again.
              var url = 'ws:#'.replace('#', '//');
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['url']) {
                  url = Module['websocket']['url']; // Fetch runtime WebSocket URL config.
                }
              }
  
              if (url === 'ws://' || url === 'wss://') { // Is the supplied URL config just a prefix, if so complete it.
                url = url + addr + ':' + port;
              }
  
              // Make the WebSocket subprotocol (Sec-WebSocket-Protocol) default to binary if no configuration is set.
              var subProtocols = 'binary'; // The default value is 'binary'
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['subprotocol']) {
                  subProtocols = Module['websocket']['subprotocol']; // Fetch runtime WebSocket subprotocol config.
                }
              }
  
              // The regex trims the string (removes spaces at the beginning and end, then splits the string by
              // <any space>,<any space> into an Array. Whitespace removal is important for Websockify and ws.
              subProtocols = subProtocols.replace(/^ +| +$/g,"").split(/ *, */);
  
              // The node ws library API for specifying optional subprotocol is slightly different than the browser's.
              var opts = ENVIRONMENT_IS_NODE ? {'protocol': subProtocols.toString()} : subProtocols;
  
              // If node we use the ws library.
              var WebSocket = ENVIRONMENT_IS_NODE ? require('ws') : window['WebSocket'];
              ws = new WebSocket(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
  
  
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
  
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
  
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
  
          return peer;
        },getPeer:function (sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function (sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function (sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function (sock, peer) {
          var first = true;
  
          var handleOpen = function () {
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
  
          function handleMessage(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
            data = new Uint8Array(data);  // make a typed array view on the array buffer
  
  
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
  
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
          };
  
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('error', function() {
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onmessage = function peer_socket_onmessage(event) {
              handleMessage(event.data);
            };
          }
        },poll:function (sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
  
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
  
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
  
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
  
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
  
          return mask;
        },ioctl:function (sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function (sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function (sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port || _mkport();
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function (sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODS.EOPNOTSUPP);
          }
  
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
  
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
  
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
  
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function (sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
  
          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
  
              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
  
              // push to queue for accept to pick up
              sock.pending.push(newsock);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
            }
          });
          sock.server.on('closed', function() {
            sock.server = null;
          });
          sock.server.on('error', function() {
            // don't throw
          });
        },accept:function (listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function (sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function (sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
  
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
  
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          var data;
          if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
            data = buffer.slice(offset, offset + length);
          } else {  // ArrayBufferView
            data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);
          }
  
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
  
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function (sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
  
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
  
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
  
  
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
  
          return res;
        }}};function _send(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _write(fd, buf, len);
    }
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var fd = _fileno(stream);
      var bytesWritten = _write(fd, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        return Math.floor(bytesWritten / size);
      }
    }
  
  
   
  Module["_strlen"] = _strlen;
  
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = (HEAP32[((tempDoublePtr)>>2)]=HEAP32[(((varargs)+(argIndex))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((varargs)+((argIndex)+(4)))>>2)],(+(HEAPF64[(tempDoublePtr)>>3])));
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+4))>>2)]];
  
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
        }
        argIndex += Runtime.getNativeFieldSize(type);
        return ret;
      }
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[((textIndex)>>0)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)>>0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          var flagPadSign = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              case 32:
                flagPadSign = true;
                break;
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          }
  
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)>>0)];
            }
          }
  
          // Handle precision.
          var precisionSet = false, precision = -1;
          if (next == 46) {
            precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)>>0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)>>0)];
          }
          if (precision < 0) {
            precision = 6; // Standard default.
            precisionSet = false;
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)>>0)];
  
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
  
              // Add sign if needed
              if (currArg >= 0) {
                if (flagAlwaysSigned) {
                  prefix = '+' + prefix;
                } else if (flagPadSign) {
                  prefix = ' ' + prefix;
                }
              }
  
              // Move sign to prefix so we zero-pad after the sign
              if (argText.charAt(0) == '-') {
                prefix = '-' + prefix;
                argText = argText.substr(1);
              }
  
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
  
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
  
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
  
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
  
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
  
                // Add sign.
                if (currArg >= 0) {
                  if (flagAlwaysSigned) {
                    argText = '+' + argText;
                  } else if (flagPadSign) {
                    argText = ' ' + argText;
                  }
                }
              }
  
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
  
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
  
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)>>0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length;
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[((i)>>0)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }function _printf(format, varargs) {
      // int printf(const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var stdout = HEAP32[((_stdout)>>2)];
      return _fprintf(stdout, format, varargs);
    }

  function _glBindTexture(target, texture) {
      GLctx.bindTexture(target, texture ? GL.textures[texture] : null);
    }

  
  
  
  var GLImmediate={MapTreeLib:null,spawnMapTreeLib:function () {
        /* A naive implementation of a map backed by an array, and accessed by
         * naive iteration along the array. (hashmap with only one bucket)
         */
        function CNaiveListMap() {
          var list = [];
  
          this.insert = function CNaiveListMap_insert(key, val) {
            if (this.contains(key|0)) return false;
            list.push([key, val]);
            return true;
          };
  
          var __contains_i;
          this.contains = function CNaiveListMap_contains(key) {
            for (__contains_i = 0; __contains_i < list.length; ++__contains_i) {
              if (list[__contains_i][0] === key) return true;
            }
            return false;
          };
  
          var __get_i;
          this.get = function CNaiveListMap_get(key) {
            for (__get_i = 0; __get_i < list.length; ++__get_i) {
              if (list[__get_i][0] === key) return list[__get_i][1];
            }
            return undefined;
          };
        };
  
        /* A tree of map nodes.
          Uses `KeyView`s to allow descending the tree without garbage.
          Example: {
            // Create our map object.
            var map = new ObjTreeMap();
  
            // Grab the static keyView for the map.
            var keyView = map.GetStaticKeyView();
  
            // Let's make a map for:
            // root: <undefined>
            //   1: <undefined>
            //     2: <undefined>
            //       5: "Three, sir!"
            //       3: "Three!"
  
            // Note how we can chain together `Reset` and `Next` to
            // easily descend based on multiple key fragments.
            keyView.Reset().Next(1).Next(2).Next(5).Set("Three, sir!");
            keyView.Reset().Next(1).Next(2).Next(3).Set("Three!");
          }
        */
        function CMapTree() {
          function CNLNode() {
            var map = new CNaiveListMap();
  
            this.child = function CNLNode_child(keyFrag) {
              if (!map.contains(keyFrag|0)) {
                map.insert(keyFrag|0, new CNLNode());
              }
              return map.get(keyFrag|0);
            };
  
            this.value = undefined;
            this.get = function CNLNode_get() {
              return this.value;
            };
  
            this.set = function CNLNode_set(val) {
              this.value = val;
            };
          }
  
          function CKeyView(root) {
            var cur;
  
            this.reset = function CKeyView_reset() {
              cur = root;
              return this;
            };
            this.reset();
  
            this.next = function CKeyView_next(keyFrag) {
              cur = cur.child(keyFrag);
              return this;
            };
  
            this.get = function CKeyView_get() {
              return cur.get();
            };
  
            this.set = function CKeyView_set(val) {
              cur.set(val);
            };
          };
  
          var root;
          var staticKeyView;
  
          this.createKeyView = function CNLNode_createKeyView() {
            return new CKeyView(root);
          }
  
          this.clear = function CNLNode_clear() {
            root = new CNLNode();
            staticKeyView = this.createKeyView();
          };
          this.clear();
  
          this.getStaticKeyView = function CNLNode_getStaticKeyView() {
            staticKeyView.reset();
            return staticKeyView;
          };
        };
  
        // Exports:
        return {
          create: function() {
            return new CMapTree();
          },
        };
      },TexEnvJIT:null,spawnTexEnvJIT:function () {
        // GL defs:
        var GL_TEXTURE0 = 0x84C0;
        var GL_TEXTURE_1D = 0x0DE0;
        var GL_TEXTURE_2D = 0x0DE1;
        var GL_TEXTURE_3D = 0x806f;
        var GL_TEXTURE_CUBE_MAP = 0x8513;
        var GL_TEXTURE_ENV = 0x2300;
        var GL_TEXTURE_ENV_MODE = 0x2200;
        var GL_TEXTURE_ENV_COLOR = 0x2201;
        var GL_TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515;
        var GL_TEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516;
        var GL_TEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517;
        var GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518;
        var GL_TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519;
        var GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851A;
  
        var GL_SRC0_RGB = 0x8580;
        var GL_SRC1_RGB = 0x8581;
        var GL_SRC2_RGB = 0x8582;
  
        var GL_SRC0_ALPHA = 0x8588;
        var GL_SRC1_ALPHA = 0x8589;
        var GL_SRC2_ALPHA = 0x858A;
  
        var GL_OPERAND0_RGB = 0x8590;
        var GL_OPERAND1_RGB = 0x8591;
        var GL_OPERAND2_RGB = 0x8592;
  
        var GL_OPERAND0_ALPHA = 0x8598;
        var GL_OPERAND1_ALPHA = 0x8599;
        var GL_OPERAND2_ALPHA = 0x859A;
  
        var GL_COMBINE_RGB = 0x8571;
        var GL_COMBINE_ALPHA = 0x8572;
  
        var GL_RGB_SCALE = 0x8573;
        var GL_ALPHA_SCALE = 0x0D1C;
  
        // env.mode
        var GL_ADD      = 0x0104;
        var GL_BLEND    = 0x0BE2;
        var GL_REPLACE  = 0x1E01;
        var GL_MODULATE = 0x2100;
        var GL_DECAL    = 0x2101;
        var GL_COMBINE  = 0x8570;
  
        // env.color/alphaCombiner
        //var GL_ADD         = 0x0104;
        //var GL_REPLACE     = 0x1E01;
        //var GL_MODULATE    = 0x2100;
        var GL_SUBTRACT    = 0x84E7;
        var GL_INTERPOLATE = 0x8575;
  
        // env.color/alphaSrc
        var GL_TEXTURE       = 0x1702;
        var GL_CONSTANT      = 0x8576;
        var GL_PRIMARY_COLOR = 0x8577;
        var GL_PREVIOUS      = 0x8578;
  
        // env.color/alphaOp
        var GL_SRC_COLOR           = 0x0300;
        var GL_ONE_MINUS_SRC_COLOR = 0x0301;
        var GL_SRC_ALPHA           = 0x0302;
        var GL_ONE_MINUS_SRC_ALPHA = 0x0303;
  
        var GL_RGB  = 0x1907;
        var GL_RGBA = 0x1908;
  
        // Our defs:
        var TEXENVJIT_NAMESPACE_PREFIX = "tej_";
        // Not actually constant, as they can be changed between JIT passes:
        var TEX_UNIT_UNIFORM_PREFIX = "uTexUnit";
        var TEX_COORD_VARYING_PREFIX = "vTexCoord";
        var PRIM_COLOR_VARYING = "vPrimColor";
        var TEX_MATRIX_UNIFORM_PREFIX = "uTexMatrix";
  
        // Static vars:
        var s_texUnits = null; //[];
        var s_activeTexture = 0;
  
        var s_requiredTexUnitsForPass = [];
  
        // Static funcs:
        function abort(info) {
          assert(false, "[TexEnvJIT] ABORT: " + info);
        }
  
        function abort_noSupport(info) {
          abort("No support: " + info);
        }
  
        function abort_sanity(info) {
          abort("Sanity failure: " + info);
        }
  
        function genTexUnitSampleExpr(texUnitID) {
          var texUnit = s_texUnits[texUnitID];
          var texType = texUnit.getTexType();
  
          var func = null;
          switch (texType) {
            case GL_TEXTURE_1D:
              func = "texture2D";
              break;
            case GL_TEXTURE_2D:
              func = "texture2D";
              break;
            case GL_TEXTURE_3D:
              return abort_noSupport("No support for 3D textures.");
            case GL_TEXTURE_CUBE_MAP:
              func = "textureCube";
              break;
            default:
              return abort_sanity("Unknown texType: 0x" + texType.toString(16));
          }
  
          var texCoordExpr = TEX_COORD_VARYING_PREFIX + texUnitID;
          if (TEX_MATRIX_UNIFORM_PREFIX != null) {
            texCoordExpr = "(" + TEX_MATRIX_UNIFORM_PREFIX + texUnitID + " * " + texCoordExpr + ")";
          }
          return func + "(" + TEX_UNIT_UNIFORM_PREFIX + texUnitID + ", " + texCoordExpr + ".xy)";
        }
  
        function getTypeFromCombineOp(op) {
          switch (op) {
            case GL_SRC_COLOR:
            case GL_ONE_MINUS_SRC_COLOR:
              return "vec3";
            case GL_SRC_ALPHA:
            case GL_ONE_MINUS_SRC_ALPHA:
              return "float";
          }
  
          return abort_noSupport("Unsupported combiner op: 0x" + op.toString(16));
        }
  
        function getCurTexUnit() {
          return s_texUnits[s_activeTexture];
        }
  
        function genCombinerSourceExpr(texUnitID, constantExpr, previousVar,
                                       src, op)
        {
          var srcExpr = null;
          switch (src) {
            case GL_TEXTURE:
              srcExpr = genTexUnitSampleExpr(texUnitID);
              break;
            case GL_CONSTANT:
              srcExpr = constantExpr;
              break;
            case GL_PRIMARY_COLOR:
              srcExpr = PRIM_COLOR_VARYING;
              break;
            case GL_PREVIOUS:
              srcExpr = previousVar;
              break;
            default:
                return abort_noSupport("Unsupported combiner src: 0x" + src.toString(16));
          }
  
          var expr = null;
          switch (op) {
            case GL_SRC_COLOR:
              expr = srcExpr + ".rgb";
              break;
            case GL_ONE_MINUS_SRC_COLOR:
              expr = "(vec3(1.0) - " + srcExpr + ".rgb)";
              break;
            case GL_SRC_ALPHA:
              expr = srcExpr + ".a";
              break;
            case GL_ONE_MINUS_SRC_ALPHA:
              expr = "(1.0 - " + srcExpr + ".a)";
              break;
            default:
              return abort_noSupport("Unsupported combiner op: 0x" + op.toString(16));
          }
  
          return expr;
        }
  
        function valToFloatLiteral(val) {
          if (val == Math.round(val)) return val + '.0';
          return val;
        }
  
  
        // Classes:
        function CTexEnv() {
          this.mode = GL_MODULATE;
          this.colorCombiner = GL_MODULATE;
          this.alphaCombiner = GL_MODULATE;
          this.colorScale = 1;
          this.alphaScale = 1;
          this.envColor = [0, 0, 0, 0];
  
          this.colorSrc = [
            GL_TEXTURE,
            GL_PREVIOUS,
            GL_CONSTANT
          ];
          this.alphaSrc = [
            GL_TEXTURE,
            GL_PREVIOUS,
            GL_CONSTANT
          ];
          this.colorOp = [
            GL_SRC_COLOR,
            GL_SRC_COLOR,
            GL_SRC_ALPHA
          ];
          this.alphaOp = [
            GL_SRC_ALPHA,
            GL_SRC_ALPHA,
            GL_SRC_ALPHA
          ];
  
          // Map GLenums to small values to efficiently pack the enums to bits for tighter access.
          this.traverseKey = {
            // mode
            0x1E01 /* GL_REPLACE */: 0,
            0x2100 /* GL_MODULATE */: 1,
            0x0104 /* GL_ADD */: 2,
            0x0BE2 /* GL_BLEND */: 3,
            0x2101 /* GL_DECAL */: 4,
            0x8570 /* GL_COMBINE */: 5,
  
            // additional color and alpha combiners
            0x84E7 /* GL_SUBTRACT */: 3,
            0x8575 /* GL_INTERPOLATE */: 4,
  
            // color and alpha src
            0x1702 /* GL_TEXTURE */: 0,
            0x8576 /* GL_CONSTANT */: 1,
            0x8577 /* GL_PRIMARY_COLOR */: 2,
            0x8578 /* GL_PREVIOUS */: 3,
  
            // color and alpha op
            0x0300 /* GL_SRC_COLOR */: 0,
            0x0301 /* GL_ONE_MINUS_SRC_COLOR */: 1,
            0x0302 /* GL_SRC_ALPHA */: 2,
            0x0300 /* GL_ONE_MINUS_SRC_ALPHA */: 3
          };
  
          // The tuple (key0,key1,key2) uniquely identifies the state of the variables in CTexEnv.
          // -1 on key0 denotes 'the whole cached key is dirty'
          this.key0 = -1;
          this.key1 = 0;
          this.key2 = 0;
  
          this.computeKey0 = function() {
            var k = this.traverseKey;
            var key = k[this.mode] * 1638400; // 6 distinct values.
            key += k[this.colorCombiner] * 327680; // 5 distinct values.
            key += k[this.alphaCombiner] * 65536; // 5 distinct values.
            // The above three fields have 6*5*5=150 distinct values -> 8 bits.
            key += (this.colorScale-1) * 16384; // 10 bits used.
            key += (this.alphaScale-1) * 4096; // 12 bits used.
            key += k[this.colorSrc[0]] * 1024; // 14
            key += k[this.colorSrc[1]] * 256; // 16
            key += k[this.colorSrc[2]] * 64; // 18
            key += k[this.alphaSrc[0]] * 16; // 20
            key += k[this.alphaSrc[1]] * 4; // 22
            key += k[this.alphaSrc[2]]; // 24 bits used total.
            return key;
          }
          this.computeKey1 = function() {
            var k = this.traverseKey;
            key = k[this.colorOp[0]] * 4096;
            key += k[this.colorOp[1]] * 1024;             
            key += k[this.colorOp[2]] * 256;
            key += k[this.alphaOp[0]] * 16;
            key += k[this.alphaOp[1]] * 4;
            key += k[this.alphaOp[2]];
            return key;            
          }
          // TODO: remove this. The color should not be part of the key!
          this.computeKey2 = function() {
            return this.envColor[0] * 16777216 + this.envColor[1] * 65536 + this.envColor[2] * 256 + 1 + this.envColor[3];
          }
          this.recomputeKey = function() {
            this.key0 = this.computeKey0();
            this.key1 = this.computeKey1();
            this.key2 = this.computeKey2();
          }
          this.invalidateKey = function() {
            this.key0 = -1; // The key of this texture unit must be recomputed when rendering the next time.
            GLImmediate.currentRenderer = null; // The currently used renderer must be re-evaluated at next render.
          }
        }
  
        function CTexUnit() {
          this.env = new CTexEnv();
          this.enabled_tex1D   = false;
          this.enabled_tex2D   = false;
          this.enabled_tex3D   = false;
          this.enabled_texCube = false;
          this.texTypesEnabled = 0; // A bitfield combination of the four flags above, used for fast access to operations.
  
          this.traverseState = function CTexUnit_traverseState(keyView) {
            if (this.texTypesEnabled) {
              if (this.env.key0 == -1) {
                this.env.recomputeKey();
              }
              keyView.next(this.texTypesEnabled | (this.env.key0 << 4));
              keyView.next(this.env.key1);
              keyView.next(this.env.key2);
            } else {
              // For correctness, must traverse a zero value, theoretically a subsequent integer key could collide with this value otherwise.
              keyView.next(0);
            }
          };
        };
  
        // Class impls:
        CTexUnit.prototype.enabled = function CTexUnit_enabled() {
          return this.texTypesEnabled;
        }
  
        CTexUnit.prototype.genPassLines = function CTexUnit_genPassLines(passOutputVar, passInputVar, texUnitID) {
          if (!this.enabled()) {
            return ["vec4 " + passOutputVar + " = " + passInputVar + ";"];
          }
          var lines = this.env.genPassLines(passOutputVar, passInputVar, texUnitID).join('\n');
  
          var texLoadLines = '';
          var texLoadRegex = /(texture.*?\(.*?\))/g;
          var loadCounter = 0;
          var load;
  
          // As an optimization, merge duplicate identical texture loads to one var.
          while(load = texLoadRegex.exec(lines)) {
            var texLoadExpr = load[1];
            var secondOccurrence = lines.slice(load.index+1).indexOf(texLoadExpr);
            if (secondOccurrence != -1) { // And also has a second occurrence of same load expression..
              // Create new var to store the common load.
              var prefix = TEXENVJIT_NAMESPACE_PREFIX + 'env' + texUnitID + "_";
              var texLoadVar = prefix + 'texload' + loadCounter++;
              var texLoadLine = 'vec4 ' + texLoadVar + ' = ' + texLoadExpr + ';\n';
              texLoadLines += texLoadLine + '\n'; // Store the generated texture load statements in a temp string to not confuse regex search in progress.
              lines = lines.split(texLoadExpr).join(texLoadVar);
              // Reset regex search, since we modified the string.
              texLoadRegex = /(texture.*\(.*\))/g;
            }
          }
          return [texLoadLines + lines];
        }
  
        CTexUnit.prototype.getTexType = function CTexUnit_getTexType() {
          if (this.enabled_texCube) {
            return GL_TEXTURE_CUBE_MAP;
          } else if (this.enabled_tex3D) {
            return GL_TEXTURE_3D;
          } else if (this.enabled_tex2D) {
            return GL_TEXTURE_2D;
          } else if (this.enabled_tex1D) {
            return GL_TEXTURE_1D;
          }
          return 0;
        }
  
        CTexEnv.prototype.genPassLines = function CTexEnv_genPassLines(passOutputVar, passInputVar, texUnitID) {
          switch (this.mode) {
            case GL_REPLACE: {
              /* RGB:
               * Cv = Cs
               * Av = Ap // Note how this is different, and that we'll
               *            need to track the bound texture internalFormat
               *            to get this right.
               *
               * RGBA:
               * Cv = Cs
               * Av = As
               */
              return [
                "vec4 " + passOutputVar + " = " + genTexUnitSampleExpr(texUnitID) + ";",
              ];
            }
            case GL_ADD: {
              /* RGBA:
               * Cv = Cp + Cs
               * Av = ApAs
               */
              var prefix = TEXENVJIT_NAMESPACE_PREFIX + 'env' + texUnitID + "_";
              var texVar = prefix + "tex";
              var colorVar = prefix + "color";
              var alphaVar = prefix + "alpha";
  
              return [
                "vec4 " + texVar + " = " + genTexUnitSampleExpr(texUnitID) + ";",
                "vec3 " + colorVar + " = " + passInputVar + ".rgb + " + texVar + ".rgb;",
                "float " + alphaVar + " = " + passInputVar + ".a * " + texVar + ".a;",
                "vec4 " + passOutputVar + " = vec4(" + colorVar + ", " + alphaVar + ");",
              ];
            }
            case GL_MODULATE: {
              /* RGBA:
               * Cv = CpCs
               * Av = ApAs
               */
              var line = [
                "vec4 " + passOutputVar,
                " = ",
                  passInputVar,
                  " * ",
                  genTexUnitSampleExpr(texUnitID),
                ";",
              ];
              return [line.join("")];
            }
            case GL_DECAL: {
              /* RGBA:
               * Cv = Cp(1 - As) + CsAs
               * Av = Ap
               */
              var prefix = TEXENVJIT_NAMESPACE_PREFIX + 'env' + texUnitID + "_";
              var texVar = prefix + "tex";
              var colorVar = prefix + "color";
              var alphaVar = prefix + "alpha";
  
              return [
                "vec4 " + texVar + " = " + genTexUnitSampleExpr(texUnitID) + ";",
                [
                  "vec3 " + colorVar + " = ",
                    passInputVar + ".rgb * (1.0 - " + texVar + ".a)",
                      " + ",
                    texVar + ".rgb * " + texVar + ".a",
                  ";"
                ].join(""),
                "float " + alphaVar + " = " + passInputVar + ".a;",
                "vec4 " + passOutputVar + " = vec4(" + colorVar + ", " + alphaVar + ");",
              ];
            }
            case GL_BLEND: {
              /* RGBA:
               * Cv = Cp(1 - Cs) + CcCs
               * Av = As
               */
              var prefix = TEXENVJIT_NAMESPACE_PREFIX + 'env' + texUnitID + "_";
              var texVar = prefix + "tex";
              var colorVar = prefix + "color";
              var alphaVar = prefix + "alpha";
  
              return [
                "vec4 " + texVar + " = " + genTexUnitSampleExpr(texUnitID) + ";",
                [
                  "vec3 " + colorVar + " = ",
                    passInputVar + ".rgb * (1.0 - " + texVar + ".rgb)",
                      " + ",
                    PRIM_COLOR_VARYING + ".rgb * " + texVar + ".rgb",
                  ";"
                ].join(""),
                "float " + alphaVar + " = " + texVar + ".a;",
                "vec4 " + passOutputVar + " = vec4(" + colorVar + ", " + alphaVar + ");",
              ];
            }
            case GL_COMBINE: {
              var prefix = TEXENVJIT_NAMESPACE_PREFIX + 'env' + texUnitID + "_";
              var colorVar = prefix + "color";
              var alphaVar = prefix + "alpha";
              var colorLines = this.genCombinerLines(true, colorVar,
                                                     passInputVar, texUnitID,
                                                     this.colorCombiner, this.colorSrc, this.colorOp);
              var alphaLines = this.genCombinerLines(false, alphaVar,
                                                     passInputVar, texUnitID,
                                                     this.alphaCombiner, this.alphaSrc, this.alphaOp);
  
              // Generate scale, but avoid generating an identity op that multiplies by one.
              var scaledColor = (this.colorScale == 1) ? colorVar : (colorVar + " * " + valToFloatLiteral(this.colorScale));
              var scaledAlpha = (this.alphaScale == 1) ? alphaVar : (alphaVar + " * " + valToFloatLiteral(this.alphaScale));
  
              var line = [
                "vec4 " + passOutputVar,
                " = ",
                  "vec4(",
                      scaledColor,
                      ", ",
                      scaledAlpha,
                  ")",
                ";",
              ].join("");
              return [].concat(colorLines, alphaLines, [line]);
            }
          }
  
          return abort_noSupport("Unsupported TexEnv mode: 0x" + this.mode.toString(16));
        }
  
        CTexEnv.prototype.genCombinerLines = function CTexEnv_getCombinerLines(isColor, outputVar,
                                                                               passInputVar, texUnitID,
                                                                               combiner, srcArr, opArr)
        {
          var argsNeeded = null;
          switch (combiner) {
            case GL_REPLACE:
              argsNeeded = 1;
              break;
  
            case GL_MODULATE:
            case GL_ADD:
            case GL_SUBTRACT:
              argsNeeded = 2;
              break;
  
            case GL_INTERPOLATE:
              argsNeeded = 3;
              break;
  
            default:
              return abort_noSupport("Unsupported combiner: 0x" + combiner.toString(16));
          }
  
          var constantExpr = [
            "vec4(",
              valToFloatLiteral(this.envColor[0]),
              ", ",
              valToFloatLiteral(this.envColor[1]),
              ", ",
              valToFloatLiteral(this.envColor[2]),
              ", ",
              valToFloatLiteral(this.envColor[3]),
            ")",
          ].join("");
          var src0Expr = (argsNeeded >= 1) ? genCombinerSourceExpr(texUnitID, constantExpr, passInputVar, srcArr[0], opArr[0])
                                           : null;
          var src1Expr = (argsNeeded >= 2) ? genCombinerSourceExpr(texUnitID, constantExpr, passInputVar, srcArr[1], opArr[1])
                                           : null;
          var src2Expr = (argsNeeded >= 3) ? genCombinerSourceExpr(texUnitID, constantExpr, passInputVar, srcArr[2], opArr[2])
                                           : null;
  
          var outputType = isColor ? "vec3" : "float";
          var lines = null;
          switch (combiner) {
            case GL_REPLACE: {
              var line = [
                outputType + " " + outputVar,
                " = ",
                  src0Expr,
                ";",
              ];
              lines = [line.join("")];
              break;
            }
            case GL_MODULATE: {
              var line = [
                outputType + " " + outputVar + " = ",
                  src0Expr + " * " + src1Expr,
                ";",
              ];
              lines = [line.join("")];
              break;
            }
            case GL_ADD: {
              var line = [
                outputType + " " + outputVar + " = ",
                  src0Expr + " + " + src1Expr,
                ";",
              ];
              lines = [line.join("")];
              break;
            }
            case GL_SUBTRACT: {
              var line = [
                outputType + " " + outputVar + " = ",
                  src0Expr + " - " + src1Expr,
                ";",
              ];
              lines = [line.join("")];
              break;
            }
            case GL_INTERPOLATE: {
              var prefix = TEXENVJIT_NAMESPACE_PREFIX + 'env' + texUnitID + "_";
              var arg2Var = prefix + "colorSrc2";
              var arg2Line = getTypeFromCombineOp(this.colorOp[2]) + " " + arg2Var + " = " + src2Expr + ";";
  
              var line = [
                outputType + " " + outputVar,
                " = ",
                  src0Expr + " * " + arg2Var,
                  " + ",
                  src1Expr + " * (1.0 - " + arg2Var + ")",
                ";",
              ];
              lines = [
                arg2Line,
                line.join(""),
              ];
              break;
            }
  
            default:
              return abort_sanity("Unmatched TexEnv.colorCombiner?");
          }
  
          return lines;
        }
  
        return {
          // Exports:
          init: function(gl, specifiedMaxTextureImageUnits) {
            var maxTexUnits = 0;
            if (specifiedMaxTextureImageUnits) {
              maxTexUnits = specifiedMaxTextureImageUnits;
            } else if (gl) {
              maxTexUnits = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);
            }
            assert(maxTexUnits > 0);
            s_texUnits = [];
            for (var i = 0; i < maxTexUnits; i++) {
              s_texUnits.push(new CTexUnit());
            }
          },
  
          setGLSLVars: function(uTexUnitPrefix, vTexCoordPrefix, vPrimColor, uTexMatrixPrefix) {
            TEX_UNIT_UNIFORM_PREFIX   = uTexUnitPrefix;
            TEX_COORD_VARYING_PREFIX  = vTexCoordPrefix;
            PRIM_COLOR_VARYING        = vPrimColor;
            TEX_MATRIX_UNIFORM_PREFIX = uTexMatrixPrefix;
          },
  
          genAllPassLines: function(resultDest, indentSize) {
            indentSize = indentSize || 0;
  
            s_requiredTexUnitsForPass.length = 0; // Clear the list.
            var lines = [];
            var lastPassVar = PRIM_COLOR_VARYING;
            for (var i = 0; i < s_texUnits.length; i++) {
              if (!s_texUnits[i].enabled()) continue;
  
              s_requiredTexUnitsForPass.push(i);
  
              var prefix = TEXENVJIT_NAMESPACE_PREFIX + 'env' + i + "_";
              var passOutputVar = prefix + "result";
  
              var newLines = s_texUnits[i].genPassLines(passOutputVar, lastPassVar, i);
              lines = lines.concat(newLines, [""]);
  
              lastPassVar = passOutputVar;
            }
            lines.push(resultDest + " = " + lastPassVar + ";");
  
            var indent = "";
            for (var i = 0; i < indentSize; i++) indent += " ";
  
            var output = indent + lines.join("\n" + indent);
  
            return output;
          },
  
          getUsedTexUnitList: function() {
            return s_requiredTexUnitsForPass;
          },
  
          traverseState: function(keyView) {
            for (var i = 0; i < s_texUnits.length; i++) {
              s_texUnits[i].traverseState(keyView);
            }
          },
  
          getTexUnitType: function(texUnitID) {
            assert(texUnitID >= 0 &&
                   texUnitID < s_texUnits.length);
            return s_texUnits[texUnitID].getTexType();
          },
  
          // Hooks:
          hook_activeTexture: function(texture) {
            s_activeTexture = texture - GL_TEXTURE0;
          },
  
          hook_enable: function(cap) {
            var cur = getCurTexUnit();
            switch (cap) {
              case GL_TEXTURE_1D:
                if (!cur.enabled_tex1D) {
                  GLImmediate.currentRenderer = null; // Renderer state changed, and must be recreated or looked up again.
                  cur.enabled_tex1D = true;
                  cur.texTypesEnabled |= 1;
                }
                break;
              case GL_TEXTURE_2D:
                if (!cur.enabled_tex2D) {
                  GLImmediate.currentRenderer = null;
                  cur.enabled_tex2D = true;
                  cur.texTypesEnabled |= 2;
                }
                break;
              case GL_TEXTURE_3D:
                if (!cur.enabled_tex3D) {
                  GLImmediate.currentRenderer = null;
                  cur.enabled_tex3D = true;
                  cur.texTypesEnabled |= 4;
                }
                break;
              case GL_TEXTURE_CUBE_MAP:
                if (!cur.enabled_texCube) {
                  GLImmediate.currentRenderer = null;
                  cur.enabled_texCube = true;
                  cur.texTypesEnabled |= 8;
                }
                break;
            }
          },
  
          hook_disable: function(cap) {
            var cur = getCurTexUnit();
            switch (cap) {
              case GL_TEXTURE_1D:
                if (cur.enabled_tex1D) {
                  GLImmediate.currentRenderer = null; // Renderer state changed, and must be recreated or looked up again.
                  cur.enabled_tex1D = false;
                  cur.texTypesEnabled &= ~1;
                }
                break;
              case GL_TEXTURE_2D:
                if (cur.enabled_tex2D) {
                  GLImmediate.currentRenderer = null;
                  cur.enabled_tex2D = false;
                  cur.texTypesEnabled &= ~2;
                }
                break;
              case GL_TEXTURE_3D:
                if (cur.enabled_tex3D) {
                  GLImmediate.currentRenderer = null;
                  cur.enabled_tex3D = false;
                  cur.texTypesEnabled &= ~4;
                }
                break;
              case GL_TEXTURE_CUBE_MAP:
                if (cur.enabled_texCube) {
                  GLImmediate.currentRenderer = null;
                  cur.enabled_texCube = false;
                  cur.texTypesEnabled &= ~8;
                }
                break;
            }
          },
  
          hook_texEnvf: function(target, pname, param) {
            if (target != GL_TEXTURE_ENV)
              return;
  
            var env = getCurTexUnit().env;
            switch (pname) {
              case GL_RGB_SCALE:
                if (env.colorScale != param) {
                  env.invalidateKey(); // We changed FFP emulation renderer state.
                  env.colorScale = param;
                }
                break;
              case GL_ALPHA_SCALE:
                if (env.alphaScale != param) {
                  env.invalidateKey();
                  env.alphaScale = param;
                }
                break;
  
              default:
                Module.printErr('WARNING: Unhandled `pname` in call to `glTexEnvf`.');
            }
          },
  
          hook_texEnvi: function(target, pname, param) {
            if (target != GL_TEXTURE_ENV)
              return;
  
            var env = getCurTexUnit().env;
            switch (pname) {
              case GL_TEXTURE_ENV_MODE:
                if (env.mode != param) {
                  env.invalidateKey(); // We changed FFP emulation renderer state.
                  env.mode = param;
                }
                break;
  
              case GL_COMBINE_RGB:
                if (env.colorCombiner != param) {
                  env.invalidateKey();
                  env.colorCombiner = param;
                }
                break;
              case GL_COMBINE_ALPHA:
                if (env.alphaCombiner != param) {
                  env.invalidateKey();
                  env.alphaCombiner = param;
                }
                break;
  
              case GL_SRC0_RGB:
                if (env.colorSrc[0] != param) {
                  env.invalidateKey();
                  env.colorSrc[0] = param;
                }
                break;
              case GL_SRC1_RGB:
                if (env.colorSrc[1] != param) {
                  env.invalidateKey();
                  env.colorSrc[1] = param;
                }
                break;
              case GL_SRC2_RGB:
                if (env.colorSrc[2] != param) {
                  env.invalidateKey();
                  env.colorSrc[2] = param;
                }
                break;
  
              case GL_SRC0_ALPHA:
                if (env.alphaSrc[0] != param) {
                  env.invalidateKey();
                  env.alphaSrc[0] = param;
                }
                break;
              case GL_SRC1_ALPHA:
                if (env.alphaSrc[1] != param) {
                  env.invalidateKey();
                  env.alphaSrc[1] = param;
                }
                break;
              case GL_SRC2_ALPHA:
                if (env.alphaSrc[2] != param) {
                  env.invalidateKey();
                  env.alphaSrc[2] = param;
                }
                break;
  
              case GL_OPERAND0_RGB:
                if (env.colorOp[0] != param) {
                  env.invalidateKey();
                  env.colorOp[0] = param;
                }
                break;
              case GL_OPERAND1_RGB:
                if (env.colorOp[1] != param) {
                  env.invalidateKey();
                  env.colorOp[1] = param;
                }
                break;
              case GL_OPERAND2_RGB:
                if (env.colorOp[2] != param) {
                  env.invalidateKey();
                  env.colorOp[2] = param;
                }
                break;
  
              case GL_OPERAND0_ALPHA:
                if (env.alphaOp[0] != param) {
                  env.invalidateKey();
                  env.alphaOp[0] = param;
                }
                break;
              case GL_OPERAND1_ALPHA:
                if (env.alphaOp[1] != param) {
                  env.invalidateKey();
                  env.alphaOp[1] = param;
                }
                break;
              case GL_OPERAND2_ALPHA:
                if (env.alphaOp[2] != param) {
                  env.invalidateKey();
                  env.alphaOp[2] = param;
                }
                break;
  
              case GL_RGB_SCALE:
                if (env.colorScale != param) {
                  env.invalidateKey();
                  env.colorScale = param;
                }
                break;
              case GL_ALPHA_SCALE:
                if (env.alphaScale != param) {
                  env.invalidateKey();
                  env.alphaScale = param;
                }
                break;
  
              default:
                Module.printErr('WARNING: Unhandled `pname` in call to `glTexEnvi`.');
            }
          },
  
          hook_texEnvfv: function(target, pname, params) {
            if (target != GL_TEXTURE_ENV) return;
  
            var env = getCurTexUnit().env;
            switch (pname) {
              case GL_TEXTURE_ENV_COLOR: {
                for (var i = 0; i < 4; i++) {
                  var param = HEAPF32[(((params)+(i*4))>>2)];
                  if (env.envColor[i] != param) {
                    env.invalidateKey(); // We changed FFP emulation renderer state.
                    env.envColor[i] = param;
                  }
                }
                break
              }
              default:
                Module.printErr('WARNING: Unhandled `pname` in call to `glTexEnvfv`.');
            }
          },
  
          hook_getTexEnviv: function(target, pname, param) {
            if (target != GL_TEXTURE_ENV)
              return;
  
            var env = getCurTexUnit().env;
            switch (pname) {
              case GL_TEXTURE_ENV_MODE:
                HEAP32[((param)>>2)]=env.mode;
                return;
  
              case GL_TEXTURE_ENV_COLOR:
                HEAP32[((param)>>2)]=Math.max(Math.min(env.envColor[0]*255, 255, -255));
                HEAP32[(((param)+(1))>>2)]=Math.max(Math.min(env.envColor[1]*255, 255, -255));
                HEAP32[(((param)+(2))>>2)]=Math.max(Math.min(env.envColor[2]*255, 255, -255));
                HEAP32[(((param)+(3))>>2)]=Math.max(Math.min(env.envColor[3]*255, 255, -255));
                return;
  
              case GL_COMBINE_RGB:
                HEAP32[((param)>>2)]=env.colorCombiner;
                return;
  
              case GL_COMBINE_ALPHA:
                HEAP32[((param)>>2)]=env.alphaCombiner;
                return;
  
              case GL_SRC0_RGB:
                HEAP32[((param)>>2)]=env.colorSrc[0];
                return;
  
              case GL_SRC1_RGB:
                HEAP32[((param)>>2)]=env.colorSrc[1];
                return;
  
              case GL_SRC2_RGB:
                HEAP32[((param)>>2)]=env.colorSrc[2];
                return;
  
              case GL_SRC0_ALPHA:
                HEAP32[((param)>>2)]=env.alphaSrc[0];
                return;
  
              case GL_SRC1_ALPHA:
                HEAP32[((param)>>2)]=env.alphaSrc[1];
                return;
  
              case GL_SRC2_ALPHA:
                HEAP32[((param)>>2)]=env.alphaSrc[2];
                return;
  
              case GL_OPERAND0_RGB:
                HEAP32[((param)>>2)]=env.colorOp[0];
                return;
  
              case GL_OPERAND1_RGB:
                HEAP32[((param)>>2)]=env.colorOp[1];
                return;
  
              case GL_OPERAND2_RGB:
                HEAP32[((param)>>2)]=env.colorOp[2];
                return;
  
              case GL_OPERAND0_ALPHA:
                HEAP32[((param)>>2)]=env.alphaOp[0];
                return;
  
              case GL_OPERAND1_ALPHA:
                HEAP32[((param)>>2)]=env.alphaOp[1];
                return;
  
              case GL_OPERAND2_ALPHA:
                HEAP32[((param)>>2)]=env.alphaOp[2];
                return;
  
              case GL_RGB_SCALE:
                HEAP32[((param)>>2)]=env.colorScale;
                return;
  
              case GL_ALPHA_SCALE:
                HEAP32[((param)>>2)]=env.alphaScale;
                return;
  
              default:
                Module.printErr('WARNING: Unhandled `pname` in call to `glGetTexEnvi`.');
            }
          },
  
          hook_getTexEnvfv: function(target, pname, param) {
            if (target != GL_TEXTURE_ENV)
              return;
  
            var env = getCurTexUnit().env;
            switch (pname) {
              case GL_TEXTURE_ENV_COLOR:
                HEAPF32[((param)>>2)]=env.envColor[0];
                HEAPF32[(((param)+(4))>>2)]=env.envColor[1];
                HEAPF32[(((param)+(8))>>2)]=env.envColor[2];
                HEAPF32[(((param)+(12))>>2)]=env.envColor[3];
                return;
            }
          }
        };
      },vertexData:null,vertexDataU8:null,tempData:null,indexData:null,vertexCounter:0,mode:-1,rendererCache:null,rendererComponents:[],rendererComponentPointer:0,lastRenderer:null,lastArrayBuffer:null,lastProgram:null,lastStride:-1,matrix:[],matrixStack:[],currentMatrix:0,tempMatrix:null,matricesModified:false,useTextureMatrix:false,VERTEX:0,NORMAL:1,COLOR:2,TEXTURE0:3,NUM_ATTRIBUTES:-1,MAX_TEXTURES:-1,totalEnabledClientAttributes:0,enabledClientAttributes:[0,0],clientAttributes:[],liveClientAttributes:[],currentRenderer:null,modifiedClientAttributes:false,clientActiveTexture:0,clientColor:null,usedTexUnitList:[],fixedFunctionProgram:null,setClientAttribute:function setClientAttribute(name, size, type, stride, pointer) {
        var attrib = GLImmediate.clientAttributes[name];
        if (!attrib) {
          for (var i = 0; i <= name; i++) { // keep flat
            if (!GLImmediate.clientAttributes[i]) {
              GLImmediate.clientAttributes[i] = {
                name: name,
                size: size,
                type: type,
                stride: stride,
                pointer: pointer,
                offset: 0
              };
            }
          }
        } else {
          attrib.name = name;
          attrib.size = size;
          attrib.type = type;
          attrib.stride = stride;
          attrib.pointer = pointer;
          attrib.offset = 0;
        }
        GLImmediate.modifiedClientAttributes = true;
      },addRendererComponent:function addRendererComponent(name, size, type) {
        if (!GLImmediate.rendererComponents[name]) {
          GLImmediate.rendererComponents[name] = 1;
          if (GLImmediate.enabledClientAttributes[name]) {
            console.log("Warning: glTexCoord used after EnableClientState for TEXTURE_COORD_ARRAY for TEXTURE0. Disabling TEXTURE_COORD_ARRAY...");
          }
          GLImmediate.enabledClientAttributes[name] = true;
          GLImmediate.setClientAttribute(name, size, type, 0, GLImmediate.rendererComponentPointer);
          GLImmediate.rendererComponentPointer += size * GL.byteSizeByType[type - GL.byteSizeByTypeRoot];
        } else {
          GLImmediate.rendererComponents[name]++;
        }
      },disableBeginEndClientAttributes:function disableBeginEndClientAttributes() {
        for (var i = 0; i < GLImmediate.NUM_ATTRIBUTES; i++) {
          if (GLImmediate.rendererComponents[i]) GLImmediate.enabledClientAttributes[i] = false;
        }
      },getRenderer:function getRenderer() {
        // If no FFP state has changed that would have forced to re-evaluate which FFP emulation shader to use,
        // we have the currently used renderer in cache, and can immediately return that.
        if (GLImmediate.currentRenderer) {
          return GLImmediate.currentRenderer;
        }
        // return a renderer object given the liveClientAttributes
        // we maintain a cache of renderers, optimized to not generate garbage
        var attributes = GLImmediate.liveClientAttributes;
        var cacheMap = GLImmediate.rendererCache;
        var keyView = cacheMap.getStaticKeyView().reset();
  
        // By attrib state:
        var enabledAttributesKey = 0;
        for (var i = 0; i < attributes.length; i++) {
          enabledAttributesKey |= 1 << attributes[i].name;
        }
  
        // By fog state:
        var fogParam = 0;
        if (GLEmulation.fogEnabled) {
          switch (GLEmulation.fogMode) {
            case 0x0801: // GL_EXP2
              fogParam = 1;
              break;
            case 0x2601: // GL_LINEAR
              fogParam = 2;
              break;
            default: // default to GL_EXP
              fogParam = 3;
              break;
          }
        }
        keyView.next((enabledAttributesKey << 2) | fogParam);
  
        // By cur program:
        keyView.next(GL.currProgram);
        if (!GL.currProgram) {
          GLImmediate.TexEnvJIT.traverseState(keyView);
        }
  
        // If we don't already have it, create it.
        var renderer = keyView.get();
        if (!renderer) {
          renderer = GLImmediate.createRenderer();
          GLImmediate.currentRenderer = renderer;
          keyView.set(renderer);
          return renderer;
        }
        GLImmediate.currentRenderer = renderer; // Cache the currently used renderer, so later lookups without state changes can get this fast.
        return renderer;
      },createRenderer:function createRenderer(renderer) {
        var useCurrProgram = !!GL.currProgram;
        var hasTextures = false;
        for (var i = 0; i < GLImmediate.MAX_TEXTURES; i++) {
          var texAttribName = GLImmediate.TEXTURE0 + i;
          if (!GLImmediate.enabledClientAttributes[texAttribName])
            continue;
  
          if (!useCurrProgram) {
            if (GLImmediate.TexEnvJIT.getTexUnitType(i) == 0) {
               Runtime.warnOnce("GL_TEXTURE" + i + " coords are supplied, but that texture unit is disabled in the fixed-function pipeline.");
            }
          }
  
          hasTextures = true;
        }
  
        var ret = {
          init: function init() {
            // For fixed-function shader generation.
            var uTexUnitPrefix = 'u_texUnit';
            var aTexCoordPrefix = 'a_texCoord';
            var vTexCoordPrefix = 'v_texCoord';
            var vPrimColor = 'v_color';
            var uTexMatrixPrefix = GLImmediate.useTextureMatrix ? 'u_textureMatrix' : null;
  
            if (useCurrProgram) {
              if (GL.shaderInfos[GL.programShaders[GL.currProgram][0]].type == GLctx.VERTEX_SHADER) {
                this.vertexShader = GL.shaders[GL.programShaders[GL.currProgram][0]];
                this.fragmentShader = GL.shaders[GL.programShaders[GL.currProgram][1]];
              } else {
                this.vertexShader = GL.shaders[GL.programShaders[GL.currProgram][1]];
                this.fragmentShader = GL.shaders[GL.programShaders[GL.currProgram][0]];
              }
              this.program = GL.programs[GL.currProgram];
              this.usedTexUnitList = [];
            } else {
              // IMPORTANT NOTE: If you parameterize the shader source based on any runtime values
              // in order to create the least expensive shader possible based on the features being
              // used, you should also update the code in the beginning of getRenderer to make sure
              // that you cache the renderer based on the said parameters.
              if (GLEmulation.fogEnabled) {
                switch (GLEmulation.fogMode) {
                  case 0x0801: // GL_EXP2
                    // fog = exp(-(gl_Fog.density * gl_FogFragCoord)^2)
                    var fogFormula = '  float fog = exp(-u_fogDensity * u_fogDensity * ecDistance * ecDistance); \n';
                    break;
                  case 0x2601: // GL_LINEAR
                    // fog = (gl_Fog.end - gl_FogFragCoord) * gl_fog.scale
                    var fogFormula = '  float fog = (u_fogEnd - ecDistance) * u_fogScale; \n';
                    break;
                  default: // default to GL_EXP
                    // fog = exp(-gl_Fog.density * gl_FogFragCoord)
                    var fogFormula = '  float fog = exp(-u_fogDensity * ecDistance); \n';
                    break;
                }
              }
  
              GLImmediate.TexEnvJIT.setGLSLVars(uTexUnitPrefix, vTexCoordPrefix, vPrimColor, uTexMatrixPrefix);
              var fsTexEnvPass = GLImmediate.TexEnvJIT.genAllPassLines('gl_FragColor', 2);
  
              var texUnitAttribList = '';
              var texUnitVaryingList = '';
              var texUnitUniformList = '';
              var vsTexCoordInits = '';
              this.usedTexUnitList = GLImmediate.TexEnvJIT.getUsedTexUnitList();
              for (var i = 0; i < this.usedTexUnitList.length; i++) {
                var texUnit = this.usedTexUnitList[i];
                texUnitAttribList += 'attribute vec4 ' + aTexCoordPrefix + texUnit + ';\n';
                texUnitVaryingList += 'varying vec4 ' + vTexCoordPrefix + texUnit + ';\n';
                texUnitUniformList += 'uniform sampler2D ' + uTexUnitPrefix + texUnit + ';\n';
                vsTexCoordInits += '  ' + vTexCoordPrefix + texUnit + ' = ' + aTexCoordPrefix + texUnit + ';\n';
  
                if (GLImmediate.useTextureMatrix) {
                  texUnitUniformList += 'uniform mat4 ' + uTexMatrixPrefix + texUnit + ';\n';
                }
              }
  
              var vsFogVaryingInit = null;
              if (GLEmulation.fogEnabled) {
                vsFogVaryingInit = '  v_fogFragCoord = abs(ecPosition.z);\n';
              }
  
              var vsSource = [
                'attribute vec4 a_position;',
                'attribute vec4 a_color;',
                'varying vec4 v_color;',
                texUnitAttribList,
                texUnitVaryingList,
                (GLEmulation.fogEnabled ? 'varying float v_fogFragCoord;' : null),
                'uniform mat4 u_modelView;',
                'uniform mat4 u_projection;',
                'void main()',
                '{',
                '  vec4 ecPosition = u_modelView * a_position;', // eye-coordinate position
                '  gl_Position = u_projection * ecPosition;',
                '  v_color = a_color;',
                vsTexCoordInits,
                vsFogVaryingInit,
                '}',
                ''
              ].join('\n').replace(/\n\n+/g, '\n');
  
              this.vertexShader = GLctx.createShader(GLctx.VERTEX_SHADER);
              GLctx.shaderSource(this.vertexShader, vsSource);
              GLctx.compileShader(this.vertexShader);
  
              var fogHeaderIfNeeded = null;
              if (GLEmulation.fogEnabled) {
                fogHeaderIfNeeded = [
                  '',
                  'varying float v_fogFragCoord; ',
                  'uniform vec4 u_fogColor;      ',
                  'uniform float u_fogEnd;       ',
                  'uniform float u_fogScale;     ',
                  'uniform float u_fogDensity;   ',
                  'float ffog(in float ecDistance) { ',
                  fogFormula,
                  '  fog = clamp(fog, 0.0, 1.0); ',
                  '  return fog;                 ',
                  '}',
                  '',
                ].join("\n");
              }
  
              var fogPass = null;
              if (GLEmulation.fogEnabled) {
                fogPass = 'gl_FragColor = vec4(mix(u_fogColor.rgb, gl_FragColor.rgb, ffog(v_fogFragCoord)), gl_FragColor.a);\n';
              }
  
              var fsSource = [
                'precision mediump float;',
                texUnitVaryingList,
                texUnitUniformList,
                'varying vec4 v_color;',
                fogHeaderIfNeeded,
                'void main()',
                '{',
                fsTexEnvPass,
                fogPass,
                '}',
                ''
              ].join("\n").replace(/\n\n+/g, '\n');
  
              this.fragmentShader = GLctx.createShader(GLctx.FRAGMENT_SHADER);
              GLctx.shaderSource(this.fragmentShader, fsSource);
              GLctx.compileShader(this.fragmentShader);
  
              this.program = GLctx.createProgram();
              GLctx.attachShader(this.program, this.vertexShader);
              GLctx.attachShader(this.program, this.fragmentShader);
  
              // As optimization, bind all attributes to prespecified locations, so that the FFP emulation
              // code can submit attributes to any generated FFP shader without having to examine each shader in turn.
              // These prespecified locations are only assumed if GL_FFP_ONLY is specified, since user could also create their
              // own shaders that didn't have attributes in the same locations.
              GLctx.bindAttribLocation(this.program, GLImmediate.VERTEX, 'a_position');
              GLctx.bindAttribLocation(this.program, GLImmediate.COLOR, 'a_color');
              GLctx.bindAttribLocation(this.program, GLImmediate.NORMAL, 'a_normal');
              var maxVertexAttribs = GLctx.getParameter(GLctx.MAX_VERTEX_ATTRIBS);
              for (var i = 0; i < GLImmediate.MAX_TEXTURES && GLImmediate.TEXTURE0 + i < maxVertexAttribs; i++) {
                GLctx.bindAttribLocation(this.program, GLImmediate.TEXTURE0 + i, 'a_texCoord'+i);
                GLctx.bindAttribLocation(this.program, GLImmediate.TEXTURE0 + i, aTexCoordPrefix+i);
              }
              GLctx.linkProgram(this.program);
            }
  
            // Stores an array that remembers which matrix uniforms are up-to-date in this FFP renderer, so they don't need to be resubmitted
            // each time we render with this program.
            this.textureMatrixVersion = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ];
  
            this.positionLocation = GLctx.getAttribLocation(this.program, 'a_position');
  
            this.texCoordLocations = [];
  
            for (var i = 0; i < GLImmediate.MAX_TEXTURES; i++) {
              if (!GLImmediate.enabledClientAttributes[GLImmediate.TEXTURE0 + i]) {
                this.texCoordLocations[i] = -1;
                continue;
              }
  
              if (useCurrProgram) {
                this.texCoordLocations[i] = GLctx.getAttribLocation(this.program, 'a_texCoord' + i);
              } else {
                this.texCoordLocations[i] = GLctx.getAttribLocation(this.program, aTexCoordPrefix + i);
              }
            }
            this.colorLocation = GLctx.getAttribLocation(this.program, 'a_color');
            if (!useCurrProgram) {
              // Temporarily switch to the program so we can set our sampler uniforms early.
              var prevBoundProg = GLctx.getParameter(GLctx.CURRENT_PROGRAM);
              GLctx.useProgram(this.program);
              {
                for (var i = 0; i < this.usedTexUnitList.length; i++) {
                  var texUnitID = this.usedTexUnitList[i];
                  var texSamplerLoc = GLctx.getUniformLocation(this.program, uTexUnitPrefix + texUnitID);
                  GLctx.uniform1i(texSamplerLoc, texUnitID);
                }
              }
              // The default color attribute value is not the same as the default for all other attribute streams (0,0,0,1) but (1,1,1,1),
              // so explicitly set it right at start.
              GLctx.vertexAttrib4fv(this.colorLocation, [1,1,1,1]);
              GLctx.useProgram(prevBoundProg);
            }
  
            this.textureMatrixLocations = [];
            for (var i = 0; i < GLImmediate.MAX_TEXTURES; i++) {
              this.textureMatrixLocations[i] = GLctx.getUniformLocation(this.program, 'u_textureMatrix' + i);
            }
            this.normalLocation = GLctx.getAttribLocation(this.program, 'a_normal');
  
            this.modelViewLocation = GLctx.getUniformLocation(this.program, 'u_modelView');
            this.projectionLocation = GLctx.getUniformLocation(this.program, 'u_projection');
  
            this.hasTextures = hasTextures;
            this.hasNormal = GLImmediate.enabledClientAttributes[GLImmediate.NORMAL] &&
                             GLImmediate.clientAttributes[GLImmediate.NORMAL].size > 0 &&
                             this.normalLocation >= 0;
            this.hasColor = (this.colorLocation === 0) || this.colorLocation > 0;
  
            this.floatType = GLctx.FLOAT; // minor optimization
  
            this.fogColorLocation = GLctx.getUniformLocation(this.program, 'u_fogColor');
            this.fogEndLocation = GLctx.getUniformLocation(this.program, 'u_fogEnd');
            this.fogScaleLocation = GLctx.getUniformLocation(this.program, 'u_fogScale');
            this.fogDensityLocation = GLctx.getUniformLocation(this.program, 'u_fogDensity');
            this.hasFog = !!(this.fogColorLocation || this.fogEndLocation ||
                             this.fogScaleLocation || this.fogDensityLocation);
          },
  
          prepare: function prepare() {
            // Calculate the array buffer
            var arrayBuffer;
            if (!GL.currArrayBuffer) {
              var start = GLImmediate.firstVertex*GLImmediate.stride;
              var end = GLImmediate.lastVertex*GLImmediate.stride;
              assert(end <= GL.MAX_TEMP_BUFFER_SIZE, 'too much vertex data');
              arrayBuffer = GL.getTempVertexBuffer(end);
              // TODO: consider using the last buffer we bound, if it was larger. downside is larger buffer, but we might avoid rebinding and preparing
            } else {
              arrayBuffer = GL.currArrayBuffer;
            }
  
            // If the array buffer is unchanged and the renderer as well, then we can avoid all the work here
            // XXX We use some heuristics here, and this may not work in all cases. Try disabling GL_UNSAFE_OPTS if you
            // have odd glitches
            var lastRenderer = GLImmediate.lastRenderer;
            var canSkip = this == lastRenderer &&
                          arrayBuffer == GLImmediate.lastArrayBuffer &&
                          (GL.currProgram || this.program) == GLImmediate.lastProgram &&
                          GLImmediate.stride == GLImmediate.lastStride &&
                          !GLImmediate.matricesModified;
            if (!canSkip && lastRenderer) lastRenderer.cleanup();
            if (!GL.currArrayBuffer) {
              // Bind the array buffer and upload data after cleaning up the previous renderer
  
              if (arrayBuffer != GLImmediate.lastArrayBuffer) {
                GLctx.bindBuffer(GLctx.ARRAY_BUFFER, arrayBuffer);
                GLImmediate.lastArrayBuffer = arrayBuffer;
              }
  
              GLctx.bufferSubData(GLctx.ARRAY_BUFFER, start, GLImmediate.vertexData.subarray(start >> 2, end >> 2));
            }
            if (canSkip) return;
            GLImmediate.lastRenderer = this;
            GLImmediate.lastProgram = GL.currProgram || this.program;
            GLImmediate.lastStride == GLImmediate.stride;
            GLImmediate.matricesModified = false;
  
            if (!GL.currProgram) {
              if (GLImmediate.fixedFunctionProgram != this.program) {
                GLctx.useProgram(this.program);
                GLImmediate.fixedFunctionProgram = this.program;
              }
            }
  
            if (this.modelViewLocation && this.modelViewMatrixVersion != GLImmediate.matrixVersion[0/*m*/]) {
              this.modelViewMatrixVersion = GLImmediate.matrixVersion[0/*m*/];
              GLctx.uniformMatrix4fv(this.modelViewLocation, false, GLImmediate.matrix[0/*m*/]);
            }
            if (this.projectionLocation && this.projectionMatrixVersion != GLImmediate.matrixVersion[1/*p*/]) {
              this.projectionMatrixVersion = GLImmediate.matrixVersion[1/*p*/];
              GLctx.uniformMatrix4fv(this.projectionLocation, false, GLImmediate.matrix[1/*p*/]);
            }
  
            var clientAttributes = GLImmediate.clientAttributes;
            var posAttr = clientAttributes[GLImmediate.VERTEX];
  
  
            GLctx.vertexAttribPointer(this.positionLocation, posAttr.size, posAttr.type, false, GLImmediate.stride, posAttr.offset);
            GLctx.enableVertexAttribArray(this.positionLocation);
            if (this.hasNormal) {
              var normalAttr = clientAttributes[GLImmediate.NORMAL];
              GLctx.vertexAttribPointer(this.normalLocation, normalAttr.size, normalAttr.type, true, GLImmediate.stride, normalAttr.offset);
              GLctx.enableVertexAttribArray(this.normalLocation);
            }
            if (this.hasTextures) {
              for (var i = 0; i < GLImmediate.MAX_TEXTURES; i++) {
                var attribLoc = this.texCoordLocations[i];
                if (attribLoc === undefined || attribLoc < 0) continue;
                var texAttr = clientAttributes[GLImmediate.TEXTURE0+i];
  
                if (texAttr.size) {
                  GLctx.vertexAttribPointer(attribLoc, texAttr.size, texAttr.type, false, GLImmediate.stride, texAttr.offset);
                  GLctx.enableVertexAttribArray(attribLoc);
                } else {
                  // These two might be dangerous, but let's try them.
                  GLctx.vertexAttrib4f(attribLoc, 0, 0, 0, 1);
                  GLctx.disableVertexAttribArray(attribLoc);
                }
                var t = 2/*t*/+i;
                if (this.textureMatrixLocations[i] && this.textureMatrixVersion[t] != GLImmediate.matrixVersion[t]) { // XXX might we need this even without the condition we are currently in?
                  this.textureMatrixVersion[t] = GLImmediate.matrixVersion[t];
                  GLctx.uniformMatrix4fv(this.textureMatrixLocations[i], false, GLImmediate.matrix[t]);
                }
              }
            }
            if (GLImmediate.enabledClientAttributes[GLImmediate.COLOR]) {
              var colorAttr = clientAttributes[GLImmediate.COLOR];
              GLctx.vertexAttribPointer(this.colorLocation, colorAttr.size, colorAttr.type, true, GLImmediate.stride, colorAttr.offset);
              GLctx.enableVertexAttribArray(this.colorLocation);
            }
            else if (this.hasColor) {
              GLctx.disableVertexAttribArray(this.colorLocation);
              GLctx.vertexAttrib4fv(this.colorLocation, GLImmediate.clientColor);
            }
            if (this.hasFog) {
              if (this.fogColorLocation) GLctx.uniform4fv(this.fogColorLocation, GLEmulation.fogColor);
              if (this.fogEndLocation) GLctx.uniform1f(this.fogEndLocation, GLEmulation.fogEnd);
              if (this.fogScaleLocation) GLctx.uniform1f(this.fogScaleLocation, 1/(GLEmulation.fogEnd - GLEmulation.fogStart));
              if (this.fogDensityLocation) GLctx.uniform1f(this.fogDensityLocation, GLEmulation.fogDensity);
            }
          },
  
          cleanup: function cleanup() {
            GLctx.disableVertexAttribArray(this.positionLocation);
            if (this.hasTextures) {
              for (var i = 0; i < GLImmediate.MAX_TEXTURES; i++) {
                if (GLImmediate.enabledClientAttributes[GLImmediate.TEXTURE0+i] && this.texCoordLocations[i] >= 0) {
                  GLctx.disableVertexAttribArray(this.texCoordLocations[i]);
                }
              }
            }
            if (this.hasColor) {
              GLctx.disableVertexAttribArray(this.colorLocation);
            }
            if (this.hasNormal) {
              GLctx.disableVertexAttribArray(this.normalLocation);
            }
            if (!GL.currProgram) {
              GLctx.useProgram(null);
              GLImmediate.fixedFunctionProgram = 0;
            }
            if (!GL.currArrayBuffer) {
              GLctx.bindBuffer(GLctx.ARRAY_BUFFER, null);
              GLImmediate.lastArrayBuffer = null;
            }
  
            GLImmediate.lastRenderer = null;
            GLImmediate.lastProgram = null;
            GLImmediate.matricesModified = true;
          }
        };
        ret.init();
        return ret;
      },setupFuncs:function () {
        // Replace some functions with immediate-mode aware versions. If there are no client
        // attributes enabled, and we use webgl-friendly modes (no GL_QUADS), then no need
        // for emulation
        _glDrawArrays = _emscripten_glDrawArrays = function _glDrawArrays(mode, first, count) {
          if (GLImmediate.totalEnabledClientAttributes == 0 && mode <= 6) {
            GLctx.drawArrays(mode, first, count);
            return;
          }
          GLImmediate.prepareClientAttributes(count, false);
          GLImmediate.mode = mode;
          if (!GL.currArrayBuffer) {
            GLImmediate.vertexData = HEAPF32.subarray((GLImmediate.vertexPointer)>>2,(GLImmediate.vertexPointer + (first+count)*GLImmediate.stride)>>2); // XXX assuming float
            GLImmediate.firstVertex = first;
            GLImmediate.lastVertex = first + count;
          }
          GLImmediate.flush(null, first);
          GLImmediate.mode = -1;
        };
  
        _glDrawElements = _emscripten_glDrawElements = function _glDrawElements(mode, count, type, indices, start, end) { // start, end are given if we come from glDrawRangeElements
          if (GLImmediate.totalEnabledClientAttributes == 0 && mode <= 6 && GL.currElementArrayBuffer) {
            GLctx.drawElements(mode, count, type, indices);
            return;
          }
          if (!GL.currElementArrayBuffer) {
            assert(type == GLctx.UNSIGNED_SHORT); // We can only emulate buffers of this kind, for now
          }
          console.log("DrawElements doesn't actually prepareClientAttributes properly.");
          GLImmediate.prepareClientAttributes(count, false);
          GLImmediate.mode = mode;
          if (!GL.currArrayBuffer) {
            GLImmediate.firstVertex = end ? start : TOTAL_MEMORY; // if we don't know the start, set an invalid value and we will calculate it later from the indices
            GLImmediate.lastVertex = end ? end+1 : 0;
            GLImmediate.vertexData = HEAPF32.subarray((GLImmediate.vertexPointer)>>2,((end ? GLImmediate.vertexPointer + (end+1)*GLImmediate.stride : TOTAL_MEMORY))>>2); // XXX assuming float
          }
          GLImmediate.flush(count, 0, indices);
          GLImmediate.mode = -1;
        };
  
        // TexEnv stuff needs to be prepared early, so do it here.
        // init() is too late for -O2, since it freezes the GL functions
        // by that point.
        GLImmediate.MapTreeLib = GLImmediate.spawnMapTreeLib();
        GLImmediate.spawnMapTreeLib = null;
  
        GLImmediate.TexEnvJIT = GLImmediate.spawnTexEnvJIT();
        GLImmediate.spawnTexEnvJIT = null;
  
        GLImmediate.setupHooks();
      },setupHooks:function () {
        if (!GLEmulation.hasRunInit) {
          GLEmulation.init();
        }
  
        var glActiveTexture = _glActiveTexture;
        _glActiveTexture = _emscripten_glActiveTexture = function _glActiveTexture(texture) {
          GLImmediate.TexEnvJIT.hook_activeTexture(texture);
          glActiveTexture(texture);
        };
  
        var glEnable = _glEnable;
        _glEnable = _emscripten_glEnable = function _glEnable(cap) {
          GLImmediate.TexEnvJIT.hook_enable(cap);
          glEnable(cap);
        };
        var glDisable = _glDisable;
        _glDisable = _emscripten_glDisable = function _glDisable(cap) {
          GLImmediate.TexEnvJIT.hook_disable(cap);
          glDisable(cap);
        };
  
        var glTexEnvf = (typeof(_glTexEnvf) != 'undefined') ? _glTexEnvf : function(){};
        _glTexEnvf = _emscripten_glTexEnvf = function _glTexEnvf(target, pname, param) {
          GLImmediate.TexEnvJIT.hook_texEnvf(target, pname, param);
          // Don't call old func, since we are the implementor.
          //glTexEnvf(target, pname, param);
        };
        var glTexEnvi = (typeof(_glTexEnvi) != 'undefined') ? _glTexEnvi : function(){};
        _glTexEnvi = _emscripten_glTexEnvi = function _glTexEnvi(target, pname, param) {
          GLImmediate.TexEnvJIT.hook_texEnvi(target, pname, param);
          // Don't call old func, since we are the implementor.
          //glTexEnvi(target, pname, param);
        };
        var glTexEnvfv = (typeof(_glTexEnvfv) != 'undefined') ? _glTexEnvfv : function(){};
        _glTexEnvfv = _emscripten_glTexEnvfv = function _glTexEnvfv(target, pname, param) {
          GLImmediate.TexEnvJIT.hook_texEnvfv(target, pname, param);
          // Don't call old func, since we are the implementor.
          //glTexEnvfv(target, pname, param);
        };
  
        _glGetTexEnviv = function _glGetTexEnviv(target, pname, param) {
          GLImmediate.TexEnvJIT.hook_getTexEnviv(target, pname, param);
        };
  
        _glGetTexEnvfv = function _glGetTexEnvfv(target, pname, param) {
          GLImmediate.TexEnvJIT.hook_getTexEnvfv(target, pname, param);
        };
  
        var glGetIntegerv = _glGetIntegerv;
        _glGetIntegerv = _emscripten_glGetIntegerv = function _glGetIntegerv(pname, params) {
          switch (pname) {
            case 0x8B8D: { // GL_CURRENT_PROGRAM
              // Just query directly so we're working with WebGL objects.
              var cur = GLctx.getParameter(GLctx.CURRENT_PROGRAM);
              if (cur == GLImmediate.fixedFunctionProgram) {
                // Pretend we're not using a program.
                HEAP32[((params)>>2)]=0;
                return;
              }
              break;
            }
          }
          glGetIntegerv(pname, params);
        };
      },initted:false,init:function () {
        Module.printErr('WARNING: using emscripten GL immediate mode emulation. This is very limited in what it supports');
        GLImmediate.initted = true;
  
        if (!Module.useWebGL) return; // a 2D canvas may be currently used TODO: make sure we are actually called in that case
  
        // User can override the maximum number of texture units that we emulate. Using fewer texture units increases runtime performance
        // slightly, so it is advantageous to choose as small value as needed.
        GLImmediate.MAX_TEXTURES = Module['GL_MAX_TEXTURE_IMAGE_UNITS'] || GLctx.getParameter(GLctx.MAX_TEXTURE_IMAGE_UNITS);
  
        GLImmediate.TexEnvJIT.init(GLctx, GLImmediate.MAX_TEXTURES);
  
        GLImmediate.NUM_ATTRIBUTES = 3 /*pos+normal+color attributes*/ + GLImmediate.MAX_TEXTURES;
        GLImmediate.clientAttributes = [];
        GLEmulation.enabledClientAttribIndices = [];
        for (var i = 0; i < GLImmediate.NUM_ATTRIBUTES; i++) {
          GLImmediate.clientAttributes.push({});
          GLEmulation.enabledClientAttribIndices.push(false);
        }
  
        // Initialize matrix library
        // When user sets a matrix, increment a 'version number' on the new data, and when rendering, submit
        // the matrices to the shader program only if they have an old version of the data.
        GLImmediate.matrix = [];
        GLImmediate.matrixStack = [];
        GLImmediate.matrixVersion = [];
        for (var i = 0; i < 2 + GLImmediate.MAX_TEXTURES; i++) { // Modelview, Projection, plus one matrix for each texture coordinate.
          GLImmediate.matrixStack.push([]);
          GLImmediate.matrixVersion.push(0);
          GLImmediate.matrix.push(GLImmediate.matrixLib.mat4.create());
          GLImmediate.matrixLib.mat4.identity(GLImmediate.matrix[i]);
        }
  
        // Renderer cache
        GLImmediate.rendererCache = GLImmediate.MapTreeLib.create();
  
        // Buffers for data
        GLImmediate.tempData = new Float32Array(GL.MAX_TEMP_BUFFER_SIZE >> 2);
        GLImmediate.indexData = new Uint16Array(GL.MAX_TEMP_BUFFER_SIZE >> 1);
  
        GLImmediate.vertexDataU8 = new Uint8Array(GLImmediate.tempData.buffer);
  
        GL.generateTempBuffers(true);
  
        GLImmediate.clientColor = new Float32Array([1, 1, 1, 1]);
      },prepareClientAttributes:function prepareClientAttributes(count, beginEnd) {
        // If no client attributes were modified since we were last called, do nothing. Note that this
        // does not work for glBegin/End, where we generate renderer components dynamically and then
        // disable them ourselves, but it does help with glDrawElements/Arrays.
        if (!GLImmediate.modifiedClientAttributes) {
          GLImmediate.vertexCounter = (GLImmediate.stride * count) / 4; // XXX assuming float
          return;
        }
        GLImmediate.modifiedClientAttributes = false;
  
        // The role of prepareClientAttributes is to examine the set of client-side vertex attribute buffers
        // that user code has submitted, and to prepare them to be uploaded to a VBO in GPU memory
        // (since WebGL does not support client-side rendering, i.e. rendering from vertex data in CPU memory)
        // User can submit vertex data generally in three different configurations:
        // 1. Fully planar: all attributes are in their own separate tightly-packed arrays in CPU memory.
        // 2. Fully interleaved: all attributes share a single array where data is interleaved something like (pos,uv,normal), (pos,uv,normal), ...
        // 3. Complex hybrid: Multiple separate arrays that either are sparsely strided, and/or partially interleave vertex attributes.
  
        // For simplicity, we support the case (2) as the fast case. For (1) and (3), we do a memory copy of the
        // vertex data here to prepare a relayouted buffer that is of the structure in case (2). The reason
        // for this is that it allows the emulation code to get away with using just one VBO buffer for rendering,
        // and not have to maintain multiple ones. Therefore cases (1) and (3) will be very slow, and case (2) is fast.
  
        // Detect which case we are in by using a quick heuristic by examining the strides of the buffers. If all the buffers have identical 
        // stride, we assume we have case (2), otherwise we have something more complex.
        var clientStartPointer = 0x7FFFFFFF;
        var bytes = 0; // Total number of bytes taken up by a single vertex.
        var minStride = 0x7FFFFFFF;
        var maxStride = 0;
        var attributes = GLImmediate.liveClientAttributes;
        attributes.length = 0;
        for (var i = 0; i < 3+GLImmediate.MAX_TEXTURES; i++) {
          if (GLImmediate.enabledClientAttributes[i]) {
            var attr = GLImmediate.clientAttributes[i];
            attributes.push(attr);
            clientStartPointer = Math.min(clientStartPointer, attr.pointer);
            attr.sizeBytes = attr.size * GL.byteSizeByType[attr.type - GL.byteSizeByTypeRoot];
            bytes += attr.sizeBytes;
            minStride = Math.min(minStride, attr.stride);
            maxStride = Math.max(maxStride, attr.stride);
          }
        }
  
        if ((minStride != maxStride || maxStride < bytes) && !beginEnd) {
          // We are in cases (1) or (3): slow path, shuffle the data around into a single interleaved vertex buffer.
          // The immediate-mode glBegin()/glEnd() vertex submission gets automatically generated in appropriate layout,
          // so never need to come down this path if that was used.
          if (!GLImmediate.restrideBuffer) GLImmediate.restrideBuffer = _malloc(GL.MAX_TEMP_BUFFER_SIZE);
          var start = GLImmediate.restrideBuffer;
          bytes = 0;
          // calculate restrided offsets and total size
          for (var i = 0; i < attributes.length; i++) {
            var attr = attributes[i];
            var size = attr.sizeBytes;
            if (size % 4 != 0) size += 4 - (size % 4); // align everything
            attr.offset = bytes;
            bytes += size;
          }
          // copy out the data (we need to know the stride for that, and define attr.pointer)
          for (var i = 0; i < attributes.length; i++) {
            var attr = attributes[i];
            var srcStride = Math.max(attr.sizeBytes, attr.stride);
            if ((srcStride & 3) == 0 && (attr.sizeBytes & 3) == 0) {
              var size4 = attr.sizeBytes>>2;
              var srcStride4 = Math.max(attr.sizeBytes, attr.stride)>>2;
              for (var j = 0; j < count; j++) {
                for (var k = 0; k < size4; k++) { // copy in chunks of 4 bytes, our alignment makes this possible
                  HEAP32[((start + attr.offset + bytes*j)>>2) + k] = HEAP32[(attr.pointer>>2) + j*srcStride4 + k];
                }
              }
            } else {
              for (var j = 0; j < count; j++) {
                for (var k = 0; k < attr.sizeBytes; k++) { // source data was not aligned to multiples of 4, must copy byte by byte.
                  HEAP8[start + attr.offset + bytes*j + k] = HEAP8[attr.pointer + j*srcStride + k];
                }
              }
            }
            attr.pointer = start + attr.offset;
          }
          GLImmediate.stride = bytes;
          GLImmediate.vertexPointer = start;
        } else {
          // case (2): fast path, all data is interleaved to a single vertex array so we can get away with a single VBO upload.
          if (GL.currArrayBuffer) {
            GLImmediate.vertexPointer = 0;
          } else {
            GLImmediate.vertexPointer = clientStartPointer;
          }
          for (var i = 0; i < attributes.length; i++) {
            var attr = attributes[i];
            attr.offset = attr.pointer - GLImmediate.vertexPointer; // Compute what will be the offset of this attribute in the VBO after we upload.
          }
          GLImmediate.stride = Math.max(maxStride, bytes);
        }
        if (!beginEnd) {
          GLImmediate.vertexCounter = (GLImmediate.stride * count) / 4; // XXX assuming float
        }
      },flush:function flush(numProvidedIndexes, startIndex, ptr) {
        assert(numProvidedIndexes >= 0 || !numProvidedIndexes);
        startIndex = startIndex || 0;
        ptr = ptr || 0;
  
        var renderer = GLImmediate.getRenderer();
  
        // Generate index data in a format suitable for GLES 2.0/WebGL
        var numVertexes = 4 * GLImmediate.vertexCounter / GLImmediate.stride;
        assert(numVertexes % 1 == 0, "`numVertexes` must be an integer.");
        var emulatedElementArrayBuffer = false;
        var numIndexes = 0;
        if (numProvidedIndexes) {
          numIndexes = numProvidedIndexes;
          if (!GL.currArrayBuffer && GLImmediate.firstVertex > GLImmediate.lastVertex) {
            // Figure out the first and last vertex from the index data
            assert(!GL.currElementArrayBuffer); // If we are going to upload array buffer data, we need to find which range to
                                                // upload based on the indices. If they are in a buffer on the GPU, that is very
                                                // inconvenient! So if you do not have an array buffer, you should also not have
                                                // an element array buffer. But best is to use both buffers!
            for (var i = 0; i < numProvidedIndexes; i++) {
              var currIndex = HEAPU16[(((ptr)+(i*2))>>1)];
              GLImmediate.firstVertex = Math.min(GLImmediate.firstVertex, currIndex);
              GLImmediate.lastVertex = Math.max(GLImmediate.lastVertex, currIndex+1);
            }
          }
          if (!GL.currElementArrayBuffer) {
            // If no element array buffer is bound, then indices is a literal pointer to clientside data
            assert(numProvidedIndexes << 1 <= GL.MAX_TEMP_BUFFER_SIZE, 'too many immediate mode indexes (a)');
            var indexBuffer = GL.getTempIndexBuffer(numProvidedIndexes << 1);
            GLctx.bindBuffer(GLctx.ELEMENT_ARRAY_BUFFER, indexBuffer);
            GLctx.bufferSubData(GLctx.ELEMENT_ARRAY_BUFFER, 0, HEAPU16.subarray((ptr)>>1,(ptr + (numProvidedIndexes << 1))>>1));
            ptr = 0;
            emulatedElementArrayBuffer = true;
          }
        } else if (GLImmediate.mode > 6) { // above GL_TRIANGLE_FAN are the non-GL ES modes
          if (GLImmediate.mode != 7) throw 'unsupported immediate mode ' + GLImmediate.mode; // GL_QUADS
          // GLImmediate.firstVertex is the first vertex we want. Quad indexes are in the pattern
          // 0 1 2, 0 2 3, 4 5 6, 4 6 7, so we need to look at index firstVertex * 1.5 to see it.
          // Then since indexes are 2 bytes each, that means 3
          assert(GLImmediate.firstVertex % 4 == 0);
          ptr = GLImmediate.firstVertex*3;
          var numQuads = numVertexes / 4;
          numIndexes = numQuads * 6; // 0 1 2, 0 2 3 pattern
          assert(ptr + (numIndexes << 1) <= GL.MAX_TEMP_BUFFER_SIZE, 'too many immediate mode indexes (b)');
          GLctx.bindBuffer(GLctx.ELEMENT_ARRAY_BUFFER, GL.tempQuadIndexBuffer);
          emulatedElementArrayBuffer = true;
        }
  
        renderer.prepare();
  
        if (numIndexes) {
          GLctx.drawElements(GLctx.TRIANGLES, numIndexes, GLctx.UNSIGNED_SHORT, ptr);
        } else {
          GLctx.drawArrays(GLImmediate.mode, startIndex, numVertexes);
        }
  
        if (emulatedElementArrayBuffer) {
          GLctx.bindBuffer(GLctx.ELEMENT_ARRAY_BUFFER, GL.buffers[GL.currElementArrayBuffer] || null);
        }
  
      }};
  GLImmediate.matrixLib = (function() {
  
  /**
   * @fileoverview gl-matrix - High performance matrix and vector operations for WebGL
   * @author Brandon Jones
   * @version 1.2.4
   */
  
  // Modifed for emscripten: Global scoping etc.
  
  /*
   * Copyright (c) 2011 Brandon Jones
   *
   * This software is provided 'as-is', without any express or implied
   * warranty. In no event will the authors be held liable for any damages
   * arising from the use of this software.
   *
   * Permission is granted to anyone to use this software for any purpose,
   * including commercial applications, and to alter it and redistribute it
   * freely, subject to the following restrictions:
   *
   *    1. The origin of this software must not be misrepresented; you must not
   *    claim that you wrote the original software. If you use this software
   *    in a product, an acknowledgment in the product documentation would be
   *    appreciated but is not required.
   *
   *    2. Altered source versions must be plainly marked as such, and must not
   *    be misrepresented as being the original software.
   *
   *    3. This notice may not be removed or altered from any source
   *    distribution.
   */
  
  
  /**
   * @class 3 Dimensional Vector
   * @name vec3
   */
  var vec3 = {};
  
  /**
   * @class 3x3 Matrix
   * @name mat3
   */
  var mat3 = {};
  
  /**
   * @class 4x4 Matrix
   * @name mat4
   */
  var mat4 = {};
  
  /**
   * @class Quaternion
   * @name quat4
   */
  var quat4 = {};
  
  var MatrixArray = Float32Array;
  
  /*
   * vec3
   */
   
  /**
   * Creates a new instance of a vec3 using the default array type
   * Any javascript array-like objects containing at least 3 numeric elements can serve as a vec3
   *
   * @param {vec3} [vec] vec3 containing values to initialize with
   *
   * @returns {vec3} New vec3
   */
  vec3.create = function (vec) {
      var dest = new MatrixArray(3);
  
      if (vec) {
          dest[0] = vec[0];
          dest[1] = vec[1];
          dest[2] = vec[2];
      } else {
          dest[0] = dest[1] = dest[2] = 0;
      }
  
      return dest;
  };
  
  /**
   * Copies the values of one vec3 to another
   *
   * @param {vec3} vec vec3 containing values to copy
   * @param {vec3} dest vec3 receiving copied values
   *
   * @returns {vec3} dest
   */
  vec3.set = function (vec, dest) {
      dest[0] = vec[0];
      dest[1] = vec[1];
      dest[2] = vec[2];
  
      return dest;
  };
  
  /**
   * Performs a vector addition
   *
   * @param {vec3} vec First operand
   * @param {vec3} vec2 Second operand
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */
  vec3.add = function (vec, vec2, dest) {
      if (!dest || vec === dest) {
          vec[0] += vec2[0];
          vec[1] += vec2[1];
          vec[2] += vec2[2];
          return vec;
      }
  
      dest[0] = vec[0] + vec2[0];
      dest[1] = vec[1] + vec2[1];
      dest[2] = vec[2] + vec2[2];
      return dest;
  };
  
  /**
   * Performs a vector subtraction
   *
   * @param {vec3} vec First operand
   * @param {vec3} vec2 Second operand
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */
  vec3.subtract = function (vec, vec2, dest) {
      if (!dest || vec === dest) {
          vec[0] -= vec2[0];
          vec[1] -= vec2[1];
          vec[2] -= vec2[2];
          return vec;
      }
  
      dest[0] = vec[0] - vec2[0];
      dest[1] = vec[1] - vec2[1];
      dest[2] = vec[2] - vec2[2];
      return dest;
  };
  
  /**
   * Performs a vector multiplication
   *
   * @param {vec3} vec First operand
   * @param {vec3} vec2 Second operand
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */
  vec3.multiply = function (vec, vec2, dest) {
      if (!dest || vec === dest) {
          vec[0] *= vec2[0];
          vec[1] *= vec2[1];
          vec[2] *= vec2[2];
          return vec;
      }
  
      dest[0] = vec[0] * vec2[0];
      dest[1] = vec[1] * vec2[1];
      dest[2] = vec[2] * vec2[2];
      return dest;
  };
  
  /**
   * Negates the components of a vec3
   *
   * @param {vec3} vec vec3 to negate
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */
  vec3.negate = function (vec, dest) {
      if (!dest) { dest = vec; }
  
      dest[0] = -vec[0];
      dest[1] = -vec[1];
      dest[2] = -vec[2];
      return dest;
  };
  
  /**
   * Multiplies the components of a vec3 by a scalar value
   *
   * @param {vec3} vec vec3 to scale
   * @param {number} val Value to scale by
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */
  vec3.scale = function (vec, val, dest) {
      if (!dest || vec === dest) {
          vec[0] *= val;
          vec[1] *= val;
          vec[2] *= val;
          return vec;
      }
  
      dest[0] = vec[0] * val;
      dest[1] = vec[1] * val;
      dest[2] = vec[2] * val;
      return dest;
  };
  
  /**
   * Generates a unit vector of the same direction as the provided vec3
   * If vector length is 0, returns [0, 0, 0]
   *
   * @param {vec3} vec vec3 to normalize
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */
  vec3.normalize = function (vec, dest) {
      if (!dest) { dest = vec; }
  
      var x = vec[0], y = vec[1], z = vec[2],
          len = Math.sqrt(x * x + y * y + z * z);
  
      if (!len) {
          dest[0] = 0;
          dest[1] = 0;
          dest[2] = 0;
          return dest;
      } else if (len === 1) {
          dest[0] = x;
          dest[1] = y;
          dest[2] = z;
          return dest;
      }
  
      len = 1 / len;
      dest[0] = x * len;
      dest[1] = y * len;
      dest[2] = z * len;
      return dest;
  };
  
  /**
   * Generates the cross product of two vec3s
   *
   * @param {vec3} vec First operand
   * @param {vec3} vec2 Second operand
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */
  vec3.cross = function (vec, vec2, dest) {
      if (!dest) { dest = vec; }
  
      var x = vec[0], y = vec[1], z = vec[2],
          x2 = vec2[0], y2 = vec2[1], z2 = vec2[2];
  
      dest[0] = y * z2 - z * y2;
      dest[1] = z * x2 - x * z2;
      dest[2] = x * y2 - y * x2;
      return dest;
  };
  
  /**
   * Caclulates the length of a vec3
   *
   * @param {vec3} vec vec3 to calculate length of
   *
   * @returns {number} Length of vec
   */
  vec3.length = function (vec) {
      var x = vec[0], y = vec[1], z = vec[2];
      return Math.sqrt(x * x + y * y + z * z);
  };
  
  /**
   * Caclulates the dot product of two vec3s
   *
   * @param {vec3} vec First operand
   * @param {vec3} vec2 Second operand
   *
   * @returns {number} Dot product of vec and vec2
   */
  vec3.dot = function (vec, vec2) {
      return vec[0] * vec2[0] + vec[1] * vec2[1] + vec[2] * vec2[2];
  };
  
  /**
   * Generates a unit vector pointing from one vector to another
   *
   * @param {vec3} vec Origin vec3
   * @param {vec3} vec2 vec3 to point to
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */
  vec3.direction = function (vec, vec2, dest) {
      if (!dest) { dest = vec; }
  
      var x = vec[0] - vec2[0],
          y = vec[1] - vec2[1],
          z = vec[2] - vec2[2],
          len = Math.sqrt(x * x + y * y + z * z);
  
      if (!len) {
          dest[0] = 0;
          dest[1] = 0;
          dest[2] = 0;
          return dest;
      }
  
      len = 1 / len;
      dest[0] = x * len;
      dest[1] = y * len;
      dest[2] = z * len;
      return dest;
  };
  
  /**
   * Performs a linear interpolation between two vec3
   *
   * @param {vec3} vec First vector
   * @param {vec3} vec2 Second vector
   * @param {number} lerp Interpolation amount between the two inputs
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */
  vec3.lerp = function (vec, vec2, lerp, dest) {
      if (!dest) { dest = vec; }
  
      dest[0] = vec[0] + lerp * (vec2[0] - vec[0]);
      dest[1] = vec[1] + lerp * (vec2[1] - vec[1]);
      dest[2] = vec[2] + lerp * (vec2[2] - vec[2]);
  
      return dest;
  };
  
  /**
   * Calculates the euclidian distance between two vec3
   *
   * Params:
   * @param {vec3} vec First vector
   * @param {vec3} vec2 Second vector
   *
   * @returns {number} Distance between vec and vec2
   */
  vec3.dist = function (vec, vec2) {
      var x = vec2[0] - vec[0],
          y = vec2[1] - vec[1],
          z = vec2[2] - vec[2];
          
      return Math.sqrt(x*x + y*y + z*z);
  };
  
  /**
   * Projects the specified vec3 from screen space into object space
   * Based on the <a href="http://webcvs.freedesktop.org/mesa/Mesa/src/glu/mesa/project.c?revision=1.4&view=markup">Mesa gluUnProject implementation</a>
   *
   * @param {vec3} vec Screen-space vector to project
   * @param {mat4} view View matrix
   * @param {mat4} proj Projection matrix
   * @param {vec4} viewport Viewport as given to gl.viewport [x, y, width, height]
   * @param {vec3} [dest] vec3 receiving unprojected result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */
  vec3.unproject = function (vec, view, proj, viewport, dest) {
      if (!dest) { dest = vec; }
  
      var m = mat4.create();
      var v = new MatrixArray(4);
      
      v[0] = (vec[0] - viewport[0]) * 2.0 / viewport[2] - 1.0;
      v[1] = (vec[1] - viewport[1]) * 2.0 / viewport[3] - 1.0;
      v[2] = 2.0 * vec[2] - 1.0;
      v[3] = 1.0;
      
      mat4.multiply(proj, view, m);
      if(!mat4.inverse(m)) { return null; }
      
      mat4.multiplyVec4(m, v);
      if(v[3] === 0.0) { return null; }
  
      dest[0] = v[0] / v[3];
      dest[1] = v[1] / v[3];
      dest[2] = v[2] / v[3];
      
      return dest;
  };
  
  /**
   * Returns a string representation of a vector
   *
   * @param {vec3} vec Vector to represent as a string
   *
   * @returns {string} String representation of vec
   */
  vec3.str = function (vec) {
      return '[' + vec[0] + ', ' + vec[1] + ', ' + vec[2] + ']';
  };
  
  /*
   * mat3
   */
  
  /**
   * Creates a new instance of a mat3 using the default array type
   * Any javascript array-like object containing at least 9 numeric elements can serve as a mat3
   *
   * @param {mat3} [mat] mat3 containing values to initialize with
   *
   * @returns {mat3} New mat3
   */
  mat3.create = function (mat) {
      var dest = new MatrixArray(9);
  
      if (mat) {
          dest[0] = mat[0];
          dest[1] = mat[1];
          dest[2] = mat[2];
          dest[3] = mat[3];
          dest[4] = mat[4];
          dest[5] = mat[5];
          dest[6] = mat[6];
          dest[7] = mat[7];
          dest[8] = mat[8];
      }
  
      return dest;
  };
  
  /**
   * Copies the values of one mat3 to another
   *
   * @param {mat3} mat mat3 containing values to copy
   * @param {mat3} dest mat3 receiving copied values
   *
   * @returns {mat3} dest
   */
  mat3.set = function (mat, dest) {
      dest[0] = mat[0];
      dest[1] = mat[1];
      dest[2] = mat[2];
      dest[3] = mat[3];
      dest[4] = mat[4];
      dest[5] = mat[5];
      dest[6] = mat[6];
      dest[7] = mat[7];
      dest[8] = mat[8];
      return dest;
  };
  
  /**
   * Sets a mat3 to an identity matrix
   *
   * @param {mat3} dest mat3 to set
   *
   * @returns dest if specified, otherwise a new mat3
   */
  mat3.identity = function (dest) {
      if (!dest) { dest = mat3.create(); }
      dest[0] = 1;
      dest[1] = 0;
      dest[2] = 0;
      dest[3] = 0;
      dest[4] = 1;
      dest[5] = 0;
      dest[6] = 0;
      dest[7] = 0;
      dest[8] = 1;
      return dest;
  };
  
  /**
   * Transposes a mat3 (flips the values over the diagonal)
   *
   * Params:
   * @param {mat3} mat mat3 to transpose
   * @param {mat3} [dest] mat3 receiving transposed values. If not specified result is written to mat
   *
   * @returns {mat3} dest is specified, mat otherwise
   */
  mat3.transpose = function (mat, dest) {
      // If we are transposing ourselves we can skip a few steps but have to cache some values
      if (!dest || mat === dest) {
          var a01 = mat[1], a02 = mat[2],
              a12 = mat[5];
  
          mat[1] = mat[3];
          mat[2] = mat[6];
          mat[3] = a01;
          mat[5] = mat[7];
          mat[6] = a02;
          mat[7] = a12;
          return mat;
      }
  
      dest[0] = mat[0];
      dest[1] = mat[3];
      dest[2] = mat[6];
      dest[3] = mat[1];
      dest[4] = mat[4];
      dest[5] = mat[7];
      dest[6] = mat[2];
      dest[7] = mat[5];
      dest[8] = mat[8];
      return dest;
  };
  
  /**
   * Copies the elements of a mat3 into the upper 3x3 elements of a mat4
   *
   * @param {mat3} mat mat3 containing values to copy
   * @param {mat4} [dest] mat4 receiving copied values
   *
   * @returns {mat4} dest if specified, a new mat4 otherwise
   */
  mat3.toMat4 = function (mat, dest) {
      if (!dest) { dest = mat4.create(); }
  
      dest[15] = 1;
      dest[14] = 0;
      dest[13] = 0;
      dest[12] = 0;
  
      dest[11] = 0;
      dest[10] = mat[8];
      dest[9] = mat[7];
      dest[8] = mat[6];
  
      dest[7] = 0;
      dest[6] = mat[5];
      dest[5] = mat[4];
      dest[4] = mat[3];
  
      dest[3] = 0;
      dest[2] = mat[2];
      dest[1] = mat[1];
      dest[0] = mat[0];
  
      return dest;
  };
  
  /**
   * Returns a string representation of a mat3
   *
   * @param {mat3} mat mat3 to represent as a string
   *
   * @param {string} String representation of mat
   */
  mat3.str = function (mat) {
      return '[' + mat[0] + ', ' + mat[1] + ', ' + mat[2] +
          ', ' + mat[3] + ', ' + mat[4] + ', ' + mat[5] +
          ', ' + mat[6] + ', ' + mat[7] + ', ' + mat[8] + ']';
  };
  
  /*
   * mat4
   */
  
  /**
   * Creates a new instance of a mat4 using the default array type
   * Any javascript array-like object containing at least 16 numeric elements can serve as a mat4
   *
   * @param {mat4} [mat] mat4 containing values to initialize with
   *
   * @returns {mat4} New mat4
   */
  mat4.create = function (mat) {
      var dest = new MatrixArray(16);
  
      if (mat) {
          dest[0] = mat[0];
          dest[1] = mat[1];
          dest[2] = mat[2];
          dest[3] = mat[3];
          dest[4] = mat[4];
          dest[5] = mat[5];
          dest[6] = mat[6];
          dest[7] = mat[7];
          dest[8] = mat[8];
          dest[9] = mat[9];
          dest[10] = mat[10];
          dest[11] = mat[11];
          dest[12] = mat[12];
          dest[13] = mat[13];
          dest[14] = mat[14];
          dest[15] = mat[15];
      }
  
      return dest;
  };
  
  /**
   * Copies the values of one mat4 to another
   *
   * @param {mat4} mat mat4 containing values to copy
   * @param {mat4} dest mat4 receiving copied values
   *
   * @returns {mat4} dest
   */
  mat4.set = function (mat, dest) {
      dest[0] = mat[0];
      dest[1] = mat[1];
      dest[2] = mat[2];
      dest[3] = mat[3];
      dest[4] = mat[4];
      dest[5] = mat[5];
      dest[6] = mat[6];
      dest[7] = mat[7];
      dest[8] = mat[8];
      dest[9] = mat[9];
      dest[10] = mat[10];
      dest[11] = mat[11];
      dest[12] = mat[12];
      dest[13] = mat[13];
      dest[14] = mat[14];
      dest[15] = mat[15];
      return dest;
  };
  
  /**
   * Sets a mat4 to an identity matrix
   *
   * @param {mat4} dest mat4 to set
   *
   * @returns {mat4} dest
   */
  mat4.identity = function (dest) {
      if (!dest) { dest = mat4.create(); }
      dest[0] = 1;
      dest[1] = 0;
      dest[2] = 0;
      dest[3] = 0;
      dest[4] = 0;
      dest[5] = 1;
      dest[6] = 0;
      dest[7] = 0;
      dest[8] = 0;
      dest[9] = 0;
      dest[10] = 1;
      dest[11] = 0;
      dest[12] = 0;
      dest[13] = 0;
      dest[14] = 0;
      dest[15] = 1;
      return dest;
  };
  
  /**
   * Transposes a mat4 (flips the values over the diagonal)
   *
   * @param {mat4} mat mat4 to transpose
   * @param {mat4} [dest] mat4 receiving transposed values. If not specified result is written to mat
   *
   * @param {mat4} dest is specified, mat otherwise
   */
  mat4.transpose = function (mat, dest) {
      // If we are transposing ourselves we can skip a few steps but have to cache some values
      if (!dest || mat === dest) {
          var a01 = mat[1], a02 = mat[2], a03 = mat[3],
              a12 = mat[6], a13 = mat[7],
              a23 = mat[11];
  
          mat[1] = mat[4];
          mat[2] = mat[8];
          mat[3] = mat[12];
          mat[4] = a01;
          mat[6] = mat[9];
          mat[7] = mat[13];
          mat[8] = a02;
          mat[9] = a12;
          mat[11] = mat[14];
          mat[12] = a03;
          mat[13] = a13;
          mat[14] = a23;
          return mat;
      }
  
      dest[0] = mat[0];
      dest[1] = mat[4];
      dest[2] = mat[8];
      dest[3] = mat[12];
      dest[4] = mat[1];
      dest[5] = mat[5];
      dest[6] = mat[9];
      dest[7] = mat[13];
      dest[8] = mat[2];
      dest[9] = mat[6];
      dest[10] = mat[10];
      dest[11] = mat[14];
      dest[12] = mat[3];
      dest[13] = mat[7];
      dest[14] = mat[11];
      dest[15] = mat[15];
      return dest;
  };
  
  /**
   * Calculates the determinant of a mat4
   *
   * @param {mat4} mat mat4 to calculate determinant of
   *
   * @returns {number} determinant of mat
   */
  mat4.determinant = function (mat) {
      // Cache the matrix values (makes for huge speed increases!)
      var a00 = mat[0], a01 = mat[1], a02 = mat[2], a03 = mat[3],
          a10 = mat[4], a11 = mat[5], a12 = mat[6], a13 = mat[7],
          a20 = mat[8], a21 = mat[9], a22 = mat[10], a23 = mat[11],
          a30 = mat[12], a31 = mat[13], a32 = mat[14], a33 = mat[15];
  
      return (a30 * a21 * a12 * a03 - a20 * a31 * a12 * a03 - a30 * a11 * a22 * a03 + a10 * a31 * a22 * a03 +
              a20 * a11 * a32 * a03 - a10 * a21 * a32 * a03 - a30 * a21 * a02 * a13 + a20 * a31 * a02 * a13 +
              a30 * a01 * a22 * a13 - a00 * a31 * a22 * a13 - a20 * a01 * a32 * a13 + a00 * a21 * a32 * a13 +
              a30 * a11 * a02 * a23 - a10 * a31 * a02 * a23 - a30 * a01 * a12 * a23 + a00 * a31 * a12 * a23 +
              a10 * a01 * a32 * a23 - a00 * a11 * a32 * a23 - a20 * a11 * a02 * a33 + a10 * a21 * a02 * a33 +
              a20 * a01 * a12 * a33 - a00 * a21 * a12 * a33 - a10 * a01 * a22 * a33 + a00 * a11 * a22 * a33);
  };
  
  /**
   * Calculates the inverse matrix of a mat4
   *
   * @param {mat4} mat mat4 to calculate inverse of
   * @param {mat4} [dest] mat4 receiving inverse matrix. If not specified result is written to mat
   *
   * @param {mat4} dest is specified, mat otherwise, null if matrix cannot be inverted
   */
  mat4.inverse = function (mat, dest) {
      if (!dest) { dest = mat; }
  
      // Cache the matrix values (makes for huge speed increases!)
      var a00 = mat[0], a01 = mat[1], a02 = mat[2], a03 = mat[3],
          a10 = mat[4], a11 = mat[5], a12 = mat[6], a13 = mat[7],
          a20 = mat[8], a21 = mat[9], a22 = mat[10], a23 = mat[11],
          a30 = mat[12], a31 = mat[13], a32 = mat[14], a33 = mat[15],
  
          b00 = a00 * a11 - a01 * a10,
          b01 = a00 * a12 - a02 * a10,
          b02 = a00 * a13 - a03 * a10,
          b03 = a01 * a12 - a02 * a11,
          b04 = a01 * a13 - a03 * a11,
          b05 = a02 * a13 - a03 * a12,
          b06 = a20 * a31 - a21 * a30,
          b07 = a20 * a32 - a22 * a30,
          b08 = a20 * a33 - a23 * a30,
          b09 = a21 * a32 - a22 * a31,
          b10 = a21 * a33 - a23 * a31,
          b11 = a22 * a33 - a23 * a32,
  
          d = (b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06),
          invDet;
  
          // Calculate the determinant
          if (!d) { return null; }
          invDet = 1 / d;
  
      dest[0] = (a11 * b11 - a12 * b10 + a13 * b09) * invDet;
      dest[1] = (-a01 * b11 + a02 * b10 - a03 * b09) * invDet;
      dest[2] = (a31 * b05 - a32 * b04 + a33 * b03) * invDet;
      dest[3] = (-a21 * b05 + a22 * b04 - a23 * b03) * invDet;
      dest[4] = (-a10 * b11 + a12 * b08 - a13 * b07) * invDet;
      dest[5] = (a00 * b11 - a02 * b08 + a03 * b07) * invDet;
      dest[6] = (-a30 * b05 + a32 * b02 - a33 * b01) * invDet;
      dest[7] = (a20 * b05 - a22 * b02 + a23 * b01) * invDet;
      dest[8] = (a10 * b10 - a11 * b08 + a13 * b06) * invDet;
      dest[9] = (-a00 * b10 + a01 * b08 - a03 * b06) * invDet;
      dest[10] = (a30 * b04 - a31 * b02 + a33 * b00) * invDet;
      dest[11] = (-a20 * b04 + a21 * b02 - a23 * b00) * invDet;
      dest[12] = (-a10 * b09 + a11 * b07 - a12 * b06) * invDet;
      dest[13] = (a00 * b09 - a01 * b07 + a02 * b06) * invDet;
      dest[14] = (-a30 * b03 + a31 * b01 - a32 * b00) * invDet;
      dest[15] = (a20 * b03 - a21 * b01 + a22 * b00) * invDet;
  
      return dest;
  };
  
  /**
   * Copies the upper 3x3 elements of a mat4 into another mat4
   *
   * @param {mat4} mat mat4 containing values to copy
   * @param {mat4} [dest] mat4 receiving copied values
   *
   * @returns {mat4} dest is specified, a new mat4 otherwise
   */
  mat4.toRotationMat = function (mat, dest) {
      if (!dest) { dest = mat4.create(); }
  
      dest[0] = mat[0];
      dest[1] = mat[1];
      dest[2] = mat[2];
      dest[3] = mat[3];
      dest[4] = mat[4];
      dest[5] = mat[5];
      dest[6] = mat[6];
      dest[7] = mat[7];
      dest[8] = mat[8];
      dest[9] = mat[9];
      dest[10] = mat[10];
      dest[11] = mat[11];
      dest[12] = 0;
      dest[13] = 0;
      dest[14] = 0;
      dest[15] = 1;
  
      return dest;
  };
  
  /**
   * Copies the upper 3x3 elements of a mat4 into a mat3
   *
   * @param {mat4} mat mat4 containing values to copy
   * @param {mat3} [dest] mat3 receiving copied values
   *
   * @returns {mat3} dest is specified, a new mat3 otherwise
   */
  mat4.toMat3 = function (mat, dest) {
      if (!dest) { dest = mat3.create(); }
  
      dest[0] = mat[0];
      dest[1] = mat[1];
      dest[2] = mat[2];
      dest[3] = mat[4];
      dest[4] = mat[5];
      dest[5] = mat[6];
      dest[6] = mat[8];
      dest[7] = mat[9];
      dest[8] = mat[10];
  
      return dest;
  };
  
  /**
   * Calculates the inverse of the upper 3x3 elements of a mat4 and copies the result into a mat3
   * The resulting matrix is useful for calculating transformed normals
   *
   * Params:
   * @param {mat4} mat mat4 containing values to invert and copy
   * @param {mat3} [dest] mat3 receiving values
   *
   * @returns {mat3} dest is specified, a new mat3 otherwise, null if the matrix cannot be inverted
   */
  mat4.toInverseMat3 = function (mat, dest) {
      // Cache the matrix values (makes for huge speed increases!)
      var a00 = mat[0], a01 = mat[1], a02 = mat[2],
          a10 = mat[4], a11 = mat[5], a12 = mat[6],
          a20 = mat[8], a21 = mat[9], a22 = mat[10],
  
          b01 = a22 * a11 - a12 * a21,
          b11 = -a22 * a10 + a12 * a20,
          b21 = a21 * a10 - a11 * a20,
  
          d = a00 * b01 + a01 * b11 + a02 * b21,
          id;
  
      if (!d) { return null; }
      id = 1 / d;
  
      if (!dest) { dest = mat3.create(); }
  
      dest[0] = b01 * id;
      dest[1] = (-a22 * a01 + a02 * a21) * id;
      dest[2] = (a12 * a01 - a02 * a11) * id;
      dest[3] = b11 * id;
      dest[4] = (a22 * a00 - a02 * a20) * id;
      dest[5] = (-a12 * a00 + a02 * a10) * id;
      dest[6] = b21 * id;
      dest[7] = (-a21 * a00 + a01 * a20) * id;
      dest[8] = (a11 * a00 - a01 * a10) * id;
  
      return dest;
  };
  
  /**
   * Performs a matrix multiplication
   *
   * @param {mat4} mat First operand
   * @param {mat4} mat2 Second operand
   * @param {mat4} [dest] mat4 receiving operation result. If not specified result is written to mat
   *
   * @returns {mat4} dest if specified, mat otherwise
   */
  mat4.multiply = function (mat, mat2, dest) {
      if (!dest) { dest = mat; }
  
      // Cache the matrix values (makes for huge speed increases!)
      var a00 = mat[0], a01 = mat[1], a02 = mat[2], a03 = mat[3],
          a10 = mat[4], a11 = mat[5], a12 = mat[6], a13 = mat[7],
          a20 = mat[8], a21 = mat[9], a22 = mat[10], a23 = mat[11],
          a30 = mat[12], a31 = mat[13], a32 = mat[14], a33 = mat[15],
  
          b00 = mat2[0], b01 = mat2[1], b02 = mat2[2], b03 = mat2[3],
          b10 = mat2[4], b11 = mat2[5], b12 = mat2[6], b13 = mat2[7],
          b20 = mat2[8], b21 = mat2[9], b22 = mat2[10], b23 = mat2[11],
          b30 = mat2[12], b31 = mat2[13], b32 = mat2[14], b33 = mat2[15];
  
      dest[0] = b00 * a00 + b01 * a10 + b02 * a20 + b03 * a30;
      dest[1] = b00 * a01 + b01 * a11 + b02 * a21 + b03 * a31;
      dest[2] = b00 * a02 + b01 * a12 + b02 * a22 + b03 * a32;
      dest[3] = b00 * a03 + b01 * a13 + b02 * a23 + b03 * a33;
      dest[4] = b10 * a00 + b11 * a10 + b12 * a20 + b13 * a30;
      dest[5] = b10 * a01 + b11 * a11 + b12 * a21 + b13 * a31;
      dest[6] = b10 * a02 + b11 * a12 + b12 * a22 + b13 * a32;
      dest[7] = b10 * a03 + b11 * a13 + b12 * a23 + b13 * a33;
      dest[8] = b20 * a00 + b21 * a10 + b22 * a20 + b23 * a30;
      dest[9] = b20 * a01 + b21 * a11 + b22 * a21 + b23 * a31;
      dest[10] = b20 * a02 + b21 * a12 + b22 * a22 + b23 * a32;
      dest[11] = b20 * a03 + b21 * a13 + b22 * a23 + b23 * a33;
      dest[12] = b30 * a00 + b31 * a10 + b32 * a20 + b33 * a30;
      dest[13] = b30 * a01 + b31 * a11 + b32 * a21 + b33 * a31;
      dest[14] = b30 * a02 + b31 * a12 + b32 * a22 + b33 * a32;
      dest[15] = b30 * a03 + b31 * a13 + b32 * a23 + b33 * a33;
  
      return dest;
  };
  
  /**
   * Transforms a vec3 with the given matrix
   * 4th vector component is implicitly '1'
   *
   * @param {mat4} mat mat4 to transform the vector with
   * @param {vec3} vec vec3 to transform
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */
  mat4.multiplyVec3 = function (mat, vec, dest) {
      if (!dest) { dest = vec; }
  
      var x = vec[0], y = vec[1], z = vec[2];
  
      dest[0] = mat[0] * x + mat[4] * y + mat[8] * z + mat[12];
      dest[1] = mat[1] * x + mat[5] * y + mat[9] * z + mat[13];
      dest[2] = mat[2] * x + mat[6] * y + mat[10] * z + mat[14];
  
      return dest;
  };
  
  /**
   * Transforms a vec4 with the given matrix
   *
   * @param {mat4} mat mat4 to transform the vector with
   * @param {vec4} vec vec4 to transform
   * @param {vec4} [dest] vec4 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec4} dest if specified, vec otherwise
   */
  mat4.multiplyVec4 = function (mat, vec, dest) {
      if (!dest) { dest = vec; }
  
      var x = vec[0], y = vec[1], z = vec[2], w = vec[3];
  
      dest[0] = mat[0] * x + mat[4] * y + mat[8] * z + mat[12] * w;
      dest[1] = mat[1] * x + mat[5] * y + mat[9] * z + mat[13] * w;
      dest[2] = mat[2] * x + mat[6] * y + mat[10] * z + mat[14] * w;
      dest[3] = mat[3] * x + mat[7] * y + mat[11] * z + mat[15] * w;
  
      return dest;
  };
  
  /**
   * Translates a matrix by the given vector
   *
   * @param {mat4} mat mat4 to translate
   * @param {vec3} vec vec3 specifying the translation
   * @param {mat4} [dest] mat4 receiving operation result. If not specified result is written to mat
   *
   * @returns {mat4} dest if specified, mat otherwise
   */
  mat4.translate = function (mat, vec, dest) {
      var x = vec[0], y = vec[1], z = vec[2],
          a00, a01, a02, a03,
          a10, a11, a12, a13,
          a20, a21, a22, a23;
  
      if (!dest || mat === dest) {
          mat[12] = mat[0] * x + mat[4] * y + mat[8] * z + mat[12];
          mat[13] = mat[1] * x + mat[5] * y + mat[9] * z + mat[13];
          mat[14] = mat[2] * x + mat[6] * y + mat[10] * z + mat[14];
          mat[15] = mat[3] * x + mat[7] * y + mat[11] * z + mat[15];
          return mat;
      }
  
      a00 = mat[0]; a01 = mat[1]; a02 = mat[2]; a03 = mat[3];
      a10 = mat[4]; a11 = mat[5]; a12 = mat[6]; a13 = mat[7];
      a20 = mat[8]; a21 = mat[9]; a22 = mat[10]; a23 = mat[11];
  
      dest[0] = a00; dest[1] = a01; dest[2] = a02; dest[3] = a03;
      dest[4] = a10; dest[5] = a11; dest[6] = a12; dest[7] = a13;
      dest[8] = a20; dest[9] = a21; dest[10] = a22; dest[11] = a23;
  
      dest[12] = a00 * x + a10 * y + a20 * z + mat[12];
      dest[13] = a01 * x + a11 * y + a21 * z + mat[13];
      dest[14] = a02 * x + a12 * y + a22 * z + mat[14];
      dest[15] = a03 * x + a13 * y + a23 * z + mat[15];
      return dest;
  };
  
  /**
   * Scales a matrix by the given vector
   *
   * @param {mat4} mat mat4 to scale
   * @param {vec3} vec vec3 specifying the scale for each axis
   * @param {mat4} [dest] mat4 receiving operation result. If not specified result is written to mat
   *
   * @param {mat4} dest if specified, mat otherwise
   */
  mat4.scale = function (mat, vec, dest) {
      var x = vec[0], y = vec[1], z = vec[2];
  
      if (!dest || mat === dest) {
          mat[0] *= x;
          mat[1] *= x;
          mat[2] *= x;
          mat[3] *= x;
          mat[4] *= y;
          mat[5] *= y;
          mat[6] *= y;
          mat[7] *= y;
          mat[8] *= z;
          mat[9] *= z;
          mat[10] *= z;
          mat[11] *= z;
          return mat;
      }
  
      dest[0] = mat[0] * x;
      dest[1] = mat[1] * x;
      dest[2] = mat[2] * x;
      dest[3] = mat[3] * x;
      dest[4] = mat[4] * y;
      dest[5] = mat[5] * y;
      dest[6] = mat[6] * y;
      dest[7] = mat[7] * y;
      dest[8] = mat[8] * z;
      dest[9] = mat[9] * z;
      dest[10] = mat[10] * z;
      dest[11] = mat[11] * z;
      dest[12] = mat[12];
      dest[13] = mat[13];
      dest[14] = mat[14];
      dest[15] = mat[15];
      return dest;
  };
  
  /**
   * Rotates a matrix by the given angle around the specified axis
   * If rotating around a primary axis (X,Y,Z) one of the specialized rotation functions should be used instead for performance
   *
   * @param {mat4} mat mat4 to rotate
   * @param {number} angle Angle (in radians) to rotate
   * @param {vec3} axis vec3 representing the axis to rotate around 
   * @param {mat4} [dest] mat4 receiving operation result. If not specified result is written to mat
   *
   * @returns {mat4} dest if specified, mat otherwise
   */
  mat4.rotate = function (mat, angle, axis, dest) {
      var x = axis[0], y = axis[1], z = axis[2],
          len = Math.sqrt(x * x + y * y + z * z),
          s, c, t,
          a00, a01, a02, a03,
          a10, a11, a12, a13,
          a20, a21, a22, a23,
          b00, b01, b02,
          b10, b11, b12,
          b20, b21, b22;
  
      if (!len) { return null; }
      if (len !== 1) {
          len = 1 / len;
          x *= len;
          y *= len;
          z *= len;
      }
  
      s = Math.sin(angle);
      c = Math.cos(angle);
      t = 1 - c;
  
      a00 = mat[0]; a01 = mat[1]; a02 = mat[2]; a03 = mat[3];
      a10 = mat[4]; a11 = mat[5]; a12 = mat[6]; a13 = mat[7];
      a20 = mat[8]; a21 = mat[9]; a22 = mat[10]; a23 = mat[11];
  
      // Construct the elements of the rotation matrix
      b00 = x * x * t + c; b01 = y * x * t + z * s; b02 = z * x * t - y * s;
      b10 = x * y * t - z * s; b11 = y * y * t + c; b12 = z * y * t + x * s;
      b20 = x * z * t + y * s; b21 = y * z * t - x * s; b22 = z * z * t + c;
  
      if (!dest) {
          dest = mat;
      } else if (mat !== dest) { // If the source and destination differ, copy the unchanged last row
          dest[12] = mat[12];
          dest[13] = mat[13];
          dest[14] = mat[14];
          dest[15] = mat[15];
      }
  
      // Perform rotation-specific matrix multiplication
      dest[0] = a00 * b00 + a10 * b01 + a20 * b02;
      dest[1] = a01 * b00 + a11 * b01 + a21 * b02;
      dest[2] = a02 * b00 + a12 * b01 + a22 * b02;
      dest[3] = a03 * b00 + a13 * b01 + a23 * b02;
  
      dest[4] = a00 * b10 + a10 * b11 + a20 * b12;
      dest[5] = a01 * b10 + a11 * b11 + a21 * b12;
      dest[6] = a02 * b10 + a12 * b11 + a22 * b12;
      dest[7] = a03 * b10 + a13 * b11 + a23 * b12;
  
      dest[8] = a00 * b20 + a10 * b21 + a20 * b22;
      dest[9] = a01 * b20 + a11 * b21 + a21 * b22;
      dest[10] = a02 * b20 + a12 * b21 + a22 * b22;
      dest[11] = a03 * b20 + a13 * b21 + a23 * b22;
      return dest;
  };
  
  /**
   * Rotates a matrix by the given angle around the X axis
   *
   * @param {mat4} mat mat4 to rotate
   * @param {number} angle Angle (in radians) to rotate
   * @param {mat4} [dest] mat4 receiving operation result. If not specified result is written to mat
   *
   * @returns {mat4} dest if specified, mat otherwise
   */
  mat4.rotateX = function (mat, angle, dest) {
      var s = Math.sin(angle),
          c = Math.cos(angle),
          a10 = mat[4],
          a11 = mat[5],
          a12 = mat[6],
          a13 = mat[7],
          a20 = mat[8],
          a21 = mat[9],
          a22 = mat[10],
          a23 = mat[11];
  
      if (!dest) {
          dest = mat;
      } else if (mat !== dest) { // If the source and destination differ, copy the unchanged rows
          dest[0] = mat[0];
          dest[1] = mat[1];
          dest[2] = mat[2];
          dest[3] = mat[3];
  
          dest[12] = mat[12];
          dest[13] = mat[13];
          dest[14] = mat[14];
          dest[15] = mat[15];
      }
  
      // Perform axis-specific matrix multiplication
      dest[4] = a10 * c + a20 * s;
      dest[5] = a11 * c + a21 * s;
      dest[6] = a12 * c + a22 * s;
      dest[7] = a13 * c + a23 * s;
  
      dest[8] = a10 * -s + a20 * c;
      dest[9] = a11 * -s + a21 * c;
      dest[10] = a12 * -s + a22 * c;
      dest[11] = a13 * -s + a23 * c;
      return dest;
  };
  
  /**
   * Rotates a matrix by the given angle around the Y axis
   *
   * @param {mat4} mat mat4 to rotate
   * @param {number} angle Angle (in radians) to rotate
   * @param {mat4} [dest] mat4 receiving operation result. If not specified result is written to mat
   *
   * @returns {mat4} dest if specified, mat otherwise
   */
  mat4.rotateY = function (mat, angle, dest) {
      var s = Math.sin(angle),
          c = Math.cos(angle),
          a00 = mat[0],
          a01 = mat[1],
          a02 = mat[2],
          a03 = mat[3],
          a20 = mat[8],
          a21 = mat[9],
          a22 = mat[10],
          a23 = mat[11];
  
      if (!dest) {
          dest = mat;
      } else if (mat !== dest) { // If the source and destination differ, copy the unchanged rows
          dest[4] = mat[4];
          dest[5] = mat[5];
          dest[6] = mat[6];
          dest[7] = mat[7];
  
          dest[12] = mat[12];
          dest[13] = mat[13];
          dest[14] = mat[14];
          dest[15] = mat[15];
      }
  
      // Perform axis-specific matrix multiplication
      dest[0] = a00 * c + a20 * -s;
      dest[1] = a01 * c + a21 * -s;
      dest[2] = a02 * c + a22 * -s;
      dest[3] = a03 * c + a23 * -s;
  
      dest[8] = a00 * s + a20 * c;
      dest[9] = a01 * s + a21 * c;
      dest[10] = a02 * s + a22 * c;
      dest[11] = a03 * s + a23 * c;
      return dest;
  };
  
  /**
   * Rotates a matrix by the given angle around the Z axis
   *
   * @param {mat4} mat mat4 to rotate
   * @param {number} angle Angle (in radians) to rotate
   * @param {mat4} [dest] mat4 receiving operation result. If not specified result is written to mat
   *
   * @returns {mat4} dest if specified, mat otherwise
   */
  mat4.rotateZ = function (mat, angle, dest) {
      var s = Math.sin(angle),
          c = Math.cos(angle),
          a00 = mat[0],
          a01 = mat[1],
          a02 = mat[2],
          a03 = mat[3],
          a10 = mat[4],
          a11 = mat[5],
          a12 = mat[6],
          a13 = mat[7];
  
      if (!dest) {
          dest = mat;
      } else if (mat !== dest) { // If the source and destination differ, copy the unchanged last row
          dest[8] = mat[8];
          dest[9] = mat[9];
          dest[10] = mat[10];
          dest[11] = mat[11];
  
          dest[12] = mat[12];
          dest[13] = mat[13];
          dest[14] = mat[14];
          dest[15] = mat[15];
      }
  
      // Perform axis-specific matrix multiplication
      dest[0] = a00 * c + a10 * s;
      dest[1] = a01 * c + a11 * s;
      dest[2] = a02 * c + a12 * s;
      dest[3] = a03 * c + a13 * s;
  
      dest[4] = a00 * -s + a10 * c;
      dest[5] = a01 * -s + a11 * c;
      dest[6] = a02 * -s + a12 * c;
      dest[7] = a03 * -s + a13 * c;
  
      return dest;
  };
  
  /**
   * Generates a frustum matrix with the given bounds
   *
   * @param {number} left Left bound of the frustum
   * @param {number} right Right bound of the frustum
   * @param {number} bottom Bottom bound of the frustum
   * @param {number} top Top bound of the frustum
   * @param {number} near Near bound of the frustum
   * @param {number} far Far bound of the frustum
   * @param {mat4} [dest] mat4 frustum matrix will be written into
   *
   * @returns {mat4} dest if specified, a new mat4 otherwise
   */
  mat4.frustum = function (left, right, bottom, top, near, far, dest) {
      if (!dest) { dest = mat4.create(); }
      var rl = (right - left),
          tb = (top - bottom),
          fn = (far - near);
      dest[0] = (near * 2) / rl;
      dest[1] = 0;
      dest[2] = 0;
      dest[3] = 0;
      dest[4] = 0;
      dest[5] = (near * 2) / tb;
      dest[6] = 0;
      dest[7] = 0;
      dest[8] = (right + left) / rl;
      dest[9] = (top + bottom) / tb;
      dest[10] = -(far + near) / fn;
      dest[11] = -1;
      dest[12] = 0;
      dest[13] = 0;
      dest[14] = -(far * near * 2) / fn;
      dest[15] = 0;
      return dest;
  };
  
  /**
   * Generates a perspective projection matrix with the given bounds
   *
   * @param {number} fovy Vertical field of view
   * @param {number} aspect Aspect ratio. typically viewport width/height
   * @param {number} near Near bound of the frustum
   * @param {number} far Far bound of the frustum
   * @param {mat4} [dest] mat4 frustum matrix will be written into
   *
   * @returns {mat4} dest if specified, a new mat4 otherwise
   */
  mat4.perspective = function (fovy, aspect, near, far, dest) {
      var top = near * Math.tan(fovy * Math.PI / 360.0),
          right = top * aspect;
      return mat4.frustum(-right, right, -top, top, near, far, dest);
  };
  
  /**
   * Generates a orthogonal projection matrix with the given bounds
   *
   * @param {number} left Left bound of the frustum
   * @param {number} right Right bound of the frustum
   * @param {number} bottom Bottom bound of the frustum
   * @param {number} top Top bound of the frustum
   * @param {number} near Near bound of the frustum
   * @param {number} far Far bound of the frustum
   * @param {mat4} [dest] mat4 frustum matrix will be written into
   *
   * @returns {mat4} dest if specified, a new mat4 otherwise
   */
  mat4.ortho = function (left, right, bottom, top, near, far, dest) {
      if (!dest) { dest = mat4.create(); }
      var rl = (right - left),
          tb = (top - bottom),
          fn = (far - near);
      dest[0] = 2 / rl;
      dest[1] = 0;
      dest[2] = 0;
      dest[3] = 0;
      dest[4] = 0;
      dest[5] = 2 / tb;
      dest[6] = 0;
      dest[7] = 0;
      dest[8] = 0;
      dest[9] = 0;
      dest[10] = -2 / fn;
      dest[11] = 0;
      dest[12] = -(left + right) / rl;
      dest[13] = -(top + bottom) / tb;
      dest[14] = -(far + near) / fn;
      dest[15] = 1;
      return dest;
  };
  
  /**
   * Generates a look-at matrix with the given eye position, focal point, and up axis
   *
   * @param {vec3} eye Position of the viewer
   * @param {vec3} center Point the viewer is looking at
   * @param {vec3} up vec3 pointing "up"
   * @param {mat4} [dest] mat4 frustum matrix will be written into
   *
   * @returns {mat4} dest if specified, a new mat4 otherwise
   */
  mat4.lookAt = function (eye, center, up, dest) {
      if (!dest) { dest = mat4.create(); }
  
      var x0, x1, x2, y0, y1, y2, z0, z1, z2, len,
          eyex = eye[0],
          eyey = eye[1],
          eyez = eye[2],
          upx = up[0],
          upy = up[1],
          upz = up[2],
          centerx = center[0],
          centery = center[1],
          centerz = center[2];
  
      if (eyex === centerx && eyey === centery && eyez === centerz) {
          return mat4.identity(dest);
      }
  
      //vec3.direction(eye, center, z);
      z0 = eyex - centerx;
      z1 = eyey - centery;
      z2 = eyez - centerz;
  
      // normalize (no check needed for 0 because of early return)
      len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);
      z0 *= len;
      z1 *= len;
      z2 *= len;
  
      //vec3.normalize(vec3.cross(up, z, x));
      x0 = upy * z2 - upz * z1;
      x1 = upz * z0 - upx * z2;
      x2 = upx * z1 - upy * z0;
      len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);
      if (!len) {
          x0 = 0;
          x1 = 0;
          x2 = 0;
      } else {
          len = 1 / len;
          x0 *= len;
          x1 *= len;
          x2 *= len;
      }
  
      //vec3.normalize(vec3.cross(z, x, y));
      y0 = z1 * x2 - z2 * x1;
      y1 = z2 * x0 - z0 * x2;
      y2 = z0 * x1 - z1 * x0;
  
      len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);
      if (!len) {
          y0 = 0;
          y1 = 0;
          y2 = 0;
      } else {
          len = 1 / len;
          y0 *= len;
          y1 *= len;
          y2 *= len;
      }
  
      dest[0] = x0;
      dest[1] = y0;
      dest[2] = z0;
      dest[3] = 0;
      dest[4] = x1;
      dest[5] = y1;
      dest[6] = z1;
      dest[7] = 0;
      dest[8] = x2;
      dest[9] = y2;
      dest[10] = z2;
      dest[11] = 0;
      dest[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);
      dest[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);
      dest[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);
      dest[15] = 1;
  
      return dest;
  };
  
  /**
   * Creates a matrix from a quaternion rotation and vector translation
   * This is equivalent to (but much faster than):
   *
   *     mat4.identity(dest);
   *     mat4.translate(dest, vec);
   *     var quatMat = mat4.create();
   *     quat4.toMat4(quat, quatMat);
   *     mat4.multiply(dest, quatMat);
   *
   * @param {quat4} quat Rotation quaternion
   * @param {vec3} vec Translation vector
   * @param {mat4} [dest] mat4 receiving operation result. If not specified result is written to a new mat4
   *
   * @returns {mat4} dest if specified, a new mat4 otherwise
   */
  mat4.fromRotationTranslation = function (quat, vec, dest) {
      if (!dest) { dest = mat4.create(); }
  
      // Quaternion math
      var x = quat[0], y = quat[1], z = quat[2], w = quat[3],
          x2 = x + x,
          y2 = y + y,
          z2 = z + z,
  
          xx = x * x2,
          xy = x * y2,
          xz = x * z2,
          yy = y * y2,
          yz = y * z2,
          zz = z * z2,
          wx = w * x2,
          wy = w * y2,
          wz = w * z2;
  
      dest[0] = 1 - (yy + zz);
      dest[1] = xy + wz;
      dest[2] = xz - wy;
      dest[3] = 0;
      dest[4] = xy - wz;
      dest[5] = 1 - (xx + zz);
      dest[6] = yz + wx;
      dest[7] = 0;
      dest[8] = xz + wy;
      dest[9] = yz - wx;
      dest[10] = 1 - (xx + yy);
      dest[11] = 0;
      dest[12] = vec[0];
      dest[13] = vec[1];
      dest[14] = vec[2];
      dest[15] = 1;
      
      return dest;
  };
  
  /**
   * Returns a string representation of a mat4
   *
   * @param {mat4} mat mat4 to represent as a string
   *
   * @returns {string} String representation of mat
   */
  mat4.str = function (mat) {
      return '[' + mat[0] + ', ' + mat[1] + ', ' + mat[2] + ', ' + mat[3] +
          ', ' + mat[4] + ', ' + mat[5] + ', ' + mat[6] + ', ' + mat[7] +
          ', ' + mat[8] + ', ' + mat[9] + ', ' + mat[10] + ', ' + mat[11] +
          ', ' + mat[12] + ', ' + mat[13] + ', ' + mat[14] + ', ' + mat[15] + ']';
  };
  
  /*
   * quat4
   */
  
  /**
   * Creates a new instance of a quat4 using the default array type
   * Any javascript array containing at least 4 numeric elements can serve as a quat4
   *
   * @param {quat4} [quat] quat4 containing values to initialize with
   *
   * @returns {quat4} New quat4
   */
  quat4.create = function (quat) {
      var dest = new MatrixArray(4);
  
      if (quat) {
          dest[0] = quat[0];
          dest[1] = quat[1];
          dest[2] = quat[2];
          dest[3] = quat[3];
      }
  
      return dest;
  };
  
  /**
   * Copies the values of one quat4 to another
   *
   * @param {quat4} quat quat4 containing values to copy
   * @param {quat4} dest quat4 receiving copied values
   *
   * @returns {quat4} dest
   */
  quat4.set = function (quat, dest) {
      dest[0] = quat[0];
      dest[1] = quat[1];
      dest[2] = quat[2];
      dest[3] = quat[3];
  
      return dest;
  };
  
  /**
   * Calculates the W component of a quat4 from the X, Y, and Z components.
   * Assumes that quaternion is 1 unit in length. 
   * Any existing W component will be ignored. 
   *
   * @param {quat4} quat quat4 to calculate W component of
   * @param {quat4} [dest] quat4 receiving calculated values. If not specified result is written to quat
   *
   * @returns {quat4} dest if specified, quat otherwise
   */
  quat4.calculateW = function (quat, dest) {
      var x = quat[0], y = quat[1], z = quat[2];
  
      if (!dest || quat === dest) {
          quat[3] = -Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));
          return quat;
      }
      dest[0] = x;
      dest[1] = y;
      dest[2] = z;
      dest[3] = -Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));
      return dest;
  };
  
  /**
   * Calculates the dot product of two quaternions
   *
   * @param {quat4} quat First operand
   * @param {quat4} quat2 Second operand
   *
   * @return {number} Dot product of quat and quat2
   */
  quat4.dot = function(quat, quat2){
      return quat[0]*quat2[0] + quat[1]*quat2[1] + quat[2]*quat2[2] + quat[3]*quat2[3];
  };
  
  /**
   * Calculates the inverse of a quat4
   *
   * @param {quat4} quat quat4 to calculate inverse of
   * @param {quat4} [dest] quat4 receiving inverse values. If not specified result is written to quat
   *
   * @returns {quat4} dest if specified, quat otherwise
   */
  quat4.inverse = function(quat, dest) {
      var q0 = quat[0], q1 = quat[1], q2 = quat[2], q3 = quat[3],
          dot = q0*q0 + q1*q1 + q2*q2 + q3*q3,
          invDot = dot ? 1.0/dot : 0;
      
      // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0
      
      if(!dest || quat === dest) {
          quat[0] *= -invDot;
          quat[1] *= -invDot;
          quat[2] *= -invDot;
          quat[3] *= invDot;
          return quat;
      }
      dest[0] = -quat[0]*invDot;
      dest[1] = -quat[1]*invDot;
      dest[2] = -quat[2]*invDot;
      dest[3] = quat[3]*invDot;
      return dest;
  };
  
  
  /**
   * Calculates the conjugate of a quat4
   * If the quaternion is normalized, this function is faster than quat4.inverse and produces the same result.
   *
   * @param {quat4} quat quat4 to calculate conjugate of
   * @param {quat4} [dest] quat4 receiving conjugate values. If not specified result is written to quat
   *
   * @returns {quat4} dest if specified, quat otherwise
   */
  quat4.conjugate = function (quat, dest) {
      if (!dest || quat === dest) {
          quat[0] *= -1;
          quat[1] *= -1;
          quat[2] *= -1;
          return quat;
      }
      dest[0] = -quat[0];
      dest[1] = -quat[1];
      dest[2] = -quat[2];
      dest[3] = quat[3];
      return dest;
  };
  
  /**
   * Calculates the length of a quat4
   *
   * Params:
   * @param {quat4} quat quat4 to calculate length of
   *
   * @returns Length of quat
   */
  quat4.length = function (quat) {
      var x = quat[0], y = quat[1], z = quat[2], w = quat[3];
      return Math.sqrt(x * x + y * y + z * z + w * w);
  };
  
  /**
   * Generates a unit quaternion of the same direction as the provided quat4
   * If quaternion length is 0, returns [0, 0, 0, 0]
   *
   * @param {quat4} quat quat4 to normalize
   * @param {quat4} [dest] quat4 receiving operation result. If not specified result is written to quat
   *
   * @returns {quat4} dest if specified, quat otherwise
   */
  quat4.normalize = function (quat, dest) {
      if (!dest) { dest = quat; }
  
      var x = quat[0], y = quat[1], z = quat[2], w = quat[3],
          len = Math.sqrt(x * x + y * y + z * z + w * w);
      if (len === 0) {
          dest[0] = 0;
          dest[1] = 0;
          dest[2] = 0;
          dest[3] = 0;
          return dest;
      }
      len = 1 / len;
      dest[0] = x * len;
      dest[1] = y * len;
      dest[2] = z * len;
      dest[3] = w * len;
  
      return dest;
  };
  
  /**
   * Performs quaternion addition
   *
   * @param {quat4} quat First operand
   * @param {quat4} quat2 Second operand
   * @param {quat4} [dest] quat4 receiving operation result. If not specified result is written to quat
   *
   * @returns {quat4} dest if specified, quat otherwise
   */
  quat4.add = function (quat, quat2, dest) {
      if(!dest || quat === dest) {
          quat[0] += quat2[0];
          quat[1] += quat2[1];
          quat[2] += quat2[2];
          quat[3] += quat2[3];
          return quat;
      }
      dest[0] = quat[0]+quat2[0];
      dest[1] = quat[1]+quat2[1];
      dest[2] = quat[2]+quat2[2];
      dest[3] = quat[3]+quat2[3];
      return dest;
  };
  
  /**
   * Performs a quaternion multiplication
   *
   * @param {quat4} quat First operand
   * @param {quat4} quat2 Second operand
   * @param {quat4} [dest] quat4 receiving operation result. If not specified result is written to quat
   *
   * @returns {quat4} dest if specified, quat otherwise
   */
  quat4.multiply = function (quat, quat2, dest) {
      if (!dest) { dest = quat; }
  
      var qax = quat[0], qay = quat[1], qaz = quat[2], qaw = quat[3],
          qbx = quat2[0], qby = quat2[1], qbz = quat2[2], qbw = quat2[3];
  
      dest[0] = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;
      dest[1] = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;
      dest[2] = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;
      dest[3] = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;
  
      return dest;
  };
  
  /**
   * Transforms a vec3 with the given quaternion
   *
   * @param {quat4} quat quat4 to transform the vector with
   * @param {vec3} vec vec3 to transform
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns dest if specified, vec otherwise
   */
  quat4.multiplyVec3 = function (quat, vec, dest) {
      if (!dest) { dest = vec; }
  
      var x = vec[0], y = vec[1], z = vec[2],
          qx = quat[0], qy = quat[1], qz = quat[2], qw = quat[3],
  
          // calculate quat * vec
          ix = qw * x + qy * z - qz * y,
          iy = qw * y + qz * x - qx * z,
          iz = qw * z + qx * y - qy * x,
          iw = -qx * x - qy * y - qz * z;
  
      // calculate result * inverse quat
      dest[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;
      dest[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;
      dest[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;
  
      return dest;
  };
  
  /**
   * Multiplies the components of a quaternion by a scalar value
   *
   * @param {quat4} quat to scale
   * @param {number} val Value to scale by
   * @param {quat4} [dest] quat4 receiving operation result. If not specified result is written to quat
   *
   * @returns {quat4} dest if specified, quat otherwise
   */
  quat4.scale = function (quat, val, dest) {
      if(!dest || quat === dest) {
          quat[0] *= val;
          quat[1] *= val;
          quat[2] *= val;
          quat[3] *= val;
          return quat;
      }
      dest[0] = quat[0]*val;
      dest[1] = quat[1]*val;
      dest[2] = quat[2]*val;
      dest[3] = quat[3]*val;
      return dest;
  };
  
  /**
   * Calculates a 3x3 matrix from the given quat4
   *
   * @param {quat4} quat quat4 to create matrix from
   * @param {mat3} [dest] mat3 receiving operation result
   *
   * @returns {mat3} dest if specified, a new mat3 otherwise
   */
  quat4.toMat3 = function (quat, dest) {
      if (!dest) { dest = mat3.create(); }
  
      var x = quat[0], y = quat[1], z = quat[2], w = quat[3],
          x2 = x + x,
          y2 = y + y,
          z2 = z + z,
  
          xx = x * x2,
          xy = x * y2,
          xz = x * z2,
          yy = y * y2,
          yz = y * z2,
          zz = z * z2,
          wx = w * x2,
          wy = w * y2,
          wz = w * z2;
  
      dest[0] = 1 - (yy + zz);
      dest[1] = xy + wz;
      dest[2] = xz - wy;
  
      dest[3] = xy - wz;
      dest[4] = 1 - (xx + zz);
      dest[5] = yz + wx;
  
      dest[6] = xz + wy;
      dest[7] = yz - wx;
      dest[8] = 1 - (xx + yy);
  
      return dest;
  };
  
  /**
   * Calculates a 4x4 matrix from the given quat4
   *
   * @param {quat4} quat quat4 to create matrix from
   * @param {mat4} [dest] mat4 receiving operation result
   *
   * @returns {mat4} dest if specified, a new mat4 otherwise
   */
  quat4.toMat4 = function (quat, dest) {
      if (!dest) { dest = mat4.create(); }
  
      var x = quat[0], y = quat[1], z = quat[2], w = quat[3],
          x2 = x + x,
          y2 = y + y,
          z2 = z + z,
  
          xx = x * x2,
          xy = x * y2,
          xz = x * z2,
          yy = y * y2,
          yz = y * z2,
          zz = z * z2,
          wx = w * x2,
          wy = w * y2,
          wz = w * z2;
  
      dest[0] = 1 - (yy + zz);
      dest[1] = xy + wz;
      dest[2] = xz - wy;
      dest[3] = 0;
  
      dest[4] = xy - wz;
      dest[5] = 1 - (xx + zz);
      dest[6] = yz + wx;
      dest[7] = 0;
  
      dest[8] = xz + wy;
      dest[9] = yz - wx;
      dest[10] = 1 - (xx + yy);
      dest[11] = 0;
  
      dest[12] = 0;
      dest[13] = 0;
      dest[14] = 0;
      dest[15] = 1;
  
      return dest;
  };
  
  /**
   * Performs a spherical linear interpolation between two quat4
   *
   * @param {quat4} quat First quaternion
   * @param {quat4} quat2 Second quaternion
   * @param {number} slerp Interpolation amount between the two inputs
   * @param {quat4} [dest] quat4 receiving operation result. If not specified result is written to quat
   *
   * @returns {quat4} dest if specified, quat otherwise
   */
  quat4.slerp = function (quat, quat2, slerp, dest) {
      if (!dest) { dest = quat; }
  
      var cosHalfTheta = quat[0] * quat2[0] + quat[1] * quat2[1] + quat[2] * quat2[2] + quat[3] * quat2[3],
          halfTheta,
          sinHalfTheta,
          ratioA,
          ratioB;
  
      if (Math.abs(cosHalfTheta) >= 1.0) {
          if (dest !== quat) {
              dest[0] = quat[0];
              dest[1] = quat[1];
              dest[2] = quat[2];
              dest[3] = quat[3];
          }
          return dest;
      }
  
      halfTheta = Math.acos(cosHalfTheta);
      sinHalfTheta = Math.sqrt(1.0 - cosHalfTheta * cosHalfTheta);
  
      if (Math.abs(sinHalfTheta) < 0.001) {
          dest[0] = (quat[0] * 0.5 + quat2[0] * 0.5);
          dest[1] = (quat[1] * 0.5 + quat2[1] * 0.5);
          dest[2] = (quat[2] * 0.5 + quat2[2] * 0.5);
          dest[3] = (quat[3] * 0.5 + quat2[3] * 0.5);
          return dest;
      }
  
      ratioA = Math.sin((1 - slerp) * halfTheta) / sinHalfTheta;
      ratioB = Math.sin(slerp * halfTheta) / sinHalfTheta;
  
      dest[0] = (quat[0] * ratioA + quat2[0] * ratioB);
      dest[1] = (quat[1] * ratioA + quat2[1] * ratioB);
      dest[2] = (quat[2] * ratioA + quat2[2] * ratioB);
      dest[3] = (quat[3] * ratioA + quat2[3] * ratioB);
  
      return dest;
  };
  
  /**
   * Returns a string representation of a quaternion
   *
   * @param {quat4} quat quat4 to represent as a string
   *
   * @returns {string} String representation of quat
   */
  quat4.str = function (quat) {
      return '[' + quat[0] + ', ' + quat[1] + ', ' + quat[2] + ', ' + quat[3] + ']';
  };
  
  
  return {
    vec3: vec3,
    mat3: mat3,
    mat4: mat4,
    quat4: quat4
  };
  
  })();
  
  ;
  var GLImmediateSetup={};
  
  function _glEnable(x0) { GLctx.enable(x0) }
  
  function _glDisable(x0) { GLctx.disable(x0) }
  
  function _glIsEnabled(x0) { return GLctx.isEnabled(x0) }
  
  function _glGetBooleanv(name_, p) {
      return GL.get(name_, p, 'Boolean');
    }
  
  function _glGetIntegerv(name_, p) {
      return GL.get(name_, p, 'Integer');
    }
  
  function _glGetString(name_) {
      if (GL.stringCache[name_]) return GL.stringCache[name_];
      var ret; 
      switch(name_) {
        case 0x1F00 /* GL_VENDOR */:
        case 0x1F01 /* GL_RENDERER */:
        case 0x1F02 /* GL_VERSION */:
          ret = allocate(intArrayFromString(GLctx.getParameter(name_)), 'i8', ALLOC_NORMAL);
          break;
        case 0x1F03 /* GL_EXTENSIONS */:
          var exts = GLctx.getSupportedExtensions();
          var gl_exts = [];
          for (i in exts) {
            gl_exts.push(exts[i]);
            gl_exts.push("GL_" + exts[i]);
          }
          ret = allocate(intArrayFromString(gl_exts.join(' ')), 'i8', ALLOC_NORMAL);
          break;
        case 0x8B8C /* GL_SHADING_LANGUAGE_VERSION */:
          ret = allocate(intArrayFromString('OpenGL ES GLSL 1.00 (WebGL)'), 'i8', ALLOC_NORMAL);
          break;
        default:
          GL.recordError(0x0500/*GL_INVALID_ENUM*/);
          return 0;
      }
      GL.stringCache[name_] = ret;
      return ret;
    }
  
  function _glCreateShader(shaderType) {
      var id = GL.getNewId(GL.shaders);
      GL.shaders[id] = GLctx.createShader(shaderType);
      return id;
    }
  
  function _glShaderSource(shader, count, string, length) {
      var source = GL.getSource(shader, count, string, length);
      GLctx.shaderSource(GL.shaders[shader], source);
    }
  
  function _glCompileShader(shader) {
      GLctx.compileShader(GL.shaders[shader]);
    }
  
  function _glAttachShader(program, shader) {
      GLctx.attachShader(GL.programs[program],
                              GL.shaders[shader]);
    }
  
  function _glDetachShader(program, shader) {
      GLctx.detachShader(GL.programs[program],
                              GL.shaders[shader]);
    }
  
  function _glUseProgram(program) {
      GLctx.useProgram(program ? GL.programs[program] : null);
    }
  
  function _glDeleteProgram(program) {
      var program = GL.programs[program];
      GLctx.deleteProgram(program);
      program.name = 0;
      GL.programs[program] = null;
      GL.programInfos[program] = null;
    }
  
  function _glBindAttribLocation(program, index, name) {
      name = Pointer_stringify(name);
      GLctx.bindAttribLocation(GL.programs[program], index, name);
    }
  
  function _glLinkProgram(program) {
      GLctx.linkProgram(GL.programs[program]);
      GL.programInfos[program] = null; // uniforms no longer keep the same names after linking
      GL.populateUniformTable(program);
    }
  
  function _glBindBuffer(target, buffer) {
      var bufferObj = buffer ? GL.buffers[buffer] : null;
  
      if (target == GLctx.ARRAY_BUFFER) {
        GLImmediate.lastArrayBuffer = GL.currArrayBuffer = buffer;
      } else if (target == GLctx.ELEMENT_ARRAY_BUFFER) {
        GL.currElementArrayBuffer = buffer;
      }
  
      GLctx.bindBuffer(target, bufferObj);
    }
  
  function _glGetFloatv(name_, p) {
      return GL.get(name_, p, 'Float');
    }
  
  function _glHint(x0, x1) { GLctx.hint(x0, x1) }
  
  function _glEnableVertexAttribArray(index) {
      GLctx.enableVertexAttribArray(index);
    }
  
  function _glDisableVertexAttribArray(index) {
      GLctx.disableVertexAttribArray(index);
    }
  
  function _glVertexAttribPointer(index, size, type, normalized, stride, ptr) {
      GLctx.vertexAttribPointer(index, size, type, normalized, stride, ptr);
    }
  
  function _glActiveTexture(x0) { GLctx.activeTexture(x0) }var GLEmulation={fogStart:0,fogEnd:1,fogDensity:1,fogColor:null,fogMode:2048,fogEnabled:false,vaos:[],currentVao:null,enabledVertexAttribArrays:{},hasRunInit:false,init:function () {
        // Do not activate immediate/emulation code (e.g. replace glDrawElements) when in FULL_ES2 mode.
        // We do not need full emulation, we instead emulate client-side arrays etc. in FULL_ES2 code in
        // a straightforward manner, and avoid not having a bound buffer be ambiguous between es2 emulation
        // code and legacy gl emulation code.
  
        if (GLEmulation.hasRunInit) {
          return;
        }
        GLEmulation.hasRunInit = true;
  
        GLEmulation.fogColor = new Float32Array(4);
  
        // Add some emulation workarounds
        Module.printErr('WARNING: using emscripten GL emulation. This is a collection of limited workarounds, do not expect it to work.');
        Module.printErr('WARNING: using emscripten GL emulation unsafe opts. If weirdness happens, try -s GL_UNSAFE_OPTS=0');
  
        // XXX some of the capabilities we don't support may lead to incorrect rendering, if we do not emulate them in shaders
        var validCapabilities = {
          0x0B44: 1, // GL_CULL_FACE
          0x0BE2: 1, // GL_BLEND
          0x0BD0: 1, // GL_DITHER,
          0x0B90: 1, // GL_STENCIL_TEST
          0x0B71: 1, // GL_DEPTH_TEST
          0x0C11: 1, // GL_SCISSOR_TEST
          0x8037: 1, // GL_POLYGON_OFFSET_FILL
          0x809E: 1, // GL_SAMPLE_ALPHA_TO_COVERAGE
          0x80A0: 1  // GL_SAMPLE_COVERAGE
        };
  
        var glEnable = _glEnable;
        _glEnable = _emscripten_glEnable = function _glEnable(cap) {
          // Clean up the renderer on any change to the rendering state. The optimization of
          // skipping renderer setup is aimed at the case of multiple glDraw* right after each other
          if (GLImmediate.lastRenderer) GLImmediate.lastRenderer.cleanup();
          if (cap == 0x0B60 /* GL_FOG */) {
            if (GLEmulation.fogEnabled != true) {
              GLImmediate.currentRenderer = null; // Fog parameter is part of the FFP shader state, we must re-lookup the renderer to use.
              GLEmulation.fogEnabled = true;
            }
            return;
          } else if (cap == 0x0de1 /* GL_TEXTURE_2D */) {
            // XXX not according to spec, and not in desktop GL, but works in some GLES1.x apparently, so support
            // it by forwarding to glEnableClientState
            /* Actually, let's not, for now. (This sounds exceedingly broken)
             * This is in gl_ps_workaround2.c.
            _glEnableClientState(cap);
            */
            return;
          } else if (!(cap in validCapabilities)) {
            return;
          }
          glEnable(cap);
        };
  
        var glDisable = _glDisable;
        _glDisable = _emscripten_glDisable = function _glDisable(cap) {
          if (GLImmediate.lastRenderer) GLImmediate.lastRenderer.cleanup();
          if (cap == 0x0B60 /* GL_FOG */) {
            if (GLEmulation.fogEnabled != false) {
              GLImmediate.currentRenderer = null; // Fog parameter is part of the FFP shader state, we must re-lookup the renderer to use.
              GLEmulation.fogEnabled = false;
            }
            return;
          } else if (cap == 0x0de1 /* GL_TEXTURE_2D */) {
            // XXX not according to spec, and not in desktop GL, but works in some GLES1.x apparently, so support
            // it by forwarding to glDisableClientState
            /* Actually, let's not, for now. (This sounds exceedingly broken)
             * This is in gl_ps_workaround2.c.
            _glDisableClientState(cap);
            */
            return;
          } else if (!(cap in validCapabilities)) {
            return;
          }
          glDisable(cap);
        };
        _glIsEnabled = _emscripten_glIsEnabled = function _glIsEnabled(cap) {
          if (cap == 0x0B60 /* GL_FOG */) {
            return GLEmulation.fogEnabled ? 1 : 0;
          } else if (!(cap in validCapabilities)) {
            return 0;
          }
          return GLctx.isEnabled(cap);
        };
  
        var glGetBooleanv = _glGetBooleanv;
        _glGetBooleanv = _emscripten_glGetBooleanv = function _glGetBooleanv(pname, p) {
          var attrib = GLEmulation.getAttributeFromCapability(pname);
          if (attrib !== null) {
            var result = GLImmediate.enabledClientAttributes[attrib];
            HEAP8[((p)>>0)]=result === true ? 1 : 0;
            return;
          }
          glGetBooleanv(pname, p);
        };
  
        var glGetIntegerv = _glGetIntegerv;
        _glGetIntegerv = _emscripten_glGetIntegerv = function _glGetIntegerv(pname, params) {
          switch (pname) {
            case 0x84E2: pname = GLctx.MAX_TEXTURE_IMAGE_UNITS /* fake it */; break; // GL_MAX_TEXTURE_UNITS
            case 0x8B4A: { // GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB
              var result = GLctx.getParameter(GLctx.MAX_VERTEX_UNIFORM_VECTORS);
              HEAP32[((params)>>2)]=result*4; // GLES gives num of 4-element vectors, GL wants individual components, so multiply
              return;
            }
            case 0x8B49: { // GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB
              var result = GLctx.getParameter(GLctx.MAX_FRAGMENT_UNIFORM_VECTORS);
              HEAP32[((params)>>2)]=result*4; // GLES gives num of 4-element vectors, GL wants individual components, so multiply
              return;
            }
            case 0x8B4B: { // GL_MAX_VARYING_FLOATS_ARB
              var result = GLctx.getParameter(GLctx.MAX_VARYING_VECTORS);
              HEAP32[((params)>>2)]=result*4; // GLES gives num of 4-element vectors, GL wants individual components, so multiply
              return;
            }
            case 0x8871: pname = GLctx.MAX_COMBINED_TEXTURE_IMAGE_UNITS /* close enough */; break; // GL_MAX_TEXTURE_COORDS
            case 0x807A: { // GL_VERTEX_ARRAY_SIZE
              var attribute = GLImmediate.clientAttributes[GLImmediate.VERTEX];
              HEAP32[((params)>>2)]=attribute ? attribute.size : 0;
              return;
            }
            case 0x807B: { // GL_VERTEX_ARRAY_TYPE
              var attribute = GLImmediate.clientAttributes[GLImmediate.VERTEX];
              HEAP32[((params)>>2)]=attribute ? attribute.type : 0;
              return;
            }
            case 0x807C: { // GL_VERTEX_ARRAY_STRIDE
              var attribute = GLImmediate.clientAttributes[GLImmediate.VERTEX];
              HEAP32[((params)>>2)]=attribute ? attribute.stride : 0;
              return;
            }
            case 0x8081: { // GL_COLOR_ARRAY_SIZE
              var attribute = GLImmediate.clientAttributes[GLImmediate.COLOR];
              HEAP32[((params)>>2)]=attribute ? attribute.size : 0;
              return;
            }
            case 0x8082: { // GL_COLOR_ARRAY_TYPE
              var attribute = GLImmediate.clientAttributes[GLImmediate.COLOR];
              HEAP32[((params)>>2)]=attribute ? attribute.type : 0;
              return;
            }
            case 0x8083: { // GL_COLOR_ARRAY_STRIDE
              var attribute = GLImmediate.clientAttributes[GLImmediate.COLOR];
              HEAP32[((params)>>2)]=attribute ? attribute.stride : 0;
              return;
            }
            case 0x8088: { // GL_TEXTURE_COORD_ARRAY_SIZE
              var attribute = GLImmediate.clientAttributes[GLImmediate.TEXTURE0 + GLImmediate.clientActiveTexture];
              HEAP32[((params)>>2)]=attribute ? attribute.size : 0;
              return;
            }
            case 0x8089: { // GL_TEXTURE_COORD_ARRAY_TYPE
              var attribute = GLImmediate.clientAttributes[GLImmediate.TEXTURE0 + GLImmediate.clientActiveTexture];
              HEAP32[((params)>>2)]=attribute ? attribute.type : 0;
              return;
            }
            case 0x808A: { // GL_TEXTURE_COORD_ARRAY_STRIDE
              var attribute = GLImmediate.clientAttributes[GLImmediate.TEXTURE0 + GLImmediate.clientActiveTexture];
              HEAP32[((params)>>2)]=attribute ? attribute.stride : 0;
              return;
            }
          }
          glGetIntegerv(pname, params);
        };
  
        var glGetString = _glGetString;
        _glGetString = _emscripten_glGetString = function _glGetString(name_) {
          if (GL.stringCache[name_]) return GL.stringCache[name_];
          switch(name_) {
            case 0x1F03 /* GL_EXTENSIONS */: // Add various extensions that we can support
              var ret = allocate(intArrayFromString(GLctx.getSupportedExtensions().join(' ') +
                     ' GL_EXT_texture_env_combine GL_ARB_texture_env_crossbar GL_ATI_texture_env_combine3 GL_NV_texture_env_combine4 GL_EXT_texture_env_dot3 GL_ARB_multitexture GL_ARB_vertex_buffer_object GL_EXT_framebuffer_object GL_ARB_vertex_program GL_ARB_fragment_program GL_ARB_shading_language_100 GL_ARB_shader_objects GL_ARB_vertex_shader GL_ARB_fragment_shader GL_ARB_texture_cube_map GL_EXT_draw_range_elements' +
                     (GL.compressionExt ? ' GL_ARB_texture_compression GL_EXT_texture_compression_s3tc' : '') +
                     (GL.anisotropicExt ? ' GL_EXT_texture_filter_anisotropic' : '')
              ), 'i8', ALLOC_NORMAL);
              GL.stringCache[name_] = ret;
              return ret;
          }
          return glGetString(name_);
        };
  
        // Do some automatic rewriting to work around GLSL differences. Note that this must be done in
        // tandem with the rest of the program, by itself it cannot suffice.
        // Note that we need to remember shader types for this rewriting, saving sources makes it easier to debug.
        GL.shaderInfos = {};
        var glCreateShader = _glCreateShader;
        _glCreateShader = _emscripten_glCreateShader = function _glCreateShader(shaderType) {
          var id = glCreateShader(shaderType);
          GL.shaderInfos[id] = {
            type: shaderType,
            ftransform: false
          };
          return id;
        };
  
        function ensurePrecision(source) {
          if (!/precision +(low|medium|high)p +float *;/.test(source)) {
            source = 'precision mediump float;\n' + source;
          }
          return source;
        }
  
        var glShaderSource = _glShaderSource;
        _glShaderSource = _emscripten_glShaderSource = function _glShaderSource(shader, count, string, length) {
          var source = GL.getSource(shader, count, string, length);
          // XXX We add attributes and uniforms to shaders. The program can ask for the # of them, and see the
          // ones we generated, potentially confusing it? Perhaps we should hide them.
          if (GL.shaderInfos[shader].type == GLctx.VERTEX_SHADER) {
            // Replace ftransform() with explicit project/modelview transforms, and add position and matrix info.
            var has_pm = source.search(/u_projection/) >= 0;
            var has_mm = source.search(/u_modelView/) >= 0;
            var has_pv = source.search(/a_position/) >= 0;
            var need_pm = 0, need_mm = 0, need_pv = 0;
            var old = source;
            source = source.replace(/ftransform\(\)/g, '(u_projection * u_modelView * a_position)');
            if (old != source) need_pm = need_mm = need_pv = 1;
            old = source;
            source = source.replace(/gl_ProjectionMatrix/g, 'u_projection');
            if (old != source) need_pm = 1;
            old = source;
            source = source.replace(/gl_ModelViewMatrixTranspose\[2\]/g, 'vec4(u_modelView[0][2], u_modelView[1][2], u_modelView[2][2], u_modelView[3][2])'); // XXX extremely inefficient
            if (old != source) need_mm = 1;
            old = source;
            source = source.replace(/gl_ModelViewMatrix/g, 'u_modelView');
            if (old != source) need_mm = 1;
            old = source;
            source = source.replace(/gl_Vertex/g, 'a_position');
            if (old != source) need_pv = 1;
            old = source;
            source = source.replace(/gl_ModelViewProjectionMatrix/g, '(u_projection * u_modelView)');
            if (old != source) need_pm = need_mm = 1;
            if (need_pv && !has_pv) source = 'attribute vec4 a_position; \n' + source;
            if (need_mm && !has_mm) source = 'uniform mat4 u_modelView; \n' + source;
            if (need_pm && !has_pm) source = 'uniform mat4 u_projection; \n' + source;
            GL.shaderInfos[shader].ftransform = need_pm || need_mm || need_pv; // we will need to provide the fixed function stuff as attributes and uniforms
            for (var i = 0; i < GLImmediate.MAX_TEXTURES; i++) {
              // XXX To handle both regular texture mapping and cube mapping, we use vec4 for tex coordinates.
              var old = source;
              var need_vtc = source.search('v_texCoord' + i) == -1;
              source = source.replace(new RegExp('gl_TexCoord\\[' + i + '\\]', 'g'), 'v_texCoord' + i)
                             .replace(new RegExp('gl_MultiTexCoord' + i, 'g'), 'a_texCoord' + i);
              if (source != old) {
                source = 'attribute vec4 a_texCoord' + i + '; \n' + source;
                if (need_vtc) {
                  source = 'varying vec4 v_texCoord' + i + ';   \n' + source;
                }
              }
  
              old = source;
              source = source.replace(new RegExp('gl_TextureMatrix\\[' + i + '\\]', 'g'), 'u_textureMatrix' + i);
              if (source != old) {
                source = 'uniform mat4 u_textureMatrix' + i + '; \n' + source;
              }
            }
            if (source.indexOf('gl_FrontColor') >= 0) {
              source = 'varying vec4 v_color; \n' +
                       source.replace(/gl_FrontColor/g, 'v_color');
            }
            if (source.indexOf('gl_Color') >= 0) {
              source = 'attribute vec4 a_color; \n' +
                       source.replace(/gl_Color/g, 'a_color');
            }
            if (source.indexOf('gl_Normal') >= 0) {
              source = 'attribute vec3 a_normal; \n' +
                       source.replace(/gl_Normal/g, 'a_normal');
            }
            // fog
            if (source.indexOf('gl_FogFragCoord') >= 0) {
              source = 'varying float v_fogFragCoord;   \n' +
                       source.replace(/gl_FogFragCoord/g, 'v_fogFragCoord');
            }
            source = ensurePrecision(source);
          } else { // Fragment shader
            for (var i = 0; i < GLImmediate.MAX_TEXTURES; i++) {
              var old = source;
              source = source.replace(new RegExp('gl_TexCoord\\[' + i + '\\]', 'g'), 'v_texCoord' + i);
              if (source != old) {
                source = 'varying vec4 v_texCoord' + i + ';   \n' + source;
              }
            }
            if (source.indexOf('gl_Color') >= 0) {
              source = 'varying vec4 v_color; \n' + source.replace(/gl_Color/g, 'v_color');
            }
            if (source.indexOf('gl_Fog.color') >= 0) {
              source = 'uniform vec4 u_fogColor;   \n' +
                       source.replace(/gl_Fog.color/g, 'u_fogColor');
            }
            if (source.indexOf('gl_Fog.end') >= 0) {
              source = 'uniform float u_fogEnd;   \n' +
                       source.replace(/gl_Fog.end/g, 'u_fogEnd');
            }
            if (source.indexOf('gl_Fog.scale') >= 0) {
              source = 'uniform float u_fogScale;   \n' +
                       source.replace(/gl_Fog.scale/g, 'u_fogScale');
            }
            if (source.indexOf('gl_Fog.density') >= 0) {
              source = 'uniform float u_fogDensity;   \n' +
                       source.replace(/gl_Fog.density/g, 'u_fogDensity');
            }
            if (source.indexOf('gl_FogFragCoord') >= 0) {
              source = 'varying float v_fogFragCoord;   \n' +
                       source.replace(/gl_FogFragCoord/g, 'v_fogFragCoord');
            }
            source = ensurePrecision(source);
          }
          GLctx.shaderSource(GL.shaders[shader], source);
        };
  
        var glCompileShader = _glCompileShader;
        _glCompileShader = _emscripten_glCompileShader = function _glCompileShader(shader) {
          GLctx.compileShader(GL.shaders[shader]);
        };
  
        GL.programShaders = {};
        var glAttachShader = _glAttachShader;
        _glAttachShader = _emscripten_glAttachShader = function _glAttachShader(program, shader) {
          if (!GL.programShaders[program]) GL.programShaders[program] = [];
          GL.programShaders[program].push(shader);
          glAttachShader(program, shader);
        };
  
        var glDetachShader = _glDetachShader;
        _glDetachShader = _emscripten_glDetachShader = function _glDetachShader(program, shader) {
          var programShader = GL.programShaders[program];
          if (!programShader) {
            Module.printErr('WARNING: _glDetachShader received invalid program: ' + program);
            return;
          }
          var index = programShader.indexOf(shader);
          programShader.splice(index, 1);
          glDetachShader(program, shader);
        };
  
        var glUseProgram = _glUseProgram;
        _glUseProgram = _emscripten_glUseProgram = function _glUseProgram(program) {
          if (GL.currProgram != program) {
            GLImmediate.currentRenderer = null; // This changes the FFP emulation shader program, need to recompute that.
            GL.currProgram = program;
            GLImmediate.fixedFunctionProgram = 0;
            glUseProgram(program);
          }
        }
  
        var glDeleteProgram = _glDeleteProgram;
        _glDeleteProgram = _emscripten_glDeleteProgram = function _glDeleteProgram(program) {
          glDeleteProgram(program);
          if (program == GL.currProgram) {
            GLImmediate.currentRenderer = null; // This changes the FFP emulation shader program, need to recompute that.
            GL.currProgram = 0;
          }
        };
  
        // If attribute 0 was not bound, bind it to 0 for WebGL performance reasons. Track if 0 is free for that.
        var zeroUsedPrograms = {};
        var glBindAttribLocation = _glBindAttribLocation;
        _glBindAttribLocation = _emscripten_glBindAttribLocation = function _glBindAttribLocation(program, index, name) {
          if (index == 0) zeroUsedPrograms[program] = true;
          glBindAttribLocation(program, index, name);
        };
        var glLinkProgram = _glLinkProgram;
        _glLinkProgram = _emscripten_glLinkProgram = function _glLinkProgram(program) {
          if (!(program in zeroUsedPrograms)) {
            GLctx.bindAttribLocation(GL.programs[program], 0, 'a_position');
          }
          glLinkProgram(program);
        };
  
        var glBindBuffer = _glBindBuffer;
        _glBindBuffer = _emscripten_glBindBuffer = function _glBindBuffer(target, buffer) {
          glBindBuffer(target, buffer);
          if (target == GLctx.ARRAY_BUFFER) {
            if (GLEmulation.currentVao) {
              assert(GLEmulation.currentVao.arrayBuffer == buffer || GLEmulation.currentVao.arrayBuffer == 0 || buffer == 0, 'TODO: support for multiple array buffers in vao');
              GLEmulation.currentVao.arrayBuffer = buffer;
            }
          } else if (target == GLctx.ELEMENT_ARRAY_BUFFER) {
            if (GLEmulation.currentVao) GLEmulation.currentVao.elementArrayBuffer = buffer;
          }
        };
  
        var glGetFloatv = _glGetFloatv;
        _glGetFloatv = _emscripten_glGetFloatv = function _glGetFloatv(pname, params) {
          if (pname == 0x0BA6) { // GL_MODELVIEW_MATRIX
            HEAPF32.set(GLImmediate.matrix[0/*m*/], params >> 2);
          } else if (pname == 0x0BA7) { // GL_PROJECTION_MATRIX
            HEAPF32.set(GLImmediate.matrix[1/*p*/], params >> 2);
          } else if (pname == 0x0BA8) { // GL_TEXTURE_MATRIX
            HEAPF32.set(GLImmediate.matrix[2/*t*/ + GLImmediate.clientActiveTexture], params >> 2);
          } else if (pname == 0x0B66) { // GL_FOG_COLOR
            HEAPF32.set(GLEmulation.fogColor, params >> 2);
          } else if (pname == 0x0B63) { // GL_FOG_START
            HEAPF32[((params)>>2)]=GLEmulation.fogStart;
          } else if (pname == 0x0B64) { // GL_FOG_END
            HEAPF32[((params)>>2)]=GLEmulation.fogEnd;
          } else if (pname == 0x0B62) { // GL_FOG_DENSITY
            HEAPF32[((params)>>2)]=GLEmulation.fogDensity;
          } else if (pname == 0x0B65) { // GL_FOG_MODE
            HEAPF32[((params)>>2)]=GLEmulation.fogMode;
          } else {
            glGetFloatv(pname, params);
          }
        };
  
        var glHint = _glHint;
        _glHint = _emscripten_glHint = function _glHint(target, mode) {
          if (target == 0x84EF) { // GL_TEXTURE_COMPRESSION_HINT
            return;
          }
          glHint(target, mode);
        };
  
        var glEnableVertexAttribArray = _glEnableVertexAttribArray;
        _glEnableVertexAttribArray = _emscripten_glEnableVertexAttribArray = function _glEnableVertexAttribArray(index) {
          glEnableVertexAttribArray(index);
          GLEmulation.enabledVertexAttribArrays[index] = 1;
          if (GLEmulation.currentVao) GLEmulation.currentVao.enabledVertexAttribArrays[index] = 1;
        };
  
        var glDisableVertexAttribArray = _glDisableVertexAttribArray;
        _glDisableVertexAttribArray = _emscripten_glDisableVertexAttribArray = function _glDisableVertexAttribArray(index) {
          glDisableVertexAttribArray(index);
          delete GLEmulation.enabledVertexAttribArrays[index];
          if (GLEmulation.currentVao) delete GLEmulation.currentVao.enabledVertexAttribArrays[index];
        };
  
        var glVertexAttribPointer = _glVertexAttribPointer;
        _glVertexAttribPointer = _emscripten_glVertexAttribPointer = function _glVertexAttribPointer(index, size, type, normalized, stride, pointer) {
          glVertexAttribPointer(index, size, type, normalized, stride, pointer);
          if (GLEmulation.currentVao) { // TODO: avoid object creation here? likely not hot though
            GLEmulation.currentVao.vertexAttribPointers[index] = [index, size, type, normalized, stride, pointer];
          }
        };
      },getAttributeFromCapability:function (cap) {
        var attrib = null;
        switch (cap) {
          case 0x0de1: // GL_TEXTURE_2D - XXX not according to spec, and not in desktop GL, but works in some GLES1.x apparently, so support it
            abort("GL_TEXTURE_2D is not a spec-defined capability for gl{Enable,Disable}ClientState.");
            // Fall through:
          case 0x8078: // GL_TEXTURE_COORD_ARRAY
            attrib = GLImmediate.TEXTURE0 + GLImmediate.clientActiveTexture; break;
          case 0x8074: // GL_VERTEX_ARRAY
            attrib = GLImmediate.VERTEX; break;
          case 0x8075: // GL_NORMAL_ARRAY
            attrib = GLImmediate.NORMAL; break;
          case 0x8076: // GL_COLOR_ARRAY
            attrib = GLImmediate.COLOR; break;
        }
        return attrib;
      }};function _glVertexPointer(size, type, stride, pointer) {
      GLImmediate.setClientAttribute(GLImmediate.VERTEX, size, type, stride, pointer);
    }

  function _SDL_SetVideoMode(width, height, depth, flags) {
      ['touchstart', 'touchend', 'touchmove', 'mousedown', 'mouseup', 'mousemove', 'DOMMouseScroll', 'mousewheel', 'wheel', 'mouseout'].forEach(function(event) {
        Module['canvas'].addEventListener(event, SDL.receiveEvent, true);
      });
  
      var canvas = Module['canvas'];
  
      // (0,0) means 'use fullscreen' in native; in Emscripten, use the current canvas size.
      if (width == 0 && height == 0) {
        width = canvas.width;
        height = canvas.height;
      }
  
      if (!SDL.addedResizeListener) {
        SDL.addedResizeListener = true;
        Browser.resizeListeners.push(function(w, h) {
          if (!SDL.settingVideoMode) {
            SDL.receiveEvent({
              type: 'resize',
              w: w,
              h: h
            });
          }
        });
      }
  
      if (width !== canvas.width || height !== canvas.height) {
        SDL.settingVideoMode = true; // SetVideoMode itself should not trigger resize events
        Browser.setCanvasSize(width, height);
        SDL.settingVideoMode = false;
      }
  
      // Free the old surface first if there is one
      if (SDL.screen) {
        SDL.freeSurface(SDL.screen);
        assert(!SDL.screen);
      }
  
      if (SDL.GL) flags = flags | 0x04000000; // SDL_OPENGL - if we are using GL, then later calls to SetVideoMode may not mention GL, but we do need it. Once in GL mode, we never leave it.
  
      SDL.screen = SDL.makeSurface(width, height, flags, true, 'screen');
  
      return SDL.screen;
    }

  
  function _open(path, oflag, varargs) {
      // int open(const char *path, int oflag, ...);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/open.html
      var mode = HEAP32[((varargs)>>2)];
      path = Pointer_stringify(path);
      try {
        var stream = FS.open(path, oflag, mode);
        return stream.fd;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fopen(filename, mode) {
      // FILE *fopen(const char *restrict filename, const char *restrict mode);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fopen.html
      var flags;
      mode = Pointer_stringify(mode);
      if (mode[0] == 'r') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 0;
        }
      } else if (mode[0] == 'w') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 512;
      } else if (mode[0] == 'a') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 1024;
      } else {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return 0;
      }
      var fd = _open(filename, flags, allocate([0x1FF, 0, 0, 0], 'i32', ALLOC_STACK));  // All creation permissions.
      return fd === -1 ? 0 : FS.getPtrForStream(FS.getStream(fd));
    }

  function _glDrawArrays(mode, first, count) {
  
      GLctx.drawArrays(mode, first, count);
  
    }

   
  Module["_strncpy"] = _strncpy;

  
  
  
  
  function _recv(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _read(fd, buf, len);
    }
  
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fread(ptr, size, nitems, stream) {
      // size_t fread(void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fread.html
      var bytesToRead = nitems * size;
      if (bytesToRead == 0) {
        return 0;
      }
      var bytesRead = 0;
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return 0;
      }
      while (streamObj.ungotten.length && bytesToRead > 0) {
        HEAP8[((ptr++)>>0)]=streamObj.ungotten.pop();
        bytesToRead--;
        bytesRead++;
      }
      var err = _read(streamObj.fd, ptr, bytesToRead);
      if (err == -1) {
        if (streamObj) streamObj.error = true;
        return 0;
      }
      bytesRead += err;
      if (bytesRead < bytesToRead) streamObj.eof = true;
      return Math.floor(bytesRead / size);
    }function _fgetc(stream) {
      // int fgetc(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgetc.html
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) return -1;
      if (streamObj.eof || streamObj.error) return -1;
      var ret = _fread(_fgetc.ret, 1, 1, stream);
      if (ret == 0) {
        return -1;
      } else if (ret == -1) {
        streamObj.error = true;
        return -1;
      } else {
        return HEAPU8[((_fgetc.ret)>>0)];
      }
    }function _getchar() {
      // int getchar(void);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/getchar.html
      return _fgetc(HEAP32[((_stdin)>>2)]);
    }

  function _Mix_PlayChannelTimed() {
  return _Mix_PlayChannel.apply(null, arguments)
  }

  function _unlink(path) {
      // int unlink(const char *path);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/unlink.html
      path = Pointer_stringify(path);
      try {
        FS.unlink(path);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }


  var _emscripten_postinvoke=true;



  function _glClear(x0) { GLctx.clear(x0) }

  
  function _mknod(path, mode, dev) {
      // int mknod(const char *path, mode_t mode, dev_t dev);
      // http://pubs.opengroup.org/onlinepubs/7908799/xsh/mknod.html
      path = Pointer_stringify(path);
      // we don't want this in the JS API as the JS API
      // uses mknod to create all nodes.
      switch (mode & 61440) {
        case 32768:
        case 8192:
        case 24576:
        case 4096:
        case 49152:
          break;
        default:
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
      }
      try {
        FS.mknod(path, mode, dev);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _mkdir(path, mode) {
      // int mkdir(const char *path, mode_t mode);
      // http://pubs.opengroup.org/onlinepubs/7908799/xsh/mkdir.html
      path = Pointer_stringify(path);
      // remove a trailing slash, if one - /a/b/ has basename of '', but
      // we want to create b in the context of this function
      if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
      try {
        FS.mkdir(path, mode, 0);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }

  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }

  function _SDL_GetError() {
      if (!SDL.errorMessage) {
        SDL.errorMessage = allocate(intArrayFromString("unknown SDL-emscripten error"), 'i8', ALLOC_NORMAL);
      }
      return SDL.errorMessage;
    }

  function _emscripten_cancel_main_loop() {
      Browser.mainLoop.scheduler = null;
      Browser.mainLoop.shouldPause = true;
    }

  function _Mix_Init(flags) {
      if (!flags) return 0;
      return 8; /* MIX_INIT_OGG */
    }

  function _glDeleteTextures(n, textures) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((textures)+(i*4))>>2)];
        var texture = GL.textures[id];
        if (!texture) continue;
        GLctx.deleteTexture(texture);
        texture.name = 0;
        GL.textures[id] = null;
      }
    }

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;


  function _Mix_OpenAudio(frequency, format, channels, chunksize) {
      SDL.openAudioContext();
      SDL.allocateChannels(32);
      // Just record the values for a later call to Mix_QuickLoad_RAW
      SDL.mixerFrequency = frequency;
      SDL.mixerFormat = format;
      SDL.mixerNumChannels = channels;
      SDL.mixerChunkSize = chunksize;
      return 0;
    }

  var _BDtoIHigh=true;

  function _SDL_GL_SwapBuffers() {
      if (Browser.doSwapBuffers) Browser.doSwapBuffers(); // in workers, this is used to send out a buffered frame
    }

  function _Mix_HaltChannel(channel) {
      function halt(channel) {
        var info = SDL.channels[channel];
        if (info.audio) {
          info.audio.pause();
          info.audio = null;
        }
        if (SDL.channelFinished) {
          Runtime.getFuncWrapper(SDL.channelFinished, 'vi')(channel);
        }
      }
      if (channel != -1) {
        halt(channel);
      } else {
        for (var i = 0; i < SDL.channels.length; ++i) halt(i);
      }
      return 0;
    }

  var _emscripten_resume=true;

  function __ZSt9terminatev() {
      _exit(-1234);
    }

  function _gettimeofday(ptr) {
      var now = Date.now();
      HEAP32[((ptr)>>2)]=Math.floor(now/1000); // seconds
      HEAP32[(((ptr)+(4))>>2)]=Math.floor((now-1000*Math.floor(now/1000))*1000); // microseconds
      return 0;
    }

  function _glBlendFunc(x0, x1) { GLctx.blendFunc(x0, x1) }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  function _llvm_pow_f64() {
  return Math_pow.apply(null, arguments)
  }

  function _chdir(path) {
      // int chdir(const char *path);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/chdir.html
      // NOTE: The path argument may be a string, to simplify fchdir().
      if (typeof path !== 'string') path = Pointer_stringify(path);
      try {
        FS.chdir(path);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }

  function _Mix_Quit(){}

  function ___cxa_call_unexpected(exception) {
      Module.printErr('Unexpected exception thrown, this is not properly supported - aborting');
      ABORT = true;
      throw exception;
    }

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) self.alloc(bytes);
      return ret;  // Previous break location.
    }

   
  Module["_memmove"] = _memmove;

  function _glGenTextures(n, textures) {
      for (var i = 0; i < n; i++) {
        var id = GL.getNewId(GL.textures);
        var texture = GLctx.createTexture();
        texture.name = id;
        GL.textures[id] = texture;
        HEAP32[(((textures)+(i*4))>>2)]=id;
      }
    }

  function _Mix_ReserveChannels(num) {
      SDL.channelMinimumNumber = num;
    }

  function ___gxx_personality_v0() {
    }

  function _glPixelStorei(pname, param) {
      if (pname == 0x0D05 /* GL_PACK_ALIGNMENT */) {
        GL.packAlignment = param;
      } else if (pname == 0x0cf5 /* GL_UNPACK_ALIGNMENT */) {
        GL.unpackAlignment = param;
      }
      GLctx.pixelStorei(pname, param);
    }

  function _opendir(dirname) {
      // DIR *opendir(const char *dirname);
      // http://pubs.opengroup.org/onlinepubs/007908799/xsh/opendir.html
      // NOTE: Calculating absolute path redundantly since we need to associate it
      //       with the opened stream.
      var path = Pointer_stringify(dirname);
      if (!path) {
        ___setErrNo(ERRNO_CODES.ENOENT);
        return 0;
      }
      var node;
      try {
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
      } catch (e) {
        FS.handleFSError(e);
        return 0;
      }
      if (!FS.isDir(node.mode)) {
        ___setErrNo(ERRNO_CODES.ENOTDIR);
        return 0;
      }
      var fd = _open(dirname, 0, allocate([0, 0, 0, 0], 'i32', ALLOC_STACK));
      return fd === -1 ? 0 : FS.getPtrForStream(FS.getStream(fd));
    }

  function _modf(x, intpart) {
      HEAPF64[((intpart)>>3)]=Math.floor(x);
      return x - HEAPF64[((intpart)>>3)];
    }

  function _ungetc(c, stream) {
      // int ungetc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ungetc.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) {
        return -1;
      }
      if (c === -1) {
        // do nothing for EOF character
        return c;
      }
      c = unSign(c & 0xFF);
      stream.ungotten.push(c);
      stream.eof = false;
      return c;
    }

  function ___errno_location() {
      return ___errno_state;
    }

  
  var ___tm_current=allocate(44, "i8", ALLOC_STATIC);
  
  
  var ___tm_timezone=allocate(intArrayFromString("GMT"), "i8", ALLOC_STATIC);
  
  
  var _tzname=allocate(8, "i32*", ALLOC_STATIC);
  
  var _daylight=allocate(1, "i32*", ALLOC_STATIC);
  
  var _timezone=allocate(1, "i32*", ALLOC_STATIC);function _tzset() {
      // TODO: Use (malleable) environment variables instead of system settings.
      if (_tzset.called) return;
      _tzset.called = true;
  
      HEAP32[((_timezone)>>2)]=-(new Date()).getTimezoneOffset() * 60;
  
      var winter = new Date(2000, 0, 1);
      var summer = new Date(2000, 6, 1);
      HEAP32[((_daylight)>>2)]=Number(winter.getTimezoneOffset() != summer.getTimezoneOffset());
  
      var winterName = 'GMT'; // XXX do not rely on browser timezone info, it is very unpredictable | winter.toString().match(/\(([A-Z]+)\)/)[1];
      var summerName = 'GMT'; // XXX do not rely on browser timezone info, it is very unpredictable | summer.toString().match(/\(([A-Z]+)\)/)[1];
      var winterNamePtr = allocate(intArrayFromString(winterName), 'i8', ALLOC_NORMAL);
      var summerNamePtr = allocate(intArrayFromString(summerName), 'i8', ALLOC_NORMAL);
      HEAP32[((_tzname)>>2)]=winterNamePtr;
      HEAP32[(((_tzname)+(4))>>2)]=summerNamePtr;
    }function _localtime_r(time, tmPtr) {
      _tzset();
      var date = new Date(HEAP32[((time)>>2)]*1000);
      HEAP32[((tmPtr)>>2)]=date.getSeconds();
      HEAP32[(((tmPtr)+(4))>>2)]=date.getMinutes();
      HEAP32[(((tmPtr)+(8))>>2)]=date.getHours();
      HEAP32[(((tmPtr)+(12))>>2)]=date.getDate();
      HEAP32[(((tmPtr)+(16))>>2)]=date.getMonth();
      HEAP32[(((tmPtr)+(20))>>2)]=date.getFullYear()-1900;
      HEAP32[(((tmPtr)+(24))>>2)]=date.getDay();
  
      var start = new Date(date.getFullYear(), 0, 1);
      var yday = Math.floor((date.getTime() - start.getTime()) / (1000 * 60 * 60 * 24));
      HEAP32[(((tmPtr)+(28))>>2)]=yday;
      HEAP32[(((tmPtr)+(36))>>2)]=start.getTimezoneOffset() * 60;
  
      var dst = Number(start.getTimezoneOffset() != date.getTimezoneOffset());
      HEAP32[(((tmPtr)+(32))>>2)]=dst;
  
      HEAP32[(((tmPtr)+(40))>>2)]=___tm_timezone;
  
      return tmPtr;
    }function _localtime(time) {
      return _localtime_r(time, ___tm_current);
    }

  
  function _emscripten_get_now() {
      if (!_emscripten_get_now.actual) {
        if (ENVIRONMENT_IS_NODE) {
          _emscripten_get_now.actual = function _emscripten_get_now_actual() {
            var t = process['hrtime']();
            return t[0] * 1e3 + t[1] / 1e6;
          }
        } else if (typeof dateNow !== 'undefined') {
          _emscripten_get_now.actual = dateNow;
        } else if (ENVIRONMENT_IS_WEB && window['performance'] && window['performance']['now']) {
          _emscripten_get_now.actual = function _emscripten_get_now_actual() { return window['performance']['now'](); };
        } else {
          _emscripten_get_now.actual = Date.now;
        }
      }
      return _emscripten_get_now.actual();
    }function _clock_gettime(clk_id, tp) {
      // int clock_gettime(clockid_t clk_id, struct timespec *tp);
      var now;
      if (clk_id === 0) {
        now = Date.now();
      } else {
        now = _emscripten_get_now();
      }
      HEAP32[((tp)>>2)]=Math.floor(now/1000); // seconds
      HEAP32[(((tp)+(4))>>2)]=Math.floor((now % 1000)*1000*1000); // nanoseconds
      return 0;
    }

  function _glTexImage2D(target, level, internalFormat, width, height, border, format, type, pixels) {
      if (pixels) {
        var data = GL.getTexPixelData(type, format, width, height, pixels, internalFormat);
        pixels = data.pixels;
        internalFormat = data.internalFormat;
      } else {
        pixels = null;
      }
      GLctx.texImage2D(target, level, internalFormat, width, height, border, format, type, pixels);
    }

  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 79:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: {
          if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
          return 1;
        }
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }



  var _emscripten_preinvoke=true;

   
  Module["_memset"] = _memset;

  var _BDtoILow=true;

   
  Module["_strcat"] = _strcat;

  
  function _readdir_r(dirp, entry, result) {
      // int readdir_r(DIR *dirp, struct dirent *entry, struct dirent **result);
      // http://pubs.opengroup.org/onlinepubs/007908799/xsh/readdir_r.html
      var stream = FS.getStreamFromPtr(dirp);
      if (!stream) {
        return ___setErrNo(ERRNO_CODES.EBADF);
      }
      var entries;
      try {
        entries = FS.readdir(stream.path);
      } catch (e) {
        return FS.handleFSError(e);
      }
      if (stream.position < 0 || stream.position >= entries.length) {
        HEAP32[((result)>>2)]=0;
        return 0;
      }
      var id;
      var type;
      var name = entries[stream.position];
      var offset = stream.position + 1;
      if (!name.indexOf('.')) {
        id = 1;
        type = 4;
      } else {
        var child = FS.lookupNode(stream.node, name);
        id = child.id;
        type = FS.isChrdev(child.mode) ? 2 :  // DT_CHR, character device.
               FS.isDir(child.mode) ? 4 :     // DT_DIR, directory.
               FS.isLink(child.mode) ? 10 :   // DT_LNK, symbolic link.
               8;                             // DT_REG, regular file.
      }
      HEAP32[((entry)>>2)]=id;
      HEAP32[(((entry)+(4))>>2)]=offset;
      HEAP32[(((entry)+(8))>>2)]=name.length + 1;
      for (var i = 0; i < name.length; i++) {
        HEAP8[(((entry + 11)+(i))>>0)]=name.charCodeAt(i);
      }
      HEAP8[(((entry + 11)+(i))>>0)]=0;
      HEAP8[(((entry)+(10))>>0)]=type;
      HEAP32[((result)>>2)]=entry;
      stream.position++;
      return 0;
    }function _readdir(dirp) {
      // struct dirent *readdir(DIR *dirp);
      // http://pubs.opengroup.org/onlinepubs/007908799/xsh/readdir_r.html
      var stream = FS.getStreamFromPtr(dirp);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return 0;
      }
      // TODO Is it supposed to be safe to execute multiple readdirs?
      if (!_readdir.entry) _readdir.entry = _malloc(268);
      if (!_readdir.result) _readdir.result = _malloc(4);
      var err = _readdir_r(dirp, _readdir.entry, _readdir.result);
      if (err) {
        ___setErrNo(err);
        return 0;
      }
      return HEAP32[((_readdir.result)>>2)];
    }

  var _BItoD=true;

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function _abort() {
      Module['abort']();
    }

  function ___assert_fail(condition, filename, line, func) {
      ABORT = true;
      throw 'Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function'] + ' at ' + stackTrace();
    }

  function _tan() {
  return Math_tan.apply(null, arguments)
  }




  function _fabs() {
  return Math_abs.apply(null, arguments)
  }

  function _Mix_CloseAudio() {
  return _SDL_CloseAudio.apply(null, arguments)
  }

  function _srand(seed) {
      HEAP32[((___rand_seed)>>2)]=seed
    }

  function _sqrt() {
  return Math_sqrt.apply(null, arguments)
  }

  function _emscripten_asm_const_int(code) {
      var args = Array.prototype.slice.call(arguments, 1);
      return Runtime.getAsmConst(code, args.length).apply(null, args) | 0;
    }

  function _ftell(stream) {
      // long ftell(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ftell.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      if (FS.isChrdev(stream.node.mode)) {
        ___setErrNo(ERRNO_CODES.ESPIPE);
        return -1;
      } else {
        return stream.position;
      }
    }

  function _abs() {
  return Math_abs.apply(null, arguments)
  }


  function _glDisableClientState(cap) {
      var attrib = GLEmulation.getAttributeFromCapability(cap);
      if (attrib === null) {
        Module.printErr('WARNING: unhandled clientstate: ' + cap);
        return;
      }
      if (GLImmediate.enabledClientAttributes[attrib]) {
        GLImmediate.enabledClientAttributes[attrib] = false;
        GLImmediate.totalEnabledClientAttributes--;
        GLImmediate.currentRenderer = null; // Will need to change current renderer, since the set of active vertex pointers changed.
        if (GLEmulation.currentVao) delete GLEmulation.currentVao.enabledClientStates[cap];
        GLImmediate.modifiedClientAttributes = true;
      }
    }

  function _glLoadIdentity() {
      GLImmediate.matricesModified = true;
      GLImmediate.matrixVersion[GLImmediate.currentMatrix] = (GLImmediate.matrixVersion[GLImmediate.currentMatrix] + 1)|0;
      GLImmediate.matrixLib.mat4.identity(GLImmediate.matrix[GLImmediate.currentMatrix]);
    }

  function ___cxa_allocate_exception(size) {
      var ptr = _malloc(size + ___cxa_exception_header_size);
      return ptr + ___cxa_exception_header_size;
    }

  function _sin() {
  return Math_sin.apply(null, arguments)
  }

  
  function _fmod(x, y) {
      return x % y;
    }function _fmodl() {
  return _fmod.apply(null, arguments)
  }

  function _stat(path, buf, dontResolveLastLink) {
      // http://pubs.opengroup.org/onlinepubs/7908799/xsh/stat.html
      // int stat(const char *path, struct stat *buf);
      // NOTE: dontResolveLastLink is a shortcut for lstat(). It should never be
      //       used in client code.
      path = typeof path !== 'string' ? Pointer_stringify(path) : path;
      try {
        var stat = dontResolveLastLink ? FS.lstat(path) : FS.stat(path);
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=Math.floor(stat.atime.getTime() / 1000);
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=Math.floor(stat.mtime.getTime() / 1000);
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=Math.floor(stat.ctime.getTime() / 1000);
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }


  function _SDL_GL_SetAttribute(attr, value) {
      if (!(attr in SDL.glAttributes)) {
        abort('Unknown SDL GL attribute (' + attr + '). Please check if your SDL version is supported.');
      }
  
      SDL.glAttributes[attr] = value;
    }

  function _glViewport(x0, x1, x2, x3) { GLctx.viewport(x0, x1, x2, x3) }

  function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.scheduler, 'there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one, if you want to');
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
        if (Browser.mainLoop.shouldPause) {
          // catch pauses from non-main loop sources
          Browser.mainLoop.paused = true;
          Browser.mainLoop.shouldPause = false;
          return;
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
        GL.newRenderingFrameStarted();
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(function() {
          if (typeof arg !== 'undefined') {
            Runtime.dynCall('vi', func, [arg]);
          } else {
            Runtime.dynCall('v', func);
          }
        });
  
        if (Browser.mainLoop.shouldPause) {
          // catch pauses from the main loop itself
          Browser.mainLoop.paused = true;
          Browser.mainLoop.shouldPause = false;
          return;
        }
        Browser.mainLoop.scheduler();
      }
      if (fps && fps > 0) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          setTimeout(Browser.mainLoop.runner, 1000/fps); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      }
      Browser.mainLoop.scheduler();
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }

  function _time(ptr) {
      var ret = Math.floor(Date.now()/1000);
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  function _getcwd(buf, size) {
      // char *getcwd(char *buf, size_t size);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/getcwd.html
      if (size == 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return 0;
      }
      var cwd = FS.cwd();
      if (size < cwd.length + 1) {
        ___setErrNo(ERRNO_CODES.ERANGE);
        return 0;
      } else {
        writeAsciiToMemory(cwd, buf);
        return buf;
      }
    }

  function _glEnableClientState(cap) {
      var attrib = GLEmulation.getAttributeFromCapability(cap);
      if (attrib === null) {
        Module.printErr('WARNING: unhandled clientstate: ' + cap);
        return;
      }
      if (!GLImmediate.enabledClientAttributes[attrib]) {
        GLImmediate.enabledClientAttributes[attrib] = true;
        GLImmediate.totalEnabledClientAttributes++;
        GLImmediate.currentRenderer = null; // Will need to change current renderer, since the set of active vertex pointers changed.
        if (GLEmulation.currentVao) GLEmulation.currentVao.enabledClientStates[cap] = 1;
        GLImmediate.modifiedClientAttributes = true;
      }
    }

  function _closedir(dirp) {
      // int closedir(DIR *dirp);
      // http://pubs.opengroup.org/onlinepubs/007908799/xsh/closedir.html
      var fd = _fileno(dirp);
      return _close(fd);
    }

  function _llvm_trap() {
      abort('trap!');
    }

  function ___cxa_begin_catch(ptr) {
      __ZSt18uncaught_exceptionv.uncaught_exception--;
      ___cxa_caught_exceptions.push(___cxa_last_thrown_exception);
      return ptr;
    }

  function _llvm_eh_typeid_for(type) {
      return type;
    }


  function _log() {
  return Math_log.apply(null, arguments)
  }

  function _cos() {
  return Math_cos.apply(null, arguments)
  }

  function _glTexCoordPointer(size, type, stride, pointer) {
      GLImmediate.setClientAttribute(GLImmediate.TEXTURE0 + GLImmediate.clientActiveTexture, size, type, stride, pointer);
    }

  function _SDL_PollEvent(ptr) {
      return SDL.pollEvent(ptr);
    }

  function __ZNSt9exceptionD2Ev() {}

  function _glColorPointer(size, type, stride, pointer) {
      GLImmediate.setClientAttribute(GLImmediate.COLOR, size, type, stride, pointer);
    }

  function _SDL_Init(initFlags) {
      SDL.startTime = Date.now();
      SDL.initFlags = initFlags;
  
      // capture all key events. we just keep down and up, but also capture press to prevent default actions
      if (!Module['doNotCaptureKeyboard']) {
        document.addEventListener("keydown", SDL.receiveEvent);
        document.addEventListener("keyup", SDL.receiveEvent);
        document.addEventListener("keypress", SDL.receiveEvent);
        window.addEventListener("focus", SDL.receiveEvent);
        window.addEventListener("blur", SDL.receiveEvent);
        document.addEventListener("visibilitychange", SDL.receiveEvent);
      }
  
      if (initFlags & 0x200) {
        // SDL_INIT_JOYSTICK
        // Firefox will not give us Joystick data unless we register this NOP
        // callback.
        // https://bugzilla.mozilla.org/show_bug.cgi?id=936104
        addEventListener("gamepadconnected", function() {});
      }
  
      window.addEventListener("unload", SDL.receiveEvent);
      SDL.keyboardState = _malloc(0x10000); // Our SDL needs 512, but 64K is safe for older SDLs
      _memset(SDL.keyboardState, 0, 0x10000);
      // Initialize this structure carefully for closure
      SDL.DOMEventToSDLEvent['keydown']    = 0x300  /* SDL_KEYDOWN */;
      SDL.DOMEventToSDLEvent['keyup']      = 0x301  /* SDL_KEYUP */;
      SDL.DOMEventToSDLEvent['keypress']   = 0x303  /* SDL_TEXTINPUT */;
      SDL.DOMEventToSDLEvent['mousedown']  = 0x401  /* SDL_MOUSEBUTTONDOWN */;
      SDL.DOMEventToSDLEvent['mouseup']    = 0x402  /* SDL_MOUSEBUTTONUP */;
      SDL.DOMEventToSDLEvent['mousemove']  = 0x400  /* SDL_MOUSEMOTION */;
      SDL.DOMEventToSDLEvent['wheel']      = 0x403  /* SDL_MOUSEWHEEL */; 
      SDL.DOMEventToSDLEvent['touchstart'] = 0x700  /* SDL_FINGERDOWN */;
      SDL.DOMEventToSDLEvent['touchend']   = 0x701  /* SDL_FINGERUP */;
      SDL.DOMEventToSDLEvent['touchmove']  = 0x702  /* SDL_FINGERMOTION */;
      SDL.DOMEventToSDLEvent['unload']     = 0x100  /* SDL_QUIT */;
      SDL.DOMEventToSDLEvent['resize']     = 0x7001 /* SDL_VIDEORESIZE/SDL_EVENT_COMPAT2 */;
      SDL.DOMEventToSDLEvent['visibilitychange'] = 0x200 /* SDL_WINDOWEVENT */;
      SDL.DOMEventToSDLEvent['focus']      = 0x200 /* SDL_WINDOWEVENT */;
      SDL.DOMEventToSDLEvent['blur']       = 0x200 /* SDL_WINDOWEVENT */;
  
      // These are not technically DOM events; the HTML gamepad API is poll-based.
      // However, we define them here, as the rest of the SDL code assumes that
      // all SDL events originate as DOM events.
      SDL.DOMEventToSDLEvent['joystick_axis_motion'] = 0x600 /* SDL_JOYAXISMOTION */;
      SDL.DOMEventToSDLEvent['joystick_button_down'] = 0x603 /* SDL_JOYBUTTONDOWN */;
      SDL.DOMEventToSDLEvent['joystick_button_up'] = 0x604 /* SDL_JOYBUTTONUP */;
      return 0; // success
    }

  function _glTexParameteri(x0, x1, x2) { GLctx.texParameteri(x0, x1, x2) }

  function _glMatrixMode(mode) {
      if (mode == 0x1700 /* GL_MODELVIEW */) {
        GLImmediate.currentMatrix = 0/*m*/;
      } else if (mode == 0x1701 /* GL_PROJECTION */) {
        GLImmediate.currentMatrix = 1/*p*/;
      } else if (mode == 0x1702) { // GL_TEXTURE
        GLImmediate.useTextureMatrix = true;
        GLImmediate.currentMatrix = 2/*t*/ + GLImmediate.clientActiveTexture;
      } else {
        throw "Wrong mode " + mode + " passed to glMatrixMode";
      }
    }

  
  function _lseek(fildes, offset, whence) {
      // off_t lseek(int fildes, off_t offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/lseek.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        return FS.llseek(stream, offset, whence);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fseek(stream, offset, whence) {
      // int fseek(FILE *stream, long offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fseek.html
      var fd = _fileno(stream);
      var ret = _lseek(fd, offset, whence);
      if (ret == -1) {
        return -1;
      }
      stream = FS.getStreamFromPtr(stream);
      stream.eof = false;
      return 0;
    }

  function _glOrtho(left, right, bottom, top_, nearVal, farVal) {
      GLImmediate.matricesModified = true;
      GLImmediate.matrixVersion[GLImmediate.currentMatrix] = (GLImmediate.matrixVersion[GLImmediate.currentMatrix] + 1)|0;
      GLImmediate.matrixLib.mat4.multiply(GLImmediate.matrix[GLImmediate.currentMatrix],
          GLImmediate.matrixLib.mat4.ortho(left, right, bottom, top_, nearVal, farVal));
    }

  function _atan2() {
  return Math_atan2.apply(null, arguments)
  }

   
  Module["_strcpy"] = _strcpy;

  function _exp() {
  return Math_exp.apply(null, arguments)
  }

  
  function _copysign(a, b) {
      return __reallyNegative(a) === __reallyNegative(b) ? a : -a;
    }function _copysignl() {
  return _copysign.apply(null, arguments)
  }

  var __ZTISt9exception=allocate([allocate([1,0,0,0,0,0,0], "i8", ALLOC_STATIC)+8, 0], "i32", ALLOC_STATIC);

  var ___dso_handle=allocate(1, "i32*", ALLOC_STATIC);


___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
var GLctx; GL.init()
FS.staticInit();__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
__ATINIT__.unshift({ func: function() { TTY.init() } });__ATEXIT__.push({ func: function() { TTY.shutdown() } });TTY.utf8 = new Runtime.UTF8Processor();
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); NODEFS.staticInit(); }
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas) { Browser.requestFullScreen(lockPointer, resizeCanvas) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
___buildEnvironment(ENV);
__ATINIT__.push({ func: function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); } });
GLEmulation.init();
GLImmediate.setupFuncs(); Browser.moduleContextCreatedCallbacks.push(function() { GLImmediate.init() });
_fgetc.ret = allocate([0], "i8", ALLOC_STATIC);
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + 5242880;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var ctlz_i8 = allocate([8,7,6,6,5,5,5,5,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_DYNAMIC);
 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);

  var Math_min = Math.min;
function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_d(x) { Module["printErr"]("Invalid function pointer called with signature 'd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_i(x) { Module["printErr"]("Invalid function pointer called with signature 'i'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_dd(x) { Module["printErr"]("Invalid function pointer called with signature 'dd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_d(index) {
  try {
    return Module["dynCall_d"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    Module["dynCall_viiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_i(index) {
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_dd(index,a1) {
  try {
    return Module["dynCall_dd"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

  function asmPrintInt(x, y) {
    Module.print('int ' + x + ',' + y);// + ' ' + new Error().stack);
  }
  function asmPrintFloat(x, y) {
    Module.print('float ' + x + ',' + y);// + ' ' + new Error().stack);
  }
  // EMSCRIPTEN_START_ASM
  var asm = (function(global, env, buffer) {
    'almost asm';
    var HEAP8 = new global.Int8Array(buffer);
    var HEAP16 = new global.Int16Array(buffer);
    var HEAP32 = new global.Int32Array(buffer);
    var HEAPU8 = new global.Uint8Array(buffer);
    var HEAPU16 = new global.Uint16Array(buffer);
    var HEAPU32 = new global.Uint32Array(buffer);
    var HEAPF32 = new global.Float32Array(buffer);
    var HEAPF64 = new global.Float64Array(buffer);
  
  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;
  var ctlz_i8=env.ctlz_i8|0;
  var ___rand_seed=env.___rand_seed|0;
  var __ZTISt9exception=env.__ZTISt9exception|0;
  var ___dso_handle=env.___dso_handle|0;
  var _stdin=env._stdin|0;

    var __THREW__ = 0;
    var threwValue = 0;
    var setjmpId = 0;
    var undef = 0;
    var nan = +env.NaN, inf = +env.Infinity;
    var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;
  
    var tempRet0 = 0;
    var tempRet1 = 0;
    var tempRet2 = 0;
    var tempRet3 = 0;
    var tempRet4 = 0;
    var tempRet5 = 0;
    var tempRet6 = 0;
    var tempRet7 = 0;
    var tempRet8 = 0;
    var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var abort=env.abort;
  var assert=env.assert;
  var asmPrintInt=env.asmPrintInt;
  var asmPrintFloat=env.asmPrintFloat;
  var Math_min=env.min;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_d=env.nullFunc_d;
  var nullFunc_viiiiiii=env.nullFunc_viiiiiii;
  var nullFunc_viiiii=env.nullFunc_viiiii;
  var nullFunc_i=env.nullFunc_i;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_dd=env.nullFunc_dd;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_viiiiii=env.nullFunc_viiiiii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_iiiiii=env.nullFunc_iiiiii;
  var nullFunc_viiii=env.nullFunc_viiii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_d=env.invoke_d;
  var invoke_viiiiiii=env.invoke_viiiiiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_i=env.invoke_i;
  var invoke_vi=env.invoke_vi;
  var invoke_dd=env.invoke_dd;
  var invoke_vii=env.invoke_vii;
  var invoke_ii=env.invoke_ii;
  var invoke_viii=env.invoke_viii;
  var invoke_v=env.invoke_v;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var invoke_iii=env.invoke_iii;
  var invoke_iiiiii=env.invoke_iiiiii;
  var invoke_viiii=env.invoke_viiii;
  var _glUseProgram=env._glUseProgram;
  var _fabs=env._fabs;
  var _exp=env._exp;
  var _Mix_Playing=env._Mix_Playing;
  var _fread=env._fread;
  var __ZSt9terminatev=env.__ZSt9terminatev;
  var _fmodl=env._fmodl;
  var ___assert_fail=env.___assert_fail;
  var _glDeleteProgram=env._glDeleteProgram;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var _glBindBuffer=env._glBindBuffer;
  var _Mix_Volume=env._Mix_Volume;
  var _fsync=env._fsync;
  var _SDL_GetError=env._SDL_GetError;
  var _sbrk=env._sbrk;
  var _glBlendFunc=env._glBlendFunc;
  var _glDisableVertexAttribArray=env._glDisableVertexAttribArray;
  var ___cxa_begin_catch=env.___cxa_begin_catch;
  var _glCreateShader=env._glCreateShader;
  var _sysconf=env._sysconf;
  var _close=env._close;
  var _Mix_PlayMusic=env._Mix_PlayMusic;
  var _cos=env._cos;
  var _readdir=env._readdir;
  var _glLoadIdentity=env._glLoadIdentity;
  var _glMatrixMode=env._glMatrixMode;
  var _write=env._write;
  var _ftell=env._ftell;
  var _glShaderSource=env._glShaderSource;
  var __ZNSt9exceptionD2Ev=env.__ZNSt9exceptionD2Ev;
  var ___cxa_atexit=env.___cxa_atexit;
  var ___cxa_does_inherit=env.___cxa_does_inherit;
  var _glVertexPointer=env._glVertexPointer;
  var _glOrtho=env._glOrtho;
  var _Mix_HaltMusic=env._Mix_HaltMusic;
  var _mknod=env._mknod;
  var _mkdir=env._mkdir;
  var _closedir=env._closedir;
  var _llvm_trap=env._llvm_trap;
  var _SDL_RWFromFile=env._SDL_RWFromFile;
  var _glVertexAttribPointer=env._glVertexAttribPointer;
  var _glHint=env._glHint;
  var __reallyNegative=env.__reallyNegative;
  var _send=env._send;
  var _SDL_GL_SetAttribute=env._SDL_GL_SetAttribute;
  var _atan2=env._atan2;
  var ___cxa_is_number_type=env.___cxa_is_number_type;
  var _Mix_CloseAudio=env._Mix_CloseAudio;
  var ___cxa_free_exception=env.___cxa_free_exception;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var _opendir=env._opendir;
  var _SDL_LockSurface=env._SDL_LockSurface;
  var _strerror_r=env._strerror_r;
  var _glViewport=env._glViewport;
  var _glGetBooleanv=env._glGetBooleanv;
  var ___setErrNo=env.___setErrNo;
  var _glDeleteTextures=env._glDeleteTextures;
  var ___resumeException=env.___resumeException;
  var _srand=env._srand;
  var ___cxa_call_unexpected=env.___cxa_call_unexpected;
  var _glEnable=env._glEnable;
  var _printf=env._printf;
  var _glGenTextures=env._glGenTextures;
  var _glGetIntegerv=env._glGetIntegerv;
  var _glGetString=env._glGetString;
  var _localtime=env._localtime;
  var _emscripten_get_now=env._emscripten_get_now;
  var _stat=env._stat;
  var _glAttachShader=env._glAttachShader;
  var _read=env._read;
  var _clock_gettime=env._clock_gettime;
  var _SDL_SetVideoMode=env._SDL_SetVideoMode;
  var _fwrite=env._fwrite;
  var _time=env._time;
  var _fprintf=env._fprintf;
  var _glDetachShader=env._glDetachShader;
  var _gettimeofday=env._gettimeofday;
  var _pwrite=env._pwrite;
  var _exit=env._exit;
  var _readdir_r=env._readdir_r;
  var _putenv=env._putenv;
  var _llvm_pow_f64=env._llvm_pow_f64;
  var _getcwd=env._getcwd;
  var _IMG_Load=env._IMG_Load;
  var _fmod=env._fmod;
  var _lseek=env._lseek;
  var ___cxa_allocate_exception=env.___cxa_allocate_exception;
  var _getchar=env._getchar;
  var ___buildEnvironment=env.___buildEnvironment;
  var _glEnableClientState=env._glEnableClientState;
  var _chdir=env._chdir;
  var _localtime_r=env._localtime_r;
  var _tzset=env._tzset;
  var _open=env._open;
  var _glClearColor=env._glClearColor;
  var _glIsEnabled=env._glIsEnabled;
  var _SDL_Init=env._SDL_Init;
  var ___cxa_end_catch=env.___cxa_end_catch;
  var _glGetFloatv=env._glGetFloatv;
  var _Mix_PlayChannel=env._Mix_PlayChannel;
  var _Mix_Init=env._Mix_Init;
  var _glDrawArrays=env._glDrawArrays;
  var _TTF_RenderText_Solid=env._TTF_RenderText_Solid;
  var _fseek=env._fseek;
  var _getenv=env._getenv;
  var _fclose=env._fclose;
  var _SDL_UpperBlit=env._SDL_UpperBlit;
  var _log=env._log;
  var _glActiveTexture=env._glActiveTexture;
  var _glTexCoordPointer=env._glTexCoordPointer;
  var _recv=env._recv;
  var _tan=env._tan;
  var _fgetc=env._fgetc;
  var _glCompileShader=env._glCompileShader;
  var _glEnableVertexAttribArray=env._glEnableVertexAttribArray;
  var _abort=env._abort;
  var _Mix_PlayChannelTimed=env._Mix_PlayChannelTimed;
  var _abs=env._abs;
  var _glTexImage2D=env._glTexImage2D;
  var _fopen=env._fopen;
  var _Mix_ReserveChannels=env._Mix_ReserveChannels;
  var _glDisableClientState=env._glDisableClientState;
  var _Mix_LoadWAV_RW=env._Mix_LoadWAV_RW;
  var _sin=env._sin;
  var _SDL_GetTicks=env._SDL_GetTicks;
  var _SDL_CloseAudio=env._SDL_CloseAudio;
  var ___gxx_personality_v0=env.___gxx_personality_v0;
  var _emscripten_asm_const_int=env._emscripten_asm_const_int;
  var _glTexParameteri=env._glTexParameteri;
  var _ungetc=env._ungetc;
  var _glLinkProgram=env._glLinkProgram;
  var _SDL_FreeRW=env._SDL_FreeRW;
  var _glColorPointer=env._glColorPointer;
  var _SDL_PauseAudio=env._SDL_PauseAudio;
  var _llvm_eh_typeid_for=env._llvm_eh_typeid_for;
  var _SDL_PollEvent=env._SDL_PollEvent;
  var _Mix_OpenAudio=env._Mix_OpenAudio;
  var _strerror=env._strerror;
  var _glClear=env._glClear;
  var _fileno=env._fileno;
  var _Mix_FreeChunk=env._Mix_FreeChunk;
  var _glBindTexture=env._glBindTexture;
  var __exit=env.__exit;
  var _IMG_Load_RW=env._IMG_Load_RW;
  var _glBindAttribLocation=env._glBindAttribLocation;
  var _glPixelStorei=env._glPixelStorei;
  var _unlink=env._unlink;
  var _Mix_HaltChannel=env._Mix_HaltChannel;
  var _pread=env._pread;
  var _mkport=env._mkport;
  var _fflush=env._fflush;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var ___errno_location=env.___errno_location;
  var _copysign=env._copysign;
  var ___cxa_throw=env.___cxa_throw;
  var _Mix_Quit=env._Mix_Quit;
  var _copysignl=env._copysignl;
  var _SDL_GL_SwapBuffers=env._SDL_GL_SwapBuffers;
  var _glDisable=env._glDisable;
  var _modf=env._modf;
  var _emscripten_cancel_main_loop=env._emscripten_cancel_main_loop;
  var __formatString=env.__formatString;
  var _atexit=env._atexit;
  var _sqrt=env._sqrt;
  var _SDL_RWFromConstMem=env._SDL_RWFromConstMem;
  var tempFloat = 0.0;

  // EMSCRIPTEN_START_FUNCS
  function stackAlloc(size) {
    size = size|0;
    var ret = 0;
    ret = STACKTOP;
    STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 7)&-8;
    return ret|0;
  }
  function stackSave() {
    return STACKTOP|0;
  }
  function stackRestore(top) {
    top = top|0;
    STACKTOP = top;
  }
  function setThrew(threw, value) {
    threw = threw|0;
    value = value|0;
    if ((__THREW__|0) == 0) {
      __THREW__ = threw;
      threwValue = value;
    }
  }
  function copyTempFloat(ptr) {
    ptr = ptr|0;
    HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
    HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
    HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
    HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
  }
  function copyTempDouble(ptr) {
    ptr = ptr|0;
    HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
    HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
    HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
    HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
    HEAP8[tempDoublePtr+4>>0] = HEAP8[ptr+4>>0];
    HEAP8[tempDoublePtr+5>>0] = HEAP8[ptr+5>>0];
    HEAP8[tempDoublePtr+6>>0] = HEAP8[ptr+6>>0];
    HEAP8[tempDoublePtr+7>>0] = HEAP8[ptr+7>>0];
  }
  function setTempRet0(value) {
    value = value|0;
    tempRet0 = value;
  }
  function getTempRet0() {
    return tempRet0|0;
  }
  
function __Z8dpm_openPc($fname) {
 $fname = $fname|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $fname;
 $2 = $1; //@line 136 "../hsp3/dpmread.cpp"
 (__ZL11dpm_chkmemfPc($2)|0); //@line 136 "../hsp3/dpmread.cpp"
 $3 = HEAP32[8>>2]|0; //@line 137 "../hsp3/dpmread.cpp"
 $4 = ($3|0)!=(0); //@line 137 "../hsp3/dpmread.cpp"
 L1: do {
  if ($4) {
   HEAP32[((16 + 4|0))>>2] = 0; //@line 138 "../hsp3/dpmread.cpp"
   $5 = HEAP32[((16 + 8|0))>>2]|0; //@line 139 "../hsp3/dpmread.cpp"
   $6 = ($5|0)<(0); //@line 139 "../hsp3/dpmread.cpp"
   if ($6) {
    $0 = 0; //@line 139 "../hsp3/dpmread.cpp"
    break;
   } else {
    $0 = 16; //@line 140 "../hsp3/dpmread.cpp"
    break;
   }
  } else {
   $7 = HEAP32[32>>2]|0; //@line 142 "../hsp3/dpmread.cpp"
   $8 = ($7|0)!=(0); //@line 142 "../hsp3/dpmread.cpp"
   do {
    if ($8) {
     $9 = $1; //@line 143 "../hsp3/dpmread.cpp"
     $10 = (__ZL6dpmchkPc($9)|0); //@line 143 "../hsp3/dpmread.cpp"
     $11 = ($10|0)==(0); //@line 143 "../hsp3/dpmread.cpp"
     if ($11) {
      $12 = HEAP32[40>>2]|0; //@line 144 "../hsp3/dpmread.cpp"
      $0 = $12; //@line 144 "../hsp3/dpmread.cpp"
      break L1;
     } else {
      break;
     }
    }
   } while(0);
   $13 = $1; //@line 147 "../hsp3/dpmread.cpp"
   $14 = (_fopen(($13|0),(48|0))|0); //@line 147 "../hsp3/dpmread.cpp"
   HEAP32[40>>2] = $14; //@line 147 "../hsp3/dpmread.cpp"
   $15 = HEAP32[40>>2]|0; //@line 148 "../hsp3/dpmread.cpp"
   $0 = $15; //@line 148 "../hsp3/dpmread.cpp"
  }
 } while(0);
 $16 = $0; //@line 149 "../hsp3/dpmread.cpp"
 STACKTOP = sp;return ($16|0); //@line 149 "../hsp3/dpmread.cpp"
}
function __ZL11dpm_chkmemfPc($fname) {
 $fname = $fname|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $p = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0;
 $tmp = sp + 16|0;
 $1 = $fname;
 HEAP32[8>>2] = 0; //@line 113 "../hsp3/dpmread.cpp"
 $2 = $1; //@line 114 "../hsp3/dpmread.cpp"
 $3 = HEAP32[$2>>2]|0; //@line 114 "../hsp3/dpmread.cpp"
 $i = $3; //@line 114 "../hsp3/dpmread.cpp"
 $4 = $i; //@line 115 "../hsp3/dpmread.cpp"
 $5 = ($4|0)==(978145348); //@line 115 "../hsp3/dpmread.cpp"
 if (!($5)) {
  $6 = $i; //@line 115 "../hsp3/dpmread.cpp"
  $7 = ($6|0)==(980250724); //@line 115 "../hsp3/dpmread.cpp"
  if (!($7)) {
   $19 = $i; //@line 126 "../hsp3/dpmread.cpp"
   $20 = ($19|0)==(978142541); //@line 126 "../hsp3/dpmread.cpp"
   if (!($20)) {
    $21 = $i; //@line 126 "../hsp3/dpmread.cpp"
    $22 = ($21|0)==(980247917); //@line 126 "../hsp3/dpmread.cpp"
    if (!($22)) {
     $0 = 0; //@line 130 "../hsp3/dpmread.cpp"
     $23 = $0; //@line 130 "../hsp3/dpmread.cpp"
     STACKTOP = sp;return ($23|0); //@line 130 "../hsp3/dpmread.cpp"
    }
   }
   HEAP32[8>>2] = 1; //@line 127 "../hsp3/dpmread.cpp"
   $0 = 1; //@line 128 "../hsp3/dpmread.cpp"
   $23 = $0; //@line 130 "../hsp3/dpmread.cpp"
   STACKTOP = sp;return ($23|0); //@line 130 "../hsp3/dpmread.cpp"
  }
 }
 $8 = $1; //@line 116 "../hsp3/dpmread.cpp"
 $9 = (($8) + 4|0); //@line 116 "../hsp3/dpmread.cpp"
 $10 = (__Z7strchr2Pcc($9,58)|0); //@line 116 "../hsp3/dpmread.cpp"
 $p = $10; //@line 116 "../hsp3/dpmread.cpp"
 __Z7dpm_byev(); //@line 117 "../hsp3/dpmread.cpp"
 $11 = $p; //@line 118 "../hsp3/dpmread.cpp"
 $12 = ($11|0)!=(0|0); //@line 118 "../hsp3/dpmread.cpp"
 if ($12) {
  $13 = $p; //@line 119 "../hsp3/dpmread.cpp"
  HEAP8[$13>>0] = 0; //@line 119 "../hsp3/dpmread.cpp"
  $14 = $p; //@line 120 "../hsp3/dpmread.cpp"
  $15 = (($14) + 1|0); //@line 120 "../hsp3/dpmread.cpp"
  (_strcpy(($tmp|0),($15|0))|0); //@line 120 "../hsp3/dpmread.cpp"
  $16 = $1; //@line 121 "../hsp3/dpmread.cpp"
  $17 = (($16) + 4|0); //@line 121 "../hsp3/dpmread.cpp"
  (__Z7dpm_iniPclii($17,0,-1,-1)|0); //@line 121 "../hsp3/dpmread.cpp"
  $18 = $1; //@line 122 "../hsp3/dpmread.cpp"
  (_strcpy(($18|0),($tmp|0))|0); //@line 122 "../hsp3/dpmread.cpp"
 }
 $0 = 0; //@line 124 "../hsp3/dpmread.cpp"
 $23 = $0; //@line 130 "../hsp3/dpmread.cpp"
 STACKTOP = sp;return ($23|0); //@line 130 "../hsp3/dpmread.cpp"
}
function __ZL6dpmchkPc($fname) {
 $fname = $fname|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a1 = 0, $a2 = 0, $c1 = 0, $f1 = 0, $ss = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0;
 $f1 = sp + 24|0;
 $1 = $fname;
 HEAP32[504>>2] = 0; //@line 70 "../hsp3/dpmread.cpp"
 HEAP32[512>>2] = 0; //@line 71 "../hsp3/dpmread.cpp"
 HEAP32[520>>2] = 0; //@line 72 "../hsp3/dpmread.cpp"
 HEAP32[528>>2] = 0; //@line 72 "../hsp3/dpmread.cpp"
 $a1 = 0; //@line 74 "../hsp3/dpmread.cpp"
 while(1) {
  $2 = $a1; //@line 75 "../hsp3/dpmread.cpp"
  $3 = $1; //@line 75 "../hsp3/dpmread.cpp"
  $4 = (($3) + ($2)|0); //@line 75 "../hsp3/dpmread.cpp"
  $5 = HEAP8[$4>>0]|0; //@line 75 "../hsp3/dpmread.cpp"
  $c1 = $5; //@line 75 "../hsp3/dpmread.cpp"
  $6 = $c1; //@line 75 "../hsp3/dpmread.cpp"
  $7 = $6 << 24 >> 24; //@line 75 "../hsp3/dpmread.cpp"
  $8 = (_tolower($7)|0); //@line 75 "../hsp3/dpmread.cpp"
  $9 = $8&255; //@line 75 "../hsp3/dpmread.cpp"
  $10 = $a1; //@line 75 "../hsp3/dpmread.cpp"
  $11 = (($f1) + ($10)|0); //@line 75 "../hsp3/dpmread.cpp"
  HEAP8[$11>>0] = $9; //@line 75 "../hsp3/dpmread.cpp"
  $12 = $c1; //@line 76 "../hsp3/dpmread.cpp"
  $13 = $12 << 24 >> 24; //@line 76 "../hsp3/dpmread.cpp"
  $14 = ($13|0)==(0); //@line 76 "../hsp3/dpmread.cpp"
  if ($14) {
   break;
  }
  $15 = $a1; //@line 77 "../hsp3/dpmread.cpp"
  $16 = (($15) + 1)|0; //@line 77 "../hsp3/dpmread.cpp"
  $a1 = $16; //@line 77 "../hsp3/dpmread.cpp"
 }
 $17 = HEAP32[72>>2]|0; //@line 80 "../hsp3/dpmread.cpp"
 $18 = ($17|0)==(0|0); //@line 80 "../hsp3/dpmread.cpp"
 if ($18) {
  $0 = -1; //@line 80 "../hsp3/dpmread.cpp"
  $45 = $0; //@line 101 "../hsp3/dpmread.cpp"
  STACKTOP = sp;return ($45|0); //@line 101 "../hsp3/dpmread.cpp"
 }
 $a2 = -1; //@line 81 "../hsp3/dpmread.cpp"
 $19 = HEAP32[72>>2]|0; //@line 82 "../hsp3/dpmread.cpp"
 $20 = (($19) + 16|0); //@line 82 "../hsp3/dpmread.cpp"
 $ss = $20; //@line 82 "../hsp3/dpmread.cpp"
 $a1 = 0; //@line 83 "../hsp3/dpmread.cpp"
 while(1) {
  $21 = $a1; //@line 83 "../hsp3/dpmread.cpp"
  $22 = HEAP32[208>>2]|0; //@line 83 "../hsp3/dpmread.cpp"
  $23 = ($21|0)<($22|0); //@line 83 "../hsp3/dpmread.cpp"
  if (!($23)) {
   break;
  }
  $24 = $ss; //@line 84 "../hsp3/dpmread.cpp"
  $25 = (_strcmp($24,$f1)|0); //@line 84 "../hsp3/dpmread.cpp"
  $26 = ($25|0)==(0); //@line 84 "../hsp3/dpmread.cpp"
  if ($26) {
   label = 10;
   break;
  }
  $29 = $ss; //@line 89 "../hsp3/dpmread.cpp"
  $30 = (($29) + 32|0); //@line 89 "../hsp3/dpmread.cpp"
  $ss = $30; //@line 89 "../hsp3/dpmread.cpp"
  $31 = $a1; //@line 83 "../hsp3/dpmread.cpp"
  $32 = (($31) + 1)|0; //@line 83 "../hsp3/dpmread.cpp"
  $a1 = $32; //@line 83 "../hsp3/dpmread.cpp"
 }
 if ((label|0) == 10) {
  $27 = $ss; //@line 85 "../hsp3/dpmread.cpp"
  dest=80+0|0; src=$27+0|0; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0)); //@line 85 "../hsp3/dpmread.cpp"
  $28 = $a1; //@line 86 "../hsp3/dpmread.cpp"
  $a2 = $28; //@line 86 "../hsp3/dpmread.cpp"
 }
 $33 = $a2; //@line 91 "../hsp3/dpmread.cpp"
 $34 = ($33|0)==(-1); //@line 91 "../hsp3/dpmread.cpp"
 if ($34) {
  $0 = -1; //@line 91 "../hsp3/dpmread.cpp"
  $45 = $0; //@line 101 "../hsp3/dpmread.cpp"
  STACKTOP = sp;return ($45|0); //@line 101 "../hsp3/dpmread.cpp"
 }
 $35 = HEAP32[((80 + 28|0))>>2]|0; //@line 93 "../hsp3/dpmread.cpp"
 HEAP32[480>>2] = $35; //@line 93 "../hsp3/dpmread.cpp"
 $36 = HEAP32[((80 + 24|0))>>2]|0; //@line 94 "../hsp3/dpmread.cpp"
 HEAP32[488>>2] = $36; //@line 94 "../hsp3/dpmread.cpp"
 $37 = (_fopen((224|0),(48|0))|0); //@line 95 "../hsp3/dpmread.cpp"
 HEAP32[40>>2] = $37; //@line 95 "../hsp3/dpmread.cpp"
 $38 = HEAP32[40>>2]|0; //@line 95 "../hsp3/dpmread.cpp"
 $39 = ($38|0)==(0|0); //@line 95 "../hsp3/dpmread.cpp"
 if ($39) {
  $0 = -1; //@line 95 "../hsp3/dpmread.cpp"
  $45 = $0; //@line 101 "../hsp3/dpmread.cpp"
  STACKTOP = sp;return ($45|0); //@line 101 "../hsp3/dpmread.cpp"
 } else {
  $40 = HEAP32[40>>2]|0; //@line 97 "../hsp3/dpmread.cpp"
  $41 = HEAP32[488>>2]|0; //@line 97 "../hsp3/dpmread.cpp"
  $42 = HEAP32[56>>2]|0; //@line 97 "../hsp3/dpmread.cpp"
  $43 = (($41) + ($42))|0; //@line 97 "../hsp3/dpmread.cpp"
  (_fseek(($40|0),($43|0),0)|0); //@line 97 "../hsp3/dpmread.cpp"
  $44 = HEAP32[((80 + 20|0))>>2]|0; //@line 98 "../hsp3/dpmread.cpp"
  HEAP32[512>>2] = $44; //@line 98 "../hsp3/dpmread.cpp"
  HEAP8[536>>0] = 0; //@line 99 "../hsp3/dpmread.cpp"
  HEAP32[504>>2] = 1; //@line 100 "../hsp3/dpmread.cpp"
  $0 = 0; //@line 101 "../hsp3/dpmread.cpp"
  $45 = $0; //@line 101 "../hsp3/dpmread.cpp"
  STACKTOP = sp;return ($45|0); //@line 101 "../hsp3/dpmread.cpp"
 }
 return 0|0;
}
function __Z9dpm_closev() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[8>>2]|0; //@line 154 "../hsp3/dpmread.cpp"
 $1 = ($0|0)!=(0); //@line 154 "../hsp3/dpmread.cpp"
 if ($1) {
 } else {
  $2 = HEAP32[40>>2]|0; //@line 155 "../hsp3/dpmread.cpp"
  (_fclose(($2|0))|0); //@line 155 "../hsp3/dpmread.cpp"
 }
 STACKTOP = sp;return; //@line 155 "../hsp3/dpmread.cpp"
}
function __Z9dpm_freadPviP8_IO_FILE($mem,$size,$stream) {
 $mem = $mem|0;
 $size = $size|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $len = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = $mem;
 $2 = $size;
 $3 = $stream;
 $4 = HEAP32[8>>2]|0; //@line 167 "../hsp3/dpmread.cpp"
 $5 = ($4|0)!=(0); //@line 167 "../hsp3/dpmread.cpp"
 if (!($5)) {
  $26 = $1; //@line 176 "../hsp3/dpmread.cpp"
  $27 = $2; //@line 176 "../hsp3/dpmread.cpp"
  $28 = $3; //@line 176 "../hsp3/dpmread.cpp"
  $29 = (_fread(($26|0),1,($27|0),($28|0))|0); //@line 176 "../hsp3/dpmread.cpp"
  $len = $29; //@line 176 "../hsp3/dpmread.cpp"
  $30 = $len; //@line 177 "../hsp3/dpmread.cpp"
  $0 = $30; //@line 177 "../hsp3/dpmread.cpp"
  $31 = $0; //@line 178 "../hsp3/dpmread.cpp"
  STACKTOP = sp;return ($31|0); //@line 178 "../hsp3/dpmread.cpp"
 }
 $6 = $2; //@line 168 "../hsp3/dpmread.cpp"
 $len = $6; //@line 168 "../hsp3/dpmread.cpp"
 $7 = HEAP32[((16 + 4|0))>>2]|0; //@line 169 "../hsp3/dpmread.cpp"
 $8 = $2; //@line 169 "../hsp3/dpmread.cpp"
 $9 = (($7) + ($8))|0; //@line 169 "../hsp3/dpmread.cpp"
 $10 = HEAP32[((16 + 8|0))>>2]|0; //@line 169 "../hsp3/dpmread.cpp"
 $11 = ($9|0)>=($10|0); //@line 169 "../hsp3/dpmread.cpp"
 if ($11) {
  $12 = HEAP32[((16 + 8|0))>>2]|0; //@line 169 "../hsp3/dpmread.cpp"
  $13 = HEAP32[((16 + 4|0))>>2]|0; //@line 169 "../hsp3/dpmread.cpp"
  $14 = (($12) - ($13))|0; //@line 169 "../hsp3/dpmread.cpp"
  $len = $14; //@line 169 "../hsp3/dpmread.cpp"
 }
 $15 = $len; //@line 170 "../hsp3/dpmread.cpp"
 $16 = ($15|0)>(0); //@line 170 "../hsp3/dpmread.cpp"
 if ($16) {
  $17 = $1; //@line 171 "../hsp3/dpmread.cpp"
  $18 = HEAP32[16>>2]|0; //@line 171 "../hsp3/dpmread.cpp"
  $19 = HEAP32[((16 + 4|0))>>2]|0; //@line 171 "../hsp3/dpmread.cpp"
  $20 = (($18) + ($19)|0); //@line 171 "../hsp3/dpmread.cpp"
  $21 = $len; //@line 171 "../hsp3/dpmread.cpp"
  _memcpy(($17|0),($20|0),($21|0))|0; //@line 171 "../hsp3/dpmread.cpp"
  $22 = $len; //@line 172 "../hsp3/dpmread.cpp"
  $23 = HEAP32[((16 + 4|0))>>2]|0; //@line 172 "../hsp3/dpmread.cpp"
  $24 = (($23) + ($22))|0; //@line 172 "../hsp3/dpmread.cpp"
  HEAP32[((16 + 4|0))>>2] = $24; //@line 172 "../hsp3/dpmread.cpp"
 }
 $25 = $len; //@line 174 "../hsp3/dpmread.cpp"
 $0 = $25; //@line 174 "../hsp3/dpmread.cpp"
 $31 = $0; //@line 178 "../hsp3/dpmread.cpp"
 STACKTOP = sp;return ($31|0); //@line 178 "../hsp3/dpmread.cpp"
}
function __Z7dpm_iniPclii($fname,$dpmofs,$chksum,$deckey) {
 $fname = $fname|0;
 $dpmofs = $dpmofs|0;
 $chksum = $chksum|0;
 $deckey = $deckey|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $a1 = 0, $dirsize = 0, $dpmfile = 0, $hedsize = 0, $namsize = 0, $sum = 0;
 var $sumseed = 0, $sumsize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0;
 $dpmfile = sp + 48|0;
 $1 = $fname;
 $2 = $dpmofs;
 $3 = $chksum;
 $4 = $deckey;
 HEAP32[56>>2] = 0; //@line 195 "../hsp3/dpmread.cpp"
 HEAP32[32>>2] = 0; //@line 196 "../hsp3/dpmread.cpp"
 HEAP32[8>>2] = 0; //@line 197 "../hsp3/dpmread.cpp"
 $5 = $2; //@line 198 "../hsp3/dpmread.cpp"
 HEAP32[64>>2] = $5; //@line 198 "../hsp3/dpmread.cpp"
 HEAP32[72>>2] = 0; //@line 199 "../hsp3/dpmread.cpp"
 $6 = $1; //@line 208 "../hsp3/dpmread.cpp"
 (_strcpy(($dpmfile|0),($6|0))|0); //@line 208 "../hsp3/dpmread.cpp"
 $7 = (_fopen(($dpmfile|0),(48|0))|0); //@line 211 "../hsp3/dpmread.cpp"
 HEAP32[40>>2] = $7; //@line 211 "../hsp3/dpmread.cpp"
 $8 = HEAP32[40>>2]|0; //@line 212 "../hsp3/dpmread.cpp"
 $9 = ($8|0)==(0|0); //@line 212 "../hsp3/dpmread.cpp"
 if ($9) {
  $0 = -1; //@line 212 "../hsp3/dpmread.cpp"
  $73 = $0; //@line 259 "../hsp3/dpmread.cpp"
  STACKTOP = sp;return ($73|0); //@line 259 "../hsp3/dpmread.cpp"
 }
 $10 = $2; //@line 214 "../hsp3/dpmread.cpp"
 $11 = ($10|0)>(0); //@line 214 "../hsp3/dpmread.cpp"
 if ($11) {
  $12 = HEAP32[40>>2]|0; //@line 214 "../hsp3/dpmread.cpp"
  $13 = $2; //@line 214 "../hsp3/dpmread.cpp"
  (_fseek(($12|0),($13|0),0)|0); //@line 214 "../hsp3/dpmread.cpp"
 }
 $14 = HEAP32[40>>2]|0; //@line 216 "../hsp3/dpmread.cpp"
 (_fread((80|0),16,1,($14|0))|0); //@line 216 "../hsp3/dpmread.cpp"
 $15 = HEAP32[((80 + 4|0))>>2]|0; //@line 217 "../hsp3/dpmread.cpp"
 $16 = $2; //@line 217 "../hsp3/dpmread.cpp"
 $17 = (($15) + ($16))|0; //@line 217 "../hsp3/dpmread.cpp"
 HEAP32[56>>2] = $17; //@line 217 "../hsp3/dpmread.cpp"
 $18 = HEAP32[((80 + 8|0))>>2]|0; //@line 218 "../hsp3/dpmread.cpp"
 HEAP32[208>>2] = $18; //@line 218 "../hsp3/dpmread.cpp"
 $19 = HEAP32[40>>2]|0; //@line 219 "../hsp3/dpmread.cpp"
 (_fclose(($19|0))|0); //@line 219 "../hsp3/dpmread.cpp"
 HEAP8[((80 + 4|0))>>0] = 0; //@line 221 "../hsp3/dpmread.cpp"
 $20 = (_strcmp(80,216)|0); //@line 221 "../hsp3/dpmread.cpp"
 $21 = ($20|0)!=(0); //@line 221 "../hsp3/dpmread.cpp"
 if ($21) {
  $0 = -1; //@line 222 "../hsp3/dpmread.cpp"
  $73 = $0; //@line 259 "../hsp3/dpmread.cpp"
  STACKTOP = sp;return ($73|0); //@line 259 "../hsp3/dpmread.cpp"
 }
 $22 = HEAP32[((80 + 12|0))>>2]|0; //@line 225 "../hsp3/dpmread.cpp"
 $namsize = $22; //@line 225 "../hsp3/dpmread.cpp"
 $23 = HEAP32[208>>2]|0; //@line 226 "../hsp3/dpmread.cpp"
 $24 = $23<<5; //@line 226 "../hsp3/dpmread.cpp"
 $dirsize = $24; //@line 226 "../hsp3/dpmread.cpp"
 $25 = $namsize; //@line 227 "../hsp3/dpmread.cpp"
 $26 = (16 + ($25))|0; //@line 227 "../hsp3/dpmread.cpp"
 $27 = $dirsize; //@line 227 "../hsp3/dpmread.cpp"
 $28 = (($26) + ($27))|0; //@line 227 "../hsp3/dpmread.cpp"
 $hedsize = $28; //@line 227 "../hsp3/dpmread.cpp"
 $29 = $hedsize; //@line 228 "../hsp3/dpmread.cpp"
 $30 = (_malloc($29)|0); //@line 228 "../hsp3/dpmread.cpp"
 HEAP32[72>>2] = $30; //@line 228 "../hsp3/dpmread.cpp"
 $31 = HEAP32[72>>2]|0; //@line 229 "../hsp3/dpmread.cpp"
 $32 = ($31|0)==(0|0); //@line 229 "../hsp3/dpmread.cpp"
 if ($32) {
  $0 = -1; //@line 229 "../hsp3/dpmread.cpp"
  $73 = $0; //@line 259 "../hsp3/dpmread.cpp"
  STACKTOP = sp;return ($73|0); //@line 259 "../hsp3/dpmread.cpp"
 }
 $33 = (_fopen(($dpmfile|0),(48|0))|0); //@line 233 "../hsp3/dpmread.cpp"
 HEAP32[40>>2] = $33; //@line 233 "../hsp3/dpmread.cpp"
 $34 = $2; //@line 234 "../hsp3/dpmread.cpp"
 $35 = ($34|0)>(0); //@line 234 "../hsp3/dpmread.cpp"
 if ($35) {
  $36 = HEAP32[40>>2]|0; //@line 234 "../hsp3/dpmread.cpp"
  $37 = $2; //@line 234 "../hsp3/dpmread.cpp"
  (_fseek(($36|0),($37|0),0)|0); //@line 234 "../hsp3/dpmread.cpp"
 }
 $38 = HEAP32[72>>2]|0; //@line 235 "../hsp3/dpmread.cpp"
 $39 = $hedsize; //@line 235 "../hsp3/dpmread.cpp"
 $40 = HEAP32[40>>2]|0; //@line 235 "../hsp3/dpmread.cpp"
 (_fread(($38|0),($39|0),1,($40|0))|0); //@line 235 "../hsp3/dpmread.cpp"
 $41 = HEAP32[40>>2]|0; //@line 236 "../hsp3/dpmread.cpp"
 (_fclose(($41|0))|0); //@line 236 "../hsp3/dpmread.cpp"
 $sum = 0; //@line 240 "../hsp3/dpmread.cpp"
 $sumsize = 0; //@line 240 "../hsp3/dpmread.cpp"
 $42 = $4; //@line 241 "../hsp3/dpmread.cpp"
 $43 = $42 >> 24; //@line 241 "../hsp3/dpmread.cpp"
 $44 = $43 & 255; //@line 241 "../hsp3/dpmread.cpp"
 $45 = (($44|0) / 7)&-1; //@line 241 "../hsp3/dpmread.cpp"
 $sumseed = $45; //@line 241 "../hsp3/dpmread.cpp"
 $46 = $3; //@line 242 "../hsp3/dpmread.cpp"
 $47 = ($46|0)!=(-1); //@line 242 "../hsp3/dpmread.cpp"
 do {
  if ($47) {
   $48 = (_fopen(($dpmfile|0),(48|0))|0); //@line 243 "../hsp3/dpmread.cpp"
   HEAP32[40>>2] = $48; //@line 243 "../hsp3/dpmread.cpp"
   $49 = $2; //@line 244 "../hsp3/dpmread.cpp"
   $50 = ($49|0)>(0); //@line 244 "../hsp3/dpmread.cpp"
   if ($50) {
    $51 = HEAP32[40>>2]|0; //@line 244 "../hsp3/dpmread.cpp"
    $52 = $2; //@line 244 "../hsp3/dpmread.cpp"
    (_fseek(($51|0),($52|0),0)|0); //@line 244 "../hsp3/dpmread.cpp"
   }
   while(1) {
    $53 = HEAP32[40>>2]|0; //@line 246 "../hsp3/dpmread.cpp"
    $54 = (_fgetc(($53|0))|0); //@line 246 "../hsp3/dpmread.cpp"
    $a1 = $54; //@line 246 "../hsp3/dpmread.cpp"
    $55 = $a1; //@line 246 "../hsp3/dpmread.cpp"
    $56 = ($55|0)<(0); //@line 246 "../hsp3/dpmread.cpp"
    if ($56) {
     break;
    }
    $57 = $a1; //@line 247 "../hsp3/dpmread.cpp"
    $58 = $sumseed; //@line 247 "../hsp3/dpmread.cpp"
    $59 = (($57) + ($58))|0; //@line 247 "../hsp3/dpmread.cpp"
    $60 = $sum; //@line 247 "../hsp3/dpmread.cpp"
    $61 = (($60) + ($59))|0; //@line 247 "../hsp3/dpmread.cpp"
    $sum = $61; //@line 247 "../hsp3/dpmread.cpp"
    $62 = $sumsize; //@line 247 "../hsp3/dpmread.cpp"
    $63 = (($62) + 1)|0; //@line 247 "../hsp3/dpmread.cpp"
    $sumsize = $63; //@line 247 "../hsp3/dpmread.cpp"
   }
   $64 = HEAP32[40>>2]|0; //@line 249 "../hsp3/dpmread.cpp"
   (_fclose(($64|0))|0); //@line 249 "../hsp3/dpmread.cpp"
   $65 = $sum; //@line 250 "../hsp3/dpmread.cpp"
   $66 = $65 & 65535; //@line 250 "../hsp3/dpmread.cpp"
   $sum = $66; //@line 250 "../hsp3/dpmread.cpp"
   $67 = $3; //@line 251 "../hsp3/dpmread.cpp"
   $68 = $sum; //@line 251 "../hsp3/dpmread.cpp"
   $69 = ($67|0)!=($68|0); //@line 251 "../hsp3/dpmread.cpp"
   if (!($69)) {
    $70 = $hedsize; //@line 252 "../hsp3/dpmread.cpp"
    $71 = $sumsize; //@line 252 "../hsp3/dpmread.cpp"
    $72 = (($71) - ($70))|0; //@line 252 "../hsp3/dpmread.cpp"
    $sumsize = $72; //@line 252 "../hsp3/dpmread.cpp"
    break;
   }
   $0 = -2; //@line 251 "../hsp3/dpmread.cpp"
   $73 = $0; //@line 259 "../hsp3/dpmread.cpp"
   STACKTOP = sp;return ($73|0); //@line 259 "../hsp3/dpmread.cpp"
  }
 } while(0);
 HEAP32[32>>2] = 1; //@line 257 "../hsp3/dpmread.cpp"
 (_strcpy((224|0),($dpmfile|0))|0); //@line 258 "../hsp3/dpmread.cpp"
 $0 = 0; //@line 259 "../hsp3/dpmread.cpp"
 $73 = $0; //@line 259 "../hsp3/dpmread.cpp"
 STACKTOP = sp;return ($73|0); //@line 259 "../hsp3/dpmread.cpp"
}
function __Z7dpm_byev() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[72>>2]|0; //@line 265 "../hsp3/dpmread.cpp"
 $1 = ($0|0)!=(0|0); //@line 265 "../hsp3/dpmread.cpp"
 if ($1) {
  $2 = HEAP32[72>>2]|0; //@line 265 "../hsp3/dpmread.cpp"
  _free($2); //@line 265 "../hsp3/dpmread.cpp"
 }
 HEAP32[32>>2] = 0; //@line 266 "../hsp3/dpmread.cpp"
 STACKTOP = sp;return; //@line 267 "../hsp3/dpmread.cpp"
}
function __Z8dpm_readPcPvii($fname,$readmem,$rlen,$seekofs) {
 $fname = $fname|0;
 $readmem = $readmem|0;
 $rlen = $rlen|0;
 $seekofs = $seekofs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a1 = 0;
 var $ff = 0, $filesize = 0, $lpRd = 0, $seeksize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $1 = $fname;
 $2 = $readmem;
 $3 = $rlen;
 $4 = $seekofs;
 $5 = $1; //@line 278 "../hsp3/dpmread.cpp"
 (__ZL11dpm_chkmemfPc($5)|0); //@line 278 "../hsp3/dpmread.cpp"
 $6 = $4; //@line 280 "../hsp3/dpmread.cpp"
 $seeksize = $6; //@line 280 "../hsp3/dpmread.cpp"
 $7 = $seeksize; //@line 281 "../hsp3/dpmread.cpp"
 $8 = ($7|0)<(0); //@line 281 "../hsp3/dpmread.cpp"
 if ($8) {
  $seeksize = 0; //@line 281 "../hsp3/dpmread.cpp"
 }
 $9 = $2; //@line 283 "../hsp3/dpmread.cpp"
 $lpRd = $9; //@line 283 "../hsp3/dpmread.cpp"
 $10 = HEAP32[8>>2]|0; //@line 285 "../hsp3/dpmread.cpp"
 $11 = ($10|0)!=(0); //@line 285 "../hsp3/dpmread.cpp"
 if ($11) {
  $12 = $1; //@line 286 "../hsp3/dpmread.cpp"
  (__Z8dpm_openPc($12)|0); //@line 286 "../hsp3/dpmread.cpp"
  $13 = $seeksize; //@line 287 "../hsp3/dpmread.cpp"
  HEAP32[((16 + 4|0))>>2] = $13; //@line 287 "../hsp3/dpmread.cpp"
  $14 = $lpRd; //@line 288 "../hsp3/dpmread.cpp"
  $15 = $3; //@line 288 "../hsp3/dpmread.cpp"
  $16 = (__Z9dpm_freadPviP8_IO_FILE($14,$15,0)|0); //@line 288 "../hsp3/dpmread.cpp"
  $a1 = $16; //@line 288 "../hsp3/dpmread.cpp"
  __Z9dpm_closev(); //@line 289 "../hsp3/dpmread.cpp"
  $17 = $a1; //@line 290 "../hsp3/dpmread.cpp"
  $0 = $17; //@line 290 "../hsp3/dpmread.cpp"
  $58 = $0; //@line 317 "../hsp3/dpmread.cpp"
  STACKTOP = sp;return ($58|0); //@line 317 "../hsp3/dpmread.cpp"
 }
 $18 = HEAP32[32>>2]|0; //@line 293 "../hsp3/dpmread.cpp"
 $19 = ($18|0)!=(0); //@line 293 "../hsp3/dpmread.cpp"
 do {
  if ($19) {
   $20 = $1; //@line 294 "../hsp3/dpmread.cpp"
   $21 = (__ZL6dpmchkPc($20)|0); //@line 294 "../hsp3/dpmread.cpp"
   $22 = ($21|0)==(0); //@line 294 "../hsp3/dpmread.cpp"
   if (!($22)) {
    break;
   }
   $23 = HEAP32[480>>2]|0; //@line 295 "../hsp3/dpmread.cpp"
   $filesize = $23; //@line 295 "../hsp3/dpmread.cpp"
   $24 = HEAP32[40>>2]|0; //@line 296 "../hsp3/dpmread.cpp"
   (_fclose(($24|0))|0); //@line 296 "../hsp3/dpmread.cpp"
   $25 = (_fopen((224|0),(48|0))|0); //@line 300 "../hsp3/dpmread.cpp"
   $ff = $25; //@line 300 "../hsp3/dpmread.cpp"
   $26 = $ff; //@line 301 "../hsp3/dpmread.cpp"
   $27 = ($26|0)==(0|0); //@line 301 "../hsp3/dpmread.cpp"
   if ($27) {
    $0 = -1; //@line 301 "../hsp3/dpmread.cpp"
    $58 = $0; //@line 317 "../hsp3/dpmread.cpp"
    STACKTOP = sp;return ($58|0); //@line 317 "../hsp3/dpmread.cpp"
   }
   $28 = $ff; //@line 302 "../hsp3/dpmread.cpp"
   $29 = HEAP32[56>>2]|0; //@line 302 "../hsp3/dpmread.cpp"
   $30 = HEAP32[488>>2]|0; //@line 302 "../hsp3/dpmread.cpp"
   $31 = (($29) + ($30))|0; //@line 302 "../hsp3/dpmread.cpp"
   $32 = $seeksize; //@line 302 "../hsp3/dpmread.cpp"
   $33 = (($31) + ($32))|0; //@line 302 "../hsp3/dpmread.cpp"
   (_fseek(($28|0),($33|0),0)|0); //@line 302 "../hsp3/dpmread.cpp"
   $34 = $3; //@line 303 "../hsp3/dpmread.cpp"
   $35 = $filesize; //@line 303 "../hsp3/dpmread.cpp"
   $36 = ($34|0)<($35|0); //@line 303 "../hsp3/dpmread.cpp"
   if ($36) {
    $37 = $3; //@line 303 "../hsp3/dpmread.cpp"
    $filesize = $37; //@line 303 "../hsp3/dpmread.cpp"
   }
   $38 = $lpRd; //@line 304 "../hsp3/dpmread.cpp"
   $39 = $filesize; //@line 304 "../hsp3/dpmread.cpp"
   $40 = $ff; //@line 304 "../hsp3/dpmread.cpp"
   $41 = (__Z9dpm_freadPviP8_IO_FILE($38,$39,$40)|0); //@line 304 "../hsp3/dpmread.cpp"
   $a1 = $41; //@line 304 "../hsp3/dpmread.cpp"
   $42 = $ff; //@line 305 "../hsp3/dpmread.cpp"
   (_fclose(($42|0))|0); //@line 305 "../hsp3/dpmread.cpp"
   $43 = $a1; //@line 306 "../hsp3/dpmread.cpp"
   $0 = $43; //@line 306 "../hsp3/dpmread.cpp"
   $58 = $0; //@line 317 "../hsp3/dpmread.cpp"
   STACKTOP = sp;return ($58|0); //@line 317 "../hsp3/dpmread.cpp"
  }
 } while(0);
 $44 = $1; //@line 311 "../hsp3/dpmread.cpp"
 $45 = (_fopen(($44|0),(48|0))|0); //@line 311 "../hsp3/dpmread.cpp"
 $ff = $45; //@line 311 "../hsp3/dpmread.cpp"
 $46 = $ff; //@line 312 "../hsp3/dpmread.cpp"
 $47 = ($46|0)==(0|0); //@line 312 "../hsp3/dpmread.cpp"
 if ($47) {
  $0 = -1; //@line 312 "../hsp3/dpmread.cpp"
  $58 = $0; //@line 317 "../hsp3/dpmread.cpp"
  STACKTOP = sp;return ($58|0); //@line 317 "../hsp3/dpmread.cpp"
 }
 $48 = $4; //@line 313 "../hsp3/dpmread.cpp"
 $49 = ($48|0)>=(0); //@line 313 "../hsp3/dpmread.cpp"
 if ($49) {
  $50 = $ff; //@line 313 "../hsp3/dpmread.cpp"
  $51 = $seeksize; //@line 313 "../hsp3/dpmread.cpp"
  (_fseek(($50|0),($51|0),0)|0); //@line 313 "../hsp3/dpmread.cpp"
 }
 $52 = $lpRd; //@line 314 "../hsp3/dpmread.cpp"
 $53 = $3; //@line 314 "../hsp3/dpmread.cpp"
 $54 = $ff; //@line 314 "../hsp3/dpmread.cpp"
 $55 = (_fread(($52|0),1,($53|0),($54|0))|0); //@line 314 "../hsp3/dpmread.cpp"
 $a1 = $55; //@line 314 "../hsp3/dpmread.cpp"
 $56 = $ff; //@line 315 "../hsp3/dpmread.cpp"
 (_fclose(($56|0))|0); //@line 315 "../hsp3/dpmread.cpp"
 $57 = $a1; //@line 316 "../hsp3/dpmread.cpp"
 $0 = $57; //@line 316 "../hsp3/dpmread.cpp"
 $58 = $0; //@line 317 "../hsp3/dpmread.cpp"
 STACKTOP = sp;return ($58|0); //@line 317 "../hsp3/dpmread.cpp"
}
function __Z9dpm_existPc($fname) {
 $fname = $fname|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $ff = 0, $length = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $fname;
 $2 = $1; //@line 325 "../hsp3/dpmread.cpp"
 (__ZL11dpm_chkmemfPc($2)|0); //@line 325 "../hsp3/dpmread.cpp"
 $3 = HEAP32[8>>2]|0; //@line 326 "../hsp3/dpmread.cpp"
 $4 = ($3|0)!=(0); //@line 326 "../hsp3/dpmread.cpp"
 L1: do {
  if ($4) {
   $5 = HEAP32[((16 + 8|0))>>2]|0; //@line 327 "../hsp3/dpmread.cpp"
   $0 = $5; //@line 327 "../hsp3/dpmread.cpp"
  } else {
   $6 = HEAP32[32>>2]|0; //@line 330 "../hsp3/dpmread.cpp"
   $7 = ($6|0)!=(0); //@line 330 "../hsp3/dpmread.cpp"
   do {
    if ($7) {
     $8 = $1; //@line 331 "../hsp3/dpmread.cpp"
     $9 = (__ZL6dpmchkPc($8)|0); //@line 331 "../hsp3/dpmread.cpp"
     $10 = ($9|0)==(0); //@line 331 "../hsp3/dpmread.cpp"
     if ($10) {
      __Z9dpm_closev(); //@line 332 "../hsp3/dpmread.cpp"
      $11 = HEAP32[480>>2]|0; //@line 333 "../hsp3/dpmread.cpp"
      $0 = $11; //@line 333 "../hsp3/dpmread.cpp"
      break L1;
     } else {
      break;
     }
    }
   } while(0);
   $12 = $1; //@line 336 "../hsp3/dpmread.cpp"
   $13 = (_fopen(($12|0),(48|0))|0); //@line 336 "../hsp3/dpmread.cpp"
   $ff = $13; //@line 336 "../hsp3/dpmread.cpp"
   $14 = $ff; //@line 337 "../hsp3/dpmread.cpp"
   $15 = ($14|0)==(0|0); //@line 337 "../hsp3/dpmread.cpp"
   if ($15) {
    $0 = -1; //@line 337 "../hsp3/dpmread.cpp"
    break;
   } else {
    $16 = $ff; //@line 338 "../hsp3/dpmread.cpp"
    (_fseek(($16|0),0,2)|0); //@line 338 "../hsp3/dpmread.cpp"
    $17 = $ff; //@line 339 "../hsp3/dpmread.cpp"
    $18 = (_ftell(($17|0))|0); //@line 339 "../hsp3/dpmread.cpp"
    $length = $18; //@line 339 "../hsp3/dpmread.cpp"
    $19 = $ff; //@line 340 "../hsp3/dpmread.cpp"
    (_fclose(($19|0))|0); //@line 340 "../hsp3/dpmread.cpp"
    $20 = $length; //@line 342 "../hsp3/dpmread.cpp"
    $0 = $20; //@line 342 "../hsp3/dpmread.cpp"
    break;
   }
  }
 } while(0);
 $21 = $0; //@line 343 "../hsp3/dpmread.cpp"
 STACKTOP = sp;return ($21|0); //@line 343 "../hsp3/dpmread.cpp"
}
function __Z12dpm_filebasePc($fname) {
 $fname = $fname|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ff = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $fname;
 $2 = $1; //@line 352 "../hsp3/dpmread.cpp"
 (__ZL11dpm_chkmemfPc($2)|0); //@line 352 "../hsp3/dpmread.cpp"
 $3 = HEAP32[8>>2]|0; //@line 353 "../hsp3/dpmread.cpp"
 $4 = ($3|0)!=(0); //@line 353 "../hsp3/dpmread.cpp"
 L1: do {
  if ($4) {
   $0 = 2; //@line 354 "../hsp3/dpmread.cpp"
  } else {
   $5 = HEAP32[32>>2]|0; //@line 356 "../hsp3/dpmread.cpp"
   $6 = ($5|0)!=(0); //@line 356 "../hsp3/dpmread.cpp"
   do {
    if ($6) {
     $7 = $1; //@line 357 "../hsp3/dpmread.cpp"
     $8 = (__ZL6dpmchkPc($7)|0); //@line 357 "../hsp3/dpmread.cpp"
     $9 = ($8|0)==(0); //@line 357 "../hsp3/dpmread.cpp"
     if ($9) {
      __Z9dpm_closev(); //@line 358 "../hsp3/dpmread.cpp"
      $0 = 1; //@line 359 "../hsp3/dpmread.cpp"
      break L1;
     } else {
      break;
     }
    }
   } while(0);
   $10 = $1; //@line 362 "../hsp3/dpmread.cpp"
   $11 = (_fopen(($10|0),(48|0))|0); //@line 362 "../hsp3/dpmread.cpp"
   $ff = $11; //@line 362 "../hsp3/dpmread.cpp"
   $12 = $ff; //@line 363 "../hsp3/dpmread.cpp"
   $13 = ($12|0)==(0|0); //@line 363 "../hsp3/dpmread.cpp"
   if ($13) {
    $0 = -1; //@line 363 "../hsp3/dpmread.cpp"
    break;
   } else {
    $14 = $ff; //@line 364 "../hsp3/dpmread.cpp"
    (_fclose(($14|0))|0); //@line 364 "../hsp3/dpmread.cpp"
    $0 = 0; //@line 365 "../hsp3/dpmread.cpp"
    break;
   }
  }
 } while(0);
 $15 = $0; //@line 365 "../hsp3/dpmread.cpp"
 STACKTOP = sp;return ($15|0); //@line 365 "../hsp3/dpmread.cpp"
}
function __Z12dpm_filecopyPcS_($fname,$sname) {
 $fname = $fname|0;
 $sname = $sname|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $flen = 0, $fp1 = 0, $fp2 = 0, $fres = 0, $max = 0, $mem = 0, $xlen = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $1 = $fname;
 $2 = $sname;
 $max = 32768; //@line 390 "../hsp3/dpmread.cpp"
 $3 = $1; //@line 393 "../hsp3/dpmread.cpp"
 (__ZL11dpm_chkmemfPc($3)|0); //@line 393 "../hsp3/dpmread.cpp"
 $4 = $1; //@line 394 "../hsp3/dpmread.cpp"
 $5 = (__Z9dpm_existPc($4)|0); //@line 394 "../hsp3/dpmread.cpp"
 $flen = $5; //@line 394 "../hsp3/dpmread.cpp"
 $6 = $flen; //@line 395 "../hsp3/dpmread.cpp"
 $7 = ($6|0)<(0); //@line 395 "../hsp3/dpmread.cpp"
 if ($7) {
  $0 = 1; //@line 395 "../hsp3/dpmread.cpp"
  $40 = $0; //@line 415 "../hsp3/dpmread.cpp"
  STACKTOP = sp;return ($40|0); //@line 415 "../hsp3/dpmread.cpp"
 }
 $8 = $2; //@line 397 "../hsp3/dpmread.cpp"
 $9 = (_fopen(($8|0),(496|0))|0); //@line 397 "../hsp3/dpmread.cpp"
 $fp2 = $9; //@line 397 "../hsp3/dpmread.cpp"
 $10 = $fp2; //@line 397 "../hsp3/dpmread.cpp"
 $11 = ($10|0)==(0|0); //@line 397 "../hsp3/dpmread.cpp"
 if ($11) {
  $0 = 1; //@line 397 "../hsp3/dpmread.cpp"
  $40 = $0; //@line 415 "../hsp3/dpmread.cpp"
  STACKTOP = sp;return ($40|0); //@line 415 "../hsp3/dpmread.cpp"
 }
 $12 = $1; //@line 398 "../hsp3/dpmread.cpp"
 $13 = (__Z8dpm_openPc($12)|0); //@line 398 "../hsp3/dpmread.cpp"
 $fp1 = $13; //@line 398 "../hsp3/dpmread.cpp"
 $14 = $max; //@line 400 "../hsp3/dpmread.cpp"
 $15 = (_malloc($14)|0); //@line 400 "../hsp3/dpmread.cpp"
 $mem = $15; //@line 400 "../hsp3/dpmread.cpp"
 while(1) {
  $16 = $flen; //@line 402 "../hsp3/dpmread.cpp"
  $17 = ($16|0)==(0); //@line 402 "../hsp3/dpmread.cpp"
  if ($17) {
   label = 7;
   break;
  }
  $18 = $flen; //@line 403 "../hsp3/dpmread.cpp"
  $19 = $max; //@line 403 "../hsp3/dpmread.cpp"
  $20 = ($18|0)<($19|0); //@line 403 "../hsp3/dpmread.cpp"
  if ($20) {
   $21 = $flen; //@line 403 "../hsp3/dpmread.cpp"
   $xlen = $21; //@line 403 "../hsp3/dpmread.cpp"
  } else {
   $22 = $max; //@line 403 "../hsp3/dpmread.cpp"
   $xlen = $22; //@line 403 "../hsp3/dpmread.cpp"
  }
  $23 = $mem; //@line 404 "../hsp3/dpmread.cpp"
  $24 = $xlen; //@line 404 "../hsp3/dpmread.cpp"
  $25 = $fp1; //@line 404 "../hsp3/dpmread.cpp"
  (__Z9dpm_freadPviP8_IO_FILE($23,$24,$25)|0); //@line 404 "../hsp3/dpmread.cpp"
  $26 = $mem; //@line 405 "../hsp3/dpmread.cpp"
  $27 = $xlen; //@line 405 "../hsp3/dpmread.cpp"
  $28 = $fp2; //@line 405 "../hsp3/dpmread.cpp"
  $29 = (_fwrite(($26|0),1,($27|0),($28|0))|0); //@line 405 "../hsp3/dpmread.cpp"
  $fres = $29; //@line 405 "../hsp3/dpmread.cpp"
  $30 = $fres; //@line 406 "../hsp3/dpmread.cpp"
  $31 = $xlen; //@line 406 "../hsp3/dpmread.cpp"
  $32 = ($30|0)<($31|0); //@line 406 "../hsp3/dpmread.cpp"
  if ($32) {
   label = 12;
   break;
  }
  $33 = $xlen; //@line 407 "../hsp3/dpmread.cpp"
  $34 = $flen; //@line 407 "../hsp3/dpmread.cpp"
  $35 = (($34) - ($33))|0; //@line 407 "../hsp3/dpmread.cpp"
  $flen = $35; //@line 407 "../hsp3/dpmread.cpp"
 }
 if ((label|0) == 7) {
 }
 else if ((label|0) == 12) {
 }
 __Z9dpm_closev(); //@line 410 "../hsp3/dpmread.cpp"
 $36 = $fp2; //@line 411 "../hsp3/dpmread.cpp"
 (_fclose(($36|0))|0); //@line 411 "../hsp3/dpmread.cpp"
 $37 = $mem; //@line 412 "../hsp3/dpmread.cpp"
 _free($37); //@line 412 "../hsp3/dpmread.cpp"
 $38 = $flen; //@line 414 "../hsp3/dpmread.cpp"
 $39 = ($38|0)!=(0); //@line 414 "../hsp3/dpmread.cpp"
 if ($39) {
  $0 = 1; //@line 414 "../hsp3/dpmread.cpp"
  $40 = $0; //@line 415 "../hsp3/dpmread.cpp"
  STACKTOP = sp;return ($40|0); //@line 415 "../hsp3/dpmread.cpp"
 } else {
  $0 = 0; //@line 415 "../hsp3/dpmread.cpp"
  $40 = $0; //@line 415 "../hsp3/dpmread.cpp"
  STACKTOP = sp;return ($40|0); //@line 415 "../hsp3/dpmread.cpp"
 }
 return 0|0;
}
function __Z11dpm_memfilePvi($mem,$size) {
 $mem = $mem|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $mem;
 $1 = $size;
 $2 = $0; //@line 421 "../hsp3/dpmread.cpp"
 HEAP32[16>>2] = $2; //@line 421 "../hsp3/dpmread.cpp"
 HEAP32[((16 + 4|0))>>2] = 0; //@line 422 "../hsp3/dpmread.cpp"
 $3 = $1; //@line 423 "../hsp3/dpmread.cpp"
 HEAP32[((16 + 8|0))>>2] = $3; //@line 423 "../hsp3/dpmread.cpp"
 STACKTOP = sp;return; //@line 424 "../hsp3/dpmread.cpp"
}
function __Z13dpm_readallocPc($fname) {
 $fname = $fname|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $len = 0, $p = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $fname;
 $2 = $1; //@line 431 "../hsp3/dpmread.cpp"
 $3 = (__Z9dpm_existPc($2)|0); //@line 431 "../hsp3/dpmread.cpp"
 $len = $3; //@line 431 "../hsp3/dpmread.cpp"
 $4 = $len; //@line 432 "../hsp3/dpmread.cpp"
 $5 = ($4|0)<(0); //@line 432 "../hsp3/dpmread.cpp"
 if ($5) {
  $0 = 0; //@line 432 "../hsp3/dpmread.cpp"
  $16 = $0; //@line 437 "../hsp3/dpmread.cpp"
  STACKTOP = sp;return ($16|0); //@line 437 "../hsp3/dpmread.cpp"
 } else {
  $6 = $len; //@line 433 "../hsp3/dpmread.cpp"
  $7 = (($6) + 1)|0; //@line 433 "../hsp3/dpmread.cpp"
  $8 = (__Z7mem_inii($7)|0); //@line 433 "../hsp3/dpmread.cpp"
  $p = $8; //@line 433 "../hsp3/dpmread.cpp"
  $9 = $1; //@line 434 "../hsp3/dpmread.cpp"
  $10 = $p; //@line 434 "../hsp3/dpmread.cpp"
  $11 = $len; //@line 434 "../hsp3/dpmread.cpp"
  (__Z8dpm_readPcPvii($9,$10,$11,0)|0); //@line 434 "../hsp3/dpmread.cpp"
  $12 = $len; //@line 435 "../hsp3/dpmread.cpp"
  $13 = $p; //@line 435 "../hsp3/dpmread.cpp"
  $14 = (($13) + ($12)|0); //@line 435 "../hsp3/dpmread.cpp"
  HEAP8[$14>>0] = 0; //@line 435 "../hsp3/dpmread.cpp"
  $15 = $p; //@line 436 "../hsp3/dpmread.cpp"
  $0 = $15; //@line 436 "../hsp3/dpmread.cpp"
  $16 = $0; //@line 437 "../hsp3/dpmread.cpp"
  STACKTOP = sp;return ($16|0); //@line 437 "../hsp3/dpmread.cpp"
 }
 return 0|0;
}
function __ZN4Hsp3C2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 _memset(($1|0),0,888)|0; //@line 45 "../hsp3/hsp3.cpp"
 __Z11code_setctxP6HSPCTX($1); //@line 46 "../hsp3/hsp3.cpp"
 __Z9code_initv(); //@line 47 "../hsp3/hsp3.cpp"
 $2 = (($1) + 8|0); //@line 48 "../hsp3/hsp3.cpp"
 HEAP32[$2>>2] = 0; //@line 48 "../hsp3/hsp3.cpp"
 $3 = (($1) + 892|0); //@line 49 "../hsp3/hsp3.cpp"
 HEAP32[$3>>2] = 0; //@line 49 "../hsp3/hsp3.cpp"
 $4 = (($1) + 888|0); //@line 50 "../hsp3/hsp3.cpp"
 HEAP32[$4>>2] = 0; //@line 50 "../hsp3/hsp3.cpp"
 STACKTOP = sp;return; //@line 51 "../hsp3/hsp3.cpp"
}
function __ZN4Hsp3D2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __Z13code_termfuncv(); //@line 57 "../hsp3/hsp3.cpp"
 __ZN4Hsp37DisposeEv($1); //@line 58 "../hsp3/hsp3.cpp"
 __Z8code_byev(); //@line 59 "../hsp3/hsp3.cpp"
 STACKTOP = sp;return; //@line 60 "../hsp3/hsp3.cpp"
}
function __ZN4Hsp37DisposeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 8|0); //@line 79 "../hsp3/hsp3.cpp"
 $3 = HEAP32[$2>>2]|0; //@line 79 "../hsp3/hsp3.cpp"
 $4 = ($3|0)==(0|0); //@line 79 "../hsp3/hsp3.cpp"
 if ($4) {
  STACKTOP = sp;return; //@line 91 "../hsp3/hsp3.cpp"
 }
 $5 = (($1) + 44|0); //@line 80 "../hsp3/hsp3.cpp"
 $6 = HEAP32[$5>>2]|0; //@line 80 "../hsp3/hsp3.cpp"
 $7 = ($6|0)!=(0|0); //@line 80 "../hsp3/hsp3.cpp"
 if ($7) {
  $i = 0; //@line 82 "../hsp3/hsp3.cpp"
  while(1) {
   $8 = $i; //@line 82 "../hsp3/hsp3.cpp"
   $9 = (($1) + 896|0); //@line 82 "../hsp3/hsp3.cpp"
   $10 = HEAP32[$9>>2]|0; //@line 82 "../hsp3/hsp3.cpp"
   $11 = ($8|0)<($10|0); //@line 82 "../hsp3/hsp3.cpp"
   if (!($11)) {
    break;
   }
   $12 = $i; //@line 83 "../hsp3/hsp3.cpp"
   $13 = (($1) + 44|0); //@line 83 "../hsp3/hsp3.cpp"
   $14 = HEAP32[$13>>2]|0; //@line 83 "../hsp3/hsp3.cpp"
   $15 = (($14) + (($12*48)|0)|0); //@line 83 "../hsp3/hsp3.cpp"
   $16 = HEAP16[$15>>1]|0; //@line 83 "../hsp3/hsp3.cpp"
   $17 = $16 << 16 >> 16; //@line 83 "../hsp3/hsp3.cpp"
   $18 = HEAP32[3456>>2]|0; //@line 83 "../hsp3/hsp3.cpp"
   $19 = (($18) + (($17*140)|0)|0); //@line 83 "../hsp3/hsp3.cpp"
   $20 = (($19) + 52|0); //@line 83 "../hsp3/hsp3.cpp"
   $21 = HEAP32[$20>>2]|0; //@line 83 "../hsp3/hsp3.cpp"
   $22 = $i; //@line 83 "../hsp3/hsp3.cpp"
   $23 = (($1) + 44|0); //@line 83 "../hsp3/hsp3.cpp"
   $24 = HEAP32[$23>>2]|0; //@line 83 "../hsp3/hsp3.cpp"
   $25 = (($24) + (($22*48)|0)|0); //@line 83 "../hsp3/hsp3.cpp"
   FUNCTION_TABLE_vi[$21 & 255]($25); //@line 83 "../hsp3/hsp3.cpp"
   $26 = $i; //@line 82 "../hsp3/hsp3.cpp"
   $27 = (($26) + 1)|0; //@line 82 "../hsp3/hsp3.cpp"
   $i = $27; //@line 82 "../hsp3/hsp3.cpp"
  }
  $28 = (($1) + 44|0); //@line 85 "../hsp3/hsp3.cpp"
  $29 = HEAP32[$28>>2]|0; //@line 85 "../hsp3/hsp3.cpp"
  $30 = ($29|0)==(0|0); //@line 85 "../hsp3/hsp3.cpp"
  if (!($30)) {
   __ZdaPv($29); //@line 85 "../hsp3/hsp3.cpp"
  }
  $31 = (($1) + 44|0); //@line 85 "../hsp3/hsp3.cpp"
  HEAP32[$31>>2] = 0; //@line 85 "../hsp3/hsp3.cpp"
 }
 $32 = (($1) + 8|0); //@line 88 "../hsp3/hsp3.cpp"
 HEAP32[$32>>2] = 0; //@line 88 "../hsp3/hsp3.cpp"
 $33 = (($1) + 892|0); //@line 89 "../hsp3/hsp3.cpp"
 $34 = HEAP32[$33>>2]|0; //@line 89 "../hsp3/hsp3.cpp"
 $35 = ($34|0)!=(0|0); //@line 89 "../hsp3/hsp3.cpp"
 if (!($35)) {
  STACKTOP = sp;return; //@line 91 "../hsp3/hsp3.cpp"
 }
 $36 = (($1) + 892|0); //@line 90 "../hsp3/hsp3.cpp"
 $37 = HEAP32[$36>>2]|0; //@line 90 "../hsp3/hsp3.cpp"
 __Z7mem_byePv($37); //@line 90 "../hsp3/hsp3.cpp"
 $38 = (($1) + 892|0); //@line 91 "../hsp3/hsp3.cpp"
 HEAP32[$38>>2] = 0; //@line 91 "../hsp3/hsp3.cpp"
 STACKTOP = sp;return; //@line 91 "../hsp3/hsp3.cpp"
}
function __ZN4Hsp311SetFileNameEPc($this,$name) {
 $this = $this|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $name;
 $2 = $0;
 $3 = $1; //@line 70 "../hsp3/hsp3.cpp"
 $4 = HEAP8[$3>>0]|0; //@line 70 "../hsp3/hsp3.cpp"
 $5 = $4 << 24 >> 24; //@line 70 "../hsp3/hsp3.cpp"
 $6 = ($5|0)==(0); //@line 70 "../hsp3/hsp3.cpp"
 if ($6) {
  $7 = (($2) + 888|0); //@line 70 "../hsp3/hsp3.cpp"
  HEAP32[$7>>2] = 0; //@line 70 "../hsp3/hsp3.cpp"
  STACKTOP = sp;return; //@line 71 "../hsp3/hsp3.cpp"
 } else {
  $8 = $1; //@line 71 "../hsp3/hsp3.cpp"
  $9 = (($2) + 888|0); //@line 71 "../hsp3/hsp3.cpp"
  HEAP32[$9>>2] = $8; //@line 71 "../hsp3/hsp3.cpp"
  STACKTOP = sp;return; //@line 71 "../hsp3/hsp3.cpp"
 }
}
function __ZN4Hsp35ResetEi($this,$mode) {
 $this = $this|0;
 $mode = $mode|0;
 var $$arith = 0, $$overflow = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ap = 0, $fname = 0, $hsphed = 0, $i = 0;
 var $i1 = 0, $p = 0, $ptr = 0, $pval = 0, $s = 0, $sum = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560|0;
 $fname = sp + 48|0;
 $1 = $this;
 $2 = $mode;
 $3 = $1;
 $4 = (($3) + 8|0); //@line 105 "../hsp3/hsp3.cpp"
 $5 = HEAP32[$4>>2]|0; //@line 105 "../hsp3/hsp3.cpp"
 $6 = ($5|0)!=(0|0); //@line 105 "../hsp3/hsp3.cpp"
 if ($6) {
  __ZN4Hsp37DisposeEv($3); //@line 105 "../hsp3/hsp3.cpp"
 }
 $7 = (($3) + 908|0); //@line 109 "../hsp3/hsp3.cpp"
 HEAP32[$7>>2] = 0; //@line 109 "../hsp3/hsp3.cpp"
 $8 = $2; //@line 110 "../hsp3/hsp3.cpp"
 $9 = ($8|0)!=(0); //@line 110 "../hsp3/hsp3.cpp"
 if ($9) {
  $10 = $2; //@line 111 "../hsp3/hsp3.cpp"
  $11 = (($3) + 900|0); //@line 111 "../hsp3/hsp3.cpp"
  $12 = HEAP32[$11>>2]|0; //@line 111 "../hsp3/hsp3.cpp"
  $13 = (($3) + 904|0); //@line 111 "../hsp3/hsp3.cpp"
  $14 = HEAP32[$13>>2]|0; //@line 111 "../hsp3/hsp3.cpp"
  $15 = (__Z7dpm_iniPclii(544,$10,$12,$14)|0); //@line 111 "../hsp3/hsp3.cpp"
  $i = $15; //@line 111 "../hsp3/hsp3.cpp"
 } else {
  (__Z7dpm_iniPclii(552,0,-1,-1)|0); //@line 114 "../hsp3/hsp3.cpp"
 }
 $16 = (($3) + 888|0); //@line 138 "../hsp3/hsp3.cpp"
 $17 = HEAP32[$16>>2]|0; //@line 138 "../hsp3/hsp3.cpp"
 $18 = ($17|0)==(0|0); //@line 138 "../hsp3/hsp3.cpp"
 if ($18) {
  $sum = 0; //@line 143 "../hsp3/hsp3.cpp"
  $p = $fname; //@line 144 "../hsp3/hsp3.cpp"
  $s = 568; //@line 145 "../hsp3/hsp3.cpp"
  while(1) {
   $19 = $s; //@line 147 "../hsp3/hsp3.cpp"
   $20 = (($19) + 1|0); //@line 147 "../hsp3/hsp3.cpp"
   $s = $20; //@line 147 "../hsp3/hsp3.cpp"
   $21 = HEAP8[$19>>0]|0; //@line 147 "../hsp3/hsp3.cpp"
   $ap = $21; //@line 147 "../hsp3/hsp3.cpp"
   $22 = $ap; //@line 147 "../hsp3/hsp3.cpp"
   $23 = $22&255; //@line 147 "../hsp3/hsp3.cpp"
   $24 = ($23|0)==(0); //@line 147 "../hsp3/hsp3.cpp"
   if ($24) {
    break;
   }
   $25 = $ap; //@line 148 "../hsp3/hsp3.cpp"
   $26 = $25&255; //@line 148 "../hsp3/hsp3.cpp"
   $27 = (($26) + 40)|0; //@line 148 "../hsp3/hsp3.cpp"
   $28 = $27&255; //@line 148 "../hsp3/hsp3.cpp"
   $ap = $28; //@line 148 "../hsp3/hsp3.cpp"
   $29 = $ap; //@line 148 "../hsp3/hsp3.cpp"
   $30 = $p; //@line 148 "../hsp3/hsp3.cpp"
   $31 = (($30) + 1|0); //@line 148 "../hsp3/hsp3.cpp"
   $p = $31; //@line 148 "../hsp3/hsp3.cpp"
   HEAP8[$30>>0] = $29; //@line 148 "../hsp3/hsp3.cpp"
   $32 = $sum; //@line 149 "../hsp3/hsp3.cpp"
   $33 = ($32*17)|0; //@line 149 "../hsp3/hsp3.cpp"
   $34 = $ap; //@line 149 "../hsp3/hsp3.cpp"
   $35 = $34&255; //@line 149 "../hsp3/hsp3.cpp"
   $36 = (($33) + ($35))|0; //@line 149 "../hsp3/hsp3.cpp"
   $sum = $36; //@line 149 "../hsp3/hsp3.cpp"
  }
  $37 = $p; //@line 151 "../hsp3/hsp3.cpp"
  HEAP8[$37>>0] = 0; //@line 151 "../hsp3/hsp3.cpp"
  $38 = $sum; //@line 152 "../hsp3/hsp3.cpp"
  $39 = ($38|0)!=(1825493893); //@line 152 "../hsp3/hsp3.cpp"
  if ($39) {
   $0 = -1; //@line 152 "../hsp3/hsp3.cpp"
   $173 = $0; //@line 207 "../hsp3/hsp3.cpp"
   STACKTOP = sp;return ($173|0); //@line 207 "../hsp3/hsp3.cpp"
  }
  $40 = $2; //@line 153 "../hsp3/hsp3.cpp"
  $41 = ($40|0)!=(0); //@line 153 "../hsp3/hsp3.cpp"
  do {
   if ($41) {
    $42 = (__Z12dpm_filebasePc($fname)|0); //@line 154 "../hsp3/hsp3.cpp"
    $43 = ($42|0)!=(1); //@line 154 "../hsp3/hsp3.cpp"
    if (!($43)) {
     break;
    }
    $0 = -1; //@line 154 "../hsp3/hsp3.cpp"
    $173 = $0; //@line 207 "../hsp3/hsp3.cpp"
    STACKTOP = sp;return ($173|0); //@line 207 "../hsp3/hsp3.cpp"
   }
  } while(0);
 } else {
  $44 = (($3) + 888|0); //@line 157 "../hsp3/hsp3.cpp"
  $45 = HEAP32[$44>>2]|0; //@line 157 "../hsp3/hsp3.cpp"
  (_strcpy(($fname|0),($45|0))|0); //@line 157 "../hsp3/hsp3.cpp"
 }
 $46 = (__Z13dpm_readallocPc($fname)|0); //@line 160 "../hsp3/hsp3.cpp"
 $ptr = $46; //@line 160 "../hsp3/hsp3.cpp"
 $47 = $ptr; //@line 161 "../hsp3/hsp3.cpp"
 $48 = ($47|0)==(0|0); //@line 161 "../hsp3/hsp3.cpp"
 if ($48) {
  $0 = -1; //@line 161 "../hsp3/hsp3.cpp"
  $173 = $0; //@line 207 "../hsp3/hsp3.cpp"
  STACKTOP = sp;return ($173|0); //@line 207 "../hsp3/hsp3.cpp"
 }
 $49 = $ptr; //@line 164 "../hsp3/hsp3.cpp"
 $50 = (($3) + 892|0); //@line 164 "../hsp3/hsp3.cpp"
 HEAP32[$50>>2] = $49; //@line 164 "../hsp3/hsp3.cpp"
 $51 = $ptr; //@line 168 "../hsp3/hsp3.cpp"
 $hsphed = $51; //@line 168 "../hsp3/hsp3.cpp"
 $52 = $hsphed; //@line 170 "../hsp3/hsp3.cpp"
 $53 = HEAP8[$52>>0]|0; //@line 170 "../hsp3/hsp3.cpp"
 $54 = $53 << 24 >> 24; //@line 170 "../hsp3/hsp3.cpp"
 $55 = ($54|0)!=(72); //@line 170 "../hsp3/hsp3.cpp"
 if (!($55)) {
  $56 = $hsphed; //@line 170 "../hsp3/hsp3.cpp"
  $57 = (($56) + 1|0); //@line 170 "../hsp3/hsp3.cpp"
  $58 = HEAP8[$57>>0]|0; //@line 170 "../hsp3/hsp3.cpp"
  $59 = $58 << 24 >> 24; //@line 170 "../hsp3/hsp3.cpp"
  $60 = ($59|0)!=(83); //@line 170 "../hsp3/hsp3.cpp"
  if (!($60)) {
   $61 = $hsphed; //@line 170 "../hsp3/hsp3.cpp"
   $62 = (($61) + 2|0); //@line 170 "../hsp3/hsp3.cpp"
   $63 = HEAP8[$62>>0]|0; //@line 170 "../hsp3/hsp3.cpp"
   $64 = $63 << 24 >> 24; //@line 170 "../hsp3/hsp3.cpp"
   $65 = ($64|0)!=(80); //@line 170 "../hsp3/hsp3.cpp"
   if (!($65)) {
    $66 = $hsphed; //@line 170 "../hsp3/hsp3.cpp"
    $67 = (($66) + 3|0); //@line 170 "../hsp3/hsp3.cpp"
    $68 = HEAP8[$67>>0]|0; //@line 170 "../hsp3/hsp3.cpp"
    $69 = $68 << 24 >> 24; //@line 170 "../hsp3/hsp3.cpp"
    $70 = ($69|0)!=(51); //@line 170 "../hsp3/hsp3.cpp"
    if (!($70)) {
     $73 = $hsphed; //@line 175 "../hsp3/hsp3.cpp"
     $74 = (($73) + 8|0); //@line 175 "../hsp3/hsp3.cpp"
     $75 = HEAP32[$74>>2]|0; //@line 175 "../hsp3/hsp3.cpp"
     $76 = (($3) + 896|0); //@line 175 "../hsp3/hsp3.cpp"
     HEAP32[$76>>2] = $75; //@line 175 "../hsp3/hsp3.cpp"
     $77 = $hsphed; //@line 176 "../hsp3/hsp3.cpp"
     HEAP32[$3>>2] = $77; //@line 176 "../hsp3/hsp3.cpp"
     $78 = $ptr; //@line 177 "../hsp3/hsp3.cpp"
     $79 = $hsphed; //@line 177 "../hsp3/hsp3.cpp"
     $80 = (($79) + 16|0); //@line 177 "../hsp3/hsp3.cpp"
     $81 = HEAP32[$80>>2]|0; //@line 177 "../hsp3/hsp3.cpp"
     $82 = (($78) + ($81)|0); //@line 177 "../hsp3/hsp3.cpp"
     $83 = $hsphed; //@line 177 "../hsp3/hsp3.cpp"
     $84 = (($83) + 20|0); //@line 177 "../hsp3/hsp3.cpp"
     $85 = HEAP32[$84>>2]|0; //@line 177 "../hsp3/hsp3.cpp"
     $86 = (__ZL4copyPcj($82,$85)|0); //@line 177 "../hsp3/hsp3.cpp"
     $87 = (($3) + 8|0); //@line 177 "../hsp3/hsp3.cpp"
     HEAP32[$87>>2] = $86; //@line 177 "../hsp3/hsp3.cpp"
     $88 = $ptr; //@line 178 "../hsp3/hsp3.cpp"
     $89 = $hsphed; //@line 178 "../hsp3/hsp3.cpp"
     $90 = (($89) + 24|0); //@line 178 "../hsp3/hsp3.cpp"
     $91 = HEAP32[$90>>2]|0; //@line 178 "../hsp3/hsp3.cpp"
     $92 = (($88) + ($91)|0); //@line 178 "../hsp3/hsp3.cpp"
     $93 = (($3) + 12|0); //@line 178 "../hsp3/hsp3.cpp"
     HEAP32[$93>>2] = $92; //@line 178 "../hsp3/hsp3.cpp"
     $94 = $ptr; //@line 179 "../hsp3/hsp3.cpp"
     $95 = $hsphed; //@line 179 "../hsp3/hsp3.cpp"
     $96 = (($95) + 32|0); //@line 179 "../hsp3/hsp3.cpp"
     $97 = HEAP32[$96>>2]|0; //@line 179 "../hsp3/hsp3.cpp"
     $98 = (($94) + ($97)|0); //@line 179 "../hsp3/hsp3.cpp"
     $99 = $hsphed; //@line 179 "../hsp3/hsp3.cpp"
     $100 = (($99) + 36|0); //@line 179 "../hsp3/hsp3.cpp"
     $101 = HEAP32[$100>>2]|0; //@line 179 "../hsp3/hsp3.cpp"
     $102 = (__ZL4copyPcj($98,$101)|0); //@line 179 "../hsp3/hsp3.cpp"
     $103 = (($3) + 20|0); //@line 179 "../hsp3/hsp3.cpp"
     HEAP32[$103>>2] = $102; //@line 179 "../hsp3/hsp3.cpp"
     $104 = $ptr; //@line 180 "../hsp3/hsp3.cpp"
     $105 = $hsphed; //@line 180 "../hsp3/hsp3.cpp"
     $106 = (($105) + 40|0); //@line 180 "../hsp3/hsp3.cpp"
     $107 = HEAP32[$106>>2]|0; //@line 180 "../hsp3/hsp3.cpp"
     $108 = (($104) + ($107)|0); //@line 180 "../hsp3/hsp3.cpp"
     $109 = $hsphed; //@line 180 "../hsp3/hsp3.cpp"
     $110 = (($109) + 44|0); //@line 180 "../hsp3/hsp3.cpp"
     $111 = HEAP32[$110>>2]|0; //@line 180 "../hsp3/hsp3.cpp"
     $112 = (__ZL4copyPcj($108,$111)|0); //@line 180 "../hsp3/hsp3.cpp"
     $113 = (($3) + 16|0); //@line 180 "../hsp3/hsp3.cpp"
     HEAP32[$113>>2] = $112; //@line 180 "../hsp3/hsp3.cpp"
     $114 = $ptr; //@line 182 "../hsp3/hsp3.cpp"
     $115 = $hsphed; //@line 182 "../hsp3/hsp3.cpp"
     $116 = (($115) + 48|0); //@line 182 "../hsp3/hsp3.cpp"
     $117 = HEAP32[$116>>2]|0; //@line 182 "../hsp3/hsp3.cpp"
     $118 = (($114) + ($117)|0); //@line 182 "../hsp3/hsp3.cpp"
     $119 = $hsphed; //@line 182 "../hsp3/hsp3.cpp"
     $120 = (($119) + 52|0); //@line 182 "../hsp3/hsp3.cpp"
     $121 = HEAP32[$120>>2]|0; //@line 182 "../hsp3/hsp3.cpp"
     $122 = (__ZL4copyPcj($118,$121)|0); //@line 182 "../hsp3/hsp3.cpp"
     $123 = (($3) + 832|0); //@line 182 "../hsp3/hsp3.cpp"
     HEAP32[$123>>2] = $122; //@line 182 "../hsp3/hsp3.cpp"
     $124 = $ptr; //@line 183 "../hsp3/hsp3.cpp"
     $125 = $hsphed; //@line 183 "../hsp3/hsp3.cpp"
     $126 = (($125) + 64|0); //@line 183 "../hsp3/hsp3.cpp"
     $127 = HEAP32[$126>>2]|0; //@line 183 "../hsp3/hsp3.cpp"
     $128 = (($124) + ($127)|0); //@line 183 "../hsp3/hsp3.cpp"
     $129 = $hsphed; //@line 183 "../hsp3/hsp3.cpp"
     $130 = (($129) + 68|0); //@line 183 "../hsp3/hsp3.cpp"
     $131 = HEAP32[$130>>2]|0; //@line 183 "../hsp3/hsp3.cpp"
     $132 = (__ZL4copyPcj($128,$131)|0); //@line 183 "../hsp3/hsp3.cpp"
     $133 = (($3) + 836|0); //@line 183 "../hsp3/hsp3.cpp"
     HEAP32[$133>>2] = $132; //@line 183 "../hsp3/hsp3.cpp"
     $134 = $ptr; //@line 184 "../hsp3/hsp3.cpp"
     $135 = $hsphed; //@line 184 "../hsp3/hsp3.cpp"
     $136 = (($135) + 56|0); //@line 184 "../hsp3/hsp3.cpp"
     $137 = HEAP32[$136>>2]|0; //@line 184 "../hsp3/hsp3.cpp"
     $138 = (($134) + ($137)|0); //@line 184 "../hsp3/hsp3.cpp"
     $139 = $hsphed; //@line 184 "../hsp3/hsp3.cpp"
     $140 = (($139) + 60|0); //@line 184 "../hsp3/hsp3.cpp"
     $141 = HEAP32[$140>>2]|0; //@line 184 "../hsp3/hsp3.cpp"
     $142 = (__ZL4copyPcj($138,$141)|0); //@line 184 "../hsp3/hsp3.cpp"
     $143 = (($3) + 840|0); //@line 184 "../hsp3/hsp3.cpp"
     HEAP32[$143>>2] = $142; //@line 184 "../hsp3/hsp3.cpp"
     $144 = $hsphed; //@line 186 "../hsp3/hsp3.cpp"
     $145 = (($144) + 86|0); //@line 186 "../hsp3/hsp3.cpp"
     $146 = HEAP16[$145>>1]|0; //@line 186 "../hsp3/hsp3.cpp"
     $147 = $146 << 16 >> 16; //@line 186 "../hsp3/hsp3.cpp"
     __Z22HspVarCoreResetVartypei($147); //@line 186 "../hsp3/hsp3.cpp"
     __Z13code_resetctxP6HSPCTX($3); //@line 187 "../hsp3/hsp3.cpp"
     $148 = (($3) + 44|0); //@line 190 "../hsp3/hsp3.cpp"
     HEAP32[$148>>2] = 0; //@line 190 "../hsp3/hsp3.cpp"
     $149 = (($3) + 896|0); //@line 191 "../hsp3/hsp3.cpp"
     $150 = HEAP32[$149>>2]|0; //@line 191 "../hsp3/hsp3.cpp"
     $151 = ($150|0)!=(0); //@line 191 "../hsp3/hsp3.cpp"
     if ($151) {
      $152 = (($3) + 896|0); //@line 193 "../hsp3/hsp3.cpp"
      $153 = HEAP32[$152>>2]|0; //@line 193 "../hsp3/hsp3.cpp"
      $$arith = ($153*48)|0;
      $$overflow = ($153>>>0)>(89478485);
      $154 = $$overflow ? -1 : $$arith; //@line 193 "../hsp3/hsp3.cpp"
      $155 = (__Znaj($154)|0); //@line 193 "../hsp3/hsp3.cpp"
      $156 = (($3) + 44|0); //@line 193 "../hsp3/hsp3.cpp"
      HEAP32[$156>>2] = $155; //@line 193 "../hsp3/hsp3.cpp"
      $i1 = 0; //@line 195 "../hsp3/hsp3.cpp"
      while(1) {
       $157 = $i1; //@line 195 "../hsp3/hsp3.cpp"
       $158 = (($3) + 896|0); //@line 195 "../hsp3/hsp3.cpp"
       $159 = HEAP32[$158>>2]|0; //@line 195 "../hsp3/hsp3.cpp"
       $160 = ($157|0)<($159|0); //@line 195 "../hsp3/hsp3.cpp"
       if (!($160)) {
        break;
       }
       $161 = $i1; //@line 196 "../hsp3/hsp3.cpp"
       $162 = (($3) + 44|0); //@line 196 "../hsp3/hsp3.cpp"
       $163 = HEAP32[$162>>2]|0; //@line 196 "../hsp3/hsp3.cpp"
       $164 = (($163) + (($161*48)|0)|0); //@line 196 "../hsp3/hsp3.cpp"
       $pval = $164; //@line 196 "../hsp3/hsp3.cpp"
       $165 = $pval; //@line 197 "../hsp3/hsp3.cpp"
       $166 = (($165) + 2|0); //@line 197 "../hsp3/hsp3.cpp"
       HEAP16[$166>>1] = -1; //@line 197 "../hsp3/hsp3.cpp"
       $167 = $pval; //@line 198 "../hsp3/hsp3.cpp"
       HEAP16[$167>>1] = 4; //@line 198 "../hsp3/hsp3.cpp"
       $168 = $pval; //@line 199 "../hsp3/hsp3.cpp"
       __Z15HspVarCoreClearP4PVali($168,4); //@line 199 "../hsp3/hsp3.cpp"
       $169 = $i1; //@line 195 "../hsp3/hsp3.cpp"
       $170 = (($169) + 1)|0; //@line 195 "../hsp3/hsp3.cpp"
       $i1 = $170; //@line 195 "../hsp3/hsp3.cpp"
      }
     }
     $171 = (($3) + 8|0); //@line 205 "../hsp3/hsp3.cpp"
     $172 = HEAP32[$171>>2]|0; //@line 205 "../hsp3/hsp3.cpp"
     __Z10code_setpcPKt($172); //@line 205 "../hsp3/hsp3.cpp"
     (__Z15code_debug_initv()|0); //@line 206 "../hsp3/hsp3.cpp"
     $0 = 0; //@line 207 "../hsp3/hsp3.cpp"
     $173 = $0; //@line 207 "../hsp3/hsp3.cpp"
     STACKTOP = sp;return ($173|0); //@line 207 "../hsp3/hsp3.cpp"
    }
   }
  }
 }
 $71 = (($3) + 892|0); //@line 171 "../hsp3/hsp3.cpp"
 $72 = HEAP32[$71>>2]|0; //@line 171 "../hsp3/hsp3.cpp"
 __Z7mem_byePv($72); //@line 171 "../hsp3/hsp3.cpp"
 $0 = -1; //@line 172 "../hsp3/hsp3.cpp"
 $173 = $0; //@line 207 "../hsp3/hsp3.cpp"
 STACKTOP = sp;return ($173|0); //@line 207 "../hsp3/hsp3.cpp"
}
function __ZL4copyPcj($ptr,$size) {
 $ptr = $ptr|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $dst = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $ptr;
 $1 = $size;
 $2 = $1; //@line 29 "../hsp3/hsp3.cpp"
 $3 = (_malloc($2)|0); //@line 29 "../hsp3/hsp3.cpp"
 $dst = $3; //@line 29 "../hsp3/hsp3.cpp"
 $4 = $dst; //@line 30 "../hsp3/hsp3.cpp"
 $5 = $0; //@line 30 "../hsp3/hsp3.cpp"
 $6 = $1; //@line 30 "../hsp3/hsp3.cpp"
 _memcpy(($4|0),($5|0),($6|0))|0; //@line 30 "../hsp3/hsp3.cpp"
 $7 = $dst; //@line 31 "../hsp3/hsp3.cpp"
 STACKTOP = sp;return ($7|0); //@line 31 "../hsp3/hsp3.cpp"
}
function __ZN4Hsp312SetPackValueEii($this,$sum,$dec) {
 $this = $this|0;
 $sum = $sum|0;
 $dec = $dec|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $sum;
 $2 = $dec;
 $3 = $0;
 $4 = $1; //@line 213 "../hsp3/hsp3.cpp"
 $5 = (($3) + 900|0); //@line 213 "../hsp3/hsp3.cpp"
 HEAP32[$5>>2] = $4; //@line 213 "../hsp3/hsp3.cpp"
 $6 = $2; //@line 214 "../hsp3/hsp3.cpp"
 $7 = (($3) + 904|0); //@line 214 "../hsp3/hsp3.cpp"
 HEAP32[$7>>2] = $6; //@line 214 "../hsp3/hsp3.cpp"
 STACKTOP = sp;return; //@line 215 "../hsp3/hsp3.cpp"
}
function __Z9code_nextv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZL11__code_nextv(); //@line 97 "../hsp3/hsp3code.cpp"
 STACKTOP = sp;return; //@line 98 "../hsp3/hsp3code.cpp"
}
function __ZL11__code_nextv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[688>>2]|0; //@line 76 "../hsp3/hsp3code.cpp"
 HEAP32[680>>2] = $0; //@line 76 "../hsp3/hsp3code.cpp"
 $1 = HEAP32[688>>2]|0; //@line 77 "../hsp3/hsp3code.cpp"
 $2 = (($1) + 2|0); //@line 77 "../hsp3/hsp3code.cpp"
 HEAP32[688>>2] = $2; //@line 77 "../hsp3/hsp3code.cpp"
 $3 = HEAP16[$1>>1]|0; //@line 77 "../hsp3/hsp3code.cpp"
 HEAP16[656>>1] = $3; //@line 77 "../hsp3/hsp3code.cpp"
 $4 = HEAP16[656>>1]|0; //@line 78 "../hsp3/hsp3code.cpp"
 $5 = $4 << 16 >> 16; //@line 78 "../hsp3/hsp3code.cpp"
 $6 = $5 & 24576; //@line 78 "../hsp3/hsp3code.cpp"
 HEAP32[632>>2] = $6; //@line 78 "../hsp3/hsp3code.cpp"
 $7 = HEAP16[656>>1]|0; //@line 79 "../hsp3/hsp3code.cpp"
 $8 = $7 << 16 >> 16; //@line 79 "../hsp3/hsp3code.cpp"
 $9 = $8 & 4095; //@line 79 "../hsp3/hsp3code.cpp"
 HEAP32[640>>2] = $9; //@line 79 "../hsp3/hsp3code.cpp"
 $10 = HEAP16[656>>1]|0; //@line 80 "../hsp3/hsp3code.cpp"
 $11 = $10 << 16 >> 16; //@line 80 "../hsp3/hsp3code.cpp"
 $12 = $11 & 32768; //@line 80 "../hsp3/hsp3code.cpp"
 $13 = ($12|0)!=(0); //@line 80 "../hsp3/hsp3code.cpp"
 if ($13) {
  $14 = HEAP32[688>>2]|0; //@line 83 "../hsp3/hsp3code.cpp"
  $15 = (__ZL6getU32Pt($14)|0); //@line 83 "../hsp3/hsp3code.cpp"
  HEAP32[648>>2] = $15; //@line 83 "../hsp3/hsp3code.cpp"
  $16 = HEAP32[688>>2]|0; //@line 84 "../hsp3/hsp3code.cpp"
  $17 = (($16) + 4|0); //@line 84 "../hsp3/hsp3code.cpp"
  HEAP32[688>>2] = $17; //@line 84 "../hsp3/hsp3code.cpp"
  STACKTOP = sp;return; //@line 89 "../hsp3/hsp3code.cpp"
 } else {
  $18 = HEAP32[688>>2]|0; //@line 89 "../hsp3/hsp3code.cpp"
  $19 = (($18) + 2|0); //@line 89 "../hsp3/hsp3code.cpp"
  HEAP32[688>>2] = $19; //@line 89 "../hsp3/hsp3code.cpp"
  $20 = HEAP16[$18>>1]|0; //@line 89 "../hsp3/hsp3code.cpp"
  $21 = $20&65535; //@line 89 "../hsp3/hsp3code.cpp"
  HEAP32[648>>2] = $21; //@line 89 "../hsp3/hsp3code.cpp"
  STACKTOP = sp;return; //@line 89 "../hsp3/hsp3code.cpp"
 }
}
function __Z13code_puterror8HSPERROR($error) {
 $error = $error|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $error;
 $1 = $0; //@line 105 "../hsp3/hsp3code.cpp"
 $2 = ($1|0)==(0); //@line 105 "../hsp3/hsp3code.cpp"
 if ($2) {
  $3 = HEAP32[600>>2]|0; //@line 106 "../hsp3/hsp3code.cpp"
  $4 = (($3) + 236|0); //@line 106 "../hsp3/hsp3code.cpp"
  HEAP32[$4>>2] = 4; //@line 106 "../hsp3/hsp3code.cpp"
  STACKTOP = sp;return; //@line 109 "../hsp3/hsp3code.cpp"
 } else {
  $5 = (___cxa_allocate_exception(4)|0); //@line 109 "../hsp3/hsp3code.cpp"
  $6 = $0; //@line 109 "../hsp3/hsp3code.cpp"
  HEAP32[$5>>2] = $6; //@line 109 "../hsp3/hsp3code.cpp"
  ___cxa_throw(($5|0),(624|0),(0|0)); //@line 109 "../hsp3/hsp3code.cpp"
  // unreachable; //@line 109 "../hsp3/hsp3code.cpp"
 }
}
function __Z17code_get_proxyvarPcPi($ptr,$mptype) {
 $ptr = $ptr|0;
 $mptype = $mptype|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $getv_pval = 0, $var = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = $ptr;
 $2 = $mptype;
 $3 = $2; //@line 473 "../hsp3/hsp3code.cpp"
 $4 = HEAP32[$3>>2]|0; //@line 473 "../hsp3/hsp3code.cpp"
 do {
  if ((($4|0) == -1)) {
   $34 = $1; //@line 494 "../hsp3/hsp3code.cpp"
   $getv_pval = $34; //@line 494 "../hsp3/hsp3code.cpp"
   $35 = $getv_pval; //@line 495 "../hsp3/hsp3code.cpp"
   $36 = (($35) + 36|0); //@line 495 "../hsp3/hsp3code.cpp"
   $37 = HEAP16[$36>>1]|0; //@line 495 "../hsp3/hsp3code.cpp"
   $38 = $37&65535; //@line 495 "../hsp3/hsp3code.cpp"
   $39 = $38 & 16; //@line 495 "../hsp3/hsp3code.cpp"
   $40 = ($39|0)!=(0); //@line 495 "../hsp3/hsp3code.cpp"
   if ($40) {
    $41 = $getv_pval; //@line 496 "../hsp3/hsp3code.cpp"
    $42 = $2; //@line 496 "../hsp3/hsp3code.cpp"
    $43 = (__ZL19code_checkarray_objP4PValPi($41,$42)|0); //@line 496 "../hsp3/hsp3code.cpp"
    $0 = $43; //@line 496 "../hsp3/hsp3code.cpp"
    $59 = $0; //@line 506 "../hsp3/hsp3code.cpp"
    STACKTOP = sp;return ($59|0); //@line 506 "../hsp3/hsp3code.cpp"
   } else {
    $44 = $getv_pval; //@line 498 "../hsp3/hsp3code.cpp"
    __ZL15code_checkarrayP4PVal($44); //@line 498 "../hsp3/hsp3code.cpp"
    break;
   }
  } else if ((($4|0) == -2)) {
   $21 = $1; //@line 485 "../hsp3/hsp3code.cpp"
   $var = $21; //@line 485 "../hsp3/hsp3code.cpp"
   $22 = $var; //@line 486 "../hsp3/hsp3code.cpp"
   $23 = HEAP32[$22>>2]|0; //@line 486 "../hsp3/hsp3code.cpp"
   $getv_pval = $23; //@line 486 "../hsp3/hsp3code.cpp"
   $24 = $getv_pval; //@line 487 "../hsp3/hsp3code.cpp"
   $25 = (($24) + 36|0); //@line 487 "../hsp3/hsp3code.cpp"
   $26 = HEAP16[$25>>1]|0; //@line 487 "../hsp3/hsp3code.cpp"
   $27 = $26&65535; //@line 487 "../hsp3/hsp3code.cpp"
   $28 = $27 & 16; //@line 487 "../hsp3/hsp3code.cpp"
   $29 = ($28|0)!=(0); //@line 487 "../hsp3/hsp3code.cpp"
   if ($29) {
    $30 = $getv_pval; //@line 488 "../hsp3/hsp3code.cpp"
    $31 = $2; //@line 488 "../hsp3/hsp3code.cpp"
    $32 = (__ZL19code_checkarray_objP4PValPi($30,$31)|0); //@line 488 "../hsp3/hsp3code.cpp"
    $0 = $32; //@line 488 "../hsp3/hsp3code.cpp"
    $59 = $0; //@line 506 "../hsp3/hsp3code.cpp"
    STACKTOP = sp;return ($59|0); //@line 506 "../hsp3/hsp3code.cpp"
   } else {
    $33 = $getv_pval; //@line 490 "../hsp3/hsp3code.cpp"
    __ZL15code_checkarrayP4PVal($33); //@line 490 "../hsp3/hsp3code.cpp"
    break;
   }
  } else if ((($4|0) == -6)) {
   $18 = $2; //@line 482 "../hsp3/hsp3code.cpp"
   HEAP32[$18>>2] = 2; //@line 482 "../hsp3/hsp3code.cpp"
   $19 = $1; //@line 483 "../hsp3/hsp3code.cpp"
   $20 = HEAP32[$19>>2]|0; //@line 483 "../hsp3/hsp3code.cpp"
   $0 = $20; //@line 483 "../hsp3/hsp3code.cpp"
   $59 = $0; //@line 506 "../hsp3/hsp3code.cpp"
   STACKTOP = sp;return ($59|0); //@line 506 "../hsp3/hsp3code.cpp"
  } else if ((($4|0) == -3)) {
   $5 = $1; //@line 475 "../hsp3/hsp3code.cpp"
   $var = $5; //@line 475 "../hsp3/hsp3code.cpp"
   $6 = $var; //@line 476 "../hsp3/hsp3code.cpp"
   $7 = HEAP32[$6>>2]|0; //@line 476 "../hsp3/hsp3code.cpp"
   $getv_pval = $7; //@line 476 "../hsp3/hsp3code.cpp"
   $8 = $var; //@line 477 "../hsp3/hsp3code.cpp"
   $9 = (($8) + 4|0); //@line 477 "../hsp3/hsp3code.cpp"
   $10 = HEAP32[$9>>2]|0; //@line 477 "../hsp3/hsp3code.cpp"
   $11 = $getv_pval; //@line 477 "../hsp3/hsp3code.cpp"
   $12 = (($11) + 40|0); //@line 477 "../hsp3/hsp3code.cpp"
   HEAP32[$12>>2] = $10; //@line 477 "../hsp3/hsp3code.cpp"
   $13 = HEAP32[640>>2]|0; //@line 478 "../hsp3/hsp3code.cpp"
   $14 = ($13|0)==(0); //@line 478 "../hsp3/hsp3code.cpp"
   do {
    if ($14) {
     $15 = HEAP32[648>>2]|0; //@line 478 "../hsp3/hsp3code.cpp"
     $16 = ($15|0)==(40); //@line 478 "../hsp3/hsp3code.cpp"
     if ($16) {
      $17 = (___cxa_allocate_exception(4)|0); //@line 478 "../hsp3/hsp3code.cpp"
      HEAP32[$17>>2] = 34; //@line 478 "../hsp3/hsp3code.cpp"
      ___cxa_throw(($17|0),(624|0),(0|0)); //@line 478 "../hsp3/hsp3code.cpp"
      // unreachable; //@line 478 "../hsp3/hsp3code.cpp"
     } else {
      break;
     }
    }
   } while(0);
  } else {
   $45 = $1; //@line 502 "../hsp3/hsp3code.cpp"
   $0 = $45; //@line 502 "../hsp3/hsp3code.cpp"
   $59 = $0; //@line 506 "../hsp3/hsp3code.cpp"
   STACKTOP = sp;return ($59|0); //@line 506 "../hsp3/hsp3code.cpp"
  }
 } while(0);
 $46 = $getv_pval; //@line 504 "../hsp3/hsp3code.cpp"
 $47 = HEAP16[$46>>1]|0; //@line 504 "../hsp3/hsp3code.cpp"
 $48 = $47 << 16 >> 16; //@line 504 "../hsp3/hsp3code.cpp"
 $49 = $2; //@line 504 "../hsp3/hsp3code.cpp"
 HEAP32[$49>>2] = $48; //@line 504 "../hsp3/hsp3code.cpp"
 $50 = $getv_pval; //@line 505 "../hsp3/hsp3code.cpp"
 $51 = HEAP16[$50>>1]|0; //@line 505 "../hsp3/hsp3code.cpp"
 $52 = $51 << 16 >> 16; //@line 505 "../hsp3/hsp3code.cpp"
 $53 = HEAP32[3456>>2]|0; //@line 505 "../hsp3/hsp3code.cpp"
 $54 = (($53) + (($52*140)|0)|0); //@line 505 "../hsp3/hsp3code.cpp"
 $55 = (($54) + 28|0); //@line 505 "../hsp3/hsp3code.cpp"
 $56 = HEAP32[$55>>2]|0; //@line 505 "../hsp3/hsp3code.cpp"
 $57 = $getv_pval; //@line 505 "../hsp3/hsp3code.cpp"
 $58 = (FUNCTION_TABLE_ii[$56 & 255]($57)|0); //@line 505 "../hsp3/hsp3code.cpp"
 $0 = $58; //@line 505 "../hsp3/hsp3code.cpp"
 $59 = $0; //@line 506 "../hsp3/hsp3code.cpp"
 STACKTOP = sp;return ($59|0); //@line 506 "../hsp3/hsp3code.cpp"
}
function __ZL19code_checkarray_objP4PValPi($pval,$mptype) {
 $pval = $pval|0;
 $mptype = $mptype|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ptr = 0, $varproc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = $pval;
 $2 = $mptype;
 $3 = $1; //@line 436 "../hsp3/hsp3code.cpp"
 $4 = (($3) + 40|0); //@line 436 "../hsp3/hsp3code.cpp"
 HEAP32[$4>>2] = 0; //@line 436 "../hsp3/hsp3code.cpp"
 $5 = $1; //@line 436 "../hsp3/hsp3code.cpp"
 $6 = (($5) + 38|0); //@line 436 "../hsp3/hsp3code.cpp"
 HEAP16[$6>>1] = 0; //@line 436 "../hsp3/hsp3code.cpp"
 $7 = HEAP32[640>>2]|0; //@line 438 "../hsp3/hsp3code.cpp"
 $8 = ($7|0)==(0); //@line 438 "../hsp3/hsp3code.cpp"
 do {
  if ($8) {
   $9 = HEAP32[648>>2]|0; //@line 439 "../hsp3/hsp3code.cpp"
   $10 = ($9|0)==(40); //@line 439 "../hsp3/hsp3code.cpp"
   if (!($10)) {
    break;
   }
   __Z9code_nextv(); //@line 440 "../hsp3/hsp3code.cpp"
   $11 = $1; //@line 442 "../hsp3/hsp3code.cpp"
   $12 = HEAP16[$11>>1]|0; //@line 442 "../hsp3/hsp3code.cpp"
   $13 = $12 << 16 >> 16; //@line 442 "../hsp3/hsp3code.cpp"
   $14 = HEAP32[3456>>2]|0; //@line 442 "../hsp3/hsp3code.cpp"
   $15 = (($14) + (($13*140)|0)|0); //@line 442 "../hsp3/hsp3code.cpp"
   $varproc = $15; //@line 442 "../hsp3/hsp3code.cpp"
   $16 = $varproc; //@line 443 "../hsp3/hsp3code.cpp"
   $17 = (($16) + 32|0); //@line 443 "../hsp3/hsp3code.cpp"
   $18 = HEAP32[$17>>2]|0; //@line 443 "../hsp3/hsp3code.cpp"
   $19 = $1; //@line 443 "../hsp3/hsp3code.cpp"
   $20 = $2; //@line 443 "../hsp3/hsp3code.cpp"
   $21 = (FUNCTION_TABLE_iii[$18 & 255]($19,$20)|0); //@line 443 "../hsp3/hsp3code.cpp"
   $ptr = $21; //@line 443 "../hsp3/hsp3code.cpp"
   __Z9code_nextv(); //@line 444 "../hsp3/hsp3code.cpp"
   $22 = $ptr; //@line 445 "../hsp3/hsp3code.cpp"
   $0 = $22; //@line 445 "../hsp3/hsp3code.cpp"
   $32 = $0; //@line 451 "../hsp3/hsp3code.cpp"
   STACKTOP = sp;return ($32|0); //@line 451 "../hsp3/hsp3code.cpp"
  }
 } while(0);
 $23 = $1; //@line 450 "../hsp3/hsp3code.cpp"
 $24 = HEAP16[$23>>1]|0; //@line 450 "../hsp3/hsp3code.cpp"
 $25 = $24 << 16 >> 16; //@line 450 "../hsp3/hsp3code.cpp"
 $26 = HEAP32[3456>>2]|0; //@line 450 "../hsp3/hsp3code.cpp"
 $27 = (($26) + (($25*140)|0)|0); //@line 450 "../hsp3/hsp3code.cpp"
 $28 = (($27) + 28|0); //@line 450 "../hsp3/hsp3code.cpp"
 $29 = HEAP32[$28>>2]|0; //@line 450 "../hsp3/hsp3code.cpp"
 $30 = $1; //@line 450 "../hsp3/hsp3code.cpp"
 $31 = (FUNCTION_TABLE_ii[$29 & 255]($30)|0); //@line 450 "../hsp3/hsp3code.cpp"
 $0 = $31; //@line 450 "../hsp3/hsp3code.cpp"
 $32 = $0; //@line 451 "../hsp3/hsp3code.cpp"
 STACKTOP = sp;return ($32|0); //@line 451 "../hsp3/hsp3code.cpp"
}
function __ZL15code_checkarrayP4PVal($pval) {
 $pval = $pval|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $chk = 0, $i = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $temp = sp + 8|0;
 $0 = $pval;
 $1 = $0; //@line 321 "../hsp3/hsp3code.cpp"
 $2 = (($1) + 40|0); //@line 321 "../hsp3/hsp3code.cpp"
 HEAP32[$2>>2] = 0; //@line 321 "../hsp3/hsp3code.cpp"
 $3 = $0; //@line 321 "../hsp3/hsp3code.cpp"
 $4 = (($3) + 38|0); //@line 321 "../hsp3/hsp3code.cpp"
 HEAP16[$4>>1] = 0; //@line 321 "../hsp3/hsp3code.cpp"
 $5 = HEAP32[640>>2]|0; //@line 323 "../hsp3/hsp3code.cpp"
 $6 = ($5|0)==(0); //@line 323 "../hsp3/hsp3code.cpp"
 if (!($6)) {
  STACKTOP = sp;return; //@line 338 "../hsp3/hsp3code.cpp"
 }
 $7 = HEAP32[648>>2]|0; //@line 324 "../hsp3/hsp3code.cpp"
 $8 = ($7|0)==(40); //@line 324 "../hsp3/hsp3code.cpp"
 if (!($8)) {
  STACKTOP = sp;return; //@line 338 "../hsp3/hsp3code.cpp"
 }
 __Z9code_nextv(); //@line 325 "../hsp3/hsp3code.cpp"
 while(1) {
  $9 = $0; //@line 328 "../hsp3/hsp3code.cpp"
  $10 = (($9) + 38|0); //@line 328 "../hsp3/hsp3code.cpp"
  $11 = HEAP16[$10>>1]|0; //@line 328 "../hsp3/hsp3code.cpp"
  $12 = (($temp) + 38|0); //@line 328 "../hsp3/hsp3code.cpp"
  HEAP16[$12>>1] = $11; //@line 328 "../hsp3/hsp3code.cpp"
  $13 = $0; //@line 328 "../hsp3/hsp3code.cpp"
  $14 = (($13) + 40|0); //@line 328 "../hsp3/hsp3code.cpp"
  $15 = HEAP32[$14>>2]|0; //@line 328 "../hsp3/hsp3code.cpp"
  $16 = (($temp) + 40|0); //@line 328 "../hsp3/hsp3code.cpp"
  HEAP32[$16>>2] = $15; //@line 328 "../hsp3/hsp3code.cpp"
  $17 = $0; //@line 328 "../hsp3/hsp3code.cpp"
  $18 = (($17) + 44|0); //@line 328 "../hsp3/hsp3code.cpp"
  $19 = HEAP32[$18>>2]|0; //@line 328 "../hsp3/hsp3code.cpp"
  $20 = (($temp) + 44|0); //@line 328 "../hsp3/hsp3code.cpp"
  HEAP32[$20>>2] = $19; //@line 328 "../hsp3/hsp3code.cpp"
  $21 = (__Z8code_getv()|0); //@line 329 "../hsp3/hsp3code.cpp"
  $chk = $21; //@line 329 "../hsp3/hsp3code.cpp"
  $22 = $chk; //@line 330 "../hsp3/hsp3code.cpp"
  $23 = ($22|0)<=(-2); //@line 330 "../hsp3/hsp3code.cpp"
  if ($23) {
   label = 5;
   break;
  }
  $25 = HEAP32[592>>2]|0; //@line 331 "../hsp3/hsp3code.cpp"
  $26 = HEAP16[$25>>1]|0; //@line 331 "../hsp3/hsp3code.cpp"
  $27 = $26 << 16 >> 16; //@line 331 "../hsp3/hsp3code.cpp"
  $28 = ($27|0)!=(4); //@line 331 "../hsp3/hsp3code.cpp"
  if ($28) {
   label = 7;
   break;
  }
  $30 = (($temp) + 38|0); //@line 332 "../hsp3/hsp3code.cpp"
  $31 = HEAP16[$30>>1]|0; //@line 332 "../hsp3/hsp3code.cpp"
  $32 = $0; //@line 332 "../hsp3/hsp3code.cpp"
  $33 = (($32) + 38|0); //@line 332 "../hsp3/hsp3code.cpp"
  HEAP16[$33>>1] = $31; //@line 332 "../hsp3/hsp3code.cpp"
  $34 = (($temp) + 40|0); //@line 332 "../hsp3/hsp3code.cpp"
  $35 = HEAP32[$34>>2]|0; //@line 332 "../hsp3/hsp3code.cpp"
  $36 = $0; //@line 332 "../hsp3/hsp3code.cpp"
  $37 = (($36) + 40|0); //@line 332 "../hsp3/hsp3code.cpp"
  HEAP32[$37>>2] = $35; //@line 332 "../hsp3/hsp3code.cpp"
  $38 = (($temp) + 44|0); //@line 332 "../hsp3/hsp3code.cpp"
  $39 = HEAP32[$38>>2]|0; //@line 332 "../hsp3/hsp3code.cpp"
  $40 = $0; //@line 332 "../hsp3/hsp3code.cpp"
  $41 = (($40) + 44|0); //@line 332 "../hsp3/hsp3code.cpp"
  HEAP32[$41>>2] = $39; //@line 332 "../hsp3/hsp3code.cpp"
  $42 = HEAP32[592>>2]|0; //@line 333 "../hsp3/hsp3code.cpp"
  $43 = (($42) + 28|0); //@line 333 "../hsp3/hsp3code.cpp"
  $44 = HEAP32[$43>>2]|0; //@line 333 "../hsp3/hsp3code.cpp"
  $45 = HEAP32[$44>>2]|0; //@line 333 "../hsp3/hsp3code.cpp"
  $i = $45; //@line 333 "../hsp3/hsp3code.cpp"
  $46 = $0; //@line 334 "../hsp3/hsp3code.cpp"
  $47 = $i; //@line 334 "../hsp3/hsp3code.cpp"
  __Z15HspVarCoreArrayP4PVali($46,$47); //@line 334 "../hsp3/hsp3code.cpp"
  $48 = $chk; //@line 335 "../hsp3/hsp3code.cpp"
  $49 = ($48|0)==(-1); //@line 335 "../hsp3/hsp3code.cpp"
  if ($49) {
   label = 9;
   break;
  }
 }
 if ((label|0) == 5) {
  $24 = (___cxa_allocate_exception(4)|0); //@line 330 "../hsp3/hsp3code.cpp"
  HEAP32[$24>>2] = 25; //@line 330 "../hsp3/hsp3code.cpp"
  ___cxa_throw(($24|0),(624|0),(0|0)); //@line 330 "../hsp3/hsp3code.cpp"
  // unreachable; //@line 330 "../hsp3/hsp3code.cpp"
 }
 else if ((label|0) == 7) {
  $29 = (___cxa_allocate_exception(4)|0); //@line 331 "../hsp3/hsp3code.cpp"
  HEAP32[$29>>2] = 6; //@line 331 "../hsp3/hsp3code.cpp"
  ___cxa_throw(($29|0),(624|0),(0|0)); //@line 331 "../hsp3/hsp3code.cpp"
  // unreachable; //@line 331 "../hsp3/hsp3code.cpp"
 }
 else if ((label|0) == 9) {
  __Z9code_nextv(); //@line 337 "../hsp3/hsp3code.cpp"
  STACKTOP = sp;return; //@line 338 "../hsp3/hsp3code.cpp"
 }
}
function __Z8code_getv() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $argpv = 0, $basesize = 0, $fv = 0, $info = 0, $out = 0, $prm = 0, $ptr = 0, $resval = 0, $stack_def = 0, $stm = 0, $tflag = 0;
 var $tmpval = 0, $tmpval1 = 0, $var = 0, $varproc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $tflag = sp + 16|0;
 $tmpval1 = sp + 24|0;
 $1 = HEAP32[632>>2]|0; //@line 553 "../hsp3/hsp3code.cpp"
 $2 = $1 & 8192; //@line 553 "../hsp3/hsp3code.cpp"
 $3 = ($2|0)!=(0); //@line 553 "../hsp3/hsp3code.cpp"
 if ($3) {
  $0 = -2; //@line 553 "../hsp3/hsp3code.cpp"
  $308 = $0; //@line 713 "../hsp3/hsp3code.cpp"
  STACKTOP = sp;return ($308|0); //@line 713 "../hsp3/hsp3code.cpp"
 }
 $4 = HEAP32[632>>2]|0; //@line 554 "../hsp3/hsp3code.cpp"
 $5 = $4 & 16384; //@line 554 "../hsp3/hsp3code.cpp"
 $6 = ($5|0)!=(0); //@line 554 "../hsp3/hsp3code.cpp"
 if ($6) {
  $7 = HEAP32[632>>2]|0; //@line 555 "../hsp3/hsp3code.cpp"
  $8 = $7 ^ 16384; //@line 555 "../hsp3/hsp3code.cpp"
  HEAP32[632>>2] = $8; //@line 555 "../hsp3/hsp3code.cpp"
  $0 = -3; //@line 556 "../hsp3/hsp3code.cpp"
  $308 = $0; //@line 713 "../hsp3/hsp3code.cpp"
  STACKTOP = sp;return ($308|0); //@line 713 "../hsp3/hsp3code.cpp"
 }
 $9 = HEAP32[640>>2]|0; //@line 558 "../hsp3/hsp3code.cpp"
 $10 = ($9|0)==(0); //@line 558 "../hsp3/hsp3code.cpp"
 do {
  if ($10) {
   $11 = HEAP32[648>>2]|0; //@line 559 "../hsp3/hsp3code.cpp"
   $12 = ($11|0)==(63); //@line 559 "../hsp3/hsp3code.cpp"
   if ($12) {
    __Z9code_nextv(); //@line 560 "../hsp3/hsp3code.cpp"
    $13 = HEAP32[632>>2]|0; //@line 561 "../hsp3/hsp3code.cpp"
    $14 = $13 & -16385; //@line 561 "../hsp3/hsp3code.cpp"
    HEAP32[632>>2] = $14; //@line 561 "../hsp3/hsp3code.cpp"
    $0 = -3; //@line 562 "../hsp3/hsp3code.cpp"
    $308 = $0; //@line 713 "../hsp3/hsp3code.cpp"
    STACKTOP = sp;return ($308|0); //@line 713 "../hsp3/hsp3code.cpp"
   }
   $15 = HEAP32[648>>2]|0; //@line 564 "../hsp3/hsp3code.cpp"
   $16 = ($15|0)==(41); //@line 564 "../hsp3/hsp3code.cpp"
   if (!($16)) {
    break;
   }
   $17 = HEAP32[632>>2]|0; //@line 565 "../hsp3/hsp3code.cpp"
   $18 = $17 & -16385; //@line 565 "../hsp3/hsp3code.cpp"
   HEAP32[632>>2] = $18; //@line 565 "../hsp3/hsp3code.cpp"
   $0 = -4; //@line 566 "../hsp3/hsp3code.cpp"
   $308 = $0; //@line 713 "../hsp3/hsp3code.cpp"
   STACKTOP = sp;return ($308|0); //@line 713 "../hsp3/hsp3code.cpp"
  }
 } while(0);
 $19 = HEAP16[656>>1]|0; //@line 570 "../hsp3/hsp3code.cpp"
 $20 = $19 << 16 >> 16; //@line 570 "../hsp3/hsp3code.cpp"
 $21 = $20 & 4096; //@line 570 "../hsp3/hsp3code.cpp"
 $22 = ($21|0)!=(0); //@line 570 "../hsp3/hsp3code.cpp"
 if ($22) {
  $23 = HEAP32[640>>2]|0; //@line 571 "../hsp3/hsp3code.cpp"
  if ((($23|0) == 4)) {
   $24 = HEAP32[664>>2]|0; //@line 573 "../hsp3/hsp3code.cpp"
   HEAP32[592>>2] = $24; //@line 573 "../hsp3/hsp3code.cpp"
   $25 = HEAP32[648>>2]|0; //@line 574 "../hsp3/hsp3code.cpp"
   $26 = HEAP32[592>>2]|0; //@line 574 "../hsp3/hsp3code.cpp"
   $27 = (($26) + 28|0); //@line 574 "../hsp3/hsp3code.cpp"
   $28 = HEAP32[$27>>2]|0; //@line 574 "../hsp3/hsp3code.cpp"
   HEAP32[$28>>2] = $25; //@line 574 "../hsp3/hsp3code.cpp"
  } else if ((($23|0) == 2) | (($23|0) == 3)) {
   $29 = HEAP32[640>>2]|0; //@line 578 "../hsp3/hsp3code.cpp"
   $30 = HEAP32[3456>>2]|0; //@line 578 "../hsp3/hsp3code.cpp"
   $31 = (($30) + (($29*140)|0)|0); //@line 578 "../hsp3/hsp3code.cpp"
   $varproc = $31; //@line 578 "../hsp3/hsp3code.cpp"
   $32 = HEAP32[640>>2]|0; //@line 579 "../hsp3/hsp3code.cpp"
   $33 = HEAP32[3448>>2]|0; //@line 579 "../hsp3/hsp3code.cpp"
   $34 = (($33) + (($32*48)|0)|0); //@line 579 "../hsp3/hsp3code.cpp"
   HEAP32[592>>2] = $34; //@line 579 "../hsp3/hsp3code.cpp"
   $35 = HEAP32[592>>2]|0; //@line 580 "../hsp3/hsp3code.cpp"
   $36 = (($35) + 2|0); //@line 580 "../hsp3/hsp3code.cpp"
   $37 = HEAP16[$36>>1]|0; //@line 580 "../hsp3/hsp3code.cpp"
   $38 = $37 << 16 >> 16; //@line 580 "../hsp3/hsp3code.cpp"
   $39 = ($38|0)==(-1); //@line 580 "../hsp3/hsp3code.cpp"
   do {
    if ($39) {
     $40 = $varproc; //@line 581 "../hsp3/hsp3code.cpp"
     $41 = HEAP16[$40>>1]|0; //@line 581 "../hsp3/hsp3code.cpp"
     $42 = $41 << 16 >> 16; //@line 581 "../hsp3/hsp3code.cpp"
     $43 = ($42|0)==(0); //@line 581 "../hsp3/hsp3code.cpp"
     if ($43) {
      $44 = (___cxa_allocate_exception(4)|0); //@line 582 "../hsp3/hsp3code.cpp"
      HEAP32[$44>>2] = 27; //@line 582 "../hsp3/hsp3code.cpp"
      ___cxa_throw(($44|0),(624|0),(0|0)); //@line 582 "../hsp3/hsp3code.cpp"
      // unreachable; //@line 582 "../hsp3/hsp3code.cpp"
     } else {
      $45 = HEAP32[592>>2]|0; //@line 584 "../hsp3/hsp3code.cpp"
      $46 = HEAP32[640>>2]|0; //@line 584 "../hsp3/hsp3code.cpp"
      __Z19HspVarCoreClearTempP4PVali($45,$46); //@line 584 "../hsp3/hsp3code.cpp"
      break;
     }
    }
   } while(0);
   $47 = $varproc; //@line 586 "../hsp3/hsp3code.cpp"
   $48 = (($47) + 72|0); //@line 586 "../hsp3/hsp3code.cpp"
   $49 = HEAP32[$48>>2]|0; //@line 586 "../hsp3/hsp3code.cpp"
   $50 = HEAP32[592>>2]|0; //@line 586 "../hsp3/hsp3code.cpp"
   $51 = HEAP32[592>>2]|0; //@line 586 "../hsp3/hsp3code.cpp"
   $52 = (($51) + 28|0); //@line 586 "../hsp3/hsp3code.cpp"
   $53 = HEAP32[$52>>2]|0; //@line 586 "../hsp3/hsp3code.cpp"
   $54 = HEAP32[648>>2]|0; //@line 586 "../hsp3/hsp3code.cpp"
   $55 = HEAP32[600>>2]|0; //@line 586 "../hsp3/hsp3code.cpp"
   $56 = (($55) + 12|0); //@line 586 "../hsp3/hsp3code.cpp"
   $57 = HEAP32[$56>>2]|0; //@line 586 "../hsp3/hsp3code.cpp"
   $58 = (($57) + ($54)|0); //@line 586 "../hsp3/hsp3code.cpp"
   FUNCTION_TABLE_viii[$49 & 255]($50,$53,$58); //@line 586 "../hsp3/hsp3code.cpp"
  } else {
   $59 = (___cxa_allocate_exception(4)|0); //@line 589 "../hsp3/hsp3code.cpp"
   HEAP32[$59>>2] = 1; //@line 589 "../hsp3/hsp3code.cpp"
   ___cxa_throw(($59|0),(624|0),(0|0)); //@line 589 "../hsp3/hsp3code.cpp"
   // unreachable; //@line 589 "../hsp3/hsp3code.cpp"
  }
  __Z9code_nextv(); //@line 591 "../hsp3/hsp3code.cpp"
  $60 = HEAP32[632>>2]|0; //@line 592 "../hsp3/hsp3code.cpp"
  $61 = $60 & -16385; //@line 592 "../hsp3/hsp3code.cpp"
  HEAP32[632>>2] = $61; //@line 592 "../hsp3/hsp3code.cpp"
  $0 = 0; //@line 593 "../hsp3/hsp3code.cpp"
  $308 = $0; //@line 713 "../hsp3/hsp3code.cpp"
  STACKTOP = sp;return ($308|0); //@line 713 "../hsp3/hsp3code.cpp"
 }
 $resval = 0; //@line 596 "../hsp3/hsp3code.cpp"
 $62 = HEAP32[4016>>2]|0; //@line 597 "../hsp3/hsp3code.cpp"
 $63 = HEAP32[4008>>2]|0; //@line 597 "../hsp3/hsp3code.cpp"
 $64 = $62; //@line 597 "../hsp3/hsp3code.cpp"
 $65 = $63; //@line 597 "../hsp3/hsp3code.cpp"
 $66 = (($64) - ($65))|0; //@line 597 "../hsp3/hsp3code.cpp"
 $67 = (($66|0) / 72)&-1; //@line 597 "../hsp3/hsp3code.cpp"
 $stack_def = $67; //@line 597 "../hsp3/hsp3code.cpp"
 L35: while(1) {
  $68 = HEAP32[640>>2]|0; //@line 603 "../hsp3/hsp3code.cpp"
  L37: do {
   switch ($68|0) {
   case 4:  {
    $126 = HEAP32[648>>2]|0; //@line 630 "../hsp3/hsp3code.cpp"
    __Z10StackPushii($126); //@line 630 "../hsp3/hsp3code.cpp"
    __Z9code_nextv(); //@line 631 "../hsp3/hsp3code.cpp"
    break;
   }
   case 2:  {
    $127 = HEAP32[640>>2]|0; //@line 634 "../hsp3/hsp3code.cpp"
    $128 = HEAP32[648>>2]|0; //@line 634 "../hsp3/hsp3code.cpp"
    $129 = HEAP32[600>>2]|0; //@line 634 "../hsp3/hsp3code.cpp"
    $130 = (($129) + 12|0); //@line 634 "../hsp3/hsp3code.cpp"
    $131 = HEAP32[$130>>2]|0; //@line 634 "../hsp3/hsp3code.cpp"
    $132 = (($131) + ($128)|0); //@line 634 "../hsp3/hsp3code.cpp"
    __Z9StackPushiPc($127,$132); //@line 634 "../hsp3/hsp3code.cpp"
    __Z9code_nextv(); //@line 635 "../hsp3/hsp3code.cpp"
    break;
   }
   case 5:  {
    $139 = HEAP32[648>>2]|0; //@line 642 "../hsp3/hsp3code.cpp"
    $140 = HEAP32[600>>2]|0; //@line 642 "../hsp3/hsp3code.cpp"
    $141 = (($140) + 836|0); //@line 642 "../hsp3/hsp3code.cpp"
    $142 = HEAP32[$141>>2]|0; //@line 642 "../hsp3/hsp3code.cpp"
    $143 = (($142) + ($139<<3)|0); //@line 642 "../hsp3/hsp3code.cpp"
    $prm = $143; //@line 642 "../hsp3/hsp3code.cpp"
    __Z9code_nextv(); //@line 643 "../hsp3/hsp3code.cpp"
    $144 = HEAP32[600>>2]|0; //@line 644 "../hsp3/hsp3code.cpp"
    $145 = (($144) + 828|0); //@line 644 "../hsp3/hsp3code.cpp"
    $146 = HEAP32[$145>>2]|0; //@line 644 "../hsp3/hsp3code.cpp"
    $out = $146; //@line 644 "../hsp3/hsp3code.cpp"
    $147 = $out; //@line 645 "../hsp3/hsp3code.cpp"
    $148 = ($147|0)==(0|0); //@line 645 "../hsp3/hsp3code.cpp"
    if ($148) {
     label = 38;
     break L35;
    }
    $150 = $prm; //@line 646 "../hsp3/hsp3code.cpp"
    $151 = (($150) + 2|0); //@line 646 "../hsp3/hsp3code.cpp"
    $152 = HEAP16[$151>>1]|0; //@line 646 "../hsp3/hsp3code.cpp"
    $153 = $152 << 16 >> 16; //@line 646 "../hsp3/hsp3code.cpp"
    $154 = ($153|0)!=(-1); //@line 646 "../hsp3/hsp3code.cpp"
    if ($154) {
     $155 = $out; //@line 647 "../hsp3/hsp3code.cpp"
     $var = $155; //@line 647 "../hsp3/hsp3code.cpp"
     $156 = $var; //@line 648 "../hsp3/hsp3code.cpp"
     $157 = (($156) + 2|0); //@line 648 "../hsp3/hsp3code.cpp"
     $158 = HEAP16[$157>>1]|0; //@line 648 "../hsp3/hsp3code.cpp"
     $159 = $158 << 16 >> 16; //@line 648 "../hsp3/hsp3code.cpp"
     $160 = ($159|0)!=(21930); //@line 648 "../hsp3/hsp3code.cpp"
     if ($160) {
      label = 43;
      break L35;
     }
     $161 = $var; //@line 648 "../hsp3/hsp3code.cpp"
     $162 = HEAP16[$161>>1]|0; //@line 648 "../hsp3/hsp3code.cpp"
     $163 = $162 << 16 >> 16; //@line 648 "../hsp3/hsp3code.cpp"
     $164 = $prm; //@line 648 "../hsp3/hsp3code.cpp"
     $165 = (($164) + 2|0); //@line 648 "../hsp3/hsp3code.cpp"
     $166 = HEAP16[$165>>1]|0; //@line 648 "../hsp3/hsp3code.cpp"
     $167 = $166 << 16 >> 16; //@line 648 "../hsp3/hsp3code.cpp"
     $168 = ($163|0)!=($167|0); //@line 648 "../hsp3/hsp3code.cpp"
     if ($168) {
      label = 43;
      break L35;
     }
     $169 = $var; //@line 648 "../hsp3/hsp3code.cpp"
     $170 = (($169) + 4|0); //@line 648 "../hsp3/hsp3code.cpp"
     $171 = HEAP32[$170>>2]|0; //@line 648 "../hsp3/hsp3code.cpp"
     $172 = HEAP16[$171>>1]|0; //@line 648 "../hsp3/hsp3code.cpp"
     $173 = $172 << 16 >> 16; //@line 648 "../hsp3/hsp3code.cpp"
     $174 = ($173|0)!=(5); //@line 648 "../hsp3/hsp3code.cpp"
     if ($174) {
      label = 43;
      break L35;
     }
     $176 = $var; //@line 649 "../hsp3/hsp3code.cpp"
     $177 = (($176) + 4|0); //@line 649 "../hsp3/hsp3code.cpp"
     $178 = HEAP32[$177>>2]|0; //@line 649 "../hsp3/hsp3code.cpp"
     $179 = $var; //@line 649 "../hsp3/hsp3code.cpp"
     $180 = (($179) + 8|0); //@line 649 "../hsp3/hsp3code.cpp"
     $181 = HEAP32[$180>>2]|0; //@line 649 "../hsp3/hsp3code.cpp"
     $182 = (__Z17HspVarCorePtrAPTRP4PVali($178,$181)|0); //@line 649 "../hsp3/hsp3code.cpp"
     $fv = $182; //@line 649 "../hsp3/hsp3code.cpp"
     $183 = $fv; //@line 650 "../hsp3/hsp3code.cpp"
     $184 = HEAP16[$183>>1]|0; //@line 650 "../hsp3/hsp3code.cpp"
     $185 = $184 << 16 >> 16; //@line 650 "../hsp3/hsp3code.cpp"
     $186 = ($185|0)==(0); //@line 650 "../hsp3/hsp3code.cpp"
     if ($186) {
      label = 45;
      break L35;
     }
     $188 = $fv; //@line 651 "../hsp3/hsp3code.cpp"
     $189 = (($188) + 12|0); //@line 651 "../hsp3/hsp3code.cpp"
     $190 = HEAP32[$189>>2]|0; //@line 651 "../hsp3/hsp3code.cpp"
     $out = $190; //@line 651 "../hsp3/hsp3code.cpp"
    }
    $191 = $prm; //@line 653 "../hsp3/hsp3code.cpp"
    $192 = (($191) + 4|0); //@line 653 "../hsp3/hsp3code.cpp"
    $193 = HEAP32[$192>>2]|0; //@line 653 "../hsp3/hsp3code.cpp"
    $194 = $out; //@line 653 "../hsp3/hsp3code.cpp"
    $195 = (($194) + ($193)|0); //@line 653 "../hsp3/hsp3code.cpp"
    $out = $195; //@line 653 "../hsp3/hsp3code.cpp"
    $196 = $prm; //@line 654 "../hsp3/hsp3code.cpp"
    $197 = HEAP16[$196>>1]|0; //@line 654 "../hsp3/hsp3code.cpp"
    $198 = $197 << 16 >> 16; //@line 654 "../hsp3/hsp3code.cpp"
    HEAP32[$tflag>>2] = $198; //@line 654 "../hsp3/hsp3code.cpp"
    $199 = $out; //@line 655 "../hsp3/hsp3code.cpp"
    $200 = (__Z17code_get_proxyvarPcPi($199,$tflag)|0); //@line 655 "../hsp3/hsp3code.cpp"
    $ptr = $200; //@line 655 "../hsp3/hsp3code.cpp"
    $201 = HEAP32[$tflag>>2]|0; //@line 656 "../hsp3/hsp3code.cpp"
    $202 = HEAP32[3456>>2]|0; //@line 656 "../hsp3/hsp3code.cpp"
    $203 = (($202) + (($201*140)|0)|0); //@line 656 "../hsp3/hsp3code.cpp"
    $varproc = $203; //@line 656 "../hsp3/hsp3code.cpp"
    $204 = $varproc; //@line 657 "../hsp3/hsp3code.cpp"
    $205 = (($204) + 8|0); //@line 657 "../hsp3/hsp3code.cpp"
    $206 = HEAP16[$205>>1]|0; //@line 657 "../hsp3/hsp3code.cpp"
    $207 = $206 << 16 >> 16; //@line 657 "../hsp3/hsp3code.cpp"
    $basesize = $207; //@line 657 "../hsp3/hsp3code.cpp"
    $208 = $basesize; //@line 658 "../hsp3/hsp3code.cpp"
    $209 = ($208|0)<(0); //@line 658 "../hsp3/hsp3code.cpp"
    if ($209) {
     $210 = $varproc; //@line 658 "../hsp3/hsp3code.cpp"
     $211 = (($210) + 56|0); //@line 658 "../hsp3/hsp3code.cpp"
     $212 = HEAP32[$211>>2]|0; //@line 658 "../hsp3/hsp3code.cpp"
     $213 = $ptr; //@line 658 "../hsp3/hsp3code.cpp"
     $214 = (FUNCTION_TABLE_ii[$212 & 255]($213)|0); //@line 658 "../hsp3/hsp3code.cpp"
     $basesize = $214; //@line 658 "../hsp3/hsp3code.cpp"
    }
    $215 = HEAP32[$tflag>>2]|0; //@line 659 "../hsp3/hsp3code.cpp"
    $216 = $ptr; //@line 659 "../hsp3/hsp3code.cpp"
    $217 = $basesize; //@line 659 "../hsp3/hsp3code.cpp"
    __Z9StackPushiPci($215,$216,$217); //@line 659 "../hsp3/hsp3code.cpp"
    break;
   }
   case 1:  {
    $83 = HEAP32[648>>2]|0; //@line 615 "../hsp3/hsp3code.cpp"
    $84 = HEAP32[600>>2]|0; //@line 615 "../hsp3/hsp3code.cpp"
    $85 = (($84) + 44|0); //@line 615 "../hsp3/hsp3code.cpp"
    $86 = HEAP32[$85>>2]|0; //@line 615 "../hsp3/hsp3code.cpp"
    $87 = (($86) + (($83*48)|0)|0); //@line 615 "../hsp3/hsp3code.cpp"
    $argpv = $87; //@line 615 "../hsp3/hsp3code.cpp"
    __Z9code_nextv(); //@line 616 "../hsp3/hsp3code.cpp"
    $88 = $argpv; //@line 617 "../hsp3/hsp3code.cpp"
    $89 = HEAP16[$88>>1]|0; //@line 617 "../hsp3/hsp3code.cpp"
    $90 = $89 << 16 >> 16; //@line 617 "../hsp3/hsp3code.cpp"
    HEAP32[$tflag>>2] = $90; //@line 617 "../hsp3/hsp3code.cpp"
    $91 = $argpv; //@line 618 "../hsp3/hsp3code.cpp"
    $92 = (($91) + 36|0); //@line 618 "../hsp3/hsp3code.cpp"
    $93 = HEAP16[$92>>1]|0; //@line 618 "../hsp3/hsp3code.cpp"
    $94 = $93&65535; //@line 618 "../hsp3/hsp3code.cpp"
    $95 = $94 & 16; //@line 618 "../hsp3/hsp3code.cpp"
    $96 = ($95|0)!=(0); //@line 618 "../hsp3/hsp3code.cpp"
    if ($96) {
     $97 = $argpv; //@line 619 "../hsp3/hsp3code.cpp"
     $98 = (__ZL19code_checkarray_objP4PValPi($97,$tflag)|0); //@line 619 "../hsp3/hsp3code.cpp"
     $ptr = $98; //@line 619 "../hsp3/hsp3code.cpp"
    } else {
     $99 = $argpv; //@line 621 "../hsp3/hsp3code.cpp"
     __ZL15code_checkarrayP4PVal($99); //@line 621 "../hsp3/hsp3code.cpp"
     $100 = $argpv; //@line 622 "../hsp3/hsp3code.cpp"
     $101 = HEAP16[$100>>1]|0; //@line 622 "../hsp3/hsp3code.cpp"
     $102 = $101 << 16 >> 16; //@line 622 "../hsp3/hsp3code.cpp"
     $103 = HEAP32[3456>>2]|0; //@line 622 "../hsp3/hsp3code.cpp"
     $104 = (($103) + (($102*140)|0)|0); //@line 622 "../hsp3/hsp3code.cpp"
     $105 = (($104) + 28|0); //@line 622 "../hsp3/hsp3code.cpp"
     $106 = HEAP32[$105>>2]|0; //@line 622 "../hsp3/hsp3code.cpp"
     $107 = $argpv; //@line 622 "../hsp3/hsp3code.cpp"
     $108 = (FUNCTION_TABLE_ii[$106 & 255]($107)|0); //@line 622 "../hsp3/hsp3code.cpp"
     $ptr = $108; //@line 622 "../hsp3/hsp3code.cpp"
    }
    $109 = HEAP32[$tflag>>2]|0; //@line 624 "../hsp3/hsp3code.cpp"
    $110 = HEAP32[3456>>2]|0; //@line 624 "../hsp3/hsp3code.cpp"
    $111 = (($110) + (($109*140)|0)|0); //@line 624 "../hsp3/hsp3code.cpp"
    $varproc = $111; //@line 624 "../hsp3/hsp3code.cpp"
    $112 = $varproc; //@line 625 "../hsp3/hsp3code.cpp"
    $113 = (($112) + 8|0); //@line 625 "../hsp3/hsp3code.cpp"
    $114 = HEAP16[$113>>1]|0; //@line 625 "../hsp3/hsp3code.cpp"
    $115 = $114 << 16 >> 16; //@line 625 "../hsp3/hsp3code.cpp"
    $basesize = $115; //@line 625 "../hsp3/hsp3code.cpp"
    $116 = $basesize; //@line 626 "../hsp3/hsp3code.cpp"
    $117 = ($116|0)<(0); //@line 626 "../hsp3/hsp3code.cpp"
    if ($117) {
     $118 = $varproc; //@line 626 "../hsp3/hsp3code.cpp"
     $119 = (($118) + 56|0); //@line 626 "../hsp3/hsp3code.cpp"
     $120 = HEAP32[$119>>2]|0; //@line 626 "../hsp3/hsp3code.cpp"
     $121 = $ptr; //@line 626 "../hsp3/hsp3code.cpp"
     $122 = (FUNCTION_TABLE_ii[$120 & 255]($121)|0); //@line 626 "../hsp3/hsp3code.cpp"
     $basesize = $122; //@line 626 "../hsp3/hsp3code.cpp"
    }
    $123 = HEAP32[$tflag>>2]|0; //@line 627 "../hsp3/hsp3code.cpp"
    $124 = $ptr; //@line 627 "../hsp3/hsp3code.cpp"
    $125 = $basesize; //@line 627 "../hsp3/hsp3code.cpp"
    __Z9StackPushiPci($123,$124,$125); //@line 627 "../hsp3/hsp3code.cpp"
    break;
   }
   case 0:  {
    $69 = HEAP32[648>>2]|0; //@line 605 "../hsp3/hsp3code.cpp"
    $70 = ($69|0)==(41); //@line 605 "../hsp3/hsp3code.cpp"
    if (!($70)) {
     $82 = HEAP32[648>>2]|0; //@line 611 "../hsp3/hsp3code.cpp"
     __ZL11code_calcopi($82); //@line 611 "../hsp3/hsp3code.cpp"
     __Z9code_nextv(); //@line 612 "../hsp3/hsp3code.cpp"
     break L37;
    }
    $71 = $stack_def; //@line 606 "../hsp3/hsp3code.cpp"
    $72 = HEAP32[4016>>2]|0; //@line 606 "../hsp3/hsp3code.cpp"
    $73 = HEAP32[4008>>2]|0; //@line 606 "../hsp3/hsp3code.cpp"
    $74 = $72; //@line 606 "../hsp3/hsp3code.cpp"
    $75 = $73; //@line 606 "../hsp3/hsp3code.cpp"
    $76 = (($74) - ($75))|0; //@line 606 "../hsp3/hsp3code.cpp"
    $77 = (($76|0) / 72)&-1; //@line 606 "../hsp3/hsp3code.cpp"
    $78 = ($71|0)==($77|0); //@line 606 "../hsp3/hsp3code.cpp"
    if ($78) {
     label = 25;
     break L35;
    }
    $resval = -1; //@line 607 "../hsp3/hsp3code.cpp"
    $80 = HEAP32[632>>2]|0; //@line 608 "../hsp3/hsp3code.cpp"
    $81 = $80 | 16384; //@line 608 "../hsp3/hsp3code.cpp"
    HEAP32[632>>2] = $81; //@line 608 "../hsp3/hsp3code.cpp"
    break;
   }
   case 3:  {
    $133 = HEAP32[640>>2]|0; //@line 638 "../hsp3/hsp3code.cpp"
    $134 = HEAP32[648>>2]|0; //@line 638 "../hsp3/hsp3code.cpp"
    $135 = HEAP32[600>>2]|0; //@line 638 "../hsp3/hsp3code.cpp"
    $136 = (($135) + 12|0); //@line 638 "../hsp3/hsp3code.cpp"
    $137 = HEAP32[$136>>2]|0; //@line 638 "../hsp3/hsp3code.cpp"
    $138 = (($137) + ($134)|0); //@line 638 "../hsp3/hsp3code.cpp"
    __Z9StackPushiPci($133,$138,8); //@line 638 "../hsp3/hsp3code.cpp"
    __Z9code_nextv(); //@line 639 "../hsp3/hsp3code.cpp"
    break;
   }
   case 7:  {
    $218 = HEAP32[600>>2]|0; //@line 662 "../hsp3/hsp3code.cpp"
    $219 = (($218) + 8|0); //@line 662 "../hsp3/hsp3code.cpp"
    $220 = HEAP32[$219>>2]|0; //@line 662 "../hsp3/hsp3code.cpp"
    $221 = HEAP32[648>>2]|0; //@line 662 "../hsp3/hsp3code.cpp"
    $222 = HEAP32[600>>2]|0; //@line 662 "../hsp3/hsp3code.cpp"
    $223 = (($222) + 20|0); //@line 662 "../hsp3/hsp3code.cpp"
    $224 = HEAP32[$223>>2]|0; //@line 662 "../hsp3/hsp3code.cpp"
    $225 = (($224) + ($221<<2)|0); //@line 662 "../hsp3/hsp3code.cpp"
    $226 = HEAP32[$225>>2]|0; //@line 662 "../hsp3/hsp3code.cpp"
    $227 = (($220) + ($226<<1)|0); //@line 662 "../hsp3/hsp3code.cpp"
    HEAP32[$tmpval1>>2] = $227; //@line 662 "../hsp3/hsp3code.cpp"
    __Z9StackPushiPci(1,$tmpval1,4); //@line 663 "../hsp3/hsp3code.cpp"
    __Z9code_nextv(); //@line 664 "../hsp3/hsp3code.cpp"
    break;
   }
   default: {
    $228 = HEAP32[640>>2]|0; //@line 670 "../hsp3/hsp3code.cpp"
    $229 = HEAP32[672>>2]|0; //@line 670 "../hsp3/hsp3code.cpp"
    $230 = (($229) + ($228<<5)|0); //@line 670 "../hsp3/hsp3code.cpp"
    $info = $230; //@line 670 "../hsp3/hsp3code.cpp"
    $231 = $info; //@line 671 "../hsp3/hsp3code.cpp"
    $232 = (($231) + 16|0); //@line 671 "../hsp3/hsp3code.cpp"
    $233 = HEAP32[$232>>2]|0; //@line 671 "../hsp3/hsp3code.cpp"
    $234 = ($233|0)==(0|0); //@line 671 "../hsp3/hsp3code.cpp"
    if ($234) {
     label = 52;
     break L35;
    }
    $236 = HEAP32[648>>2]|0; //@line 674 "../hsp3/hsp3code.cpp"
    $tmpval = $236; //@line 674 "../hsp3/hsp3code.cpp"
    __Z9code_nextv(); //@line 675 "../hsp3/hsp3code.cpp"
    $237 = $info; //@line 676 "../hsp3/hsp3code.cpp"
    $238 = (($237) + 16|0); //@line 676 "../hsp3/hsp3code.cpp"
    $239 = HEAP32[$238>>2]|0; //@line 676 "../hsp3/hsp3code.cpp"
    $240 = $tmpval; //@line 676 "../hsp3/hsp3code.cpp"
    $241 = (FUNCTION_TABLE_iii[$239 & 255]($tflag,$240)|0); //@line 676 "../hsp3/hsp3code.cpp"
    $ptr = $241; //@line 676 "../hsp3/hsp3code.cpp"
    $242 = HEAP32[$tflag>>2]|0; //@line 677 "../hsp3/hsp3code.cpp"
    $243 = HEAP32[3456>>2]|0; //@line 677 "../hsp3/hsp3code.cpp"
    $244 = (($243) + (($242*140)|0)|0); //@line 677 "../hsp3/hsp3code.cpp"
    $245 = (($244) + 56|0); //@line 677 "../hsp3/hsp3code.cpp"
    $246 = HEAP32[$245>>2]|0; //@line 677 "../hsp3/hsp3code.cpp"
    $247 = $ptr; //@line 677 "../hsp3/hsp3code.cpp"
    $248 = (FUNCTION_TABLE_ii[$246 & 255]($247)|0); //@line 677 "../hsp3/hsp3code.cpp"
    $basesize = $248; //@line 677 "../hsp3/hsp3code.cpp"
    $249 = HEAP32[$tflag>>2]|0; //@line 678 "../hsp3/hsp3code.cpp"
    $250 = $ptr; //@line 678 "../hsp3/hsp3code.cpp"
    $251 = $basesize; //@line 678 "../hsp3/hsp3code.cpp"
    __Z9StackPushiPci($249,$250,$251); //@line 678 "../hsp3/hsp3code.cpp"
   }
   }
  } while(0);
  $252 = HEAP32[632>>2]|0; //@line 682 "../hsp3/hsp3code.cpp"
  $253 = ($252|0)!=(0); //@line 682 "../hsp3/hsp3code.cpp"
  if ($253) {
   label = 55;
   break;
  }
 }
 if ((label|0) == 25) {
  $79 = (___cxa_allocate_exception(4)|0); //@line 606 "../hsp3/hsp3code.cpp"
  HEAP32[$79>>2] = 4; //@line 606 "../hsp3/hsp3code.cpp"
  ___cxa_throw(($79|0),(624|0),(0|0)); //@line 606 "../hsp3/hsp3code.cpp"
  // unreachable; //@line 606 "../hsp3/hsp3code.cpp"
 }
 else if ((label|0) == 38) {
  $149 = (___cxa_allocate_exception(4)|0); //@line 645 "../hsp3/hsp3code.cpp"
  HEAP32[$149>>2] = 30; //@line 645 "../hsp3/hsp3code.cpp"
  ___cxa_throw(($149|0),(624|0),(0|0)); //@line 645 "../hsp3/hsp3code.cpp"
  // unreachable; //@line 645 "../hsp3/hsp3code.cpp"
 }
 else if ((label|0) == 43) {
  $175 = (___cxa_allocate_exception(4)|0); //@line 648 "../hsp3/hsp3code.cpp"
  HEAP32[$175>>2] = 36; //@line 648 "../hsp3/hsp3code.cpp"
  ___cxa_throw(($175|0),(624|0),(0|0)); //@line 648 "../hsp3/hsp3code.cpp"
  // unreachable; //@line 648 "../hsp3/hsp3code.cpp"
 }
 else if ((label|0) == 45) {
  $187 = (___cxa_allocate_exception(4)|0); //@line 650 "../hsp3/hsp3code.cpp"
  HEAP32[$187>>2] = 36; //@line 650 "../hsp3/hsp3code.cpp"
  ___cxa_throw(($187|0),(624|0),(0|0)); //@line 650 "../hsp3/hsp3code.cpp"
  // unreachable; //@line 650 "../hsp3/hsp3code.cpp"
 }
 else if ((label|0) == 52) {
  $235 = (___cxa_allocate_exception(4)|0); //@line 672 "../hsp3/hsp3code.cpp"
  HEAP32[$235>>2] = 30; //@line 672 "../hsp3/hsp3code.cpp"
  ___cxa_throw(($235|0),(624|0),(0|0)); //@line 672 "../hsp3/hsp3code.cpp"
  // unreachable; //@line 672 "../hsp3/hsp3code.cpp"
 }
 else if ((label|0) == 55) {
  $254 = HEAP32[632>>2]|0; //@line 683 "../hsp3/hsp3code.cpp"
  $255 = $254 & -16385; //@line 683 "../hsp3/hsp3code.cpp"
  HEAP32[632>>2] = $255; //@line 683 "../hsp3/hsp3code.cpp"
  $256 = HEAP32[4016>>2]|0; //@line 688 "../hsp3/hsp3code.cpp"
  $257 = (($256) + -72|0); //@line 688 "../hsp3/hsp3code.cpp"
  $stm = $257; //@line 688 "../hsp3/hsp3code.cpp"
  $258 = $stm; //@line 689 "../hsp3/hsp3code.cpp"
  $259 = HEAP16[$258>>1]|0; //@line 689 "../hsp3/hsp3code.cpp"
  $260 = $259 << 16 >> 16; //@line 689 "../hsp3/hsp3code.cpp"
  HEAP32[$tflag>>2] = $260; //@line 689 "../hsp3/hsp3code.cpp"
  $261 = HEAP32[$tflag>>2]|0; //@line 691 "../hsp3/hsp3code.cpp"
  $262 = ($261|0)==(4); //@line 691 "../hsp3/hsp3code.cpp"
  if ($262) {
   $263 = HEAP32[664>>2]|0; //@line 692 "../hsp3/hsp3code.cpp"
   HEAP32[592>>2] = $263; //@line 692 "../hsp3/hsp3code.cpp"
   $264 = $stm; //@line 693 "../hsp3/hsp3code.cpp"
   $265 = (($264) + 8|0); //@line 693 "../hsp3/hsp3code.cpp"
   $266 = HEAP32[$265>>2]|0; //@line 693 "../hsp3/hsp3code.cpp"
   $267 = HEAP32[592>>2]|0; //@line 693 "../hsp3/hsp3code.cpp"
   $268 = (($267) + 28|0); //@line 693 "../hsp3/hsp3code.cpp"
   $269 = HEAP32[$268>>2]|0; //@line 693 "../hsp3/hsp3code.cpp"
   HEAP32[$269>>2] = $266; //@line 693 "../hsp3/hsp3code.cpp"
  } else {
   $270 = HEAP32[$tflag>>2]|0; //@line 695 "../hsp3/hsp3code.cpp"
   $271 = HEAP32[3456>>2]|0; //@line 695 "../hsp3/hsp3code.cpp"
   $272 = (($271) + (($270*140)|0)|0); //@line 695 "../hsp3/hsp3code.cpp"
   $varproc = $272; //@line 695 "../hsp3/hsp3code.cpp"
   $273 = HEAP32[$tflag>>2]|0; //@line 696 "../hsp3/hsp3code.cpp"
   $274 = HEAP32[3448>>2]|0; //@line 696 "../hsp3/hsp3code.cpp"
   $275 = (($274) + (($273*48)|0)|0); //@line 696 "../hsp3/hsp3code.cpp"
   HEAP32[592>>2] = $275; //@line 696 "../hsp3/hsp3code.cpp"
   $276 = HEAP32[592>>2]|0; //@line 698 "../hsp3/hsp3code.cpp"
   $277 = (($276) + 2|0); //@line 698 "../hsp3/hsp3code.cpp"
   $278 = HEAP16[$277>>1]|0; //@line 698 "../hsp3/hsp3code.cpp"
   $279 = $278 << 16 >> 16; //@line 698 "../hsp3/hsp3code.cpp"
   $280 = ($279|0)==(-1); //@line 698 "../hsp3/hsp3code.cpp"
   do {
    if ($280) {
     $281 = $varproc; //@line 699 "../hsp3/hsp3code.cpp"
     $282 = HEAP16[$281>>1]|0; //@line 699 "../hsp3/hsp3code.cpp"
     $283 = $282 << 16 >> 16; //@line 699 "../hsp3/hsp3code.cpp"
     $284 = ($283|0)==(0); //@line 699 "../hsp3/hsp3code.cpp"
     if ($284) {
      $285 = (___cxa_allocate_exception(4)|0); //@line 700 "../hsp3/hsp3code.cpp"
      HEAP32[$285>>2] = 27; //@line 700 "../hsp3/hsp3code.cpp"
      ___cxa_throw(($285|0),(624|0),(0|0)); //@line 700 "../hsp3/hsp3code.cpp"
      // unreachable; //@line 700 "../hsp3/hsp3code.cpp"
     } else {
      $286 = HEAP32[592>>2]|0; //@line 702 "../hsp3/hsp3code.cpp"
      $287 = HEAP32[$tflag>>2]|0; //@line 702 "../hsp3/hsp3code.cpp"
      __Z19HspVarCoreClearTempP4PVali($286,$287); //@line 702 "../hsp3/hsp3code.cpp"
      break;
     }
    }
   } while(0);
   $288 = $varproc; //@line 704 "../hsp3/hsp3code.cpp"
   $289 = (($288) + 72|0); //@line 704 "../hsp3/hsp3code.cpp"
   $290 = HEAP32[$289>>2]|0; //@line 704 "../hsp3/hsp3code.cpp"
   $291 = HEAP32[592>>2]|0; //@line 704 "../hsp3/hsp3code.cpp"
   $292 = HEAP32[592>>2]|0; //@line 704 "../hsp3/hsp3code.cpp"
   $293 = (($292) + 28|0); //@line 704 "../hsp3/hsp3code.cpp"
   $294 = HEAP32[$293>>2]|0; //@line 704 "../hsp3/hsp3code.cpp"
   $295 = $stm; //@line 704 "../hsp3/hsp3code.cpp"
   $296 = (($295) + 4|0); //@line 704 "../hsp3/hsp3code.cpp"
   $297 = HEAP32[$296>>2]|0; //@line 704 "../hsp3/hsp3code.cpp"
   FUNCTION_TABLE_viii[$290 & 255]($291,$294,$297); //@line 704 "../hsp3/hsp3code.cpp"
  }
  __Z8StackPopv(); //@line 707 "../hsp3/hsp3code.cpp"
  $298 = $stack_def; //@line 708 "../hsp3/hsp3code.cpp"
  $299 = HEAP32[4016>>2]|0; //@line 708 "../hsp3/hsp3code.cpp"
  $300 = HEAP32[4008>>2]|0; //@line 708 "../hsp3/hsp3code.cpp"
  $301 = $299; //@line 708 "../hsp3/hsp3code.cpp"
  $302 = $300; //@line 708 "../hsp3/hsp3code.cpp"
  $303 = (($301) - ($302))|0; //@line 708 "../hsp3/hsp3code.cpp"
  $304 = (($303|0) / 72)&-1; //@line 708 "../hsp3/hsp3code.cpp"
  $305 = ($298|0)!=($304|0); //@line 708 "../hsp3/hsp3code.cpp"
  if ($305) {
   $306 = (___cxa_allocate_exception(4)|0); //@line 709 "../hsp3/hsp3code.cpp"
   HEAP32[$306>>2] = 29; //@line 709 "../hsp3/hsp3code.cpp"
   ___cxa_throw(($306|0),(624|0),(0|0)); //@line 709 "../hsp3/hsp3code.cpp"
   // unreachable; //@line 709 "../hsp3/hsp3code.cpp"
  }
  $307 = $resval; //@line 712 "../hsp3/hsp3code.cpp"
  $0 = $307; //@line 712 "../hsp3/hsp3code.cpp"
  $308 = $0; //@line 713 "../hsp3/hsp3code.cpp"
  STACKTOP = sp;return ($308|0); //@line 713 "../hsp3/hsp3code.cpp"
 }
 return 0|0;
}
function __ZL11code_calcopi($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $basesize = 0, $ptr = 0, $stm1 = 0, $stm2 = 0, $tflag = 0, $varproc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $op;
 $1 = HEAP32[4016>>2]|0; //@line 261 "../hsp3/hsp3code.cpp"
 $2 = (($1) + -72|0); //@line 261 "../hsp3/hsp3code.cpp"
 $stm2 = $2; //@line 261 "../hsp3/hsp3code.cpp"
 $3 = HEAP32[4016>>2]|0; //@line 263 "../hsp3/hsp3code.cpp"
 $4 = (($3) + -144|0); //@line 263 "../hsp3/hsp3code.cpp"
 $stm1 = $4; //@line 263 "../hsp3/hsp3code.cpp"
 $5 = $stm1; //@line 264 "../hsp3/hsp3code.cpp"
 $6 = HEAP16[$5>>1]|0; //@line 264 "../hsp3/hsp3code.cpp"
 $7 = $6 << 16 >> 16; //@line 264 "../hsp3/hsp3code.cpp"
 $tflag = $7; //@line 264 "../hsp3/hsp3code.cpp"
 $8 = $tflag; //@line 269 "../hsp3/hsp3code.cpp"
 $9 = ($8|0)==(4); //@line 269 "../hsp3/hsp3code.cpp"
 do {
  if ($9) {
   $10 = $stm2; //@line 270 "../hsp3/hsp3code.cpp"
   $11 = HEAP16[$10>>1]|0; //@line 270 "../hsp3/hsp3code.cpp"
   $12 = $11 << 16 >> 16; //@line 270 "../hsp3/hsp3code.cpp"
   $13 = ($12|0)==(4); //@line 270 "../hsp3/hsp3code.cpp"
   if (!($13)) {
    break;
   }
   $14 = $stm1; //@line 271 "../hsp3/hsp3code.cpp"
   $15 = (($14) + 8|0); //@line 271 "../hsp3/hsp3code.cpp"
   $16 = $0; //@line 271 "../hsp3/hsp3code.cpp"
   $17 = $stm2; //@line 271 "../hsp3/hsp3code.cpp"
   $18 = (($17) + 8|0); //@line 271 "../hsp3/hsp3code.cpp"
   $19 = HEAP32[$18>>2]|0; //@line 271 "../hsp3/hsp3code.cpp"
   __ZL8calcprmfRiii($15,$16,$19); //@line 271 "../hsp3/hsp3code.cpp"
   $20 = HEAP32[4016>>2]|0; //@line 272 "../hsp3/hsp3code.cpp"
   $21 = (($20) + -72|0); //@line 272 "../hsp3/hsp3code.cpp"
   HEAP32[4016>>2] = $21; //@line 272 "../hsp3/hsp3code.cpp"
   $22 = $stm1; //@line 273 "../hsp3/hsp3code.cpp"
   $23 = (($22) + 8|0); //@line 273 "../hsp3/hsp3code.cpp"
   $24 = HEAP32[$23>>2]|0; //@line 273 "../hsp3/hsp3code.cpp"
   $25 = $stm2; //@line 273 "../hsp3/hsp3code.cpp"
   $26 = (($25) + 8|0); //@line 273 "../hsp3/hsp3code.cpp"
   HEAP32[$26>>2] = $24; //@line 273 "../hsp3/hsp3code.cpp"
   STACKTOP = sp;return; //@line 310 "../hsp3/hsp3code.cpp"
  }
 } while(0);
 $27 = $tflag; //@line 278 "../hsp3/hsp3code.cpp"
 $28 = HEAP32[3448>>2]|0; //@line 278 "../hsp3/hsp3code.cpp"
 $29 = (($28) + (($27*48)|0)|0); //@line 278 "../hsp3/hsp3code.cpp"
 HEAP32[592>>2] = $29; //@line 278 "../hsp3/hsp3code.cpp"
 $30 = $tflag; //@line 279 "../hsp3/hsp3code.cpp"
 $31 = HEAP32[3456>>2]|0; //@line 279 "../hsp3/hsp3code.cpp"
 $32 = (($31) + (($30*140)|0)|0); //@line 279 "../hsp3/hsp3code.cpp"
 $varproc = $32; //@line 279 "../hsp3/hsp3code.cpp"
 $33 = HEAP32[592>>2]|0; //@line 281 "../hsp3/hsp3code.cpp"
 $34 = (($33) + 2|0); //@line 281 "../hsp3/hsp3code.cpp"
 $35 = HEAP16[$34>>1]|0; //@line 281 "../hsp3/hsp3code.cpp"
 $36 = $35 << 16 >> 16; //@line 281 "../hsp3/hsp3code.cpp"
 $37 = ($36|0)==(-1); //@line 281 "../hsp3/hsp3code.cpp"
 do {
  if ($37) {
   $38 = $varproc; //@line 282 "../hsp3/hsp3code.cpp"
   $39 = HEAP16[$38>>1]|0; //@line 282 "../hsp3/hsp3code.cpp"
   $40 = $39 << 16 >> 16; //@line 282 "../hsp3/hsp3code.cpp"
   $41 = ($40|0)==(0); //@line 282 "../hsp3/hsp3code.cpp"
   if ($41) {
    $42 = (___cxa_allocate_exception(4)|0); //@line 283 "../hsp3/hsp3code.cpp"
    HEAP32[$42>>2] = 27; //@line 283 "../hsp3/hsp3code.cpp"
    ___cxa_throw(($42|0),(624|0),(0|0)); //@line 283 "../hsp3/hsp3code.cpp"
    // unreachable; //@line 283 "../hsp3/hsp3code.cpp"
   } else {
    $43 = HEAP32[592>>2]|0; //@line 285 "../hsp3/hsp3code.cpp"
    $44 = $tflag; //@line 285 "../hsp3/hsp3code.cpp"
    __Z19HspVarCoreClearTempP4PVali($43,$44); //@line 285 "../hsp3/hsp3code.cpp"
    break;
   }
  }
 } while(0);
 $45 = $varproc; //@line 288 "../hsp3/hsp3code.cpp"
 $46 = (($45) + 72|0); //@line 288 "../hsp3/hsp3code.cpp"
 $47 = HEAP32[$46>>2]|0; //@line 288 "../hsp3/hsp3code.cpp"
 $48 = HEAP32[592>>2]|0; //@line 288 "../hsp3/hsp3code.cpp"
 $49 = HEAP32[592>>2]|0; //@line 288 "../hsp3/hsp3code.cpp"
 $50 = (($49) + 28|0); //@line 288 "../hsp3/hsp3code.cpp"
 $51 = HEAP32[$50>>2]|0; //@line 288 "../hsp3/hsp3code.cpp"
 $52 = $stm1; //@line 288 "../hsp3/hsp3code.cpp"
 $53 = (($52) + 4|0); //@line 288 "../hsp3/hsp3code.cpp"
 $54 = HEAP32[$53>>2]|0; //@line 288 "../hsp3/hsp3code.cpp"
 FUNCTION_TABLE_viii[$47 & 255]($48,$51,$54); //@line 288 "../hsp3/hsp3code.cpp"
 $55 = $stm2; //@line 290 "../hsp3/hsp3code.cpp"
 $56 = (($55) + 4|0); //@line 290 "../hsp3/hsp3code.cpp"
 $57 = HEAP32[$56>>2]|0; //@line 290 "../hsp3/hsp3code.cpp"
 $ptr = $57; //@line 290 "../hsp3/hsp3code.cpp"
 $58 = $tflag; //@line 291 "../hsp3/hsp3code.cpp"
 $59 = $stm2; //@line 291 "../hsp3/hsp3code.cpp"
 $60 = HEAP16[$59>>1]|0; //@line 291 "../hsp3/hsp3code.cpp"
 $61 = $60 << 16 >> 16; //@line 291 "../hsp3/hsp3code.cpp"
 $62 = ($58|0)!=($61|0); //@line 291 "../hsp3/hsp3code.cpp"
 if ($62) {
  $63 = $stm2; //@line 292 "../hsp3/hsp3code.cpp"
  $64 = HEAP16[$63>>1]|0; //@line 292 "../hsp3/hsp3code.cpp"
  $65 = $64 << 16 >> 16; //@line 292 "../hsp3/hsp3code.cpp"
  $66 = ($65|0)>=(8); //@line 292 "../hsp3/hsp3code.cpp"
  if ($66) {
   $67 = $stm2; //@line 293 "../hsp3/hsp3code.cpp"
   $68 = HEAP16[$67>>1]|0; //@line 293 "../hsp3/hsp3code.cpp"
   $69 = $68 << 16 >> 16; //@line 293 "../hsp3/hsp3code.cpp"
   $70 = HEAP32[3456>>2]|0; //@line 293 "../hsp3/hsp3code.cpp"
   $71 = (($70) + (($69*140)|0)|0); //@line 293 "../hsp3/hsp3code.cpp"
   $72 = (($71) + 24|0); //@line 293 "../hsp3/hsp3code.cpp"
   $73 = HEAP32[$72>>2]|0; //@line 293 "../hsp3/hsp3code.cpp"
   $74 = $ptr; //@line 293 "../hsp3/hsp3code.cpp"
   $75 = $tflag; //@line 293 "../hsp3/hsp3code.cpp"
   $76 = (FUNCTION_TABLE_iii[$73 & 255]($74,$75)|0); //@line 293 "../hsp3/hsp3code.cpp"
   $ptr = $76; //@line 293 "../hsp3/hsp3code.cpp"
  } else {
   $77 = $varproc; //@line 295 "../hsp3/hsp3code.cpp"
   $78 = (($77) + 20|0); //@line 295 "../hsp3/hsp3code.cpp"
   $79 = HEAP32[$78>>2]|0; //@line 295 "../hsp3/hsp3code.cpp"
   $80 = $ptr; //@line 295 "../hsp3/hsp3code.cpp"
   $81 = $stm2; //@line 295 "../hsp3/hsp3code.cpp"
   $82 = HEAP16[$81>>1]|0; //@line 295 "../hsp3/hsp3code.cpp"
   $83 = $82 << 16 >> 16; //@line 295 "../hsp3/hsp3code.cpp"
   $84 = (FUNCTION_TABLE_iii[$79 & 255]($80,$83)|0); //@line 295 "../hsp3/hsp3code.cpp"
   $ptr = $84; //@line 295 "../hsp3/hsp3code.cpp"
  }
 }
 $85 = $varproc; //@line 298 "../hsp3/hsp3code.cpp"
 $86 = HEAP32[592>>2]|0; //@line 298 "../hsp3/hsp3code.cpp"
 $87 = (($86) + 28|0); //@line 298 "../hsp3/hsp3code.cpp"
 $88 = HEAP32[$87>>2]|0; //@line 298 "../hsp3/hsp3code.cpp"
 $89 = $0; //@line 298 "../hsp3/hsp3code.cpp"
 $90 = $ptr; //@line 298 "../hsp3/hsp3code.cpp"
 __ZL7calcprmP10HspVarProcPPviS1_($85,$88,$89,$90); //@line 298 "../hsp3/hsp3code.cpp"
 __Z8StackPopv(); //@line 299 "../hsp3/hsp3code.cpp"
 __Z8StackPopv(); //@line 300 "../hsp3/hsp3code.cpp"
 $91 = $varproc; //@line 302 "../hsp3/hsp3code.cpp"
 $92 = (($91) + 2|0); //@line 302 "../hsp3/hsp3code.cpp"
 $93 = HEAP16[$92>>1]|0; //@line 302 "../hsp3/hsp3code.cpp"
 $94 = $93 << 16 >> 16; //@line 302 "../hsp3/hsp3code.cpp"
 $95 = $tflag; //@line 302 "../hsp3/hsp3code.cpp"
 $96 = ($94|0)!=($95|0); //@line 302 "../hsp3/hsp3code.cpp"
 if ($96) {
  $97 = $varproc; //@line 303 "../hsp3/hsp3code.cpp"
  $98 = (($97) + 2|0); //@line 303 "../hsp3/hsp3code.cpp"
  $99 = HEAP16[$98>>1]|0; //@line 303 "../hsp3/hsp3code.cpp"
  $100 = $99 << 16 >> 16; //@line 303 "../hsp3/hsp3code.cpp"
  $tflag = $100; //@line 303 "../hsp3/hsp3code.cpp"
  $101 = $tflag; //@line 304 "../hsp3/hsp3code.cpp"
  $102 = HEAP32[3456>>2]|0; //@line 304 "../hsp3/hsp3code.cpp"
  $103 = (($102) + (($101*140)|0)|0); //@line 304 "../hsp3/hsp3code.cpp"
  $varproc = $103; //@line 304 "../hsp3/hsp3code.cpp"
 }
 $104 = $varproc; //@line 306 "../hsp3/hsp3code.cpp"
 $105 = (($104) + 8|0); //@line 306 "../hsp3/hsp3code.cpp"
 $106 = HEAP16[$105>>1]|0; //@line 306 "../hsp3/hsp3code.cpp"
 $107 = $106 << 16 >> 16; //@line 306 "../hsp3/hsp3code.cpp"
 $basesize = $107; //@line 306 "../hsp3/hsp3code.cpp"
 $108 = $basesize; //@line 307 "../hsp3/hsp3code.cpp"
 $109 = ($108|0)<(0); //@line 307 "../hsp3/hsp3code.cpp"
 if ($109) {
  $110 = $varproc; //@line 308 "../hsp3/hsp3code.cpp"
  $111 = (($110) + 56|0); //@line 308 "../hsp3/hsp3code.cpp"
  $112 = HEAP32[$111>>2]|0; //@line 308 "../hsp3/hsp3code.cpp"
  $113 = HEAP32[592>>2]|0; //@line 308 "../hsp3/hsp3code.cpp"
  $114 = (($113) + 28|0); //@line 308 "../hsp3/hsp3code.cpp"
  $115 = HEAP32[$114>>2]|0; //@line 308 "../hsp3/hsp3code.cpp"
  $116 = (FUNCTION_TABLE_ii[$112 & 255]($115)|0); //@line 308 "../hsp3/hsp3code.cpp"
  $basesize = $116; //@line 308 "../hsp3/hsp3code.cpp"
 }
 $117 = $tflag; //@line 310 "../hsp3/hsp3code.cpp"
 $118 = HEAP32[592>>2]|0; //@line 310 "../hsp3/hsp3code.cpp"
 $119 = (($118) + 28|0); //@line 310 "../hsp3/hsp3code.cpp"
 $120 = HEAP32[$119>>2]|0; //@line 310 "../hsp3/hsp3code.cpp"
 $121 = $basesize; //@line 310 "../hsp3/hsp3code.cpp"
 __Z9StackPushiPci($117,$120,$121); //@line 310 "../hsp3/hsp3code.cpp"
 STACKTOP = sp;return; //@line 310 "../hsp3/hsp3code.cpp"
}
function __Z10StackPushii($val) {
 $val = $val|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $val;
 $1 = HEAP32[4016>>2]|0; //@line 60 "../hsp3/stack.h"
 HEAP16[$1>>1] = 4; //@line 60 "../hsp3/stack.h"
 $2 = $0; //@line 61 "../hsp3/stack.h"
 $3 = HEAP32[4016>>2]|0; //@line 61 "../hsp3/stack.h"
 $4 = (($3) + 8|0); //@line 61 "../hsp3/stack.h"
 HEAP32[$4>>2] = $2; //@line 61 "../hsp3/stack.h"
 $5 = HEAP32[4016>>2]|0; //@line 62 "../hsp3/stack.h"
 $6 = (($5) + 72|0); //@line 62 "../hsp3/stack.h"
 HEAP32[4016>>2] = $6; //@line 62 "../hsp3/stack.h"
 STACKTOP = sp;return; //@line 63 "../hsp3/stack.h"
}
function __Z17HspVarCorePtrAPTRP4PVali($pv,$ofs) {
 $pv = $pv|0;
 $ofs = $ofs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $pv;
 $1 = $ofs;
 $2 = $1; //@line 245 "../hsp3/hspvar_core.h"
 $3 = $0; //@line 245 "../hsp3/hspvar_core.h"
 $4 = (($3) + 40|0); //@line 245 "../hsp3/hspvar_core.h"
 HEAP32[$4>>2] = $2; //@line 245 "../hsp3/hspvar_core.h"
 $5 = $0; //@line 246 "../hsp3/hspvar_core.h"
 $6 = HEAP16[$5>>1]|0; //@line 246 "../hsp3/hspvar_core.h"
 $7 = $6 << 16 >> 16; //@line 246 "../hsp3/hspvar_core.h"
 $8 = HEAP32[3456>>2]|0; //@line 246 "../hsp3/hspvar_core.h"
 $9 = (($8) + (($7*140)|0)|0); //@line 246 "../hsp3/hspvar_core.h"
 $10 = (($9) + 28|0); //@line 246 "../hsp3/hspvar_core.h"
 $11 = HEAP32[$10>>2]|0; //@line 246 "../hsp3/hspvar_core.h"
 $12 = $0; //@line 246 "../hsp3/hspvar_core.h"
 $13 = (FUNCTION_TABLE_ii[$11 & 255]($12)|0); //@line 246 "../hsp3/hspvar_core.h"
 STACKTOP = sp;return ($13|0); //@line 246 "../hsp3/hspvar_core.h"
}
function __Z8StackPopv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[4016>>2]|0; //@line 86 "../hsp3/stack.h"
 $1 = (($0) + -72|0); //@line 86 "../hsp3/stack.h"
 HEAP32[4016>>2] = $1; //@line 86 "../hsp3/stack.h"
 $2 = HEAP32[4016>>2]|0; //@line 87 "../hsp3/stack.h"
 $3 = (($2) + 2|0); //@line 87 "../hsp3/stack.h"
 $4 = HEAP16[$3>>1]|0; //@line 87 "../hsp3/stack.h"
 $5 = ($4<<16>>16)!=(0); //@line 87 "../hsp3/stack.h"
 if (!($5)) {
  STACKTOP = sp;return; //@line 90 "../hsp3/stack.h"
 }
 __Z12StackPopFreev(); //@line 88 "../hsp3/stack.h"
 STACKTOP = sp;return; //@line 90 "../hsp3/stack.h"
}
function __Z9code_getsv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $chk = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = (__Z8code_getv()|0); //@line 721 "../hsp3/hsp3code.cpp"
 $chk = $0; //@line 721 "../hsp3/hsp3code.cpp"
 $1 = $chk; //@line 722 "../hsp3/hsp3code.cpp"
 $2 = ($1|0)<=(-2); //@line 722 "../hsp3/hsp3code.cpp"
 if ($2) {
  $3 = (___cxa_allocate_exception(4)|0); //@line 722 "../hsp3/hsp3code.cpp"
  HEAP32[$3>>2] = 5; //@line 722 "../hsp3/hsp3code.cpp"
  ___cxa_throw(($3|0),(624|0),(0|0)); //@line 722 "../hsp3/hsp3code.cpp"
  // unreachable; //@line 722 "../hsp3/hsp3code.cpp"
 }
 $4 = HEAP32[592>>2]|0; //@line 723 "../hsp3/hsp3code.cpp"
 $5 = HEAP16[$4>>1]|0; //@line 723 "../hsp3/hsp3code.cpp"
 $6 = $5 << 16 >> 16; //@line 723 "../hsp3/hsp3code.cpp"
 $7 = ($6|0)!=(2); //@line 723 "../hsp3/hsp3code.cpp"
 if ($7) {
  $8 = (___cxa_allocate_exception(4)|0); //@line 723 "../hsp3/hsp3code.cpp"
  HEAP32[$8>>2] = 6; //@line 723 "../hsp3/hsp3code.cpp"
  ___cxa_throw(($8|0),(624|0),(0|0)); //@line 723 "../hsp3/hsp3code.cpp"
  // unreachable; //@line 723 "../hsp3/hsp3code.cpp"
 } else {
  $9 = HEAP32[592>>2]|0; //@line 724 "../hsp3/hsp3code.cpp"
  $10 = (($9) + 28|0); //@line 724 "../hsp3/hsp3code.cpp"
  $11 = HEAP32[$10>>2]|0; //@line 724 "../hsp3/hsp3code.cpp"
  STACKTOP = sp;return ($11|0); //@line 724 "../hsp3/hsp3code.cpp"
 }
 return 0|0;
}
function __Z10code_getdsPKc($defval) {
 $defval = $defval|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $chk = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $defval;
 $2 = (__Z8code_getv()|0); //@line 733 "../hsp3/hsp3code.cpp"
 $chk = $2; //@line 733 "../hsp3/hsp3code.cpp"
 $3 = $chk; //@line 734 "../hsp3/hsp3code.cpp"
 $4 = ($3|0)<=(-2); //@line 734 "../hsp3/hsp3code.cpp"
 if ($4) {
  $5 = $1; //@line 734 "../hsp3/hsp3code.cpp"
  $0 = $5; //@line 734 "../hsp3/hsp3code.cpp"
  $14 = $0; //@line 737 "../hsp3/hsp3code.cpp"
  STACKTOP = sp;return ($14|0); //@line 737 "../hsp3/hsp3code.cpp"
 }
 $6 = HEAP32[592>>2]|0; //@line 735 "../hsp3/hsp3code.cpp"
 $7 = HEAP16[$6>>1]|0; //@line 735 "../hsp3/hsp3code.cpp"
 $8 = $7 << 16 >> 16; //@line 735 "../hsp3/hsp3code.cpp"
 $9 = ($8|0)!=(2); //@line 735 "../hsp3/hsp3code.cpp"
 if ($9) {
  $10 = (___cxa_allocate_exception(4)|0); //@line 735 "../hsp3/hsp3code.cpp"
  HEAP32[$10>>2] = 6; //@line 735 "../hsp3/hsp3code.cpp"
  ___cxa_throw(($10|0),(624|0),(0|0)); //@line 735 "../hsp3/hsp3code.cpp"
  // unreachable; //@line 735 "../hsp3/hsp3code.cpp"
 }
 $11 = HEAP32[592>>2]|0; //@line 736 "../hsp3/hsp3code.cpp"
 $12 = (($11) + 28|0); //@line 736 "../hsp3/hsp3code.cpp"
 $13 = HEAP32[$12>>2]|0; //@line 736 "../hsp3/hsp3code.cpp"
 $0 = $13; //@line 736 "../hsp3/hsp3code.cpp"
 $14 = $0; //@line 737 "../hsp3/hsp3code.cpp"
 STACKTOP = sp;return ($14|0); //@line 737 "../hsp3/hsp3code.cpp"
}
function __Z11code_getdsiPKc($defval) {
 $defval = $defval|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $chk = 0, $ptr = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $defval;
 $2 = (__Z8code_getv()|0); //@line 746 "../hsp3/hsp3code.cpp"
 $chk = $2; //@line 746 "../hsp3/hsp3code.cpp"
 $3 = $chk; //@line 747 "../hsp3/hsp3code.cpp"
 $4 = ($3|0)<=(-2); //@line 747 "../hsp3/hsp3code.cpp"
 if ($4) {
  $5 = $1; //@line 747 "../hsp3/hsp3code.cpp"
  $0 = $5; //@line 747 "../hsp3/hsp3code.cpp"
  $16 = $0; //@line 755 "../hsp3/hsp3code.cpp"
  STACKTOP = sp;return ($16|0); //@line 755 "../hsp3/hsp3code.cpp"
 }
 $6 = HEAP32[592>>2]|0; //@line 749 "../hsp3/hsp3code.cpp"
 $7 = (($6) + 28|0); //@line 749 "../hsp3/hsp3code.cpp"
 $8 = HEAP32[$7>>2]|0; //@line 749 "../hsp3/hsp3code.cpp"
 $ptr = $8; //@line 749 "../hsp3/hsp3code.cpp"
 $9 = HEAP32[592>>2]|0; //@line 750 "../hsp3/hsp3code.cpp"
 $10 = HEAP16[$9>>1]|0; //@line 750 "../hsp3/hsp3code.cpp"
 $11 = $10 << 16 >> 16; //@line 750 "../hsp3/hsp3code.cpp"
 $12 = ($11|0)!=(2); //@line 750 "../hsp3/hsp3code.cpp"
 if ($12) {
  $13 = HEAP32[592>>2]|0; //@line 752 "../hsp3/hsp3code.cpp"
  $14 = (__Z16HspVarCoreCnvPtrP4PVali($13,2)|0); //@line 752 "../hsp3/hsp3code.cpp"
  $ptr = $14; //@line 752 "../hsp3/hsp3code.cpp"
 }
 $15 = $ptr; //@line 754 "../hsp3/hsp3code.cpp"
 $0 = $15; //@line 754 "../hsp3/hsp3code.cpp"
 $16 = $0; //@line 755 "../hsp3/hsp3code.cpp"
 STACKTOP = sp;return ($16|0); //@line 755 "../hsp3/hsp3code.cpp"
}
function __Z9code_getiv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $chk = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = (__Z8code_getv()|0); //@line 763 "../hsp3/hsp3code.cpp"
 $chk = $1; //@line 763 "../hsp3/hsp3code.cpp"
 $2 = $chk; //@line 764 "../hsp3/hsp3code.cpp"
 $3 = ($2|0)<=(-2); //@line 764 "../hsp3/hsp3code.cpp"
 if ($3) {
  $4 = (___cxa_allocate_exception(4)|0); //@line 764 "../hsp3/hsp3code.cpp"
  HEAP32[$4>>2] = 5; //@line 764 "../hsp3/hsp3code.cpp"
  ___cxa_throw(($4|0),(624|0),(0|0)); //@line 764 "../hsp3/hsp3code.cpp"
  // unreachable; //@line 764 "../hsp3/hsp3code.cpp"
 }
 $5 = HEAP32[592>>2]|0; //@line 765 "../hsp3/hsp3code.cpp"
 $6 = HEAP16[$5>>1]|0; //@line 765 "../hsp3/hsp3code.cpp"
 $7 = $6 << 16 >> 16; //@line 765 "../hsp3/hsp3code.cpp"
 $8 = ($7|0)!=(4); //@line 765 "../hsp3/hsp3code.cpp"
 if (!($8)) {
  $19 = HEAP32[592>>2]|0; //@line 769 "../hsp3/hsp3code.cpp"
  $20 = (($19) + 28|0); //@line 769 "../hsp3/hsp3code.cpp"
  $21 = HEAP32[$20>>2]|0; //@line 769 "../hsp3/hsp3code.cpp"
  $22 = HEAP32[$21>>2]|0; //@line 769 "../hsp3/hsp3code.cpp"
  $0 = $22; //@line 769 "../hsp3/hsp3code.cpp"
  $23 = $0; //@line 770 "../hsp3/hsp3code.cpp"
  STACKTOP = sp;return ($23|0); //@line 770 "../hsp3/hsp3code.cpp"
 }
 $9 = HEAP32[592>>2]|0; //@line 766 "../hsp3/hsp3code.cpp"
 $10 = HEAP16[$9>>1]|0; //@line 766 "../hsp3/hsp3code.cpp"
 $11 = $10 << 16 >> 16; //@line 766 "../hsp3/hsp3code.cpp"
 $12 = ($11|0)!=(3); //@line 766 "../hsp3/hsp3code.cpp"
 if ($12) {
  $13 = (___cxa_allocate_exception(4)|0); //@line 766 "../hsp3/hsp3code.cpp"
  HEAP32[$13>>2] = 6; //@line 766 "../hsp3/hsp3code.cpp"
  ___cxa_throw(($13|0),(624|0),(0|0)); //@line 766 "../hsp3/hsp3code.cpp"
  // unreachable; //@line 766 "../hsp3/hsp3code.cpp"
 }
 $14 = HEAP32[592>>2]|0; //@line 767 "../hsp3/hsp3code.cpp"
 $15 = (($14) + 28|0); //@line 767 "../hsp3/hsp3code.cpp"
 $16 = HEAP32[$15>>2]|0; //@line 767 "../hsp3/hsp3code.cpp"
 $17 = +HEAPF64[$16>>3]; //@line 767 "../hsp3/hsp3code.cpp"
 $18 = (~~(($17))); //@line 767 "../hsp3/hsp3code.cpp"
 $0 = $18; //@line 767 "../hsp3/hsp3code.cpp"
 $23 = $0; //@line 770 "../hsp3/hsp3code.cpp"
 STACKTOP = sp;return ($23|0); //@line 770 "../hsp3/hsp3code.cpp"
}
function __Z10code_getdii($defval) {
 $defval = $defval|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $chk = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $defval;
 $2 = (__Z8code_getv()|0); //@line 778 "../hsp3/hsp3code.cpp"
 $chk = $2; //@line 778 "../hsp3/hsp3code.cpp"
 $3 = $chk; //@line 779 "../hsp3/hsp3code.cpp"
 $4 = ($3|0)<=(-2); //@line 779 "../hsp3/hsp3code.cpp"
 if ($4) {
  $5 = $1; //@line 779 "../hsp3/hsp3code.cpp"
  $0 = $5; //@line 779 "../hsp3/hsp3code.cpp"
  $24 = $0; //@line 785 "../hsp3/hsp3code.cpp"
  STACKTOP = sp;return ($24|0); //@line 785 "../hsp3/hsp3code.cpp"
 }
 $6 = HEAP32[592>>2]|0; //@line 780 "../hsp3/hsp3code.cpp"
 $7 = HEAP16[$6>>1]|0; //@line 780 "../hsp3/hsp3code.cpp"
 $8 = $7 << 16 >> 16; //@line 780 "../hsp3/hsp3code.cpp"
 $9 = ($8|0)!=(4); //@line 780 "../hsp3/hsp3code.cpp"
 if (!($9)) {
  $20 = HEAP32[592>>2]|0; //@line 784 "../hsp3/hsp3code.cpp"
  $21 = (($20) + 28|0); //@line 784 "../hsp3/hsp3code.cpp"
  $22 = HEAP32[$21>>2]|0; //@line 784 "../hsp3/hsp3code.cpp"
  $23 = HEAP32[$22>>2]|0; //@line 784 "../hsp3/hsp3code.cpp"
  $0 = $23; //@line 784 "../hsp3/hsp3code.cpp"
  $24 = $0; //@line 785 "../hsp3/hsp3code.cpp"
  STACKTOP = sp;return ($24|0); //@line 785 "../hsp3/hsp3code.cpp"
 }
 $10 = HEAP32[592>>2]|0; //@line 781 "../hsp3/hsp3code.cpp"
 $11 = HEAP16[$10>>1]|0; //@line 781 "../hsp3/hsp3code.cpp"
 $12 = $11 << 16 >> 16; //@line 781 "../hsp3/hsp3code.cpp"
 $13 = ($12|0)!=(3); //@line 781 "../hsp3/hsp3code.cpp"
 if ($13) {
  $14 = (___cxa_allocate_exception(4)|0); //@line 781 "../hsp3/hsp3code.cpp"
  HEAP32[$14>>2] = 6; //@line 781 "../hsp3/hsp3code.cpp"
  ___cxa_throw(($14|0),(624|0),(0|0)); //@line 781 "../hsp3/hsp3code.cpp"
  // unreachable; //@line 781 "../hsp3/hsp3code.cpp"
 }
 $15 = HEAP32[592>>2]|0; //@line 782 "../hsp3/hsp3code.cpp"
 $16 = (($15) + 28|0); //@line 782 "../hsp3/hsp3code.cpp"
 $17 = HEAP32[$16>>2]|0; //@line 782 "../hsp3/hsp3code.cpp"
 $18 = +HEAPF64[$17>>3]; //@line 782 "../hsp3/hsp3code.cpp"
 $19 = (~~(($18))); //@line 782 "../hsp3/hsp3code.cpp"
 $0 = $19; //@line 782 "../hsp3/hsp3code.cpp"
 $24 = $0; //@line 785 "../hsp3/hsp3code.cpp"
 STACKTOP = sp;return ($24|0); //@line 785 "../hsp3/hsp3code.cpp"
}
function __Z9code_getdv() {
 var $0 = 0.0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $chk = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = (__Z8code_getv()|0); //@line 793 "../hsp3/hsp3code.cpp"
 $chk = $1; //@line 793 "../hsp3/hsp3code.cpp"
 $2 = $chk; //@line 794 "../hsp3/hsp3code.cpp"
 $3 = ($2|0)<=(-2); //@line 794 "../hsp3/hsp3code.cpp"
 if ($3) {
  $4 = (___cxa_allocate_exception(4)|0); //@line 794 "../hsp3/hsp3code.cpp"
  HEAP32[$4>>2] = 5; //@line 794 "../hsp3/hsp3code.cpp"
  ___cxa_throw(($4|0),(624|0),(0|0)); //@line 794 "../hsp3/hsp3code.cpp"
  // unreachable; //@line 794 "../hsp3/hsp3code.cpp"
 }
 $5 = HEAP32[592>>2]|0; //@line 795 "../hsp3/hsp3code.cpp"
 $6 = HEAP16[$5>>1]|0; //@line 795 "../hsp3/hsp3code.cpp"
 $7 = $6 << 16 >> 16; //@line 795 "../hsp3/hsp3code.cpp"
 $8 = ($7|0)!=(3); //@line 795 "../hsp3/hsp3code.cpp"
 if (!($8)) {
  $19 = HEAP32[592>>2]|0; //@line 799 "../hsp3/hsp3code.cpp"
  $20 = (($19) + 28|0); //@line 799 "../hsp3/hsp3code.cpp"
  $21 = HEAP32[$20>>2]|0; //@line 799 "../hsp3/hsp3code.cpp"
  $22 = +HEAPF64[$21>>3]; //@line 799 "../hsp3/hsp3code.cpp"
  $0 = $22; //@line 799 "../hsp3/hsp3code.cpp"
  $23 = $0; //@line 800 "../hsp3/hsp3code.cpp"
  STACKTOP = sp;return (+$23); //@line 800 "../hsp3/hsp3code.cpp"
 }
 $9 = HEAP32[592>>2]|0; //@line 796 "../hsp3/hsp3code.cpp"
 $10 = HEAP16[$9>>1]|0; //@line 796 "../hsp3/hsp3code.cpp"
 $11 = $10 << 16 >> 16; //@line 796 "../hsp3/hsp3code.cpp"
 $12 = ($11|0)!=(4); //@line 796 "../hsp3/hsp3code.cpp"
 if ($12) {
  $13 = (___cxa_allocate_exception(4)|0); //@line 796 "../hsp3/hsp3code.cpp"
  HEAP32[$13>>2] = 6; //@line 796 "../hsp3/hsp3code.cpp"
  ___cxa_throw(($13|0),(624|0),(0|0)); //@line 796 "../hsp3/hsp3code.cpp"
  // unreachable; //@line 796 "../hsp3/hsp3code.cpp"
 }
 $14 = HEAP32[592>>2]|0; //@line 797 "../hsp3/hsp3code.cpp"
 $15 = (($14) + 28|0); //@line 797 "../hsp3/hsp3code.cpp"
 $16 = HEAP32[$15>>2]|0; //@line 797 "../hsp3/hsp3code.cpp"
 $17 = HEAP32[$16>>2]|0; //@line 797 "../hsp3/hsp3code.cpp"
 $18 = (+($17|0)); //@line 797 "../hsp3/hsp3code.cpp"
 $0 = $18; //@line 797 "../hsp3/hsp3code.cpp"
 $23 = $0; //@line 800 "../hsp3/hsp3code.cpp"
 STACKTOP = sp;return (+$23); //@line 800 "../hsp3/hsp3code.cpp"
}
function __Z10code_getddd($defval) {
 $defval = +$defval;
 var $0 = 0.0, $1 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $3 = 0, $4 = 0;
 var $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $chk = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = $defval;
 $2 = (__Z8code_getv()|0); //@line 808 "../hsp3/hsp3code.cpp"
 $chk = $2; //@line 808 "../hsp3/hsp3code.cpp"
 $3 = $chk; //@line 809 "../hsp3/hsp3code.cpp"
 $4 = ($3|0)<=(-2); //@line 809 "../hsp3/hsp3code.cpp"
 if ($4) {
  $5 = $1; //@line 809 "../hsp3/hsp3code.cpp"
  $0 = $5; //@line 809 "../hsp3/hsp3code.cpp"
  $24 = $0; //@line 815 "../hsp3/hsp3code.cpp"
  STACKTOP = sp;return (+$24); //@line 815 "../hsp3/hsp3code.cpp"
 }
 $6 = HEAP32[592>>2]|0; //@line 810 "../hsp3/hsp3code.cpp"
 $7 = HEAP16[$6>>1]|0; //@line 810 "../hsp3/hsp3code.cpp"
 $8 = $7 << 16 >> 16; //@line 810 "../hsp3/hsp3code.cpp"
 $9 = ($8|0)!=(3); //@line 810 "../hsp3/hsp3code.cpp"
 if (!($9)) {
  $20 = HEAP32[592>>2]|0; //@line 814 "../hsp3/hsp3code.cpp"
  $21 = (($20) + 28|0); //@line 814 "../hsp3/hsp3code.cpp"
  $22 = HEAP32[$21>>2]|0; //@line 814 "../hsp3/hsp3code.cpp"
  $23 = +HEAPF64[$22>>3]; //@line 814 "../hsp3/hsp3code.cpp"
  $0 = $23; //@line 814 "../hsp3/hsp3code.cpp"
  $24 = $0; //@line 815 "../hsp3/hsp3code.cpp"
  STACKTOP = sp;return (+$24); //@line 815 "../hsp3/hsp3code.cpp"
 }
 $10 = HEAP32[592>>2]|0; //@line 811 "../hsp3/hsp3code.cpp"
 $11 = HEAP16[$10>>1]|0; //@line 811 "../hsp3/hsp3code.cpp"
 $12 = $11 << 16 >> 16; //@line 811 "../hsp3/hsp3code.cpp"
 $13 = ($12|0)!=(4); //@line 811 "../hsp3/hsp3code.cpp"
 if ($13) {
  $14 = (___cxa_allocate_exception(4)|0); //@line 811 "../hsp3/hsp3code.cpp"
  HEAP32[$14>>2] = 6; //@line 811 "../hsp3/hsp3code.cpp"
  ___cxa_throw(($14|0),(624|0),(0|0)); //@line 811 "../hsp3/hsp3code.cpp"
  // unreachable; //@line 811 "../hsp3/hsp3code.cpp"
 }
 $15 = HEAP32[592>>2]|0; //@line 812 "../hsp3/hsp3code.cpp"
 $16 = (($15) + 28|0); //@line 812 "../hsp3/hsp3code.cpp"
 $17 = HEAP32[$16>>2]|0; //@line 812 "../hsp3/hsp3code.cpp"
 $18 = HEAP32[$17>>2]|0; //@line 812 "../hsp3/hsp3code.cpp"
 $19 = (+($18|0)); //@line 812 "../hsp3/hsp3code.cpp"
 $0 = $19; //@line 812 "../hsp3/hsp3code.cpp"
 $24 = $0; //@line 815 "../hsp3/hsp3code.cpp"
 STACKTOP = sp;return (+$24); //@line 815 "../hsp3/hsp3code.cpp"
}
function __Z15code_getv_proxyPP4PValP9MPVarDatai($pval,$var,$mptype) {
 $pval = $pval|0;
 $var = $var|0;
 $mptype = $mptype|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $aptr = 0, $getv_pval = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $getv_pval = sp + 12|0;
 $1 = $pval;
 $2 = $var;
 $3 = $mptype;
 $4 = $3; //@line 862 "../hsp3/hsp3code.cpp"
 if ((($4|0) == -3)) {
  $9 = $2; //@line 866 "../hsp3/hsp3code.cpp"
  $10 = HEAP32[$9>>2]|0; //@line 866 "../hsp3/hsp3code.cpp"
  HEAP32[$getv_pval>>2] = $10; //@line 866 "../hsp3/hsp3code.cpp"
  $11 = $2; //@line 867 "../hsp3/hsp3code.cpp"
  $12 = (($11) + 4|0); //@line 867 "../hsp3/hsp3code.cpp"
  $13 = HEAP32[$12>>2]|0; //@line 867 "../hsp3/hsp3code.cpp"
  $aptr = $13; //@line 867 "../hsp3/hsp3code.cpp"
  $14 = HEAP32[640>>2]|0; //@line 868 "../hsp3/hsp3code.cpp"
  $15 = ($14|0)==(0); //@line 868 "../hsp3/hsp3code.cpp"
  do {
   if ($15) {
    $16 = HEAP32[648>>2]|0; //@line 868 "../hsp3/hsp3code.cpp"
    $17 = ($16|0)==(40); //@line 868 "../hsp3/hsp3code.cpp"
    if ($17) {
     $18 = (___cxa_allocate_exception(4)|0); //@line 868 "../hsp3/hsp3code.cpp"
     HEAP32[$18>>2] = 34; //@line 868 "../hsp3/hsp3code.cpp"
     ___cxa_throw(($18|0),(624|0),(0|0)); //@line 868 "../hsp3/hsp3code.cpp"
     // unreachable; //@line 868 "../hsp3/hsp3code.cpp"
    } else {
     break;
    }
   }
  } while(0);
 } else if ((($4|0) == -2)) {
  $19 = $2; //@line 871 "../hsp3/hsp3code.cpp"
  $20 = HEAP32[$19>>2]|0; //@line 871 "../hsp3/hsp3code.cpp"
  HEAP32[$getv_pval>>2] = $20; //@line 871 "../hsp3/hsp3code.cpp"
  $21 = (__ZL13code_getv_subPP4PVal($getv_pval)|0); //@line 872 "../hsp3/hsp3code.cpp"
  $aptr = $21; //@line 872 "../hsp3/hsp3code.cpp"
 } else if ((($4|0) == -1)) {
  $22 = $2; //@line 875 "../hsp3/hsp3code.cpp"
  HEAP32[$getv_pval>>2] = $22; //@line 875 "../hsp3/hsp3code.cpp"
  $23 = (__ZL13code_getv_subPP4PVal($getv_pval)|0); //@line 876 "../hsp3/hsp3code.cpp"
  $aptr = $23; //@line 876 "../hsp3/hsp3code.cpp"
 } else if ((($4|0) == 1)) {
  $5 = $1; //@line 864 "../hsp3/hsp3code.cpp"
  $6 = HEAP32[$5>>2]|0; //@line 864 "../hsp3/hsp3code.cpp"
  $7 = (($6) + 40|0); //@line 864 "../hsp3/hsp3code.cpp"
  $8 = HEAP32[$7>>2]|0; //@line 864 "../hsp3/hsp3code.cpp"
  $0 = $8; //@line 864 "../hsp3/hsp3code.cpp"
  $28 = $0; //@line 883 "../hsp3/hsp3code.cpp"
  STACKTOP = sp;return ($28|0); //@line 883 "../hsp3/hsp3code.cpp"
 } else {
  $24 = (___cxa_allocate_exception(4)|0); //@line 879 "../hsp3/hsp3code.cpp"
  HEAP32[$24>>2] = 23; //@line 879 "../hsp3/hsp3code.cpp"
  ___cxa_throw(($24|0),(624|0),(0|0)); //@line 879 "../hsp3/hsp3code.cpp"
  // unreachable; //@line 879 "../hsp3/hsp3code.cpp"
 }
 $25 = HEAP32[$getv_pval>>2]|0; //@line 881 "../hsp3/hsp3code.cpp"
 $26 = $1; //@line 881 "../hsp3/hsp3code.cpp"
 HEAP32[$26>>2] = $25; //@line 881 "../hsp3/hsp3code.cpp"
 $27 = $aptr; //@line 882 "../hsp3/hsp3code.cpp"
 $0 = $27; //@line 882 "../hsp3/hsp3code.cpp"
 $28 = $0; //@line 883 "../hsp3/hsp3code.cpp"
 STACKTOP = sp;return ($28|0); //@line 883 "../hsp3/hsp3code.cpp"
}
function __ZL13code_getv_subPP4PVal($pval) {
 $pval = $pval|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $getv_pval = 0, $mptype = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $pval;
 $mptype = 1; //@line 827 "../hsp3/hsp3code.cpp"
 $2 = $1; //@line 828 "../hsp3/hsp3code.cpp"
 $3 = HEAP32[$2>>2]|0; //@line 828 "../hsp3/hsp3code.cpp"
 $getv_pval = $3; //@line 828 "../hsp3/hsp3code.cpp"
 $4 = $getv_pval; //@line 829 "../hsp3/hsp3code.cpp"
 $5 = (($4) + 36|0); //@line 829 "../hsp3/hsp3code.cpp"
 $6 = HEAP16[$5>>1]|0; //@line 829 "../hsp3/hsp3code.cpp"
 $7 = $6&65535; //@line 829 "../hsp3/hsp3code.cpp"
 $8 = $7 & 16; //@line 829 "../hsp3/hsp3code.cpp"
 $9 = ($8|0)!=(0); //@line 829 "../hsp3/hsp3code.cpp"
 if ($9) {
  $10 = $getv_pval; //@line 830 "../hsp3/hsp3code.cpp"
  __ZL20code_checkarray_obj2P4PVal($10); //@line 830 "../hsp3/hsp3code.cpp"
  $11 = $getv_pval; //@line 831 "../hsp3/hsp3code.cpp"
  $12 = (($11) + 40|0); //@line 831 "../hsp3/hsp3code.cpp"
  $13 = HEAP32[$12>>2]|0; //@line 831 "../hsp3/hsp3code.cpp"
  $0 = $13; //@line 831 "../hsp3/hsp3code.cpp"
  $19 = $0; //@line 835 "../hsp3/hsp3code.cpp"
  STACKTOP = sp;return ($19|0); //@line 835 "../hsp3/hsp3code.cpp"
 } else {
  $14 = $1; //@line 833 "../hsp3/hsp3code.cpp"
  $15 = HEAP32[$14>>2]|0; //@line 833 "../hsp3/hsp3code.cpp"
  __ZL16code_checkarray2P4PVal($15); //@line 833 "../hsp3/hsp3code.cpp"
  $16 = $getv_pval; //@line 834 "../hsp3/hsp3code.cpp"
  $17 = (($16) + 40|0); //@line 834 "../hsp3/hsp3code.cpp"
  $18 = HEAP32[$17>>2]|0; //@line 834 "../hsp3/hsp3code.cpp"
  $0 = $18; //@line 834 "../hsp3/hsp3code.cpp"
  $19 = $0; //@line 835 "../hsp3/hsp3code.cpp"
  STACKTOP = sp;return ($19|0); //@line 835 "../hsp3/hsp3code.cpp"
 }
 return 0|0;
}
function __Z10code_getvaPP4PVal($pval) {
 $pval = $pval|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $aptr = 0, $getv_pval = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $getv_pval = sp + 4|0;
 $1 = $pval;
 $2 = HEAP32[632>>2]|0; //@line 931 "../hsp3/hsp3code.cpp"
 $3 = ($2|0)!=(0); //@line 931 "../hsp3/hsp3code.cpp"
 if ($3) {
  $4 = (___cxa_allocate_exception(4)|0); //@line 931 "../hsp3/hsp3code.cpp"
  HEAP32[$4>>2] = 23; //@line 931 "../hsp3/hsp3code.cpp"
  ___cxa_throw(($4|0),(624|0),(0|0)); //@line 931 "../hsp3/hsp3code.cpp"
  // unreachable; //@line 931 "../hsp3/hsp3code.cpp"
 }
 $5 = HEAP32[640>>2]|0; //@line 933 "../hsp3/hsp3code.cpp"
 $6 = ($5|0)==(5); //@line 933 "../hsp3/hsp3code.cpp"
 if ($6) {
  $7 = $1; //@line 934 "../hsp3/hsp3code.cpp"
  $8 = (__ZL17code_getva_structPP4PVal($7)|0); //@line 934 "../hsp3/hsp3code.cpp"
  $0 = $8; //@line 934 "../hsp3/hsp3code.cpp"
  $23 = $0; //@line 946 "../hsp3/hsp3code.cpp"
  STACKTOP = sp;return ($23|0); //@line 946 "../hsp3/hsp3code.cpp"
 }
 $9 = HEAP32[640>>2]|0; //@line 936 "../hsp3/hsp3code.cpp"
 $10 = ($9|0)!=(1); //@line 936 "../hsp3/hsp3code.cpp"
 if ($10) {
  $11 = (___cxa_allocate_exception(4)|0); //@line 936 "../hsp3/hsp3code.cpp"
  HEAP32[$11>>2] = 23; //@line 936 "../hsp3/hsp3code.cpp"
  ___cxa_throw(($11|0),(624|0),(0|0)); //@line 936 "../hsp3/hsp3code.cpp"
  // unreachable; //@line 936 "../hsp3/hsp3code.cpp"
 }
 $12 = HEAP32[648>>2]|0; //@line 938 "../hsp3/hsp3code.cpp"
 $13 = HEAP32[600>>2]|0; //@line 938 "../hsp3/hsp3code.cpp"
 $14 = (($13) + 44|0); //@line 938 "../hsp3/hsp3code.cpp"
 $15 = HEAP32[$14>>2]|0; //@line 938 "../hsp3/hsp3code.cpp"
 $16 = (($15) + (($12*48)|0)|0); //@line 938 "../hsp3/hsp3code.cpp"
 HEAP32[$getv_pval>>2] = $16; //@line 938 "../hsp3/hsp3code.cpp"
 __Z9code_nextv(); //@line 939 "../hsp3/hsp3code.cpp"
 $17 = (__ZL13code_getv_subPP4PVal($getv_pval)|0); //@line 941 "../hsp3/hsp3code.cpp"
 $aptr = $17; //@line 941 "../hsp3/hsp3code.cpp"
 $18 = HEAP32[632>>2]|0; //@line 943 "../hsp3/hsp3code.cpp"
 $19 = $18 & 8192; //@line 943 "../hsp3/hsp3code.cpp"
 HEAP32[632>>2] = $19; //@line 943 "../hsp3/hsp3code.cpp"
 $20 = HEAP32[$getv_pval>>2]|0; //@line 944 "../hsp3/hsp3code.cpp"
 $21 = $1; //@line 944 "../hsp3/hsp3code.cpp"
 HEAP32[$21>>2] = $20; //@line 944 "../hsp3/hsp3code.cpp"
 $22 = $aptr; //@line 945 "../hsp3/hsp3code.cpp"
 $0 = $22; //@line 945 "../hsp3/hsp3code.cpp"
 $23 = $0; //@line 946 "../hsp3/hsp3code.cpp"
 STACKTOP = sp;return ($23|0); //@line 946 "../hsp3/hsp3code.cpp"
}
function __ZL17code_getva_structPP4PVal($pval) {
 $pval = $pval|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $9 = 0, $aptr = 0, $fv = 0, $i = 0, $out = 0, $prm = 0, $var = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = $pval;
 $2 = HEAP32[648>>2]|0; //@line 897 "../hsp3/hsp3code.cpp"
 $i = $2; //@line 897 "../hsp3/hsp3code.cpp"
 __Z9code_nextv(); //@line 898 "../hsp3/hsp3code.cpp"
 $3 = HEAP32[600>>2]|0; //@line 899 "../hsp3/hsp3code.cpp"
 $4 = (($3) + 828|0); //@line 899 "../hsp3/hsp3code.cpp"
 $5 = HEAP32[$4>>2]|0; //@line 899 "../hsp3/hsp3code.cpp"
 $out = $5; //@line 899 "../hsp3/hsp3code.cpp"
 $6 = $out; //@line 900 "../hsp3/hsp3code.cpp"
 $7 = ($6|0)==(0|0); //@line 900 "../hsp3/hsp3code.cpp"
 if ($7) {
  $8 = (___cxa_allocate_exception(4)|0); //@line 900 "../hsp3/hsp3code.cpp"
  HEAP32[$8>>2] = 30; //@line 900 "../hsp3/hsp3code.cpp"
  ___cxa_throw(($8|0),(624|0),(0|0)); //@line 900 "../hsp3/hsp3code.cpp"
  // unreachable; //@line 900 "../hsp3/hsp3code.cpp"
 }
 $9 = $i; //@line 902 "../hsp3/hsp3code.cpp"
 $10 = ($9|0)==(-1); //@line 902 "../hsp3/hsp3code.cpp"
 if ($10) {
  $11 = $out; //@line 903 "../hsp3/hsp3code.cpp"
  $var = $11; //@line 903 "../hsp3/hsp3code.cpp"
  $12 = $var; //@line 904 "../hsp3/hsp3code.cpp"
  $13 = (($12) + 2|0); //@line 904 "../hsp3/hsp3code.cpp"
  $14 = HEAP16[$13>>1]|0; //@line 904 "../hsp3/hsp3code.cpp"
  $15 = $14 << 16 >> 16; //@line 904 "../hsp3/hsp3code.cpp"
  $16 = ($15|0)!=(21930); //@line 904 "../hsp3/hsp3code.cpp"
  if ($16) {
   $17 = (___cxa_allocate_exception(4)|0); //@line 904 "../hsp3/hsp3code.cpp"
   HEAP32[$17>>2] = 36; //@line 904 "../hsp3/hsp3code.cpp"
   ___cxa_throw(($17|0),(624|0),(0|0)); //@line 904 "../hsp3/hsp3code.cpp"
   // unreachable; //@line 904 "../hsp3/hsp3code.cpp"
  }
  $18 = $var; //@line 905 "../hsp3/hsp3code.cpp"
  $19 = (($18) + 4|0); //@line 905 "../hsp3/hsp3code.cpp"
  $20 = HEAP32[$19>>2]|0; //@line 905 "../hsp3/hsp3code.cpp"
  $21 = $1; //@line 905 "../hsp3/hsp3code.cpp"
  HEAP32[$21>>2] = $20; //@line 905 "../hsp3/hsp3code.cpp"
  $22 = HEAP32[632>>2]|0; //@line 906 "../hsp3/hsp3code.cpp"
  $23 = $22 & 8192; //@line 906 "../hsp3/hsp3code.cpp"
  HEAP32[632>>2] = $23; //@line 906 "../hsp3/hsp3code.cpp"
  $24 = $var; //@line 907 "../hsp3/hsp3code.cpp"
  $25 = (($24) + 8|0); //@line 907 "../hsp3/hsp3code.cpp"
  $26 = HEAP32[$25>>2]|0; //@line 907 "../hsp3/hsp3code.cpp"
  $0 = $26; //@line 907 "../hsp3/hsp3code.cpp"
  $87 = $0; //@line 922 "../hsp3/hsp3code.cpp"
  STACKTOP = sp;return ($87|0); //@line 922 "../hsp3/hsp3code.cpp"
 }
 $27 = $i; //@line 910 "../hsp3/hsp3code.cpp"
 $28 = HEAP32[600>>2]|0; //@line 910 "../hsp3/hsp3code.cpp"
 $29 = (($28) + 836|0); //@line 910 "../hsp3/hsp3code.cpp"
 $30 = HEAP32[$29>>2]|0; //@line 910 "../hsp3/hsp3code.cpp"
 $31 = (($30) + ($27<<3)|0); //@line 910 "../hsp3/hsp3code.cpp"
 $prm = $31; //@line 910 "../hsp3/hsp3code.cpp"
 $32 = $prm; //@line 911 "../hsp3/hsp3code.cpp"
 $33 = (($32) + 2|0); //@line 911 "../hsp3/hsp3code.cpp"
 $34 = HEAP16[$33>>1]|0; //@line 911 "../hsp3/hsp3code.cpp"
 $35 = $34 << 16 >> 16; //@line 911 "../hsp3/hsp3code.cpp"
 $36 = ($35|0)!=(-1); //@line 911 "../hsp3/hsp3code.cpp"
 do {
  if ($36) {
   $37 = $out; //@line 912 "../hsp3/hsp3code.cpp"
   $var = $37; //@line 912 "../hsp3/hsp3code.cpp"
   $38 = $var; //@line 913 "../hsp3/hsp3code.cpp"
   $39 = (($38) + 2|0); //@line 913 "../hsp3/hsp3code.cpp"
   $40 = HEAP16[$39>>1]|0; //@line 913 "../hsp3/hsp3code.cpp"
   $41 = $40 << 16 >> 16; //@line 913 "../hsp3/hsp3code.cpp"
   $42 = ($41|0)!=(21930); //@line 913 "../hsp3/hsp3code.cpp"
   if ($42) {
    $57 = (___cxa_allocate_exception(4)|0); //@line 913 "../hsp3/hsp3code.cpp"
    HEAP32[$57>>2] = 36; //@line 913 "../hsp3/hsp3code.cpp"
    ___cxa_throw(($57|0),(624|0),(0|0)); //@line 913 "../hsp3/hsp3code.cpp"
    // unreachable; //@line 913 "../hsp3/hsp3code.cpp"
   }
   $43 = $var; //@line 913 "../hsp3/hsp3code.cpp"
   $44 = HEAP16[$43>>1]|0; //@line 913 "../hsp3/hsp3code.cpp"
   $45 = $44 << 16 >> 16; //@line 913 "../hsp3/hsp3code.cpp"
   $46 = $prm; //@line 913 "../hsp3/hsp3code.cpp"
   $47 = (($46) + 2|0); //@line 913 "../hsp3/hsp3code.cpp"
   $48 = HEAP16[$47>>1]|0; //@line 913 "../hsp3/hsp3code.cpp"
   $49 = $48 << 16 >> 16; //@line 913 "../hsp3/hsp3code.cpp"
   $50 = ($45|0)!=($49|0); //@line 913 "../hsp3/hsp3code.cpp"
   if ($50) {
    $57 = (___cxa_allocate_exception(4)|0); //@line 913 "../hsp3/hsp3code.cpp"
    HEAP32[$57>>2] = 36; //@line 913 "../hsp3/hsp3code.cpp"
    ___cxa_throw(($57|0),(624|0),(0|0)); //@line 913 "../hsp3/hsp3code.cpp"
    // unreachable; //@line 913 "../hsp3/hsp3code.cpp"
   }
   $51 = $var; //@line 913 "../hsp3/hsp3code.cpp"
   $52 = (($51) + 4|0); //@line 913 "../hsp3/hsp3code.cpp"
   $53 = HEAP32[$52>>2]|0; //@line 913 "../hsp3/hsp3code.cpp"
   $54 = HEAP16[$53>>1]|0; //@line 913 "../hsp3/hsp3code.cpp"
   $55 = $54 << 16 >> 16; //@line 913 "../hsp3/hsp3code.cpp"
   $56 = ($55|0)!=(5); //@line 913 "../hsp3/hsp3code.cpp"
   if ($56) {
    $57 = (___cxa_allocate_exception(4)|0); //@line 913 "../hsp3/hsp3code.cpp"
    HEAP32[$57>>2] = 36; //@line 913 "../hsp3/hsp3code.cpp"
    ___cxa_throw(($57|0),(624|0),(0|0)); //@line 913 "../hsp3/hsp3code.cpp"
    // unreachable; //@line 913 "../hsp3/hsp3code.cpp"
   }
   $58 = $var; //@line 914 "../hsp3/hsp3code.cpp"
   $59 = (($58) + 4|0); //@line 914 "../hsp3/hsp3code.cpp"
   $60 = HEAP32[$59>>2]|0; //@line 914 "../hsp3/hsp3code.cpp"
   $61 = $var; //@line 914 "../hsp3/hsp3code.cpp"
   $62 = (($61) + 8|0); //@line 914 "../hsp3/hsp3code.cpp"
   $63 = HEAP32[$62>>2]|0; //@line 914 "../hsp3/hsp3code.cpp"
   $64 = (__Z17HspVarCorePtrAPTRP4PVali($60,$63)|0); //@line 914 "../hsp3/hsp3code.cpp"
   $fv = $64; //@line 914 "../hsp3/hsp3code.cpp"
   $65 = $fv; //@line 915 "../hsp3/hsp3code.cpp"
   $66 = HEAP16[$65>>1]|0; //@line 915 "../hsp3/hsp3code.cpp"
   $67 = $66 << 16 >> 16; //@line 915 "../hsp3/hsp3code.cpp"
   $68 = ($67|0)==(0); //@line 915 "../hsp3/hsp3code.cpp"
   if ($68) {
    $69 = (___cxa_allocate_exception(4)|0); //@line 915 "../hsp3/hsp3code.cpp"
    HEAP32[$69>>2] = 36; //@line 915 "../hsp3/hsp3code.cpp"
    ___cxa_throw(($69|0),(624|0),(0|0)); //@line 915 "../hsp3/hsp3code.cpp"
    // unreachable; //@line 915 "../hsp3/hsp3code.cpp"
   } else {
    $70 = $fv; //@line 916 "../hsp3/hsp3code.cpp"
    $71 = (($70) + 12|0); //@line 916 "../hsp3/hsp3code.cpp"
    $72 = HEAP32[$71>>2]|0; //@line 916 "../hsp3/hsp3code.cpp"
    $out = $72; //@line 916 "../hsp3/hsp3code.cpp"
    break;
   }
  }
 } while(0);
 $73 = $prm; //@line 918 "../hsp3/hsp3code.cpp"
 $74 = (($73) + 4|0); //@line 918 "../hsp3/hsp3code.cpp"
 $75 = HEAP32[$74>>2]|0; //@line 918 "../hsp3/hsp3code.cpp"
 $76 = $out; //@line 918 "../hsp3/hsp3code.cpp"
 $77 = (($76) + ($75)|0); //@line 918 "../hsp3/hsp3code.cpp"
 $out = $77; //@line 918 "../hsp3/hsp3code.cpp"
 $78 = $1; //@line 919 "../hsp3/hsp3code.cpp"
 $79 = $out; //@line 919 "../hsp3/hsp3code.cpp"
 $80 = $prm; //@line 919 "../hsp3/hsp3code.cpp"
 $81 = HEAP16[$80>>1]|0; //@line 919 "../hsp3/hsp3code.cpp"
 $82 = $81 << 16 >> 16; //@line 919 "../hsp3/hsp3code.cpp"
 $83 = (__Z15code_getv_proxyPP4PValP9MPVarDatai($78,$79,$82)|0); //@line 919 "../hsp3/hsp3code.cpp"
 $aptr = $83; //@line 919 "../hsp3/hsp3code.cpp"
 $84 = HEAP32[632>>2]|0; //@line 920 "../hsp3/hsp3code.cpp"
 $85 = $84 & 8192; //@line 920 "../hsp3/hsp3code.cpp"
 HEAP32[632>>2] = $85; //@line 920 "../hsp3/hsp3code.cpp"
 $86 = $aptr; //@line 921 "../hsp3/hsp3code.cpp"
 $0 = $86; //@line 921 "../hsp3/hsp3code.cpp"
 $87 = $0; //@line 922 "../hsp3/hsp3code.cpp"
 STACKTOP = sp;return ($87|0); //@line 922 "../hsp3/hsp3code.cpp"
}
function __Z12code_getpvalv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $aptr = 0, $getv_pval = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $getv_pval = sp + 4|0;
 $0 = (__Z10code_getvaPP4PVal($getv_pval)|0); //@line 955 "../hsp3/hsp3code.cpp"
 $aptr = $0; //@line 955 "../hsp3/hsp3code.cpp"
 $1 = $aptr; //@line 956 "../hsp3/hsp3code.cpp"
 $2 = ($1|0)!=(0); //@line 956 "../hsp3/hsp3code.cpp"
 if ($2) {
  $3 = (___cxa_allocate_exception(4)|0); //@line 956 "../hsp3/hsp3code.cpp"
  HEAP32[$3>>2] = 25; //@line 956 "../hsp3/hsp3code.cpp"
  ___cxa_throw(($3|0),(624|0),(0|0)); //@line 956 "../hsp3/hsp3code.cpp"
  // unreachable; //@line 956 "../hsp3/hsp3code.cpp"
 } else {
  $4 = HEAP32[$getv_pval>>2]|0; //@line 957 "../hsp3/hsp3code.cpp"
  STACKTOP = sp;return ($4|0); //@line 957 "../hsp3/hsp3code.cpp"
 }
 return 0|0;
}
function __Z10code_getlbv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $chk = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = HEAP32[640>>2]|0; //@line 966 "../hsp3/hsp3code.cpp"
 $2 = ($1|0)!=(7); //@line 966 "../hsp3/hsp3code.cpp"
 if (!($2)) {
  $21 = HEAP32[600>>2]|0; //@line 979 "../hsp3/hsp3code.cpp"
  $22 = (($21) + 8|0); //@line 979 "../hsp3/hsp3code.cpp"
  $23 = HEAP32[$22>>2]|0; //@line 979 "../hsp3/hsp3code.cpp"
  $24 = HEAP32[648>>2]|0; //@line 979 "../hsp3/hsp3code.cpp"
  $25 = HEAP32[600>>2]|0; //@line 979 "../hsp3/hsp3code.cpp"
  $26 = (($25) + 20|0); //@line 979 "../hsp3/hsp3code.cpp"
  $27 = HEAP32[$26>>2]|0; //@line 979 "../hsp3/hsp3code.cpp"
  $28 = (($27) + ($24<<2)|0); //@line 979 "../hsp3/hsp3code.cpp"
  $29 = HEAP32[$28>>2]|0; //@line 979 "../hsp3/hsp3code.cpp"
  $30 = (($23) + ($29<<1)|0); //@line 979 "../hsp3/hsp3code.cpp"
  $0 = $30; //@line 979 "../hsp3/hsp3code.cpp"
  $31 = $0; //@line 980 "../hsp3/hsp3code.cpp"
  STACKTOP = sp;return ($31|0); //@line 980 "../hsp3/hsp3code.cpp"
 }
 $3 = (__Z8code_getv()|0); //@line 969 "../hsp3/hsp3code.cpp"
 $chk = $3; //@line 969 "../hsp3/hsp3code.cpp"
 $4 = $chk; //@line 970 "../hsp3/hsp3code.cpp"
 $5 = ($4|0)<=(-2); //@line 970 "../hsp3/hsp3code.cpp"
 if ($5) {
  $6 = (___cxa_allocate_exception(4)|0); //@line 970 "../hsp3/hsp3code.cpp"
  HEAP32[$6>>2] = 8; //@line 970 "../hsp3/hsp3code.cpp"
  ___cxa_throw(($6|0),(624|0),(0|0)); //@line 970 "../hsp3/hsp3code.cpp"
  // unreachable; //@line 970 "../hsp3/hsp3code.cpp"
 }
 $7 = HEAP32[592>>2]|0; //@line 971 "../hsp3/hsp3code.cpp"
 $8 = HEAP16[$7>>1]|0; //@line 971 "../hsp3/hsp3code.cpp"
 $9 = $8 << 16 >> 16; //@line 971 "../hsp3/hsp3code.cpp"
 $10 = ($9|0)!=(1); //@line 971 "../hsp3/hsp3code.cpp"
 if ($10) {
  $11 = (___cxa_allocate_exception(4)|0); //@line 971 "../hsp3/hsp3code.cpp"
  HEAP32[$11>>2] = 8; //@line 971 "../hsp3/hsp3code.cpp"
  ___cxa_throw(($11|0),(624|0),(0|0)); //@line 971 "../hsp3/hsp3code.cpp"
  // unreachable; //@line 971 "../hsp3/hsp3code.cpp"
 }
 $12 = HEAP32[592>>2]|0; //@line 972 "../hsp3/hsp3code.cpp"
 $13 = (($12) + 28|0); //@line 972 "../hsp3/hsp3code.cpp"
 $14 = HEAP32[$13>>2]|0; //@line 972 "../hsp3/hsp3code.cpp"
 $15 = HEAP32[$14>>2]|0; //@line 972 "../hsp3/hsp3code.cpp"
 $p = $15; //@line 972 "../hsp3/hsp3code.cpp"
 $16 = $p; //@line 973 "../hsp3/hsp3code.cpp"
 $17 = ($16|0)==(0|0); //@line 973 "../hsp3/hsp3code.cpp"
 if ($17) {
  $18 = (___cxa_allocate_exception(4)|0); //@line 974 "../hsp3/hsp3code.cpp"
  HEAP32[$18>>2] = 8; //@line 974 "../hsp3/hsp3code.cpp"
  ___cxa_throw(($18|0),(624|0),(0|0)); //@line 974 "../hsp3/hsp3code.cpp"
  // unreachable; //@line 974 "../hsp3/hsp3code.cpp"
 }
 $19 = HEAP32[680>>2]|0; //@line 976 "../hsp3/hsp3code.cpp"
 HEAP32[688>>2] = $19; //@line 976 "../hsp3/hsp3code.cpp"
 $20 = $p; //@line 977 "../hsp3/hsp3code.cpp"
 $0 = $20; //@line 977 "../hsp3/hsp3code.cpp"
 $31 = $0; //@line 980 "../hsp3/hsp3code.cpp"
 STACKTOP = sp;return ($31|0); //@line 980 "../hsp3/hsp3code.cpp"
}
function __Z11code_getlb2v() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = (__Z10code_getlbv()|0); //@line 986 "../hsp3/hsp3code.cpp"
 $s = $0; //@line 986 "../hsp3/hsp3code.cpp"
 __Z9code_nextv(); //@line 987 "../hsp3/hsp3code.cpp"
 $1 = HEAP32[632>>2]|0; //@line 988 "../hsp3/hsp3code.cpp"
 $2 = $1 & -16385; //@line 988 "../hsp3/hsp3code.cpp"
 HEAP32[632>>2] = $2; //@line 988 "../hsp3/hsp3code.cpp"
 $3 = $s; //@line 989 "../hsp3/hsp3code.cpp"
 STACKTOP = sp;return ($3|0); //@line 989 "../hsp3/hsp3code.cpp"
}
function __Z13code_getstprmv() {
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $prm = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = HEAP32[640>>2]|0; //@line 998 "../hsp3/hsp3code.cpp"
 $1 = ($0|0)!=(5); //@line 998 "../hsp3/hsp3code.cpp"
 if ($1) {
  $2 = (___cxa_allocate_exception(4)|0); //@line 998 "../hsp3/hsp3code.cpp"
  HEAP32[$2>>2] = 35; //@line 998 "../hsp3/hsp3code.cpp"
  ___cxa_throw(($2|0),(624|0),(0|0)); //@line 998 "../hsp3/hsp3code.cpp"
  // unreachable; //@line 998 "../hsp3/hsp3code.cpp"
 } else {
  $3 = HEAP32[648>>2]|0; //@line 999 "../hsp3/hsp3code.cpp"
  $4 = HEAP32[600>>2]|0; //@line 999 "../hsp3/hsp3code.cpp"
  $5 = (($4) + 836|0); //@line 999 "../hsp3/hsp3code.cpp"
  $6 = HEAP32[$5>>2]|0; //@line 999 "../hsp3/hsp3code.cpp"
  $7 = (($6) + ($3<<3)|0); //@line 999 "../hsp3/hsp3code.cpp"
  $prm = $7; //@line 999 "../hsp3/hsp3code.cpp"
  __Z9code_nextv(); //@line 1000 "../hsp3/hsp3code.cpp"
  $8 = HEAP32[632>>2]|0; //@line 1001 "../hsp3/hsp3code.cpp"
  $9 = $8 & -16385; //@line 1001 "../hsp3/hsp3code.cpp"
  HEAP32[632>>2] = $9; //@line 1001 "../hsp3/hsp3code.cpp"
  $10 = $prm; //@line 1002 "../hsp3/hsp3code.cpp"
  STACKTOP = sp;return ($10|0); //@line 1002 "../hsp3/hsp3code.cpp"
 }
 return 0|0;
}
function __Z14code_getstructv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $prm = 0, $st = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = (__Z13code_getstprmv()|0); //@line 1012 "../hsp3/hsp3code.cpp"
 $prm = $0; //@line 1012 "../hsp3/hsp3code.cpp"
 $1 = $prm; //@line 1013 "../hsp3/hsp3code.cpp"
 $2 = HEAP16[$1>>1]|0; //@line 1013 "../hsp3/hsp3code.cpp"
 $3 = $2 << 16 >> 16; //@line 1013 "../hsp3/hsp3code.cpp"
 $4 = ($3|0)!=(-5); //@line 1013 "../hsp3/hsp3code.cpp"
 if ($4) {
  $5 = (___cxa_allocate_exception(4)|0); //@line 1013 "../hsp3/hsp3code.cpp"
  HEAP32[$5>>2] = 35; //@line 1013 "../hsp3/hsp3code.cpp"
  ___cxa_throw(($5|0),(624|0),(0|0)); //@line 1013 "../hsp3/hsp3code.cpp"
  // unreachable; //@line 1013 "../hsp3/hsp3code.cpp"
 } else {
  $6 = $prm; //@line 1014 "../hsp3/hsp3code.cpp"
  $7 = (($6) + 2|0); //@line 1014 "../hsp3/hsp3code.cpp"
  $8 = HEAP16[$7>>1]|0; //@line 1014 "../hsp3/hsp3code.cpp"
  $9 = $8 << 16 >> 16; //@line 1014 "../hsp3/hsp3code.cpp"
  $10 = HEAP32[600>>2]|0; //@line 1014 "../hsp3/hsp3code.cpp"
  $11 = (($10) + 840|0); //@line 1014 "../hsp3/hsp3code.cpp"
  $12 = HEAP32[$11>>2]|0; //@line 1014 "../hsp3/hsp3code.cpp"
  $13 = (($12) + (($9*28)|0)|0); //@line 1014 "../hsp3/hsp3code.cpp"
  $st = $13; //@line 1014 "../hsp3/hsp3code.cpp"
  $14 = $st; //@line 1015 "../hsp3/hsp3code.cpp"
  STACKTOP = sp;return ($14|0); //@line 1015 "../hsp3/hsp3code.cpp"
 }
 return 0|0;
}
function __Z10code_setvaP4PValiiPKv($pval,$aptr,$type,$ptr) {
 $pval = $pval|0;
 $aptr = $aptr|0;
 $type = $type|0;
 $ptr = $ptr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $proc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $pval;
 $1 = $aptr;
 $2 = $type;
 $3 = $ptr;
 $4 = $1; //@line 1060 "../hsp3/hsp3code.cpp"
 $5 = $0; //@line 1060 "../hsp3/hsp3code.cpp"
 $6 = (($5) + 40|0); //@line 1060 "../hsp3/hsp3code.cpp"
 HEAP32[$6>>2] = $4; //@line 1060 "../hsp3/hsp3code.cpp"
 $7 = $2; //@line 1061 "../hsp3/hsp3code.cpp"
 $8 = HEAP32[3456>>2]|0; //@line 1061 "../hsp3/hsp3code.cpp"
 $9 = (($8) + (($7*140)|0)|0); //@line 1061 "../hsp3/hsp3code.cpp"
 $proc = $9; //@line 1061 "../hsp3/hsp3code.cpp"
 $10 = $0; //@line 1062 "../hsp3/hsp3code.cpp"
 $11 = HEAP16[$10>>1]|0; //@line 1062 "../hsp3/hsp3code.cpp"
 $12 = $11 << 16 >> 16; //@line 1062 "../hsp3/hsp3code.cpp"
 $13 = $2; //@line 1062 "../hsp3/hsp3code.cpp"
 $14 = ($12|0)!=($13|0); //@line 1062 "../hsp3/hsp3code.cpp"
 do {
  if ($14) {
   $15 = $1; //@line 1063 "../hsp3/hsp3code.cpp"
   $16 = ($15|0)!=(0); //@line 1063 "../hsp3/hsp3code.cpp"
   if ($16) {
    $17 = (___cxa_allocate_exception(4)|0); //@line 1063 "../hsp3/hsp3code.cpp"
    HEAP32[$17>>2] = 31; //@line 1063 "../hsp3/hsp3code.cpp"
    ___cxa_throw(($17|0),(624|0),(0|0)); //@line 1063 "../hsp3/hsp3code.cpp"
    // unreachable; //@line 1063 "../hsp3/hsp3code.cpp"
   } else {
    $18 = $0; //@line 1064 "../hsp3/hsp3code.cpp"
    $19 = $2; //@line 1064 "../hsp3/hsp3code.cpp"
    __Z15HspVarCoreClearP4PVali($18,$19); //@line 1064 "../hsp3/hsp3code.cpp"
    break;
   }
  }
 } while(0);
 $20 = $proc; //@line 1066 "../hsp3/hsp3code.cpp"
 $21 = (($20) + 72|0); //@line 1066 "../hsp3/hsp3code.cpp"
 $22 = HEAP32[$21>>2]|0; //@line 1066 "../hsp3/hsp3code.cpp"
 $23 = $0; //@line 1066 "../hsp3/hsp3code.cpp"
 $24 = $proc; //@line 1066 "../hsp3/hsp3code.cpp"
 $25 = (($24) + 28|0); //@line 1066 "../hsp3/hsp3code.cpp"
 $26 = HEAP32[$25>>2]|0; //@line 1066 "../hsp3/hsp3code.cpp"
 $27 = $0; //@line 1066 "../hsp3/hsp3code.cpp"
 $28 = (FUNCTION_TABLE_ii[$26 & 255]($27)|0); //@line 1066 "../hsp3/hsp3code.cpp"
 $29 = $3; //@line 1066 "../hsp3/hsp3code.cpp"
 FUNCTION_TABLE_viii[$22 & 255]($23,$28,$29); //@line 1066 "../hsp3/hsp3code.cpp"
 STACKTOP = sp;return; //@line 1067 "../hsp3/hsp3code.cpp"
}
function __Z12code_getvptrPP4PValPi($pval,$size) {
 $pval = $pval|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $aptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $pval;
 $1 = $size;
 $2 = $0; //@line 1075 "../hsp3/hsp3code.cpp"
 $3 = (__Z10code_getvaPP4PVal($2)|0); //@line 1075 "../hsp3/hsp3code.cpp"
 $aptr = $3; //@line 1075 "../hsp3/hsp3code.cpp"
 $4 = $0; //@line 1076 "../hsp3/hsp3code.cpp"
 $5 = HEAP32[$4>>2]|0; //@line 1076 "../hsp3/hsp3code.cpp"
 $6 = HEAP16[$5>>1]|0; //@line 1076 "../hsp3/hsp3code.cpp"
 $7 = $6 << 16 >> 16; //@line 1076 "../hsp3/hsp3code.cpp"
 $8 = HEAP32[3456>>2]|0; //@line 1076 "../hsp3/hsp3code.cpp"
 $9 = (($8) + (($7*140)|0)|0); //@line 1076 "../hsp3/hsp3code.cpp"
 $10 = (($9) + 64|0); //@line 1076 "../hsp3/hsp3code.cpp"
 $11 = HEAP32[$10>>2]|0; //@line 1076 "../hsp3/hsp3code.cpp"
 $12 = $0; //@line 1076 "../hsp3/hsp3code.cpp"
 $13 = HEAP32[$12>>2]|0; //@line 1076 "../hsp3/hsp3code.cpp"
 $14 = $0; //@line 1076 "../hsp3/hsp3code.cpp"
 $15 = HEAP32[$14>>2]|0; //@line 1076 "../hsp3/hsp3code.cpp"
 $16 = $aptr; //@line 1076 "../hsp3/hsp3code.cpp"
 $17 = (__Z17HspVarCorePtrAPTRP4PVali($15,$16)|0); //@line 1076 "../hsp3/hsp3code.cpp"
 $18 = $1; //@line 1076 "../hsp3/hsp3code.cpp"
 $19 = (FUNCTION_TABLE_iiii[$11 & 255]($13,$17,$18)|0); //@line 1076 "../hsp3/hsp3code.cpp"
 STACKTOP = sp;return ($19|0); //@line 1076 "../hsp3/hsp3code.cpp"
}
function __Z14code_newstructP4PVal($pval) {
 $pval = $pval|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fv = 0, $i = 0, $max = 0, $ofs = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = $pval;
 $ofs = 0; //@line 1247 "../hsp3/hsp3code.cpp"
 $2 = $1; //@line 1248 "../hsp3/hsp3code.cpp"
 $3 = HEAP16[$2>>1]|0; //@line 1248 "../hsp3/hsp3code.cpp"
 $4 = $3 << 16 >> 16; //@line 1248 "../hsp3/hsp3code.cpp"
 $5 = ($4|0)!=(5); //@line 1248 "../hsp3/hsp3code.cpp"
 if ($5) {
  $0 = 0; //@line 1248 "../hsp3/hsp3code.cpp"
  $29 = $0; //@line 1256 "../hsp3/hsp3code.cpp"
  STACKTOP = sp;return ($29|0); //@line 1256 "../hsp3/hsp3code.cpp"
 }
 $6 = $1; //@line 1249 "../hsp3/hsp3code.cpp"
 $7 = (($6) + 28|0); //@line 1249 "../hsp3/hsp3code.cpp"
 $8 = HEAP32[$7>>2]|0; //@line 1249 "../hsp3/hsp3code.cpp"
 $fv = $8; //@line 1249 "../hsp3/hsp3code.cpp"
 $9 = $1; //@line 1250 "../hsp3/hsp3code.cpp"
 $10 = (($9) + 4|0); //@line 1250 "../hsp3/hsp3code.cpp"
 $11 = (($10) + 4|0); //@line 1250 "../hsp3/hsp3code.cpp"
 $12 = HEAP32[$11>>2]|0; //@line 1250 "../hsp3/hsp3code.cpp"
 $max = $12; //@line 1250 "../hsp3/hsp3code.cpp"
 $i = 0; //@line 1251 "../hsp3/hsp3code.cpp"
 while(1) {
  $13 = $i; //@line 1251 "../hsp3/hsp3code.cpp"
  $14 = $max; //@line 1251 "../hsp3/hsp3code.cpp"
  $15 = ($13|0)<($14|0); //@line 1251 "../hsp3/hsp3code.cpp"
  if (!($15)) {
   label = 9;
   break;
  }
  $16 = $i; //@line 1252 "../hsp3/hsp3code.cpp"
  $17 = $fv; //@line 1252 "../hsp3/hsp3code.cpp"
  $18 = (($17) + ($16<<4)|0); //@line 1252 "../hsp3/hsp3code.cpp"
  $19 = HEAP16[$18>>1]|0; //@line 1252 "../hsp3/hsp3code.cpp"
  $20 = $19 << 16 >> 16; //@line 1252 "../hsp3/hsp3code.cpp"
  $21 = ($20|0)==(0); //@line 1252 "../hsp3/hsp3code.cpp"
  if ($21) {
   label = 6;
   break;
  }
  $23 = $i; //@line 1251 "../hsp3/hsp3code.cpp"
  $24 = (($23) + 1)|0; //@line 1251 "../hsp3/hsp3code.cpp"
  $i = $24; //@line 1251 "../hsp3/hsp3code.cpp"
 }
 if ((label|0) == 6) {
  $22 = $i; //@line 1252 "../hsp3/hsp3code.cpp"
  $0 = $22; //@line 1252 "../hsp3/hsp3code.cpp"
  $29 = $0; //@line 1256 "../hsp3/hsp3code.cpp"
  STACKTOP = sp;return ($29|0); //@line 1256 "../hsp3/hsp3code.cpp"
 }
 else if ((label|0) == 9) {
  $25 = $1; //@line 1254 "../hsp3/hsp3code.cpp"
  $26 = $max; //@line 1254 "../hsp3/hsp3code.cpp"
  $27 = (($26) + 1)|0; //@line 1254 "../hsp3/hsp3code.cpp"
  __Z15HspVarCoreReDimP4PValii($25,1,$27); //@line 1254 "../hsp3/hsp3code.cpp"
  $28 = $max; //@line 1255 "../hsp3/hsp3code.cpp"
  $0 = $28; //@line 1255 "../hsp3/hsp3code.cpp"
  $29 = $0; //@line 1256 "../hsp3/hsp3code.cpp"
  STACKTOP = sp;return ($29|0); //@line 1256 "../hsp3/hsp3code.cpp"
 }
 return 0|0;
}
function __Z10code_setvsP4PValiPvii($pval,$aptr,$ptr,$size,$subid) {
 $pval = $pval|0;
 $aptr = $aptr|0;
 $ptr = $ptr|0;
 $size = $size|0;
 $subid = $subid|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fv = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $fv = sp + 16|0;
 $0 = $pval;
 $1 = $aptr;
 $2 = $ptr;
 $3 = $size;
 $4 = $subid;
 $5 = $4; //@line 1265 "../hsp3/hsp3code.cpp"
 $6 = $5&65535; //@line 1265 "../hsp3/hsp3code.cpp"
 $7 = (($fv) + 4|0); //@line 1265 "../hsp3/hsp3code.cpp"
 HEAP16[$7>>1] = $6; //@line 1265 "../hsp3/hsp3code.cpp"
 $8 = (($fv) + 6|0); //@line 1266 "../hsp3/hsp3code.cpp"
 HEAP16[$8>>1] = 0; //@line 1266 "../hsp3/hsp3code.cpp"
 $9 = $3; //@line 1267 "../hsp3/hsp3code.cpp"
 $10 = (($fv) + 8|0); //@line 1267 "../hsp3/hsp3code.cpp"
 HEAP32[$10>>2] = $9; //@line 1267 "../hsp3/hsp3code.cpp"
 $11 = $2; //@line 1268 "../hsp3/hsp3code.cpp"
 $12 = (($fv) + 12|0); //@line 1268 "../hsp3/hsp3code.cpp"
 HEAP32[$12>>2] = $11; //@line 1268 "../hsp3/hsp3code.cpp"
 $13 = $0; //@line 1269 "../hsp3/hsp3code.cpp"
 $14 = $1; //@line 1269 "../hsp3/hsp3code.cpp"
 __Z10code_setvaP4PValiiPKv($13,$14,5,$fv); //@line 1269 "../hsp3/hsp3code.cpp"
 $15 = $0; //@line 1270 "../hsp3/hsp3code.cpp"
 $16 = $1; //@line 1270 "../hsp3/hsp3code.cpp"
 $17 = (__Z17HspVarCorePtrAPTRP4PVali($15,$16)|0); //@line 1270 "../hsp3/hsp3code.cpp"
 STACKTOP = sp;return ($17|0); //@line 1270 "../hsp3/hsp3code.cpp"
}
function __Z17code_expandstructPcP9STRUCTDATi($p,$st,$option) {
 $p = $p|0;
 $st = $st|0;
 $option = $option|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $chk = 0;
 var $d = 0, $dst = 0, $i = 0, $out = 0, $prm = 0, $proc = 0, $pval = 0, $refap = 0, $refap3 = 0, $refpv = 0, $refpv2 = 0, $ss = 0, $str = 0, $var = 0, $var1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $refpv = sp + 44|0;
 $refpv2 = sp + 12|0;
 $d = sp;
 $0 = $p;
 $1 = $st;
 $2 = $option;
 $3 = $1; //@line 1281 "../hsp3/hsp3code.cpp"
 $4 = (($3) + 4|0); //@line 1281 "../hsp3/hsp3code.cpp"
 $5 = HEAP32[$4>>2]|0; //@line 1281 "../hsp3/hsp3code.cpp"
 $6 = HEAP32[600>>2]|0; //@line 1281 "../hsp3/hsp3code.cpp"
 $7 = (($6) + 836|0); //@line 1281 "../hsp3/hsp3code.cpp"
 $8 = HEAP32[$7>>2]|0; //@line 1281 "../hsp3/hsp3code.cpp"
 $9 = (($8) + ($5<<3)|0); //@line 1281 "../hsp3/hsp3code.cpp"
 $prm = $9; //@line 1281 "../hsp3/hsp3code.cpp"
 $i = 0; //@line 1283 "../hsp3/hsp3code.cpp"
 L1: while(1) {
  $10 = $i; //@line 1283 "../hsp3/hsp3code.cpp"
  $11 = $1; //@line 1283 "../hsp3/hsp3code.cpp"
  $12 = (($11) + 8|0); //@line 1283 "../hsp3/hsp3code.cpp"
  $13 = HEAP32[$12>>2]|0; //@line 1283 "../hsp3/hsp3code.cpp"
  $14 = ($10|0)<($13|0); //@line 1283 "../hsp3/hsp3code.cpp"
  if (!($14)) {
   label = 19;
   break;
  }
  $15 = $0; //@line 1284 "../hsp3/hsp3code.cpp"
  $16 = $prm; //@line 1284 "../hsp3/hsp3code.cpp"
  $17 = (($16) + 4|0); //@line 1284 "../hsp3/hsp3code.cpp"
  $18 = HEAP32[$17>>2]|0; //@line 1284 "../hsp3/hsp3code.cpp"
  $19 = (($15) + ($18)|0); //@line 1284 "../hsp3/hsp3code.cpp"
  $out = $19; //@line 1284 "../hsp3/hsp3code.cpp"
  $20 = $prm; //@line 1286 "../hsp3/hsp3code.cpp"
  $21 = HEAP16[$20>>1]|0; //@line 1286 "../hsp3/hsp3code.cpp"
  $22 = $21 << 16 >> 16; //@line 1286 "../hsp3/hsp3code.cpp"
  L4: do {
   switch ($22|0) {
   case -6:  {
    $49 = (__Z9code_getsv()|0); //@line 1330 "../hsp3/hsp3code.cpp"
    $str = $49; //@line 1330 "../hsp3/hsp3code.cpp"
    $50 = $str; //@line 1331 "../hsp3/hsp3code.cpp"
    $51 = (_strlen(($50|0))|0); //@line 1331 "../hsp3/hsp3code.cpp"
    $52 = (($51) + 1)|0; //@line 1331 "../hsp3/hsp3code.cpp"
    $53 = (__Z7sbAlloci($52)|0); //@line 1331 "../hsp3/hsp3code.cpp"
    $ss = $53; //@line 1331 "../hsp3/hsp3code.cpp"
    $54 = $ss; //@line 1332 "../hsp3/hsp3code.cpp"
    $55 = $str; //@line 1332 "../hsp3/hsp3code.cpp"
    (_strcpy(($54|0),($55|0))|0); //@line 1332 "../hsp3/hsp3code.cpp"
    $56 = $ss; //@line 1333 "../hsp3/hsp3code.cpp"
    $57 = $out; //@line 1333 "../hsp3/hsp3code.cpp"
    HEAP32[$57>>2] = $56; //@line 1333 "../hsp3/hsp3code.cpp"
    break;
   }
   case -1:  {
    $58 = $out; //@line 1341 "../hsp3/hsp3code.cpp"
    $pval = $58; //@line 1341 "../hsp3/hsp3code.cpp"
    $59 = $pval; //@line 1342 "../hsp3/hsp3code.cpp"
    $60 = (($59) + 2|0); //@line 1342 "../hsp3/hsp3code.cpp"
    HEAP16[$60>>1] = -1; //@line 1342 "../hsp3/hsp3code.cpp"
    $61 = $2; //@line 1343 "../hsp3/hsp3code.cpp"
    $62 = $61 & 1; //@line 1343 "../hsp3/hsp3code.cpp"
    $63 = ($62|0)!=(0); //@line 1343 "../hsp3/hsp3code.cpp"
    do {
     if ($63) {
      $64 = (__Z8code_getv()|0); //@line 1344 "../hsp3/hsp3code.cpp"
      $chk = $64; //@line 1344 "../hsp3/hsp3code.cpp"
      $65 = $chk; //@line 1345 "../hsp3/hsp3code.cpp"
      $66 = ($65|0)==(0); //@line 1345 "../hsp3/hsp3code.cpp"
      if ($66) {
       $67 = HEAP32[592>>2]|0; //@line 1346 "../hsp3/hsp3code.cpp"
       $68 = HEAP16[$67>>1]|0; //@line 1346 "../hsp3/hsp3code.cpp"
       $69 = $pval; //@line 1346 "../hsp3/hsp3code.cpp"
       HEAP16[$69>>1] = $68; //@line 1346 "../hsp3/hsp3code.cpp"
       $70 = $pval; //@line 1347 "../hsp3/hsp3code.cpp"
       $71 = HEAP32[592>>2]|0; //@line 1347 "../hsp3/hsp3code.cpp"
       $72 = HEAP16[$71>>1]|0; //@line 1347 "../hsp3/hsp3code.cpp"
       $73 = $72 << 16 >> 16; //@line 1347 "../hsp3/hsp3code.cpp"
       __Z15HspVarCoreClearP4PVali($70,$73); //@line 1347 "../hsp3/hsp3code.cpp"
       $74 = $pval; //@line 1348 "../hsp3/hsp3code.cpp"
       $75 = HEAP16[$74>>1]|0; //@line 1348 "../hsp3/hsp3code.cpp"
       $76 = $75 << 16 >> 16; //@line 1348 "../hsp3/hsp3code.cpp"
       $77 = HEAP32[3456>>2]|0; //@line 1348 "../hsp3/hsp3code.cpp"
       $78 = (($77) + (($76*140)|0)|0); //@line 1348 "../hsp3/hsp3code.cpp"
       $proc = $78; //@line 1348 "../hsp3/hsp3code.cpp"
       $79 = $proc; //@line 1349 "../hsp3/hsp3code.cpp"
       $80 = (($79) + 28|0); //@line 1349 "../hsp3/hsp3code.cpp"
       $81 = HEAP32[$80>>2]|0; //@line 1349 "../hsp3/hsp3code.cpp"
       $82 = $pval; //@line 1349 "../hsp3/hsp3code.cpp"
       $83 = (FUNCTION_TABLE_ii[$81 & 255]($82)|0); //@line 1349 "../hsp3/hsp3code.cpp"
       $dst = $83; //@line 1349 "../hsp3/hsp3code.cpp"
       $84 = $proc; //@line 1350 "../hsp3/hsp3code.cpp"
       $85 = (($84) + 72|0); //@line 1350 "../hsp3/hsp3code.cpp"
       $86 = HEAP32[$85>>2]|0; //@line 1350 "../hsp3/hsp3code.cpp"
       $87 = $pval; //@line 1350 "../hsp3/hsp3code.cpp"
       $88 = $dst; //@line 1350 "../hsp3/hsp3code.cpp"
       $89 = HEAP32[592>>2]|0; //@line 1350 "../hsp3/hsp3code.cpp"
       $90 = (($89) + 28|0); //@line 1350 "../hsp3/hsp3code.cpp"
       $91 = HEAP32[$90>>2]|0; //@line 1350 "../hsp3/hsp3code.cpp"
       FUNCTION_TABLE_viii[$86 & 255]($87,$88,$91); //@line 1350 "../hsp3/hsp3code.cpp"
       break L4;
      } else {
       break;
      }
     }
    } while(0);
    $92 = $pval; //@line 1354 "../hsp3/hsp3code.cpp"
    HEAP16[$92>>1] = 4; //@line 1354 "../hsp3/hsp3code.cpp"
    $93 = $pval; //@line 1355 "../hsp3/hsp3code.cpp"
    __Z15HspVarCoreClearP4PVali($93,4); //@line 1355 "../hsp3/hsp3code.cpp"
    break;
   }
   case -5:  {
    break;
   }
   case 3:  {
    $47 = (+__Z9code_getdv()); //@line 1322 "../hsp3/hsp3code.cpp"
    HEAPF64[$d>>3] = $47; //@line 1322 "../hsp3/hsp3code.cpp"
    $48 = $out; //@line 1323 "../hsp3/hsp3code.cpp"
    ;HEAP8[$48+0>>0]=HEAP8[$d+0>>0]|0;HEAP8[$48+1>>0]=HEAP8[$d+1>>0]|0;HEAP8[$48+2>>0]=HEAP8[$d+2>>0]|0;HEAP8[$48+3>>0]=HEAP8[$d+3>>0]|0;HEAP8[$48+4>>0]=HEAP8[$d+4>>0]|0;HEAP8[$48+5>>0]=HEAP8[$d+5>>0]|0;HEAP8[$48+6>>0]=HEAP8[$d+6>>0]|0;HEAP8[$48+7>>0]=HEAP8[$d+7>>0]|0; //@line 1323 "../hsp3/hsp3code.cpp"
    break;
   }
   case -2: case -3:  {
    $40 = $out; //@line 1313 "../hsp3/hsp3code.cpp"
    $var1 = $40; //@line 1313 "../hsp3/hsp3code.cpp"
    $41 = (__Z10code_getvaPP4PVal($refpv2)|0); //@line 1314 "../hsp3/hsp3code.cpp"
    $refap3 = $41; //@line 1314 "../hsp3/hsp3code.cpp"
    $42 = HEAP32[$refpv2>>2]|0; //@line 1315 "../hsp3/hsp3code.cpp"
    $43 = $var1; //@line 1315 "../hsp3/hsp3code.cpp"
    HEAP32[$43>>2] = $42; //@line 1315 "../hsp3/hsp3code.cpp"
    $44 = $refap3; //@line 1316 "../hsp3/hsp3code.cpp"
    $45 = $var1; //@line 1316 "../hsp3/hsp3code.cpp"
    $46 = (($45) + 4|0); //@line 1316 "../hsp3/hsp3code.cpp"
    HEAP32[$46>>2] = $44; //@line 1316 "../hsp3/hsp3code.cpp"
    break;
   }
   case -7:  {
    $25 = $out; //@line 1295 "../hsp3/hsp3code.cpp"
    $var = $25; //@line 1295 "../hsp3/hsp3code.cpp"
    $26 = (__Z10code_getvaPP4PVal($refpv)|0); //@line 1296 "../hsp3/hsp3code.cpp"
    $refap = $26; //@line 1296 "../hsp3/hsp3code.cpp"
    $27 = $var; //@line 1297 "../hsp3/hsp3code.cpp"
    $28 = (($27) + 2|0); //@line 1297 "../hsp3/hsp3code.cpp"
    HEAP16[$28>>1] = 21930; //@line 1297 "../hsp3/hsp3code.cpp"
    $29 = $prm; //@line 1298 "../hsp3/hsp3code.cpp"
    $30 = (($29) + 2|0); //@line 1298 "../hsp3/hsp3code.cpp"
    $31 = HEAP16[$30>>1]|0; //@line 1298 "../hsp3/hsp3code.cpp"
    $32 = $var; //@line 1298 "../hsp3/hsp3code.cpp"
    HEAP16[$32>>1] = $31; //@line 1298 "../hsp3/hsp3code.cpp"
    $33 = HEAP32[$refpv>>2]|0; //@line 1299 "../hsp3/hsp3code.cpp"
    $34 = $var; //@line 1299 "../hsp3/hsp3code.cpp"
    $35 = (($34) + 4|0); //@line 1299 "../hsp3/hsp3code.cpp"
    HEAP32[$35>>2] = $33; //@line 1299 "../hsp3/hsp3code.cpp"
    $36 = $refap; //@line 1300 "../hsp3/hsp3code.cpp"
    $37 = $var; //@line 1300 "../hsp3/hsp3code.cpp"
    $38 = (($37) + 8|0); //@line 1300 "../hsp3/hsp3code.cpp"
    HEAP32[$38>>2] = $36; //@line 1300 "../hsp3/hsp3code.cpp"
    break;
   }
   case 4:  {
    $23 = (__Z10code_getdii(0)|0); //@line 1288 "../hsp3/hsp3code.cpp"
    $24 = $out; //@line 1288 "../hsp3/hsp3code.cpp"
    HEAP32[$24>>2] = $23; //@line 1288 "../hsp3/hsp3code.cpp"
    break;
   }
   case -20: case -11:  {
    $39 = $out; //@line 1305 "../hsp3/hsp3code.cpp"
    ;HEAP32[$39+0>>2]=HEAP32[696+0>>2]|0;HEAP32[$39+4>>2]=HEAP32[696+4>>2]|0;HEAP32[$39+8>>2]=HEAP32[696+8>>2]|0; //@line 1305 "../hsp3/hsp3code.cpp"
    break;
   }
   default: {
    label = 16;
    break L1;
   }
   }
  } while(0);
  $95 = $prm; //@line 1363 "../hsp3/hsp3code.cpp"
  $96 = (($95) + 8|0); //@line 1363 "../hsp3/hsp3code.cpp"
  $prm = $96; //@line 1363 "../hsp3/hsp3code.cpp"
  $97 = $i; //@line 1283 "../hsp3/hsp3code.cpp"
  $98 = (($97) + 1)|0; //@line 1283 "../hsp3/hsp3code.cpp"
  $i = $98; //@line 1283 "../hsp3/hsp3code.cpp"
 }
 if ((label|0) == 16) {
  $94 = (___cxa_allocate_exception(4)|0); //@line 1361 "../hsp3/hsp3code.cpp"
  HEAP32[$94>>2] = 36; //@line 1361 "../hsp3/hsp3code.cpp"
  ___cxa_throw(($94|0),(624|0),(0|0)); //@line 1361 "../hsp3/hsp3code.cpp"
  // unreachable; //@line 1361 "../hsp3/hsp3code.cpp"
 }
 else if ((label|0) == 19) {
  STACKTOP = sp;return; //@line 1365 "../hsp3/hsp3code.cpp"
 }
}
function __Z14code_delstructP4PVali($in_pval,$in_aptr) {
 $in_pval = $in_pval|0;
 $in_aptr = $in_aptr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $fv = 0, $i = 0, $out = 0, $p = 0, $prm = 0;
 var $pval = 0, $st = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = $in_pval;
 $1 = $in_aptr;
 $2 = $0; //@line 1380 "../hsp3/hsp3code.cpp"
 $3 = $1; //@line 1380 "../hsp3/hsp3code.cpp"
 $4 = (__Z17HspVarCorePtrAPTRP4PVali($2,$3)|0); //@line 1380 "../hsp3/hsp3code.cpp"
 $fv = $4; //@line 1380 "../hsp3/hsp3code.cpp"
 $5 = $fv; //@line 1382 "../hsp3/hsp3code.cpp"
 $6 = HEAP16[$5>>1]|0; //@line 1382 "../hsp3/hsp3code.cpp"
 $7 = $6 << 16 >> 16; //@line 1382 "../hsp3/hsp3code.cpp"
 $8 = ($7|0)!=(1); //@line 1382 "../hsp3/hsp3code.cpp"
 if ($8) {
  STACKTOP = sp;return; //@line 1413 "../hsp3/hsp3code.cpp"
 }
 $9 = $fv; //@line 1384 "../hsp3/hsp3code.cpp"
 $10 = (($9) + 4|0); //@line 1384 "../hsp3/hsp3code.cpp"
 $11 = HEAP16[$10>>1]|0; //@line 1384 "../hsp3/hsp3code.cpp"
 $12 = $11 << 16 >> 16; //@line 1384 "../hsp3/hsp3code.cpp"
 $13 = HEAP32[600>>2]|0; //@line 1384 "../hsp3/hsp3code.cpp"
 $14 = (($13) + 836|0); //@line 1384 "../hsp3/hsp3code.cpp"
 $15 = HEAP32[$14>>2]|0; //@line 1384 "../hsp3/hsp3code.cpp"
 $16 = (($15) + ($12<<3)|0); //@line 1384 "../hsp3/hsp3code.cpp"
 $prm = $16; //@line 1384 "../hsp3/hsp3code.cpp"
 $17 = $prm; //@line 1385 "../hsp3/hsp3code.cpp"
 $18 = (($17) + 2|0); //@line 1385 "../hsp3/hsp3code.cpp"
 $19 = HEAP16[$18>>1]|0; //@line 1385 "../hsp3/hsp3code.cpp"
 $20 = $19 << 16 >> 16; //@line 1385 "../hsp3/hsp3code.cpp"
 $21 = HEAP32[600>>2]|0; //@line 1385 "../hsp3/hsp3code.cpp"
 $22 = (($21) + 840|0); //@line 1385 "../hsp3/hsp3code.cpp"
 $23 = HEAP32[$22>>2]|0; //@line 1385 "../hsp3/hsp3code.cpp"
 $24 = (($23) + (($20*28)|0)|0); //@line 1385 "../hsp3/hsp3code.cpp"
 $st = $24; //@line 1385 "../hsp3/hsp3code.cpp"
 $25 = $fv; //@line 1386 "../hsp3/hsp3code.cpp"
 $26 = (($25) + 12|0); //@line 1386 "../hsp3/hsp3code.cpp"
 $27 = HEAP32[$26>>2]|0; //@line 1386 "../hsp3/hsp3code.cpp"
 $p = $27; //@line 1386 "../hsp3/hsp3code.cpp"
 $28 = $fv; //@line 1388 "../hsp3/hsp3code.cpp"
 $29 = (($28) + 6|0); //@line 1388 "../hsp3/hsp3code.cpp"
 $30 = HEAP16[$29>>1]|0; //@line 1388 "../hsp3/hsp3code.cpp"
 $31 = $30 << 16 >> 16; //@line 1388 "../hsp3/hsp3code.cpp"
 $32 = ($31|0)==(0); //@line 1388 "../hsp3/hsp3code.cpp"
 if ($32) {
  $33 = $st; //@line 1391 "../hsp3/hsp3code.cpp"
  $34 = (($33) + 20|0); //@line 1391 "../hsp3/hsp3code.cpp"
  $35 = HEAP32[$34>>2]|0; //@line 1391 "../hsp3/hsp3code.cpp"
  $36 = ($35|0)!=(0); //@line 1391 "../hsp3/hsp3code.cpp"
  if ($36) {
   HEAP16[((696 + 2|0))>>1] = 21930; //@line 1392 "../hsp3/hsp3code.cpp"
   $37 = $prm; //@line 1393 "../hsp3/hsp3code.cpp"
   $38 = (($37) + 2|0); //@line 1393 "../hsp3/hsp3code.cpp"
   $39 = HEAP16[$38>>1]|0; //@line 1393 "../hsp3/hsp3code.cpp"
   HEAP16[696>>1] = $39; //@line 1393 "../hsp3/hsp3code.cpp"
   $40 = $0; //@line 1394 "../hsp3/hsp3code.cpp"
   HEAP32[((696 + 4|0))>>2] = $40; //@line 1394 "../hsp3/hsp3code.cpp"
   $41 = $1; //@line 1395 "../hsp3/hsp3code.cpp"
   HEAP32[((696 + 8|0))>>2] = $41; //@line 1395 "../hsp3/hsp3code.cpp"
   $42 = $st; //@line 1396 "../hsp3/hsp3code.cpp"
   $43 = (($42) + 20|0); //@line 1396 "../hsp3/hsp3code.cpp"
   $44 = HEAP32[$43>>2]|0; //@line 1396 "../hsp3/hsp3code.cpp"
   (__ZL13code_callfunci($44)|0); //@line 1396 "../hsp3/hsp3code.cpp"
  }
  $i = 0; //@line 1399 "../hsp3/hsp3code.cpp"
  while(1) {
   $45 = $i; //@line 1399 "../hsp3/hsp3code.cpp"
   $46 = $st; //@line 1399 "../hsp3/hsp3code.cpp"
   $47 = (($46) + 8|0); //@line 1399 "../hsp3/hsp3code.cpp"
   $48 = HEAP32[$47>>2]|0; //@line 1399 "../hsp3/hsp3code.cpp"
   $49 = ($45|0)<($48|0); //@line 1399 "../hsp3/hsp3code.cpp"
   if (!($49)) {
    break;
   }
   $50 = $p; //@line 1400 "../hsp3/hsp3code.cpp"
   $51 = $prm; //@line 1400 "../hsp3/hsp3code.cpp"
   $52 = (($51) + 4|0); //@line 1400 "../hsp3/hsp3code.cpp"
   $53 = HEAP32[$52>>2]|0; //@line 1400 "../hsp3/hsp3code.cpp"
   $54 = (($50) + ($53)|0); //@line 1400 "../hsp3/hsp3code.cpp"
   $out = $54; //@line 1400 "../hsp3/hsp3code.cpp"
   $55 = $prm; //@line 1401 "../hsp3/hsp3code.cpp"
   $56 = HEAP16[$55>>1]|0; //@line 1401 "../hsp3/hsp3code.cpp"
   $57 = $56 << 16 >> 16; //@line 1401 "../hsp3/hsp3code.cpp"
   if ((($57|0) == -1)) {
    $58 = $out; //@line 1403 "../hsp3/hsp3code.cpp"
    $pval = $58; //@line 1403 "../hsp3/hsp3code.cpp"
    $59 = $pval; //@line 1404 "../hsp3/hsp3code.cpp"
    $60 = HEAP16[$59>>1]|0; //@line 1404 "../hsp3/hsp3code.cpp"
    $61 = $60 << 16 >> 16; //@line 1404 "../hsp3/hsp3code.cpp"
    $62 = HEAP32[3456>>2]|0; //@line 1404 "../hsp3/hsp3code.cpp"
    $63 = (($62) + (($61*140)|0)|0); //@line 1404 "../hsp3/hsp3code.cpp"
    $64 = (($63) + 52|0); //@line 1404 "../hsp3/hsp3code.cpp"
    $65 = HEAP32[$64>>2]|0; //@line 1404 "../hsp3/hsp3code.cpp"
    $66 = $pval; //@line 1404 "../hsp3/hsp3code.cpp"
    FUNCTION_TABLE_vi[$65 & 255]($66); //@line 1404 "../hsp3/hsp3code.cpp"
   }
   $67 = $prm; //@line 1407 "../hsp3/hsp3code.cpp"
   $68 = (($67) + 8|0); //@line 1407 "../hsp3/hsp3code.cpp"
   $prm = $68; //@line 1407 "../hsp3/hsp3code.cpp"
   $69 = $i; //@line 1399 "../hsp3/hsp3code.cpp"
   $70 = (($69) + 1)|0; //@line 1399 "../hsp3/hsp3code.cpp"
   $i = $70; //@line 1399 "../hsp3/hsp3code.cpp"
  }
 }
 $71 = $fv; //@line 1412 "../hsp3/hsp3code.cpp"
 $72 = (($71) + 12|0); //@line 1412 "../hsp3/hsp3code.cpp"
 $73 = HEAP32[$72>>2]|0; //@line 1412 "../hsp3/hsp3code.cpp"
 __Z6sbFreePv($73); //@line 1412 "../hsp3/hsp3code.cpp"
 $74 = $fv; //@line 1413 "../hsp3/hsp3code.cpp"
 HEAP16[$74>>1] = 0; //@line 1413 "../hsp3/hsp3code.cpp"
 STACKTOP = sp;return; //@line 1413 "../hsp3/hsp3code.cpp"
}
function __ZL13code_callfunci($cmd) {
 $cmd = $cmd|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0, $r = 0, $size = 0, $st = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $cmd;
 $1 = $0; //@line 1195 "../hsp3/hsp3code.cpp"
 $2 = HEAP32[600>>2]|0; //@line 1195 "../hsp3/hsp3code.cpp"
 $3 = (($2) + 840|0); //@line 1195 "../hsp3/hsp3code.cpp"
 $4 = HEAP32[$3>>2]|0; //@line 1195 "../hsp3/hsp3code.cpp"
 $5 = (($4) + (($1*28)|0)|0); //@line 1195 "../hsp3/hsp3code.cpp"
 $st = $5; //@line 1195 "../hsp3/hsp3code.cpp"
 $6 = $st; //@line 1197 "../hsp3/hsp3code.cpp"
 $7 = (($6) + 16|0); //@line 1197 "../hsp3/hsp3code.cpp"
 $8 = HEAP32[$7>>2]|0; //@line 1197 "../hsp3/hsp3code.cpp"
 $9 = (20 + ($8))|0; //@line 1197 "../hsp3/hsp3code.cpp"
 $size = $9; //@line 1197 "../hsp3/hsp3code.cpp"
 $10 = $size; //@line 1198 "../hsp3/hsp3code.cpp"
 $11 = (__Z13StackPushSizeii(257,$10)|0); //@line 1198 "../hsp3/hsp3code.cpp"
 $r = $11; //@line 1198 "../hsp3/hsp3code.cpp"
 $12 = $r; //@line 1199 "../hsp3/hsp3code.cpp"
 $13 = (($12) + 20|0); //@line 1199 "../hsp3/hsp3code.cpp"
 $p = $13; //@line 1199 "../hsp3/hsp3code.cpp"
 $14 = $p; //@line 1200 "../hsp3/hsp3code.cpp"
 $15 = $st; //@line 1200 "../hsp3/hsp3code.cpp"
 __Z17code_expandstructPcP9STRUCTDATi($14,$15,0); //@line 1200 "../hsp3/hsp3code.cpp"
 $16 = HEAP32[600>>2]|0; //@line 1202 "../hsp3/hsp3code.cpp"
 $17 = (($16) + 828|0); //@line 1202 "../hsp3/hsp3code.cpp"
 $18 = HEAP32[$17>>2]|0; //@line 1202 "../hsp3/hsp3code.cpp"
 $19 = $r; //@line 1202 "../hsp3/hsp3code.cpp"
 $20 = (($19) + 12|0); //@line 1202 "../hsp3/hsp3code.cpp"
 HEAP32[$20>>2] = $18; //@line 1202 "../hsp3/hsp3code.cpp"
 $21 = $p; //@line 1203 "../hsp3/hsp3code.cpp"
 $22 = HEAP32[600>>2]|0; //@line 1203 "../hsp3/hsp3code.cpp"
 $23 = (($22) + 828|0); //@line 1203 "../hsp3/hsp3code.cpp"
 HEAP32[$23>>2] = $21; //@line 1203 "../hsp3/hsp3code.cpp"
 $24 = HEAP32[680>>2]|0; //@line 1205 "../hsp3/hsp3code.cpp"
 $25 = $r; //@line 1205 "../hsp3/hsp3code.cpp"
 $26 = (($25) + 4|0); //@line 1205 "../hsp3/hsp3code.cpp"
 HEAP32[$26>>2] = $24; //@line 1205 "../hsp3/hsp3code.cpp"
 $27 = HEAP32[600>>2]|0; //@line 1206 "../hsp3/hsp3code.cpp"
 $28 = (($27) + 256|0); //@line 1206 "../hsp3/hsp3code.cpp"
 $29 = HEAP32[$28>>2]|0; //@line 1206 "../hsp3/hsp3code.cpp"
 $30 = (($29) + 1)|0; //@line 1206 "../hsp3/hsp3code.cpp"
 HEAP32[$28>>2] = $30; //@line 1206 "../hsp3/hsp3code.cpp"
 $31 = $r; //@line 1206 "../hsp3/hsp3code.cpp"
 HEAP32[$31>>2] = $29; //@line 1206 "../hsp3/hsp3code.cpp"
 $32 = $st; //@line 1207 "../hsp3/hsp3code.cpp"
 $33 = $r; //@line 1207 "../hsp3/hsp3code.cpp"
 $34 = (($33) + 8|0); //@line 1207 "../hsp3/hsp3code.cpp"
 HEAP32[$34>>2] = $32; //@line 1207 "../hsp3/hsp3code.cpp"
 $35 = HEAP32[600>>2]|0; //@line 1209 "../hsp3/hsp3code.cpp"
 $36 = (($35) + 8|0); //@line 1209 "../hsp3/hsp3code.cpp"
 $37 = HEAP32[$36>>2]|0; //@line 1209 "../hsp3/hsp3code.cpp"
 $38 = $st; //@line 1209 "../hsp3/hsp3code.cpp"
 $39 = (($38) + 20|0); //@line 1209 "../hsp3/hsp3code.cpp"
 $40 = HEAP32[$39>>2]|0; //@line 1209 "../hsp3/hsp3code.cpp"
 $41 = HEAP32[600>>2]|0; //@line 1209 "../hsp3/hsp3code.cpp"
 $42 = (($41) + 20|0); //@line 1209 "../hsp3/hsp3code.cpp"
 $43 = HEAP32[$42>>2]|0; //@line 1209 "../hsp3/hsp3code.cpp"
 $44 = (($43) + ($40<<2)|0); //@line 1209 "../hsp3/hsp3code.cpp"
 $45 = HEAP32[$44>>2]|0; //@line 1209 "../hsp3/hsp3code.cpp"
 $46 = (($37) + ($45<<1)|0); //@line 1209 "../hsp3/hsp3code.cpp"
 HEAP32[688>>2] = $46; //@line 1209 "../hsp3/hsp3code.cpp"
 __Z9code_nextv(); //@line 1210 "../hsp3/hsp3code.cpp"
 while(1) {
  $47 = HEAP32[960>>2]|0; //@line 1217 "../hsp3/hsp3code.cpp"
  $48 = ($47|0)!=(0); //@line 1217 "../hsp3/hsp3code.cpp"
  if ($48) {
   __Z13code_dbgtracev(); //@line 1217 "../hsp3/hsp3code.cpp"
  }
  $49 = HEAP32[640>>2]|0; //@line 1219 "../hsp3/hsp3code.cpp"
  $50 = HEAP32[672>>2]|0; //@line 1219 "../hsp3/hsp3code.cpp"
  $51 = (($50) + ($49<<5)|0); //@line 1219 "../hsp3/hsp3code.cpp"
  $52 = (($51) + 12|0); //@line 1219 "../hsp3/hsp3code.cpp"
  $53 = HEAP32[$52>>2]|0; //@line 1219 "../hsp3/hsp3code.cpp"
  $54 = HEAP32[648>>2]|0; //@line 1219 "../hsp3/hsp3code.cpp"
  $55 = (FUNCTION_TABLE_ii[$53 & 255]($54)|0); //@line 1219 "../hsp3/hsp3code.cpp"
  $56 = ($55|0)!=(0); //@line 1219 "../hsp3/hsp3code.cpp"
  if ($56) {
   $57 = HEAP32[600>>2]|0; //@line 1220 "../hsp3/hsp3code.cpp"
   $58 = (($57) + 236|0); //@line 1220 "../hsp3/hsp3code.cpp"
   $59 = HEAP32[$58>>2]|0; //@line 1220 "../hsp3/hsp3code.cpp"
   $60 = ($59|0)==(4); //@line 1220 "../hsp3/hsp3code.cpp"
   if ($60) {
    label = 6;
    break;
   }
   $62 = HEAP32[600>>2]|0; //@line 1223 "../hsp3/hsp3code.cpp"
   $63 = (($62) + 236|0); //@line 1223 "../hsp3/hsp3code.cpp"
   $64 = HEAP32[$63>>2]|0; //@line 1223 "../hsp3/hsp3code.cpp"
   $65 = ($64|0)==(6); //@line 1223 "../hsp3/hsp3code.cpp"
   if ($65) {
    break;
   }
   $66 = HEAP32[600>>2]|0; //@line 1227 "../hsp3/hsp3code.cpp"
   $67 = (($66) + 852|0); //@line 1227 "../hsp3/hsp3code.cpp"
   $68 = HEAP32[$67>>2]|0; //@line 1227 "../hsp3/hsp3code.cpp"
   $69 = HEAP32[600>>2]|0; //@line 1227 "../hsp3/hsp3code.cpp"
   FUNCTION_TABLE_vi[$68 & 255]($69); //@line 1227 "../hsp3/hsp3code.cpp"
  }
 }
 if ((label|0) == 6) {
  $61 = (___cxa_allocate_exception(4)|0); //@line 1221 "../hsp3/hsp3code.cpp"
  HEAP32[$61>>2] = 0; //@line 1221 "../hsp3/hsp3code.cpp"
  ___cxa_throw(($61|0),(624|0),(0|0)); //@line 1221 "../hsp3/hsp3code.cpp"
  // unreachable; //@line 1221 "../hsp3/hsp3code.cpp"
 }
 __ZL14cmdfunc_returnv(); //@line 1224 "../hsp3/hsp3code.cpp"
 STACKTOP = sp;return 0; //@line 1232 "../hsp3/hsp3code.cpp"
}
function __Z18code_delstruct_allP4PVal($pval) {
 $pval = $pval|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $pval;
 $1 = $0; //@line 1422 "../hsp3/hsp3code.cpp"
 $2 = (($1) + 2|0); //@line 1422 "../hsp3/hsp3code.cpp"
 $3 = HEAP16[$2>>1]|0; //@line 1422 "../hsp3/hsp3code.cpp"
 $4 = $3 << 16 >> 16; //@line 1422 "../hsp3/hsp3code.cpp"
 $5 = ($4|0)==(1); //@line 1422 "../hsp3/hsp3code.cpp"
 if (!($5)) {
  STACKTOP = sp;return; //@line 1427 "../hsp3/hsp3code.cpp"
 }
 $i = 0; //@line 1423 "../hsp3/hsp3code.cpp"
 while(1) {
  $6 = $i; //@line 1423 "../hsp3/hsp3code.cpp"
  $7 = $0; //@line 1423 "../hsp3/hsp3code.cpp"
  $8 = (($7) + 4|0); //@line 1423 "../hsp3/hsp3code.cpp"
  $9 = (($8) + 4|0); //@line 1423 "../hsp3/hsp3code.cpp"
  $10 = HEAP32[$9>>2]|0; //@line 1423 "../hsp3/hsp3code.cpp"
  $11 = ($6|0)<($10|0); //@line 1423 "../hsp3/hsp3code.cpp"
  if (!($11)) {
   break;
  }
  $12 = $0; //@line 1424 "../hsp3/hsp3code.cpp"
  $13 = $i; //@line 1424 "../hsp3/hsp3code.cpp"
  __Z14code_delstructP4PVali($12,$13); //@line 1424 "../hsp3/hsp3code.cpp"
  $14 = $i; //@line 1423 "../hsp3/hsp3code.cpp"
  $15 = (($14) + 1)|0; //@line 1423 "../hsp3/hsp3code.cpp"
  $i = $15; //@line 1423 "../hsp3/hsp3code.cpp"
 }
 STACKTOP = sp;return; //@line 1427 "../hsp3/hsp3code.cpp"
}
function __Z9code_stmpi($size) {
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $size;
 $1 = $0; //@line 1434 "../hsp3/hsp3code.cpp"
 $2 = ($1|0)>(1024); //@line 1434 "../hsp3/hsp3code.cpp"
 if ($2) {
  $3 = HEAP32[600>>2]|0; //@line 1434 "../hsp3/hsp3code.cpp"
  $4 = (($3) + 824|0); //@line 1434 "../hsp3/hsp3code.cpp"
  $5 = HEAP32[$4>>2]|0; //@line 1434 "../hsp3/hsp3code.cpp"
  $6 = $0; //@line 1434 "../hsp3/hsp3code.cpp"
  $7 = (__Z8sbExpandPci($5,$6)|0); //@line 1434 "../hsp3/hsp3code.cpp"
  $8 = HEAP32[600>>2]|0; //@line 1434 "../hsp3/hsp3code.cpp"
  $9 = (($8) + 824|0); //@line 1434 "../hsp3/hsp3code.cpp"
  HEAP32[$9>>2] = $7; //@line 1434 "../hsp3/hsp3code.cpp"
 }
 $10 = HEAP32[600>>2]|0; //@line 1435 "../hsp3/hsp3code.cpp"
 $11 = (($10) + 824|0); //@line 1435 "../hsp3/hsp3code.cpp"
 $12 = HEAP32[$11>>2]|0; //@line 1435 "../hsp3/hsp3code.cpp"
 STACKTOP = sp;return ($12|0); //@line 1435 "../hsp3/hsp3code.cpp"
}
function __Z12code_stmpstrPc($src) {
 $src = $src|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $src;
 $1 = $0; //@line 1444 "../hsp3/hsp3code.cpp"
 $2 = (_strlen(($1|0))|0); //@line 1444 "../hsp3/hsp3code.cpp"
 $3 = (($2) + 1)|0; //@line 1444 "../hsp3/hsp3code.cpp"
 $4 = (__Z9code_stmpi($3)|0); //@line 1444 "../hsp3/hsp3code.cpp"
 $p = $4; //@line 1444 "../hsp3/hsp3code.cpp"
 $5 = $p; //@line 1445 "../hsp3/hsp3code.cpp"
 $6 = $0; //@line 1445 "../hsp3/hsp3code.cpp"
 (_strcpy(($5|0),($6|0))|0); //@line 1445 "../hsp3/hsp3code.cpp"
 $7 = $p; //@line 1446 "../hsp3/hsp3code.cpp"
 STACKTOP = sp;return ($7|0); //@line 1446 "../hsp3/hsp3code.cpp"
}
function __Z16code_gettypeinfoi($type) {
 $type = $type|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $id = 0, $info = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $type;
 $1 = $0; //@line 2250 "../hsp3/hsp3code.cpp"
 $id = $1; //@line 2250 "../hsp3/hsp3code.cpp"
 $2 = $id; //@line 2251 "../hsp3/hsp3code.cpp"
 $3 = ($2|0)<(0); //@line 2251 "../hsp3/hsp3code.cpp"
 if ($3) {
  $4 = HEAP32[712>>2]|0; //@line 2252 "../hsp3/hsp3code.cpp"
  $5 = (($4) + 1)|0; //@line 2252 "../hsp3/hsp3code.cpp"
  HEAP32[712>>2] = $5; //@line 2252 "../hsp3/hsp3code.cpp"
  $id = $4; //@line 2252 "../hsp3/hsp3code.cpp"
  $6 = HEAP32[672>>2]|0; //@line 2253 "../hsp3/hsp3code.cpp"
  $7 = HEAP32[712>>2]|0; //@line 2253 "../hsp3/hsp3code.cpp"
  $8 = $7<<5; //@line 2253 "../hsp3/hsp3code.cpp"
  $9 = (__Z8sbExpandPci($6,$8)|0); //@line 2253 "../hsp3/hsp3code.cpp"
  HEAP32[672>>2] = $9; //@line 2253 "../hsp3/hsp3code.cpp"
  $10 = $id; //@line 2254 "../hsp3/hsp3code.cpp"
  __ZL20hsp3typeinit_defaulti($10); //@line 2254 "../hsp3/hsp3code.cpp"
 }
 $11 = $id; //@line 2256 "../hsp3/hsp3code.cpp"
 $12 = HEAP32[672>>2]|0; //@line 2256 "../hsp3/hsp3code.cpp"
 $13 = (($12) + ($11<<5)|0); //@line 2256 "../hsp3/hsp3code.cpp"
 $info = $13; //@line 2256 "../hsp3/hsp3code.cpp"
 $14 = $info; //@line 2257 "../hsp3/hsp3code.cpp"
 STACKTOP = sp;return ($14|0); //@line 2257 "../hsp3/hsp3code.cpp"
}
function __ZL20hsp3typeinit_defaulti($type) {
 $type = $type|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $info = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $type;
 $1 = $0; //@line 2231 "../hsp3/hsp3code.cpp"
 $2 = HEAP32[672>>2]|0; //@line 2231 "../hsp3/hsp3code.cpp"
 $3 = (($2) + ($1<<5)|0); //@line 2231 "../hsp3/hsp3code.cpp"
 $info = $3; //@line 2231 "../hsp3/hsp3code.cpp"
 $4 = $0; //@line 2232 "../hsp3/hsp3code.cpp"
 $5 = $4&65535; //@line 2232 "../hsp3/hsp3code.cpp"
 $6 = $info; //@line 2232 "../hsp3/hsp3code.cpp"
 HEAP16[$6>>1] = $5; //@line 2232 "../hsp3/hsp3code.cpp"
 $7 = $info; //@line 2233 "../hsp3/hsp3code.cpp"
 $8 = (($7) + 2|0); //@line 2233 "../hsp3/hsp3code.cpp"
 HEAP16[$8>>1] = 0; //@line 2233 "../hsp3/hsp3code.cpp"
 $9 = HEAP32[600>>2]|0; //@line 2234 "../hsp3/hsp3code.cpp"
 $10 = $info; //@line 2234 "../hsp3/hsp3code.cpp"
 $11 = (($10) + 4|0); //@line 2234 "../hsp3/hsp3code.cpp"
 HEAP32[$11>>2] = $9; //@line 2234 "../hsp3/hsp3code.cpp"
 $12 = HEAP32[600>>2]|0; //@line 2235 "../hsp3/hsp3code.cpp"
 $13 = (($12) + 876|0); //@line 2235 "../hsp3/hsp3code.cpp"
 $14 = HEAP32[$13>>2]|0; //@line 2235 "../hsp3/hsp3code.cpp"
 $15 = $info; //@line 2235 "../hsp3/hsp3code.cpp"
 $16 = (($15) + 8|0); //@line 2235 "../hsp3/hsp3code.cpp"
 HEAP32[$16>>2] = $14; //@line 2235 "../hsp3/hsp3code.cpp"
 $17 = $info; //@line 2236 "../hsp3/hsp3code.cpp"
 $18 = (($17) + 12|0); //@line 2236 "../hsp3/hsp3code.cpp"
 HEAP32[$18>>2] = 19; //@line 2236 "../hsp3/hsp3code.cpp"
 $19 = $info; //@line 2237 "../hsp3/hsp3code.cpp"
 $20 = (($19) + 16|0); //@line 2237 "../hsp3/hsp3code.cpp"
 HEAP32[$20>>2] = 0; //@line 2237 "../hsp3/hsp3code.cpp"
 $21 = $info; //@line 2238 "../hsp3/hsp3code.cpp"
 $22 = (($21) + 20|0); //@line 2238 "../hsp3/hsp3code.cpp"
 HEAP32[$22>>2] = 0; //@line 2238 "../hsp3/hsp3code.cpp"
 $23 = $info; //@line 2239 "../hsp3/hsp3code.cpp"
 $24 = (($23) + 28|0); //@line 2239 "../hsp3/hsp3code.cpp"
 HEAP32[$24>>2] = 0; //@line 2239 "../hsp3/hsp3code.cpp"
 STACKTOP = sp;return; //@line 2240 "../hsp3/hsp3code.cpp"
}
function __Z11code_setctxP6HSPCTX($ctx) {
 $ctx = $ctx|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $ctx;
 $1 = $0; //@line 2265 "../hsp3/hsp3code.cpp"
 HEAP32[600>>2] = $1; //@line 2265 "../hsp3/hsp3code.cpp"
 STACKTOP = sp;return; //@line 2266 "../hsp3/hsp3code.cpp"
}
function __Z16code_def_msgfuncP6HSPCTX($ctx) {
 $ctx = $ctx|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $ctx;
 $1 = $0; //@line 2273 "../hsp3/hsp3code.cpp"
 $2 = (($1) + 236|0); //@line 2273 "../hsp3/hsp3code.cpp"
 HEAP32[$2>>2] = 4; //@line 2273 "../hsp3/hsp3code.cpp"
 STACKTOP = sp;return; //@line 2274 "../hsp3/hsp3code.cpp"
}
function __Z13code_resetctxP6HSPCTX($ctx) {
 $ctx = $ctx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $ctx;
 $1 = HEAP32[3448>>2]|0; //@line 2281 "../hsp3/hsp3code.cpp"
 $2 = (($1) + 192|0); //@line 2281 "../hsp3/hsp3code.cpp"
 HEAP32[664>>2] = $2; //@line 2281 "../hsp3/hsp3code.cpp"
 $3 = HEAP32[664>>2]|0; //@line 2282 "../hsp3/hsp3code.cpp"
 __Z19HspVarCoreClearTempP4PVali($3,4); //@line 2282 "../hsp3/hsp3code.cpp"
 $4 = $0; //@line 2284 "../hsp3/hsp3code.cpp"
 $5 = (($4) + 776|0); //@line 2284 "../hsp3/hsp3code.cpp"
 HEAP32[$5>>2] = 0; //@line 2284 "../hsp3/hsp3code.cpp"
 $6 = $0; //@line 2286 "../hsp3/hsp3code.cpp"
 $7 = (($6) + 780|0); //@line 2286 "../hsp3/hsp3code.cpp"
 HEAP32[$7>>2] = 1; //@line 2286 "../hsp3/hsp3code.cpp"
 $8 = $0; //@line 2290 "../hsp3/hsp3code.cpp"
 $9 = (($8) + 244|0); //@line 2290 "../hsp3/hsp3code.cpp"
 HEAP32[$9>>2] = 5; //@line 2290 "../hsp3/hsp3code.cpp"
 $10 = $0; //@line 2291 "../hsp3/hsp3code.cpp"
 $11 = (($10) + 252|0); //@line 2291 "../hsp3/hsp3code.cpp"
 HEAP32[$11>>2] = 0; //@line 2291 "../hsp3/hsp3code.cpp"
 $12 = $0; //@line 2292 "../hsp3/hsp3code.cpp"
 $13 = (($12) + 772|0); //@line 2292 "../hsp3/hsp3code.cpp"
 HEAP32[$13>>2] = 0; //@line 2292 "../hsp3/hsp3code.cpp"
 $14 = $0; //@line 2293 "../hsp3/hsp3code.cpp"
 $15 = (($14) + 256|0); //@line 2293 "../hsp3/hsp3code.cpp"
 HEAP32[$15>>2] = 0; //@line 2293 "../hsp3/hsp3code.cpp"
 $16 = $0; //@line 2294 "../hsp3/hsp3code.cpp"
 $17 = (($16) + 784|0); //@line 2294 "../hsp3/hsp3code.cpp"
 HEAP32[$17>>2] = 0; //@line 2294 "../hsp3/hsp3code.cpp"
 $18 = $0; //@line 2295 "../hsp3/hsp3code.cpp"
 $19 = (($18) + 788|0); //@line 2295 "../hsp3/hsp3code.cpp"
 HEAP32[$19>>2] = 0; //@line 2295 "../hsp3/hsp3code.cpp"
 $20 = $0; //@line 2296 "../hsp3/hsp3code.cpp"
 $21 = (($20) + 236|0); //@line 2296 "../hsp3/hsp3code.cpp"
 HEAP32[$21>>2] = 0; //@line 2296 "../hsp3/hsp3code.cpp"
 $22 = $0; //@line 2297 "../hsp3/hsp3code.cpp"
 $23 = (($22) + 828|0); //@line 2297 "../hsp3/hsp3code.cpp"
 HEAP32[$23>>2] = 0; //@line 2297 "../hsp3/hsp3code.cpp"
 $24 = $0; //@line 2298 "../hsp3/hsp3code.cpp"
 $25 = (($24) + 808|0); //@line 2298 "../hsp3/hsp3code.cpp"
 HEAP32[$25>>2] = 0; //@line 2298 "../hsp3/hsp3code.cpp"
 $26 = $0; //@line 2299 "../hsp3/hsp3code.cpp"
 $27 = (($26) + 816|0); //@line 2299 "../hsp3/hsp3code.cpp"
 HEAP32[$27>>2] = 0; //@line 2299 "../hsp3/hsp3code.cpp"
 $28 = $0; //@line 2300 "../hsp3/hsp3code.cpp"
 $29 = (($28) + 852|0); //@line 2300 "../hsp3/hsp3code.cpp"
 HEAP32[$29>>2] = 20; //@line 2300 "../hsp3/hsp3code.cpp"
 STACKTOP = sp;return; //@line 2301 "../hsp3/hsp3code.cpp"
}
function __Z13code_geterrorv() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[600>>2]|0; //@line 2320 "../hsp3/hsp3code.cpp"
 $1 = (($0) + 776|0); //@line 2320 "../hsp3/hsp3code.cpp"
 $2 = HEAP32[$1>>2]|0; //@line 2320 "../hsp3/hsp3code.cpp"
 STACKTOP = sp;return ($2|0); //@line 2320 "../hsp3/hsp3code.cpp"
}
function __Z10code_setpcPKt($pc) {
 $pc = $pc|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $pc;
 $1 = HEAP32[600>>2]|0; //@line 2327 "../hsp3/hsp3code.cpp"
 $2 = (($1) + 236|0); //@line 2327 "../hsp3/hsp3code.cpp"
 $3 = HEAP32[$2>>2]|0; //@line 2327 "../hsp3/hsp3code.cpp"
 $4 = ($3|0)==(4); //@line 2327 "../hsp3/hsp3code.cpp"
 if ($4) {
  STACKTOP = sp;return; //@line 2330 "../hsp3/hsp3code.cpp"
 } else {
  $5 = $0; //@line 2328 "../hsp3/hsp3code.cpp"
  HEAP32[688>>2] = $5; //@line 2328 "../hsp3/hsp3code.cpp"
  __Z9code_nextv(); //@line 2329 "../hsp3/hsp3code.cpp"
  $6 = HEAP32[600>>2]|0; //@line 2330 "../hsp3/hsp3code.cpp"
  $7 = (($6) + 236|0); //@line 2330 "../hsp3/hsp3code.cpp"
  HEAP32[$7>>2] = 0; //@line 2330 "../hsp3/hsp3code.cpp"
  STACKTOP = sp;return; //@line 2330 "../hsp3/hsp3code.cpp"
 }
}
function __Z11code_setpciPKt($pc) {
 $pc = $pc|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $pc;
 $1 = $0; //@line 2337 "../hsp3/hsp3code.cpp"
 __Z10code_setpcPKt($1); //@line 2337 "../hsp3/hsp3code.cpp"
 $2 = HEAP32[600>>2]|0; //@line 2338 "../hsp3/hsp3code.cpp"
 $3 = (($2) + 236|0); //@line 2338 "../hsp3/hsp3code.cpp"
 HEAP32[$3>>2] = 7; //@line 2338 "../hsp3/hsp3code.cpp"
 STACKTOP = sp;return; //@line 2339 "../hsp3/hsp3code.cpp"
}
function __Z9code_callPKt($pc) {
 $pc = $pc|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $pc;
 $1 = HEAP32[680>>2]|0; //@line 2345 "../hsp3/hsp3code.cpp"
 HEAP32[688>>2] = $1; //@line 2345 "../hsp3/hsp3code.cpp"
 $2 = $0; //@line 2347 "../hsp3/hsp3code.cpp"
 $3 = HEAP32[688>>2]|0; //@line 2347 "../hsp3/hsp3code.cpp"
 __ZL13cmdfunc_gosubPtS_($2,$3); //@line 2347 "../hsp3/hsp3code.cpp"
 $4 = HEAP32[600>>2]|0; //@line 2351 "../hsp3/hsp3code.cpp"
 $5 = (($4) + 236|0); //@line 2351 "../hsp3/hsp3code.cpp"
 $6 = HEAP32[$5>>2]|0; //@line 2351 "../hsp3/hsp3code.cpp"
 $7 = ($6|0)==(4); //@line 2351 "../hsp3/hsp3code.cpp"
 if ($7) {
  STACKTOP = sp;return; //@line 2352 "../hsp3/hsp3code.cpp"
 } else {
  $8 = HEAP32[600>>2]|0; //@line 2352 "../hsp3/hsp3code.cpp"
  $9 = (($8) + 236|0); //@line 2352 "../hsp3/hsp3code.cpp"
  HEAP32[$9>>2] = 0; //@line 2352 "../hsp3/hsp3code.cpp"
  STACKTOP = sp;return; //@line 2352 "../hsp3/hsp3code.cpp"
 }
}
function __ZL13cmdfunc_gosubPtS_($subr,$retpc) {
 $subr = $subr|0;
 $retpc = $retpc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $r = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $r = sp + 4|0;
 $0 = $subr;
 $1 = $retpc;
 $2 = $1; //@line 1139 "../hsp3/hsp3code.cpp"
 $3 = (($r) + 4|0); //@line 1139 "../hsp3/hsp3code.cpp"
 HEAP32[$3>>2] = $2; //@line 1139 "../hsp3/hsp3code.cpp"
 $4 = HEAP32[600>>2]|0; //@line 1140 "../hsp3/hsp3code.cpp"
 $5 = (($4) + 256|0); //@line 1140 "../hsp3/hsp3code.cpp"
 $6 = HEAP32[$5>>2]|0; //@line 1140 "../hsp3/hsp3code.cpp"
 $7 = (($6) + 1)|0; //@line 1140 "../hsp3/hsp3code.cpp"
 HEAP32[$5>>2] = $7; //@line 1140 "../hsp3/hsp3code.cpp"
 HEAP32[$r>>2] = $6; //@line 1140 "../hsp3/hsp3code.cpp"
 $8 = HEAP32[600>>2]|0; //@line 1141 "../hsp3/hsp3code.cpp"
 $9 = (($8) + 828|0); //@line 1141 "../hsp3/hsp3code.cpp"
 $10 = HEAP32[$9>>2]|0; //@line 1141 "../hsp3/hsp3code.cpp"
 $11 = (($r) + 12|0); //@line 1141 "../hsp3/hsp3code.cpp"
 HEAP32[$11>>2] = $10; //@line 1141 "../hsp3/hsp3code.cpp"
 $12 = (($r) + 8|0); //@line 1142 "../hsp3/hsp3code.cpp"
 HEAP32[$12>>2] = 0; //@line 1142 "../hsp3/hsp3code.cpp"
 __Z9StackPushiPci(256,$r,20); //@line 1143 "../hsp3/hsp3code.cpp"
 $13 = $0; //@line 1145 "../hsp3/hsp3code.cpp"
 __Z10code_setpcPKt($13); //@line 1145 "../hsp3/hsp3code.cpp"
 STACKTOP = sp;return; //@line 1146 "../hsp3/hsp3code.cpp"
}
function __Z18code_getdebug_linev() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $a = 0;
 var $cl = 0, $curpt = 0, $debpt = 0, $mem_di = 0, $ofs = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = HEAP32[600>>2]|0; //@line 2370 "../hsp3/hsp3code.cpp"
 $2 = (($1) + 16|0); //@line 2370 "../hsp3/hsp3code.cpp"
 $3 = HEAP32[$2>>2]|0; //@line 2370 "../hsp3/hsp3code.cpp"
 $mem_di = $3; //@line 2370 "../hsp3/hsp3code.cpp"
 $4 = HEAP32[680>>2]|0; //@line 2371 "../hsp3/hsp3code.cpp"
 $5 = HEAP32[600>>2]|0; //@line 2371 "../hsp3/hsp3code.cpp"
 $6 = (($5) + 8|0); //@line 2371 "../hsp3/hsp3code.cpp"
 $7 = HEAP32[$6>>2]|0; //@line 2371 "../hsp3/hsp3code.cpp"
 $8 = $4; //@line 2371 "../hsp3/hsp3code.cpp"
 $9 = $7; //@line 2371 "../hsp3/hsp3code.cpp"
 $10 = (($8) - ($9))|0; //@line 2371 "../hsp3/hsp3code.cpp"
 $11 = (($10|0) / 2)&-1; //@line 2371 "../hsp3/hsp3code.cpp"
 $curpt = $11; //@line 2371 "../hsp3/hsp3code.cpp"
 $debpt = 0; //@line 2372 "../hsp3/hsp3code.cpp"
 $12 = $mem_di; //@line 2373 "../hsp3/hsp3code.cpp"
 $13 = HEAP8[$12>>0]|0; //@line 2373 "../hsp3/hsp3code.cpp"
 $14 = $13&255; //@line 2373 "../hsp3/hsp3code.cpp"
 $15 = ($14|0)==(255); //@line 2373 "../hsp3/hsp3code.cpp"
 if ($15) {
  $0 = -1; //@line 2373 "../hsp3/hsp3code.cpp"
  $98 = $0; //@line 2407 "../hsp3/hsp3code.cpp"
  STACKTOP = sp;return ($98|0); //@line 2407 "../hsp3/hsp3code.cpp"
 }
 $cl = 0; //@line 2375 "../hsp3/hsp3code.cpp"
 $a = 0; //@line 2375 "../hsp3/hsp3code.cpp"
 while(1) {
  $16 = $a; //@line 2377 "../hsp3/hsp3code.cpp"
  $17 = (($16) + 1)|0; //@line 2377 "../hsp3/hsp3code.cpp"
  $a = $17; //@line 2377 "../hsp3/hsp3code.cpp"
  $18 = $mem_di; //@line 2377 "../hsp3/hsp3code.cpp"
  $19 = (($18) + ($16)|0); //@line 2377 "../hsp3/hsp3code.cpp"
  $20 = HEAP8[$19>>0]|0; //@line 2377 "../hsp3/hsp3code.cpp"
  $ofs = $20; //@line 2377 "../hsp3/hsp3code.cpp"
  $21 = $ofs; //@line 2378 "../hsp3/hsp3code.cpp"
  $22 = $21&255; //@line 2378 "../hsp3/hsp3code.cpp"
  if ((($22|0) == 254)) {
   $48 = $a; //@line 2389 "../hsp3/hsp3code.cpp"
   $49 = (($48) + 2)|0; //@line 2389 "../hsp3/hsp3code.cpp"
   $50 = $mem_di; //@line 2389 "../hsp3/hsp3code.cpp"
   $51 = (($50) + ($49)|0); //@line 2389 "../hsp3/hsp3code.cpp"
   $52 = HEAP8[$51>>0]|0; //@line 2389 "../hsp3/hsp3code.cpp"
   $53 = $52&255; //@line 2389 "../hsp3/hsp3code.cpp"
   $54 = $53 << 16; //@line 2389 "../hsp3/hsp3code.cpp"
   $55 = $a; //@line 2389 "../hsp3/hsp3code.cpp"
   $56 = (($55) + 1)|0; //@line 2389 "../hsp3/hsp3code.cpp"
   $57 = $mem_di; //@line 2389 "../hsp3/hsp3code.cpp"
   $58 = (($57) + ($56)|0); //@line 2389 "../hsp3/hsp3code.cpp"
   $59 = HEAP8[$58>>0]|0; //@line 2389 "../hsp3/hsp3code.cpp"
   $60 = $59&255; //@line 2389 "../hsp3/hsp3code.cpp"
   $61 = $60 << 8; //@line 2389 "../hsp3/hsp3code.cpp"
   $62 = (($54) + ($61))|0; //@line 2389 "../hsp3/hsp3code.cpp"
   $63 = $a; //@line 2389 "../hsp3/hsp3code.cpp"
   $64 = $mem_di; //@line 2389 "../hsp3/hsp3code.cpp"
   $65 = (($64) + ($63)|0); //@line 2389 "../hsp3/hsp3code.cpp"
   $66 = HEAP8[$65>>0]|0; //@line 2389 "../hsp3/hsp3code.cpp"
   $67 = $66&255; //@line 2389 "../hsp3/hsp3code.cpp"
   $68 = (($62) + ($67))|0; //@line 2389 "../hsp3/hsp3code.cpp"
   $tmp = $68; //@line 2389 "../hsp3/hsp3code.cpp"
   $69 = $tmp; //@line 2390 "../hsp3/hsp3code.cpp"
   $70 = ($69|0)!=(0); //@line 2390 "../hsp3/hsp3code.cpp"
   if ($70) {
    $71 = $tmp; //@line 2390 "../hsp3/hsp3code.cpp"
    HEAP32[728>>2] = $71; //@line 2390 "../hsp3/hsp3code.cpp"
   }
   $72 = $a; //@line 2391 "../hsp3/hsp3code.cpp"
   $73 = (($72) + 4)|0; //@line 2391 "../hsp3/hsp3code.cpp"
   $74 = $mem_di; //@line 2391 "../hsp3/hsp3code.cpp"
   $75 = (($74) + ($73)|0); //@line 2391 "../hsp3/hsp3code.cpp"
   $76 = HEAP8[$75>>0]|0; //@line 2391 "../hsp3/hsp3code.cpp"
   $77 = $76&255; //@line 2391 "../hsp3/hsp3code.cpp"
   $78 = $77 << 8; //@line 2391 "../hsp3/hsp3code.cpp"
   $79 = $a; //@line 2391 "../hsp3/hsp3code.cpp"
   $80 = (($79) + 3)|0; //@line 2391 "../hsp3/hsp3code.cpp"
   $81 = $mem_di; //@line 2391 "../hsp3/hsp3code.cpp"
   $82 = (($81) + ($80)|0); //@line 2391 "../hsp3/hsp3code.cpp"
   $83 = HEAP8[$82>>0]|0; //@line 2391 "../hsp3/hsp3code.cpp"
   $84 = $83&255; //@line 2391 "../hsp3/hsp3code.cpp"
   $85 = (($78) + ($84))|0; //@line 2391 "../hsp3/hsp3code.cpp"
   $cl = $85; //@line 2391 "../hsp3/hsp3code.cpp"
   $86 = $a; //@line 2392 "../hsp3/hsp3code.cpp"
   $87 = (($86) + 5)|0; //@line 2392 "../hsp3/hsp3code.cpp"
   $a = $87; //@line 2392 "../hsp3/hsp3code.cpp"
  } else if ((($22|0) == 253)) {
   $46 = $a; //@line 2386 "../hsp3/hsp3code.cpp"
   $47 = (($46) + 5)|0; //@line 2386 "../hsp3/hsp3code.cpp"
   $a = $47; //@line 2386 "../hsp3/hsp3code.cpp"
  } else if ((($22|0) == 252)) {
   $23 = $a; //@line 2380 "../hsp3/hsp3code.cpp"
   $24 = (($23) + 1)|0; //@line 2380 "../hsp3/hsp3code.cpp"
   $25 = $mem_di; //@line 2380 "../hsp3/hsp3code.cpp"
   $26 = (($25) + ($24)|0); //@line 2380 "../hsp3/hsp3code.cpp"
   $27 = HEAP8[$26>>0]|0; //@line 2380 "../hsp3/hsp3code.cpp"
   $28 = $27&255; //@line 2380 "../hsp3/hsp3code.cpp"
   $29 = $28 << 8; //@line 2380 "../hsp3/hsp3code.cpp"
   $30 = $a; //@line 2380 "../hsp3/hsp3code.cpp"
   $31 = $mem_di; //@line 2380 "../hsp3/hsp3code.cpp"
   $32 = (($31) + ($30)|0); //@line 2380 "../hsp3/hsp3code.cpp"
   $33 = HEAP8[$32>>0]|0; //@line 2380 "../hsp3/hsp3code.cpp"
   $34 = $33&255; //@line 2380 "../hsp3/hsp3code.cpp"
   $35 = (($29) + ($34))|0; //@line 2380 "../hsp3/hsp3code.cpp"
   $36 = $debpt; //@line 2380 "../hsp3/hsp3code.cpp"
   $37 = (($36) + ($35))|0; //@line 2380 "../hsp3/hsp3code.cpp"
   $debpt = $37; //@line 2380 "../hsp3/hsp3code.cpp"
   $38 = $curpt; //@line 2381 "../hsp3/hsp3code.cpp"
   $39 = $debpt; //@line 2381 "../hsp3/hsp3code.cpp"
   $40 = ($38|0)<=($39|0); //@line 2381 "../hsp3/hsp3code.cpp"
   if ($40) {
    label = 6;
    break;
   }
   $42 = $cl; //@line 2382 "../hsp3/hsp3code.cpp"
   $43 = (($42) + 1)|0; //@line 2382 "../hsp3/hsp3code.cpp"
   $cl = $43; //@line 2382 "../hsp3/hsp3code.cpp"
   $44 = $a; //@line 2383 "../hsp3/hsp3code.cpp"
   $45 = (($44) + 2)|0; //@line 2383 "../hsp3/hsp3code.cpp"
   $a = $45; //@line 2383 "../hsp3/hsp3code.cpp"
  } else if ((($22|0) == 255)) {
   label = 12;
   break;
  } else {
   $88 = $ofs; //@line 2397 "../hsp3/hsp3code.cpp"
   $89 = $88&255; //@line 2397 "../hsp3/hsp3code.cpp"
   $90 = $debpt; //@line 2397 "../hsp3/hsp3code.cpp"
   $91 = (($90) + ($89))|0; //@line 2397 "../hsp3/hsp3code.cpp"
   $debpt = $91; //@line 2397 "../hsp3/hsp3code.cpp"
   $92 = $curpt; //@line 2398 "../hsp3/hsp3code.cpp"
   $93 = $debpt; //@line 2398 "../hsp3/hsp3code.cpp"
   $94 = ($92|0)<=($93|0); //@line 2398 "../hsp3/hsp3code.cpp"
   if ($94) {
    label = 14;
    break;
   }
   $96 = $cl; //@line 2399 "../hsp3/hsp3code.cpp"
   $97 = (($96) + 1)|0; //@line 2399 "../hsp3/hsp3code.cpp"
   $cl = $97; //@line 2399 "../hsp3/hsp3code.cpp"
  }
 }
 if ((label|0) == 6) {
  $41 = $cl; //@line 2381 "../hsp3/hsp3code.cpp"
  $0 = $41; //@line 2381 "../hsp3/hsp3code.cpp"
  $98 = $0; //@line 2407 "../hsp3/hsp3code.cpp"
  STACKTOP = sp;return ($98|0); //@line 2407 "../hsp3/hsp3code.cpp"
 }
 else if ((label|0) == 12) {
  $0 = -1; //@line 2395 "../hsp3/hsp3code.cpp"
  $98 = $0; //@line 2407 "../hsp3/hsp3code.cpp"
  STACKTOP = sp;return ($98|0); //@line 2407 "../hsp3/hsp3code.cpp"
 }
 else if ((label|0) == 14) {
  $95 = $cl; //@line 2398 "../hsp3/hsp3code.cpp"
  $0 = $95; //@line 2398 "../hsp3/hsp3code.cpp"
  $98 = $0; //@line 2407 "../hsp3/hsp3code.cpp"
  STACKTOP = sp;return ($98|0); //@line 2407 "../hsp3/hsp3code.cpp"
 }
 return 0|0;
}
function __Z15code_debug_initv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $a = 0, $cl = 0, $mem_di = 0, $ofs = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $cl = 0; //@line 2418 "../hsp3/hsp3code.cpp"
 $a = 0; //@line 2418 "../hsp3/hsp3code.cpp"
 HEAP32[736>>2] = 0; //@line 2419 "../hsp3/hsp3code.cpp"
 $1 = HEAP32[600>>2]|0; //@line 2420 "../hsp3/hsp3code.cpp"
 $2 = (($1) + 16|0); //@line 2420 "../hsp3/hsp3code.cpp"
 $3 = HEAP32[$2>>2]|0; //@line 2420 "../hsp3/hsp3code.cpp"
 $mem_di = $3; //@line 2420 "../hsp3/hsp3code.cpp"
 $4 = $mem_di; //@line 2421 "../hsp3/hsp3code.cpp"
 $5 = HEAP8[$4>>0]|0; //@line 2421 "../hsp3/hsp3code.cpp"
 $6 = $5&255; //@line 2421 "../hsp3/hsp3code.cpp"
 $7 = ($6|0)==(255); //@line 2421 "../hsp3/hsp3code.cpp"
 if ($7) {
  $0 = -1; //@line 2421 "../hsp3/hsp3code.cpp"
  $39 = $0; //@line 2439 "../hsp3/hsp3code.cpp"
  STACKTOP = sp;return ($39|0); //@line 2439 "../hsp3/hsp3code.cpp"
 }
 while(1) {
  $8 = $a; //@line 2423 "../hsp3/hsp3code.cpp"
  $9 = (($8) + 1)|0; //@line 2423 "../hsp3/hsp3code.cpp"
  $a = $9; //@line 2423 "../hsp3/hsp3code.cpp"
  $10 = $mem_di; //@line 2423 "../hsp3/hsp3code.cpp"
  $11 = (($10) + ($8)|0); //@line 2423 "../hsp3/hsp3code.cpp"
  $12 = HEAP8[$11>>0]|0; //@line 2423 "../hsp3/hsp3code.cpp"
  $ofs = $12; //@line 2423 "../hsp3/hsp3code.cpp"
  $13 = $ofs; //@line 2424 "../hsp3/hsp3code.cpp"
  $14 = $13&255; //@line 2424 "../hsp3/hsp3code.cpp"
  if ((($14|0) == 254)) {
   $21 = $a; //@line 2432 "../hsp3/hsp3code.cpp"
   $22 = (($21) + 4)|0; //@line 2432 "../hsp3/hsp3code.cpp"
   $23 = $mem_di; //@line 2432 "../hsp3/hsp3code.cpp"
   $24 = (($23) + ($22)|0); //@line 2432 "../hsp3/hsp3code.cpp"
   $25 = HEAP8[$24>>0]|0; //@line 2432 "../hsp3/hsp3code.cpp"
   $26 = $25&255; //@line 2432 "../hsp3/hsp3code.cpp"
   $27 = $26 << 8; //@line 2432 "../hsp3/hsp3code.cpp"
   $28 = $a; //@line 2432 "../hsp3/hsp3code.cpp"
   $29 = (($28) + 3)|0; //@line 2432 "../hsp3/hsp3code.cpp"
   $30 = $mem_di; //@line 2432 "../hsp3/hsp3code.cpp"
   $31 = (($30) + ($29)|0); //@line 2432 "../hsp3/hsp3code.cpp"
   $32 = HEAP8[$31>>0]|0; //@line 2432 "../hsp3/hsp3code.cpp"
   $33 = $32&255; //@line 2432 "../hsp3/hsp3code.cpp"
   $34 = (($27) + ($33))|0; //@line 2432 "../hsp3/hsp3code.cpp"
   $cl = $34; //@line 2432 "../hsp3/hsp3code.cpp"
   $35 = $a; //@line 2433 "../hsp3/hsp3code.cpp"
   $36 = (($35) + 5)|0; //@line 2433 "../hsp3/hsp3code.cpp"
   $a = $36; //@line 2433 "../hsp3/hsp3code.cpp"
  } else if ((($14|0) == 255)) {
   label = 8;
   break;
  } else if ((($14|0) == 252)) {
   $15 = $a; //@line 2426 "../hsp3/hsp3code.cpp"
   $16 = (($15) + 2)|0; //@line 2426 "../hsp3/hsp3code.cpp"
   $a = $16; //@line 2426 "../hsp3/hsp3code.cpp"
  } else if ((($14|0) == 253)) {
   label = 6;
   break;
  } else {
   $37 = $cl; //@line 2438 "../hsp3/hsp3code.cpp"
   $38 = (($37) + 1)|0; //@line 2438 "../hsp3/hsp3code.cpp"
   $cl = $38; //@line 2438 "../hsp3/hsp3code.cpp"
  }
 }
 if ((label|0) == 6) {
  $17 = $a; //@line 2429 "../hsp3/hsp3code.cpp"
  $18 = (($17) - 1)|0; //@line 2429 "../hsp3/hsp3code.cpp"
  $19 = $mem_di; //@line 2429 "../hsp3/hsp3code.cpp"
  $20 = (($19) + ($18)|0); //@line 2429 "../hsp3/hsp3code.cpp"
  HEAP32[736>>2] = $20; //@line 2429 "../hsp3/hsp3code.cpp"
  $0 = 0; //@line 2430 "../hsp3/hsp3code.cpp"
  $39 = $0; //@line 2439 "../hsp3/hsp3code.cpp"
  STACKTOP = sp;return ($39|0); //@line 2439 "../hsp3/hsp3code.cpp"
 }
 else if ((label|0) == 8) {
  $0 = -1; //@line 2436 "../hsp3/hsp3code.cpp"
  $39 = $0; //@line 2439 "../hsp3/hsp3code.cpp"
  STACKTOP = sp;return ($39|0); //@line 2439 "../hsp3/hsp3code.cpp"
 }
 return 0|0;
}
function __Z21code_getdebug_varnamei($val_id) {
 $val_id = $val_id|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $mm = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $val_id;
 $2 = HEAP32[736>>2]|0; //@line 2450 "../hsp3/hsp3code.cpp"
 $3 = ($2|0)==(0|0); //@line 2450 "../hsp3/hsp3code.cpp"
 if ($3) {
  $0 = 744; //@line 2450 "../hsp3/hsp3code.cpp"
  $29 = $0; //@line 2454 "../hsp3/hsp3code.cpp"
  STACKTOP = sp;return ($29|0); //@line 2454 "../hsp3/hsp3code.cpp"
 } else {
  $4 = HEAP32[736>>2]|0; //@line 2451 "../hsp3/hsp3code.cpp"
  $5 = $1; //@line 2451 "../hsp3/hsp3code.cpp"
  $6 = ($5*6)|0; //@line 2451 "../hsp3/hsp3code.cpp"
  $7 = (($4) + ($6)|0); //@line 2451 "../hsp3/hsp3code.cpp"
  $mm = $7; //@line 2451 "../hsp3/hsp3code.cpp"
  $8 = $mm; //@line 2452 "../hsp3/hsp3code.cpp"
  $9 = (($8) + 3|0); //@line 2452 "../hsp3/hsp3code.cpp"
  $10 = HEAP8[$9>>0]|0; //@line 2452 "../hsp3/hsp3code.cpp"
  $11 = $10&255; //@line 2452 "../hsp3/hsp3code.cpp"
  $12 = $11 << 16; //@line 2452 "../hsp3/hsp3code.cpp"
  $13 = $mm; //@line 2452 "../hsp3/hsp3code.cpp"
  $14 = (($13) + 2|0); //@line 2452 "../hsp3/hsp3code.cpp"
  $15 = HEAP8[$14>>0]|0; //@line 2452 "../hsp3/hsp3code.cpp"
  $16 = $15&255; //@line 2452 "../hsp3/hsp3code.cpp"
  $17 = $16 << 8; //@line 2452 "../hsp3/hsp3code.cpp"
  $18 = (($12) + ($17))|0; //@line 2452 "../hsp3/hsp3code.cpp"
  $19 = $mm; //@line 2452 "../hsp3/hsp3code.cpp"
  $20 = (($19) + 1|0); //@line 2452 "../hsp3/hsp3code.cpp"
  $21 = HEAP8[$20>>0]|0; //@line 2452 "../hsp3/hsp3code.cpp"
  $22 = $21&255; //@line 2452 "../hsp3/hsp3code.cpp"
  $23 = (($18) + ($22))|0; //@line 2452 "../hsp3/hsp3code.cpp"
  $i = $23; //@line 2452 "../hsp3/hsp3code.cpp"
  $24 = $i; //@line 2453 "../hsp3/hsp3code.cpp"
  $25 = HEAP32[600>>2]|0; //@line 2453 "../hsp3/hsp3code.cpp"
  $26 = (($25) + 12|0); //@line 2453 "../hsp3/hsp3code.cpp"
  $27 = HEAP32[$26>>2]|0; //@line 2453 "../hsp3/hsp3code.cpp"
  $28 = (($27) + ($24)|0); //@line 2453 "../hsp3/hsp3code.cpp"
  $0 = $28; //@line 2453 "../hsp3/hsp3code.cpp"
  $29 = $0; //@line 2454 "../hsp3/hsp3code.cpp"
  STACKTOP = sp;return ($29|0); //@line 2454 "../hsp3/hsp3code.cpp"
 }
 return 0|0;
}
function __Z21code_getdebug_seekvarPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $i = 0, $mm = 0, $ofs = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = $name;
 $2 = HEAP32[736>>2]|0; //@line 2461 "../hsp3/hsp3code.cpp"
 $3 = ($2|0)!=(0|0); //@line 2461 "../hsp3/hsp3code.cpp"
 do {
  if ($3) {
   $4 = HEAP32[736>>2]|0; //@line 2462 "../hsp3/hsp3code.cpp"
   $mm = $4; //@line 2462 "../hsp3/hsp3code.cpp"
   $i = 0; //@line 2463 "../hsp3/hsp3code.cpp"
   while(1) {
    $5 = $i; //@line 2463 "../hsp3/hsp3code.cpp"
    $6 = HEAP32[600>>2]|0; //@line 2463 "../hsp3/hsp3code.cpp"
    $7 = HEAP32[$6>>2]|0; //@line 2463 "../hsp3/hsp3code.cpp"
    $8 = (($7) + 8|0); //@line 2463 "../hsp3/hsp3code.cpp"
    $9 = HEAP32[$8>>2]|0; //@line 2463 "../hsp3/hsp3code.cpp"
    $10 = ($5|0)<($9|0); //@line 2463 "../hsp3/hsp3code.cpp"
    if (!($10)) {
     label = 8;
     break;
    }
    $11 = $mm; //@line 2464 "../hsp3/hsp3code.cpp"
    $12 = (($11) + 3|0); //@line 2464 "../hsp3/hsp3code.cpp"
    $13 = HEAP8[$12>>0]|0; //@line 2464 "../hsp3/hsp3code.cpp"
    $14 = $13&255; //@line 2464 "../hsp3/hsp3code.cpp"
    $15 = $14 << 16; //@line 2464 "../hsp3/hsp3code.cpp"
    $16 = $mm; //@line 2464 "../hsp3/hsp3code.cpp"
    $17 = (($16) + 2|0); //@line 2464 "../hsp3/hsp3code.cpp"
    $18 = HEAP8[$17>>0]|0; //@line 2464 "../hsp3/hsp3code.cpp"
    $19 = $18&255; //@line 2464 "../hsp3/hsp3code.cpp"
    $20 = $19 << 8; //@line 2464 "../hsp3/hsp3code.cpp"
    $21 = (($15) + ($20))|0; //@line 2464 "../hsp3/hsp3code.cpp"
    $22 = $mm; //@line 2464 "../hsp3/hsp3code.cpp"
    $23 = (($22) + 1|0); //@line 2464 "../hsp3/hsp3code.cpp"
    $24 = HEAP8[$23>>0]|0; //@line 2464 "../hsp3/hsp3code.cpp"
    $25 = $24&255; //@line 2464 "../hsp3/hsp3code.cpp"
    $26 = (($21) + ($25))|0; //@line 2464 "../hsp3/hsp3code.cpp"
    $ofs = $26; //@line 2464 "../hsp3/hsp3code.cpp"
    $27 = $ofs; //@line 2465 "../hsp3/hsp3code.cpp"
    $28 = HEAP32[600>>2]|0; //@line 2465 "../hsp3/hsp3code.cpp"
    $29 = (($28) + 12|0); //@line 2465 "../hsp3/hsp3code.cpp"
    $30 = HEAP32[$29>>2]|0; //@line 2465 "../hsp3/hsp3code.cpp"
    $31 = (($30) + ($27)|0); //@line 2465 "../hsp3/hsp3code.cpp"
    $32 = $1; //@line 2465 "../hsp3/hsp3code.cpp"
    $33 = (_strcmp($31,$32)|0); //@line 2465 "../hsp3/hsp3code.cpp"
    $34 = ($33|0)==(0); //@line 2465 "../hsp3/hsp3code.cpp"
    if ($34) {
     break;
    }
    $36 = $mm; //@line 2466 "../hsp3/hsp3code.cpp"
    $37 = (($36) + 6|0); //@line 2466 "../hsp3/hsp3code.cpp"
    $mm = $37; //@line 2466 "../hsp3/hsp3code.cpp"
    $38 = $i; //@line 2463 "../hsp3/hsp3code.cpp"
    $39 = (($38) + 1)|0; //@line 2463 "../hsp3/hsp3code.cpp"
    $i = $39; //@line 2463 "../hsp3/hsp3code.cpp"
   }
   if ((label|0) == 8) {
    break;
   }
   $35 = $i; //@line 2465 "../hsp3/hsp3code.cpp"
   $0 = $35; //@line 2465 "../hsp3/hsp3code.cpp"
   $40 = $0; //@line 2470 "../hsp3/hsp3code.cpp"
   STACKTOP = sp;return ($40|0); //@line 2470 "../hsp3/hsp3code.cpp"
  }
 } while(0);
 $0 = -1; //@line 2469 "../hsp3/hsp3code.cpp"
 $40 = $0; //@line 2470 "../hsp3/hsp3code.cpp"
 STACKTOP = sp;return ($40|0); //@line 2470 "../hsp3/hsp3code.cpp"
}
function __Z18code_getdebug_namev() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[728>>2]|0; //@line 2475 "../hsp3/hsp3code.cpp"
 $1 = HEAP32[600>>2]|0; //@line 2475 "../hsp3/hsp3code.cpp"
 $2 = (($1) + 12|0); //@line 2475 "../hsp3/hsp3code.cpp"
 $3 = HEAP32[$2>>2]|0; //@line 2475 "../hsp3/hsp3code.cpp"
 $4 = (($3) + ($0)|0); //@line 2475 "../hsp3/hsp3code.cpp"
 STACKTOP = sp;return ($4|0); //@line 2475 "../hsp3/hsp3code.cpp"
}
function __Z14code_exec_waiti($tick) {
 $tick = $tick|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $tick;
 $2 = HEAP32[600>>2]|0; //@line 2484 "../hsp3/hsp3code.cpp"
 $3 = (($2) + 240|0); //@line 2484 "../hsp3/hsp3code.cpp"
 $4 = HEAP32[$3>>2]|0; //@line 2484 "../hsp3/hsp3code.cpp"
 $5 = ($4|0)<=(0); //@line 2484 "../hsp3/hsp3code.cpp"
 if ($5) {
  $6 = HEAP32[600>>2]|0; //@line 2485 "../hsp3/hsp3code.cpp"
  $7 = (($6) + 236|0); //@line 2485 "../hsp3/hsp3code.cpp"
  HEAP32[$7>>2] = 0; //@line 2485 "../hsp3/hsp3code.cpp"
  $0 = 0; //@line 2486 "../hsp3/hsp3code.cpp"
  $16 = $0; //@line 2489 "../hsp3/hsp3code.cpp"
  STACKTOP = sp;return ($16|0); //@line 2489 "../hsp3/hsp3code.cpp"
 } else {
  $8 = $1; //@line 2488 "../hsp3/hsp3code.cpp"
  $9 = HEAP32[600>>2]|0; //@line 2488 "../hsp3/hsp3code.cpp"
  $10 = (($9) + 240|0); //@line 2488 "../hsp3/hsp3code.cpp"
  $11 = HEAP32[$10>>2]|0; //@line 2488 "../hsp3/hsp3code.cpp"
  $12 = ($11*10)|0; //@line 2488 "../hsp3/hsp3code.cpp"
  $13 = (($8) + ($12))|0; //@line 2488 "../hsp3/hsp3code.cpp"
  $14 = HEAP32[600>>2]|0; //@line 2488 "../hsp3/hsp3code.cpp"
  $15 = (($14) + 248|0); //@line 2488 "../hsp3/hsp3code.cpp"
  HEAP32[$15>>2] = $13; //@line 2488 "../hsp3/hsp3code.cpp"
  $0 = 2; //@line 2489 "../hsp3/hsp3code.cpp"
  $16 = $0; //@line 2489 "../hsp3/hsp3code.cpp"
  STACKTOP = sp;return ($16|0); //@line 2489 "../hsp3/hsp3code.cpp"
 }
 return 0|0;
}
function __Z15code_exec_awaiti($tick) {
 $tick = $tick|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $tick;
 $2 = HEAP32[600>>2]|0; //@line 2497 "../hsp3/hsp3code.cpp"
 $3 = (($2) + 248|0); //@line 2497 "../hsp3/hsp3code.cpp"
 $4 = HEAP32[$3>>2]|0; //@line 2497 "../hsp3/hsp3code.cpp"
 $5 = ($4|0)<(0); //@line 2497 "../hsp3/hsp3code.cpp"
 if ($5) {
  $6 = HEAP32[600>>2]|0; //@line 2498 "../hsp3/hsp3code.cpp"
  $7 = (($6) + 252|0); //@line 2498 "../hsp3/hsp3code.cpp"
  $8 = HEAP32[$7>>2]|0; //@line 2498 "../hsp3/hsp3code.cpp"
  $9 = ($8|0)==(0); //@line 2498 "../hsp3/hsp3code.cpp"
  if ($9) {
   $10 = $1; //@line 2498 "../hsp3/hsp3code.cpp"
   $11 = HEAP32[600>>2]|0; //@line 2498 "../hsp3/hsp3code.cpp"
   $12 = (($11) + 252|0); //@line 2498 "../hsp3/hsp3code.cpp"
   HEAP32[$12>>2] = $10; //@line 2498 "../hsp3/hsp3code.cpp"
  }
  $13 = HEAP32[600>>2]|0; //@line 2499 "../hsp3/hsp3code.cpp"
  $14 = (($13) + 252|0); //@line 2499 "../hsp3/hsp3code.cpp"
  $15 = HEAP32[$14>>2]|0; //@line 2499 "../hsp3/hsp3code.cpp"
  $16 = HEAP32[600>>2]|0; //@line 2499 "../hsp3/hsp3code.cpp"
  $17 = (($16) + 240|0); //@line 2499 "../hsp3/hsp3code.cpp"
  $18 = HEAP32[$17>>2]|0; //@line 2499 "../hsp3/hsp3code.cpp"
  $19 = (($15) + ($18))|0; //@line 2499 "../hsp3/hsp3code.cpp"
  $20 = HEAP32[600>>2]|0; //@line 2499 "../hsp3/hsp3code.cpp"
  $21 = (($20) + 248|0); //@line 2499 "../hsp3/hsp3code.cpp"
  HEAP32[$21>>2] = $19; //@line 2499 "../hsp3/hsp3code.cpp"
 }
 $22 = $1; //@line 2501 "../hsp3/hsp3code.cpp"
 $23 = HEAP32[600>>2]|0; //@line 2501 "../hsp3/hsp3code.cpp"
 $24 = (($23) + 248|0); //@line 2501 "../hsp3/hsp3code.cpp"
 $25 = HEAP32[$24>>2]|0; //@line 2501 "../hsp3/hsp3code.cpp"
 $26 = ($22|0)>=($25|0); //@line 2501 "../hsp3/hsp3code.cpp"
 if ($26) {
  $27 = $1; //@line 2502 "../hsp3/hsp3code.cpp"
  $28 = HEAP32[600>>2]|0; //@line 2502 "../hsp3/hsp3code.cpp"
  $29 = (($28) + 252|0); //@line 2502 "../hsp3/hsp3code.cpp"
  HEAP32[$29>>2] = $27; //@line 2502 "../hsp3/hsp3code.cpp"
  $30 = HEAP32[600>>2]|0; //@line 2503 "../hsp3/hsp3code.cpp"
  $31 = (($30) + 236|0); //@line 2503 "../hsp3/hsp3code.cpp"
  HEAP32[$31>>2] = 0; //@line 2503 "../hsp3/hsp3code.cpp"
  $0 = 0; //@line 2504 "../hsp3/hsp3code.cpp"
  $32 = $0; //@line 2506 "../hsp3/hsp3code.cpp"
  STACKTOP = sp;return ($32|0); //@line 2506 "../hsp3/hsp3code.cpp"
 } else {
  $0 = 2; //@line 2506 "../hsp3/hsp3code.cpp"
  $32 = $0; //@line 2506 "../hsp3/hsp3code.cpp"
  STACKTOP = sp;return ($32|0); //@line 2506 "../hsp3/hsp3code.cpp"
 }
 return 0|0;
}
function __Z9code_initv() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $exinfo = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 __Z6sbInitv(); //@line 2552 "../hsp3/hsp3code.cpp"
 __Z9StackInitv(); //@line 2553 "../hsp3/hsp3code.cpp"
 __Z14HspVarCoreInitv(); //@line 2554 "../hsp3/hsp3code.cpp"
 $0 = HEAP32[3448>>2]|0; //@line 2555 "../hsp3/hsp3code.cpp"
 HEAP32[592>>2] = $0; //@line 2555 "../hsp3/hsp3code.cpp"
 HEAP32[720>>2] = 0; //@line 2556 "../hsp3/hsp3code.cpp"
 $exinfo = 752; //@line 2560 "../hsp3/hsp3code.cpp"
 $1 = $exinfo; //@line 2563 "../hsp3/hsp3code.cpp"
 HEAP16[$1>>1] = 13318; //@line 2563 "../hsp3/hsp3code.cpp"
 $2 = $exinfo; //@line 2564 "../hsp3/hsp3code.cpp"
 $3 = (($2) + 2|0); //@line 2564 "../hsp3/hsp3code.cpp"
 HEAP16[$3>>1] = 6; //@line 2564 "../hsp3/hsp3code.cpp"
 $4 = $exinfo; //@line 2565 "../hsp3/hsp3code.cpp"
 $5 = (($4) + 4|0); //@line 2565 "../hsp3/hsp3code.cpp"
 HEAP32[$5>>2] = 952; //@line 2565 "../hsp3/hsp3code.cpp"
 $6 = HEAP32[600>>2]|0; //@line 2566 "../hsp3/hsp3code.cpp"
 $7 = (($6) + 824|0); //@line 2566 "../hsp3/hsp3code.cpp"
 $8 = HEAP32[$7>>2]|0; //@line 2566 "../hsp3/hsp3code.cpp"
 $9 = $exinfo; //@line 2566 "../hsp3/hsp3code.cpp"
 $10 = (($9) + 8|0); //@line 2566 "../hsp3/hsp3code.cpp"
 HEAP32[$10>>2] = $8; //@line 2566 "../hsp3/hsp3code.cpp"
 $11 = HEAP32[600>>2]|0; //@line 2567 "../hsp3/hsp3code.cpp"
 $12 = (($11) + 792|0); //@line 2567 "../hsp3/hsp3code.cpp"
 $13 = HEAP32[$12>>2]|0; //@line 2567 "../hsp3/hsp3code.cpp"
 $14 = $exinfo; //@line 2567 "../hsp3/hsp3code.cpp"
 $15 = (($14) + 12|0); //@line 2567 "../hsp3/hsp3code.cpp"
 HEAP32[$15>>2] = $13; //@line 2567 "../hsp3/hsp3code.cpp"
 $16 = HEAP32[600>>2]|0; //@line 2568 "../hsp3/hsp3code.cpp"
 $17 = (($16) + 788|0); //@line 2568 "../hsp3/hsp3code.cpp"
 $18 = $exinfo; //@line 2568 "../hsp3/hsp3code.cpp"
 $19 = (($18) + 32|0); //@line 2568 "../hsp3/hsp3code.cpp"
 HEAP32[$19>>2] = $17; //@line 2568 "../hsp3/hsp3code.cpp"
 $20 = HEAP32[600>>2]|0; //@line 2569 "../hsp3/hsp3code.cpp"
 $21 = (($20) + 792|0); //@line 2569 "../hsp3/hsp3code.cpp"
 $22 = HEAP32[$21>>2]|0; //@line 2569 "../hsp3/hsp3code.cpp"
 $23 = $exinfo; //@line 2569 "../hsp3/hsp3code.cpp"
 $24 = (($23) + 36|0); //@line 2569 "../hsp3/hsp3code.cpp"
 HEAP32[$24>>2] = $22; //@line 2569 "../hsp3/hsp3code.cpp"
 $25 = $exinfo; //@line 2570 "../hsp3/hsp3code.cpp"
 $26 = (($25) + 40|0); //@line 2570 "../hsp3/hsp3code.cpp"
 HEAP32[$26>>2] = 21; //@line 2570 "../hsp3/hsp3code.cpp"
 $27 = $exinfo; //@line 2572 "../hsp3/hsp3code.cpp"
 $28 = (($27) + 60|0); //@line 2572 "../hsp3/hsp3code.cpp"
 HEAP32[$28>>2] = 22; //@line 2572 "../hsp3/hsp3code.cpp"
 $29 = $exinfo; //@line 2573 "../hsp3/hsp3code.cpp"
 $30 = (($29) + 64|0); //@line 2573 "../hsp3/hsp3code.cpp"
 HEAP32[$30>>2] = 23; //@line 2573 "../hsp3/hsp3code.cpp"
 $31 = $exinfo; //@line 2574 "../hsp3/hsp3code.cpp"
 $32 = (($31) + 68|0); //@line 2574 "../hsp3/hsp3code.cpp"
 HEAP32[$32>>2] = 24; //@line 2574 "../hsp3/hsp3code.cpp"
 $33 = $exinfo; //@line 2577 "../hsp3/hsp3code.cpp"
 $34 = (($33) + 24|0); //@line 2577 "../hsp3/hsp3code.cpp"
 HEAP32[$34>>2] = 640; //@line 2577 "../hsp3/hsp3code.cpp"
 $35 = $exinfo; //@line 2578 "../hsp3/hsp3code.cpp"
 $36 = (($35) + 28|0); //@line 2578 "../hsp3/hsp3code.cpp"
 HEAP32[$36>>2] = 648; //@line 2578 "../hsp3/hsp3code.cpp"
 $37 = $exinfo; //@line 2579 "../hsp3/hsp3code.cpp"
 $38 = (($37) + 16|0); //@line 2579 "../hsp3/hsp3code.cpp"
 HEAP32[$38>>2] = 592; //@line 2579 "../hsp3/hsp3code.cpp"
 $39 = $exinfo; //@line 2581 "../hsp3/hsp3code.cpp"
 $40 = (($39) + 44|0); //@line 2581 "../hsp3/hsp3code.cpp"
 HEAP32[$40>>2] = 25; //@line 2581 "../hsp3/hsp3code.cpp"
 $41 = $exinfo; //@line 2582 "../hsp3/hsp3code.cpp"
 $42 = (($41) + 48|0); //@line 2582 "../hsp3/hsp3code.cpp"
 HEAP32[$42>>2] = 26; //@line 2582 "../hsp3/hsp3code.cpp"
 $43 = $exinfo; //@line 2583 "../hsp3/hsp3code.cpp"
 $44 = (($43) + 52|0); //@line 2583 "../hsp3/hsp3code.cpp"
 HEAP32[$44>>2] = 27; //@line 2583 "../hsp3/hsp3code.cpp"
 $45 = $exinfo; //@line 2584 "../hsp3/hsp3code.cpp"
 $46 = (($45) + 56|0); //@line 2584 "../hsp3/hsp3code.cpp"
 HEAP32[$46>>2] = 28; //@line 2584 "../hsp3/hsp3code.cpp"
 $47 = $exinfo; //@line 2585 "../hsp3/hsp3code.cpp"
 $48 = (($47) + 72|0); //@line 2585 "../hsp3/hsp3code.cpp"
 HEAP32[$48>>2] = 0; //@line 2585 "../hsp3/hsp3code.cpp"
 $49 = $exinfo; //@line 2586 "../hsp3/hsp3code.cpp"
 $50 = (($49) + 92|0); //@line 2586 "../hsp3/hsp3code.cpp"
 HEAP32[$50>>2] = 0; //@line 2586 "../hsp3/hsp3code.cpp"
 $51 = $exinfo; //@line 2587 "../hsp3/hsp3code.cpp"
 $52 = (($51) + 80|0); //@line 2587 "../hsp3/hsp3code.cpp"
 HEAP32[$52>>2] = 0; //@line 2587 "../hsp3/hsp3code.cpp"
 $53 = $exinfo; //@line 2588 "../hsp3/hsp3code.cpp"
 $54 = (($53) + 80|0); //@line 2588 "../hsp3/hsp3code.cpp"
 HEAP32[$54>>2] = 0; //@line 2588 "../hsp3/hsp3code.cpp"
 $55 = HEAP32[600>>2]|0; //@line 2591 "../hsp3/hsp3code.cpp"
 $56 = $exinfo; //@line 2591 "../hsp3/hsp3code.cpp"
 $57 = (($56) + 88|0); //@line 2591 "../hsp3/hsp3code.cpp"
 HEAP32[$57>>2] = $55; //@line 2591 "../hsp3/hsp3code.cpp"
 $58 = $exinfo; //@line 2592 "../hsp3/hsp3code.cpp"
 $59 = (($58) + 84|0); //@line 2592 "../hsp3/hsp3code.cpp"
 HEAP32[$59>>2] = 632; //@line 2592 "../hsp3/hsp3code.cpp"
 $60 = $exinfo; //@line 2593 "../hsp3/hsp3code.cpp"
 $61 = (($60) + 80|0); //@line 2593 "../hsp3/hsp3code.cpp"
 HEAP32[$61>>2] = 0; //@line 2593 "../hsp3/hsp3code.cpp"
 $62 = $exinfo; //@line 2595 "../hsp3/hsp3code.cpp"
 $63 = (($62) + 96|0); //@line 2595 "../hsp3/hsp3code.cpp"
 HEAP32[$63>>2] = 29; //@line 2595 "../hsp3/hsp3code.cpp"
 $64 = $exinfo; //@line 2596 "../hsp3/hsp3code.cpp"
 $65 = (($64) + 100|0); //@line 2596 "../hsp3/hsp3code.cpp"
 HEAP32[$65>>2] = 30; //@line 2596 "../hsp3/hsp3code.cpp"
 $66 = $exinfo; //@line 2597 "../hsp3/hsp3code.cpp"
 $67 = (($66) + 104|0); //@line 2597 "../hsp3/hsp3code.cpp"
 HEAP32[$67>>2] = 31; //@line 2597 "../hsp3/hsp3code.cpp"
 $68 = $exinfo; //@line 2598 "../hsp3/hsp3code.cpp"
 $69 = (($68) + 108|0); //@line 2598 "../hsp3/hsp3code.cpp"
 HEAP32[$69>>2] = 32; //@line 2598 "../hsp3/hsp3code.cpp"
 $70 = $exinfo; //@line 2599 "../hsp3/hsp3code.cpp"
 $71 = (($70) + 112|0); //@line 2599 "../hsp3/hsp3code.cpp"
 HEAP32[$71>>2] = 33; //@line 2599 "../hsp3/hsp3code.cpp"
 $72 = $exinfo; //@line 2600 "../hsp3/hsp3code.cpp"
 $73 = (($72) + 124|0); //@line 2600 "../hsp3/hsp3code.cpp"
 HEAP32[$73>>2] = 34; //@line 2600 "../hsp3/hsp3code.cpp"
 $74 = $exinfo; //@line 2601 "../hsp3/hsp3code.cpp"
 $75 = (($74) + 128|0); //@line 2601 "../hsp3/hsp3code.cpp"
 HEAP32[$75>>2] = 35; //@line 2601 "../hsp3/hsp3code.cpp"
 $76 = $exinfo; //@line 2602 "../hsp3/hsp3code.cpp"
 $77 = (($76) + 132|0); //@line 2602 "../hsp3/hsp3code.cpp"
 HEAP32[$77>>2] = 36; //@line 2602 "../hsp3/hsp3code.cpp"
 $78 = $exinfo; //@line 2603 "../hsp3/hsp3code.cpp"
 $79 = (($78) + 136|0); //@line 2603 "../hsp3/hsp3code.cpp"
 HEAP32[$79>>2] = 37; //@line 2603 "../hsp3/hsp3code.cpp"
 $80 = $exinfo; //@line 2604 "../hsp3/hsp3code.cpp"
 $81 = (($80) + 116|0); //@line 2604 "../hsp3/hsp3code.cpp"
 HEAP32[$81>>2] = 38; //@line 2604 "../hsp3/hsp3code.cpp"
 $82 = $exinfo; //@line 2605 "../hsp3/hsp3code.cpp"
 $83 = (($82) + 120|0); //@line 2605 "../hsp3/hsp3code.cpp"
 HEAP32[$83>>2] = 39; //@line 2605 "../hsp3/hsp3code.cpp"
 $84 = $exinfo; //@line 2607 "../hsp3/hsp3code.cpp"
 $85 = (($84) + 140|0); //@line 2607 "../hsp3/hsp3code.cpp"
 HEAP32[$85>>2] = 40; //@line 2607 "../hsp3/hsp3code.cpp"
 $86 = $exinfo; //@line 2608 "../hsp3/hsp3code.cpp"
 $87 = (($86) + 144|0); //@line 2608 "../hsp3/hsp3code.cpp"
 HEAP32[$87>>2] = 41; //@line 2608 "../hsp3/hsp3code.cpp"
 $88 = $exinfo; //@line 2609 "../hsp3/hsp3code.cpp"
 $89 = (($88) + 148|0); //@line 2609 "../hsp3/hsp3code.cpp"
 HEAP32[$89>>2] = 42; //@line 2609 "../hsp3/hsp3code.cpp"
 $90 = $exinfo; //@line 2610 "../hsp3/hsp3code.cpp"
 $91 = (($90) + 152|0); //@line 2610 "../hsp3/hsp3code.cpp"
 HEAP32[$91>>2] = 43; //@line 2610 "../hsp3/hsp3code.cpp"
 $92 = $exinfo; //@line 2611 "../hsp3/hsp3code.cpp"
 $93 = (($92) + 156|0); //@line 2611 "../hsp3/hsp3code.cpp"
 HEAP32[$93>>2] = 44; //@line 2611 "../hsp3/hsp3code.cpp"
 $94 = $exinfo; //@line 2612 "../hsp3/hsp3code.cpp"
 $95 = (($94) + 160|0); //@line 2612 "../hsp3/hsp3code.cpp"
 HEAP32[$95>>2] = 45; //@line 2612 "../hsp3/hsp3code.cpp"
 $96 = $exinfo; //@line 2613 "../hsp3/hsp3code.cpp"
 $97 = (($96) + 164|0); //@line 2613 "../hsp3/hsp3code.cpp"
 HEAP32[$97>>2] = 46; //@line 2613 "../hsp3/hsp3code.cpp"
 $98 = $exinfo; //@line 2614 "../hsp3/hsp3code.cpp"
 $99 = (($98) + 168|0); //@line 2614 "../hsp3/hsp3code.cpp"
 HEAP32[$99>>2] = 47; //@line 2614 "../hsp3/hsp3code.cpp"
 $100 = $exinfo; //@line 2616 "../hsp3/hsp3code.cpp"
 $101 = (($100) + 176|0); //@line 2616 "../hsp3/hsp3code.cpp"
 HEAP32[$101>>2] = 48; //@line 2616 "../hsp3/hsp3code.cpp"
 $102 = $exinfo; //@line 2617 "../hsp3/hsp3code.cpp"
 $103 = (($102) + 180|0); //@line 2617 "../hsp3/hsp3code.cpp"
 HEAP32[$103>>2] = 49; //@line 2617 "../hsp3/hsp3code.cpp"
 $104 = $exinfo; //@line 2618 "../hsp3/hsp3code.cpp"
 $105 = (($104) + 184|0); //@line 2618 "../hsp3/hsp3code.cpp"
 HEAP32[$105>>2] = 50; //@line 2618 "../hsp3/hsp3code.cpp"
 $106 = $exinfo; //@line 2621 "../hsp3/hsp3code.cpp"
 $107 = (($106) + 188|0); //@line 2621 "../hsp3/hsp3code.cpp"
 HEAP32[$107>>2] = 51; //@line 2621 "../hsp3/hsp3code.cpp"
 $108 = $exinfo; //@line 2622 "../hsp3/hsp3code.cpp"
 $109 = (($108) + 192|0); //@line 2622 "../hsp3/hsp3code.cpp"
 HEAP32[$109>>2] = 52; //@line 2622 "../hsp3/hsp3code.cpp"
 $110 = HEAP32[600>>2]|0; //@line 2626 "../hsp3/hsp3code.cpp"
 $111 = (($110) + 48|0); //@line 2626 "../hsp3/hsp3code.cpp"
 $112 = $exinfo; //@line 2626 "../hsp3/hsp3code.cpp"
 _memcpy(($111|0),($112|0),188)|0; //@line 2626 "../hsp3/hsp3code.cpp"
 $113 = $exinfo; //@line 2627 "../hsp3/hsp3code.cpp"
 $114 = HEAP32[600>>2]|0; //@line 2627 "../hsp3/hsp3code.cpp"
 $115 = (($114) + 876|0); //@line 2627 "../hsp3/hsp3code.cpp"
 HEAP32[$115>>2] = $113; //@line 2627 "../hsp3/hsp3code.cpp"
 $116 = (__Z7sbAlloci(576)|0); //@line 2631 "../hsp3/hsp3code.cpp"
 HEAP32[672>>2] = $116; //@line 2631 "../hsp3/hsp3code.cpp"
 HEAP32[712>>2] = 18; //@line 2632 "../hsp3/hsp3code.cpp"
 $i = 0; //@line 2633 "../hsp3/hsp3code.cpp"
 while(1) {
  $117 = $i; //@line 2633 "../hsp3/hsp3code.cpp"
  $118 = HEAP32[712>>2]|0; //@line 2633 "../hsp3/hsp3code.cpp"
  $119 = ($117|0)<($118|0); //@line 2633 "../hsp3/hsp3code.cpp"
  if (!($119)) {
   break;
  }
  $120 = $i; //@line 2634 "../hsp3/hsp3code.cpp"
  __ZL20hsp3typeinit_defaulti($120); //@line 2634 "../hsp3/hsp3code.cpp"
  $121 = $i; //@line 2633 "../hsp3/hsp3code.cpp"
  $122 = (($121) + 1)|0; //@line 2633 "../hsp3/hsp3code.cpp"
  $i = $122; //@line 2633 "../hsp3/hsp3code.cpp"
 }
 $123 = HEAP32[672>>2]|0; //@line 2639 "../hsp3/hsp3code.cpp"
 $124 = (($123) + 32|0); //@line 2639 "../hsp3/hsp3code.cpp"
 __ZL16hsp3typeinit_varP12HSP3TYPEINFO($124); //@line 2639 "../hsp3/hsp3code.cpp"
 $125 = HEAP32[672>>2]|0; //@line 2640 "../hsp3/hsp3code.cpp"
 $126 = (($125) + 160|0); //@line 2640 "../hsp3/hsp3code.cpp"
 __ZL16hsp3typeinit_varP12HSP3TYPEINFO($126); //@line 2640 "../hsp3/hsp3code.cpp"
 $127 = HEAP32[672>>2]|0; //@line 2641 "../hsp3/hsp3code.cpp"
 $128 = (($127) + 480|0); //@line 2641 "../hsp3/hsp3code.cpp"
 __ZL17hsp3typeinit_progP12HSP3TYPEINFO($128); //@line 2641 "../hsp3/hsp3code.cpp"
 $129 = HEAP32[672>>2]|0; //@line 2642 "../hsp3/hsp3code.cpp"
 $130 = (($129) + 352|0); //@line 2642 "../hsp3/hsp3code.cpp"
 __ZL18hsp3typeinit_ifcmdP12HSP3TYPEINFO($130); //@line 2642 "../hsp3/hsp3code.cpp"
 $131 = HEAP32[672>>2]|0; //@line 2643 "../hsp3/hsp3code.cpp"
 $132 = (($131) + 448|0); //@line 2643 "../hsp3/hsp3code.cpp"
 __ZL19hsp3typeinit_sysvarP12HSP3TYPEINFO($132); //@line 2643 "../hsp3/hsp3code.cpp"
 $133 = HEAP32[672>>2]|0; //@line 2644 "../hsp3/hsp3code.cpp"
 $134 = (($133) + 256|0); //@line 2644 "../hsp3/hsp3code.cpp"
 __Z19hsp3typeinit_intcmdP12HSP3TYPEINFO($134); //@line 2644 "../hsp3/hsp3code.cpp"
 $135 = HEAP32[672>>2]|0; //@line 2645 "../hsp3/hsp3code.cpp"
 $136 = (($135) + 416|0); //@line 2645 "../hsp3/hsp3code.cpp"
 __Z20hsp3typeinit_intfuncP12HSP3TYPEINFO($136); //@line 2645 "../hsp3/hsp3code.cpp"
 $137 = HEAP32[672>>2]|0; //@line 2646 "../hsp3/hsp3code.cpp"
 $138 = (($137) + 416|0); //@line 2646 "../hsp3/hsp3code.cpp"
 __Z20hsp3typeinit_intfuncP12HSP3TYPEINFO($138); //@line 2646 "../hsp3/hsp3code.cpp"
 $139 = HEAP32[672>>2]|0; //@line 2647 "../hsp3/hsp3code.cpp"
 $140 = (($139) + 384|0); //@line 2647 "../hsp3/hsp3code.cpp"
 __ZL19hsp3typeinit_customP12HSP3TYPEINFO($140); //@line 2647 "../hsp3/hsp3code.cpp"
 $141 = HEAP32[600>>2]|0; //@line 2651 "../hsp3/hsp3code.cpp"
 $142 = (($141) + 24|0); //@line 2651 "../hsp3/hsp3code.cpp"
 HEAP32[$142>>2] = 0; //@line 2651 "../hsp3/hsp3code.cpp"
 $143 = HEAP32[600>>2]|0; //@line 2652 "../hsp3/hsp3code.cpp"
 $144 = (($143) + 28|0); //@line 2652 "../hsp3/hsp3code.cpp"
 HEAP32[$144>>2] = 0; //@line 2652 "../hsp3/hsp3code.cpp"
 $i = 0; //@line 2653 "../hsp3/hsp3code.cpp"
 while(1) {
  $145 = $i; //@line 2653 "../hsp3/hsp3code.cpp"
  $146 = ($145|0)<(5); //@line 2653 "../hsp3/hsp3code.cpp"
  if (!($146)) {
   break;
  }
  (__Z11code_addirqv()|0); //@line 2653 "../hsp3/hsp3code.cpp"
  $147 = $i; //@line 2653 "../hsp3/hsp3code.cpp"
  $148 = (($147) + 1)|0; //@line 2653 "../hsp3/hsp3code.cpp"
  $i = $148; //@line 2653 "../hsp3/hsp3code.cpp"
 }
 __Z14code_enableirqii(4,1); //@line 2654 "../hsp3/hsp3code.cpp"
 HEAP32[712>>2] = 18; //@line 2658 "../hsp3/hsp3code.cpp"
 $149 = (__Z7sbAlloci(4096)|0); //@line 2662 "../hsp3/hsp3code.cpp"
 $150 = HEAP32[600>>2]|0; //@line 2662 "../hsp3/hsp3code.cpp"
 $151 = (($150) + 792|0); //@line 2662 "../hsp3/hsp3code.cpp"
 HEAP32[$151>>2] = $149; //@line 2662 "../hsp3/hsp3code.cpp"
 $152 = (__Z7sbAlloci(256)|0); //@line 2663 "../hsp3/hsp3code.cpp"
 $153 = HEAP32[600>>2]|0; //@line 2663 "../hsp3/hsp3code.cpp"
 $154 = (($153) + 796|0); //@line 2663 "../hsp3/hsp3code.cpp"
 HEAP32[$154>>2] = $152; //@line 2663 "../hsp3/hsp3code.cpp"
 $155 = (__Z7sbAlloci(4096)|0); //@line 2664 "../hsp3/hsp3code.cpp"
 $156 = HEAP32[600>>2]|0; //@line 2664 "../hsp3/hsp3code.cpp"
 $157 = (($156) + 824|0); //@line 2664 "../hsp3/hsp3code.cpp"
 HEAP32[$157>>2] = $155; //@line 2664 "../hsp3/hsp3code.cpp"
 $158 = (__Z7sbAlloci(1024)|0); //@line 2665 "../hsp3/hsp3code.cpp"
 $159 = HEAP32[600>>2]|0; //@line 2665 "../hsp3/hsp3code.cpp"
 $160 = (($159) + 872|0); //@line 2665 "../hsp3/hsp3code.cpp"
 HEAP32[$160>>2] = $158; //@line 2665 "../hsp3/hsp3code.cpp"
 HEAP32[736>>2] = 0; //@line 2670 "../hsp3/hsp3code.cpp"
 HEAP32[960>>2] = 0; //@line 2671 "../hsp3/hsp3code.cpp"
 $161 = HEAP32[600>>2]|0; //@line 2672 "../hsp3/hsp3code.cpp"
 HEAP32[((968 + 20|0))>>2] = $161; //@line 2672 "../hsp3/hsp3code.cpp"
 HEAP32[((968 + 4|0))>>2] = 0; //@line 2673 "../hsp3/hsp3code.cpp"
 HEAP32[((968 + 8|0))>>2] = 0; //@line 2674 "../hsp3/hsp3code.cpp"
 HEAP32[((968 + 24|0))>>2] = 53; //@line 2675 "../hsp3/hsp3code.cpp"
 HEAP32[((968 + 28|0))>>2] = 54; //@line 2676 "../hsp3/hsp3code.cpp"
 HEAP32[((968 + 32|0))>>2] = 55; //@line 2677 "../hsp3/hsp3code.cpp"
 HEAP32[((968 + 36|0))>>2] = 56; //@line 2678 "../hsp3/hsp3code.cpp"
 HEAP32[((968 + 40|0))>>2] = 57; //@line 2679 "../hsp3/hsp3code.cpp"
 STACKTOP = sp;return; //@line 2682 "../hsp3/hsp3code.cpp"
}
function __ZL13code_cnv_getvv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $ptr = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $size = sp;
 $0 = (__Z12code_getvptrPP4PValPi(584,$size)|0); //@line 2532 "../hsp3/hsp3code.cpp"
 $ptr = $0; //@line 2532 "../hsp3/hsp3code.cpp"
 $1 = HEAP32[600>>2]|0; //@line 2533 "../hsp3/hsp3code.cpp"
 $2 = (($1) + 48|0); //@line 2533 "../hsp3/hsp3code.cpp"
 $3 = (($2) + 16|0); //@line 2533 "../hsp3/hsp3code.cpp"
 HEAP32[$3>>2] = 584; //@line 2533 "../hsp3/hsp3code.cpp"
 $4 = $ptr; //@line 2534 "../hsp3/hsp3code.cpp"
 STACKTOP = sp;return ($4|0); //@line 2534 "../hsp3/hsp3code.cpp"
}
function __ZL16code_cnv_reallocP4PValii($pv,$size,$mode) {
 $pv = $pv|0;
 $size = $size|0;
 $mode = $mode|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $pv;
 $1 = $size;
 $2 = $mode;
 $3 = $0; //@line 2542 "../hsp3/hsp3code.cpp"
 $4 = (__Z17HspVarCorePtrAPTRP4PVali($3,0)|0); //@line 2542 "../hsp3/hsp3code.cpp"
 $ptr = $4; //@line 2542 "../hsp3/hsp3code.cpp"
 $5 = $0; //@line 2543 "../hsp3/hsp3code.cpp"
 $6 = HEAP16[$5>>1]|0; //@line 2543 "../hsp3/hsp3code.cpp"
 $7 = $6 << 16 >> 16; //@line 2543 "../hsp3/hsp3code.cpp"
 $8 = HEAP32[3456>>2]|0; //@line 2543 "../hsp3/hsp3code.cpp"
 $9 = (($8) + (($7*140)|0)|0); //@line 2543 "../hsp3/hsp3code.cpp"
 $10 = (($9) + 68|0); //@line 2543 "../hsp3/hsp3code.cpp"
 $11 = HEAP32[$10>>2]|0; //@line 2543 "../hsp3/hsp3code.cpp"
 $12 = $0; //@line 2543 "../hsp3/hsp3code.cpp"
 $13 = $ptr; //@line 2543 "../hsp3/hsp3code.cpp"
 $14 = $1; //@line 2543 "../hsp3/hsp3code.cpp"
 FUNCTION_TABLE_viii[$11 & 255]($12,$13,$14); //@line 2543 "../hsp3/hsp3code.cpp"
 STACKTOP = sp;return 0; //@line 2544 "../hsp3/hsp3code.cpp"
}
function __ZL15HspFunc_getproci($id) {
 $id = $id|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $id;
 $1 = $0; //@line 2314 "../hsp3/hsp3code.cpp"
 $2 = HEAP32[3456>>2]|0; //@line 2314 "../hsp3/hsp3code.cpp"
 $3 = (($2) + (($1*140)|0)|0); //@line 2314 "../hsp3/hsp3code.cpp"
 STACKTOP = sp;return ($3|0); //@line 2314 "../hsp3/hsp3code.cpp"
}
function __ZL12code_cnv_getv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[600>>2]|0; //@line 2522 "../hsp3/hsp3code.cpp"
 $1 = (($0) + 48|0); //@line 2522 "../hsp3/hsp3code.cpp"
 $2 = (($1) + 16|0); //@line 2522 "../hsp3/hsp3code.cpp"
 HEAP32[$2>>2] = 592; //@line 2522 "../hsp3/hsp3code.cpp"
 $3 = (__Z8code_getv()|0); //@line 2523 "../hsp3/hsp3code.cpp"
 STACKTOP = sp;return ($3|0); //@line 2523 "../hsp3/hsp3code.cpp"
}
function __Z11code_addirqv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $id = 0, $irq = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = HEAP32[600>>2]|0; //@line 3231 "../hsp3/hsp3code.cpp"
 $1 = (($0) + 28|0); //@line 3231 "../hsp3/hsp3code.cpp"
 $2 = HEAP32[$1>>2]|0; //@line 3231 "../hsp3/hsp3code.cpp"
 $3 = (($2) + 1)|0; //@line 3231 "../hsp3/hsp3code.cpp"
 HEAP32[$1>>2] = $3; //@line 3231 "../hsp3/hsp3code.cpp"
 $id = $2; //@line 3231 "../hsp3/hsp3code.cpp"
 $4 = HEAP32[600>>2]|0; //@line 3232 "../hsp3/hsp3code.cpp"
 $5 = (($4) + 24|0); //@line 3232 "../hsp3/hsp3code.cpp"
 $6 = HEAP32[$5>>2]|0; //@line 3232 "../hsp3/hsp3code.cpp"
 $7 = ($6|0)==(0|0); //@line 3232 "../hsp3/hsp3code.cpp"
 if ($7) {
  $8 = (__Z7sbAlloci(24)|0); //@line 3233 "../hsp3/hsp3code.cpp"
  $9 = HEAP32[600>>2]|0; //@line 3233 "../hsp3/hsp3code.cpp"
  $10 = (($9) + 24|0); //@line 3233 "../hsp3/hsp3code.cpp"
  HEAP32[$10>>2] = $8; //@line 3233 "../hsp3/hsp3code.cpp"
 } else {
  $11 = HEAP32[600>>2]|0; //@line 3235 "../hsp3/hsp3code.cpp"
  $12 = (($11) + 24|0); //@line 3235 "../hsp3/hsp3code.cpp"
  $13 = HEAP32[$12>>2]|0; //@line 3235 "../hsp3/hsp3code.cpp"
  $14 = HEAP32[600>>2]|0; //@line 3235 "../hsp3/hsp3code.cpp"
  $15 = (($14) + 28|0); //@line 3235 "../hsp3/hsp3code.cpp"
  $16 = HEAP32[$15>>2]|0; //@line 3235 "../hsp3/hsp3code.cpp"
  $17 = ($16*24)|0; //@line 3235 "../hsp3/hsp3code.cpp"
  $18 = (__Z8sbExpandPci($13,$17)|0); //@line 3235 "../hsp3/hsp3code.cpp"
  $19 = HEAP32[600>>2]|0; //@line 3235 "../hsp3/hsp3code.cpp"
  $20 = (($19) + 24|0); //@line 3235 "../hsp3/hsp3code.cpp"
  HEAP32[$20>>2] = $18; //@line 3235 "../hsp3/hsp3code.cpp"
 }
 $21 = $id; //@line 3237 "../hsp3/hsp3code.cpp"
 $22 = (__Z11code_getirqi($21)|0); //@line 3237 "../hsp3/hsp3code.cpp"
 $irq = $22; //@line 3237 "../hsp3/hsp3code.cpp"
 $23 = $irq; //@line 3238 "../hsp3/hsp3code.cpp"
 HEAP16[$23>>1] = 1; //@line 3238 "../hsp3/hsp3code.cpp"
 $24 = $irq; //@line 3239 "../hsp3/hsp3code.cpp"
 $25 = (($24) + 2|0); //@line 3239 "../hsp3/hsp3code.cpp"
 HEAP16[$25>>1] = 0; //@line 3239 "../hsp3/hsp3code.cpp"
 $26 = $irq; //@line 3240 "../hsp3/hsp3code.cpp"
 $27 = (($26) + 4|0); //@line 3240 "../hsp3/hsp3code.cpp"
 HEAP32[$27>>2] = -1; //@line 3240 "../hsp3/hsp3code.cpp"
 $28 = $irq; //@line 3241 "../hsp3/hsp3code.cpp"
 $29 = (($28) + 12|0); //@line 3241 "../hsp3/hsp3code.cpp"
 HEAP32[$29>>2] = 0; //@line 3241 "../hsp3/hsp3code.cpp"
 $30 = $irq; //@line 3242 "../hsp3/hsp3code.cpp"
 $31 = (($30) + 16|0); //@line 3242 "../hsp3/hsp3code.cpp"
 HEAP32[$31>>2] = 0; //@line 3242 "../hsp3/hsp3code.cpp"
 $32 = $irq; //@line 3243 "../hsp3/hsp3code.cpp"
 $33 = (($32) + 20|0); //@line 3243 "../hsp3/hsp3code.cpp"
 HEAP32[$33>>2] = 0; //@line 3243 "../hsp3/hsp3code.cpp"
 $34 = $irq; //@line 3244 "../hsp3/hsp3code.cpp"
 STACKTOP = sp;return ($34|0); //@line 3244 "../hsp3/hsp3code.cpp"
}
function __Z10code_eventiiiPv($event,$prm1,$prm2,$prm3) {
 $event = $event|0;
 $prm1 = $prm1|0;
 $prm2 = $prm2|0;
 $prm3 = $prm3|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $p = 0, $res = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = $event;
 $2 = $prm1;
 $3 = $prm2;
 $4 = $prm3;
 $5 = $1; //@line 2994 "../hsp3/hsp3code.cpp"
 $6 = (1016 + ($5<<1)|0); //@line 2994 "../hsp3/hsp3code.cpp"
 $7 = HEAP16[$6>>1]|0; //@line 2994 "../hsp3/hsp3code.cpp"
 $8 = $7 << 16 >> 16; //@line 2994 "../hsp3/hsp3code.cpp"
 $9 = $1; //@line 2994 "../hsp3/hsp3code.cpp"
 $10 = $2; //@line 2994 "../hsp3/hsp3code.cpp"
 $11 = $3; //@line 2994 "../hsp3/hsp3code.cpp"
 $12 = $4; //@line 2994 "../hsp3/hsp3code.cpp"
 $13 = (__ZL14call_eventfunciiiiPv($8,$9,$10,$11,$12)|0); //@line 2994 "../hsp3/hsp3code.cpp"
 $res = $13; //@line 2994 "../hsp3/hsp3code.cpp"
 $14 = $res; //@line 2995 "../hsp3/hsp3code.cpp"
 $15 = ($14|0)!=(0); //@line 2995 "../hsp3/hsp3code.cpp"
 if ($15) {
  $16 = $res; //@line 2995 "../hsp3/hsp3code.cpp"
  $0 = $16; //@line 2995 "../hsp3/hsp3code.cpp"
  $94 = $0; //@line 3081 "../hsp3/hsp3code.cpp"
  STACKTOP = sp;return ($94|0); //@line 3081 "../hsp3/hsp3code.cpp"
 }
 $17 = $1; //@line 2997 "../hsp3/hsp3code.cpp"
 L5: do {
  switch ($17|0) {
  case 16:  {
   break;
  }
  case 15:  {
   break;
  }
  case 14:  {
   $93 = HEAP32[1056>>2]|0; //@line 3069 "../hsp3/hsp3code.cpp"
   __Z6sbFreePv($93); //@line 3069 "../hsp3/hsp3code.cpp"
   break;
  }
  case 13:  {
   $82 = (__Z7sbAlloci(4096)|0); //@line 3061 "../hsp3/hsp3code.cpp"
   HEAP32[1056>>2] = $82; //@line 3061 "../hsp3/hsp3code.cpp"
   $83 = HEAP32[600>>2]|0; //@line 3062 "../hsp3/hsp3code.cpp"
   $84 = (($83) + 796|0); //@line 3062 "../hsp3/hsp3code.cpp"
   $85 = HEAP32[$84>>2]|0; //@line 3062 "../hsp3/hsp3code.cpp"
   $86 = $2; //@line 3062 "../hsp3/hsp3code.cpp"
   $87 = (__Z7dirlistPcPS_i($85,1056,$86)|0); //@line 3062 "../hsp3/hsp3code.cpp"
   $88 = HEAP32[600>>2]|0; //@line 3062 "../hsp3/hsp3code.cpp"
   $89 = (($88) + 784|0); //@line 3062 "../hsp3/hsp3code.cpp"
   HEAP32[$89>>2] = $87; //@line 3062 "../hsp3/hsp3code.cpp"
   $90 = $4; //@line 3063 "../hsp3/hsp3code.cpp"
   $p = $90; //@line 3063 "../hsp3/hsp3code.cpp"
   $91 = HEAP32[1056>>2]|0; //@line 3064 "../hsp3/hsp3code.cpp"
   $92 = $p; //@line 3064 "../hsp3/hsp3code.cpp"
   HEAP32[$92>>2] = $91; //@line 3064 "../hsp3/hsp3code.cpp"
   break;
  }
  case 12:  {
   $75 = HEAP32[600>>2]|0; //@line 3055 "../hsp3/hsp3code.cpp"
   $76 = (($75) + 796|0); //@line 3055 "../hsp3/hsp3code.cpp"
   $77 = HEAP32[$76>>2]|0; //@line 3055 "../hsp3/hsp3code.cpp"
   $78 = $4; //@line 3055 "../hsp3/hsp3code.cpp"
   $79 = (__Z12dpm_filecopyPcS_($77,$78)|0); //@line 3055 "../hsp3/hsp3code.cpp"
   $80 = ($79|0)!=(0); //@line 3055 "../hsp3/hsp3code.cpp"
   if ($80) {
    $81 = (___cxa_allocate_exception(4)|0); //@line 3055 "../hsp3/hsp3code.cpp"
    HEAP32[$81>>2] = 12; //@line 3055 "../hsp3/hsp3code.cpp"
    ___cxa_throw(($81|0),(624|0),(0|0)); //@line 3055 "../hsp3/hsp3code.cpp"
    // unreachable; //@line 3055 "../hsp3/hsp3code.cpp"
   } else {
    break L5;
   }
   break;
  }
  case 9:  {
   $57 = HEAP32[600>>2]|0; //@line 3043 "../hsp3/hsp3code.cpp"
   $58 = (($57) + 796|0); //@line 3043 "../hsp3/hsp3code.cpp"
   $59 = HEAP32[$58>>2]|0; //@line 3043 "../hsp3/hsp3code.cpp"
   $60 = (__Z7delfilePc($59)|0); //@line 3043 "../hsp3/hsp3code.cpp"
   $61 = ($60|0)==(0); //@line 3043 "../hsp3/hsp3code.cpp"
   if ($61) {
    $62 = (___cxa_allocate_exception(4)|0); //@line 3043 "../hsp3/hsp3code.cpp"
    HEAP32[$62>>2] = 12; //@line 3043 "../hsp3/hsp3code.cpp"
    ___cxa_throw(($62|0),(624|0),(0|0)); //@line 3043 "../hsp3/hsp3code.cpp"
    // unreachable; //@line 3043 "../hsp3/hsp3code.cpp"
   } else {
    break L5;
   }
   break;
  }
  case 10:  {
   $63 = HEAP32[600>>2]|0; //@line 3047 "../hsp3/hsp3code.cpp"
   $64 = (($63) + 796|0); //@line 3047 "../hsp3/hsp3code.cpp"
   $65 = HEAP32[$64>>2]|0; //@line 3047 "../hsp3/hsp3code.cpp"
   $66 = (__Z7makedirPc($65)|0); //@line 3047 "../hsp3/hsp3code.cpp"
   $67 = ($66|0)!=(0); //@line 3047 "../hsp3/hsp3code.cpp"
   if ($67) {
    $68 = (___cxa_allocate_exception(4)|0); //@line 3047 "../hsp3/hsp3code.cpp"
    HEAP32[$68>>2] = 12; //@line 3047 "../hsp3/hsp3code.cpp"
    ___cxa_throw(($68|0),(624|0),(0|0)); //@line 3047 "../hsp3/hsp3code.cpp"
    // unreachable; //@line 3047 "../hsp3/hsp3code.cpp"
   } else {
    break L5;
   }
   break;
  }
  case 8:  {
   $51 = HEAP32[600>>2]|0; //@line 3035 "../hsp3/hsp3code.cpp"
   $52 = (($51) + 796|0); //@line 3035 "../hsp3/hsp3code.cpp"
   $53 = HEAP32[$52>>2]|0; //@line 3035 "../hsp3/hsp3code.cpp"
   $54 = (__Z9dpm_existPc($53)|0); //@line 3035 "../hsp3/hsp3code.cpp"
   $55 = HEAP32[600>>2]|0; //@line 3035 "../hsp3/hsp3code.cpp"
   $56 = (($55) + 788|0); //@line 3035 "../hsp3/hsp3code.cpp"
   HEAP32[$56>>2] = $54; //@line 3035 "../hsp3/hsp3code.cpp"
   break;
  }
  case 4: case 3:  {
   break;
  }
  case 2:  {
   $18 = $4; //@line 3004 "../hsp3/hsp3code.cpp"
   $19 = $2; //@line 3004 "../hsp3/hsp3code.cpp"
   $20 = $3; //@line 3004 "../hsp3/hsp3code.cpp"
   __Z12code_execirqP6IRQDATii($18,$19,$20); //@line 3004 "../hsp3/hsp3code.cpp"
   break;
  }
  case 5:  {
   $21 = HEAP32[600>>2]|0; //@line 3015 "../hsp3/hsp3code.cpp"
   $22 = (($21) + 796|0); //@line 3015 "../hsp3/hsp3code.cpp"
   $23 = HEAP32[$22>>2]|0; //@line 3015 "../hsp3/hsp3code.cpp"
   $24 = $4; //@line 3015 "../hsp3/hsp3code.cpp"
   (_strncpy(($23|0),($24|0),255)|0); //@line 3015 "../hsp3/hsp3code.cpp"
   break;
  }
  case 7:  {
   $38 = HEAP32[600>>2]|0; //@line 3029 "../hsp3/hsp3code.cpp"
   $39 = (($38) + 796|0); //@line 3029 "../hsp3/hsp3code.cpp"
   $40 = HEAP32[$39>>2]|0; //@line 3029 "../hsp3/hsp3code.cpp"
   $41 = $4; //@line 3029 "../hsp3/hsp3code.cpp"
   $42 = $3; //@line 3029 "../hsp3/hsp3code.cpp"
   $43 = $2; //@line 3029 "../hsp3/hsp3code.cpp"
   $44 = (__Z8mem_savePcPvii($40,$41,$42,$43)|0); //@line 3029 "../hsp3/hsp3code.cpp"
   $res = $44; //@line 3029 "../hsp3/hsp3code.cpp"
   $45 = $res; //@line 3030 "../hsp3/hsp3code.cpp"
   $46 = ($45|0)<(0); //@line 3030 "../hsp3/hsp3code.cpp"
   if ($46) {
    $47 = (___cxa_allocate_exception(4)|0); //@line 3030 "../hsp3/hsp3code.cpp"
    HEAP32[$47>>2] = 12; //@line 3030 "../hsp3/hsp3code.cpp"
    ___cxa_throw(($47|0),(624|0),(0|0)); //@line 3030 "../hsp3/hsp3code.cpp"
    // unreachable; //@line 3030 "../hsp3/hsp3code.cpp"
   } else {
    $48 = $res; //@line 3031 "../hsp3/hsp3code.cpp"
    $49 = HEAP32[600>>2]|0; //@line 3031 "../hsp3/hsp3code.cpp"
    $50 = (($49) + 788|0); //@line 3031 "../hsp3/hsp3code.cpp"
    HEAP32[$50>>2] = $48; //@line 3031 "../hsp3/hsp3code.cpp"
    break L5;
   }
   break;
  }
  case 1:  {
   break;
  }
  case 6:  {
   $25 = HEAP32[600>>2]|0; //@line 3023 "../hsp3/hsp3code.cpp"
   $26 = (($25) + 796|0); //@line 3023 "../hsp3/hsp3code.cpp"
   $27 = HEAP32[$26>>2]|0; //@line 3023 "../hsp3/hsp3code.cpp"
   $28 = $4; //@line 3023 "../hsp3/hsp3code.cpp"
   $29 = $3; //@line 3023 "../hsp3/hsp3code.cpp"
   $30 = $2; //@line 3023 "../hsp3/hsp3code.cpp"
   $31 = (__Z8dpm_readPcPvii($27,$28,$29,$30)|0); //@line 3023 "../hsp3/hsp3code.cpp"
   $res = $31; //@line 3023 "../hsp3/hsp3code.cpp"
   $32 = $res; //@line 3024 "../hsp3/hsp3code.cpp"
   $33 = ($32|0)<(0); //@line 3024 "../hsp3/hsp3code.cpp"
   if ($33) {
    $34 = (___cxa_allocate_exception(4)|0); //@line 3024 "../hsp3/hsp3code.cpp"
    HEAP32[$34>>2] = 12; //@line 3024 "../hsp3/hsp3code.cpp"
    ___cxa_throw(($34|0),(624|0),(0|0)); //@line 3024 "../hsp3/hsp3code.cpp"
    // unreachable; //@line 3024 "../hsp3/hsp3code.cpp"
   } else {
    $35 = $res; //@line 3025 "../hsp3/hsp3code.cpp"
    $36 = HEAP32[600>>2]|0; //@line 3025 "../hsp3/hsp3code.cpp"
    $37 = (($36) + 788|0); //@line 3025 "../hsp3/hsp3code.cpp"
    HEAP32[$37>>2] = $35; //@line 3025 "../hsp3/hsp3code.cpp"
    break L5;
   }
   break;
  }
  case 11:  {
   $69 = HEAP32[600>>2]|0; //@line 3051 "../hsp3/hsp3code.cpp"
   $70 = (($69) + 796|0); //@line 3051 "../hsp3/hsp3code.cpp"
   $71 = HEAP32[$70>>2]|0; //@line 3051 "../hsp3/hsp3code.cpp"
   $72 = (__Z9changedirPc($71)|0); //@line 3051 "../hsp3/hsp3code.cpp"
   $73 = ($72|0)!=(0); //@line 3051 "../hsp3/hsp3code.cpp"
   if ($73) {
    $74 = (___cxa_allocate_exception(4)|0); //@line 3051 "../hsp3/hsp3code.cpp"
    HEAP32[$74>>2] = 12; //@line 3051 "../hsp3/hsp3code.cpp"
    ___cxa_throw(($74|0),(624|0),(0|0)); //@line 3051 "../hsp3/hsp3code.cpp"
    // unreachable; //@line 3051 "../hsp3/hsp3code.cpp"
   } else {
    break L5;
   }
   break;
  }
  default: {
  }
  }
 } while(0);
 $0 = 0; //@line 3080 "../hsp3/hsp3code.cpp"
 $94 = $0; //@line 3081 "../hsp3/hsp3code.cpp"
 STACKTOP = sp;return ($94|0); //@line 3081 "../hsp3/hsp3code.cpp"
}
function __ZL16hsp3typeinit_varP12HSP3TYPEINFO($info) {
 $info = $info|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $info;
 $1 = $0; //@line 2203 "../hsp3/hsp3code.cpp"
 $2 = (($1) + 12|0); //@line 2203 "../hsp3/hsp3code.cpp"
 HEAP32[$2>>2] = 58; //@line 2203 "../hsp3/hsp3code.cpp"
 STACKTOP = sp;return; //@line 2204 "../hsp3/hsp3code.cpp"
}
function __ZL17hsp3typeinit_progP12HSP3TYPEINFO($info) {
 $info = $info|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $info;
 $1 = $0; //@line 2208 "../hsp3/hsp3code.cpp"
 $2 = (($1) + 12|0); //@line 2208 "../hsp3/hsp3code.cpp"
 HEAP32[$2>>2] = 59; //@line 2208 "../hsp3/hsp3code.cpp"
 STACKTOP = sp;return; //@line 2209 "../hsp3/hsp3code.cpp"
}
function __ZL18hsp3typeinit_ifcmdP12HSP3TYPEINFO($info) {
 $info = $info|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $info;
 $1 = $0; //@line 2213 "../hsp3/hsp3code.cpp"
 $2 = (($1) + 12|0); //@line 2213 "../hsp3/hsp3code.cpp"
 HEAP32[$2>>2] = 60; //@line 2213 "../hsp3/hsp3code.cpp"
 STACKTOP = sp;return; //@line 2214 "../hsp3/hsp3code.cpp"
}
function __ZL19hsp3typeinit_sysvarP12HSP3TYPEINFO($info) {
 $info = $info|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $info;
 $1 = $0; //@line 2218 "../hsp3/hsp3code.cpp"
 $2 = (($1) + 16|0); //@line 2218 "../hsp3/hsp3code.cpp"
 HEAP32[$2>>2] = 61; //@line 2218 "../hsp3/hsp3code.cpp"
 STACKTOP = sp;return; //@line 2219 "../hsp3/hsp3code.cpp"
}
function __ZL19hsp3typeinit_customP12HSP3TYPEINFO($info) {
 $info = $info|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $info;
 $1 = $0; //@line 2223 "../hsp3/hsp3code.cpp"
 $2 = (($1) + 12|0); //@line 2223 "../hsp3/hsp3code.cpp"
 HEAP32[$2>>2] = 62; //@line 2223 "../hsp3/hsp3code.cpp"
 $3 = $0; //@line 2224 "../hsp3/hsp3code.cpp"
 $4 = (($3) + 16|0); //@line 2224 "../hsp3/hsp3code.cpp"
 HEAP32[$4>>2] = 63; //@line 2224 "../hsp3/hsp3code.cpp"
 STACKTOP = sp;return; //@line 2225 "../hsp3/hsp3code.cpp"
}
function __Z14code_enableirqii($id,$sw) {
 $id = $id|0;
 $sw = $sw|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $irq = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $id;
 $1 = $sw;
 $2 = $0; //@line 3115 "../hsp3/hsp3code.cpp"
 $3 = (__Z11code_getirqi($2)|0); //@line 3115 "../hsp3/hsp3code.cpp"
 $irq = $3; //@line 3115 "../hsp3/hsp3code.cpp"
 $4 = $1; //@line 3116 "../hsp3/hsp3code.cpp"
 $5 = ($4|0)==(0); //@line 3116 "../hsp3/hsp3code.cpp"
 if ($5) {
  $6 = $irq; //@line 3117 "../hsp3/hsp3code.cpp"
  HEAP16[$6>>1] = 1; //@line 3117 "../hsp3/hsp3code.cpp"
  STACKTOP = sp;return; //@line 3121 "../hsp3/hsp3code.cpp"
 } else {
  $7 = $irq; //@line 3119 "../hsp3/hsp3code.cpp"
  HEAP16[$7>>1] = 2; //@line 3119 "../hsp3/hsp3code.cpp"
  STACKTOP = sp;return; //@line 3121 "../hsp3/hsp3code.cpp"
 }
}
function __Z13code_dbgvaluei($type) {
 $type = $type|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $type;
 $1 = (__Z11code_inidbgv()|0); //@line 3597 "../hsp3/hsp3code.cpp"
 STACKTOP = sp;return ($1|0); //@line 3597 "../hsp3/hsp3code.cpp"
}
function __Z14code_dbgvarinfPci($target,$option) {
 $target = $target|0;
 $option = $option|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $id = 0, $max = 0;
 var $name = 0, $orgsize = 0, $p = 0, $padr = 0, $proc = 0, $pv = 0, $size = 0, $src = 0, $tmp = 0, $tmpbuf = 0, $vararg_buffer = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 592|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer = sp;
 $tmp = sp + 336|0;
 $size = sp + 20|0;
 $tmpbuf = sp + 80|0;
 $1 = $target;
 $2 = $option;
 (__Z11code_inidbgv()|0); //@line 3491 "../hsp3/hsp3code.cpp"
 $3 = HEAP32[600>>2]|0; //@line 3492 "../hsp3/hsp3code.cpp"
 $4 = HEAP32[$3>>2]|0; //@line 3492 "../hsp3/hsp3code.cpp"
 $5 = (($4) + 8|0); //@line 3492 "../hsp3/hsp3code.cpp"
 $6 = HEAP32[$5>>2]|0; //@line 3492 "../hsp3/hsp3code.cpp"
 $max = $6; //@line 3492 "../hsp3/hsp3code.cpp"
 $7 = $1; //@line 3494 "../hsp3/hsp3code.cpp"
 $8 = ($7|0)==(0|0); //@line 3494 "../hsp3/hsp3code.cpp"
 if ($8) {
  $i = 0; //@line 3495 "../hsp3/hsp3code.cpp"
  while(1) {
   $9 = $i; //@line 3495 "../hsp3/hsp3code.cpp"
   $10 = $max; //@line 3495 "../hsp3/hsp3code.cpp"
   $11 = ($9|0)<($10|0); //@line 3495 "../hsp3/hsp3code.cpp"
   if (!($11)) {
    break;
   }
   $12 = $i; //@line 3496 "../hsp3/hsp3code.cpp"
   $13 = (__Z21code_getdebug_varnamei($12)|0); //@line 3496 "../hsp3/hsp3code.cpp"
   $name = $13; //@line 3496 "../hsp3/hsp3code.cpp"
   $14 = $name; //@line 3497 "../hsp3/hsp3code.cpp"
   $15 = (__Z7strstr2PcS_($14,1096)|0); //@line 3497 "../hsp3/hsp3code.cpp"
   $16 = ($15|0)!=(0|0); //@line 3497 "../hsp3/hsp3code.cpp"
   if ($16) {
    $17 = $2; //@line 3498 "../hsp3/hsp3code.cpp"
    $18 = $17 & 2; //@line 3498 "../hsp3/hsp3code.cpp"
    $19 = ($18|0)!=(0); //@line 3498 "../hsp3/hsp3code.cpp"
    if (!($19)) {
     $name = 0; //@line 3498 "../hsp3/hsp3code.cpp"
    }
   }
   $20 = $name; //@line 3500 "../hsp3/hsp3code.cpp"
   $21 = ($20|0)!=(0|0); //@line 3500 "../hsp3/hsp3code.cpp"
   if ($21) {
    $22 = $name; //@line 3501 "../hsp3/hsp3code.cpp"
    __Z8sbStrAddPPcS_(1088,$22); //@line 3501 "../hsp3/hsp3code.cpp"
    __Z8sbStrAddPPcS_(1088,1064); //@line 3502 "../hsp3/hsp3code.cpp"
   }
   $23 = $i; //@line 3495 "../hsp3/hsp3code.cpp"
   $24 = (($23) + 1)|0; //@line 3495 "../hsp3/hsp3code.cpp"
   $i = $24; //@line 3495 "../hsp3/hsp3code.cpp"
  }
  $25 = HEAP32[1088>>2]|0; //@line 3505 "../hsp3/hsp3code.cpp"
  $0 = $25; //@line 3505 "../hsp3/hsp3code.cpp"
  $136 = $0; //@line 3568 "../hsp3/hsp3code.cpp"
  STACKTOP = sp;return ($136|0); //@line 3568 "../hsp3/hsp3code.cpp"
 }
 $id = 0; //@line 3508 "../hsp3/hsp3code.cpp"
 while(1) {
  $26 = $id; //@line 3510 "../hsp3/hsp3code.cpp"
  $27 = $max; //@line 3510 "../hsp3/hsp3code.cpp"
  $28 = ($26|0)>=($27|0); //@line 3510 "../hsp3/hsp3code.cpp"
  if ($28) {
   label = 15;
   break;
  }
  $29 = $id; //@line 3511 "../hsp3/hsp3code.cpp"
  $30 = (__Z21code_getdebug_varnamei($29)|0); //@line 3511 "../hsp3/hsp3code.cpp"
  $name = $30; //@line 3511 "../hsp3/hsp3code.cpp"
  $31 = $name; //@line 3512 "../hsp3/hsp3code.cpp"
  $32 = $1; //@line 3512 "../hsp3/hsp3code.cpp"
  $33 = (_strcmp($31,$32)|0); //@line 3512 "../hsp3/hsp3code.cpp"
  $34 = ($33|0)==(0); //@line 3512 "../hsp3/hsp3code.cpp"
  if ($34) {
   label = 17;
   break;
  }
  $35 = $id; //@line 3513 "../hsp3/hsp3code.cpp"
  $36 = (($35) + 1)|0; //@line 3513 "../hsp3/hsp3code.cpp"
  $id = $36; //@line 3513 "../hsp3/hsp3code.cpp"
 }
 if ((label|0) == 15) {
 }
 else if ((label|0) == 17) {
 }
 $37 = $id; //@line 3516 "../hsp3/hsp3code.cpp"
 $38 = HEAP32[600>>2]|0; //@line 3516 "../hsp3/hsp3code.cpp"
 $39 = (($38) + 44|0); //@line 3516 "../hsp3/hsp3code.cpp"
 $40 = HEAP32[$39>>2]|0; //@line 3516 "../hsp3/hsp3code.cpp"
 $41 = (($40) + (($37*48)|0)|0); //@line 3516 "../hsp3/hsp3code.cpp"
 $pv = $41; //@line 3516 "../hsp3/hsp3code.cpp"
 $42 = $pv; //@line 3517 "../hsp3/hsp3code.cpp"
 $43 = HEAP16[$42>>1]|0; //@line 3517 "../hsp3/hsp3code.cpp"
 $44 = $43 << 16 >> 16; //@line 3517 "../hsp3/hsp3code.cpp"
 $45 = HEAP32[3456>>2]|0; //@line 3517 "../hsp3/hsp3code.cpp"
 $46 = (($45) + (($44*140)|0)|0); //@line 3517 "../hsp3/hsp3code.cpp"
 $proc = $46; //@line 3517 "../hsp3/hsp3code.cpp"
 $47 = $name; //@line 3518 "../hsp3/hsp3code.cpp"
 __Z12code_adddbg2PcS_(1104,$47); //@line 3518 "../hsp3/hsp3code.cpp"
 $48 = $proc; //@line 3519 "../hsp3/hsp3code.cpp"
 $49 = (($48) + 12|0); //@line 3519 "../hsp3/hsp3code.cpp"
 $50 = HEAP32[$49>>2]|0; //@line 3519 "../hsp3/hsp3code.cpp"
 __Z12code_adddbg2PcS_(1112,$50); //@line 3519 "../hsp3/hsp3code.cpp"
 $51 = $pv; //@line 3520 "../hsp3/hsp3code.cpp"
 $52 = (($51) + 4|0); //@line 3520 "../hsp3/hsp3code.cpp"
 $53 = (($52) + 4|0); //@line 3520 "../hsp3/hsp3code.cpp"
 $54 = HEAP32[$53>>2]|0; //@line 3520 "../hsp3/hsp3code.cpp"
 $55 = $pv; //@line 3520 "../hsp3/hsp3code.cpp"
 $56 = (($55) + 4|0); //@line 3520 "../hsp3/hsp3code.cpp"
 $57 = (($56) + 8|0); //@line 3520 "../hsp3/hsp3code.cpp"
 $58 = HEAP32[$57>>2]|0; //@line 3520 "../hsp3/hsp3code.cpp"
 $59 = $pv; //@line 3520 "../hsp3/hsp3code.cpp"
 $60 = (($59) + 4|0); //@line 3520 "../hsp3/hsp3code.cpp"
 $61 = (($60) + 12|0); //@line 3520 "../hsp3/hsp3code.cpp"
 $62 = HEAP32[$61>>2]|0; //@line 3520 "../hsp3/hsp3code.cpp"
 $63 = $pv; //@line 3520 "../hsp3/hsp3code.cpp"
 $64 = (($63) + 4|0); //@line 3520 "../hsp3/hsp3code.cpp"
 $65 = (($64) + 16|0); //@line 3520 "../hsp3/hsp3code.cpp"
 $66 = HEAP32[$65>>2]|0; //@line 3520 "../hsp3/hsp3code.cpp"
 HEAP32[$vararg_buffer>>2] = $54; //@line 3520 "../hsp3/hsp3code.cpp"
 $vararg_ptr1 = (($vararg_buffer) + 4|0); //@line 3520 "../hsp3/hsp3code.cpp"
 HEAP32[$vararg_ptr1>>2] = $58; //@line 3520 "../hsp3/hsp3code.cpp"
 $vararg_ptr2 = (($vararg_buffer) + 8|0); //@line 3520 "../hsp3/hsp3code.cpp"
 HEAP32[$vararg_ptr2>>2] = $62; //@line 3520 "../hsp3/hsp3code.cpp"
 $vararg_ptr3 = (($vararg_buffer) + 12|0); //@line 3520 "../hsp3/hsp3code.cpp"
 HEAP32[$vararg_ptr3>>2] = $66; //@line 3520 "../hsp3/hsp3code.cpp"
 (_sprintf($tmp,1120,$vararg_buffer)|0); //@line 3520 "../hsp3/hsp3code.cpp"
 __Z12code_adddbg2PcS_(1136,$tmp); //@line 3521 "../hsp3/hsp3code.cpp"
 $67 = $pv; //@line 3522 "../hsp3/hsp3code.cpp"
 $68 = (($67) + 2|0); //@line 3522 "../hsp3/hsp3code.cpp"
 $69 = HEAP16[$68>>1]|0; //@line 3522 "../hsp3/hsp3code.cpp"
 $70 = $69 << 16 >> 16; //@line 3522 "../hsp3/hsp3code.cpp"
 __Z12code_adddbg2Pci(1144,$70); //@line 3522 "../hsp3/hsp3code.cpp"
 $71 = $pv; //@line 3523 "../hsp3/hsp3code.cpp"
 $72 = (($71) + 24|0); //@line 3523 "../hsp3/hsp3code.cpp"
 $73 = HEAP32[$72>>2]|0; //@line 3523 "../hsp3/hsp3code.cpp"
 __Z12code_adddbg2Pci(1152,$73); //@line 3523 "../hsp3/hsp3code.cpp"
 $74 = $pv; //@line 3525 "../hsp3/hsp3code.cpp"
 $75 = (($74) + 40|0); //@line 3525 "../hsp3/hsp3code.cpp"
 HEAP32[$75>>2] = 0; //@line 3525 "../hsp3/hsp3code.cpp"
 $76 = $pv; //@line 3525 "../hsp3/hsp3code.cpp"
 $77 = (($76) + 38|0); //@line 3525 "../hsp3/hsp3code.cpp"
 HEAP16[$77>>1] = 0; //@line 3525 "../hsp3/hsp3code.cpp"
 $78 = $proc; //@line 3526 "../hsp3/hsp3code.cpp"
 $79 = (($78) + 28|0); //@line 3526 "../hsp3/hsp3code.cpp"
 $80 = HEAP32[$79>>2]|0; //@line 3526 "../hsp3/hsp3code.cpp"
 $81 = $pv; //@line 3526 "../hsp3/hsp3code.cpp"
 $82 = (FUNCTION_TABLE_ii[$80 & 255]($81)|0); //@line 3526 "../hsp3/hsp3code.cpp"
 $src = $82; //@line 3526 "../hsp3/hsp3code.cpp"
 $83 = $proc; //@line 3527 "../hsp3/hsp3code.cpp"
 $84 = (($83) + 64|0); //@line 3527 "../hsp3/hsp3code.cpp"
 $85 = HEAP32[$84>>2]|0; //@line 3527 "../hsp3/hsp3code.cpp"
 $86 = $pv; //@line 3527 "../hsp3/hsp3code.cpp"
 $87 = $src; //@line 3527 "../hsp3/hsp3code.cpp"
 $88 = (FUNCTION_TABLE_iiii[$85 & 255]($86,$87,$size)|0); //@line 3527 "../hsp3/hsp3code.cpp"
 $padr = $88; //@line 3527 "../hsp3/hsp3code.cpp"
 $89 = HEAP32[$size>>2]|0; //@line 3528 "../hsp3/hsp3code.cpp"
 __Z12code_adddbg2Pci(1168,$89); //@line 3528 "../hsp3/hsp3code.cpp"
 $90 = $pv; //@line 3530 "../hsp3/hsp3code.cpp"
 $91 = HEAP16[$90>>1]|0; //@line 3530 "../hsp3/hsp3code.cpp"
 $92 = $91 << 16 >> 16; //@line 3530 "../hsp3/hsp3code.cpp"
 if ((($92|0) == 1)) {
  label = 27;
 } else if ((($92|0) == 4) | (($92|0) == 3) | (($92|0) == 2)) {
  $93 = $pv; //@line 3534 "../hsp3/hsp3code.cpp"
  $94 = HEAP16[$93>>1]|0; //@line 3534 "../hsp3/hsp3code.cpp"
  $95 = $94 << 16 >> 16; //@line 3534 "../hsp3/hsp3code.cpp"
  $96 = ($95|0)!=(2); //@line 3534 "../hsp3/hsp3code.cpp"
  if ($96) {
   $97 = HEAP32[3456>>2]|0; //@line 3535 "../hsp3/hsp3code.cpp"
   $98 = (($97) + 280|0); //@line 3535 "../hsp3/hsp3code.cpp"
   $99 = (($98) + 20|0); //@line 3535 "../hsp3/hsp3code.cpp"
   $100 = HEAP32[$99>>2]|0; //@line 3535 "../hsp3/hsp3code.cpp"
   $101 = $src; //@line 3535 "../hsp3/hsp3code.cpp"
   $102 = $pv; //@line 3535 "../hsp3/hsp3code.cpp"
   $103 = HEAP16[$102>>1]|0; //@line 3535 "../hsp3/hsp3code.cpp"
   $104 = $103 << 16 >> 16; //@line 3535 "../hsp3/hsp3code.cpp"
   $105 = (FUNCTION_TABLE_iii[$100 & 255]($101,$104)|0); //@line 3535 "../hsp3/hsp3code.cpp"
   $p = $105; //@line 3535 "../hsp3/hsp3code.cpp"
  } else {
   $106 = $padr; //@line 3537 "../hsp3/hsp3code.cpp"
   $p = $106; //@line 3537 "../hsp3/hsp3code.cpp"
  }
  $107 = $p; //@line 3539 "../hsp3/hsp3code.cpp"
  $108 = (_strlen(($107|0))|0); //@line 3539 "../hsp3/hsp3code.cpp"
  $orgsize = $108; //@line 3539 "../hsp3/hsp3code.cpp"
  $109 = $orgsize; //@line 3540 "../hsp3/hsp3code.cpp"
  $110 = ($109|0)>=(1024); //@line 3540 "../hsp3/hsp3code.cpp"
  if ($110) {
   $111 = HEAP32[600>>2]|0; //@line 3541 "../hsp3/hsp3code.cpp"
   $112 = (($111) + 824|0); //@line 3541 "../hsp3/hsp3code.cpp"
   $113 = HEAP32[$112>>2]|0; //@line 3541 "../hsp3/hsp3code.cpp"
   $114 = $p; //@line 3541 "../hsp3/hsp3code.cpp"
   (_strncpy(($113|0),($114|0),1023)|0); //@line 3541 "../hsp3/hsp3code.cpp"
   $115 = HEAP32[600>>2]|0; //@line 3542 "../hsp3/hsp3code.cpp"
   $116 = (($115) + 824|0); //@line 3542 "../hsp3/hsp3code.cpp"
   $117 = HEAP32[$116>>2]|0; //@line 3542 "../hsp3/hsp3code.cpp"
   $p = $117; //@line 3542 "../hsp3/hsp3code.cpp"
   $118 = $p; //@line 3542 "../hsp3/hsp3code.cpp"
   $119 = (($118) + 1023|0); //@line 3542 "../hsp3/hsp3code.cpp"
   HEAP8[$119>>0] = 0; //@line 3542 "../hsp3/hsp3code.cpp"
   $120 = $orgsize; //@line 3543 "../hsp3/hsp3code.cpp"
   HEAP32[$vararg_buffer4>>2] = $120; //@line 3543 "../hsp3/hsp3code.cpp"
   (_sprintf($tmp,1184,$vararg_buffer4)|0); //@line 3543 "../hsp3/hsp3code.cpp"
   __Z8sbStrAddPPcS_(1088,$tmp); //@line 3544 "../hsp3/hsp3code.cpp"
  }
  $121 = $p; //@line 3546 "../hsp3/hsp3code.cpp"
  __Z11code_adddbgPcS_(1224,$121); //@line 3546 "../hsp3/hsp3code.cpp"
 } else {
  label = 27;
 }
 if ((label|0) == 27) {
  $122 = $pv; //@line 3552 "../hsp3/hsp3code.cpp"
  $123 = $src; //@line 3552 "../hsp3/hsp3code.cpp"
  __ZL18code_dbgvarinf_extP4PValPvPc($122,$123,$tmpbuf); //@line 3552 "../hsp3/hsp3code.cpp"
  __Z11code_adddbgPcS_(1224,$tmpbuf); //@line 3553 "../hsp3/hsp3code.cpp"
 }
 $124 = $2; //@line 3558 "../hsp3/hsp3code.cpp"
 $125 = $124 & 4; //@line 3558 "../hsp3/hsp3code.cpp"
 $126 = ($125|0)!=(0); //@line 3558 "../hsp3/hsp3code.cpp"
 if ($126) {
  $127 = $pv; //@line 3559 "../hsp3/hsp3code.cpp"
  __ZL14code_arraydumpP4PVal($127); //@line 3559 "../hsp3/hsp3code.cpp"
 }
 $128 = $2; //@line 3561 "../hsp3/hsp3code.cpp"
 $129 = $128 & 8; //@line 3561 "../hsp3/hsp3code.cpp"
 $130 = ($129|0)!=(0); //@line 3561 "../hsp3/hsp3code.cpp"
 if ($130) {
  $131 = HEAP32[$size>>2]|0; //@line 3562 "../hsp3/hsp3code.cpp"
  $132 = ($131|0)>(4096); //@line 3562 "../hsp3/hsp3code.cpp"
  if ($132) {
   HEAP32[$size>>2] = 4096; //@line 3562 "../hsp3/hsp3code.cpp"
  }
  $133 = $padr; //@line 3563 "../hsp3/hsp3code.cpp"
  $134 = HEAP32[$size>>2]|0; //@line 3563 "../hsp3/hsp3code.cpp"
  __ZL12code_dbgdumpPKci($133,$134); //@line 3563 "../hsp3/hsp3code.cpp"
 }
 $135 = HEAP32[1088>>2]|0; //@line 3567 "../hsp3/hsp3code.cpp"
 $0 = $135; //@line 3567 "../hsp3/hsp3code.cpp"
 $136 = $0; //@line 3568 "../hsp3/hsp3code.cpp"
 STACKTOP = sp;return ($136|0); //@line 3568 "../hsp3/hsp3code.cpp"
}
function __Z13code_dbgclosePc($buf) {
 $buf = $buf|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $buf;
 $1 = HEAP32[1088>>2]|0; //@line 3584 "../hsp3/hsp3code.cpp"
 __Z6sbFreePv($1); //@line 3584 "../hsp3/hsp3code.cpp"
 STACKTOP = sp;return; //@line 3585 "../hsp3/hsp3code.cpp"
}
function __Z14code_dbgcurinfv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $bak = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = HEAP32[680>>2]|0; //@line 3574 "../hsp3/hsp3code.cpp"
 $bak = $0; //@line 3574 "../hsp3/hsp3code.cpp"
 $1 = HEAP32[688>>2]|0; //@line 3575 "../hsp3/hsp3code.cpp"
 HEAP32[680>>2] = $1; //@line 3575 "../hsp3/hsp3code.cpp"
 $2 = (__Z18code_getdebug_linev()|0); //@line 3576 "../hsp3/hsp3code.cpp"
 HEAP32[((968 + 4|0))>>2] = $2; //@line 3576 "../hsp3/hsp3code.cpp"
 $3 = (__Z18code_getdebug_namev()|0); //@line 3577 "../hsp3/hsp3code.cpp"
 HEAP32[((968 + 8|0))>>2] = $3; //@line 3577 "../hsp3/hsp3code.cpp"
 $4 = $bak; //@line 3578 "../hsp3/hsp3code.cpp"
 HEAP32[680>>2] = $4; //@line 3578 "../hsp3/hsp3code.cpp"
 STACKTOP = sp;return; //@line 3579 "../hsp3/hsp3code.cpp"
}
function __Z11code_dbgseti($id) {
 $id = $id|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $id;
 $2 = HEAP32[600>>2]|0; //@line 3605 "../hsp3/hsp3code.cpp"
 $3 = (($2) + 236|0); //@line 3605 "../hsp3/hsp3code.cpp"
 $4 = HEAP32[$3>>2]|0; //@line 3605 "../hsp3/hsp3code.cpp"
 do {
  if ((($4|0) == 3)) {
   $5 = $1; //@line 3607 "../hsp3/hsp3code.cpp"
   $6 = ($5|0)!=(2); //@line 3607 "../hsp3/hsp3code.cpp"
   if (!($6)) {
    break;
   }
   $7 = HEAP32[600>>2]|0; //@line 3608 "../hsp3/hsp3code.cpp"
   $8 = (($7) + 236|0); //@line 3608 "../hsp3/hsp3code.cpp"
   HEAP32[$8>>2] = 0; //@line 3608 "../hsp3/hsp3code.cpp"
   $9 = $1; //@line 3609 "../hsp3/hsp3code.cpp"
   $10 = ($9|0)==(1); //@line 3609 "../hsp3/hsp3code.cpp"
   if ($10) {
    HEAP32[960>>2] = 0; //@line 3610 "../hsp3/hsp3code.cpp"
   } else {
    $11 = $1; //@line 3612 "../hsp3/hsp3code.cpp"
    HEAP32[960>>2] = $11; //@line 3612 "../hsp3/hsp3code.cpp"
   }
   $0 = 0; //@line 3614 "../hsp3/hsp3code.cpp"
   $16 = $0; //@line 3626 "../hsp3/hsp3code.cpp"
   STACKTOP = sp;return ($16|0); //@line 3626 "../hsp3/hsp3code.cpp"
  } else if ((($4|0) == 2) | (($4|0) == 1)) {
   $12 = $1; //@line 3619 "../hsp3/hsp3code.cpp"
   $13 = ($12|0)==(2); //@line 3619 "../hsp3/hsp3code.cpp"
   if (!($13)) {
    break;
   }
   $14 = HEAP32[600>>2]|0; //@line 3620 "../hsp3/hsp3code.cpp"
   $15 = (($14) + 236|0); //@line 3620 "../hsp3/hsp3code.cpp"
   HEAP32[$15>>2] = 3; //@line 3620 "../hsp3/hsp3code.cpp"
   HEAP32[960>>2] = 0; //@line 3621 "../hsp3/hsp3code.cpp"
   $0 = 0; //@line 3622 "../hsp3/hsp3code.cpp"
   $16 = $0; //@line 3626 "../hsp3/hsp3code.cpp"
   STACKTOP = sp;return ($16|0); //@line 3626 "../hsp3/hsp3code.cpp"
  }
 } while(0);
 $0 = -1; //@line 3626 "../hsp3/hsp3code.cpp"
 $16 = $0; //@line 3626 "../hsp3/hsp3code.cpp"
 STACKTOP = sp;return ($16|0); //@line 3626 "../hsp3/hsp3code.cpp"
}
function __Z13code_termfuncv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $i = 0, $info = 0, $prmmax = 0, $pval = 0, $st = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $2 = HEAP32[600>>2]|0; //@line 2701 "../hsp3/hsp3code.cpp"
 $3 = HEAP32[$2>>2]|0; //@line 2701 "../hsp3/hsp3code.cpp"
 $4 = (($3) + 8|0); //@line 2701 "../hsp3/hsp3code.cpp"
 $5 = HEAP32[$4>>2]|0; //@line 2701 "../hsp3/hsp3code.cpp"
 $prmmax = $5; //@line 2701 "../hsp3/hsp3code.cpp"
 $6 = HEAP32[600>>2]|0; //@line 2702 "../hsp3/hsp3code.cpp"
 $7 = (($6) + 44|0); //@line 2702 "../hsp3/hsp3code.cpp"
 $8 = HEAP32[$7>>2]|0; //@line 2702 "../hsp3/hsp3code.cpp"
 $pval = $8; //@line 2702 "../hsp3/hsp3code.cpp"
 $i = 0; //@line 2703 "../hsp3/hsp3code.cpp"
 while(1) {
  $9 = $i; //@line 2703 "../hsp3/hsp3code.cpp"
  $10 = $prmmax; //@line 2703 "../hsp3/hsp3code.cpp"
  $11 = ($9|0)<($10|0); //@line 2703 "../hsp3/hsp3code.cpp"
  if (!($11)) {
   label = 14;
   break;
  }
  $12 = $pval; //@line 2704 "../hsp3/hsp3code.cpp"
  $13 = HEAP16[$12>>1]|0; //@line 2704 "../hsp3/hsp3code.cpp"
  $14 = $13 << 16 >> 16; //@line 2704 "../hsp3/hsp3code.cpp"
  $15 = ($14|0)==(5); //@line 2704 "../hsp3/hsp3code.cpp"
  if ($15) {
   $16 = $pval; //@line 2704 "../hsp3/hsp3code.cpp"
   __THREW__ = 0;
   invoke_vi(64,($16|0)); //@line 2704 "../hsp3/hsp3code.cpp"
   $17 = __THREW__; __THREW__ = 0;
   $18 = $17&1;
   if ($18) {
    label = 6;
    break;
   }
  }
  $32 = $pval; //@line 2705 "../hsp3/hsp3code.cpp"
  $33 = (($32) + 48|0); //@line 2705 "../hsp3/hsp3code.cpp"
  $pval = $33; //@line 2705 "../hsp3/hsp3code.cpp"
  $34 = $i; //@line 2703 "../hsp3/hsp3code.cpp"
  $35 = (($34) + 1)|0; //@line 2703 "../hsp3/hsp3code.cpp"
  $i = $35; //@line 2703 "../hsp3/hsp3code.cpp"
 }
 if ((label|0) == 6) {
  $19 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $20 = tempRet0;
  $0 = $19; //@line 2704 "../hsp3/hsp3code.cpp"
  $1 = $20; //@line 2704 "../hsp3/hsp3code.cpp"
  $21 = $0; //@line 2708 "../hsp3/hsp3code.cpp"
  (___cxa_begin_catch(($21|0))|0); //@line 2708 "../hsp3/hsp3code.cpp"
  ___cxa_end_catch(); //@line 2710 "../hsp3/hsp3code.cpp"
 }
 else if ((label|0) == 14) {
 }
 $22 = HEAP32[600>>2]|0; //@line 2718 "../hsp3/hsp3code.cpp"
 $23 = HEAP32[$22>>2]|0; //@line 2718 "../hsp3/hsp3code.cpp"
 $24 = (($23) + 60|0); //@line 2718 "../hsp3/hsp3code.cpp"
 $25 = HEAP32[$24>>2]|0; //@line 2718 "../hsp3/hsp3code.cpp"
 $26 = (($25>>>0) / 28)&-1; //@line 2718 "../hsp3/hsp3code.cpp"
 $prmmax = $26; //@line 2718 "../hsp3/hsp3code.cpp"
 $27 = $prmmax; //@line 2719 "../hsp3/hsp3code.cpp"
 $i = $27; //@line 2719 "../hsp3/hsp3code.cpp"
 while(1) {
  $28 = $i; //@line 2721 "../hsp3/hsp3code.cpp"
  $29 = (($28) + -1)|0; //@line 2721 "../hsp3/hsp3code.cpp"
  $i = $29; //@line 2721 "../hsp3/hsp3code.cpp"
  $30 = $i; //@line 2721 "../hsp3/hsp3code.cpp"
  $31 = ($30|0)<(0); //@line 2721 "../hsp3/hsp3code.cpp"
  if ($31) {
   label = 11;
   break;
  }
  $36 = $i; //@line 2722 "../hsp3/hsp3code.cpp"
  $37 = HEAP32[600>>2]|0; //@line 2722 "../hsp3/hsp3code.cpp"
  $38 = (($37) + 840|0); //@line 2722 "../hsp3/hsp3code.cpp"
  $39 = HEAP32[$38>>2]|0; //@line 2722 "../hsp3/hsp3code.cpp"
  $40 = (($39) + (($36*28)|0)|0); //@line 2722 "../hsp3/hsp3code.cpp"
  $st = $40; //@line 2722 "../hsp3/hsp3code.cpp"
  $41 = $st; //@line 2723 "../hsp3/hsp3code.cpp"
  $42 = HEAP16[$41>>1]|0; //@line 2723 "../hsp3/hsp3code.cpp"
  $43 = $42 << 16 >> 16; //@line 2723 "../hsp3/hsp3code.cpp"
  $44 = ($43|0)==(-1); //@line 2723 "../hsp3/hsp3code.cpp"
  if ($44) {
   $45 = $st; //@line 2723 "../hsp3/hsp3code.cpp"
   $46 = (($45) + 24|0); //@line 2723 "../hsp3/hsp3code.cpp"
   $47 = HEAP32[$46>>2]|0; //@line 2723 "../hsp3/hsp3code.cpp"
   $48 = $47 & 65536; //@line 2723 "../hsp3/hsp3code.cpp"
   $49 = ($48|0)!=(0); //@line 2723 "../hsp3/hsp3code.cpp"
   if ($49) {
    $50 = $i; //@line 2724 "../hsp3/hsp3code.cpp"
    __THREW__ = 0;
    (invoke_ii(65,($50|0))|0); //@line 2724 "../hsp3/hsp3code.cpp"
    $51 = __THREW__; __THREW__ = 0;
    $52 = $51&1;
    if ($52) {
     label = 19;
     break;
    }
   }
  }
 }
 if ((label|0) == 11) {
 }
 else if ((label|0) == 19) {
  $53 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $54 = tempRet0;
  $0 = $53; //@line 2724 "../hsp3/hsp3code.cpp"
  $1 = $54; //@line 2724 "../hsp3/hsp3code.cpp"
  $55 = $0; //@line 2728 "../hsp3/hsp3code.cpp"
  (___cxa_begin_catch(($55|0))|0); //@line 2728 "../hsp3/hsp3code.cpp"
  ___cxa_end_catch(); //@line 2730 "../hsp3/hsp3code.cpp"
 }
 $56 = HEAP32[712>>2]|0; //@line 2735 "../hsp3/hsp3code.cpp"
 $57 = (($56) - 1)|0; //@line 2735 "../hsp3/hsp3code.cpp"
 $i = $57; //@line 2735 "../hsp3/hsp3code.cpp"
 while(1) {
  $58 = $i; //@line 2735 "../hsp3/hsp3code.cpp"
  $59 = ($58|0)>=(0); //@line 2735 "../hsp3/hsp3code.cpp"
  if (!($59)) {
   break;
  }
  $60 = $i; //@line 2736 "../hsp3/hsp3code.cpp"
  $61 = HEAP32[672>>2]|0; //@line 2736 "../hsp3/hsp3code.cpp"
  $62 = (($61) + ($60<<5)|0); //@line 2736 "../hsp3/hsp3code.cpp"
  $info = $62; //@line 2736 "../hsp3/hsp3code.cpp"
  $63 = $info; //@line 2737 "../hsp3/hsp3code.cpp"
  $64 = (($63) + 20|0); //@line 2737 "../hsp3/hsp3code.cpp"
  $65 = HEAP32[$64>>2]|0; //@line 2737 "../hsp3/hsp3code.cpp"
  $66 = ($65|0)!=(0|0); //@line 2737 "../hsp3/hsp3code.cpp"
  if ($66) {
   $67 = $info; //@line 2737 "../hsp3/hsp3code.cpp"
   $68 = (($67) + 20|0); //@line 2737 "../hsp3/hsp3code.cpp"
   $69 = HEAP32[$68>>2]|0; //@line 2737 "../hsp3/hsp3code.cpp"
   (FUNCTION_TABLE_ii[$69 & 255](0)|0); //@line 2737 "../hsp3/hsp3code.cpp"
  }
  $70 = $i; //@line 2735 "../hsp3/hsp3code.cpp"
  $71 = (($70) + -1)|0; //@line 2735 "../hsp3/hsp3code.cpp"
  $i = $71; //@line 2735 "../hsp3/hsp3code.cpp"
 }
 STACKTOP = sp;return; //@line 2740 "../hsp3/hsp3code.cpp"
}
function __Z8code_byev() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __Z13HspVarCoreByev(); //@line 2747 "../hsp3/hsp3code.cpp"
 $0 = HEAP32[600>>2]|0; //@line 2751 "../hsp3/hsp3code.cpp"
 $1 = (($0) + 24|0); //@line 2751 "../hsp3/hsp3code.cpp"
 $2 = HEAP32[$1>>2]|0; //@line 2751 "../hsp3/hsp3code.cpp"
 $3 = ($2|0)!=(0|0); //@line 2751 "../hsp3/hsp3code.cpp"
 if ($3) {
  $4 = HEAP32[600>>2]|0; //@line 2751 "../hsp3/hsp3code.cpp"
  $5 = (($4) + 24|0); //@line 2751 "../hsp3/hsp3code.cpp"
  $6 = HEAP32[$5>>2]|0; //@line 2751 "../hsp3/hsp3code.cpp"
  __Z6sbFreePv($6); //@line 2751 "../hsp3/hsp3code.cpp"
 }
 $7 = HEAP32[600>>2]|0; //@line 2753 "../hsp3/hsp3code.cpp"
 $8 = (($7) + 872|0); //@line 2753 "../hsp3/hsp3code.cpp"
 $9 = HEAP32[$8>>2]|0; //@line 2753 "../hsp3/hsp3code.cpp"
 __Z6sbFreePv($9); //@line 2753 "../hsp3/hsp3code.cpp"
 $10 = HEAP32[600>>2]|0; //@line 2754 "../hsp3/hsp3code.cpp"
 $11 = (($10) + 824|0); //@line 2754 "../hsp3/hsp3code.cpp"
 $12 = HEAP32[$11>>2]|0; //@line 2754 "../hsp3/hsp3code.cpp"
 __Z6sbFreePv($12); //@line 2754 "../hsp3/hsp3code.cpp"
 $13 = HEAP32[600>>2]|0; //@line 2755 "../hsp3/hsp3code.cpp"
 $14 = (($13) + 796|0); //@line 2755 "../hsp3/hsp3code.cpp"
 $15 = HEAP32[$14>>2]|0; //@line 2755 "../hsp3/hsp3code.cpp"
 __Z6sbFreePv($15); //@line 2755 "../hsp3/hsp3code.cpp"
 $16 = HEAP32[600>>2]|0; //@line 2756 "../hsp3/hsp3code.cpp"
 $17 = (($16) + 792|0); //@line 2756 "../hsp3/hsp3code.cpp"
 $18 = HEAP32[$17>>2]|0; //@line 2756 "../hsp3/hsp3code.cpp"
 __Z6sbFreePv($18); //@line 2756 "../hsp3/hsp3code.cpp"
 $19 = HEAP32[672>>2]|0; //@line 2758 "../hsp3/hsp3code.cpp"
 __Z6sbFreePv($19); //@line 2758 "../hsp3/hsp3code.cpp"
 __Z9StackTermv(); //@line 2759 "../hsp3/hsp3code.cpp"
 __Z5sbByev(); //@line 2760 "../hsp3/hsp3code.cpp"
 STACKTOP = sp;return; //@line 2761 "../hsp3/hsp3code.cpp"
}
function __Z13code_dbgtracev() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = HEAP32[((968 + 4|0))>>2]|0; //@line 3635 "../hsp3/hsp3code.cpp"
 $i = $0; //@line 3635 "../hsp3/hsp3code.cpp"
 __Z14code_dbgcurinfv(); //@line 3636 "../hsp3/hsp3code.cpp"
 $1 = $i; //@line 3637 "../hsp3/hsp3code.cpp"
 $2 = HEAP32[((968 + 4|0))>>2]|0; //@line 3637 "../hsp3/hsp3code.cpp"
 $3 = ($1|0)!=($2|0); //@line 3637 "../hsp3/hsp3code.cpp"
 if (!($3)) {
  STACKTOP = sp;return; //@line 3641 "../hsp3/hsp3code.cpp"
 }
 $4 = HEAP32[600>>2]|0; //@line 3638 "../hsp3/hsp3code.cpp"
 $5 = (($4) + 236|0); //@line 3638 "../hsp3/hsp3code.cpp"
 HEAP32[$5>>2] = 3; //@line 3638 "../hsp3/hsp3code.cpp"
 $6 = HEAP32[600>>2]|0; //@line 3639 "../hsp3/hsp3code.cpp"
 $7 = (($6) + 852|0); //@line 3639 "../hsp3/hsp3code.cpp"
 $8 = HEAP32[$7>>2]|0; //@line 3639 "../hsp3/hsp3code.cpp"
 $9 = HEAP32[600>>2]|0; //@line 3639 "../hsp3/hsp3code.cpp"
 FUNCTION_TABLE_vi[$8 & 255]($9); //@line 3639 "../hsp3/hsp3code.cpp"
 STACKTOP = sp;return; //@line 3641 "../hsp3/hsp3code.cpp"
}
function __ZL14cmdfunc_returnv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $r = 0, $stm = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = HEAP32[4016>>2]|0; //@line 1115 "../hsp3/hsp3code.cpp"
 $1 = HEAP32[4008>>2]|0; //@line 1115 "../hsp3/hsp3code.cpp"
 $2 = $0; //@line 1115 "../hsp3/hsp3code.cpp"
 $3 = $1; //@line 1115 "../hsp3/hsp3code.cpp"
 $4 = (($2) - ($3))|0; //@line 1115 "../hsp3/hsp3code.cpp"
 $5 = (($4|0) / 72)&-1; //@line 1115 "../hsp3/hsp3code.cpp"
 $6 = ($5|0)==(0); //@line 1115 "../hsp3/hsp3code.cpp"
 if ($6) {
  $7 = (___cxa_allocate_exception(4)|0); //@line 1115 "../hsp3/hsp3code.cpp"
  HEAP32[$7>>2] = 10; //@line 1115 "../hsp3/hsp3code.cpp"
  ___cxa_throw(($7|0),(624|0),(0|0)); //@line 1115 "../hsp3/hsp3code.cpp"
  // unreachable; //@line 1115 "../hsp3/hsp3code.cpp"
 }
 $8 = HEAP32[4016>>2]|0; //@line 1117 "../hsp3/hsp3code.cpp"
 $9 = (($8) + -72|0); //@line 1117 "../hsp3/hsp3code.cpp"
 $stm = $9; //@line 1117 "../hsp3/hsp3code.cpp"
 $10 = $stm; //@line 1118 "../hsp3/hsp3code.cpp"
 $11 = (($10) + 4|0); //@line 1118 "../hsp3/hsp3code.cpp"
 $12 = HEAP32[$11>>2]|0; //@line 1118 "../hsp3/hsp3code.cpp"
 $r = $12; //@line 1118 "../hsp3/hsp3code.cpp"
 $13 = $stm; //@line 1120 "../hsp3/hsp3code.cpp"
 $14 = HEAP16[$13>>1]|0; //@line 1120 "../hsp3/hsp3code.cpp"
 $15 = $14 << 16 >> 16; //@line 1120 "../hsp3/hsp3code.cpp"
 $16 = ($15|0)==(257); //@line 1120 "../hsp3/hsp3code.cpp"
 if ($16) {
  $17 = $r; //@line 1121 "../hsp3/hsp3code.cpp"
  $18 = (($17) + 8|0); //@line 1121 "../hsp3/hsp3code.cpp"
  $19 = HEAP32[$18>>2]|0; //@line 1121 "../hsp3/hsp3code.cpp"
  $20 = $r; //@line 1121 "../hsp3/hsp3code.cpp"
  $21 = (($20) + 20|0); //@line 1121 "../hsp3/hsp3code.cpp"
  __ZL18customstack_deleteP9STRUCTDATPc($19,$21); //@line 1121 "../hsp3/hsp3code.cpp"
 }
 $22 = $r; //@line 1124 "../hsp3/hsp3code.cpp"
 $23 = (($22) + 4|0); //@line 1124 "../hsp3/hsp3code.cpp"
 $24 = HEAP32[$23>>2]|0; //@line 1124 "../hsp3/hsp3code.cpp"
 HEAP32[688>>2] = $24; //@line 1124 "../hsp3/hsp3code.cpp"
 $25 = $r; //@line 1125 "../hsp3/hsp3code.cpp"
 $26 = (($25) + 12|0); //@line 1125 "../hsp3/hsp3code.cpp"
 $27 = HEAP32[$26>>2]|0; //@line 1125 "../hsp3/hsp3code.cpp"
 $28 = HEAP32[600>>2]|0; //@line 1125 "../hsp3/hsp3code.cpp"
 $29 = (($28) + 828|0); //@line 1125 "../hsp3/hsp3code.cpp"
 HEAP32[$29>>2] = $27; //@line 1125 "../hsp3/hsp3code.cpp"
 $30 = HEAP32[600>>2]|0; //@line 1127 "../hsp3/hsp3code.cpp"
 $31 = (($30) + 256|0); //@line 1127 "../hsp3/hsp3code.cpp"
 $32 = HEAP32[$31>>2]|0; //@line 1127 "../hsp3/hsp3code.cpp"
 $33 = (($32) + -1)|0; //@line 1127 "../hsp3/hsp3code.cpp"
 HEAP32[$31>>2] = $33; //@line 1127 "../hsp3/hsp3code.cpp"
 __Z9code_nextv(); //@line 1128 "../hsp3/hsp3code.cpp"
 __Z8StackPopv(); //@line 1130 "../hsp3/hsp3code.cpp"
 STACKTOP = sp;return; //@line 1131 "../hsp3/hsp3code.cpp"
}
function __Z10code_isirqi($id) {
 $id = $id|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $id;
 $2 = $1; //@line 3141 "../hsp3/hsp3code.cpp"
 $3 = HEAP32[600>>2]|0; //@line 3141 "../hsp3/hsp3code.cpp"
 $4 = (($3) + 24|0); //@line 3141 "../hsp3/hsp3code.cpp"
 $5 = HEAP32[$4>>2]|0; //@line 3141 "../hsp3/hsp3code.cpp"
 $6 = (($5) + (($2*24)|0)|0); //@line 3141 "../hsp3/hsp3code.cpp"
 $7 = HEAP16[$6>>1]|0; //@line 3141 "../hsp3/hsp3code.cpp"
 $8 = $7 << 16 >> 16; //@line 3141 "../hsp3/hsp3code.cpp"
 $9 = ($8|0)!=(2); //@line 3141 "../hsp3/hsp3code.cpp"
 if ($9) {
  $0 = 0; //@line 3141 "../hsp3/hsp3code.cpp"
  $10 = $0; //@line 3142 "../hsp3/hsp3code.cpp"
  STACKTOP = sp;return ($10|0); //@line 3142 "../hsp3/hsp3code.cpp"
 } else {
  $0 = 1; //@line 3142 "../hsp3/hsp3code.cpp"
  $10 = $0; //@line 3142 "../hsp3/hsp3code.cpp"
  STACKTOP = sp;return ($10|0); //@line 3142 "../hsp3/hsp3code.cpp"
 }
 return 0|0;
}
function __Z12code_sendirqiiii($id,$iparam,$wparam,$lparam) {
 $id = $id|0;
 $iparam = $iparam|0;
 $wparam = $wparam|0;
 $lparam = $lparam|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $irq = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $id;
 $1 = $iparam;
 $2 = $wparam;
 $3 = $lparam;
 $4 = $0; //@line 3151 "../hsp3/hsp3code.cpp"
 $5 = (__Z11code_getirqi($4)|0); //@line 3151 "../hsp3/hsp3code.cpp"
 $irq = $5; //@line 3151 "../hsp3/hsp3code.cpp"
 $6 = $1; //@line 3152 "../hsp3/hsp3code.cpp"
 $7 = $irq; //@line 3152 "../hsp3/hsp3code.cpp"
 $8 = (($7) + 12|0); //@line 3152 "../hsp3/hsp3code.cpp"
 HEAP32[$8>>2] = $6; //@line 3152 "../hsp3/hsp3code.cpp"
 $9 = $2; //@line 3153 "../hsp3/hsp3code.cpp"
 $10 = $3; //@line 3153 "../hsp3/hsp3code.cpp"
 $11 = $irq; //@line 3153 "../hsp3/hsp3code.cpp"
 (__Z10code_eventiiiPv(2,$9,$10,$11)|0); //@line 3153 "../hsp3/hsp3code.cpp"
 $12 = HEAP32[600>>2]|0; //@line 3154 "../hsp3/hsp3code.cpp"
 $13 = (($12) + 236|0); //@line 3154 "../hsp3/hsp3code.cpp"
 $14 = HEAP32[$13>>2]|0; //@line 3154 "../hsp3/hsp3code.cpp"
 STACKTOP = sp;return ($14|0); //@line 3154 "../hsp3/hsp3code.cpp"
}
function __Z16code_execcmd_oneRi($prev) {
 $prev = $prev|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $cleanup$dest = 0, $code = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = $prev;
 $5 = HEAP32[600>>2]|0; //@line 2851 "../hsp3/hsp3code.cpp"
 $6 = (($5) + 848|0); //@line 2851 "../hsp3/hsp3code.cpp"
 HEAP32[$6>>2] = 0; //@line 2851 "../hsp3/hsp3code.cpp"
 L1: while(1) {
  $7 = $1; //@line 2854 "../hsp3/hsp3code.cpp"
  $8 = HEAP32[$7>>2]|0; //@line 2854 "../hsp3/hsp3code.cpp"
  $9 = ($8|0)==(0); //@line 2854 "../hsp3/hsp3code.cpp"
  if ($9) {
   $10 = HEAP32[600>>2]|0; //@line 2855 "../hsp3/hsp3code.cpp"
   $11 = (($10) + 772|0); //@line 2855 "../hsp3/hsp3code.cpp"
   HEAP32[$11>>2] = 0; //@line 2855 "../hsp3/hsp3code.cpp"
   $12 = HEAP32[600>>2]|0; //@line 2856 "../hsp3/hsp3code.cpp"
   $13 = (($12) + 256|0); //@line 2856 "../hsp3/hsp3code.cpp"
   HEAP32[$13>>2] = 0; //@line 2856 "../hsp3/hsp3code.cpp"
   __Z10StackResetv(); //@line 2857 "../hsp3/hsp3code.cpp"
   $14 = $1; //@line 2858 "../hsp3/hsp3code.cpp"
   HEAP32[$14>>2] = 1; //@line 2858 "../hsp3/hsp3code.cpp"
  }
  $15 = HEAP32[960>>2]|0; //@line 2873 "../hsp3/hsp3code.cpp"
  $16 = ($15|0)!=(0); //@line 2873 "../hsp3/hsp3code.cpp"
  if ($16) {
   __THREW__ = 0;
   invoke_v(66); //@line 2873 "../hsp3/hsp3code.cpp"
   $17 = __THREW__; __THREW__ = 0;
   $18 = $17&1;
   if (!($18)) {
    label = 12;
   }
  } else {
   label = 12;
  }
  do {
   if ((label|0) == 12) {
    label = 0;
    $32 = HEAP32[640>>2]|0; //@line 2876 "../hsp3/hsp3code.cpp"
    $33 = HEAP32[672>>2]|0; //@line 2876 "../hsp3/hsp3code.cpp"
    $34 = (($33) + ($32<<5)|0); //@line 2876 "../hsp3/hsp3code.cpp"
    $35 = (($34) + 12|0); //@line 2876 "../hsp3/hsp3code.cpp"
    $36 = HEAP32[$35>>2]|0; //@line 2876 "../hsp3/hsp3code.cpp"
    $37 = HEAP32[648>>2]|0; //@line 2876 "../hsp3/hsp3code.cpp"
    __THREW__ = 0;
    $38 = (invoke_ii($36|0,($37|0))|0); //@line 2876 "../hsp3/hsp3code.cpp"
    $39 = __THREW__; __THREW__ = 0;
    $40 = $39&1;
    if (!($40)) {
     $41 = ($38|0)!=(0); //@line 2876 "../hsp3/hsp3code.cpp"
     if (!($41)) {
      break L1;
     }
     $42 = HEAP32[600>>2]|0; //@line 2877 "../hsp3/hsp3code.cpp"
     $43 = (($42) + 236|0); //@line 2877 "../hsp3/hsp3code.cpp"
     $44 = HEAP32[$43>>2]|0; //@line 2877 "../hsp3/hsp3code.cpp"
     $45 = ($44|0)==(6); //@line 2877 "../hsp3/hsp3code.cpp"
     if ($45) {
      __THREW__ = 0;
      invoke_v(67); //@line 2878 "../hsp3/hsp3code.cpp"
      $46 = __THREW__; __THREW__ = 0;
      $47 = $46&1;
      if ($47) {
       break;
      } else {
       label = 16;
       break L1;
      }
     } else {
      $48 = HEAP32[600>>2]|0; //@line 2880 "../hsp3/hsp3code.cpp"
      $49 = (($48) + 852|0); //@line 2880 "../hsp3/hsp3code.cpp"
      $50 = HEAP32[$49>>2]|0; //@line 2880 "../hsp3/hsp3code.cpp"
      $51 = HEAP32[600>>2]|0; //@line 2880 "../hsp3/hsp3code.cpp"
      __THREW__ = 0;
      invoke_vi($50|0,($51|0)); //@line 2880 "../hsp3/hsp3code.cpp"
      $52 = __THREW__; __THREW__ = 0;
      $53 = $52&1;
      if ($53) {
       break;
      } else {
       label = 18;
       break L1;
      }
     }
    }
   }
  } while(0);
  $19 = ___cxa_find_matching_catch(-1,-1,624|0,0|0)|0;
  $20 = tempRet0;
  $2 = $19; //@line 2873 "../hsp3/hsp3code.cpp"
  $3 = $20; //@line 2873 "../hsp3/hsp3code.cpp"
  $21 = $3; //@line 2891 "../hsp3/hsp3code.cpp"
  $22 = (_llvm_eh_typeid_for((624|0))|0); //@line 2891 "../hsp3/hsp3code.cpp"
  $23 = ($21|0)==($22|0); //@line 2891 "../hsp3/hsp3code.cpp"
  if (!($23)) {
   label = 11;
   break;
  }
  $24 = $2; //@line 2921 "../hsp3/hsp3code.cpp"
  $25 = (___cxa_begin_catch(($24|0))|0); //@line 2921 "../hsp3/hsp3code.cpp"
  $26 = HEAP32[$25>>2]|0; //@line 2921 "../hsp3/hsp3code.cpp"
  $code = $26; //@line 2921 "../hsp3/hsp3code.cpp"
  $27 = $code; //@line 2895 "../hsp3/hsp3code.cpp"
  $28 = ($27|0)==(0); //@line 2895 "../hsp3/hsp3code.cpp"
  L19: do {
   if ($28) {
    $i = 4; //@line 2896 "../hsp3/hsp3code.cpp"
    label = 38;
   } else {
    $58 = $code; //@line 2897 "../hsp3/hsp3code.cpp"
    $59 = ($58|0)==(42); //@line 2897 "../hsp3/hsp3code.cpp"
    if ($59) {
     $4 = 2;
     break;
    }
    $60 = $code; //@line 2899 "../hsp3/hsp3code.cpp"
    $61 = ($60|0)==(43); //@line 2899 "../hsp3/hsp3code.cpp"
    do {
     if ($61) {
      $i = 10; //@line 2900 "../hsp3/hsp3code.cpp"
     } else {
      $i = 5; //@line 2902 "../hsp3/hsp3code.cpp"
      $62 = $code; //@line 2903 "../hsp3/hsp3code.cpp"
      $63 = HEAP32[600>>2]|0; //@line 2903 "../hsp3/hsp3code.cpp"
      $64 = (($63) + 776|0); //@line 2903 "../hsp3/hsp3code.cpp"
      HEAP32[$64>>2] = $62; //@line 2903 "../hsp3/hsp3code.cpp"
      $65 = $i; //@line 2904 "../hsp3/hsp3code.cpp"
      $66 = HEAP32[600>>2]|0; //@line 2904 "../hsp3/hsp3code.cpp"
      $67 = (($66) + 236|0); //@line 2904 "../hsp3/hsp3code.cpp"
      HEAP32[$67>>2] = $65; //@line 2904 "../hsp3/hsp3code.cpp"
      __THREW__ = 0;
      $68 = (invoke_ii(68,1)|0); //@line 2905 "../hsp3/hsp3code.cpp"
      $69 = __THREW__; __THREW__ = 0;
      $70 = $69&1;
      if ($70) {
       label = 33;
       break L1;
      }
      $71 = ($68|0)!=(0); //@line 2905 "../hsp3/hsp3code.cpp"
      if (!($71)) {
       break;
      }
      $72 = $code; //@line 2906 "../hsp3/hsp3code.cpp"
      __THREW__ = 0;
      $73 = (invoke_i(69)|0); //@line 2906 "../hsp3/hsp3code.cpp"
      $74 = __THREW__; __THREW__ = 0;
      $75 = $74&1;
      if ($75) {
       label = 33;
       break L1;
      }
      __THREW__ = 0;
      (invoke_iiiii(70,1,0,($72|0),($73|0))|0); //@line 2906 "../hsp3/hsp3code.cpp"
      $76 = __THREW__; __THREW__ = 0;
      $77 = $76&1;
      if ($77) {
       label = 33;
       break L1;
      }
      $78 = HEAP32[600>>2]|0; //@line 2907 "../hsp3/hsp3code.cpp"
      $79 = (($78) + 236|0); //@line 2907 "../hsp3/hsp3code.cpp"
      $80 = HEAP32[$79>>2]|0; //@line 2907 "../hsp3/hsp3code.cpp"
      $81 = $i; //@line 2907 "../hsp3/hsp3code.cpp"
      $82 = ($80|0)!=($81|0); //@line 2907 "../hsp3/hsp3code.cpp"
      if ($82) {
       $83 = $1; //@line 2908 "../hsp3/hsp3code.cpp"
       HEAP32[$83>>2] = 0; //@line 2908 "../hsp3/hsp3code.cpp"
       $0 = 0; //@line 2909 "../hsp3/hsp3code.cpp"
       $4 = 1;
       break L19;
      } else {
       $86 = $i; //@line 2911 "../hsp3/hsp3code.cpp"
       $0 = $86; //@line 2911 "../hsp3/hsp3code.cpp"
       $4 = 1;
       break L19;
      }
     }
    } while(0);
    label = 38;
   }
  } while(0);
  if ((label|0) == 38) {
   label = 0;
   $4 = 0; //@line 2914 "../hsp3/hsp3code.cpp"
  }
  ___cxa_end_catch(); //@line 2914 "../hsp3/hsp3code.cpp"
  $cleanup$dest = $4;
  if ((($cleanup$dest|0) == 0)) {
   label = 40;
   break;
  } else if ((($cleanup$dest|0) == 1)) {
   label = 42;
   break;
  } else if (!((($cleanup$dest|0) == 2))) {
   label = 44;
   break;
  }
 }
 if ((label|0) == 11) {
  $29 = $2; //@line 2891 "../hsp3/hsp3code.cpp"
  (___cxa_begin_catch(($29|0))|0); //@line 2891 "../hsp3/hsp3code.cpp"
  $30 = HEAP32[600>>2]|0; //@line 2919 "../hsp3/hsp3code.cpp"
  $31 = (($30) + 776|0); //@line 2919 "../hsp3/hsp3code.cpp"
  HEAP32[$31>>2] = 1; //@line 2919 "../hsp3/hsp3code.cpp"
  $0 = 5; //@line 2920 "../hsp3/hsp3code.cpp"
  $4 = 1;
  ___cxa_end_catch(); //@line 2921 "../hsp3/hsp3code.cpp"
  $91 = $0; //@line 2925 "../hsp3/hsp3code.cpp"
  STACKTOP = sp;return ($91|0); //@line 2925 "../hsp3/hsp3code.cpp"
 }
 else if ((label|0) == 16) {
  label = 19;
 }
 else if ((label|0) == 18) {
  label = 19;
 }
 else if ((label|0) == 33) {
  $84 = ___cxa_find_matching_catch(-1,-1)|0;
  $85 = tempRet0;
  $2 = $84; //@line 2905 "../hsp3/hsp3code.cpp"
  $3 = $85; //@line 2905 "../hsp3/hsp3code.cpp"
  ___cxa_end_catch(); //@line 2914 "../hsp3/hsp3code.cpp"
  $92 = $2; //@line 2914 "../hsp3/hsp3code.cpp"
  $93 = $3; //@line 2914 "../hsp3/hsp3code.cpp"
  ___resumeException($92|0);
  // unreachable;
 }
 else if ((label|0) == 40) {
  $87 = $i; //@line 2923 "../hsp3/hsp3code.cpp"
  $88 = HEAP32[600>>2]|0; //@line 2923 "../hsp3/hsp3code.cpp"
  $89 = (($88) + 236|0); //@line 2923 "../hsp3/hsp3code.cpp"
  HEAP32[$89>>2] = $87; //@line 2923 "../hsp3/hsp3code.cpp"
  $90 = $i; //@line 2924 "../hsp3/hsp3code.cpp"
  $0 = $90; //@line 2924 "../hsp3/hsp3code.cpp"
  $91 = $0; //@line 2925 "../hsp3/hsp3code.cpp"
  STACKTOP = sp;return ($91|0); //@line 2925 "../hsp3/hsp3code.cpp"
 }
 else if ((label|0) == 42) {
  $91 = $0; //@line 2925 "../hsp3/hsp3code.cpp"
  STACKTOP = sp;return ($91|0); //@line 2925 "../hsp3/hsp3code.cpp"
 }
 else if ((label|0) == 44) {
  // unreachable;
 }
 do {
  if ((label|0) == 19) {
   $54 = HEAP32[600>>2]|0; //@line 2882 "../hsp3/hsp3code.cpp"
   $55 = (($54) + 236|0); //@line 2882 "../hsp3/hsp3code.cpp"
   $56 = HEAP32[$55>>2]|0; //@line 2882 "../hsp3/hsp3code.cpp"
   $57 = ($56|0)==(4); //@line 2882 "../hsp3/hsp3code.cpp"
   if (!($57)) {
    break;
   }
   $0 = 4; //@line 2883 "../hsp3/hsp3code.cpp"
   $91 = $0; //@line 2925 "../hsp3/hsp3code.cpp"
   STACKTOP = sp;return ($91|0); //@line 2925 "../hsp3/hsp3code.cpp"
  }
 } while(0);
 $0 = 0; //@line 2888 "../hsp3/hsp3code.cpp"
 $91 = $0; //@line 2925 "../hsp3/hsp3code.cpp"
 STACKTOP = sp;return ($91|0); //@line 2925 "../hsp3/hsp3code.cpp"
}
function __ZL14call_eventfunciiiiPv($option,$event,$prm1,$prm2,$prm3) {
 $option = $option|0;
 $event = $event|0;
 $prm1 = $prm1|0;
 $prm2 = $prm2|0;
 $prm3 = $prm3|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $info = 0, $res = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $1 = $option;
 $2 = $event;
 $3 = $prm1;
 $4 = $prm2;
 $5 = $prm3;
 $i = 18; //@line 2954 "../hsp3/hsp3code.cpp"
 while(1) {
  $6 = $i; //@line 2954 "../hsp3/hsp3code.cpp"
  $7 = HEAP32[712>>2]|0; //@line 2954 "../hsp3/hsp3code.cpp"
  $8 = ($6|0)<($7|0); //@line 2954 "../hsp3/hsp3code.cpp"
  if (!($8)) {
   label = 11;
   break;
  }
  $9 = $i; //@line 2955 "../hsp3/hsp3code.cpp"
  $10 = HEAP32[672>>2]|0; //@line 2955 "../hsp3/hsp3code.cpp"
  $11 = (($10) + ($9<<5)|0); //@line 2955 "../hsp3/hsp3code.cpp"
  $info = $11; //@line 2955 "../hsp3/hsp3code.cpp"
  $12 = $info; //@line 2956 "../hsp3/hsp3code.cpp"
  $13 = (($12) + 2|0); //@line 2956 "../hsp3/hsp3code.cpp"
  $14 = HEAP16[$13>>1]|0; //@line 2956 "../hsp3/hsp3code.cpp"
  $15 = $14 << 16 >> 16; //@line 2956 "../hsp3/hsp3code.cpp"
  $16 = $1; //@line 2956 "../hsp3/hsp3code.cpp"
  $17 = $15 & $16; //@line 2956 "../hsp3/hsp3code.cpp"
  $18 = ($17|0)!=(0); //@line 2956 "../hsp3/hsp3code.cpp"
  if ($18) {
   $19 = $info; //@line 2957 "../hsp3/hsp3code.cpp"
   $20 = (($19) + 28|0); //@line 2957 "../hsp3/hsp3code.cpp"
   $21 = HEAP32[$20>>2]|0; //@line 2957 "../hsp3/hsp3code.cpp"
   $22 = ($21|0)!=(0|0); //@line 2957 "../hsp3/hsp3code.cpp"
   if ($22) {
    $23 = $info; //@line 2958 "../hsp3/hsp3code.cpp"
    $24 = (($23) + 28|0); //@line 2958 "../hsp3/hsp3code.cpp"
    $25 = HEAP32[$24>>2]|0; //@line 2958 "../hsp3/hsp3code.cpp"
    $26 = $2; //@line 2958 "../hsp3/hsp3code.cpp"
    $27 = $3; //@line 2958 "../hsp3/hsp3code.cpp"
    $28 = $4; //@line 2958 "../hsp3/hsp3code.cpp"
    $29 = $5; //@line 2958 "../hsp3/hsp3code.cpp"
    $30 = (FUNCTION_TABLE_iiiii[$25 & 255]($26,$27,$28,$29)|0); //@line 2958 "../hsp3/hsp3code.cpp"
    $res = $30; //@line 2958 "../hsp3/hsp3code.cpp"
    $31 = $res; //@line 2959 "../hsp3/hsp3code.cpp"
    $32 = ($31|0)!=(0); //@line 2959 "../hsp3/hsp3code.cpp"
    if ($32) {
     label = 6;
     break;
    }
   }
  }
  $34 = $i; //@line 2954 "../hsp3/hsp3code.cpp"
  $35 = (($34) + 1)|0; //@line 2954 "../hsp3/hsp3code.cpp"
  $i = $35; //@line 2954 "../hsp3/hsp3code.cpp"
 }
 if ((label|0) == 6) {
  $33 = $res; //@line 2959 "../hsp3/hsp3code.cpp"
  $0 = $33; //@line 2959 "../hsp3/hsp3code.cpp"
  $36 = $0; //@line 2964 "../hsp3/hsp3code.cpp"
  STACKTOP = sp;return ($36|0); //@line 2964 "../hsp3/hsp3code.cpp"
 }
 else if ((label|0) == 11) {
  $0 = 0; //@line 2963 "../hsp3/hsp3code.cpp"
  $36 = $0; //@line 2964 "../hsp3/hsp3code.cpp"
  STACKTOP = sp;return ($36|0); //@line 2964 "../hsp3/hsp3code.cpp"
 }
 return 0|0;
}
function __Z12code_execirqP6IRQDATii($irq,$wparam,$lparam) {
 $irq = $irq|0;
 $wparam = $wparam|0;
 $lparam = $lparam|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $irq;
 $1 = $wparam;
 $2 = $lparam;
 $3 = $0; //@line 3252 "../hsp3/hsp3code.cpp"
 $4 = (($3) + 12|0); //@line 3252 "../hsp3/hsp3code.cpp"
 $5 = HEAP32[$4>>2]|0; //@line 3252 "../hsp3/hsp3code.cpp"
 $6 = HEAP32[600>>2]|0; //@line 3252 "../hsp3/hsp3code.cpp"
 $7 = (($6) + 32|0); //@line 3252 "../hsp3/hsp3code.cpp"
 HEAP32[$7>>2] = $5; //@line 3252 "../hsp3/hsp3code.cpp"
 $8 = $1; //@line 3253 "../hsp3/hsp3code.cpp"
 $9 = HEAP32[600>>2]|0; //@line 3253 "../hsp3/hsp3code.cpp"
 $10 = (($9) + 36|0); //@line 3253 "../hsp3/hsp3code.cpp"
 HEAP32[$10>>2] = $8; //@line 3253 "../hsp3/hsp3code.cpp"
 $11 = $2; //@line 3254 "../hsp3/hsp3code.cpp"
 $12 = HEAP32[600>>2]|0; //@line 3254 "../hsp3/hsp3code.cpp"
 $13 = (($12) + 40|0); //@line 3254 "../hsp3/hsp3code.cpp"
 HEAP32[$13>>2] = $11; //@line 3254 "../hsp3/hsp3code.cpp"
 $14 = $0; //@line 3255 "../hsp3/hsp3code.cpp"
 $15 = (($14) + 2|0); //@line 3255 "../hsp3/hsp3code.cpp"
 $16 = HEAP16[$15>>1]|0; //@line 3255 "../hsp3/hsp3code.cpp"
 $17 = $16 << 16 >> 16; //@line 3255 "../hsp3/hsp3code.cpp"
 $18 = ($17|0)==(0); //@line 3255 "../hsp3/hsp3code.cpp"
 if ($18) {
  $19 = $0; //@line 3256 "../hsp3/hsp3code.cpp"
  $20 = (($19) + 16|0); //@line 3256 "../hsp3/hsp3code.cpp"
  $21 = HEAP32[$20>>2]|0; //@line 3256 "../hsp3/hsp3code.cpp"
  __Z11code_setpciPKt($21); //@line 3256 "../hsp3/hsp3code.cpp"
 }
 $22 = $0; //@line 3258 "../hsp3/hsp3code.cpp"
 $23 = (($22) + 2|0); //@line 3258 "../hsp3/hsp3code.cpp"
 $24 = HEAP16[$23>>1]|0; //@line 3258 "../hsp3/hsp3code.cpp"
 $25 = $24 << 16 >> 16; //@line 3258 "../hsp3/hsp3code.cpp"
 $26 = ($25|0)==(1); //@line 3258 "../hsp3/hsp3code.cpp"
 if (!($26)) {
  STACKTOP = sp;return; //@line 3270 "../hsp3/hsp3code.cpp"
 }
 $27 = HEAP32[680>>2]|0; //@line 3259 "../hsp3/hsp3code.cpp"
 HEAP32[688>>2] = $27; //@line 3259 "../hsp3/hsp3code.cpp"
 $28 = $0; //@line 3261 "../hsp3/hsp3code.cpp"
 $29 = (($28) + 16|0); //@line 3261 "../hsp3/hsp3code.cpp"
 $30 = HEAP32[$29>>2]|0; //@line 3261 "../hsp3/hsp3code.cpp"
 __Z9code_callPKt($30); //@line 3261 "../hsp3/hsp3code.cpp"
 STACKTOP = sp;return; //@line 3270 "../hsp3/hsp3code.cpp"
}
function __Z11code_getirqi($id) {
 $id = $id|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $id;
 $1 = $0; //@line 3106 "../hsp3/hsp3code.cpp"
 $2 = HEAP32[600>>2]|0; //@line 3106 "../hsp3/hsp3code.cpp"
 $3 = (($2) + 24|0); //@line 3106 "../hsp3/hsp3code.cpp"
 $4 = HEAP32[$3>>2]|0; //@line 3106 "../hsp3/hsp3code.cpp"
 $5 = (($4) + (($1*24)|0)|0); //@line 3106 "../hsp3/hsp3code.cpp"
 STACKTOP = sp;return ($5|0); //@line 3106 "../hsp3/hsp3code.cpp"
}
function __Z11code_setirqiiiPt($id,$opt,$custom,$ptr) {
 $id = $id|0;
 $opt = $opt|0;
 $custom = $custom|0;
 $ptr = $ptr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $irq = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $id;
 $1 = $opt;
 $2 = $custom;
 $3 = $ptr;
 $4 = $0; //@line 3129 "../hsp3/hsp3code.cpp"
 $5 = (__Z11code_getirqi($4)|0); //@line 3129 "../hsp3/hsp3code.cpp"
 $irq = $5; //@line 3129 "../hsp3/hsp3code.cpp"
 $6 = $irq; //@line 3130 "../hsp3/hsp3code.cpp"
 HEAP16[$6>>1] = 2; //@line 3130 "../hsp3/hsp3code.cpp"
 $7 = $1; //@line 3131 "../hsp3/hsp3code.cpp"
 $8 = $7&65535; //@line 3131 "../hsp3/hsp3code.cpp"
 $9 = $irq; //@line 3131 "../hsp3/hsp3code.cpp"
 $10 = (($9) + 2|0); //@line 3131 "../hsp3/hsp3code.cpp"
 HEAP16[$10>>1] = $8; //@line 3131 "../hsp3/hsp3code.cpp"
 $11 = $3; //@line 3132 "../hsp3/hsp3code.cpp"
 $12 = $irq; //@line 3132 "../hsp3/hsp3code.cpp"
 $13 = (($12) + 16|0); //@line 3132 "../hsp3/hsp3code.cpp"
 HEAP32[$13>>2] = $11; //@line 3132 "../hsp3/hsp3code.cpp"
 $14 = $2; //@line 3133 "../hsp3/hsp3code.cpp"
 $15 = $irq; //@line 3133 "../hsp3/hsp3code.cpp"
 $16 = (($15) + 4|0); //@line 3133 "../hsp3/hsp3code.cpp"
 HEAP32[$16>>2] = $14; //@line 3133 "../hsp3/hsp3code.cpp"
 STACKTOP = sp;return; //@line 3134 "../hsp3/hsp3code.cpp"
}
function __Z12code_seekirqii($actid,$custom) {
 $actid = $actid|0;
 $custom = $custom|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $irq = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = $actid;
 $2 = $custom;
 $i = 0; //@line 3213 "../hsp3/hsp3code.cpp"
 while(1) {
  $3 = $i; //@line 3213 "../hsp3/hsp3code.cpp"
  $4 = HEAP32[600>>2]|0; //@line 3213 "../hsp3/hsp3code.cpp"
  $5 = (($4) + 28|0); //@line 3213 "../hsp3/hsp3code.cpp"
  $6 = HEAP32[$5>>2]|0; //@line 3213 "../hsp3/hsp3code.cpp"
  $7 = ($3|0)<($6|0); //@line 3213 "../hsp3/hsp3code.cpp"
  if (!($7)) {
   label = 12;
   break;
  }
  $8 = $i; //@line 3214 "../hsp3/hsp3code.cpp"
  $9 = (__Z11code_getirqi($8)|0); //@line 3214 "../hsp3/hsp3code.cpp"
  $irq = $9; //@line 3214 "../hsp3/hsp3code.cpp"
  $10 = $irq; //@line 3215 "../hsp3/hsp3code.cpp"
  $11 = HEAP16[$10>>1]|0; //@line 3215 "../hsp3/hsp3code.cpp"
  $12 = $11 << 16 >> 16; //@line 3215 "../hsp3/hsp3code.cpp"
  $13 = ($12|0)!=(0); //@line 3215 "../hsp3/hsp3code.cpp"
  if ($13) {
   $14 = $irq; //@line 3216 "../hsp3/hsp3code.cpp"
   $15 = (($14) + 4|0); //@line 3216 "../hsp3/hsp3code.cpp"
   $16 = HEAP32[$15>>2]|0; //@line 3216 "../hsp3/hsp3code.cpp"
   $17 = $2; //@line 3216 "../hsp3/hsp3code.cpp"
   $18 = ($16|0)==($17|0); //@line 3216 "../hsp3/hsp3code.cpp"
   if ($18) {
    $19 = $irq; //@line 3216 "../hsp3/hsp3code.cpp"
    $20 = (($19) + 8|0); //@line 3216 "../hsp3/hsp3code.cpp"
    $21 = HEAP32[$20>>2]|0; //@line 3216 "../hsp3/hsp3code.cpp"
    $22 = $1; //@line 3216 "../hsp3/hsp3code.cpp"
    $23 = ($21|0)==($22|0); //@line 3216 "../hsp3/hsp3code.cpp"
    if ($23) {
     $24 = $irq; //@line 3217 "../hsp3/hsp3code.cpp"
     $25 = (($24) + 2|0); //@line 3217 "../hsp3/hsp3code.cpp"
     $26 = HEAP16[$25>>1]|0; //@line 3217 "../hsp3/hsp3code.cpp"
     $27 = $26 << 16 >> 16; //@line 3217 "../hsp3/hsp3code.cpp"
     $28 = ($27|0)!=(2); //@line 3217 "../hsp3/hsp3code.cpp"
     if ($28) {
      label = 7;
      break;
     }
    }
   }
  }
  $30 = $i; //@line 3213 "../hsp3/hsp3code.cpp"
  $31 = (($30) + 1)|0; //@line 3213 "../hsp3/hsp3code.cpp"
  $i = $31; //@line 3213 "../hsp3/hsp3code.cpp"
 }
 if ((label|0) == 7) {
  $29 = $irq; //@line 3217 "../hsp3/hsp3code.cpp"
  $0 = $29; //@line 3217 "../hsp3/hsp3code.cpp"
  $32 = $0; //@line 3222 "../hsp3/hsp3code.cpp"
  STACKTOP = sp;return ($32|0); //@line 3222 "../hsp3/hsp3code.cpp"
 }
 else if ((label|0) == 12) {
  $0 = 0; //@line 3221 "../hsp3/hsp3code.cpp"
  $32 = $0; //@line 3222 "../hsp3/hsp3code.cpp"
  STACKTOP = sp;return ($32|0); //@line 3222 "../hsp3/hsp3code.cpp"
 }
 return 0|0;
}
function __Z11code_adddbgPcS_($name,$str) {
 $name = $name|0;
 $str = $str|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $name;
 $1 = $str;
 $2 = $0; //@line 3304 "../hsp3/hsp3code.cpp"
 $3 = $1; //@line 3304 "../hsp3/hsp3code.cpp"
 __ZL12code_adddbg3PKcS0_S0_($2,1064,$3); //@line 3304 "../hsp3/hsp3code.cpp"
 STACKTOP = sp;return; //@line 3305 "../hsp3/hsp3code.cpp"
}
function __ZL12code_adddbg3PKcS0_S0_($s1,$sep,$s2) {
 $s1 = $s1|0;
 $sep = $sep|0;
 $s2 = $s2|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2064|0;
 $tmp = sp + 16|0;
 $0 = $s1;
 $1 = $sep;
 $2 = $s2;
 $3 = $0; //@line 3294 "../hsp3/hsp3code.cpp"
 (_strncpy(($tmp|0),($3|0),64)|0); //@line 3294 "../hsp3/hsp3code.cpp"
 $4 = $1; //@line 3295 "../hsp3/hsp3code.cpp"
 (_strncat($tmp,$4,8)|0); //@line 3295 "../hsp3/hsp3code.cpp"
 $5 = $2; //@line 3296 "../hsp3/hsp3code.cpp"
 (_strncat($tmp,$5,1973)|0); //@line 3296 "../hsp3/hsp3code.cpp"
 (_strcat(($tmp|0),(1064|0))|0); //@line 3297 "../hsp3/hsp3code.cpp"
 __Z8sbStrAddPPcS_(1088,$tmp); //@line 3298 "../hsp3/hsp3code.cpp"
 STACKTOP = sp;return; //@line 3299 "../hsp3/hsp3code.cpp"
}
function __Z12code_adddbg2PcS_($name,$str) {
 $name = $name|0;
 $str = $str|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $name;
 $1 = $str;
 $2 = $0; //@line 3310 "../hsp3/hsp3code.cpp"
 $3 = $1; //@line 3310 "../hsp3/hsp3code.cpp"
 __ZL12code_adddbg3PKcS0_S0_($2,1072,$3); //@line 3310 "../hsp3/hsp3code.cpp"
 STACKTOP = sp;return; //@line 3311 "../hsp3/hsp3code.cpp"
}
function __Z12code_adddbg2Pci($name,$val) {
 $name = $name|0;
 $val = $val|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $tmp = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer = sp;
 $tmp = sp + 16|0;
 $0 = $name;
 $1 = $val;
 $2 = $1; //@line 3340 "../hsp3/hsp3code.cpp"
 HEAP32[$vararg_buffer>>2] = $2; //@line 3340 "../hsp3/hsp3code.cpp"
 (_sprintf($tmp,1080,$vararg_buffer)|0); //@line 3340 "../hsp3/hsp3code.cpp"
 $3 = $0; //@line 3342 "../hsp3/hsp3code.cpp"
 __Z12code_adddbg2PcS_($3,$tmp); //@line 3342 "../hsp3/hsp3code.cpp"
 STACKTOP = sp;return; //@line 3343 "../hsp3/hsp3code.cpp"
}
function __Z11code_inidbgv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Z7sbAlloci(16384)|0); //@line 3348 "../hsp3/hsp3code.cpp"
 HEAP32[1088>>2] = $0; //@line 3348 "../hsp3/hsp3code.cpp"
 $1 = HEAP32[1088>>2]|0; //@line 3349 "../hsp3/hsp3code.cpp"
 STACKTOP = sp;return ($1|0); //@line 3349 "../hsp3/hsp3code.cpp"
}
function __ZL18code_dbgvarinf_extP4PValPvPc($pv,$src,$buf) {
 $pv = $pv|0;
 $src = $src|0;
 $buf = $buf|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fv = 0, $vararg_buffer = 0;
 var $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer3 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $vararg_buffer10 = sp + 40|0;
 $vararg_buffer3 = sp;
 $vararg_buffer1 = sp + 24|0;
 $vararg_buffer = sp + 32|0;
 $0 = $pv;
 $1 = $src;
 $2 = $buf;
 $3 = $0; //@line 3403 "../hsp3/hsp3code.cpp"
 $4 = HEAP16[$3>>1]|0; //@line 3403 "../hsp3/hsp3code.cpp"
 $5 = $4 << 16 >> 16; //@line 3403 "../hsp3/hsp3code.cpp"
 if ((($5|0) == 6)) {
  $34 = $2; //@line 3419 "../hsp3/hsp3code.cpp"
  $35 = $1; //@line 3419 "../hsp3/hsp3code.cpp"
  $36 = HEAP32[$35>>2]|0; //@line 3419 "../hsp3/hsp3code.cpp"
  HEAP32[$vararg_buffer10>>2] = $36; //@line 3419 "../hsp3/hsp3code.cpp"
  (_sprintf($34,1360,$vararg_buffer10)|0); //@line 3419 "../hsp3/hsp3code.cpp"
  STACKTOP = sp;return; //@line 3425 "../hsp3/hsp3code.cpp"
 } else if ((($5|0) == 1)) {
  $6 = $2; //@line 3405 "../hsp3/hsp3code.cpp"
  $7 = $1; //@line 3405 "../hsp3/hsp3code.cpp"
  $8 = HEAP32[$7>>2]|0; //@line 3405 "../hsp3/hsp3code.cpp"
  HEAP32[$vararg_buffer>>2] = $8; //@line 3405 "../hsp3/hsp3code.cpp"
  (_sprintf($6,1288,$vararg_buffer)|0); //@line 3405 "../hsp3/hsp3code.cpp"
  STACKTOP = sp;return; //@line 3425 "../hsp3/hsp3code.cpp"
 } else if ((($5|0) == 5)) {
  $9 = $1; //@line 3410 "../hsp3/hsp3code.cpp"
  $fv = $9; //@line 3410 "../hsp3/hsp3code.cpp"
  $10 = $fv; //@line 3411 "../hsp3/hsp3code.cpp"
  $11 = HEAP16[$10>>1]|0; //@line 3411 "../hsp3/hsp3code.cpp"
  $12 = $11 << 16 >> 16; //@line 3411 "../hsp3/hsp3code.cpp"
  $13 = ($12|0)==(0); //@line 3411 "../hsp3/hsp3code.cpp"
  if ($13) {
   $14 = $2; //@line 3412 "../hsp3/hsp3code.cpp"
   (_sprintf($14,1304,$vararg_buffer1)|0); //@line 3412 "../hsp3/hsp3code.cpp"
  } else {
   $15 = $2; //@line 3414 "../hsp3/hsp3code.cpp"
   $16 = $fv; //@line 3414 "../hsp3/hsp3code.cpp"
   $17 = (($16) + 2|0); //@line 3414 "../hsp3/hsp3code.cpp"
   $18 = HEAP16[$17>>1]|0; //@line 3414 "../hsp3/hsp3code.cpp"
   $19 = $18 << 16 >> 16; //@line 3414 "../hsp3/hsp3code.cpp"
   $20 = $fv; //@line 3414 "../hsp3/hsp3code.cpp"
   $21 = (($20) + 4|0); //@line 3414 "../hsp3/hsp3code.cpp"
   $22 = HEAP16[$21>>1]|0; //@line 3414 "../hsp3/hsp3code.cpp"
   $23 = $22 << 16 >> 16; //@line 3414 "../hsp3/hsp3code.cpp"
   $24 = $fv; //@line 3414 "../hsp3/hsp3code.cpp"
   $25 = (($24) + 12|0); //@line 3414 "../hsp3/hsp3code.cpp"
   $26 = HEAP32[$25>>2]|0; //@line 3414 "../hsp3/hsp3code.cpp"
   $27 = $26; //@line 3414 "../hsp3/hsp3code.cpp"
   $28 = $fv; //@line 3414 "../hsp3/hsp3code.cpp"
   $29 = (($28) + 8|0); //@line 3414 "../hsp3/hsp3code.cpp"
   $30 = HEAP32[$29>>2]|0; //@line 3414 "../hsp3/hsp3code.cpp"
   $31 = $fv; //@line 3414 "../hsp3/hsp3code.cpp"
   $32 = HEAP16[$31>>1]|0; //@line 3414 "../hsp3/hsp3code.cpp"
   $33 = $32 << 16 >> 16; //@line 3414 "../hsp3/hsp3code.cpp"
   HEAP32[$vararg_buffer3>>2] = $19; //@line 3414 "../hsp3/hsp3code.cpp"
   $vararg_ptr6 = (($vararg_buffer3) + 4|0); //@line 3414 "../hsp3/hsp3code.cpp"
   HEAP32[$vararg_ptr6>>2] = $23; //@line 3414 "../hsp3/hsp3code.cpp"
   $vararg_ptr7 = (($vararg_buffer3) + 8|0); //@line 3414 "../hsp3/hsp3code.cpp"
   HEAP32[$vararg_ptr7>>2] = $27; //@line 3414 "../hsp3/hsp3code.cpp"
   $vararg_ptr8 = (($vararg_buffer3) + 12|0); //@line 3414 "../hsp3/hsp3code.cpp"
   HEAP32[$vararg_ptr8>>2] = $30; //@line 3414 "../hsp3/hsp3code.cpp"
   $vararg_ptr9 = (($vararg_buffer3) + 16|0); //@line 3414 "../hsp3/hsp3code.cpp"
   HEAP32[$vararg_ptr9>>2] = $33; //@line 3414 "../hsp3/hsp3code.cpp"
   (_sprintf($15,1320,$vararg_buffer3)|0); //@line 3414 "../hsp3/hsp3code.cpp"
  }
  STACKTOP = sp;return; //@line 3425 "../hsp3/hsp3code.cpp"
 } else {
  $37 = $2; //@line 3422 "../hsp3/hsp3code.cpp"
  (_strcpy(($37|0),(1376|0))|0); //@line 3422 "../hsp3/hsp3code.cpp"
  STACKTOP = sp;return; //@line 3425 "../hsp3/hsp3code.cpp"
 }
}
function __ZL14code_arraydumpP4PVal($pv) {
 $pv = $pv|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $amax = 0, $ofs = 0, $ok = 0, $p = 0, $src = 0, $t = 0, $tmpbuf = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 816|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $t = sp + 304|0;
 $tmpbuf = sp + 48|0;
 $0 = $pv;
 $3 = $0; //@line 3439 "../hsp3/hsp3code.cpp"
 $4 = (($3) + 4|0); //@line 3439 "../hsp3/hsp3code.cpp"
 $5 = (($4) + 4|0); //@line 3439 "../hsp3/hsp3code.cpp"
 $6 = HEAP32[$5>>2]|0; //@line 3439 "../hsp3/hsp3code.cpp"
 $amax = $6; //@line 3439 "../hsp3/hsp3code.cpp"
 $7 = $amax; //@line 3440 "../hsp3/hsp3code.cpp"
 $8 = ($7|0)<=(1); //@line 3440 "../hsp3/hsp3code.cpp"
 if ($8) {
  STACKTOP = sp;return; //@line 3446 "../hsp3/hsp3code.cpp"
 }
 $9 = $amax; //@line 3441 "../hsp3/hsp3code.cpp"
 $10 = ($9|0)>(16); //@line 3441 "../hsp3/hsp3code.cpp"
 if ($10) {
  __Z8sbStrAddPPcS_(1088,1248); //@line 3442 "../hsp3/hsp3code.cpp"
  $amax = 16; //@line 3443 "../hsp3/hsp3code.cpp"
 }
 $ofs = 0; //@line 3446 "../hsp3/hsp3code.cpp"
 while(1) {
  $11 = $ofs; //@line 3446 "../hsp3/hsp3code.cpp"
  $12 = $amax; //@line 3446 "../hsp3/hsp3code.cpp"
  $13 = ($11|0)<($12|0); //@line 3446 "../hsp3/hsp3code.cpp"
  if (!($13)) {
   label = 21;
   break;
  }
  $14 = $0; //@line 3448 "../hsp3/hsp3code.cpp"
  $15 = $ofs; //@line 3448 "../hsp3/hsp3code.cpp"
  $16 = (__Z17HspVarCorePtrAPTRP4PVali($14,$15)|0); //@line 3448 "../hsp3/hsp3code.cpp"
  $src = $16; //@line 3448 "../hsp3/hsp3code.cpp"
  $ok = 1; //@line 3449 "../hsp3/hsp3code.cpp"
  $17 = HEAP32[3456>>2]|0; //@line 3451 "../hsp3/hsp3code.cpp"
  $18 = (($17) + 280|0); //@line 3451 "../hsp3/hsp3code.cpp"
  $19 = (($18) + 20|0); //@line 3451 "../hsp3/hsp3code.cpp"
  $20 = HEAP32[$19>>2]|0; //@line 3451 "../hsp3/hsp3code.cpp"
  $21 = $src; //@line 3451 "../hsp3/hsp3code.cpp"
  $22 = $0; //@line 3451 "../hsp3/hsp3code.cpp"
  $23 = HEAP16[$22>>1]|0; //@line 3451 "../hsp3/hsp3code.cpp"
  $24 = $23 << 16 >> 16; //@line 3451 "../hsp3/hsp3code.cpp"
  __THREW__ = 0;
  $25 = (invoke_iii($20|0,($21|0),($24|0))|0); //@line 3451 "../hsp3/hsp3code.cpp"
  $26 = __THREW__; __THREW__ = 0;
  $27 = $26&1;
  if ($27) {
   $28 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $29 = tempRet0;
   $1 = $28; //@line 3451 "../hsp3/hsp3code.cpp"
   $2 = $29; //@line 3451 "../hsp3/hsp3code.cpp"
   $30 = $1; //@line 3452 "../hsp3/hsp3code.cpp"
   (___cxa_begin_catch(($30|0))|0); //@line 3452 "../hsp3/hsp3code.cpp"
   $31 = $0; //@line 3454 "../hsp3/hsp3code.cpp"
   $32 = $src; //@line 3454 "../hsp3/hsp3code.cpp"
   __THREW__ = 0;
   invoke_viii(71,($31|0),($32|0),($tmpbuf|0)); //@line 3454 "../hsp3/hsp3code.cpp"
   $33 = __THREW__; __THREW__ = 0;
   $34 = $33&1;
   if ($34) {
    break;
   }
   $35 = $ofs; //@line 3455 "../hsp3/hsp3code.cpp"
   __THREW__ = 0;
   HEAP32[$vararg_buffer>>2] = $35; //@line 3455 "../hsp3/hsp3code.cpp"
   $vararg_ptr1 = (($vararg_buffer) + 4|0); //@line 3455 "../hsp3/hsp3code.cpp"
   HEAP32[$vararg_ptr1>>2] = $tmpbuf; //@line 3455 "../hsp3/hsp3code.cpp"
   (invoke_iiii(72,($t|0),(1272|0),($vararg_buffer|0))|0); //@line 3455 "../hsp3/hsp3code.cpp"
   $36 = __THREW__; __THREW__ = 0;
   $37 = $36&1;
   if ($37) {
    break;
   }
   $ok = 0; //@line 3456 "../hsp3/hsp3code.cpp"
   ___cxa_end_catch(); //@line 3457 "../hsp3/hsp3code.cpp"
  } else {
   $p = $25; //@line 3451 "../hsp3/hsp3code.cpp"
  }
  $38 = $ok; //@line 3458 "../hsp3/hsp3code.cpp"
  $39 = ($38|0)!=(0); //@line 3458 "../hsp3/hsp3code.cpp"
  if ($39) {
   $40 = $p; //@line 3459 "../hsp3/hsp3code.cpp"
   $41 = (_strlen(($40|0))|0); //@line 3459 "../hsp3/hsp3code.cpp"
   $42 = ($41>>>0)>(63); //@line 3459 "../hsp3/hsp3code.cpp"
   if ($42) {
    $43 = HEAP32[600>>2]|0; //@line 3460 "../hsp3/hsp3code.cpp"
    $44 = (($43) + 824|0); //@line 3460 "../hsp3/hsp3code.cpp"
    $45 = HEAP32[$44>>2]|0; //@line 3460 "../hsp3/hsp3code.cpp"
    $46 = $p; //@line 3460 "../hsp3/hsp3code.cpp"
    (_strncpy(($45|0),($46|0),63)|0); //@line 3460 "../hsp3/hsp3code.cpp"
    $47 = HEAP32[600>>2]|0; //@line 3461 "../hsp3/hsp3code.cpp"
    $48 = (($47) + 824|0); //@line 3461 "../hsp3/hsp3code.cpp"
    $49 = HEAP32[$48>>2]|0; //@line 3461 "../hsp3/hsp3code.cpp"
    $50 = (($49) + 64|0); //@line 3461 "../hsp3/hsp3code.cpp"
    HEAP8[$50>>0] = 0; //@line 3461 "../hsp3/hsp3code.cpp"
    $51 = HEAP32[600>>2]|0; //@line 3462 "../hsp3/hsp3code.cpp"
    $52 = (($51) + 824|0); //@line 3462 "../hsp3/hsp3code.cpp"
    $53 = HEAP32[$52>>2]|0; //@line 3462 "../hsp3/hsp3code.cpp"
    $p = $53; //@line 3462 "../hsp3/hsp3code.cpp"
   }
   $58 = $ofs; //@line 3464 "../hsp3/hsp3code.cpp"
   $59 = $p; //@line 3464 "../hsp3/hsp3code.cpp"
   HEAP32[$vararg_buffer2>>2] = $58; //@line 3464 "../hsp3/hsp3code.cpp"
   $vararg_ptr5 = (($vararg_buffer2) + 4|0); //@line 3464 "../hsp3/hsp3code.cpp"
   HEAP32[$vararg_ptr5>>2] = $59; //@line 3464 "../hsp3/hsp3code.cpp"
   (_sprintf($t,1272,$vararg_buffer2)|0); //@line 3464 "../hsp3/hsp3code.cpp"
  }
  __Z8sbStrAddPPcS_(1088,$t); //@line 3466 "../hsp3/hsp3code.cpp"
  $60 = $ofs; //@line 3446 "../hsp3/hsp3code.cpp"
  $61 = (($60) + 1)|0; //@line 3446 "../hsp3/hsp3code.cpp"
  $ofs = $61; //@line 3446 "../hsp3/hsp3code.cpp"
 }
 if ((label|0) == 21) {
  STACKTOP = sp;return; //@line 3446 "../hsp3/hsp3code.cpp"
 }
 $54 = ___cxa_find_matching_catch(-1,-1)|0;
 $55 = tempRet0;
 $1 = $54; //@line 3454 "../hsp3/hsp3code.cpp"
 $2 = $55; //@line 3454 "../hsp3/hsp3code.cpp"
 __THREW__ = 0;
 invoke_v(73); //@line 3457 "../hsp3/hsp3code.cpp"
 $56 = __THREW__; __THREW__ = 0;
 $57 = $56&1;
 if ($57) {
  $64 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $65 = tempRet0;
  ___clang_call_terminate($64); //@line 3457 "../hsp3/hsp3code.cpp"
  // unreachable; //@line 3457 "../hsp3/hsp3code.cpp"
 }
 $62 = $1; //@line 3457 "../hsp3/hsp3code.cpp"
 $63 = $2; //@line 3457 "../hsp3/hsp3code.cpp"
 ___resumeException($62|0);
 // unreachable;
}
function __ZL12code_dbgdumpPKci($mem,$size) {
 $mem = $mem|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $adr = 0, $i = 0, $t = 0, $tline = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1568|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $t = sp + 1056|0;
 $tline = sp + 32|0;
 $0 = $mem;
 $1 = $size;
 $adr = 0; //@line 3383 "../hsp3/hsp3code.cpp"
 while(1) {
  $2 = $adr; //@line 3386 "../hsp3/hsp3code.cpp"
  $3 = $1; //@line 3386 "../hsp3/hsp3code.cpp"
  $4 = ($2|0)<($3|0); //@line 3386 "../hsp3/hsp3code.cpp"
  if (!($4)) {
   break;
  }
  $5 = $adr; //@line 3387 "../hsp3/hsp3code.cpp"
  HEAP32[$vararg_buffer>>2] = $5; //@line 3387 "../hsp3/hsp3code.cpp"
  (_sprintf($tline,1232,$vararg_buffer)|0); //@line 3387 "../hsp3/hsp3code.cpp"
  $i = 0; //@line 3388 "../hsp3/hsp3code.cpp"
  while(1) {
   $6 = $i; //@line 3388 "../hsp3/hsp3code.cpp"
   $7 = ($6|0)<(8); //@line 3388 "../hsp3/hsp3code.cpp"
   if ($7) {
    $8 = $adr; //@line 3388 "../hsp3/hsp3code.cpp"
    $9 = $1; //@line 3388 "../hsp3/hsp3code.cpp"
    $10 = ($8|0)<($9|0); //@line 3388 "../hsp3/hsp3code.cpp"
    $20 = $10;
   } else {
    $20 = 0;
   }
   if (!($20)) {
    break;
   }
   $11 = $adr; //@line 3389 "../hsp3/hsp3code.cpp"
   $12 = $0; //@line 3389 "../hsp3/hsp3code.cpp"
   $13 = (($12) + ($11)|0); //@line 3389 "../hsp3/hsp3code.cpp"
   $14 = HEAP8[$13>>0]|0; //@line 3389 "../hsp3/hsp3code.cpp"
   $15 = $14&255; //@line 3389 "../hsp3/hsp3code.cpp"
   HEAP32[$vararg_buffer1>>2] = $15; //@line 3389 "../hsp3/hsp3code.cpp"
   (_sprintf($t,1240,$vararg_buffer1)|0); //@line 3389 "../hsp3/hsp3code.cpp"
   (_strcat(($tline|0),($t|0))|0); //@line 3390 "../hsp3/hsp3code.cpp"
   $16 = $i; //@line 3388 "../hsp3/hsp3code.cpp"
   $17 = (($16) + 1)|0; //@line 3388 "../hsp3/hsp3code.cpp"
   $i = $17; //@line 3388 "../hsp3/hsp3code.cpp"
   $18 = $adr; //@line 3388 "../hsp3/hsp3code.cpp"
   $19 = (($18) + 1)|0; //@line 3388 "../hsp3/hsp3code.cpp"
   $adr = $19; //@line 3388 "../hsp3/hsp3code.cpp"
  }
  (_strcat(($tline|0),(1064|0))|0); //@line 3392 "../hsp3/hsp3code.cpp"
  __Z8sbStrAddPPcS_(1088,$tline); //@line 3393 "../hsp3/hsp3code.cpp"
 }
 STACKTOP = sp;return; //@line 3395 "../hsp3/hsp3code.cpp"
}
function ___clang_call_terminate($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___cxa_begin_catch(($0|0))|0);
 __ZSt9terminatev();
 // unreachable;
}
function __ZL18customstack_deleteP9STRUCTDATPc($st,$stackptr) {
 $st = $st|0;
 $stackptr = $stackptr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $out = 0, $prm = 0, $ss = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $st;
 $1 = $stackptr;
 $2 = $0; //@line 1094 "../hsp3/hsp3code.cpp"
 $3 = (($2) + 4|0); //@line 1094 "../hsp3/hsp3code.cpp"
 $4 = HEAP32[$3>>2]|0; //@line 1094 "../hsp3/hsp3code.cpp"
 $5 = HEAP32[600>>2]|0; //@line 1094 "../hsp3/hsp3code.cpp"
 $6 = (($5) + 836|0); //@line 1094 "../hsp3/hsp3code.cpp"
 $7 = HEAP32[$6>>2]|0; //@line 1094 "../hsp3/hsp3code.cpp"
 $8 = (($7) + ($4<<3)|0); //@line 1094 "../hsp3/hsp3code.cpp"
 $prm = $8; //@line 1094 "../hsp3/hsp3code.cpp"
 $i = 0; //@line 1095 "../hsp3/hsp3code.cpp"
 while(1) {
  $9 = $i; //@line 1095 "../hsp3/hsp3code.cpp"
  $10 = $0; //@line 1095 "../hsp3/hsp3code.cpp"
  $11 = (($10) + 8|0); //@line 1095 "../hsp3/hsp3code.cpp"
  $12 = HEAP32[$11>>2]|0; //@line 1095 "../hsp3/hsp3code.cpp"
  $13 = ($9|0)<($12|0); //@line 1095 "../hsp3/hsp3code.cpp"
  if (!($13)) {
   break;
  }
  $14 = $prm; //@line 1096 "../hsp3/hsp3code.cpp"
  $15 = HEAP16[$14>>1]|0; //@line 1096 "../hsp3/hsp3code.cpp"
  $16 = $15 << 16 >> 16; //@line 1096 "../hsp3/hsp3code.cpp"
  $17 = ($16|0)==(-6); //@line 1096 "../hsp3/hsp3code.cpp"
  if ($17) {
   $18 = $1; //@line 1097 "../hsp3/hsp3code.cpp"
   $19 = $prm; //@line 1097 "../hsp3/hsp3code.cpp"
   $20 = (($19) + 4|0); //@line 1097 "../hsp3/hsp3code.cpp"
   $21 = HEAP32[$20>>2]|0; //@line 1097 "../hsp3/hsp3code.cpp"
   $22 = (($18) + ($21)|0); //@line 1097 "../hsp3/hsp3code.cpp"
   $out = $22; //@line 1097 "../hsp3/hsp3code.cpp"
   $23 = $out; //@line 1098 "../hsp3/hsp3code.cpp"
   $24 = HEAP32[$23>>2]|0; //@line 1098 "../hsp3/hsp3code.cpp"
   $ss = $24; //@line 1098 "../hsp3/hsp3code.cpp"
   $25 = $ss; //@line 1099 "../hsp3/hsp3code.cpp"
   __Z6sbFreePv($25); //@line 1099 "../hsp3/hsp3code.cpp"
  } else {
   $26 = $prm; //@line 1100 "../hsp3/hsp3code.cpp"
   $27 = HEAP16[$26>>1]|0; //@line 1100 "../hsp3/hsp3code.cpp"
   $28 = $27 << 16 >> 16; //@line 1100 "../hsp3/hsp3code.cpp"
   $29 = ($28|0)==(-1); //@line 1100 "../hsp3/hsp3code.cpp"
   if ($29) {
    $30 = $1; //@line 1101 "../hsp3/hsp3code.cpp"
    $31 = $prm; //@line 1101 "../hsp3/hsp3code.cpp"
    $32 = (($31) + 4|0); //@line 1101 "../hsp3/hsp3code.cpp"
    $33 = HEAP32[$32>>2]|0; //@line 1101 "../hsp3/hsp3code.cpp"
    $34 = (($30) + ($33)|0); //@line 1101 "../hsp3/hsp3code.cpp"
    $35 = HEAP16[$34>>1]|0; //@line 1101 "../hsp3/hsp3code.cpp"
    $36 = $35 << 16 >> 16; //@line 1101 "../hsp3/hsp3code.cpp"
    $37 = HEAP32[3456>>2]|0; //@line 1101 "../hsp3/hsp3code.cpp"
    $38 = (($37) + (($36*140)|0)|0); //@line 1101 "../hsp3/hsp3code.cpp"
    $39 = (($38) + 52|0); //@line 1101 "../hsp3/hsp3code.cpp"
    $40 = HEAP32[$39>>2]|0; //@line 1101 "../hsp3/hsp3code.cpp"
    $41 = $1; //@line 1101 "../hsp3/hsp3code.cpp"
    $42 = $prm; //@line 1101 "../hsp3/hsp3code.cpp"
    $43 = (($42) + 4|0); //@line 1101 "../hsp3/hsp3code.cpp"
    $44 = HEAP32[$43>>2]|0; //@line 1101 "../hsp3/hsp3code.cpp"
    $45 = (($41) + ($44)|0); //@line 1101 "../hsp3/hsp3code.cpp"
    FUNCTION_TABLE_vi[$40 & 255]($45); //@line 1101 "../hsp3/hsp3code.cpp"
   }
  }
  $46 = $prm; //@line 1103 "../hsp3/hsp3code.cpp"
  $47 = (($46) + 8|0); //@line 1103 "../hsp3/hsp3code.cpp"
  $prm = $47; //@line 1103 "../hsp3/hsp3code.cpp"
  $48 = $i; //@line 1095 "../hsp3/hsp3code.cpp"
  $49 = (($48) + 1)|0; //@line 1095 "../hsp3/hsp3code.cpp"
  $i = $49; //@line 1095 "../hsp3/hsp3code.cpp"
 }
 STACKTOP = sp;return; //@line 1105 "../hsp3/hsp3code.cpp"
}
function __ZL14cmdfunc_customi($cmd) {
 $cmd = $cmd|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $st = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cmd;
 __Z9code_nextv(); //@line 1508 "../hsp3/hsp3code.cpp"
 $1 = $0; //@line 1510 "../hsp3/hsp3code.cpp"
 $2 = HEAP32[600>>2]|0; //@line 1510 "../hsp3/hsp3code.cpp"
 $3 = (($2) + 840|0); //@line 1510 "../hsp3/hsp3code.cpp"
 $4 = HEAP32[$3>>2]|0; //@line 1510 "../hsp3/hsp3code.cpp"
 $5 = (($4) + (($1*28)|0)|0); //@line 1510 "../hsp3/hsp3code.cpp"
 $st = $5; //@line 1510 "../hsp3/hsp3code.cpp"
 $6 = $st; //@line 1511 "../hsp3/hsp3code.cpp"
 $7 = HEAP16[$6>>1]|0; //@line 1511 "../hsp3/hsp3code.cpp"
 $8 = $7 << 16 >> 16; //@line 1511 "../hsp3/hsp3code.cpp"
 $9 = ($8|0)!=(-1); //@line 1511 "../hsp3/hsp3code.cpp"
 if ($9) {
  $10 = (___cxa_allocate_exception(4)|0); //@line 1511 "../hsp3/hsp3code.cpp"
  HEAP32[$10>>2] = 2; //@line 1511 "../hsp3/hsp3code.cpp"
  ___cxa_throw(($10|0),(624|0),(0|0)); //@line 1511 "../hsp3/hsp3code.cpp"
  // unreachable; //@line 1511 "../hsp3/hsp3code.cpp"
 } else {
  $11 = $0; //@line 1513 "../hsp3/hsp3code.cpp"
  $12 = (__ZL13code_callfunci($11)|0); //@line 1513 "../hsp3/hsp3code.cpp"
  STACKTOP = sp;return ($12|0); //@line 1513 "../hsp3/hsp3code.cpp"
 }
 return 0|0;
}
function __ZL14reffunc_customPii($type_res,$arg) {
 $type_res = $type_res|0;
 $arg = $arg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $old_funcres = 0, $ptr = 0, $st = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $type_res;
 $1 = $arg;
 $2 = $1; //@line 1527 "../hsp3/hsp3code.cpp"
 $3 = HEAP32[600>>2]|0; //@line 1527 "../hsp3/hsp3code.cpp"
 $4 = (($3) + 840|0); //@line 1527 "../hsp3/hsp3code.cpp"
 $5 = HEAP32[$4>>2]|0; //@line 1527 "../hsp3/hsp3code.cpp"
 $6 = (($5) + (($2*28)|0)|0); //@line 1527 "../hsp3/hsp3code.cpp"
 $st = $6; //@line 1527 "../hsp3/hsp3code.cpp"
 $7 = $st; //@line 1528 "../hsp3/hsp3code.cpp"
 $8 = HEAP16[$7>>1]|0; //@line 1528 "../hsp3/hsp3code.cpp"
 $9 = $8 << 16 >> 16; //@line 1528 "../hsp3/hsp3code.cpp"
 $10 = ($9|0)!=(-2); //@line 1528 "../hsp3/hsp3code.cpp"
 if ($10) {
  $11 = (___cxa_allocate_exception(4)|0); //@line 1528 "../hsp3/hsp3code.cpp"
  HEAP32[$11>>2] = 2; //@line 1528 "../hsp3/hsp3code.cpp"
  ___cxa_throw(($11|0),(624|0),(0|0)); //@line 1528 "../hsp3/hsp3code.cpp"
  // unreachable; //@line 1528 "../hsp3/hsp3code.cpp"
 }
 $12 = HEAP32[1384>>2]|0; //@line 1529 "../hsp3/hsp3code.cpp"
 $old_funcres = $12; //@line 1529 "../hsp3/hsp3code.cpp"
 HEAP32[1384>>2] = -1; //@line 1530 "../hsp3/hsp3code.cpp"
 $13 = HEAP32[640>>2]|0; //@line 1534 "../hsp3/hsp3code.cpp"
 $14 = ($13|0)!=(0); //@line 1534 "../hsp3/hsp3code.cpp"
 if ($14) {
  $15 = (___cxa_allocate_exception(4)|0); //@line 1534 "../hsp3/hsp3code.cpp"
  HEAP32[$15>>2] = 32; //@line 1534 "../hsp3/hsp3code.cpp"
  ___cxa_throw(($15|0),(624|0),(0|0)); //@line 1534 "../hsp3/hsp3code.cpp"
  // unreachable; //@line 1534 "../hsp3/hsp3code.cpp"
 }
 $16 = HEAP32[648>>2]|0; //@line 1535 "../hsp3/hsp3code.cpp"
 $17 = ($16|0)!=(40); //@line 1535 "../hsp3/hsp3code.cpp"
 if ($17) {
  $18 = (___cxa_allocate_exception(4)|0); //@line 1535 "../hsp3/hsp3code.cpp"
  HEAP32[$18>>2] = 32; //@line 1535 "../hsp3/hsp3code.cpp"
  ___cxa_throw(($18|0),(624|0),(0|0)); //@line 1535 "../hsp3/hsp3code.cpp"
  // unreachable; //@line 1535 "../hsp3/hsp3code.cpp"
 }
 __Z9code_nextv(); //@line 1537 "../hsp3/hsp3code.cpp"
 $19 = $1; //@line 1538 "../hsp3/hsp3code.cpp"
 (__ZL13code_callfunci($19)|0); //@line 1538 "../hsp3/hsp3code.cpp"
 $20 = HEAP32[1384>>2]|0; //@line 1540 "../hsp3/hsp3code.cpp"
 $21 = $0; //@line 1540 "../hsp3/hsp3code.cpp"
 HEAP32[$21>>2] = $20; //@line 1540 "../hsp3/hsp3code.cpp"
 $22 = HEAP32[1384>>2]|0; //@line 1541 "../hsp3/hsp3code.cpp"
 if ((($22|0) == 4)) {
  $28 = HEAP32[600>>2]|0; //@line 1549 "../hsp3/hsp3code.cpp"
  $29 = (($28) + 784|0); //@line 1549 "../hsp3/hsp3code.cpp"
  $ptr = $29; //@line 1549 "../hsp3/hsp3code.cpp"
 } else if ((($22|0) == 3)) {
  $26 = HEAP32[600>>2]|0; //@line 1546 "../hsp3/hsp3code.cpp"
  $27 = (($26) + 864|0); //@line 1546 "../hsp3/hsp3code.cpp"
  $ptr = $27; //@line 1546 "../hsp3/hsp3code.cpp"
 } else if ((($22|0) == 2)) {
  $23 = HEAP32[600>>2]|0; //@line 1543 "../hsp3/hsp3code.cpp"
  $24 = (($23) + 792|0); //@line 1543 "../hsp3/hsp3code.cpp"
  $25 = HEAP32[$24>>2]|0; //@line 1543 "../hsp3/hsp3code.cpp"
  $ptr = $25; //@line 1543 "../hsp3/hsp3code.cpp"
 } else {
  $30 = HEAP32[600>>2]|0; //@line 1552 "../hsp3/hsp3code.cpp"
  $31 = (($30) + 236|0); //@line 1552 "../hsp3/hsp3code.cpp"
  $32 = HEAP32[$31>>2]|0; //@line 1552 "../hsp3/hsp3code.cpp"
  $33 = ($32|0)==(4); //@line 1552 "../hsp3/hsp3code.cpp"
  if ($33) {
   $34 = (___cxa_allocate_exception(4)|0); //@line 1553 "../hsp3/hsp3code.cpp"
   HEAP32[$34>>2] = 0; //@line 1553 "../hsp3/hsp3code.cpp"
   ___cxa_throw(($34|0),(624|0),(0|0)); //@line 1553 "../hsp3/hsp3code.cpp"
   // unreachable; //@line 1553 "../hsp3/hsp3code.cpp"
  } else {
   $35 = (___cxa_allocate_exception(4)|0); //@line 1555 "../hsp3/hsp3code.cpp"
   HEAP32[$35>>2] = 40; //@line 1555 "../hsp3/hsp3code.cpp"
   ___cxa_throw(($35|0),(624|0),(0|0)); //@line 1555 "../hsp3/hsp3code.cpp"
   // unreachable; //@line 1555 "../hsp3/hsp3code.cpp"
  }
 }
 $36 = HEAP32[640>>2]|0; //@line 1560 "../hsp3/hsp3code.cpp"
 $37 = ($36|0)!=(0); //@line 1560 "../hsp3/hsp3code.cpp"
 if ($37) {
  $38 = (___cxa_allocate_exception(4)|0); //@line 1560 "../hsp3/hsp3code.cpp"
  HEAP32[$38>>2] = 32; //@line 1560 "../hsp3/hsp3code.cpp"
  ___cxa_throw(($38|0),(624|0),(0|0)); //@line 1560 "../hsp3/hsp3code.cpp"
  // unreachable; //@line 1560 "../hsp3/hsp3code.cpp"
 }
 $39 = HEAP32[648>>2]|0; //@line 1561 "../hsp3/hsp3code.cpp"
 $40 = ($39|0)!=(41); //@line 1561 "../hsp3/hsp3code.cpp"
 if ($40) {
  $41 = (___cxa_allocate_exception(4)|0); //@line 1561 "../hsp3/hsp3code.cpp"
  HEAP32[$41>>2] = 32; //@line 1561 "../hsp3/hsp3code.cpp"
  ___cxa_throw(($41|0),(624|0),(0|0)); //@line 1561 "../hsp3/hsp3code.cpp"
  // unreachable; //@line 1561 "../hsp3/hsp3code.cpp"
 } else {
  __Z9code_nextv(); //@line 1562 "../hsp3/hsp3code.cpp"
  $42 = $old_funcres; //@line 1564 "../hsp3/hsp3code.cpp"
  HEAP32[1384>>2] = $42; //@line 1564 "../hsp3/hsp3code.cpp"
  $43 = $ptr; //@line 1565 "../hsp3/hsp3code.cpp"
  STACKTOP = sp;return ($43|0); //@line 1565 "../hsp3/hsp3code.cpp"
 }
 return 0|0;
}
function __ZL14reffunc_sysvarPii($type_res,$arg) {
 $type_res = $type_res|0;
 $arg = $arg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $type_res;
 $1 = $arg;
 $2 = $0; //@line 2135 "../hsp3/hsp3code.cpp"
 HEAP32[$2>>2] = 4; //@line 2135 "../hsp3/hsp3code.cpp"
 $ptr = 1392; //@line 2136 "../hsp3/hsp3code.cpp"
 $3 = $1; //@line 2138 "../hsp3/hsp3code.cpp"
 do {
  switch ($3|0) {
  case 2:  {
   HEAP32[1392>>2] = 13318; //@line 2148 "../hsp3/hsp3code.cpp"
   break;
  }
  case 4:  {
   $10 = HEAP32[600>>2]|0; //@line 2154 "../hsp3/hsp3code.cpp"
   $11 = (($10) + 772|0); //@line 2154 "../hsp3/hsp3code.cpp"
   $12 = HEAP32[$11>>2]|0; //@line 2154 "../hsp3/hsp3code.cpp"
   $13 = HEAP32[600>>2]|0; //@line 2154 "../hsp3/hsp3code.cpp"
   $14 = (($13) + 260|0); //@line 2154 "../hsp3/hsp3code.cpp"
   $15 = (($14) + ($12<<4)|0); //@line 2154 "../hsp3/hsp3code.cpp"
   $16 = (($15) + 4|0); //@line 2154 "../hsp3/hsp3code.cpp"
   $17 = HEAP32[$16>>2]|0; //@line 2154 "../hsp3/hsp3code.cpp"
   HEAP32[1392>>2] = $17; //@line 2154 "../hsp3/hsp3code.cpp"
   break;
  }
  case 5:  {
   $18 = HEAP32[600>>2]|0; //@line 2157 "../hsp3/hsp3code.cpp"
   $19 = (($18) + 776|0); //@line 2157 "../hsp3/hsp3code.cpp"
   $20 = HEAP32[$19>>2]|0; //@line 2157 "../hsp3/hsp3code.cpp"
   HEAP32[1392>>2] = $20; //@line 2157 "../hsp3/hsp3code.cpp"
   break;
  }
  case 0:  {
   HEAP32[1392>>2] = 0; //@line 2142 "../hsp3/hsp3code.cpp"
   break;
  }
  case 3:  {
   $7 = HEAP32[600>>2]|0; //@line 2151 "../hsp3/hsp3code.cpp"
   $8 = (($7) + 784|0); //@line 2151 "../hsp3/hsp3code.cpp"
   $9 = HEAP32[$8>>2]|0; //@line 2151 "../hsp3/hsp3code.cpp"
   HEAP32[1392>>2] = $9; //@line 2151 "../hsp3/hsp3code.cpp"
   break;
  }
  case 1:  {
   $4 = HEAP32[600>>2]|0; //@line 2145 "../hsp3/hsp3code.cpp"
   $5 = (($4) + 780|0); //@line 2145 "../hsp3/hsp3code.cpp"
   $6 = HEAP32[$5>>2]|0; //@line 2145 "../hsp3/hsp3code.cpp"
   HEAP32[1392>>2] = $6; //@line 2145 "../hsp3/hsp3code.cpp"
   break;
  }
  case 10:  {
   $33 = HEAP32[600>>2]|0; //@line 2173 "../hsp3/hsp3code.cpp"
   $34 = (($33) + 36|0); //@line 2173 "../hsp3/hsp3code.cpp"
   $35 = HEAP32[$34>>2]|0; //@line 2173 "../hsp3/hsp3code.cpp"
   HEAP32[1392>>2] = $35; //@line 2173 "../hsp3/hsp3code.cpp"
   break;
  }
  case 7:  {
   $24 = HEAP32[600>>2]|0; //@line 2163 "../hsp3/hsp3code.cpp"
   $25 = (($24) + 772|0); //@line 2163 "../hsp3/hsp3code.cpp"
   $26 = HEAP32[$25>>2]|0; //@line 2163 "../hsp3/hsp3code.cpp"
   HEAP32[1392>>2] = $26; //@line 2163 "../hsp3/hsp3code.cpp"
   break;
  }
  case 6:  {
   $21 = HEAP32[600>>2]|0; //@line 2160 "../hsp3/hsp3code.cpp"
   $22 = (($21) + 788|0); //@line 2160 "../hsp3/hsp3code.cpp"
   $23 = HEAP32[$22>>2]|0; //@line 2160 "../hsp3/hsp3code.cpp"
   HEAP32[1392>>2] = $23; //@line 2160 "../hsp3/hsp3code.cpp"
   break;
  }
  case 9:  {
   $30 = HEAP32[600>>2]|0; //@line 2170 "../hsp3/hsp3code.cpp"
   $31 = (($30) + 32|0); //@line 2170 "../hsp3/hsp3code.cpp"
   $32 = HEAP32[$31>>2]|0; //@line 2170 "../hsp3/hsp3code.cpp"
   HEAP32[1392>>2] = $32; //@line 2170 "../hsp3/hsp3code.cpp"
   break;
  }
  case 11:  {
   $36 = HEAP32[600>>2]|0; //@line 2176 "../hsp3/hsp3code.cpp"
   $37 = (($36) + 40|0); //@line 2176 "../hsp3/hsp3code.cpp"
   $38 = HEAP32[$37>>2]|0; //@line 2176 "../hsp3/hsp3code.cpp"
   HEAP32[1392>>2] = $38; //@line 2176 "../hsp3/hsp3code.cpp"
   break;
  }
  case 13:  {
   $43 = $0; //@line 2183 "../hsp3/hsp3code.cpp"
   HEAP32[$43>>2] = 3; //@line 2183 "../hsp3/hsp3code.cpp"
   $44 = HEAP32[600>>2]|0; //@line 2184 "../hsp3/hsp3code.cpp"
   $45 = (($44) + 864|0); //@line 2184 "../hsp3/hsp3code.cpp"
   $ptr = $45; //@line 2184 "../hsp3/hsp3code.cpp"
   break;
  }
  case 12:  {
   $39 = $0; //@line 2179 "../hsp3/hsp3code.cpp"
   HEAP32[$39>>2] = 2; //@line 2179 "../hsp3/hsp3code.cpp"
   $40 = HEAP32[600>>2]|0; //@line 2180 "../hsp3/hsp3code.cpp"
   $41 = (($40) + 792|0); //@line 2180 "../hsp3/hsp3code.cpp"
   $42 = HEAP32[$41>>2]|0; //@line 2180 "../hsp3/hsp3code.cpp"
   $ptr = $42; //@line 2180 "../hsp3/hsp3code.cpp"
   break;
  }
  case 8:  {
   $27 = HEAP32[600>>2]|0; //@line 2166 "../hsp3/hsp3code.cpp"
   $28 = (($27) + 256|0); //@line 2166 "../hsp3/hsp3code.cpp"
   $29 = HEAP32[$28>>2]|0; //@line 2166 "../hsp3/hsp3code.cpp"
   HEAP32[1392>>2] = $29; //@line 2166 "../hsp3/hsp3code.cpp"
   break;
  }
  default: {
   $46 = (___cxa_allocate_exception(4)|0); //@line 2188 "../hsp3/hsp3code.cpp"
   HEAP32[$46>>2] = 21; //@line 2188 "../hsp3/hsp3code.cpp"
   ___cxa_throw(($46|0),(624|0),(0|0)); //@line 2188 "../hsp3/hsp3code.cpp"
   // unreachable; //@line 2188 "../hsp3/hsp3code.cpp"
  }
  }
 } while(0);
 $47 = $ptr; //@line 2190 "../hsp3/hsp3code.cpp"
 STACKTOP = sp;return ($47|0); //@line 2190 "../hsp3/hsp3code.cpp"
}
function __ZL13cmdfunc_ifcmdi($cmd) {
 $cmd = $cmd|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $mcstmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $cmd;
 $2 = HEAP32[688>>2]|0; //@line 1704 "../hsp3/hsp3code.cpp"
 $3 = HEAP16[$2>>1]|0; //@line 1704 "../hsp3/hsp3code.cpp"
 $4 = $3&65535; //@line 1704 "../hsp3/hsp3code.cpp"
 $i = $4; //@line 1704 "../hsp3/hsp3code.cpp"
 $5 = HEAP32[688>>2]|0; //@line 1704 "../hsp3/hsp3code.cpp"
 $6 = (($5) + 2|0); //@line 1704 "../hsp3/hsp3code.cpp"
 HEAP32[688>>2] = $6; //@line 1704 "../hsp3/hsp3code.cpp"
 $7 = HEAP32[688>>2]|0; //@line 1705 "../hsp3/hsp3code.cpp"
 $8 = $i; //@line 1705 "../hsp3/hsp3code.cpp"
 $9 = (($7) + ($8<<1)|0); //@line 1705 "../hsp3/hsp3code.cpp"
 $mcstmp = $9; //@line 1705 "../hsp3/hsp3code.cpp"
 $10 = HEAP32[648>>2]|0; //@line 1706 "../hsp3/hsp3code.cpp"
 $11 = ($10|0)==(0); //@line 1706 "../hsp3/hsp3code.cpp"
 do {
  if ($11) {
   __Z9code_nextv(); //@line 1707 "../hsp3/hsp3code.cpp"
   $12 = (__Z9code_getiv()|0); //@line 1708 "../hsp3/hsp3code.cpp"
   $13 = ($12|0)!=(0); //@line 1708 "../hsp3/hsp3code.cpp"
   if (!($13)) {
    break;
   }
   $0 = 0; //@line 1708 "../hsp3/hsp3code.cpp"
   $15 = $0; //@line 1712 "../hsp3/hsp3code.cpp"
   STACKTOP = sp;return ($15|0); //@line 1712 "../hsp3/hsp3code.cpp"
  }
 } while(0);
 $14 = $mcstmp; //@line 1710 "../hsp3/hsp3code.cpp"
 HEAP32[688>>2] = $14; //@line 1710 "../hsp3/hsp3code.cpp"
 __Z9code_nextv(); //@line 1711 "../hsp3/hsp3code.cpp"
 $0 = 0; //@line 1712 "../hsp3/hsp3code.cpp"
 $15 = $0; //@line 1712 "../hsp3/hsp3code.cpp"
 STACKTOP = sp;return ($15|0); //@line 1712 "../hsp3/hsp3code.cpp"
}
function __ZL12cmdfunc_progi($cmd) {
 $cmd = $cmd|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $aptr = 0, $aptr12 = 0, $aptr14 = 0, $aptr17 = 0, $aptr23 = 0, $fl = 0, $fv = 0, $i = 0, $i18 = 0, $i25 = 0, $ival = 0, $label = 0;
 var $label19 = 0, $label20 = 0, $label24 = 0, $label3 = 0, $label5 = 0, $label8 = 0, $lop = 0, $lop1 = 0, $lop2 = 0, $lop4 = 0, $lop7 = 0, $otbak = 0, $p = 0, $prm = 0, $proc = 0, $pval = 0, $pval11 = 0, $pval13 = 0, $pval16 = 0, $pval21 = 0;
 var $pval22 = 0, $pval6 = 0, $pval9 = 0, $pval_m = 0, $pval_m10 = 0, $pval_m15 = 0, $sbr = 0, $st = 0, $varproc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0;
 $pval9 = sp + 96|0;
 $pval11 = sp + 36|0;
 $pval13 = sp + 16|0;
 $pval16 = sp;
 $pval22 = sp + 68|0;
 $label24 = sp + 76|0;
 $1 = $cmd;
 __Z9code_nextv(); //@line 1743 "../hsp3/hsp3code.cpp"
 $2 = $1; //@line 1745 "../hsp3/hsp3code.cpp"
 L1: do {
  switch ($2|0) {
  case 7:  {
   $106 = (__Z10code_getdii(100)|0); //@line 1840 "../hsp3/hsp3code.cpp"
   $107 = HEAP32[600>>2]|0; //@line 1840 "../hsp3/hsp3code.cpp"
   $108 = (($107) + 240|0); //@line 1840 "../hsp3/hsp3code.cpp"
   HEAP32[$108>>2] = $106; //@line 1840 "../hsp3/hsp3code.cpp"
   $109 = HEAP32[600>>2]|0; //@line 1841 "../hsp3/hsp3code.cpp"
   $110 = (($109) + 236|0); //@line 1841 "../hsp3/hsp3code.cpp"
   HEAP32[$110>>2] = 1; //@line 1841 "../hsp3/hsp3code.cpp"
   $0 = 1; //@line 1842 "../hsp3/hsp3code.cpp"
   $407 = $0; //@line 2123 "../hsp3/hsp3code.cpp"
   STACKTOP = sp;return ($407|0); //@line 2123 "../hsp3/hsp3code.cpp"
   break;
  }
  case 16:  {
   $244 = (__Z10code_getdii(0)|0); //@line 1946 "../hsp3/hsp3code.cpp"
   $245 = HEAP32[600>>2]|0; //@line 1946 "../hsp3/hsp3code.cpp"
   $246 = (($245) + 848|0); //@line 1946 "../hsp3/hsp3code.cpp"
   HEAP32[$246>>2] = $244; //@line 1946 "../hsp3/hsp3code.cpp"
   $247 = HEAP32[600>>2]|0; //@line 1947 "../hsp3/hsp3code.cpp"
   $248 = (($247) + 236|0); //@line 1947 "../hsp3/hsp3code.cpp"
   HEAP32[$248>>2] = 4; //@line 1947 "../hsp3/hsp3code.cpp"
   $0 = 4; //@line 1948 "../hsp3/hsp3code.cpp"
   $407 = $0; //@line 2123 "../hsp3/hsp3code.cpp"
   STACKTOP = sp;return ($407|0); //@line 2123 "../hsp3/hsp3code.cpp"
   break;
  }
  case 20:  {
   $307 = (__Z10code_getvaPP4PVal($pval13)|0); //@line 1994 "../hsp3/hsp3code.cpp"
   $aptr14 = $307; //@line 1994 "../hsp3/hsp3code.cpp"
   $308 = HEAP32[$pval13>>2]|0; //@line 1995 "../hsp3/hsp3code.cpp"
   $309 = HEAP16[$308>>1]|0; //@line 1995 "../hsp3/hsp3code.cpp"
   $310 = $309 << 16 >> 16; //@line 1995 "../hsp3/hsp3code.cpp"
   $311 = ($310|0)!=(5); //@line 1995 "../hsp3/hsp3code.cpp"
   if ($311) {
    $312 = (___cxa_allocate_exception(4)|0); //@line 1995 "../hsp3/hsp3code.cpp"
    HEAP32[$312>>2] = 6; //@line 1995 "../hsp3/hsp3code.cpp"
    ___cxa_throw(($312|0),(624|0),(0|0)); //@line 1995 "../hsp3/hsp3code.cpp"
    // unreachable; //@line 1995 "../hsp3/hsp3code.cpp"
   } else {
    $313 = HEAP32[$pval13>>2]|0; //@line 1996 "../hsp3/hsp3code.cpp"
    $314 = $aptr14; //@line 1996 "../hsp3/hsp3code.cpp"
    __Z14code_delstructP4PVali($313,$314); //@line 1996 "../hsp3/hsp3code.cpp"
    break L1;
   }
   break;
  }
  case 24:  {
   $324 = (__Z10code_getvaPP4PVal($pval16)|0); //@line 2031 "../hsp3/hsp3code.cpp"
   $aptr17 = $324; //@line 2031 "../hsp3/hsp3code.cpp"
   $325 = HEAP32[$pval16>>2]|0; //@line 2032 "../hsp3/hsp3code.cpp"
   $326 = HEAP16[$325>>1]|0; //@line 2032 "../hsp3/hsp3code.cpp"
   $327 = $326 << 16 >> 16; //@line 2032 "../hsp3/hsp3code.cpp"
   $328 = ($327|0)!=(4); //@line 2032 "../hsp3/hsp3code.cpp"
   if ($328) {
    $329 = (___cxa_allocate_exception(4)|0); //@line 2032 "../hsp3/hsp3code.cpp"
    HEAP32[$329>>2] = 6; //@line 2032 "../hsp3/hsp3code.cpp"
    ___cxa_throw(($329|0),(624|0),(0|0)); //@line 2032 "../hsp3/hsp3code.cpp"
    // unreachable; //@line 2032 "../hsp3/hsp3code.cpp"
   }
   $330 = HEAP32[$pval16>>2]|0; //@line 2033 "../hsp3/hsp3code.cpp"
   $331 = $aptr17; //@line 2033 "../hsp3/hsp3code.cpp"
   $332 = (__Z17HspVarCorePtrAPTRP4PVali($330,$331)|0); //@line 2033 "../hsp3/hsp3code.cpp"
   $ival = $332; //@line 2033 "../hsp3/hsp3code.cpp"
   $333 = (__Z10code_getdii(0)|0); //@line 2034 "../hsp3/hsp3code.cpp"
   HEAP32[1400>>2] = $333; //@line 2034 "../hsp3/hsp3code.cpp"
   $334 = (__Z10code_getdii(0)|0); //@line 2035 "../hsp3/hsp3code.cpp"
   HEAP32[1408>>2] = $334; //@line 2035 "../hsp3/hsp3code.cpp"
   $335 = (__Z11code_getlb2v()|0); //@line 2036 "../hsp3/hsp3code.cpp"
   $label19 = $335; //@line 2036 "../hsp3/hsp3code.cpp"
   $i18 = 0; //@line 2037 "../hsp3/hsp3code.cpp"
   $336 = HEAP32[1400>>2]|0; //@line 2038 "../hsp3/hsp3code.cpp"
   $337 = ($336|0)>=(0); //@line 2038 "../hsp3/hsp3code.cpp"
   if ($337) {
    $338 = $ival; //@line 2039 "../hsp3/hsp3code.cpp"
    $339 = HEAP32[$338>>2]|0; //@line 2039 "../hsp3/hsp3code.cpp"
    $340 = HEAP32[1408>>2]|0; //@line 2039 "../hsp3/hsp3code.cpp"
    $341 = ($339|0)>=($340|0); //@line 2039 "../hsp3/hsp3code.cpp"
    if ($341) {
     $342 = $i18; //@line 2039 "../hsp3/hsp3code.cpp"
     $343 = (($342) + 1)|0; //@line 2039 "../hsp3/hsp3code.cpp"
     $i18 = $343; //@line 2039 "../hsp3/hsp3code.cpp"
    }
   } else {
    $344 = $ival; //@line 2041 "../hsp3/hsp3code.cpp"
    $345 = HEAP32[$344>>2]|0; //@line 2041 "../hsp3/hsp3code.cpp"
    $346 = HEAP32[1408>>2]|0; //@line 2041 "../hsp3/hsp3code.cpp"
    $347 = ($345|0)<=($346|0); //@line 2041 "../hsp3/hsp3code.cpp"
    if ($347) {
     $348 = $i18; //@line 2041 "../hsp3/hsp3code.cpp"
     $349 = (($348) + 1)|0; //@line 2041 "../hsp3/hsp3code.cpp"
     $i18 = $349; //@line 2041 "../hsp3/hsp3code.cpp"
    }
   }
   $350 = $i18; //@line 2043 "../hsp3/hsp3code.cpp"
   $351 = ($350|0)!=(0); //@line 2043 "../hsp3/hsp3code.cpp"
   if ($351) {
    $352 = $label19; //@line 2043 "../hsp3/hsp3code.cpp"
    __Z10code_setpcPKt($352); //@line 2043 "../hsp3/hsp3code.cpp"
   }
   break;
  }
  case 23:  {
   $319 = HEAP32[600>>2]|0; //@line 2020 "../hsp3/hsp3code.cpp"
   $320 = (($319) + 792|0); //@line 2020 "../hsp3/hsp3code.cpp"
   $321 = (__Z9code_getsv()|0); //@line 2020 "../hsp3/hsp3code.cpp"
   __Z9sbStrCopyPPcS_($320,$321); //@line 2020 "../hsp3/hsp3code.cpp"
   $322 = (__Z10code_getdsPKc(744)|0); //@line 2021 "../hsp3/hsp3code.cpp"
   (__Z12code_stmpstrPc($322)|0); //@line 2021 "../hsp3/hsp3code.cpp"
   $323 = (___cxa_allocate_exception(4)|0); //@line 2022 "../hsp3/hsp3code.cpp"
   HEAP32[$323>>2] = 43; //@line 2022 "../hsp3/hsp3code.cpp"
   ___cxa_throw(($323|0),(624|0),(0|0)); //@line 2022 "../hsp3/hsp3code.cpp"
   // unreachable; //@line 2022 "../hsp3/hsp3code.cpp"
   break;
  }
  case 22:  {
   $315 = (__Z12code_getpvalv()|0); //@line 2014 "../hsp3/hsp3code.cpp"
   $pval_m15 = $315; //@line 2014 "../hsp3/hsp3code.cpp"
   $316 = (__Z9code_getiv()|0); //@line 2015 "../hsp3/hsp3code.cpp"
   HEAP32[1400>>2] = $316; //@line 2015 "../hsp3/hsp3code.cpp"
   $317 = $pval_m15; //@line 2016 "../hsp3/hsp3code.cpp"
   $318 = HEAP32[1400>>2]|0; //@line 2016 "../hsp3/hsp3code.cpp"
   __ZL12cmdfunc_mrefP4PVali($317,$318); //@line 2016 "../hsp3/hsp3code.cpp"
   break;
  }
  case 27:  {
   $249 = (__Z10code_getdii(0)|0); //@line 1950 "../hsp3/hsp3code.cpp"
   HEAP32[1400>>2] = $249; //@line 1950 "../hsp3/hsp3code.cpp"
   $250 = HEAP32[1400>>2]|0; //@line 1951 "../hsp3/hsp3code.cpp"
   $251 = ($250|0)!=(0); //@line 1951 "../hsp3/hsp3code.cpp"
   if ($251) {
    break L1;
   }
   $252 = HEAP32[600>>2]|0; //@line 1952 "../hsp3/hsp3code.cpp"
   $253 = (($252) + 236|0); //@line 1952 "../hsp3/hsp3code.cpp"
   HEAP32[$253>>2] = 8; //@line 1952 "../hsp3/hsp3code.cpp"
   $0 = 8; //@line 1953 "../hsp3/hsp3code.cpp"
   $407 = $0; //@line 2123 "../hsp3/hsp3code.cpp"
   STACKTOP = sp;return ($407|0); //@line 2123 "../hsp3/hsp3code.cpp"
   break;
  }
  case 17:  {
   $254 = HEAP32[600>>2]|0; //@line 1955 "../hsp3/hsp3code.cpp"
   $255 = (($254) + 236|0); //@line 1955 "../hsp3/hsp3code.cpp"
   HEAP32[$255>>2] = 3; //@line 1955 "../hsp3/hsp3code.cpp"
   $0 = 3; //@line 1956 "../hsp3/hsp3code.cpp"
   $407 = $0; //@line 2123 "../hsp3/hsp3code.cpp"
   STACKTOP = sp;return ($407|0); //@line 2123 "../hsp3/hsp3code.cpp"
   break;
  }
  case 19: case 18:  {
   $256 = $1; //@line 1967 "../hsp3/hsp3code.cpp"
   $257 = ($256|0)==(18); //@line 1967 "../hsp3/hsp3code.cpp"
   if ($257) {
    $258 = (__Z12code_getpvalv()|0); //@line 1968 "../hsp3/hsp3code.cpp"
    HEAP32[$pval11>>2] = $258; //@line 1968 "../hsp3/hsp3code.cpp"
    $259 = HEAP32[$pval11>>2]|0; //@line 1969 "../hsp3/hsp3code.cpp"
    $260 = (__Z14code_newstructP4PVal($259)|0); //@line 1969 "../hsp3/hsp3code.cpp"
    $aptr12 = $260; //@line 1969 "../hsp3/hsp3code.cpp"
   } else {
    $261 = (__Z10code_getvaPP4PVal($pval11)|0); //@line 1971 "../hsp3/hsp3code.cpp"
    $aptr12 = $261; //@line 1971 "../hsp3/hsp3code.cpp"
   }
   $262 = (__Z14code_getstructv()|0); //@line 1973 "../hsp3/hsp3code.cpp"
   $st = $262; //@line 1973 "../hsp3/hsp3code.cpp"
   $263 = HEAP32[$pval11>>2]|0; //@line 1974 "../hsp3/hsp3code.cpp"
   $264 = $aptr12; //@line 1974 "../hsp3/hsp3code.cpp"
   $265 = $st; //@line 1974 "../hsp3/hsp3code.cpp"
   $266 = (($265) + 16|0); //@line 1974 "../hsp3/hsp3code.cpp"
   $267 = HEAP32[$266>>2]|0; //@line 1974 "../hsp3/hsp3code.cpp"
   $268 = $st; //@line 1974 "../hsp3/hsp3code.cpp"
   $269 = (($268) + 4|0); //@line 1974 "../hsp3/hsp3code.cpp"
   $270 = HEAP32[$269>>2]|0; //@line 1974 "../hsp3/hsp3code.cpp"
   $271 = (__Z10code_setvsP4PValiPvii($263,$264,0,$267,$270)|0); //@line 1974 "../hsp3/hsp3code.cpp"
   $fv = $271; //@line 1974 "../hsp3/hsp3code.cpp"
   $272 = $fv; //@line 1975 "../hsp3/hsp3code.cpp"
   HEAP16[$272>>1] = 1; //@line 1975 "../hsp3/hsp3code.cpp"
   $273 = $fv; //@line 1976 "../hsp3/hsp3code.cpp"
   $274 = (($273) + 8|0); //@line 1976 "../hsp3/hsp3code.cpp"
   $275 = HEAP32[$274>>2]|0; //@line 1976 "../hsp3/hsp3code.cpp"
   $276 = (__Z7sbAlloci($275)|0); //@line 1976 "../hsp3/hsp3code.cpp"
   $p = $276; //@line 1976 "../hsp3/hsp3code.cpp"
   $277 = $p; //@line 1977 "../hsp3/hsp3code.cpp"
   $278 = $fv; //@line 1977 "../hsp3/hsp3code.cpp"
   $279 = (($278) + 12|0); //@line 1977 "../hsp3/hsp3code.cpp"
   HEAP32[$279>>2] = $277; //@line 1977 "../hsp3/hsp3code.cpp"
   $280 = $st; //@line 1978 "../hsp3/hsp3code.cpp"
   $281 = (($280) + 4|0); //@line 1978 "../hsp3/hsp3code.cpp"
   $282 = HEAP32[$281>>2]|0; //@line 1978 "../hsp3/hsp3code.cpp"
   $283 = HEAP32[600>>2]|0; //@line 1978 "../hsp3/hsp3code.cpp"
   $284 = (($283) + 836|0); //@line 1978 "../hsp3/hsp3code.cpp"
   $285 = HEAP32[$284>>2]|0; //@line 1978 "../hsp3/hsp3code.cpp"
   $286 = (($285) + ($282<<3)|0); //@line 1978 "../hsp3/hsp3code.cpp"
   $prm = $286; //@line 1978 "../hsp3/hsp3code.cpp"
   $287 = $prm; //@line 1979 "../hsp3/hsp3code.cpp"
   $288 = HEAP16[$287>>1]|0; //@line 1979 "../hsp3/hsp3code.cpp"
   $289 = $288 << 16 >> 16; //@line 1979 "../hsp3/hsp3code.cpp"
   $290 = ($289|0)!=(-5); //@line 1979 "../hsp3/hsp3code.cpp"
   if ($290) {
    $291 = (___cxa_allocate_exception(4)|0); //@line 1979 "../hsp3/hsp3code.cpp"
    HEAP32[$291>>2] = 35; //@line 1979 "../hsp3/hsp3code.cpp"
    ___cxa_throw(($291|0),(624|0),(0|0)); //@line 1979 "../hsp3/hsp3code.cpp"
    // unreachable; //@line 1979 "../hsp3/hsp3code.cpp"
   }
   $292 = $p; //@line 1980 "../hsp3/hsp3code.cpp"
   $293 = $st; //@line 1980 "../hsp3/hsp3code.cpp"
   __Z17code_expandstructPcP9STRUCTDATi($292,$293,0); //@line 1980 "../hsp3/hsp3code.cpp"
   $294 = $prm; //@line 1981 "../hsp3/hsp3code.cpp"
   $295 = (($294) + 4|0); //@line 1981 "../hsp3/hsp3code.cpp"
   $296 = HEAP32[$295>>2]|0; //@line 1981 "../hsp3/hsp3code.cpp"
   $297 = ($296|0)!=(-1); //@line 1981 "../hsp3/hsp3code.cpp"
   if (!($297)) {
    break L1;
   }
   HEAP16[((696 + 2|0))>>1] = 21930; //@line 1982 "../hsp3/hsp3code.cpp"
   $298 = $prm; //@line 1983 "../hsp3/hsp3code.cpp"
   $299 = (($298) + 2|0); //@line 1983 "../hsp3/hsp3code.cpp"
   $300 = HEAP16[$299>>1]|0; //@line 1983 "../hsp3/hsp3code.cpp"
   HEAP16[696>>1] = $300; //@line 1983 "../hsp3/hsp3code.cpp"
   $301 = HEAP32[$pval11>>2]|0; //@line 1984 "../hsp3/hsp3code.cpp"
   HEAP32[((696 + 4|0))>>2] = $301; //@line 1984 "../hsp3/hsp3code.cpp"
   $302 = $aptr12; //@line 1985 "../hsp3/hsp3code.cpp"
   HEAP32[((696 + 8|0))>>2] = $302; //@line 1985 "../hsp3/hsp3code.cpp"
   $303 = $prm; //@line 1986 "../hsp3/hsp3code.cpp"
   $304 = (($303) + 4|0); //@line 1986 "../hsp3/hsp3code.cpp"
   $305 = HEAP32[$304>>2]|0; //@line 1986 "../hsp3/hsp3code.cpp"
   $306 = (__ZL13code_callfunci($305)|0); //@line 1986 "../hsp3/hsp3code.cpp"
   $0 = $306; //@line 1986 "../hsp3/hsp3code.cpp"
   $407 = $0; //@line 2123 "../hsp3/hsp3code.cpp"
   STACKTOP = sp;return ($407|0); //@line 2123 "../hsp3/hsp3code.cpp"
   break;
  }
  case 13: case 10: case 9:  {
   $119 = (__Z12code_getpvalv()|0); //@line 1860 "../hsp3/hsp3code.cpp"
   $pval = $119; //@line 1860 "../hsp3/hsp3code.cpp"
   $fl = 4; //@line 1861 "../hsp3/hsp3code.cpp"
   $120 = $1; //@line 1862 "../hsp3/hsp3code.cpp"
   $121 = ($120|0)==(13); //@line 1862 "../hsp3/hsp3code.cpp"
   do {
    if ($121) {
     $122 = (__Z9code_getiv()|0); //@line 1863 "../hsp3/hsp3code.cpp"
     $fl = $122; //@line 1863 "../hsp3/hsp3code.cpp"
     $123 = $fl; //@line 1864 "../hsp3/hsp3code.cpp"
     $124 = HEAP32[3456>>2]|0; //@line 1864 "../hsp3/hsp3code.cpp"
     $125 = (($124) + (($123*140)|0)|0); //@line 1864 "../hsp3/hsp3code.cpp"
     $proc = $125; //@line 1864 "../hsp3/hsp3code.cpp"
     $126 = $proc; //@line 1865 "../hsp3/hsp3code.cpp"
     $127 = HEAP16[$126>>1]|0; //@line 1865 "../hsp3/hsp3code.cpp"
     $128 = $127 << 16 >> 16; //@line 1865 "../hsp3/hsp3code.cpp"
     $129 = ($128|0)==(0); //@line 1865 "../hsp3/hsp3code.cpp"
     if ($129) {
      $130 = (___cxa_allocate_exception(4)|0); //@line 1865 "../hsp3/hsp3code.cpp"
      HEAP32[$130>>2] = 3; //@line 1865 "../hsp3/hsp3code.cpp"
      ___cxa_throw(($130|0),(624|0),(0|0)); //@line 1865 "../hsp3/hsp3code.cpp"
      // unreachable; //@line 1865 "../hsp3/hsp3code.cpp"
     } else {
      break;
     }
    }
   } while(0);
   $131 = (__Z10code_getdii(0)|0); //@line 1867 "../hsp3/hsp3code.cpp"
   HEAP32[1400>>2] = $131; //@line 1867 "../hsp3/hsp3code.cpp"
   $132 = (__Z10code_getdii(0)|0); //@line 1868 "../hsp3/hsp3code.cpp"
   HEAP32[1408>>2] = $132; //@line 1868 "../hsp3/hsp3code.cpp"
   $133 = (__Z10code_getdii(0)|0); //@line 1869 "../hsp3/hsp3code.cpp"
   HEAP32[1416>>2] = $133; //@line 1869 "../hsp3/hsp3code.cpp"
   $134 = (__Z10code_getdii(0)|0); //@line 1870 "../hsp3/hsp3code.cpp"
   HEAP32[1424>>2] = $134; //@line 1870 "../hsp3/hsp3code.cpp"
   $135 = $1; //@line 1871 "../hsp3/hsp3code.cpp"
   $136 = ($135|0)==(10); //@line 1871 "../hsp3/hsp3code.cpp"
   if ($136) {
    $137 = (__Z10code_getdii(0)|0); //@line 1872 "../hsp3/hsp3code.cpp"
    HEAP32[1432>>2] = $137; //@line 1872 "../hsp3/hsp3code.cpp"
    $138 = $pval; //@line 1873 "../hsp3/hsp3code.cpp"
    $139 = HEAP32[1400>>2]|0; //@line 1873 "../hsp3/hsp3code.cpp"
    $140 = HEAP32[1408>>2]|0; //@line 1873 "../hsp3/hsp3code.cpp"
    $141 = HEAP32[1416>>2]|0; //@line 1873 "../hsp3/hsp3code.cpp"
    $142 = HEAP32[1424>>2]|0; //@line 1873 "../hsp3/hsp3code.cpp"
    $143 = HEAP32[1432>>2]|0; //@line 1873 "../hsp3/hsp3code.cpp"
    __Z17HspVarCoreDimFlexP4PValiiiiii($138,2,$139,$140,$141,$142,$143); //@line 1873 "../hsp3/hsp3code.cpp"
    break L1;
   } else {
    $144 = $pval; //@line 1877 "../hsp3/hsp3code.cpp"
    $145 = $fl; //@line 1877 "../hsp3/hsp3code.cpp"
    $146 = HEAP32[1400>>2]|0; //@line 1877 "../hsp3/hsp3code.cpp"
    $147 = HEAP32[1408>>2]|0; //@line 1877 "../hsp3/hsp3code.cpp"
    $148 = HEAP32[1416>>2]|0; //@line 1877 "../hsp3/hsp3code.cpp"
    $149 = HEAP32[1424>>2]|0; //@line 1877 "../hsp3/hsp3code.cpp"
    __Z13HspVarCoreDimP4PValiiiii($144,$145,$146,$147,$148,$149); //@line 1877 "../hsp3/hsp3code.cpp"
    break L1;
   }
   break;
  }
  case 1:  {
   $4 = (__Z10code_getlbv()|0); //@line 1756 "../hsp3/hsp3code.cpp"
   $sbr = $4; //@line 1756 "../hsp3/hsp3code.cpp"
   $5 = $sbr; //@line 1757 "../hsp3/hsp3code.cpp"
   $6 = HEAP32[688>>2]|0; //@line 1757 "../hsp3/hsp3code.cpp"
   __ZL13cmdfunc_gosubPtS_($5,$6); //@line 1757 "../hsp3/hsp3code.cpp"
   break;
  }
  case 6:  {
   $88 = (__Z10code_getlbv()|0); //@line 1828 "../hsp3/hsp3code.cpp"
   $label3 = $88; //@line 1828 "../hsp3/hsp3code.cpp"
   $89 = HEAP32[600>>2]|0; //@line 1829 "../hsp3/hsp3code.cpp"
   $90 = (($89) + 772|0); //@line 1829 "../hsp3/hsp3code.cpp"
   $91 = HEAP32[$90>>2]|0; //@line 1829 "../hsp3/hsp3code.cpp"
   $92 = HEAP32[600>>2]|0; //@line 1829 "../hsp3/hsp3code.cpp"
   $93 = (($92) + 260|0); //@line 1829 "../hsp3/hsp3code.cpp"
   $94 = (($93) + ($91<<4)|0); //@line 1829 "../hsp3/hsp3code.cpp"
   $lop2 = $94; //@line 1829 "../hsp3/hsp3code.cpp"
   __Z9code_nextv(); //@line 1830 "../hsp3/hsp3code.cpp"
   $95 = $lop2; //@line 1831 "../hsp3/hsp3code.cpp"
   $96 = (($95) + 4|0); //@line 1831 "../hsp3/hsp3code.cpp"
   $97 = HEAP32[$96>>2]|0; //@line 1831 "../hsp3/hsp3code.cpp"
   $98 = (($97) + 1)|0; //@line 1831 "../hsp3/hsp3code.cpp"
   HEAP32[1408>>2] = $98; //@line 1831 "../hsp3/hsp3code.cpp"
   $99 = HEAP32[1408>>2]|0; //@line 1832 "../hsp3/hsp3code.cpp"
   $100 = (__Z10code_getdii($99)|0); //@line 1832 "../hsp3/hsp3code.cpp"
   HEAP32[1400>>2] = $100; //@line 1832 "../hsp3/hsp3code.cpp"
   $101 = HEAP32[1400>>2]|0; //@line 1833 "../hsp3/hsp3code.cpp"
   $102 = (($101) - 1)|0; //@line 1833 "../hsp3/hsp3code.cpp"
   $103 = $lop2; //@line 1833 "../hsp3/hsp3code.cpp"
   $104 = (($103) + 4|0); //@line 1833 "../hsp3/hsp3code.cpp"
   HEAP32[$104>>2] = $102; //@line 1833 "../hsp3/hsp3code.cpp"
   $105 = $label3; //@line 1834 "../hsp3/hsp3code.cpp"
   HEAP32[688>>2] = $105; //@line 1834 "../hsp3/hsp3code.cpp"
   HEAP32[648>>2] = 5; //@line 1835 "../hsp3/hsp3code.cpp"
   HEAP32[640>>2] = 15; //@line 1835 "../hsp3/hsp3code.cpp"
   HEAP32[632>>2] = 0; //@line 1835 "../hsp3/hsp3code.cpp"
   break;
  }
  case 8:  {
   $111 = (__Z10code_getdii(0)|0); //@line 1845 "../hsp3/hsp3code.cpp"
   HEAP32[1400>>2] = $111; //@line 1845 "../hsp3/hsp3code.cpp"
   $112 = HEAP32[1400>>2]|0; //@line 1847 "../hsp3/hsp3code.cpp"
   $113 = HEAP32[600>>2]|0; //@line 1847 "../hsp3/hsp3code.cpp"
   $114 = (($113) + 240|0); //@line 1847 "../hsp3/hsp3code.cpp"
   HEAP32[$114>>2] = $112; //@line 1847 "../hsp3/hsp3code.cpp"
   $115 = HEAP32[600>>2]|0; //@line 1848 "../hsp3/hsp3code.cpp"
   $116 = (($115) + 248|0); //@line 1848 "../hsp3/hsp3code.cpp"
   HEAP32[$116>>2] = -1; //@line 1848 "../hsp3/hsp3code.cpp"
   $117 = HEAP32[600>>2]|0; //@line 1850 "../hsp3/hsp3code.cpp"
   $118 = (($117) + 236|0); //@line 1850 "../hsp3/hsp3code.cpp"
   HEAP32[$118>>2] = 2; //@line 1850 "../hsp3/hsp3code.cpp"
   $0 = 2; //@line 1851 "../hsp3/hsp3code.cpp"
   $407 = $0; //@line 2123 "../hsp3/hsp3code.cpp"
   STACKTOP = sp;return ($407|0); //@line 2123 "../hsp3/hsp3code.cpp"
   break;
  }
  case 4:  {
   $23 = HEAP32[600>>2]|0; //@line 1788 "../hsp3/hsp3code.cpp"
   $24 = (($23) + 772|0); //@line 1788 "../hsp3/hsp3code.cpp"
   $25 = HEAP32[$24>>2]|0; //@line 1788 "../hsp3/hsp3code.cpp"
   $26 = ($25|0)>=(31); //@line 1788 "../hsp3/hsp3code.cpp"
   if ($26) {
    $27 = (___cxa_allocate_exception(4)|0); //@line 1788 "../hsp3/hsp3code.cpp"
    HEAP32[$27>>2] = 9; //@line 1788 "../hsp3/hsp3code.cpp"
    ___cxa_throw(($27|0),(624|0),(0|0)); //@line 1788 "../hsp3/hsp3code.cpp"
    // unreachable; //@line 1788 "../hsp3/hsp3code.cpp"
   }
   $28 = (__Z10code_getlbv()|0); //@line 1789 "../hsp3/hsp3code.cpp"
   $label = $28; //@line 1789 "../hsp3/hsp3code.cpp"
   __Z9code_nextv(); //@line 1790 "../hsp3/hsp3code.cpp"
   $29 = (__Z10code_getdii(-2147483648)|0); //@line 1791 "../hsp3/hsp3code.cpp"
   HEAP32[1400>>2] = $29; //@line 1791 "../hsp3/hsp3code.cpp"
   $30 = (__Z10code_getdii(0)|0); //@line 1792 "../hsp3/hsp3code.cpp"
   HEAP32[1408>>2] = $30; //@line 1792 "../hsp3/hsp3code.cpp"
   $31 = HEAP32[1400>>2]|0; //@line 1793 "../hsp3/hsp3code.cpp"
   $32 = ($31|0)==(0); //@line 1793 "../hsp3/hsp3code.cpp"
   if ($32) {
    $33 = $label; //@line 1794 "../hsp3/hsp3code.cpp"
    HEAP32[688>>2] = $33; //@line 1794 "../hsp3/hsp3code.cpp"
    __Z9code_nextv(); //@line 1795 "../hsp3/hsp3code.cpp"
    break L1;
   }
   $34 = HEAP32[1400>>2]|0; //@line 1798 "../hsp3/hsp3code.cpp"
   $35 = ($34|0)<(0); //@line 1798 "../hsp3/hsp3code.cpp"
   if ($35) {
    HEAP32[1400>>2] = -2147483648; //@line 1798 "../hsp3/hsp3code.cpp"
   } else {
    $36 = HEAP32[1408>>2]|0; //@line 1798 "../hsp3/hsp3code.cpp"
    $37 = HEAP32[1400>>2]|0; //@line 1798 "../hsp3/hsp3code.cpp"
    $38 = (($37) + ($36))|0; //@line 1798 "../hsp3/hsp3code.cpp"
    HEAP32[1400>>2] = $38; //@line 1798 "../hsp3/hsp3code.cpp"
   }
   $39 = HEAP32[600>>2]|0; //@line 1799 "../hsp3/hsp3code.cpp"
   $40 = (($39) + 772|0); //@line 1799 "../hsp3/hsp3code.cpp"
   $41 = HEAP32[$40>>2]|0; //@line 1799 "../hsp3/hsp3code.cpp"
   $42 = (($41) + 1)|0; //@line 1799 "../hsp3/hsp3code.cpp"
   HEAP32[$40>>2] = $42; //@line 1799 "../hsp3/hsp3code.cpp"
   $43 = HEAP32[600>>2]|0; //@line 1800 "../hsp3/hsp3code.cpp"
   $44 = (($43) + 772|0); //@line 1800 "../hsp3/hsp3code.cpp"
   $45 = HEAP32[$44>>2]|0; //@line 1800 "../hsp3/hsp3code.cpp"
   $46 = HEAP32[600>>2]|0; //@line 1800 "../hsp3/hsp3code.cpp"
   $47 = (($46) + 260|0); //@line 1800 "../hsp3/hsp3code.cpp"
   $48 = (($47) + ($45<<4)|0); //@line 1800 "../hsp3/hsp3code.cpp"
   $lop = $48; //@line 1800 "../hsp3/hsp3code.cpp"
   $49 = HEAP32[1408>>2]|0; //@line 1801 "../hsp3/hsp3code.cpp"
   $50 = $lop; //@line 1801 "../hsp3/hsp3code.cpp"
   $51 = (($50) + 4|0); //@line 1801 "../hsp3/hsp3code.cpp"
   HEAP32[$51>>2] = $49; //@line 1801 "../hsp3/hsp3code.cpp"
   $52 = HEAP32[1400>>2]|0; //@line 1802 "../hsp3/hsp3code.cpp"
   $53 = $lop; //@line 1802 "../hsp3/hsp3code.cpp"
   HEAP32[$53>>2] = $52; //@line 1802 "../hsp3/hsp3code.cpp"
   $54 = HEAP32[680>>2]|0; //@line 1803 "../hsp3/hsp3code.cpp"
   $55 = $lop; //@line 1803 "../hsp3/hsp3code.cpp"
   $56 = (($55) + 12|0); //@line 1803 "../hsp3/hsp3code.cpp"
   HEAP32[$56>>2] = $54; //@line 1803 "../hsp3/hsp3code.cpp"
   break;
  }
  case 14:  {
   $220 = (__Z12code_getpvalv()|0); //@line 1927 "../hsp3/hsp3code.cpp"
   $pval_m = $220; //@line 1927 "../hsp3/hsp3code.cpp"
   $221 = (__Z10code_getvaPP4PVal($pval9)|0); //@line 1928 "../hsp3/hsp3code.cpp"
   $aptr = $221; //@line 1928 "../hsp3/hsp3code.cpp"
   $222 = $pval_m; //@line 1929 "../hsp3/hsp3code.cpp"
   $223 = HEAP32[$pval9>>2]|0; //@line 1929 "../hsp3/hsp3code.cpp"
   $224 = $aptr; //@line 1929 "../hsp3/hsp3code.cpp"
   __Z13HspVarCoreDupP4PValS0_i($222,$223,$224); //@line 1929 "../hsp3/hsp3code.cpp"
   break;
  }
  case 15:  {
   $225 = (__Z12code_getpvalv()|0); //@line 1935 "../hsp3/hsp3code.cpp"
   $pval_m10 = $225; //@line 1935 "../hsp3/hsp3code.cpp"
   $226 = (__Z9code_getiv()|0); //@line 1936 "../hsp3/hsp3code.cpp"
   HEAP32[1400>>2] = $226; //@line 1936 "../hsp3/hsp3code.cpp"
   $227 = (__Z9code_getiv()|0); //@line 1937 "../hsp3/hsp3code.cpp"
   HEAP32[1408>>2] = $227; //@line 1937 "../hsp3/hsp3code.cpp"
   $228 = (__Z10code_getdii(4)|0); //@line 1938 "../hsp3/hsp3code.cpp"
   HEAP32[1416>>2] = $228; //@line 1938 "../hsp3/hsp3code.cpp"
   $229 = HEAP32[1408>>2]|0; //@line 1939 "../hsp3/hsp3code.cpp"
   $230 = ($229|0)<=(0); //@line 1939 "../hsp3/hsp3code.cpp"
   if ($230) {
    $231 = (___cxa_allocate_exception(4)|0); //@line 1939 "../hsp3/hsp3code.cpp"
    HEAP32[$231>>2] = 3; //@line 1939 "../hsp3/hsp3code.cpp"
    ___cxa_throw(($231|0),(624|0),(0|0)); //@line 1939 "../hsp3/hsp3code.cpp"
    // unreachable; //@line 1939 "../hsp3/hsp3code.cpp"
   }
   $232 = HEAP32[1416>>2]|0; //@line 1940 "../hsp3/hsp3code.cpp"
   $233 = HEAP32[3456>>2]|0; //@line 1940 "../hsp3/hsp3code.cpp"
   $234 = (($233) + (($232*140)|0)|0); //@line 1940 "../hsp3/hsp3code.cpp"
   $235 = HEAP16[$234>>1]|0; //@line 1940 "../hsp3/hsp3code.cpp"
   $236 = $235 << 16 >> 16; //@line 1940 "../hsp3/hsp3code.cpp"
   $237 = ($236|0)==(0); //@line 1940 "../hsp3/hsp3code.cpp"
   if ($237) {
    $238 = (___cxa_allocate_exception(4)|0); //@line 1940 "../hsp3/hsp3code.cpp"
    HEAP32[$238>>2] = 3; //@line 1940 "../hsp3/hsp3code.cpp"
    ___cxa_throw(($238|0),(624|0),(0|0)); //@line 1940 "../hsp3/hsp3code.cpp"
    // unreachable; //@line 1940 "../hsp3/hsp3code.cpp"
   } else {
    $239 = $pval_m10; //@line 1941 "../hsp3/hsp3code.cpp"
    $240 = HEAP32[1416>>2]|0; //@line 1941 "../hsp3/hsp3code.cpp"
    $241 = HEAP32[1400>>2]|0; //@line 1941 "../hsp3/hsp3code.cpp"
    $242 = $241; //@line 1941 "../hsp3/hsp3code.cpp"
    $243 = HEAP32[1408>>2]|0; //@line 1941 "../hsp3/hsp3code.cpp"
    __Z16HspVarCoreDupPtrP4PValiPvi($239,$240,$242,$243); //@line 1941 "../hsp3/hsp3code.cpp"
    break L1;
   }
   break;
  }
  case 12:  {
   $172 = HEAP32[600>>2]|0; //@line 1901 "../hsp3/hsp3code.cpp"
   $173 = (($172) + 772|0); //@line 1901 "../hsp3/hsp3code.cpp"
   $174 = HEAP32[$173>>2]|0; //@line 1901 "../hsp3/hsp3code.cpp"
   $175 = ($174|0)==(0); //@line 1901 "../hsp3/hsp3code.cpp"
   if ($175) {
    $176 = (___cxa_allocate_exception(4)|0); //@line 1901 "../hsp3/hsp3code.cpp"
    HEAP32[$176>>2] = 11; //@line 1901 "../hsp3/hsp3code.cpp"
    ___cxa_throw(($176|0),(624|0),(0|0)); //@line 1901 "../hsp3/hsp3code.cpp"
    // unreachable; //@line 1901 "../hsp3/hsp3code.cpp"
   }
   $177 = (__Z10code_getlbv()|0); //@line 1902 "../hsp3/hsp3code.cpp"
   $label8 = $177; //@line 1902 "../hsp3/hsp3code.cpp"
   __Z9code_nextv(); //@line 1903 "../hsp3/hsp3code.cpp"
   $178 = HEAP32[600>>2]|0; //@line 1904 "../hsp3/hsp3code.cpp"
   $179 = (($178) + 772|0); //@line 1904 "../hsp3/hsp3code.cpp"
   $180 = HEAP32[$179>>2]|0; //@line 1904 "../hsp3/hsp3code.cpp"
   $181 = HEAP32[600>>2]|0; //@line 1904 "../hsp3/hsp3code.cpp"
   $182 = (($181) + 260|0); //@line 1904 "../hsp3/hsp3code.cpp"
   $183 = (($182) + ($180<<4)|0); //@line 1904 "../hsp3/hsp3code.cpp"
   $lop7 = $183; //@line 1904 "../hsp3/hsp3code.cpp"
   $184 = (__Z12code_getpvalv()|0); //@line 1906 "../hsp3/hsp3code.cpp"
   $pval6 = $184; //@line 1906 "../hsp3/hsp3code.cpp"
   $185 = $lop7; //@line 1907 "../hsp3/hsp3code.cpp"
   $186 = (($185) + 4|0); //@line 1907 "../hsp3/hsp3code.cpp"
   $187 = HEAP32[$186>>2]|0; //@line 1907 "../hsp3/hsp3code.cpp"
   $188 = $pval6; //@line 1907 "../hsp3/hsp3code.cpp"
   $189 = (($188) + 4|0); //@line 1907 "../hsp3/hsp3code.cpp"
   $190 = (($189) + 4|0); //@line 1907 "../hsp3/hsp3code.cpp"
   $191 = HEAP32[$190>>2]|0; //@line 1907 "../hsp3/hsp3code.cpp"
   $192 = ($187|0)>=($191|0); //@line 1907 "../hsp3/hsp3code.cpp"
   if ($192) {
    $193 = HEAP32[600>>2]|0; //@line 1908 "../hsp3/hsp3code.cpp"
    $194 = (($193) + 772|0); //@line 1908 "../hsp3/hsp3code.cpp"
    $195 = HEAP32[$194>>2]|0; //@line 1908 "../hsp3/hsp3code.cpp"
    $196 = (($195) + -1)|0; //@line 1908 "../hsp3/hsp3code.cpp"
    HEAP32[$194>>2] = $196; //@line 1908 "../hsp3/hsp3code.cpp"
    $197 = $label8; //@line 1909 "../hsp3/hsp3code.cpp"
    HEAP32[688>>2] = $197; //@line 1909 "../hsp3/hsp3code.cpp"
    __Z9code_nextv(); //@line 1910 "../hsp3/hsp3code.cpp"
    break L1;
   }
   $198 = $pval6; //@line 1913 "../hsp3/hsp3code.cpp"
   $199 = (($198) + 36|0); //@line 1913 "../hsp3/hsp3code.cpp"
   $200 = HEAP16[$199>>1]|0; //@line 1913 "../hsp3/hsp3code.cpp"
   $201 = $200&65535; //@line 1913 "../hsp3/hsp3code.cpp"
   $202 = $201 & 128; //@line 1913 "../hsp3/hsp3code.cpp"
   $203 = ($202|0)!=(0); //@line 1913 "../hsp3/hsp3code.cpp"
   if ($203) {
    $204 = $pval6; //@line 1914 "../hsp3/hsp3code.cpp"
    $205 = HEAP16[$204>>1]|0; //@line 1914 "../hsp3/hsp3code.cpp"
    $206 = $205 << 16 >> 16; //@line 1914 "../hsp3/hsp3code.cpp"
    $207 = HEAP32[3456>>2]|0; //@line 1914 "../hsp3/hsp3code.cpp"
    $208 = (($207) + (($206*140)|0)|0); //@line 1914 "../hsp3/hsp3code.cpp"
    $209 = (($208) + 60|0); //@line 1914 "../hsp3/hsp3code.cpp"
    $210 = HEAP32[$209>>2]|0; //@line 1914 "../hsp3/hsp3code.cpp"
    $211 = $pval6; //@line 1914 "../hsp3/hsp3code.cpp"
    $212 = $lop7; //@line 1914 "../hsp3/hsp3code.cpp"
    $213 = (($212) + 4|0); //@line 1914 "../hsp3/hsp3code.cpp"
    $214 = HEAP32[$213>>2]|0; //@line 1914 "../hsp3/hsp3code.cpp"
    $215 = (__Z17HspVarCorePtrAPTRP4PVali($211,$214)|0); //@line 1914 "../hsp3/hsp3code.cpp"
    $216 = (FUNCTION_TABLE_ii[$210 & 255]($215)|0); //@line 1914 "../hsp3/hsp3code.cpp"
    $i = $216; //@line 1914 "../hsp3/hsp3code.cpp"
    $217 = $i; //@line 1915 "../hsp3/hsp3code.cpp"
    $218 = ($217|0)==(0); //@line 1915 "../hsp3/hsp3code.cpp"
    if ($218) {
     $219 = $label8; //@line 1916 "../hsp3/hsp3code.cpp"
     HEAP32[688>>2] = $219; //@line 1916 "../hsp3/hsp3code.cpp"
     HEAP32[648>>2] = 5; //@line 1917 "../hsp3/hsp3code.cpp"
     HEAP32[640>>2] = 15; //@line 1917 "../hsp3/hsp3code.cpp"
     HEAP32[632>>2] = 0; //@line 1917 "../hsp3/hsp3code.cpp"
    }
   }
   break;
  }
  case 0:  {
   $3 = (__Z10code_getlbv()|0); //@line 1748 "../hsp3/hsp3code.cpp"
   HEAP32[688>>2] = $3; //@line 1748 "../hsp3/hsp3code.cpp"
   __Z9code_nextv(); //@line 1749 "../hsp3/hsp3code.cpp"
   break;
  }
  case 2:  {
   $7 = HEAP32[600>>2]|0; //@line 1769 "../hsp3/hsp3code.cpp"
   $8 = (($7) + 828|0); //@line 1769 "../hsp3/hsp3code.cpp"
   $9 = HEAP32[$8>>2]|0; //@line 1769 "../hsp3/hsp3code.cpp"
   $10 = ($9|0)!=(0|0); //@line 1769 "../hsp3/hsp3code.cpp"
   if ($10) {
    __ZL21cmdfunc_return_setvalv(); //@line 1769 "../hsp3/hsp3code.cpp"
   }
   $11 = HEAP32[600>>2]|0; //@line 1774 "../hsp3/hsp3code.cpp"
   $12 = (($11) + 236|0); //@line 1774 "../hsp3/hsp3code.cpp"
   HEAP32[$12>>2] = 6; //@line 1774 "../hsp3/hsp3code.cpp"
   $0 = 6; //@line 1775 "../hsp3/hsp3code.cpp"
   $407 = $0; //@line 2123 "../hsp3/hsp3code.cpp"
   STACKTOP = sp;return ($407|0); //@line 2123 "../hsp3/hsp3code.cpp"
   break;
  }
  case 3:  {
   $13 = HEAP32[600>>2]|0; //@line 1778 "../hsp3/hsp3code.cpp"
   $14 = (($13) + 772|0); //@line 1778 "../hsp3/hsp3code.cpp"
   $15 = HEAP32[$14>>2]|0; //@line 1778 "../hsp3/hsp3code.cpp"
   $16 = ($15|0)==(0); //@line 1778 "../hsp3/hsp3code.cpp"
   if ($16) {
    $17 = (___cxa_allocate_exception(4)|0); //@line 1778 "../hsp3/hsp3code.cpp"
    HEAP32[$17>>2] = 11; //@line 1778 "../hsp3/hsp3code.cpp"
    ___cxa_throw(($17|0),(624|0),(0|0)); //@line 1778 "../hsp3/hsp3code.cpp"
    // unreachable; //@line 1778 "../hsp3/hsp3code.cpp"
   } else {
    $18 = HEAP32[600>>2]|0; //@line 1779 "../hsp3/hsp3code.cpp"
    $19 = (($18) + 772|0); //@line 1779 "../hsp3/hsp3code.cpp"
    $20 = HEAP32[$19>>2]|0; //@line 1779 "../hsp3/hsp3code.cpp"
    $21 = (($20) + -1)|0; //@line 1779 "../hsp3/hsp3code.cpp"
    HEAP32[$19>>2] = $21; //@line 1779 "../hsp3/hsp3code.cpp"
    $22 = (__Z10code_getlbv()|0); //@line 1780 "../hsp3/hsp3code.cpp"
    HEAP32[688>>2] = $22; //@line 1780 "../hsp3/hsp3code.cpp"
    __Z9code_nextv(); //@line 1781 "../hsp3/hsp3code.cpp"
    break L1;
   }
   break;
  }
  case 11:  {
   $150 = HEAP32[600>>2]|0; //@line 1885 "../hsp3/hsp3code.cpp"
   $151 = (($150) + 772|0); //@line 1885 "../hsp3/hsp3code.cpp"
   $152 = HEAP32[$151>>2]|0; //@line 1885 "../hsp3/hsp3code.cpp"
   $153 = ($152|0)>=(31); //@line 1885 "../hsp3/hsp3code.cpp"
   if ($153) {
    $154 = (___cxa_allocate_exception(4)|0); //@line 1885 "../hsp3/hsp3code.cpp"
    HEAP32[$154>>2] = 9; //@line 1885 "../hsp3/hsp3code.cpp"
    ___cxa_throw(($154|0),(624|0),(0|0)); //@line 1885 "../hsp3/hsp3code.cpp"
    // unreachable; //@line 1885 "../hsp3/hsp3code.cpp"
   } else {
    $155 = (__Z10code_getlbv()|0); //@line 1886 "../hsp3/hsp3code.cpp"
    $label5 = $155; //@line 1886 "../hsp3/hsp3code.cpp"
    __Z9code_nextv(); //@line 1887 "../hsp3/hsp3code.cpp"
    $156 = HEAP32[600>>2]|0; //@line 1888 "../hsp3/hsp3code.cpp"
    $157 = (($156) + 772|0); //@line 1888 "../hsp3/hsp3code.cpp"
    $158 = HEAP32[$157>>2]|0; //@line 1888 "../hsp3/hsp3code.cpp"
    $159 = (($158) + 1)|0; //@line 1888 "../hsp3/hsp3code.cpp"
    HEAP32[$157>>2] = $159; //@line 1888 "../hsp3/hsp3code.cpp"
    $160 = HEAP32[600>>2]|0; //@line 1889 "../hsp3/hsp3code.cpp"
    $161 = (($160) + 772|0); //@line 1889 "../hsp3/hsp3code.cpp"
    $162 = HEAP32[$161>>2]|0; //@line 1889 "../hsp3/hsp3code.cpp"
    $163 = HEAP32[600>>2]|0; //@line 1889 "../hsp3/hsp3code.cpp"
    $164 = (($163) + 260|0); //@line 1889 "../hsp3/hsp3code.cpp"
    $165 = (($164) + ($162<<4)|0); //@line 1889 "../hsp3/hsp3code.cpp"
    $lop4 = $165; //@line 1889 "../hsp3/hsp3code.cpp"
    $166 = $lop4; //@line 1890 "../hsp3/hsp3code.cpp"
    $167 = (($166) + 4|0); //@line 1890 "../hsp3/hsp3code.cpp"
    HEAP32[$167>>2] = 0; //@line 1890 "../hsp3/hsp3code.cpp"
    $168 = $lop4; //@line 1891 "../hsp3/hsp3code.cpp"
    HEAP32[$168>>2] = -2147483648; //@line 1891 "../hsp3/hsp3code.cpp"
    $169 = HEAP32[680>>2]|0; //@line 1892 "../hsp3/hsp3code.cpp"
    $170 = $lop4; //@line 1892 "../hsp3/hsp3code.cpp"
    $171 = (($170) + 12|0); //@line 1892 "../hsp3/hsp3code.cpp"
    HEAP32[$171>>2] = $169; //@line 1892 "../hsp3/hsp3code.cpp"
    break L1;
   }
   break;
  }
  case 5:  {
   $57 = HEAP32[600>>2]|0; //@line 1810 "../hsp3/hsp3code.cpp"
   $58 = (($57) + 772|0); //@line 1810 "../hsp3/hsp3code.cpp"
   $59 = HEAP32[$58>>2]|0; //@line 1810 "../hsp3/hsp3code.cpp"
   $60 = ($59|0)==(0); //@line 1810 "../hsp3/hsp3code.cpp"
   if ($60) {
    $61 = (___cxa_allocate_exception(4)|0); //@line 1810 "../hsp3/hsp3code.cpp"
    HEAP32[$61>>2] = 11; //@line 1810 "../hsp3/hsp3code.cpp"
    ___cxa_throw(($61|0),(624|0),(0|0)); //@line 1810 "../hsp3/hsp3code.cpp"
    // unreachable; //@line 1810 "../hsp3/hsp3code.cpp"
   }
   $62 = HEAP32[600>>2]|0; //@line 1811 "../hsp3/hsp3code.cpp"
   $63 = (($62) + 772|0); //@line 1811 "../hsp3/hsp3code.cpp"
   $64 = HEAP32[$63>>2]|0; //@line 1811 "../hsp3/hsp3code.cpp"
   $65 = HEAP32[600>>2]|0; //@line 1811 "../hsp3/hsp3code.cpp"
   $66 = (($65) + 260|0); //@line 1811 "../hsp3/hsp3code.cpp"
   $67 = (($66) + ($64<<4)|0); //@line 1811 "../hsp3/hsp3code.cpp"
   $lop1 = $67; //@line 1811 "../hsp3/hsp3code.cpp"
   $68 = $lop1; //@line 1812 "../hsp3/hsp3code.cpp"
   $69 = (($68) + 4|0); //@line 1812 "../hsp3/hsp3code.cpp"
   $70 = HEAP32[$69>>2]|0; //@line 1812 "../hsp3/hsp3code.cpp"
   $71 = (($70) + 1)|0; //@line 1812 "../hsp3/hsp3code.cpp"
   HEAP32[$69>>2] = $71; //@line 1812 "../hsp3/hsp3code.cpp"
   $72 = $lop1; //@line 1813 "../hsp3/hsp3code.cpp"
   $73 = HEAP32[$72>>2]|0; //@line 1813 "../hsp3/hsp3code.cpp"
   $74 = ($73|0)!=(-2147483648); //@line 1813 "../hsp3/hsp3code.cpp"
   do {
    if ($74) {
     $75 = $lop1; //@line 1814 "../hsp3/hsp3code.cpp"
     $76 = (($75) + 4|0); //@line 1814 "../hsp3/hsp3code.cpp"
     $77 = HEAP32[$76>>2]|0; //@line 1814 "../hsp3/hsp3code.cpp"
     $78 = $lop1; //@line 1814 "../hsp3/hsp3code.cpp"
     $79 = HEAP32[$78>>2]|0; //@line 1814 "../hsp3/hsp3code.cpp"
     $80 = ($77|0)>=($79|0); //@line 1814 "../hsp3/hsp3code.cpp"
     if ($80) {
      $81 = HEAP32[600>>2]|0; //@line 1815 "../hsp3/hsp3code.cpp"
      $82 = (($81) + 772|0); //@line 1815 "../hsp3/hsp3code.cpp"
      $83 = HEAP32[$82>>2]|0; //@line 1815 "../hsp3/hsp3code.cpp"
      $84 = (($83) + -1)|0; //@line 1815 "../hsp3/hsp3code.cpp"
      HEAP32[$82>>2] = $84; //@line 1815 "../hsp3/hsp3code.cpp"
      break L1;
     } else {
      break;
     }
    }
   } while(0);
   $85 = $lop1; //@line 1819 "../hsp3/hsp3code.cpp"
   $86 = (($85) + 12|0); //@line 1819 "../hsp3/hsp3code.cpp"
   $87 = HEAP32[$86>>2]|0; //@line 1819 "../hsp3/hsp3code.cpp"
   HEAP32[688>>2] = $87; //@line 1819 "../hsp3/hsp3code.cpp"
   __Z9code_nextv(); //@line 1820 "../hsp3/hsp3code.cpp"
   break;
  }
  case 25:  {
   $353 = (__Z10code_getdii(0)|0); //@line 2051 "../hsp3/hsp3code.cpp"
   HEAP32[1400>>2] = $353; //@line 2051 "../hsp3/hsp3code.cpp"
   $354 = HEAP32[640>>2]|0; //@line 2052 "../hsp3/hsp3code.cpp"
   $355 = ($354|0)!=(15); //@line 2052 "../hsp3/hsp3code.cpp"
   if ($355) {
    $356 = (___cxa_allocate_exception(4)|0); //@line 2052 "../hsp3/hsp3code.cpp"
    HEAP32[$356>>2] = 2; //@line 2052 "../hsp3/hsp3code.cpp"
    ___cxa_throw(($356|0),(624|0),(0|0)); //@line 2052 "../hsp3/hsp3code.cpp"
    // unreachable; //@line 2052 "../hsp3/hsp3code.cpp"
   }
   $357 = HEAP32[648>>2]|0; //@line 2053 "../hsp3/hsp3code.cpp"
   $358 = ($357|0)>=(2); //@line 2053 "../hsp3/hsp3code.cpp"
   if ($358) {
    $359 = (___cxa_allocate_exception(4)|0); //@line 2053 "../hsp3/hsp3code.cpp"
    HEAP32[$359>>2] = 2; //@line 2053 "../hsp3/hsp3code.cpp"
    ___cxa_throw(($359|0),(624|0),(0|0)); //@line 2053 "../hsp3/hsp3code.cpp"
    // unreachable; //@line 2053 "../hsp3/hsp3code.cpp"
   }
   HEAP32[1408>>2] = 0; //@line 2054 "../hsp3/hsp3code.cpp"
   $360 = HEAP32[648>>2]|0; //@line 2054 "../hsp3/hsp3code.cpp"
   HEAP32[1416>>2] = $360; //@line 2054 "../hsp3/hsp3code.cpp"
   $otbak = 0; //@line 2054 "../hsp3/hsp3code.cpp"
   __Z9code_nextv(); //@line 2055 "../hsp3/hsp3code.cpp"
   while(1) {
    $361 = HEAP32[632>>2]|0; //@line 2056 "../hsp3/hsp3code.cpp"
    $362 = $361 & 8192; //@line 2056 "../hsp3/hsp3code.cpp"
    $363 = ($362|0)==(0); //@line 2056 "../hsp3/hsp3code.cpp"
    if (!($363)) {
     break;
    }
    $364 = (__Z11code_getlb2v()|0); //@line 2057 "../hsp3/hsp3code.cpp"
    $label20 = $364; //@line 2057 "../hsp3/hsp3code.cpp"
    $365 = HEAP32[1400>>2]|0; //@line 2058 "../hsp3/hsp3code.cpp"
    $366 = HEAP32[1408>>2]|0; //@line 2058 "../hsp3/hsp3code.cpp"
    $367 = ($365|0)==($366|0); //@line 2058 "../hsp3/hsp3code.cpp"
    if ($367) {
     $368 = HEAP32[1416>>2]|0; //@line 2059 "../hsp3/hsp3code.cpp"
     $369 = ($368|0)!=(0); //@line 2059 "../hsp3/hsp3code.cpp"
     if (!($369)) {
      label = 92;
      break;
     }
     $370 = $label20; //@line 2060 "../hsp3/hsp3code.cpp"
     $otbak = $370; //@line 2060 "../hsp3/hsp3code.cpp"
    }
    $372 = HEAP32[1408>>2]|0; //@line 2066 "../hsp3/hsp3code.cpp"
    $373 = (($372) + 1)|0; //@line 2066 "../hsp3/hsp3code.cpp"
    HEAP32[1408>>2] = $373; //@line 2066 "../hsp3/hsp3code.cpp"
   }
   if ((label|0) == 92) {
    $371 = $label20; //@line 2062 "../hsp3/hsp3code.cpp"
    __Z10code_setpcPKt($371); //@line 2062 "../hsp3/hsp3code.cpp"
   }
   $374 = $otbak; //@line 2068 "../hsp3/hsp3code.cpp"
   $375 = ($374|0)!=(0|0); //@line 2068 "../hsp3/hsp3code.cpp"
   if (!($375)) {
    break L1;
   }
   $376 = $otbak; //@line 2069 "../hsp3/hsp3code.cpp"
   __Z9code_callPKt($376); //@line 2069 "../hsp3/hsp3code.cpp"
   $377 = HEAP32[600>>2]|0; //@line 2070 "../hsp3/hsp3code.cpp"
   $378 = (($377) + 236|0); //@line 2070 "../hsp3/hsp3code.cpp"
   $379 = HEAP32[$378>>2]|0; //@line 2070 "../hsp3/hsp3code.cpp"
   $0 = $379; //@line 2070 "../hsp3/hsp3code.cpp"
   $407 = $0; //@line 2123 "../hsp3/hsp3code.cpp"
   STACKTOP = sp;return ($407|0); //@line 2123 "../hsp3/hsp3code.cpp"
   break;
  }
  case 26:  {
   $380 = (__Z12code_getpvalv()|0); //@line 2079 "../hsp3/hsp3code.cpp"
   $pval21 = $380; //@line 2079 "../hsp3/hsp3code.cpp"
   $381 = $pval21; //@line 2080 "../hsp3/hsp3code.cpp"
   $382 = HEAP16[$381>>1]|0; //@line 2080 "../hsp3/hsp3code.cpp"
   $383 = $382 << 16 >> 16; //@line 2080 "../hsp3/hsp3code.cpp"
   $384 = HEAP32[3456>>2]|0; //@line 2080 "../hsp3/hsp3code.cpp"
   $385 = (($384) + (($383*140)|0)|0); //@line 2080 "../hsp3/hsp3code.cpp"
   $varproc = $385; //@line 2080 "../hsp3/hsp3code.cpp"
   $386 = $varproc; //@line 2081 "../hsp3/hsp3code.cpp"
   $387 = (($386) + 44|0); //@line 2081 "../hsp3/hsp3code.cpp"
   $388 = HEAP32[$387>>2]|0; //@line 2081 "../hsp3/hsp3code.cpp"
   $389 = $pval21; //@line 2081 "../hsp3/hsp3code.cpp"
   FUNCTION_TABLE_vi[$388 & 255]($389); //@line 2081 "../hsp3/hsp3code.cpp"
   break;
  }
  case 28:  {
   $390 = (__Z9code_getsv()|0); //@line 2085 "../hsp3/hsp3code.cpp"
   (__Z12code_stmpstrPc($390)|0); //@line 2085 "../hsp3/hsp3code.cpp"
   $391 = HEAP32[600>>2]|0; //@line 2086 "../hsp3/hsp3code.cpp"
   $392 = (($391) + 236|0); //@line 2086 "../hsp3/hsp3code.cpp"
   HEAP32[$392>>2] = 9; //@line 2086 "../hsp3/hsp3code.cpp"
   $0 = 9; //@line 2087 "../hsp3/hsp3code.cpp"
   $407 = $0; //@line 2123 "../hsp3/hsp3code.cpp"
   STACKTOP = sp;return ($407|0); //@line 2123 "../hsp3/hsp3code.cpp"
   break;
  }
  case 29:  {
   $393 = (__Z10code_getvaPP4PVal($pval22)|0); //@line 2095 "../hsp3/hsp3code.cpp"
   $aptr23 = $393; //@line 2095 "../hsp3/hsp3code.cpp"
   HEAP32[$label24>>2] = 0; //@line 2096 "../hsp3/hsp3code.cpp"
   $394 = HEAP32[640>>2]|0; //@line 2097 "../hsp3/hsp3code.cpp"
   if ((($394|0) == 4)) {
    $395 = (__Z9code_getiv()|0); //@line 2099 "../hsp3/hsp3code.cpp"
    $i25 = $395; //@line 2099 "../hsp3/hsp3code.cpp"
    $396 = $i25; //@line 2100 "../hsp3/hsp3code.cpp"
    $397 = ($396|0)==(0); //@line 2100 "../hsp3/hsp3code.cpp"
    if ($397) {
     $398 = HEAP32[680>>2]|0; //@line 2100 "../hsp3/hsp3code.cpp"
     HEAP32[$label24>>2] = $398; //@line 2100 "../hsp3/hsp3code.cpp"
    }
    $399 = $i25; //@line 2101 "../hsp3/hsp3code.cpp"
    $400 = ($399|0)==(1); //@line 2101 "../hsp3/hsp3code.cpp"
    if ($400) {
     $401 = HEAP32[688>>2]|0; //@line 2101 "../hsp3/hsp3code.cpp"
     HEAP32[$label24>>2] = $401; //@line 2101 "../hsp3/hsp3code.cpp"
    }
   } else if ((($394|0) == 7)) {
    $402 = (__Z11code_getlb2v()|0); //@line 2104 "../hsp3/hsp3code.cpp"
    HEAP32[$label24>>2] = $402; //@line 2104 "../hsp3/hsp3code.cpp"
   } else {
    $403 = (___cxa_allocate_exception(4)|0); //@line 2107 "../hsp3/hsp3code.cpp"
    HEAP32[$403>>2] = 6; //@line 2107 "../hsp3/hsp3code.cpp"
    ___cxa_throw(($403|0),(624|0),(0|0)); //@line 2107 "../hsp3/hsp3code.cpp"
    // unreachable; //@line 2107 "../hsp3/hsp3code.cpp"
   }
   $404 = HEAP32[$pval22>>2]|0; //@line 2109 "../hsp3/hsp3code.cpp"
   $405 = $aptr23; //@line 2109 "../hsp3/hsp3code.cpp"
   __Z10code_setvaP4PValiiPKv($404,$405,1,$label24); //@line 2109 "../hsp3/hsp3code.cpp"
   break;
  }
  case 30:  {
   break;
  }
  case 31:  {
   break;
  }
  default: {
   $406 = (___cxa_allocate_exception(4)|0); //@line 2120 "../hsp3/hsp3code.cpp"
   HEAP32[$406>>2] = 21; //@line 2120 "../hsp3/hsp3code.cpp"
   ___cxa_throw(($406|0),(624|0),(0|0)); //@line 2120 "../hsp3/hsp3code.cpp"
   // unreachable; //@line 2120 "../hsp3/hsp3code.cpp"
  }
  }
 } while(0);
 $0 = 0; //@line 2122 "../hsp3/hsp3code.cpp"
 $407 = $0; //@line 2123 "../hsp3/hsp3code.cpp"
 STACKTOP = sp;return ($407|0); //@line 2123 "../hsp3/hsp3code.cpp"
}
function __ZL21cmdfunc_return_setvalv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Z8code_getv()|0); //@line 1677 "../hsp3/hsp3code.cpp"
 $1 = ($0|0)<=(-2); //@line 1677 "../hsp3/hsp3code.cpp"
 if ($1) {
  STACKTOP = sp;return; //@line 1693 "../hsp3/hsp3code.cpp"
 }
 $2 = HEAP32[600>>2]|0; //@line 1679 "../hsp3/hsp3code.cpp"
 $3 = (($2) + 256|0); //@line 1679 "../hsp3/hsp3code.cpp"
 $4 = HEAP32[$3>>2]|0; //@line 1679 "../hsp3/hsp3code.cpp"
 $5 = HEAP32[600>>2]|0; //@line 1679 "../hsp3/hsp3code.cpp"
 $6 = (($5) + 844|0); //@line 1679 "../hsp3/hsp3code.cpp"
 HEAP32[$6>>2] = $4; //@line 1679 "../hsp3/hsp3code.cpp"
 $7 = HEAP32[592>>2]|0; //@line 1680 "../hsp3/hsp3code.cpp"
 $8 = HEAP16[$7>>1]|0; //@line 1680 "../hsp3/hsp3code.cpp"
 $9 = $8 << 16 >> 16; //@line 1680 "../hsp3/hsp3code.cpp"
 HEAP32[1384>>2] = $9; //@line 1680 "../hsp3/hsp3code.cpp"
 $10 = HEAP32[1384>>2]|0; //@line 1682 "../hsp3/hsp3code.cpp"
 if ((($10|0) == 3)) {
  $22 = HEAP32[592>>2]|0; //@line 1690 "../hsp3/hsp3code.cpp"
  $23 = (($22) + 28|0); //@line 1690 "../hsp3/hsp3code.cpp"
  $24 = HEAP32[$23>>2]|0; //@line 1690 "../hsp3/hsp3code.cpp"
  $25 = +HEAPF64[$24>>3]; //@line 1690 "../hsp3/hsp3code.cpp"
  $26 = HEAP32[600>>2]|0; //@line 1690 "../hsp3/hsp3code.cpp"
  $27 = (($26) + 864|0); //@line 1690 "../hsp3/hsp3code.cpp"
  HEAPF64[$27>>3] = $25; //@line 1690 "../hsp3/hsp3code.cpp"
  STACKTOP = sp;return; //@line 1693 "../hsp3/hsp3code.cpp"
 } else if ((($10|0) == 2)) {
  $17 = HEAP32[600>>2]|0; //@line 1687 "../hsp3/hsp3code.cpp"
  $18 = (($17) + 792|0); //@line 1687 "../hsp3/hsp3code.cpp"
  $19 = HEAP32[592>>2]|0; //@line 1687 "../hsp3/hsp3code.cpp"
  $20 = (($19) + 28|0); //@line 1687 "../hsp3/hsp3code.cpp"
  $21 = HEAP32[$20>>2]|0; //@line 1687 "../hsp3/hsp3code.cpp"
  __Z9sbStrCopyPPcS_($18,$21); //@line 1687 "../hsp3/hsp3code.cpp"
  STACKTOP = sp;return; //@line 1693 "../hsp3/hsp3code.cpp"
 } else if ((($10|0) == 4)) {
  $11 = HEAP32[592>>2]|0; //@line 1684 "../hsp3/hsp3code.cpp"
  $12 = (($11) + 28|0); //@line 1684 "../hsp3/hsp3code.cpp"
  $13 = HEAP32[$12>>2]|0; //@line 1684 "../hsp3/hsp3code.cpp"
  $14 = HEAP32[$13>>2]|0; //@line 1684 "../hsp3/hsp3code.cpp"
  $15 = HEAP32[600>>2]|0; //@line 1684 "../hsp3/hsp3code.cpp"
  $16 = (($15) + 784|0); //@line 1684 "../hsp3/hsp3code.cpp"
  HEAP32[$16>>2] = $14; //@line 1684 "../hsp3/hsp3code.cpp"
  STACKTOP = sp;return; //@line 1693 "../hsp3/hsp3code.cpp"
 } else {
  $28 = (___cxa_allocate_exception(4)|0); //@line 1693 "../hsp3/hsp3code.cpp"
  HEAP32[$28>>2] = 6; //@line 1693 "../hsp3/hsp3code.cpp"
  ___cxa_throw(($28|0),(624|0),(0|0)); //@line 1693 "../hsp3/hsp3code.cpp"
  // unreachable; //@line 1693 "../hsp3/hsp3code.cpp"
 }
}
function __ZL12cmdfunc_mrefP4PVali($pval,$prm) {
 $pval = $pval|0;
 $prm = $prm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $exinfo = 0, $out = 0, $size = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $pval;
 $1 = $prm;
 $2 = $1; //@line 1724 "../hsp3/hsp3code.cpp"
 $3 = $2 & 1024; //@line 1724 "../hsp3/hsp3code.cpp"
 $4 = ($3|0)!=(0); //@line 1724 "../hsp3/hsp3code.cpp"
 if ($4) {
  $5 = (___cxa_allocate_exception(4)|0); //@line 1724 "../hsp3/hsp3code.cpp"
  HEAP32[$5>>2] = 21; //@line 1724 "../hsp3/hsp3code.cpp"
  ___cxa_throw(($5|0),(624|0),(0|0)); //@line 1724 "../hsp3/hsp3code.cpp"
  // unreachable; //@line 1724 "../hsp3/hsp3code.cpp"
 }
 $6 = $1; //@line 1725 "../hsp3/hsp3code.cpp"
 $7 = ($6|0)>=(64); //@line 1725 "../hsp3/hsp3code.cpp"
 if ($7) {
  $8 = HEAP32[600>>2]|0; //@line 1726 "../hsp3/hsp3code.cpp"
  $9 = (($8) + 876|0); //@line 1726 "../hsp3/hsp3code.cpp"
  $10 = HEAP32[$9>>2]|0; //@line 1726 "../hsp3/hsp3code.cpp"
  $exinfo = $10; //@line 1726 "../hsp3/hsp3code.cpp"
  $11 = $exinfo; //@line 1727 "../hsp3/hsp3code.cpp"
  $12 = (($11) + 172|0); //@line 1727 "../hsp3/hsp3code.cpp"
  $13 = HEAP32[$12>>2]|0; //@line 1727 "../hsp3/hsp3code.cpp"
  $14 = ($13|0)!=(0|0); //@line 1727 "../hsp3/hsp3code.cpp"
  if ($14) {
   $15 = $exinfo; //@line 1727 "../hsp3/hsp3code.cpp"
   $16 = (($15) + 172|0); //@line 1727 "../hsp3/hsp3code.cpp"
   $17 = HEAP32[$16>>2]|0; //@line 1727 "../hsp3/hsp3code.cpp"
   $18 = $0; //@line 1727 "../hsp3/hsp3code.cpp"
   $19 = $1; //@line 1727 "../hsp3/hsp3code.cpp"
   FUNCTION_TABLE_vii[$17 & 255]($18,$19); //@line 1727 "../hsp3/hsp3code.cpp"
  }
  STACKTOP = sp;return; //@line 1735 "../hsp3/hsp3code.cpp"
 }
 $20 = $1; //@line 1730 "../hsp3/hsp3code.cpp"
 $21 = $20 & 48; //@line 1730 "../hsp3/hsp3code.cpp"
 $22 = ($21|0)!=(0); //@line 1730 "../hsp3/hsp3code.cpp"
 if ($22) {
  $25 = (___cxa_allocate_exception(4)|0); //@line 1730 "../hsp3/hsp3code.cpp"
  HEAP32[$25>>2] = 21; //@line 1730 "../hsp3/hsp3code.cpp"
  ___cxa_throw(($25|0),(624|0),(0|0)); //@line 1730 "../hsp3/hsp3code.cpp"
  // unreachable; //@line 1730 "../hsp3/hsp3code.cpp"
 }
 $23 = $1; //@line 1730 "../hsp3/hsp3code.cpp"
 $24 = ($23|0)>=(8); //@line 1730 "../hsp3/hsp3code.cpp"
 if ($24) {
  $25 = (___cxa_allocate_exception(4)|0); //@line 1730 "../hsp3/hsp3code.cpp"
  HEAP32[$25>>2] = 21; //@line 1730 "../hsp3/hsp3code.cpp"
  ___cxa_throw(($25|0),(624|0),(0|0)); //@line 1730 "../hsp3/hsp3code.cpp"
  // unreachable; //@line 1730 "../hsp3/hsp3code.cpp"
 }
 $26 = HEAP32[600>>2]|0; //@line 1732 "../hsp3/hsp3code.cpp"
 $27 = (($26) + 828|0); //@line 1732 "../hsp3/hsp3code.cpp"
 $28 = HEAP32[$27>>2]|0; //@line 1732 "../hsp3/hsp3code.cpp"
 $out = $28; //@line 1732 "../hsp3/hsp3code.cpp"
 $29 = $out; //@line 1733 "../hsp3/hsp3code.cpp"
 $30 = ($29|0)==(0|0); //@line 1733 "../hsp3/hsp3code.cpp"
 if ($30) {
  $31 = (___cxa_allocate_exception(4)|0); //@line 1733 "../hsp3/hsp3code.cpp"
  HEAP32[$31>>2] = 3; //@line 1733 "../hsp3/hsp3code.cpp"
  ___cxa_throw(($31|0),(624|0),(0|0)); //@line 1733 "../hsp3/hsp3code.cpp"
  // unreachable; //@line 1733 "../hsp3/hsp3code.cpp"
 }
 $t = 4; //@line 1734 "../hsp3/hsp3code.cpp"
 $size = 4; //@line 1734 "../hsp3/hsp3code.cpp"
 $32 = $0; //@line 1735 "../hsp3/hsp3code.cpp"
 $33 = $t; //@line 1735 "../hsp3/hsp3code.cpp"
 $34 = $out; //@line 1735 "../hsp3/hsp3code.cpp"
 $35 = $size; //@line 1735 "../hsp3/hsp3code.cpp"
 $36 = $1; //@line 1735 "../hsp3/hsp3code.cpp"
 $37 = Math_imul($35, $36)|0; //@line 1735 "../hsp3/hsp3code.cpp"
 $38 = (($34) + ($37)|0); //@line 1735 "../hsp3/hsp3code.cpp"
 $39 = $size; //@line 1735 "../hsp3/hsp3code.cpp"
 __Z16HspVarCoreDupPtrP4PValiPvi($32,$33,$38,$39); //@line 1735 "../hsp3/hsp3code.cpp"
 STACKTOP = sp;return; //@line 1735 "../hsp3/hsp3code.cpp"
}
function __ZL11cmdfunc_vari($cmd) {
 $cmd = $cmd|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $aptr = 0, $baseaptr = 0, $chk = 0, $dst = 0, $exp = 0, $incval = 0, $proc = 0, $ptr = 0, $pval = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $pval = sp + 32|0;
 $incval = sp;
 $1 = $cmd;
 $2 = HEAP32[632>>2]|0; //@line 1583 "../hsp3/hsp3code.cpp"
 $3 = $2 & 8192; //@line 1583 "../hsp3/hsp3code.cpp"
 $4 = ($3|0)==(0); //@line 1583 "../hsp3/hsp3code.cpp"
 if ($4) {
  $5 = (___cxa_allocate_exception(4)|0); //@line 1583 "../hsp3/hsp3code.cpp"
  HEAP32[$5>>2] = 16; //@line 1583 "../hsp3/hsp3code.cpp"
  ___cxa_throw(($5|0),(624|0),(0|0)); //@line 1583 "../hsp3/hsp3code.cpp"
  // unreachable; //@line 1583 "../hsp3/hsp3code.cpp"
 }
 HEAP32[632>>2] = 0; //@line 1586 "../hsp3/hsp3code.cpp"
 $6 = (__Z10code_getvaPP4PVal($pval)|0); //@line 1587 "../hsp3/hsp3code.cpp"
 $aptr = $6; //@line 1587 "../hsp3/hsp3code.cpp"
 $7 = HEAP32[640>>2]|0; //@line 1589 "../hsp3/hsp3code.cpp"
 $8 = ($7|0)!=(0); //@line 1589 "../hsp3/hsp3code.cpp"
 if ($8) {
  $9 = HEAP32[680>>2]|0; //@line 1589 "../hsp3/hsp3code.cpp"
  HEAP32[688>>2] = $9; //@line 1589 "../hsp3/hsp3code.cpp"
  $10 = (___cxa_allocate_exception(4)|0); //@line 1589 "../hsp3/hsp3code.cpp"
  HEAP32[$10>>2] = 2; //@line 1589 "../hsp3/hsp3code.cpp"
  ___cxa_throw(($10|0),(624|0),(0|0)); //@line 1589 "../hsp3/hsp3code.cpp"
  // unreachable; //@line 1589 "../hsp3/hsp3code.cpp"
 }
 $11 = HEAP32[648>>2]|0; //@line 1590 "../hsp3/hsp3code.cpp"
 $exp = $11; //@line 1590 "../hsp3/hsp3code.cpp"
 __Z9code_nextv(); //@line 1591 "../hsp3/hsp3code.cpp"
 $12 = HEAP32[632>>2]|0; //@line 1593 "../hsp3/hsp3code.cpp"
 $13 = ($12|0)!=(0); //@line 1593 "../hsp3/hsp3code.cpp"
 if ($13) {
  $14 = HEAP32[$pval>>2]|0; //@line 1594 "../hsp3/hsp3code.cpp"
  $15 = HEAP16[$14>>1]|0; //@line 1594 "../hsp3/hsp3code.cpp"
  $16 = $15 << 16 >> 16; //@line 1594 "../hsp3/hsp3code.cpp"
  $17 = HEAP32[3456>>2]|0; //@line 1594 "../hsp3/hsp3code.cpp"
  $18 = (($17) + (($16*140)|0)|0); //@line 1594 "../hsp3/hsp3code.cpp"
  $proc = $18; //@line 1594 "../hsp3/hsp3code.cpp"
  HEAP32[$incval>>2] = 1; //@line 1595 "../hsp3/hsp3code.cpp"
  $19 = HEAP32[$pval>>2]|0; //@line 1596 "../hsp3/hsp3code.cpp"
  $20 = HEAP16[$19>>1]|0; //@line 1596 "../hsp3/hsp3code.cpp"
  $21 = $20 << 16 >> 16; //@line 1596 "../hsp3/hsp3code.cpp"
  $22 = ($21|0)==(4); //@line 1596 "../hsp3/hsp3code.cpp"
  if ($22) {
   $ptr = $incval; //@line 1596 "../hsp3/hsp3code.cpp"
  } else {
   $23 = $proc; //@line 1597 "../hsp3/hsp3code.cpp"
   $24 = (($23) + 20|0); //@line 1597 "../hsp3/hsp3code.cpp"
   $25 = HEAP32[$24>>2]|0; //@line 1597 "../hsp3/hsp3code.cpp"
   $26 = (FUNCTION_TABLE_iii[$25 & 255]($incval,4)|0); //@line 1597 "../hsp3/hsp3code.cpp"
   $ptr = $26; //@line 1597 "../hsp3/hsp3code.cpp"
  }
  $27 = HEAP32[$pval>>2]|0; //@line 1599 "../hsp3/hsp3code.cpp"
  $28 = $aptr; //@line 1599 "../hsp3/hsp3code.cpp"
  $29 = (__Z17HspVarCorePtrAPTRP4PVali($27,$28)|0); //@line 1599 "../hsp3/hsp3code.cpp"
  $dst = $29; //@line 1599 "../hsp3/hsp3code.cpp"
  $30 = $exp; //@line 1600 "../hsp3/hsp3code.cpp"
  if ((($30|0) == 0)) {
   $31 = $proc; //@line 1602 "../hsp3/hsp3code.cpp"
   $32 = (($31) + 76|0); //@line 1602 "../hsp3/hsp3code.cpp"
   $33 = HEAP32[$32>>2]|0; //@line 1602 "../hsp3/hsp3code.cpp"
   $34 = $dst; //@line 1602 "../hsp3/hsp3code.cpp"
   $35 = $ptr; //@line 1602 "../hsp3/hsp3code.cpp"
   FUNCTION_TABLE_vii[$33 & 255]($34,$35); //@line 1602 "../hsp3/hsp3code.cpp"
  } else if ((($30|0) == 1)) {
   $36 = $proc; //@line 1605 "../hsp3/hsp3code.cpp"
   $37 = (($36) + 80|0); //@line 1605 "../hsp3/hsp3code.cpp"
   $38 = HEAP32[$37>>2]|0; //@line 1605 "../hsp3/hsp3code.cpp"
   $39 = $dst; //@line 1605 "../hsp3/hsp3code.cpp"
   $40 = $ptr; //@line 1605 "../hsp3/hsp3code.cpp"
   FUNCTION_TABLE_vii[$38 & 255]($39,$40); //@line 1605 "../hsp3/hsp3code.cpp"
  } else {
   $41 = (___cxa_allocate_exception(4)|0); //@line 1608 "../hsp3/hsp3code.cpp"
   HEAP32[$41>>2] = 2; //@line 1608 "../hsp3/hsp3code.cpp"
   ___cxa_throw(($41|0),(624|0),(0|0)); //@line 1608 "../hsp3/hsp3code.cpp"
   // unreachable; //@line 1608 "../hsp3/hsp3code.cpp"
  }
  $0 = 0; //@line 1610 "../hsp3/hsp3code.cpp"
  $186 = $0; //@line 1669 "../hsp3/hsp3code.cpp"
  STACKTOP = sp;return ($186|0); //@line 1669 "../hsp3/hsp3code.cpp"
 }
 $42 = (__Z8code_getv()|0); //@line 1613 "../hsp3/hsp3code.cpp"
 $chk = $42; //@line 1613 "../hsp3/hsp3code.cpp"
 $43 = $chk; //@line 1614 "../hsp3/hsp3code.cpp"
 $44 = ($43|0)!=(0); //@line 1614 "../hsp3/hsp3code.cpp"
 if ($44) {
  $45 = (___cxa_allocate_exception(4)|0); //@line 1614 "../hsp3/hsp3code.cpp"
  HEAP32[$45>>2] = 2; //@line 1614 "../hsp3/hsp3code.cpp"
  ___cxa_throw(($45|0),(624|0),(0|0)); //@line 1614 "../hsp3/hsp3code.cpp"
  // unreachable; //@line 1614 "../hsp3/hsp3code.cpp"
 }
 $46 = HEAP32[$pval>>2]|0; //@line 1616 "../hsp3/hsp3code.cpp"
 $47 = HEAP16[$46>>1]|0; //@line 1616 "../hsp3/hsp3code.cpp"
 $48 = $47 << 16 >> 16; //@line 1616 "../hsp3/hsp3code.cpp"
 $49 = HEAP32[3456>>2]|0; //@line 1616 "../hsp3/hsp3code.cpp"
 $50 = (($49) + (($48*140)|0)|0); //@line 1616 "../hsp3/hsp3code.cpp"
 $proc = $50; //@line 1616 "../hsp3/hsp3code.cpp"
 $51 = HEAP32[$pval>>2]|0; //@line 1617 "../hsp3/hsp3code.cpp"
 $52 = $aptr; //@line 1617 "../hsp3/hsp3code.cpp"
 $53 = (__Z17HspVarCorePtrAPTRP4PVali($51,$52)|0); //@line 1617 "../hsp3/hsp3code.cpp"
 $dst = $53; //@line 1617 "../hsp3/hsp3code.cpp"
 $54 = HEAP32[592>>2]|0; //@line 1618 "../hsp3/hsp3code.cpp"
 $55 = (($54) + 28|0); //@line 1618 "../hsp3/hsp3code.cpp"
 $56 = HEAP32[$55>>2]|0; //@line 1618 "../hsp3/hsp3code.cpp"
 $ptr = $56; //@line 1618 "../hsp3/hsp3code.cpp"
 $57 = $exp; //@line 1619 "../hsp3/hsp3code.cpp"
 $58 = ($57|0)==(8); //@line 1619 "../hsp3/hsp3code.cpp"
 if (!($58)) {
  $161 = HEAP32[$pval>>2]|0; //@line 1661 "../hsp3/hsp3code.cpp"
  $162 = HEAP16[$161>>1]|0; //@line 1661 "../hsp3/hsp3code.cpp"
  $163 = $162 << 16 >> 16; //@line 1661 "../hsp3/hsp3code.cpp"
  $164 = HEAP32[592>>2]|0; //@line 1661 "../hsp3/hsp3code.cpp"
  $165 = HEAP16[$164>>1]|0; //@line 1661 "../hsp3/hsp3code.cpp"
  $166 = $165 << 16 >> 16; //@line 1661 "../hsp3/hsp3code.cpp"
  $167 = ($163|0)!=($166|0); //@line 1661 "../hsp3/hsp3code.cpp"
  if ($167) {
   $168 = HEAP32[592>>2]|0; //@line 1662 "../hsp3/hsp3code.cpp"
   $169 = HEAP32[$pval>>2]|0; //@line 1662 "../hsp3/hsp3code.cpp"
   $170 = HEAP16[$169>>1]|0; //@line 1662 "../hsp3/hsp3code.cpp"
   $171 = $170 << 16 >> 16; //@line 1662 "../hsp3/hsp3code.cpp"
   $172 = (__Z16HspVarCoreCnvPtrP4PVali($168,$171)|0); //@line 1662 "../hsp3/hsp3code.cpp"
   $ptr = $172; //@line 1662 "../hsp3/hsp3code.cpp"
  }
  $173 = $proc; //@line 1665 "../hsp3/hsp3code.cpp"
  $174 = $dst; //@line 1665 "../hsp3/hsp3code.cpp"
  $175 = $exp; //@line 1665 "../hsp3/hsp3code.cpp"
  $176 = $ptr; //@line 1665 "../hsp3/hsp3code.cpp"
  __ZL7calcprmP10HspVarProcPPviS1_($173,$174,$175,$176); //@line 1665 "../hsp3/hsp3code.cpp"
  $177 = $proc; //@line 1666 "../hsp3/hsp3code.cpp"
  $178 = (($177) + 2|0); //@line 1666 "../hsp3/hsp3code.cpp"
  $179 = HEAP16[$178>>1]|0; //@line 1666 "../hsp3/hsp3code.cpp"
  $180 = $179 << 16 >> 16; //@line 1666 "../hsp3/hsp3code.cpp"
  $181 = HEAP32[$pval>>2]|0; //@line 1666 "../hsp3/hsp3code.cpp"
  $182 = HEAP16[$181>>1]|0; //@line 1666 "../hsp3/hsp3code.cpp"
  $183 = $182 << 16 >> 16; //@line 1666 "../hsp3/hsp3code.cpp"
  $184 = ($180|0)!=($183|0); //@line 1666 "../hsp3/hsp3code.cpp"
  if ($184) {
   $185 = (___cxa_allocate_exception(4)|0); //@line 1667 "../hsp3/hsp3code.cpp"
   HEAP32[$185>>2] = 6; //@line 1667 "../hsp3/hsp3code.cpp"
   ___cxa_throw(($185|0),(624|0),(0|0)); //@line 1667 "../hsp3/hsp3code.cpp"
   // unreachable; //@line 1667 "../hsp3/hsp3code.cpp"
  }
  $0 = 0; //@line 1669 "../hsp3/hsp3code.cpp"
  $186 = $0; //@line 1669 "../hsp3/hsp3code.cpp"
  STACKTOP = sp;return ($186|0); //@line 1669 "../hsp3/hsp3code.cpp"
 }
 $59 = HEAP32[$pval>>2]|0; //@line 1620 "../hsp3/hsp3code.cpp"
 $60 = (($59) + 36|0); //@line 1620 "../hsp3/hsp3code.cpp"
 $61 = HEAP16[$60>>1]|0; //@line 1620 "../hsp3/hsp3code.cpp"
 $62 = $61&65535; //@line 1620 "../hsp3/hsp3code.cpp"
 $63 = $62 & 64; //@line 1620 "../hsp3/hsp3code.cpp"
 $64 = ($63|0)!=(0); //@line 1620 "../hsp3/hsp3code.cpp"
 do {
  if ($64) {
   $65 = HEAP32[1440>>2]|0; //@line 1621 "../hsp3/hsp3code.cpp"
   $66 = ($65|0)!=(0); //@line 1621 "../hsp3/hsp3code.cpp"
   if (!($66)) {
    break;
   }
   $67 = $proc; //@line 1622 "../hsp3/hsp3code.cpp"
   $68 = (($67) + 40|0); //@line 1622 "../hsp3/hsp3code.cpp"
   $69 = HEAP32[$68>>2]|0; //@line 1622 "../hsp3/hsp3code.cpp"
   $70 = HEAP32[$pval>>2]|0; //@line 1622 "../hsp3/hsp3code.cpp"
   $71 = $ptr; //@line 1622 "../hsp3/hsp3code.cpp"
   $72 = HEAP32[592>>2]|0; //@line 1622 "../hsp3/hsp3code.cpp"
   $73 = HEAP16[$72>>1]|0; //@line 1622 "../hsp3/hsp3code.cpp"
   $74 = $73 << 16 >> 16; //@line 1622 "../hsp3/hsp3code.cpp"
   FUNCTION_TABLE_viii[$69 & 255]($70,$71,$74); //@line 1622 "../hsp3/hsp3code.cpp"
   $0 = 0; //@line 1623 "../hsp3/hsp3code.cpp"
   $186 = $0; //@line 1669 "../hsp3/hsp3code.cpp"
   STACKTOP = sp;return ($186|0); //@line 1669 "../hsp3/hsp3code.cpp"
  }
 } while(0);
 $75 = HEAP32[$pval>>2]|0; //@line 1626 "../hsp3/hsp3code.cpp"
 $76 = HEAP16[$75>>1]|0; //@line 1626 "../hsp3/hsp3code.cpp"
 $77 = $76 << 16 >> 16; //@line 1626 "../hsp3/hsp3code.cpp"
 $78 = HEAP32[592>>2]|0; //@line 1626 "../hsp3/hsp3code.cpp"
 $79 = HEAP16[$78>>1]|0; //@line 1626 "../hsp3/hsp3code.cpp"
 $80 = $79 << 16 >> 16; //@line 1626 "../hsp3/hsp3code.cpp"
 $81 = ($77|0)!=($80|0); //@line 1626 "../hsp3/hsp3code.cpp"
 do {
  if ($81) {
   $82 = $aptr; //@line 1627 "../hsp3/hsp3code.cpp"
   $83 = ($82|0)!=(0); //@line 1627 "../hsp3/hsp3code.cpp"
   if ($83) {
    $84 = (___cxa_allocate_exception(4)|0); //@line 1627 "../hsp3/hsp3code.cpp"
    HEAP32[$84>>2] = 31; //@line 1627 "../hsp3/hsp3code.cpp"
    ___cxa_throw(($84|0),(624|0),(0|0)); //@line 1627 "../hsp3/hsp3code.cpp"
    // unreachable; //@line 1627 "../hsp3/hsp3code.cpp"
   } else {
    $85 = HEAP32[$pval>>2]|0; //@line 1628 "../hsp3/hsp3code.cpp"
    $86 = HEAP32[592>>2]|0; //@line 1628 "../hsp3/hsp3code.cpp"
    $87 = HEAP16[$86>>1]|0; //@line 1628 "../hsp3/hsp3code.cpp"
    $88 = $87 << 16 >> 16; //@line 1628 "../hsp3/hsp3code.cpp"
    __Z15HspVarCoreClearP4PVali($85,$88); //@line 1628 "../hsp3/hsp3code.cpp"
    $89 = HEAP32[$pval>>2]|0; //@line 1629 "../hsp3/hsp3code.cpp"
    $90 = HEAP16[$89>>1]|0; //@line 1629 "../hsp3/hsp3code.cpp"
    $91 = $90 << 16 >> 16; //@line 1629 "../hsp3/hsp3code.cpp"
    $92 = HEAP32[3456>>2]|0; //@line 1629 "../hsp3/hsp3code.cpp"
    $93 = (($92) + (($91*140)|0)|0); //@line 1629 "../hsp3/hsp3code.cpp"
    $proc = $93; //@line 1629 "../hsp3/hsp3code.cpp"
    $94 = $proc; //@line 1630 "../hsp3/hsp3code.cpp"
    $95 = (($94) + 28|0); //@line 1630 "../hsp3/hsp3code.cpp"
    $96 = HEAP32[$95>>2]|0; //@line 1630 "../hsp3/hsp3code.cpp"
    $97 = HEAP32[$pval>>2]|0; //@line 1630 "../hsp3/hsp3code.cpp"
    $98 = (FUNCTION_TABLE_ii[$96 & 255]($97)|0); //@line 1630 "../hsp3/hsp3code.cpp"
    $dst = $98; //@line 1630 "../hsp3/hsp3code.cpp"
    break;
   }
  }
 } while(0);
 $99 = $proc; //@line 1632 "../hsp3/hsp3code.cpp"
 $100 = (($99) + 72|0); //@line 1632 "../hsp3/hsp3code.cpp"
 $101 = HEAP32[$100>>2]|0; //@line 1632 "../hsp3/hsp3code.cpp"
 $102 = HEAP32[$pval>>2]|0; //@line 1632 "../hsp3/hsp3code.cpp"
 $103 = $dst; //@line 1632 "../hsp3/hsp3code.cpp"
 $104 = $ptr; //@line 1632 "../hsp3/hsp3code.cpp"
 FUNCTION_TABLE_viii[$101 & 255]($102,$103,$104); //@line 1632 "../hsp3/hsp3code.cpp"
 $105 = HEAP32[632>>2]|0; //@line 1633 "../hsp3/hsp3code.cpp"
 $106 = ($105|0)!=(0); //@line 1633 "../hsp3/hsp3code.cpp"
 if ($106) {
  $0 = 0; //@line 1633 "../hsp3/hsp3code.cpp"
  $186 = $0; //@line 1669 "../hsp3/hsp3code.cpp"
  STACKTOP = sp;return ($186|0); //@line 1669 "../hsp3/hsp3code.cpp"
 }
 $107 = HEAP32[$pval>>2]|0; //@line 1635 "../hsp3/hsp3code.cpp"
 $108 = (($107) + 4|0); //@line 1635 "../hsp3/hsp3code.cpp"
 $109 = (($108) + 4|0); //@line 1635 "../hsp3/hsp3code.cpp"
 $110 = HEAP32[$109>>2]|0; //@line 1635 "../hsp3/hsp3code.cpp"
 $chk = $110; //@line 1635 "../hsp3/hsp3code.cpp"
 $111 = $chk; //@line 1636 "../hsp3/hsp3code.cpp"
 $112 = ($111|0)==(0); //@line 1636 "../hsp3/hsp3code.cpp"
 if ($112) {
  $113 = $aptr; //@line 1636 "../hsp3/hsp3code.cpp"
  $baseaptr = $113; //@line 1636 "../hsp3/hsp3code.cpp"
 } else {
  $114 = $aptr; //@line 1636 "../hsp3/hsp3code.cpp"
  $115 = $chk; //@line 1636 "../hsp3/hsp3code.cpp"
  $116 = (($114|0) % ($115|0))&-1; //@line 1636 "../hsp3/hsp3code.cpp"
  $baseaptr = $116; //@line 1636 "../hsp3/hsp3code.cpp"
 }
 $117 = $baseaptr; //@line 1637 "../hsp3/hsp3code.cpp"
 $118 = $aptr; //@line 1637 "../hsp3/hsp3code.cpp"
 $119 = (($118) - ($117))|0; //@line 1637 "../hsp3/hsp3code.cpp"
 $aptr = $119; //@line 1637 "../hsp3/hsp3code.cpp"
 while(1) {
  $120 = HEAP32[632>>2]|0; //@line 1640 "../hsp3/hsp3code.cpp"
  $121 = ($120|0)!=(0); //@line 1640 "../hsp3/hsp3code.cpp"
  if ($121) {
   label = 32;
   break;
  }
  $122 = (__Z8code_getv()|0); //@line 1641 "../hsp3/hsp3code.cpp"
  $chk = $122; //@line 1641 "../hsp3/hsp3code.cpp"
  $123 = $chk; //@line 1642 "../hsp3/hsp3code.cpp"
  $124 = ($123|0)!=(0); //@line 1642 "../hsp3/hsp3code.cpp"
  if ($124) {
   label = 34;
   break;
  }
  $126 = HEAP32[$pval>>2]|0; //@line 1643 "../hsp3/hsp3code.cpp"
  $127 = HEAP16[$126>>1]|0; //@line 1643 "../hsp3/hsp3code.cpp"
  $128 = $127 << 16 >> 16; //@line 1643 "../hsp3/hsp3code.cpp"
  $129 = HEAP32[592>>2]|0; //@line 1643 "../hsp3/hsp3code.cpp"
  $130 = HEAP16[$129>>1]|0; //@line 1643 "../hsp3/hsp3code.cpp"
  $131 = $130 << 16 >> 16; //@line 1643 "../hsp3/hsp3code.cpp"
  $132 = ($128|0)!=($131|0); //@line 1643 "../hsp3/hsp3code.cpp"
  if ($132) {
   label = 36;
   break;
  }
  $134 = HEAP32[592>>2]|0; //@line 1646 "../hsp3/hsp3code.cpp"
  $135 = (($134) + 28|0); //@line 1646 "../hsp3/hsp3code.cpp"
  $136 = HEAP32[$135>>2]|0; //@line 1646 "../hsp3/hsp3code.cpp"
  $ptr = $136; //@line 1646 "../hsp3/hsp3code.cpp"
  $137 = $baseaptr; //@line 1647 "../hsp3/hsp3code.cpp"
  $138 = (($137) + 1)|0; //@line 1647 "../hsp3/hsp3code.cpp"
  $baseaptr = $138; //@line 1647 "../hsp3/hsp3code.cpp"
  $139 = HEAP32[$pval>>2]|0; //@line 1649 "../hsp3/hsp3code.cpp"
  $140 = (($139) + 38|0); //@line 1649 "../hsp3/hsp3code.cpp"
  HEAP16[$140>>1] = 0; //@line 1649 "../hsp3/hsp3code.cpp"
  $141 = $aptr; //@line 1650 "../hsp3/hsp3code.cpp"
  $142 = HEAP32[$pval>>2]|0; //@line 1650 "../hsp3/hsp3code.cpp"
  $143 = (($142) + 40|0); //@line 1650 "../hsp3/hsp3code.cpp"
  HEAP32[$143>>2] = $141; //@line 1650 "../hsp3/hsp3code.cpp"
  $144 = HEAP32[$pval>>2]|0; //@line 1651 "../hsp3/hsp3code.cpp"
  $145 = $baseaptr; //@line 1651 "../hsp3/hsp3code.cpp"
  __ZL14code_arrayint2P4PVali($144,$145); //@line 1651 "../hsp3/hsp3code.cpp"
  $146 = HEAP32[$pval>>2]|0; //@line 1653 "../hsp3/hsp3code.cpp"
  $147 = HEAP16[$146>>1]|0; //@line 1653 "../hsp3/hsp3code.cpp"
  $148 = $147 << 16 >> 16; //@line 1653 "../hsp3/hsp3code.cpp"
  $149 = HEAP32[3456>>2]|0; //@line 1653 "../hsp3/hsp3code.cpp"
  $150 = (($149) + (($148*140)|0)|0); //@line 1653 "../hsp3/hsp3code.cpp"
  $151 = (($150) + 28|0); //@line 1653 "../hsp3/hsp3code.cpp"
  $152 = HEAP32[$151>>2]|0; //@line 1653 "../hsp3/hsp3code.cpp"
  $153 = HEAP32[$pval>>2]|0; //@line 1653 "../hsp3/hsp3code.cpp"
  $154 = (FUNCTION_TABLE_ii[$152 & 255]($153)|0); //@line 1653 "../hsp3/hsp3code.cpp"
  $dst = $154; //@line 1653 "../hsp3/hsp3code.cpp"
  $155 = $proc; //@line 1654 "../hsp3/hsp3code.cpp"
  $156 = (($155) + 72|0); //@line 1654 "../hsp3/hsp3code.cpp"
  $157 = HEAP32[$156>>2]|0; //@line 1654 "../hsp3/hsp3code.cpp"
  $158 = HEAP32[$pval>>2]|0; //@line 1654 "../hsp3/hsp3code.cpp"
  $159 = $dst; //@line 1654 "../hsp3/hsp3code.cpp"
  $160 = $ptr; //@line 1654 "../hsp3/hsp3code.cpp"
  FUNCTION_TABLE_viii[$157 & 255]($158,$159,$160); //@line 1654 "../hsp3/hsp3code.cpp"
 }
 if ((label|0) == 32) {
  $0 = 0; //@line 1656 "../hsp3/hsp3code.cpp"
  $186 = $0; //@line 1669 "../hsp3/hsp3code.cpp"
  STACKTOP = sp;return ($186|0); //@line 1669 "../hsp3/hsp3code.cpp"
 }
 else if ((label|0) == 34) {
  $125 = (___cxa_allocate_exception(4)|0); //@line 1642 "../hsp3/hsp3code.cpp"
  HEAP32[$125>>2] = 2; //@line 1642 "../hsp3/hsp3code.cpp"
  ___cxa_throw(($125|0),(624|0),(0|0)); //@line 1642 "../hsp3/hsp3code.cpp"
  // unreachable; //@line 1642 "../hsp3/hsp3code.cpp"
 }
 else if ((label|0) == 36) {
  $133 = (___cxa_allocate_exception(4)|0); //@line 1644 "../hsp3/hsp3code.cpp"
  HEAP32[$133>>2] = 31; //@line 1644 "../hsp3/hsp3code.cpp"
  ___cxa_throw(($133|0),(624|0),(0|0)); //@line 1644 "../hsp3/hsp3code.cpp"
  // unreachable; //@line 1644 "../hsp3/hsp3code.cpp"
 }
 return 0|0;
}
function __ZL14code_arrayint2P4PVali($pval,$offset) {
 $pval = $pval|0;
 $offset = $offset|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $pval;
 $1 = $offset;
 $2 = $0; //@line 349 "../hsp3/hsp3code.cpp"
 $3 = (($2) + 38|0); //@line 349 "../hsp3/hsp3code.cpp"
 $4 = HEAP16[$3>>1]|0; //@line 349 "../hsp3/hsp3code.cpp"
 $5 = $4 << 16 >> 16; //@line 349 "../hsp3/hsp3code.cpp"
 $6 = ($5|0)>=(5); //@line 349 "../hsp3/hsp3code.cpp"
 if ($6) {
  $7 = (___cxa_allocate_exception(4)|0); //@line 349 "../hsp3/hsp3code.cpp"
  HEAP32[$7>>2] = 7; //@line 349 "../hsp3/hsp3code.cpp"
  ___cxa_throw(($7|0),(624|0),(0|0)); //@line 349 "../hsp3/hsp3code.cpp"
  // unreachable; //@line 349 "../hsp3/hsp3code.cpp"
 }
 $8 = $0; //@line 350 "../hsp3/hsp3code.cpp"
 $9 = (($8) + 38|0); //@line 350 "../hsp3/hsp3code.cpp"
 $10 = HEAP16[$9>>1]|0; //@line 350 "../hsp3/hsp3code.cpp"
 $11 = $10 << 16 >> 16; //@line 350 "../hsp3/hsp3code.cpp"
 $12 = ($11|0)==(0); //@line 350 "../hsp3/hsp3code.cpp"
 if ($12) {
  $13 = $0; //@line 351 "../hsp3/hsp3code.cpp"
  $14 = (($13) + 44|0); //@line 351 "../hsp3/hsp3code.cpp"
  HEAP32[$14>>2] = 1; //@line 351 "../hsp3/hsp3code.cpp"
 } else {
  $15 = $0; //@line 353 "../hsp3/hsp3code.cpp"
  $16 = (($15) + 38|0); //@line 353 "../hsp3/hsp3code.cpp"
  $17 = HEAP16[$16>>1]|0; //@line 353 "../hsp3/hsp3code.cpp"
  $18 = $17 << 16 >> 16; //@line 353 "../hsp3/hsp3code.cpp"
  $19 = $0; //@line 353 "../hsp3/hsp3code.cpp"
  $20 = (($19) + 4|0); //@line 353 "../hsp3/hsp3code.cpp"
  $21 = (($20) + ($18<<2)|0); //@line 353 "../hsp3/hsp3code.cpp"
  $22 = HEAP32[$21>>2]|0; //@line 353 "../hsp3/hsp3code.cpp"
  $23 = $0; //@line 353 "../hsp3/hsp3code.cpp"
  $24 = (($23) + 44|0); //@line 353 "../hsp3/hsp3code.cpp"
  $25 = HEAP32[$24>>2]|0; //@line 353 "../hsp3/hsp3code.cpp"
  $26 = Math_imul($25, $22)|0; //@line 353 "../hsp3/hsp3code.cpp"
  HEAP32[$24>>2] = $26; //@line 353 "../hsp3/hsp3code.cpp"
 }
 $27 = $0; //@line 355 "../hsp3/hsp3code.cpp"
 $28 = (($27) + 38|0); //@line 355 "../hsp3/hsp3code.cpp"
 $29 = HEAP16[$28>>1]|0; //@line 355 "../hsp3/hsp3code.cpp"
 $30 = (($29) + 1)<<16>>16; //@line 355 "../hsp3/hsp3code.cpp"
 HEAP16[$28>>1] = $30; //@line 355 "../hsp3/hsp3code.cpp"
 $31 = $1; //@line 356 "../hsp3/hsp3code.cpp"
 $32 = ($31|0)<(0); //@line 356 "../hsp3/hsp3code.cpp"
 if ($32) {
  $33 = (___cxa_allocate_exception(4)|0); //@line 356 "../hsp3/hsp3code.cpp"
  HEAP32[$33>>2] = 7; //@line 356 "../hsp3/hsp3code.cpp"
  ___cxa_throw(($33|0),(624|0),(0|0)); //@line 356 "../hsp3/hsp3code.cpp"
  // unreachable; //@line 356 "../hsp3/hsp3code.cpp"
 }
 $34 = $1; //@line 357 "../hsp3/hsp3code.cpp"
 $35 = $0; //@line 357 "../hsp3/hsp3code.cpp"
 $36 = (($35) + 38|0); //@line 357 "../hsp3/hsp3code.cpp"
 $37 = HEAP16[$36>>1]|0; //@line 357 "../hsp3/hsp3code.cpp"
 $38 = $37 << 16 >> 16; //@line 357 "../hsp3/hsp3code.cpp"
 $39 = $0; //@line 357 "../hsp3/hsp3code.cpp"
 $40 = (($39) + 4|0); //@line 357 "../hsp3/hsp3code.cpp"
 $41 = (($40) + ($38<<2)|0); //@line 357 "../hsp3/hsp3code.cpp"
 $42 = HEAP32[$41>>2]|0; //@line 357 "../hsp3/hsp3code.cpp"
 $43 = ($34|0)>=($42|0); //@line 357 "../hsp3/hsp3code.cpp"
 if (!($43)) {
  $82 = $1; //@line 368 "../hsp3/hsp3code.cpp"
  $83 = $0; //@line 368 "../hsp3/hsp3code.cpp"
  $84 = (($83) + 44|0); //@line 368 "../hsp3/hsp3code.cpp"
  $85 = HEAP32[$84>>2]|0; //@line 368 "../hsp3/hsp3code.cpp"
  $86 = Math_imul($82, $85)|0; //@line 368 "../hsp3/hsp3code.cpp"
  $87 = $0; //@line 368 "../hsp3/hsp3code.cpp"
  $88 = (($87) + 40|0); //@line 368 "../hsp3/hsp3code.cpp"
  $89 = HEAP32[$88>>2]|0; //@line 368 "../hsp3/hsp3code.cpp"
  $90 = (($89) + ($86))|0; //@line 368 "../hsp3/hsp3code.cpp"
  HEAP32[$88>>2] = $90; //@line 368 "../hsp3/hsp3code.cpp"
  STACKTOP = sp;return; //@line 368 "../hsp3/hsp3code.cpp"
 }
 $44 = $0; //@line 358 "../hsp3/hsp3code.cpp"
 $45 = (($44) + 38|0); //@line 358 "../hsp3/hsp3code.cpp"
 $46 = HEAP16[$45>>1]|0; //@line 358 "../hsp3/hsp3code.cpp"
 $47 = $46 << 16 >> 16; //@line 358 "../hsp3/hsp3code.cpp"
 $48 = ($47|0)>=(4); //@line 358 "../hsp3/hsp3code.cpp"
 if (!($48)) {
  $49 = $0; //@line 358 "../hsp3/hsp3code.cpp"
  $50 = (($49) + 38|0); //@line 358 "../hsp3/hsp3code.cpp"
  $51 = HEAP16[$50>>1]|0; //@line 358 "../hsp3/hsp3code.cpp"
  $52 = $51 << 16 >> 16; //@line 358 "../hsp3/hsp3code.cpp"
  $53 = (($52) + 1)|0; //@line 358 "../hsp3/hsp3code.cpp"
  $54 = $0; //@line 358 "../hsp3/hsp3code.cpp"
  $55 = (($54) + 4|0); //@line 358 "../hsp3/hsp3code.cpp"
  $56 = (($55) + ($53<<2)|0); //@line 358 "../hsp3/hsp3code.cpp"
  $57 = HEAP32[$56>>2]|0; //@line 358 "../hsp3/hsp3code.cpp"
  $58 = ($57|0)==(0); //@line 358 "../hsp3/hsp3code.cpp"
  if (!($58)) {
   $81 = (___cxa_allocate_exception(4)|0); //@line 366 "../hsp3/hsp3code.cpp"
   HEAP32[$81>>2] = 7; //@line 366 "../hsp3/hsp3code.cpp"
   ___cxa_throw(($81|0),(624|0),(0|0)); //@line 366 "../hsp3/hsp3code.cpp"
   // unreachable; //@line 366 "../hsp3/hsp3code.cpp"
  }
 }
 $59 = $0; //@line 359 "../hsp3/hsp3code.cpp"
 $60 = (($59) + 36|0); //@line 359 "../hsp3/hsp3code.cpp"
 $61 = HEAP16[$60>>1]|0; //@line 359 "../hsp3/hsp3code.cpp"
 $62 = $61&65535; //@line 359 "../hsp3/hsp3code.cpp"
 $63 = $62 & 8; //@line 359 "../hsp3/hsp3code.cpp"
 $64 = ($63|0)!=(0); //@line 359 "../hsp3/hsp3code.cpp"
 if ($64) {
  $65 = $0; //@line 361 "../hsp3/hsp3code.cpp"
  $66 = $0; //@line 361 "../hsp3/hsp3code.cpp"
  $67 = (($66) + 38|0); //@line 361 "../hsp3/hsp3code.cpp"
  $68 = HEAP16[$67>>1]|0; //@line 361 "../hsp3/hsp3code.cpp"
  $69 = $68 << 16 >> 16; //@line 361 "../hsp3/hsp3code.cpp"
  $70 = $1; //@line 361 "../hsp3/hsp3code.cpp"
  $71 = (($70) + 1)|0; //@line 361 "../hsp3/hsp3code.cpp"
  __Z15HspVarCoreReDimP4PValii($65,$69,$71); //@line 361 "../hsp3/hsp3code.cpp"
  $72 = $1; //@line 362 "../hsp3/hsp3code.cpp"
  $73 = $0; //@line 362 "../hsp3/hsp3code.cpp"
  $74 = (($73) + 44|0); //@line 362 "../hsp3/hsp3code.cpp"
  $75 = HEAP32[$74>>2]|0; //@line 362 "../hsp3/hsp3code.cpp"
  $76 = Math_imul($72, $75)|0; //@line 362 "../hsp3/hsp3code.cpp"
  $77 = $0; //@line 362 "../hsp3/hsp3code.cpp"
  $78 = (($77) + 40|0); //@line 362 "../hsp3/hsp3code.cpp"
  $79 = HEAP32[$78>>2]|0; //@line 362 "../hsp3/hsp3code.cpp"
  $80 = (($79) + ($76))|0; //@line 362 "../hsp3/hsp3code.cpp"
  HEAP32[$78>>2] = $80; //@line 362 "../hsp3/hsp3code.cpp"
  STACKTOP = sp;return; //@line 368 "../hsp3/hsp3code.cpp"
 } else {
  $81 = (___cxa_allocate_exception(4)|0); //@line 366 "../hsp3/hsp3code.cpp"
  HEAP32[$81>>2] = 7; //@line 366 "../hsp3/hsp3code.cpp"
  ___cxa_throw(($81|0),(624|0),(0|0)); //@line 366 "../hsp3/hsp3code.cpp"
  // unreachable; //@line 366 "../hsp3/hsp3code.cpp"
 }
}
function __ZL7calcprmP10HspVarProcPPviS1_($proc,$pval,$exp,$ptr) {
 $proc = $proc|0;
 $pval = $pval|0;
 $exp = $exp|0;
 $ptr = $ptr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $proc;
 $1 = $pval;
 $2 = $exp;
 $3 = $ptr;
 $4 = $2; //@line 123 "../hsp3/hsp3code.cpp"
 do {
  switch ($4|0) {
  case 15:  {
   $80 = $0; //@line 173 "../hsp3/hsp3code.cpp"
   $81 = (($80) + 136|0); //@line 173 "../hsp3/hsp3code.cpp"
   $82 = HEAP32[$81>>2]|0; //@line 173 "../hsp3/hsp3code.cpp"
   $83 = $1; //@line 173 "../hsp3/hsp3code.cpp"
   $84 = $3; //@line 173 "../hsp3/hsp3code.cpp"
   FUNCTION_TABLE_vii[$82 & 255]($83,$84); //@line 173 "../hsp3/hsp3code.cpp"
   STACKTOP = sp;return; //@line 180 "../hsp3/hsp3code.cpp"
   break;
  }
  case 14:  {
   $75 = $0; //@line 170 "../hsp3/hsp3code.cpp"
   $76 = (($75) + 132|0); //@line 170 "../hsp3/hsp3code.cpp"
   $77 = HEAP32[$76>>2]|0; //@line 170 "../hsp3/hsp3code.cpp"
   $78 = $1; //@line 170 "../hsp3/hsp3code.cpp"
   $79 = $3; //@line 170 "../hsp3/hsp3code.cpp"
   FUNCTION_TABLE_vii[$77 & 255]($78,$79); //@line 170 "../hsp3/hsp3code.cpp"
   STACKTOP = sp;return; //@line 180 "../hsp3/hsp3code.cpp"
   break;
  }
  case 40:  {
   $85 = (___cxa_allocate_exception(4)|0); //@line 176 "../hsp3/hsp3code.cpp"
   HEAP32[$85>>2] = 34; //@line 176 "../hsp3/hsp3code.cpp"
   ___cxa_throw(($85|0),(624|0),(0|0)); //@line 176 "../hsp3/hsp3code.cpp"
   // unreachable; //@line 176 "../hsp3/hsp3code.cpp"
   break;
  }
  case 13:  {
   $70 = $0; //@line 166 "../hsp3/hsp3code.cpp"
   $71 = (($70) + 128|0); //@line 166 "../hsp3/hsp3code.cpp"
   $72 = HEAP32[$71>>2]|0; //@line 166 "../hsp3/hsp3code.cpp"
   $73 = $1; //@line 166 "../hsp3/hsp3code.cpp"
   $74 = $3; //@line 166 "../hsp3/hsp3code.cpp"
   FUNCTION_TABLE_vii[$72 & 255]($73,$74); //@line 166 "../hsp3/hsp3code.cpp"
   STACKTOP = sp;return; //@line 180 "../hsp3/hsp3code.cpp"
   break;
  }
  case 12:  {
   $65 = $0; //@line 163 "../hsp3/hsp3code.cpp"
   $66 = (($65) + 124|0); //@line 163 "../hsp3/hsp3code.cpp"
   $67 = HEAP32[$66>>2]|0; //@line 163 "../hsp3/hsp3code.cpp"
   $68 = $1; //@line 163 "../hsp3/hsp3code.cpp"
   $69 = $3; //@line 163 "../hsp3/hsp3code.cpp"
   FUNCTION_TABLE_vii[$67 & 255]($68,$69); //@line 163 "../hsp3/hsp3code.cpp"
   STACKTOP = sp;return; //@line 180 "../hsp3/hsp3code.cpp"
   break;
  }
  case 11:  {
   $60 = $0; //@line 160 "../hsp3/hsp3code.cpp"
   $61 = (($60) + 120|0); //@line 160 "../hsp3/hsp3code.cpp"
   $62 = HEAP32[$61>>2]|0; //@line 160 "../hsp3/hsp3code.cpp"
   $63 = $1; //@line 160 "../hsp3/hsp3code.cpp"
   $64 = $3; //@line 160 "../hsp3/hsp3code.cpp"
   FUNCTION_TABLE_vii[$62 & 255]($63,$64); //@line 160 "../hsp3/hsp3code.cpp"
   STACKTOP = sp;return; //@line 180 "../hsp3/hsp3code.cpp"
   break;
  }
  case 10:  {
   $55 = $0; //@line 157 "../hsp3/hsp3code.cpp"
   $56 = (($55) + 116|0); //@line 157 "../hsp3/hsp3code.cpp"
   $57 = HEAP32[$56>>2]|0; //@line 157 "../hsp3/hsp3code.cpp"
   $58 = $1; //@line 157 "../hsp3/hsp3code.cpp"
   $59 = $3; //@line 157 "../hsp3/hsp3code.cpp"
   FUNCTION_TABLE_vii[$57 & 255]($58,$59); //@line 157 "../hsp3/hsp3code.cpp"
   STACKTOP = sp;return; //@line 180 "../hsp3/hsp3code.cpp"
   break;
  }
  case 9:  {
   $50 = $0; //@line 154 "../hsp3/hsp3code.cpp"
   $51 = (($50) + 112|0); //@line 154 "../hsp3/hsp3code.cpp"
   $52 = HEAP32[$51>>2]|0; //@line 154 "../hsp3/hsp3code.cpp"
   $53 = $1; //@line 154 "../hsp3/hsp3code.cpp"
   $54 = $3; //@line 154 "../hsp3/hsp3code.cpp"
   FUNCTION_TABLE_vii[$52 & 255]($53,$54); //@line 154 "../hsp3/hsp3code.cpp"
   STACKTOP = sp;return; //@line 180 "../hsp3/hsp3code.cpp"
   break;
  }
  case 8:  {
   $45 = $0; //@line 151 "../hsp3/hsp3code.cpp"
   $46 = (($45) + 108|0); //@line 151 "../hsp3/hsp3code.cpp"
   $47 = HEAP32[$46>>2]|0; //@line 151 "../hsp3/hsp3code.cpp"
   $48 = $1; //@line 151 "../hsp3/hsp3code.cpp"
   $49 = $3; //@line 151 "../hsp3/hsp3code.cpp"
   FUNCTION_TABLE_vii[$47 & 255]($48,$49); //@line 151 "../hsp3/hsp3code.cpp"
   STACKTOP = sp;return; //@line 180 "../hsp3/hsp3code.cpp"
   break;
  }
  case 7:  {
   $40 = $0; //@line 147 "../hsp3/hsp3code.cpp"
   $41 = (($40) + 104|0); //@line 147 "../hsp3/hsp3code.cpp"
   $42 = HEAP32[$41>>2]|0; //@line 147 "../hsp3/hsp3code.cpp"
   $43 = $1; //@line 147 "../hsp3/hsp3code.cpp"
   $44 = $3; //@line 147 "../hsp3/hsp3code.cpp"
   FUNCTION_TABLE_vii[$42 & 255]($43,$44); //@line 147 "../hsp3/hsp3code.cpp"
   STACKTOP = sp;return; //@line 180 "../hsp3/hsp3code.cpp"
   break;
  }
  case 6:  {
   $35 = $0; //@line 144 "../hsp3/hsp3code.cpp"
   $36 = (($35) + 100|0); //@line 144 "../hsp3/hsp3code.cpp"
   $37 = HEAP32[$36>>2]|0; //@line 144 "../hsp3/hsp3code.cpp"
   $38 = $1; //@line 144 "../hsp3/hsp3code.cpp"
   $39 = $3; //@line 144 "../hsp3/hsp3code.cpp"
   FUNCTION_TABLE_vii[$37 & 255]($38,$39); //@line 144 "../hsp3/hsp3code.cpp"
   STACKTOP = sp;return; //@line 180 "../hsp3/hsp3code.cpp"
   break;
  }
  case 5:  {
   $30 = $0; //@line 141 "../hsp3/hsp3code.cpp"
   $31 = (($30) + 96|0); //@line 141 "../hsp3/hsp3code.cpp"
   $32 = HEAP32[$31>>2]|0; //@line 141 "../hsp3/hsp3code.cpp"
   $33 = $1; //@line 141 "../hsp3/hsp3code.cpp"
   $34 = $3; //@line 141 "../hsp3/hsp3code.cpp"
   FUNCTION_TABLE_vii[$32 & 255]($33,$34); //@line 141 "../hsp3/hsp3code.cpp"
   STACKTOP = sp;return; //@line 180 "../hsp3/hsp3code.cpp"
   break;
  }
  case 4:  {
   $25 = $0; //@line 137 "../hsp3/hsp3code.cpp"
   $26 = (($25) + 92|0); //@line 137 "../hsp3/hsp3code.cpp"
   $27 = HEAP32[$26>>2]|0; //@line 137 "../hsp3/hsp3code.cpp"
   $28 = $1; //@line 137 "../hsp3/hsp3code.cpp"
   $29 = $3; //@line 137 "../hsp3/hsp3code.cpp"
   FUNCTION_TABLE_vii[$27 & 255]($28,$29); //@line 137 "../hsp3/hsp3code.cpp"
   STACKTOP = sp;return; //@line 180 "../hsp3/hsp3code.cpp"
   break;
  }
  case 3:  {
   $20 = $0; //@line 134 "../hsp3/hsp3code.cpp"
   $21 = (($20) + 88|0); //@line 134 "../hsp3/hsp3code.cpp"
   $22 = HEAP32[$21>>2]|0; //@line 134 "../hsp3/hsp3code.cpp"
   $23 = $1; //@line 134 "../hsp3/hsp3code.cpp"
   $24 = $3; //@line 134 "../hsp3/hsp3code.cpp"
   FUNCTION_TABLE_vii[$22 & 255]($23,$24); //@line 134 "../hsp3/hsp3code.cpp"
   STACKTOP = sp;return; //@line 180 "../hsp3/hsp3code.cpp"
   break;
  }
  case 2:  {
   $15 = $0; //@line 131 "../hsp3/hsp3code.cpp"
   $16 = (($15) + 84|0); //@line 131 "../hsp3/hsp3code.cpp"
   $17 = HEAP32[$16>>2]|0; //@line 131 "../hsp3/hsp3code.cpp"
   $18 = $1; //@line 131 "../hsp3/hsp3code.cpp"
   $19 = $3; //@line 131 "../hsp3/hsp3code.cpp"
   FUNCTION_TABLE_vii[$17 & 255]($18,$19); //@line 131 "../hsp3/hsp3code.cpp"
   STACKTOP = sp;return; //@line 180 "../hsp3/hsp3code.cpp"
   break;
  }
  case 1:  {
   $10 = $0; //@line 128 "../hsp3/hsp3code.cpp"
   $11 = (($10) + 80|0); //@line 128 "../hsp3/hsp3code.cpp"
   $12 = HEAP32[$11>>2]|0; //@line 128 "../hsp3/hsp3code.cpp"
   $13 = $1; //@line 128 "../hsp3/hsp3code.cpp"
   $14 = $3; //@line 128 "../hsp3/hsp3code.cpp"
   FUNCTION_TABLE_vii[$12 & 255]($13,$14); //@line 128 "../hsp3/hsp3code.cpp"
   STACKTOP = sp;return; //@line 180 "../hsp3/hsp3code.cpp"
   break;
  }
  case 0:  {
   $5 = $0; //@line 125 "../hsp3/hsp3code.cpp"
   $6 = (($5) + 76|0); //@line 125 "../hsp3/hsp3code.cpp"
   $7 = HEAP32[$6>>2]|0; //@line 125 "../hsp3/hsp3code.cpp"
   $8 = $1; //@line 125 "../hsp3/hsp3code.cpp"
   $9 = $3; //@line 125 "../hsp3/hsp3code.cpp"
   FUNCTION_TABLE_vii[$7 & 255]($8,$9); //@line 125 "../hsp3/hsp3code.cpp"
   STACKTOP = sp;return; //@line 180 "../hsp3/hsp3code.cpp"
   break;
  }
  default: {
   $86 = (___cxa_allocate_exception(4)|0); //@line 178 "../hsp3/hsp3code.cpp"
   HEAP32[$86>>2] = 4; //@line 178 "../hsp3/hsp3code.cpp"
   ___cxa_throw(($86|0),(624|0),(0|0)); //@line 178 "../hsp3/hsp3code.cpp"
   // unreachable; //@line 178 "../hsp3/hsp3code.cpp"
  }
  }
 } while(0);
}
function __ZL15cmdfunc_defaulti($cmd) {
 $cmd = $cmd|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $cmd;
 $2 = HEAP32[632>>2]|0; //@line 1492 "../hsp3/hsp3code.cpp"
 $3 = $2 & 8192; //@line 1492 "../hsp3/hsp3code.cpp"
 $4 = ($3|0)!=(0); //@line 1492 "../hsp3/hsp3code.cpp"
 if (!($4)) {
  $12 = (___cxa_allocate_exception(4)|0); //@line 1498 "../hsp3/hsp3code.cpp"
  HEAP32[$12>>2] = 16; //@line 1498 "../hsp3/hsp3code.cpp"
  ___cxa_throw(($12|0),(624|0),(0|0)); //@line 1498 "../hsp3/hsp3code.cpp"
  // unreachable; //@line 1498 "../hsp3/hsp3code.cpp"
 }
 $5 = HEAP32[640>>2]|0; //@line 1493 "../hsp3/hsp3code.cpp"
 $tmp = $5; //@line 1493 "../hsp3/hsp3code.cpp"
 __Z9code_nextv(); //@line 1494 "../hsp3/hsp3code.cpp"
 $6 = $tmp; //@line 1495 "../hsp3/hsp3code.cpp"
 $7 = ($6|0)==(13); //@line 1495 "../hsp3/hsp3code.cpp"
 if ($7) {
  $10 = (___cxa_allocate_exception(4)|0); //@line 1495 "../hsp3/hsp3code.cpp"
  HEAP32[$10>>2] = 41; //@line 1495 "../hsp3/hsp3code.cpp"
  ___cxa_throw(($10|0),(624|0),(0|0)); //@line 1495 "../hsp3/hsp3code.cpp"
  // unreachable; //@line 1495 "../hsp3/hsp3code.cpp"
 }
 $8 = $tmp; //@line 1495 "../hsp3/hsp3code.cpp"
 $9 = ($8|0)==(10); //@line 1495 "../hsp3/hsp3code.cpp"
 if ($9) {
  $10 = (___cxa_allocate_exception(4)|0); //@line 1495 "../hsp3/hsp3code.cpp"
  HEAP32[$10>>2] = 41; //@line 1495 "../hsp3/hsp3code.cpp"
  ___cxa_throw(($10|0),(624|0),(0|0)); //@line 1495 "../hsp3/hsp3code.cpp"
  // unreachable; //@line 1495 "../hsp3/hsp3code.cpp"
 } else {
  $11 = (___cxa_allocate_exception(4)|0); //@line 1496 "../hsp3/hsp3code.cpp"
  HEAP32[$11>>2] = 18; //@line 1496 "../hsp3/hsp3code.cpp"
  ___cxa_throw(($11|0),(624|0),(0|0)); //@line 1496 "../hsp3/hsp3code.cpp"
  // unreachable; //@line 1496 "../hsp3/hsp3code.cpp"
 }
 return 0|0;
}
function __ZL20code_checkarray_obj2P4PVal($pval) {
 $pval = $pval|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $varproc = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $pval;
 $1 = $0; //@line 516 "../hsp3/hsp3code.cpp"
 $2 = (($1) + 40|0); //@line 516 "../hsp3/hsp3code.cpp"
 HEAP32[$2>>2] = 0; //@line 516 "../hsp3/hsp3code.cpp"
 $3 = $0; //@line 516 "../hsp3/hsp3code.cpp"
 $4 = (($3) + 38|0); //@line 516 "../hsp3/hsp3code.cpp"
 HEAP16[$4>>1] = 0; //@line 516 "../hsp3/hsp3code.cpp"
 HEAP32[1440>>2] = 0; //@line 518 "../hsp3/hsp3code.cpp"
 $5 = HEAP32[640>>2]|0; //@line 519 "../hsp3/hsp3code.cpp"
 $6 = ($5|0)==(0); //@line 519 "../hsp3/hsp3code.cpp"
 if (!($6)) {
  STACKTOP = sp;return; //@line 528 "../hsp3/hsp3code.cpp"
 }
 $7 = HEAP32[648>>2]|0; //@line 520 "../hsp3/hsp3code.cpp"
 $8 = ($7|0)==(40); //@line 520 "../hsp3/hsp3code.cpp"
 if ($8) {
  __Z9code_nextv(); //@line 521 "../hsp3/hsp3code.cpp"
  $9 = $0; //@line 522 "../hsp3/hsp3code.cpp"
  $10 = HEAP16[$9>>1]|0; //@line 522 "../hsp3/hsp3code.cpp"
  $11 = $10 << 16 >> 16; //@line 522 "../hsp3/hsp3code.cpp"
  $12 = HEAP32[3456>>2]|0; //@line 522 "../hsp3/hsp3code.cpp"
  $13 = (($12) + (($11*140)|0)|0); //@line 522 "../hsp3/hsp3code.cpp"
  $varproc = $13; //@line 522 "../hsp3/hsp3code.cpp"
  $14 = $varproc; //@line 523 "../hsp3/hsp3code.cpp"
  $15 = (($14) + 36|0); //@line 523 "../hsp3/hsp3code.cpp"
  $16 = HEAP32[$15>>2]|0; //@line 523 "../hsp3/hsp3code.cpp"
  $17 = $0; //@line 523 "../hsp3/hsp3code.cpp"
  FUNCTION_TABLE_vi[$16 & 255]($17); //@line 523 "../hsp3/hsp3code.cpp"
  HEAP32[1440>>2] = 1; //@line 524 "../hsp3/hsp3code.cpp"
  __Z9code_nextv(); //@line 525 "../hsp3/hsp3code.cpp"
 }
 STACKTOP = sp;return; //@line 528 "../hsp3/hsp3code.cpp"
}
function __ZL16code_checkarray2P4PVal($pval) {
 $pval = $pval|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $chk = 0, $i = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $temp = sp + 8|0;
 $0 = $pval;
 $1 = $0; //@line 379 "../hsp3/hsp3code.cpp"
 $2 = (($1) + 40|0); //@line 379 "../hsp3/hsp3code.cpp"
 HEAP32[$2>>2] = 0; //@line 379 "../hsp3/hsp3code.cpp"
 $3 = $0; //@line 379 "../hsp3/hsp3code.cpp"
 $4 = (($3) + 38|0); //@line 379 "../hsp3/hsp3code.cpp"
 HEAP16[$4>>1] = 0; //@line 379 "../hsp3/hsp3code.cpp"
 $5 = HEAP32[640>>2]|0; //@line 381 "../hsp3/hsp3code.cpp"
 $6 = ($5|0)==(0); //@line 381 "../hsp3/hsp3code.cpp"
 if (!($6)) {
  STACKTOP = sp;return; //@line 396 "../hsp3/hsp3code.cpp"
 }
 $7 = HEAP32[648>>2]|0; //@line 382 "../hsp3/hsp3code.cpp"
 $8 = ($7|0)==(40); //@line 382 "../hsp3/hsp3code.cpp"
 if (!($8)) {
  STACKTOP = sp;return; //@line 396 "../hsp3/hsp3code.cpp"
 }
 __Z9code_nextv(); //@line 383 "../hsp3/hsp3code.cpp"
 while(1) {
  $9 = $0; //@line 386 "../hsp3/hsp3code.cpp"
  $10 = (($9) + 38|0); //@line 386 "../hsp3/hsp3code.cpp"
  $11 = HEAP16[$10>>1]|0; //@line 386 "../hsp3/hsp3code.cpp"
  $12 = (($temp) + 38|0); //@line 386 "../hsp3/hsp3code.cpp"
  HEAP16[$12>>1] = $11; //@line 386 "../hsp3/hsp3code.cpp"
  $13 = $0; //@line 386 "../hsp3/hsp3code.cpp"
  $14 = (($13) + 40|0); //@line 386 "../hsp3/hsp3code.cpp"
  $15 = HEAP32[$14>>2]|0; //@line 386 "../hsp3/hsp3code.cpp"
  $16 = (($temp) + 40|0); //@line 386 "../hsp3/hsp3code.cpp"
  HEAP32[$16>>2] = $15; //@line 386 "../hsp3/hsp3code.cpp"
  $17 = $0; //@line 386 "../hsp3/hsp3code.cpp"
  $18 = (($17) + 44|0); //@line 386 "../hsp3/hsp3code.cpp"
  $19 = HEAP32[$18>>2]|0; //@line 386 "../hsp3/hsp3code.cpp"
  $20 = (($temp) + 44|0); //@line 386 "../hsp3/hsp3code.cpp"
  HEAP32[$20>>2] = $19; //@line 386 "../hsp3/hsp3code.cpp"
  $21 = (__Z8code_getv()|0); //@line 387 "../hsp3/hsp3code.cpp"
  $chk = $21; //@line 387 "../hsp3/hsp3code.cpp"
  $22 = $chk; //@line 388 "../hsp3/hsp3code.cpp"
  $23 = ($22|0)<=(-2); //@line 388 "../hsp3/hsp3code.cpp"
  if ($23) {
   label = 5;
   break;
  }
  $25 = HEAP32[592>>2]|0; //@line 389 "../hsp3/hsp3code.cpp"
  $26 = HEAP16[$25>>1]|0; //@line 389 "../hsp3/hsp3code.cpp"
  $27 = $26 << 16 >> 16; //@line 389 "../hsp3/hsp3code.cpp"
  $28 = ($27|0)!=(4); //@line 389 "../hsp3/hsp3code.cpp"
  if ($28) {
   label = 7;
   break;
  }
  $30 = (($temp) + 38|0); //@line 390 "../hsp3/hsp3code.cpp"
  $31 = HEAP16[$30>>1]|0; //@line 390 "../hsp3/hsp3code.cpp"
  $32 = $0; //@line 390 "../hsp3/hsp3code.cpp"
  $33 = (($32) + 38|0); //@line 390 "../hsp3/hsp3code.cpp"
  HEAP16[$33>>1] = $31; //@line 390 "../hsp3/hsp3code.cpp"
  $34 = (($temp) + 40|0); //@line 390 "../hsp3/hsp3code.cpp"
  $35 = HEAP32[$34>>2]|0; //@line 390 "../hsp3/hsp3code.cpp"
  $36 = $0; //@line 390 "../hsp3/hsp3code.cpp"
  $37 = (($36) + 40|0); //@line 390 "../hsp3/hsp3code.cpp"
  HEAP32[$37>>2] = $35; //@line 390 "../hsp3/hsp3code.cpp"
  $38 = (($temp) + 44|0); //@line 390 "../hsp3/hsp3code.cpp"
  $39 = HEAP32[$38>>2]|0; //@line 390 "../hsp3/hsp3code.cpp"
  $40 = $0; //@line 390 "../hsp3/hsp3code.cpp"
  $41 = (($40) + 44|0); //@line 390 "../hsp3/hsp3code.cpp"
  HEAP32[$41>>2] = $39; //@line 390 "../hsp3/hsp3code.cpp"
  $42 = HEAP32[592>>2]|0; //@line 391 "../hsp3/hsp3code.cpp"
  $43 = (($42) + 28|0); //@line 391 "../hsp3/hsp3code.cpp"
  $44 = HEAP32[$43>>2]|0; //@line 391 "../hsp3/hsp3code.cpp"
  $45 = HEAP32[$44>>2]|0; //@line 391 "../hsp3/hsp3code.cpp"
  $i = $45; //@line 391 "../hsp3/hsp3code.cpp"
  $46 = $0; //@line 392 "../hsp3/hsp3code.cpp"
  $47 = $i; //@line 392 "../hsp3/hsp3code.cpp"
  __ZL14code_arrayint2P4PVali($46,$47); //@line 392 "../hsp3/hsp3code.cpp"
  $48 = $chk; //@line 393 "../hsp3/hsp3code.cpp"
  $49 = ($48|0)==(-1); //@line 393 "../hsp3/hsp3code.cpp"
  if ($49) {
   label = 9;
   break;
  }
 }
 if ((label|0) == 5) {
  $24 = (___cxa_allocate_exception(4)|0); //@line 388 "../hsp3/hsp3code.cpp"
  HEAP32[$24>>2] = 25; //@line 388 "../hsp3/hsp3code.cpp"
  ___cxa_throw(($24|0),(624|0),(0|0)); //@line 388 "../hsp3/hsp3code.cpp"
  // unreachable; //@line 388 "../hsp3/hsp3code.cpp"
 }
 else if ((label|0) == 7) {
  $29 = (___cxa_allocate_exception(4)|0); //@line 389 "../hsp3/hsp3code.cpp"
  HEAP32[$29>>2] = 6; //@line 389 "../hsp3/hsp3code.cpp"
  ___cxa_throw(($29|0),(624|0),(0|0)); //@line 389 "../hsp3/hsp3code.cpp"
  // unreachable; //@line 389 "../hsp3/hsp3code.cpp"
 }
 else if ((label|0) == 9) {
  __Z9code_nextv(); //@line 395 "../hsp3/hsp3code.cpp"
  STACKTOP = sp;return; //@line 396 "../hsp3/hsp3code.cpp"
 }
}
function __ZL8calcprmfRiii($mval,$exp,$p) {
 $mval = $mval|0;
 $exp = $exp|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $mval;
 $1 = $exp;
 $2 = $p;
 $3 = $1; //@line 187 "../hsp3/hsp3code.cpp"
 do {
  switch ($3|0) {
  case 11:  {
   $60 = $0; //@line 226 "../hsp3/hsp3code.cpp"
   $61 = HEAP32[$60>>2]|0; //@line 226 "../hsp3/hsp3code.cpp"
   $62 = $2; //@line 226 "../hsp3/hsp3code.cpp"
   $63 = ($61|0)<($62|0); //@line 226 "../hsp3/hsp3code.cpp"
   $64 = $63&1; //@line 226 "../hsp3/hsp3code.cpp"
   $65 = $0; //@line 226 "../hsp3/hsp3code.cpp"
   HEAP32[$65>>2] = $64; //@line 226 "../hsp3/hsp3code.cpp"
   STACKTOP = sp;return; //@line 247 "../hsp3/hsp3code.cpp"
   break;
  }
  case 14:  {
   $78 = $2; //@line 236 "../hsp3/hsp3code.cpp"
   $79 = $0; //@line 236 "../hsp3/hsp3code.cpp"
   $80 = HEAP32[$79>>2]|0; //@line 236 "../hsp3/hsp3code.cpp"
   $81 = $80 >> $78; //@line 236 "../hsp3/hsp3code.cpp"
   HEAP32[$79>>2] = $81; //@line 236 "../hsp3/hsp3code.cpp"
   STACKTOP = sp;return; //@line 247 "../hsp3/hsp3code.cpp"
   break;
  }
  case 15:  {
   $82 = $2; //@line 239 "../hsp3/hsp3code.cpp"
   $83 = $0; //@line 239 "../hsp3/hsp3code.cpp"
   $84 = HEAP32[$83>>2]|0; //@line 239 "../hsp3/hsp3code.cpp"
   $85 = $84 << $82; //@line 239 "../hsp3/hsp3code.cpp"
   HEAP32[$83>>2] = $85; //@line 239 "../hsp3/hsp3code.cpp"
   STACKTOP = sp;return; //@line 247 "../hsp3/hsp3code.cpp"
   break;
  }
  case 12:  {
   $66 = $0; //@line 229 "../hsp3/hsp3code.cpp"
   $67 = HEAP32[$66>>2]|0; //@line 229 "../hsp3/hsp3code.cpp"
   $68 = $2; //@line 229 "../hsp3/hsp3code.cpp"
   $69 = ($67|0)>=($68|0); //@line 229 "../hsp3/hsp3code.cpp"
   $70 = $69&1; //@line 229 "../hsp3/hsp3code.cpp"
   $71 = $0; //@line 229 "../hsp3/hsp3code.cpp"
   HEAP32[$71>>2] = $70; //@line 229 "../hsp3/hsp3code.cpp"
   STACKTOP = sp;return; //@line 247 "../hsp3/hsp3code.cpp"
   break;
  }
  case 13:  {
   $72 = $0; //@line 232 "../hsp3/hsp3code.cpp"
   $73 = HEAP32[$72>>2]|0; //@line 232 "../hsp3/hsp3code.cpp"
   $74 = $2; //@line 232 "../hsp3/hsp3code.cpp"
   $75 = ($73|0)<=($74|0); //@line 232 "../hsp3/hsp3code.cpp"
   $76 = $75&1; //@line 232 "../hsp3/hsp3code.cpp"
   $77 = $0; //@line 232 "../hsp3/hsp3code.cpp"
   HEAP32[$77>>2] = $76; //@line 232 "../hsp3/hsp3code.cpp"
   STACKTOP = sp;return; //@line 247 "../hsp3/hsp3code.cpp"
   break;
  }
  case 40:  {
   $86 = (___cxa_allocate_exception(4)|0); //@line 243 "../hsp3/hsp3code.cpp"
   HEAP32[$86>>2] = 34; //@line 243 "../hsp3/hsp3code.cpp"
   ___cxa_throw(($86|0),(624|0),(0|0)); //@line 243 "../hsp3/hsp3code.cpp"
   // unreachable; //@line 243 "../hsp3/hsp3code.cpp"
   break;
  }
  case 0:  {
   $4 = $2; //@line 189 "../hsp3/hsp3code.cpp"
   $5 = $0; //@line 189 "../hsp3/hsp3code.cpp"
   $6 = HEAP32[$5>>2]|0; //@line 189 "../hsp3/hsp3code.cpp"
   $7 = (($6) + ($4))|0; //@line 189 "../hsp3/hsp3code.cpp"
   HEAP32[$5>>2] = $7; //@line 189 "../hsp3/hsp3code.cpp"
   STACKTOP = sp;return; //@line 247 "../hsp3/hsp3code.cpp"
   break;
  }
  case 1:  {
   $8 = $2; //@line 192 "../hsp3/hsp3code.cpp"
   $9 = $0; //@line 192 "../hsp3/hsp3code.cpp"
   $10 = HEAP32[$9>>2]|0; //@line 192 "../hsp3/hsp3code.cpp"
   $11 = (($10) - ($8))|0; //@line 192 "../hsp3/hsp3code.cpp"
   HEAP32[$9>>2] = $11; //@line 192 "../hsp3/hsp3code.cpp"
   STACKTOP = sp;return; //@line 247 "../hsp3/hsp3code.cpp"
   break;
  }
  case 2:  {
   $12 = $2; //@line 195 "../hsp3/hsp3code.cpp"
   $13 = $0; //@line 195 "../hsp3/hsp3code.cpp"
   $14 = HEAP32[$13>>2]|0; //@line 195 "../hsp3/hsp3code.cpp"
   $15 = Math_imul($14, $12)|0; //@line 195 "../hsp3/hsp3code.cpp"
   HEAP32[$13>>2] = $15; //@line 195 "../hsp3/hsp3code.cpp"
   STACKTOP = sp;return; //@line 247 "../hsp3/hsp3code.cpp"
   break;
  }
  case 3:  {
   $16 = $2; //@line 198 "../hsp3/hsp3code.cpp"
   $17 = ($16|0)==(0); //@line 198 "../hsp3/hsp3code.cpp"
   if ($17) {
    $18 = (___cxa_allocate_exception(4)|0); //@line 198 "../hsp3/hsp3code.cpp"
    HEAP32[$18>>2] = 19; //@line 198 "../hsp3/hsp3code.cpp"
    ___cxa_throw(($18|0),(624|0),(0|0)); //@line 198 "../hsp3/hsp3code.cpp"
    // unreachable; //@line 198 "../hsp3/hsp3code.cpp"
   }
   $19 = $2; //@line 199 "../hsp3/hsp3code.cpp"
   $20 = $0; //@line 199 "../hsp3/hsp3code.cpp"
   $21 = HEAP32[$20>>2]|0; //@line 199 "../hsp3/hsp3code.cpp"
   $22 = (($21|0) / ($19|0))&-1; //@line 199 "../hsp3/hsp3code.cpp"
   HEAP32[$20>>2] = $22; //@line 199 "../hsp3/hsp3code.cpp"
   STACKTOP = sp;return; //@line 247 "../hsp3/hsp3code.cpp"
   break;
  }
  case 4:  {
   $23 = $2; //@line 202 "../hsp3/hsp3code.cpp"
   $24 = ($23|0)==(0); //@line 202 "../hsp3/hsp3code.cpp"
   if ($24) {
    $25 = (___cxa_allocate_exception(4)|0); //@line 202 "../hsp3/hsp3code.cpp"
    HEAP32[$25>>2] = 19; //@line 202 "../hsp3/hsp3code.cpp"
    ___cxa_throw(($25|0),(624|0),(0|0)); //@line 202 "../hsp3/hsp3code.cpp"
    // unreachable; //@line 202 "../hsp3/hsp3code.cpp"
   }
   $26 = $2; //@line 203 "../hsp3/hsp3code.cpp"
   $27 = $0; //@line 203 "../hsp3/hsp3code.cpp"
   $28 = HEAP32[$27>>2]|0; //@line 203 "../hsp3/hsp3code.cpp"
   $29 = (($28|0) % ($26|0))&-1; //@line 203 "../hsp3/hsp3code.cpp"
   HEAP32[$27>>2] = $29; //@line 203 "../hsp3/hsp3code.cpp"
   STACKTOP = sp;return; //@line 247 "../hsp3/hsp3code.cpp"
   break;
  }
  case 5:  {
   $30 = $2; //@line 207 "../hsp3/hsp3code.cpp"
   $31 = $0; //@line 207 "../hsp3/hsp3code.cpp"
   $32 = HEAP32[$31>>2]|0; //@line 207 "../hsp3/hsp3code.cpp"
   $33 = $32 & $30; //@line 207 "../hsp3/hsp3code.cpp"
   HEAP32[$31>>2] = $33; //@line 207 "../hsp3/hsp3code.cpp"
   STACKTOP = sp;return; //@line 247 "../hsp3/hsp3code.cpp"
   break;
  }
  case 6:  {
   $34 = $2; //@line 210 "../hsp3/hsp3code.cpp"
   $35 = $0; //@line 210 "../hsp3/hsp3code.cpp"
   $36 = HEAP32[$35>>2]|0; //@line 210 "../hsp3/hsp3code.cpp"
   $37 = $36 | $34; //@line 210 "../hsp3/hsp3code.cpp"
   HEAP32[$35>>2] = $37; //@line 210 "../hsp3/hsp3code.cpp"
   STACKTOP = sp;return; //@line 247 "../hsp3/hsp3code.cpp"
   break;
  }
  case 7:  {
   $38 = $2; //@line 213 "../hsp3/hsp3code.cpp"
   $39 = $0; //@line 213 "../hsp3/hsp3code.cpp"
   $40 = HEAP32[$39>>2]|0; //@line 213 "../hsp3/hsp3code.cpp"
   $41 = $40 ^ $38; //@line 213 "../hsp3/hsp3code.cpp"
   HEAP32[$39>>2] = $41; //@line 213 "../hsp3/hsp3code.cpp"
   STACKTOP = sp;return; //@line 247 "../hsp3/hsp3code.cpp"
   break;
  }
  case 8:  {
   $42 = $0; //@line 217 "../hsp3/hsp3code.cpp"
   $43 = HEAP32[$42>>2]|0; //@line 217 "../hsp3/hsp3code.cpp"
   $44 = $2; //@line 217 "../hsp3/hsp3code.cpp"
   $45 = ($43|0)==($44|0); //@line 217 "../hsp3/hsp3code.cpp"
   $46 = $45&1; //@line 217 "../hsp3/hsp3code.cpp"
   $47 = $0; //@line 217 "../hsp3/hsp3code.cpp"
   HEAP32[$47>>2] = $46; //@line 217 "../hsp3/hsp3code.cpp"
   STACKTOP = sp;return; //@line 247 "../hsp3/hsp3code.cpp"
   break;
  }
  case 9:  {
   $48 = $0; //@line 220 "../hsp3/hsp3code.cpp"
   $49 = HEAP32[$48>>2]|0; //@line 220 "../hsp3/hsp3code.cpp"
   $50 = $2; //@line 220 "../hsp3/hsp3code.cpp"
   $51 = ($49|0)!=($50|0); //@line 220 "../hsp3/hsp3code.cpp"
   $52 = $51&1; //@line 220 "../hsp3/hsp3code.cpp"
   $53 = $0; //@line 220 "../hsp3/hsp3code.cpp"
   HEAP32[$53>>2] = $52; //@line 220 "../hsp3/hsp3code.cpp"
   STACKTOP = sp;return; //@line 247 "../hsp3/hsp3code.cpp"
   break;
  }
  case 10:  {
   $54 = $0; //@line 223 "../hsp3/hsp3code.cpp"
   $55 = HEAP32[$54>>2]|0; //@line 223 "../hsp3/hsp3code.cpp"
   $56 = $2; //@line 223 "../hsp3/hsp3code.cpp"
   $57 = ($55|0)>($56|0); //@line 223 "../hsp3/hsp3code.cpp"
   $58 = $57&1; //@line 223 "../hsp3/hsp3code.cpp"
   $59 = $0; //@line 223 "../hsp3/hsp3code.cpp"
   HEAP32[$59>>2] = $58; //@line 223 "../hsp3/hsp3code.cpp"
   STACKTOP = sp;return; //@line 247 "../hsp3/hsp3code.cpp"
   break;
  }
  default: {
   $87 = (___cxa_allocate_exception(4)|0); //@line 245 "../hsp3/hsp3code.cpp"
   HEAP32[$87>>2] = 4; //@line 245 "../hsp3/hsp3code.cpp"
   ___cxa_throw(($87|0),(624|0),(0|0)); //@line 245 "../hsp3/hsp3code.cpp"
   // unreachable; //@line 245 "../hsp3/hsp3code.cpp"
  }
  }
 } while(0);
}
function __ZL6getU32Pt($mcs) {
 $mcs = $mcs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $mcs;
 $1 = $0; //@line 67 "../hsp3/hsp3code.cpp"
 $2 = (($1) + 2|0); //@line 67 "../hsp3/hsp3code.cpp"
 $3 = HEAP16[$2>>1]|0; //@line 67 "../hsp3/hsp3code.cpp"
 $4 = $3&65535; //@line 67 "../hsp3/hsp3code.cpp"
 $5 = $4 << 16; //@line 67 "../hsp3/hsp3code.cpp"
 $6 = $0; //@line 67 "../hsp3/hsp3code.cpp"
 $7 = HEAP16[$6>>1]|0; //@line 67 "../hsp3/hsp3code.cpp"
 $8 = $7&65535; //@line 67 "../hsp3/hsp3code.cpp"
 $9 = $5 | $8; //@line 67 "../hsp3/hsp3code.cpp"
 STACKTOP = sp;return ($9|0); //@line 67 "../hsp3/hsp3code.cpp"
}
function __Z13hspd_geterror8HSPERROR($error) {
 $error = $error|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $error;
 $2 = $1; //@line 124 "../hsp3/hsp3debug.cpp"
 $3 = ($2|0)<(0); //@line 124 "../hsp3/hsp3debug.cpp"
 if (!($3)) {
  $4 = $1; //@line 124 "../hsp3/hsp3debug.cpp"
  $5 = ($4|0)>=(44); //@line 124 "../hsp3/hsp3debug.cpp"
  if (!($5)) {
   $7 = $1; //@line 125 "../hsp3/hsp3debug.cpp"
   $8 = (1448 + ($7<<2)|0); //@line 125 "../hsp3/hsp3debug.cpp"
   $9 = HEAP32[$8>>2]|0; //@line 125 "../hsp3/hsp3debug.cpp"
   $0 = $9; //@line 125 "../hsp3/hsp3debug.cpp"
   $10 = $0; //@line 126 "../hsp3/hsp3debug.cpp"
   STACKTOP = sp;return ($10|0); //@line 126 "../hsp3/hsp3debug.cpp"
  }
 }
 $6 = HEAP32[1448>>2]|0; //@line 124 "../hsp3/hsp3debug.cpp"
 $0 = $6; //@line 124 "../hsp3/hsp3debug.cpp"
 $10 = $0; //@line 126 "../hsp3/hsp3debug.cpp"
 STACKTOP = sp;return ($10|0); //@line 126 "../hsp3/hsp3debug.cpp"
}
function __Z11ex_getbmscri($wid) {
 $wid = $wid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $bm = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $wid;
 $1 = HEAP32[3144>>2]|0; //@line 240 "hsp3gr_dish.cpp"
 $2 = $0; //@line 240 "hsp3gr_dish.cpp"
 $3 = (__ZN6HspWnd8GetBmscrEi($1,$2)|0); //@line 240 "hsp3gr_dish.cpp"
 $bm = $3; //@line 240 "hsp3gr_dish.cpp"
 $4 = $bm; //@line 241 "hsp3gr_dish.cpp"
 STACKTOP = sp;return ($4|0); //@line 241 "hsp3gr_dish.cpp"
}
function __ZN6HspWnd8GetBmscrEi($this,$id) {
 $this = $this|0;
 $id = $id|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $id;
 $2 = $0;
 $3 = $1; //@line 317 "./hspwnd_dish.h"
 $4 = (($2) + 32|0); //@line 317 "./hspwnd_dish.h"
 $5 = HEAP32[$4>>2]|0; //@line 317 "./hspwnd_dish.h"
 $6 = (($5) + ($3<<2)|0); //@line 317 "./hspwnd_dish.h"
 $7 = HEAP32[$6>>2]|0; //@line 317 "./hspwnd_dish.h"
 STACKTOP = sp;return ($7|0); //@line 317 "./hspwnd_dish.h"
}
function __Z7ex_mrefP4PVali($pval,$prm) {
 $pval = $pval|0;
 $prm = $prm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $GETBM = 0, $ptr = 0, $size = 0;
 var $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $pval;
 $1 = $prm;
 $GETBM = 96; //@line 248 "hsp3gr_dish.cpp"
 $t = 4; //@line 249 "hsp3gr_dish.cpp"
 $size = 4; //@line 250 "hsp3gr_dish.cpp"
 $2 = $1; //@line 251 "hsp3gr_dish.cpp"
 $3 = ($2|0)>=(96); //@line 251 "hsp3gr_dish.cpp"
 if ($3) {
  $4 = (___cxa_allocate_exception(4)|0); //@line 252 "hsp3gr_dish.cpp"
  HEAP32[$4>>2] = 21; //@line 252 "hsp3gr_dish.cpp"
  ___cxa_throw(($4|0),(624|0),(0|0)); //@line 252 "hsp3gr_dish.cpp"
  // unreachable; //@line 252 "hsp3gr_dish.cpp"
 }
 $5 = $1; //@line 254 "hsp3gr_dish.cpp"
 if ((($5|0) == 65)) {
  $8 = HEAP32[3152>>2]|0; //@line 259 "hsp3gr_dish.cpp"
  $9 = (($8) + 792|0); //@line 259 "hsp3gr_dish.cpp"
  $10 = HEAP32[$9>>2]|0; //@line 259 "hsp3gr_dish.cpp"
  $ptr = $10; //@line 259 "hsp3gr_dish.cpp"
  $t = 2; //@line 260 "hsp3gr_dish.cpp"
  $size = 1024; //@line 261 "hsp3gr_dish.cpp"
 } else if ((($5|0) == 68)) {
  $11 = HEAP32[3152>>2]|0; //@line 264 "hsp3gr_dish.cpp"
  $ptr = $11; //@line 264 "hsp3gr_dish.cpp"
  $size = 888; //@line 264 "hsp3gr_dish.cpp"
 } else if ((($5|0) == 64)) {
  $6 = HEAP32[3152>>2]|0; //@line 256 "hsp3gr_dish.cpp"
  $7 = (($6) + 784|0); //@line 256 "hsp3gr_dish.cpp"
  $ptr = $7; //@line 256 "hsp3gr_dish.cpp"
 } else {
  $12 = (___cxa_allocate_exception(4)|0); //@line 267 "hsp3gr_dish.cpp"
  HEAP32[$12>>2] = 21; //@line 267 "hsp3gr_dish.cpp"
  ___cxa_throw(($12|0),(624|0),(0|0)); //@line 267 "hsp3gr_dish.cpp"
  // unreachable; //@line 267 "hsp3gr_dish.cpp"
 }
 $13 = $0; //@line 270 "hsp3gr_dish.cpp"
 $14 = $t; //@line 270 "hsp3gr_dish.cpp"
 $15 = $ptr; //@line 270 "hsp3gr_dish.cpp"
 $16 = $size; //@line 270 "hsp3gr_dish.cpp"
 __Z16HspVarCoreDupPtrP4PValiPvi($13,$14,$15,$16); //@line 270 "hsp3gr_dish.cpp"
 STACKTOP = sp;return; //@line 271 "hsp3gr_dish.cpp"
}
function __Z19hsp3typeinit_extcmdP12HSP3TYPEINFO($info) {
 $info = $info|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exinfo = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $info;
 $3 = $0; //@line 3544 "hsp3gr_dish.cpp"
 $4 = (($3) + 4|0); //@line 3544 "hsp3gr_dish.cpp"
 $5 = HEAP32[$4>>2]|0; //@line 3544 "hsp3gr_dish.cpp"
 HEAP32[3152>>2] = $5; //@line 3544 "hsp3gr_dish.cpp"
 $6 = $0; //@line 3545 "hsp3gr_dish.cpp"
 $7 = (($6) + 8|0); //@line 3545 "hsp3gr_dish.cpp"
 $8 = HEAP32[$7>>2]|0; //@line 3545 "hsp3gr_dish.cpp"
 $exinfo = $8; //@line 3545 "hsp3gr_dish.cpp"
 $9 = $exinfo; //@line 3546 "hsp3gr_dish.cpp"
 $10 = (($9) + 24|0); //@line 3546 "hsp3gr_dish.cpp"
 $11 = HEAP32[$10>>2]|0; //@line 3546 "hsp3gr_dish.cpp"
 HEAP32[3160>>2] = $11; //@line 3546 "hsp3gr_dish.cpp"
 $12 = $exinfo; //@line 3547 "hsp3gr_dish.cpp"
 $13 = (($12) + 28|0); //@line 3547 "hsp3gr_dish.cpp"
 $14 = HEAP32[$13>>2]|0; //@line 3547 "hsp3gr_dish.cpp"
 HEAP32[3168>>2] = $14; //@line 3547 "hsp3gr_dish.cpp"
 $15 = (__Znwj(68)|0); //@line 3548 "hsp3gr_dish.cpp"
 __THREW__ = 0;
 invoke_vi(74,($15|0)); //@line 3548 "hsp3gr_dish.cpp"
 $16 = __THREW__; __THREW__ = 0;
 $17 = $16&1;
 if ($17) {
  $39 = ___cxa_find_matching_catch(-1,-1)|0;
  $40 = tempRet0;
  $1 = $39; //@line 3548 "hsp3gr_dish.cpp"
  $2 = $40; //@line 3548 "hsp3gr_dish.cpp"
  __ZdlPv($15); //@line 3548 "hsp3gr_dish.cpp"
  $43 = $1; //@line 3548 "hsp3gr_dish.cpp"
  $44 = $2; //@line 3548 "hsp3gr_dish.cpp"
  ___resumeException($43|0);
  // unreachable;
 }
 HEAP32[3144>>2] = $15; //@line 3548 "hsp3gr_dish.cpp"
 $18 = HEAP32[3144>>2]|0; //@line 3549 "hsp3gr_dish.cpp"
 $19 = (__ZN6HspWnd8GetBmscrEi($18,0)|0); //@line 3549 "hsp3gr_dish.cpp"
 HEAP32[3176>>2] = $19; //@line 3549 "hsp3gr_dish.cpp"
 $20 = HEAP32[3152>>2]|0; //@line 3550 "hsp3gr_dish.cpp"
 $21 = (($20) + 784|0); //@line 3550 "hsp3gr_dish.cpp"
 __Z23SetObjectEventNoticePtrPi($21); //@line 3550 "hsp3gr_dish.cpp"
 $22 = (__Znwj(12)|0); //@line 3553 "hsp3gr_dish.cpp"
 __THREW__ = 0;
 invoke_vi(75,($22|0)); //@line 3553 "hsp3gr_dish.cpp"
 $23 = __THREW__; __THREW__ = 0;
 $24 = $23&1;
 if (!($24)) {
  HEAP32[3184>>2] = $22; //@line 3553 "hsp3gr_dish.cpp"
  $25 = HEAP32[3184>>2]|0; //@line 3554 "hsp3gr_dish.cpp"
  $26 = HEAP32[3152>>2]|0; //@line 3554 "hsp3gr_dish.cpp"
  $27 = (($26) + 856|0); //@line 3554 "hsp3gr_dish.cpp"
  $28 = HEAP32[$27>>2]|0; //@line 3554 "hsp3gr_dish.cpp"
  __ZN5MMMan5ResetEPv($25,$28); //@line 3554 "hsp3gr_dish.cpp"
  $29 = $0; //@line 3563 "hsp3gr_dish.cpp"
  $30 = (($29) + 12|0); //@line 3563 "hsp3gr_dish.cpp"
  HEAP32[$30>>2] = 76; //@line 3563 "hsp3gr_dish.cpp"
  $31 = $0; //@line 3564 "hsp3gr_dish.cpp"
  $32 = (($31) + 20|0); //@line 3564 "hsp3gr_dish.cpp"
  HEAP32[$32>>2] = 77; //@line 3564 "hsp3gr_dish.cpp"
  $33 = $exinfo; //@line 3568 "hsp3gr_dish.cpp"
  $34 = (($33) + 20|0); //@line 3568 "hsp3gr_dish.cpp"
  HEAP32[$34>>2] = 3192; //@line 3568 "hsp3gr_dish.cpp"
  $35 = $exinfo; //@line 3569 "hsp3gr_dish.cpp"
  $36 = (($35) + 72|0); //@line 3569 "hsp3gr_dish.cpp"
  HEAP32[$36>>2] = 78; //@line 3569 "hsp3gr_dish.cpp"
  $37 = $exinfo; //@line 3570 "hsp3gr_dish.cpp"
  $38 = (($37) + 172|0); //@line 3570 "hsp3gr_dish.cpp"
  HEAP32[$38>>2] = 79; //@line 3570 "hsp3gr_dish.cpp"
  STACKTOP = sp;return; //@line 3575 "hsp3gr_dish.cpp"
 }
 $41 = ___cxa_find_matching_catch(-1,-1)|0;
 $42 = tempRet0;
 $1 = $41; //@line 3553 "hsp3gr_dish.cpp"
 $2 = $42; //@line 3553 "hsp3gr_dish.cpp"
 __ZdlPv($22); //@line 3553 "hsp3gr_dish.cpp"
 $43 = $1; //@line 3548 "hsp3gr_dish.cpp"
 $44 = $2; //@line 3548 "hsp3gr_dish.cpp"
 ___resumeException($43|0);
 // unreachable;
}
function __ZL14cmdfunc_extcmdi($cmd) {
 $cmd = $cmd|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0.0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0.0, $535 = 0.0, $536 = 0, $537 = 0, $538 = 0, $539 = 0.0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0.0, $555 = 0.0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0.0, $68 = 0, $680 = 0.0, $681 = 0.0, $682 = 0, $683 = 0, $684 = 0, $685 = 0.0, $686 = 0, $687 = 0.0, $688 = 0, $689 = 0.0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0.0, $698 = 0.0, $699 = 0.0, $7 = 0, $70 = 0, $700 = 0.0, $701 = 0.0, $702 = 0.0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
 var $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0;
 var $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0;
 var $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0;
 var $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0;
 var $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0;
 var $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0;
 var $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0;
 var $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a = 0, $aptr = 0, $aptr10 = 0, $aptr6 = 0, $bm2 = 0, $bm212 = 0, $bm214 = 0, $bm215 = 0, $bmsrc = 0, $btnname = 0, $c = 0, $chk = 0;
 var $cname = 0, $ep1 = 0, $fname = 0, $fname13 = 0, $fname2 = 0, $fname3 = 0, $fontname = 0, $gradmode = 0, $i = 0, $i1 = 0, $i_res = 0, $mt = 0, $p = 0, $p7 = 0, $p77 = 0, $p8 = 0, $p88 = 0, $p_aptr = 0, $p_aptr18 = 0, $p_aptr23 = 0;
 var $p_ptr = 0, $p_ptr20 = 0, $p_ptr26 = 0, $p_pval = 0, $p_pval17 = 0, $p_pval19 = 0, $p_pval21 = 0, $p_pval22 = 0, $p_pval25 = 0, $p_res = 0, $p_res30 = 0, $p_res31 = 0, $p_size = 0, $p_size28 = 0, $pp2 = 0, $prmname = 0, $ps = 0, $ps24 = 0, $ps27 = 0, $ps29 = 0;
 var $ptr = 0, $ptx = 0, $pty = 0, $pval = 0, $pval5 = 0, $pval9 = 0, $px = 0, $py = 0, $res = 0, $rot = 0.0, $rot11 = 0.0, $rot16 = 0.0, $s_res = 0, $sbr = 0, $src = 0, $src4 = 0, $strsize = 0, $vptr = 0, $wid = 0, $zx = 0.0;
 var $zy = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1456|0;
 $btnname = sp + 296|0;
 $fname2 = sp + 872|0;
 $fontname = sp + 1128|0;
 $fname3 = sp + 1384|0;
 $pval = sp + 280|0;
 $pval5 = sp + 276|0;
 $pval9 = sp + 184|0;
 $res = sp + 176|0;
 $fname13 = sp + 808|0;
 $p_pval = sp + 40|0;
 $p_pval17 = sp + 52|0;
 $p_pval19 = sp + 96|0;
 $p_pval21 = sp + 108|0;
 $p_pval22 = sp + 112|0;
 $p_pval25 = sp + 132|0;
 $p_size28 = sp + 144|0;
 $prmname = sp + 552|0;
 $1 = $cmd;
 __Z9code_nextv(); //@line 491 "hsp3gr_dish.cpp"
 $2 = $1; //@line 492 "hsp3gr_dish.cpp"
 L1: do {
  switch ($2|0) {
  case 55:  {
   $565 = (__Z10code_getdii(0)|0); //@line 970 "hsp3gr_dish.cpp"
   $ep1 = $565; //@line 970 "hsp3gr_dish.cpp"
   $566 = (__ZL10code_getivv()|0); //@line 971 "hsp3gr_dish.cpp"
   $px = $566; //@line 971 "hsp3gr_dish.cpp"
   $567 = (__ZL10code_getivv()|0); //@line 972 "hsp3gr_dish.cpp"
   $py = $567; //@line 972 "hsp3gr_dish.cpp"
   $568 = $ep1; //@line 974 "hsp3gr_dish.cpp"
   $569 = ($568|0)>=(0); //@line 974 "hsp3gr_dish.cpp"
   if ($569) {
    $570 = HEAP32[3144>>2]|0; //@line 975 "hsp3gr_dish.cpp"
    $571 = $ep1; //@line 975 "hsp3gr_dish.cpp"
    $572 = (__ZN6HspWnd12GetBmscrSafeEi($570,$571)|0); //@line 975 "hsp3gr_dish.cpp"
    $bm212 = $572; //@line 975 "hsp3gr_dish.cpp"
    $573 = (__ZL10code_getivv()|0); //@line 976 "hsp3gr_dish.cpp"
    $ptx = $573; //@line 976 "hsp3gr_dish.cpp"
    $574 = (__ZL10code_getivv()|0); //@line 977 "hsp3gr_dish.cpp"
    $pty = $574; //@line 977 "hsp3gr_dish.cpp"
   } else {
    $bm212 = 0; //@line 979 "hsp3gr_dish.cpp"
    $ptx = 0; //@line 980 "hsp3gr_dish.cpp"
    $pty = 0; //@line 981 "hsp3gr_dish.cpp"
    $575 = $ep1; //@line 982 "hsp3gr_dish.cpp"
    $576 = ($575|0)==(-257); //@line 982 "hsp3gr_dish.cpp"
    if ($576) {
     $577 = (__ZL10code_getivv()|0); //@line 983 "hsp3gr_dish.cpp"
     $ptx = $577; //@line 983 "hsp3gr_dish.cpp"
    }
   }
   $578 = HEAP32[3176>>2]|0; //@line 986 "hsp3gr_dish.cpp"
   $579 = $px; //@line 986 "hsp3gr_dish.cpp"
   $580 = $py; //@line 986 "hsp3gr_dish.cpp"
   $581 = $bm212; //@line 986 "hsp3gr_dish.cpp"
   $582 = $ptx; //@line 986 "hsp3gr_dish.cpp"
   $583 = $pty; //@line 986 "hsp3gr_dish.cpp"
   $584 = $ep1; //@line 986 "hsp3gr_dish.cpp"
   __ZN5Bmscr9SquareTexEPiS0_PS_S0_S0_i($578,$579,$580,$581,$582,$583,$584); //@line 986 "hsp3gr_dish.cpp"
   break;
  }
  case 43: case 42: case 41:  {
   $409 = (__Z10code_getdii(0)|0); //@line 866 "hsp3gr_dish.cpp"
   HEAP32[3216>>2] = $409; //@line 866 "hsp3gr_dish.cpp"
   $410 = (__Z10code_getdii(640)|0); //@line 867 "hsp3gr_dish.cpp"
   HEAP32[3232>>2] = $410; //@line 867 "hsp3gr_dish.cpp"
   $411 = (__Z10code_getdii(480)|0); //@line 868 "hsp3gr_dish.cpp"
   HEAP32[3240>>2] = $411; //@line 868 "hsp3gr_dish.cpp"
   $412 = (__Z10code_getdii(0)|0); //@line 869 "hsp3gr_dish.cpp"
   HEAP32[3248>>2] = $412; //@line 869 "hsp3gr_dish.cpp"
   $413 = (__Z10code_getdii(-1)|0); //@line 870 "hsp3gr_dish.cpp"
   HEAP32[3256>>2] = $413; //@line 870 "hsp3gr_dish.cpp"
   $414 = (__Z10code_getdii(-1)|0); //@line 871 "hsp3gr_dish.cpp"
   HEAP32[3264>>2] = $414; //@line 871 "hsp3gr_dish.cpp"
   $415 = HEAP32[3232>>2]|0; //@line 872 "hsp3gr_dish.cpp"
   $416 = (__Z10code_getdii($415)|0); //@line 872 "hsp3gr_dish.cpp"
   $p77 = $416; //@line 872 "hsp3gr_dish.cpp"
   $417 = HEAP32[3240>>2]|0; //@line 873 "hsp3gr_dish.cpp"
   $418 = (__Z10code_getdii($417)|0); //@line 873 "hsp3gr_dish.cpp"
   $p88 = $418; //@line 873 "hsp3gr_dish.cpp"
   $419 = $1; //@line 875 "hsp3gr_dish.cpp"
   $420 = ($419|0)==(41); //@line 875 "hsp3gr_dish.cpp"
   do {
    if ($420) {
     $421 = HEAP32[3216>>2]|0; //@line 876 "hsp3gr_dish.cpp"
     $422 = ($421|0)==(0); //@line 876 "hsp3gr_dish.cpp"
     if ($422) {
      $423 = (___cxa_allocate_exception(4)|0); //@line 876 "hsp3gr_dish.cpp"
      HEAP32[$423>>2] = 3; //@line 876 "hsp3gr_dish.cpp"
      ___cxa_throw(($423|0),(624|0),(0|0)); //@line 876 "hsp3gr_dish.cpp"
      // unreachable; //@line 876 "hsp3gr_dish.cpp"
     } else {
      $424 = HEAP32[3144>>2]|0; //@line 877 "hsp3gr_dish.cpp"
      $425 = HEAP32[3216>>2]|0; //@line 877 "hsp3gr_dish.cpp"
      $426 = HEAP32[3256>>2]|0; //@line 877 "hsp3gr_dish.cpp"
      $427 = HEAP32[3264>>2]|0; //@line 877 "hsp3gr_dish.cpp"
      $428 = HEAP32[3232>>2]|0; //@line 877 "hsp3gr_dish.cpp"
      $429 = HEAP32[3240>>2]|0; //@line 877 "hsp3gr_dish.cpp"
      __ZN6HspWnd9MakeBmscrEiiiiii($424,$425,1,$426,$427,$428,$429); //@line 877 "hsp3gr_dish.cpp"
      break;
     }
    }
   } while(0);
   $430 = HEAP32[3144>>2]|0; //@line 879 "hsp3gr_dish.cpp"
   $431 = HEAP32[3216>>2]|0; //@line 879 "hsp3gr_dish.cpp"
   $432 = (__ZN6HspWnd8GetBmscrEi($430,$431)|0); //@line 879 "hsp3gr_dish.cpp"
   HEAP32[3176>>2] = $432; //@line 879 "hsp3gr_dish.cpp"
   $433 = HEAP32[3216>>2]|0; //@line 880 "hsp3gr_dish.cpp"
   HEAP32[3192>>2] = $433; //@line 880 "hsp3gr_dish.cpp"
   break;
  }
  case 49:  {
   $485 = (__Z10code_getdii(0)|0); //@line 907 "hsp3gr_dish.cpp"
   HEAP32[3216>>2] = $485; //@line 907 "hsp3gr_dish.cpp"
   $486 = (__Z10code_getdii(0)|0); //@line 908 "hsp3gr_dish.cpp"
   HEAP32[3232>>2] = $486; //@line 908 "hsp3gr_dish.cpp"
   $487 = HEAP32[3176>>2]|0; //@line 909 "hsp3gr_dish.cpp"
   $488 = (($487) + 4|0); //@line 909 "hsp3gr_dish.cpp"
   $489 = HEAP32[$488>>2]|0; //@line 909 "hsp3gr_dish.cpp"
   $490 = (__Z10code_getdii($489)|0); //@line 909 "hsp3gr_dish.cpp"
   HEAP32[3240>>2] = $490; //@line 909 "hsp3gr_dish.cpp"
   $491 = HEAP32[3176>>2]|0; //@line 910 "hsp3gr_dish.cpp"
   $492 = (($491) + 8|0); //@line 910 "hsp3gr_dish.cpp"
   $493 = HEAP32[$492>>2]|0; //@line 910 "hsp3gr_dish.cpp"
   $494 = (__Z10code_getdii($493)|0); //@line 910 "hsp3gr_dish.cpp"
   HEAP32[3248>>2] = $494; //@line 910 "hsp3gr_dish.cpp"
   $495 = HEAP32[3176>>2]|0; //@line 911 "hsp3gr_dish.cpp"
   $496 = HEAP32[3216>>2]|0; //@line 911 "hsp3gr_dish.cpp"
   $497 = HEAP32[3232>>2]|0; //@line 911 "hsp3gr_dish.cpp"
   $498 = HEAP32[3240>>2]|0; //@line 911 "hsp3gr_dish.cpp"
   $499 = HEAP32[3248>>2]|0; //@line 911 "hsp3gr_dish.cpp"
   __ZN5Bmscr7BoxfillEiiii($495,$496,$497,$498,$499); //@line 911 "hsp3gr_dish.cpp"
   break;
  }
  case 52:  {
   $500 = (__Z10code_getvaPP4PVal($pval9)|0); //@line 919 "hsp3gr_dish.cpp"
   $aptr10 = $500; //@line 919 "hsp3gr_dish.cpp"
   $501 = (__Z10code_getdii(0)|0); //@line 920 "hsp3gr_dish.cpp"
   HEAP32[3216>>2] = $501; //@line 920 "hsp3gr_dish.cpp"
   $502 = (__Z10code_getdii(1)|0); //@line 921 "hsp3gr_dish.cpp"
   HEAP32[3232>>2] = $502; //@line 921 "hsp3gr_dish.cpp"
   HEAP32[$res>>2] = 0; //@line 923 "hsp3gr_dish.cpp"
   $503 = HEAP32[3232>>2]|0; //@line 925 "hsp3gr_dish.cpp"
   $504 = (_hgio_stick($503)|0); //@line 925 "hsp3gr_dish.cpp"
   HEAP32[3272>>2] = $504; //@line 925 "hsp3gr_dish.cpp"
   $505 = HEAP32[3272>>2]|0; //@line 926 "hsp3gr_dish.cpp"
   $506 = HEAP32[3280>>2]|0; //@line 926 "hsp3gr_dish.cpp"
   $507 = $505 ^ $506; //@line 926 "hsp3gr_dish.cpp"
   $508 = HEAP32[3272>>2]|0; //@line 926 "hsp3gr_dish.cpp"
   $509 = $507 & $508; //@line 926 "hsp3gr_dish.cpp"
   HEAP32[3288>>2] = $509; //@line 926 "hsp3gr_dish.cpp"
   $510 = HEAP32[3272>>2]|0; //@line 927 "hsp3gr_dish.cpp"
   HEAP32[3280>>2] = $510; //@line 927 "hsp3gr_dish.cpp"
   $511 = HEAP32[3288>>2]|0; //@line 928 "hsp3gr_dish.cpp"
   $512 = HEAP32[3272>>2]|0; //@line 928 "hsp3gr_dish.cpp"
   $513 = HEAP32[3216>>2]|0; //@line 928 "hsp3gr_dish.cpp"
   $514 = $512 & $513; //@line 928 "hsp3gr_dish.cpp"
   $515 = $511 | $514; //@line 928 "hsp3gr_dish.cpp"
   HEAP32[$res>>2] = $515; //@line 928 "hsp3gr_dish.cpp"
   $516 = HEAP32[$pval9>>2]|0; //@line 929 "hsp3gr_dish.cpp"
   $517 = $aptr10; //@line 929 "hsp3gr_dish.cpp"
   __Z10code_setvaP4PValiiPKv($516,$517,4,$res); //@line 929 "hsp3gr_dish.cpp"
   break;
  }
  case 34:  {
   $310 = (__Z10code_getdii(0)|0); //@line 758 "hsp3gr_dish.cpp"
   HEAP32[3216>>2] = $310; //@line 758 "hsp3gr_dish.cpp"
   $311 = (__Z10code_getdii(0)|0); //@line 759 "hsp3gr_dish.cpp"
   HEAP32[3232>>2] = $311; //@line 759 "hsp3gr_dish.cpp"
   $312 = (__Z10code_getdii(0)|0); //@line 760 "hsp3gr_dish.cpp"
   HEAP32[3240>>2] = $312; //@line 760 "hsp3gr_dish.cpp"
   $313 = HEAP32[3176>>2]|0; //@line 761 "hsp3gr_dish.cpp"
   $314 = HEAP32[3216>>2]|0; //@line 761 "hsp3gr_dish.cpp"
   $315 = HEAP32[3232>>2]|0; //@line 761 "hsp3gr_dish.cpp"
   $316 = HEAP32[3240>>2]|0; //@line 761 "hsp3gr_dish.cpp"
   __ZN5Bmscr11SetHSVColorEiii($313,$314,$315,$316); //@line 761 "hsp3gr_dish.cpp"
   break;
  }
  case 39:  {
   $strsize = 0; //@line 798 "hsp3gr_dish.cpp"
   $321 = (__Z10code_getvaPP4PVal($pval5)|0); //@line 799 "hsp3gr_dish.cpp"
   $aptr6 = $321; //@line 799 "hsp3gr_dish.cpp"
   $322 = (__Z10code_getdii(16384)|0); //@line 801 "hsp3gr_dish.cpp"
   HEAP32[3232>>2] = $322; //@line 801 "hsp3gr_dish.cpp"
   $323 = (__Z10code_getdii(0)|0); //@line 802 "hsp3gr_dish.cpp"
   HEAP32[3240>>2] = $323; //@line 802 "hsp3gr_dish.cpp"
   $324 = HEAP32[3232>>2]|0; //@line 804 "hsp3gr_dish.cpp"
   $325 = ($324|0)<(64); //@line 804 "hsp3gr_dish.cpp"
   if ($325) {
    HEAP32[3232>>2] = 64; //@line 804 "hsp3gr_dish.cpp"
   }
   $326 = HEAP32[3232>>2]|0; //@line 805 "hsp3gr_dish.cpp"
   $327 = (($326) + 1)|0; //@line 805 "hsp3gr_dish.cpp"
   $328 = (__Z9code_stmpi($327)|0); //@line 805 "hsp3gr_dish.cpp"
   $pp2 = $328; //@line 805 "hsp3gr_dish.cpp"
   $329 = HEAP32[3240>>2]|0; //@line 807 "hsp3gr_dish.cpp"
   $330 = $329 & 15; //@line 807 "hsp3gr_dish.cpp"
   if ((($330|0) == 0)) {
    while(1) {
     $331 = HEAP32[3232>>2]|0; //@line 810 "hsp3gr_dish.cpp"
     $332 = ($331|0)<=(0); //@line 810 "hsp3gr_dish.cpp"
     if ($332) {
      label = 57;
      break;
     }
     $333 = (_getchar()|0); //@line 811 "hsp3gr_dish.cpp"
     $a = $333; //@line 811 "hsp3gr_dish.cpp"
     $334 = $a; //@line 812 "hsp3gr_dish.cpp"
     $335 = ($334|0)==(-1); //@line 812 "hsp3gr_dish.cpp"
     if ($335) {
      label = 59;
      break;
     }
     $336 = $a; //@line 813 "hsp3gr_dish.cpp"
     $337 = $336&255; //@line 813 "hsp3gr_dish.cpp"
     $338 = $pp2; //@line 813 "hsp3gr_dish.cpp"
     $339 = (($338) + 1|0); //@line 813 "hsp3gr_dish.cpp"
     $pp2 = $339; //@line 813 "hsp3gr_dish.cpp"
     HEAP8[$338>>0] = $337; //@line 813 "hsp3gr_dish.cpp"
     $340 = HEAP32[3232>>2]|0; //@line 814 "hsp3gr_dish.cpp"
     $341 = (($340) + -1)|0; //@line 814 "hsp3gr_dish.cpp"
     HEAP32[3232>>2] = $341; //@line 814 "hsp3gr_dish.cpp"
     $342 = $strsize; //@line 815 "hsp3gr_dish.cpp"
     $343 = (($342) + 1)|0; //@line 815 "hsp3gr_dish.cpp"
     $strsize = $343; //@line 815 "hsp3gr_dish.cpp"
    }
    if ((label|0) == 57) {
    }
    else if ((label|0) == 59) {
    }
   } else if ((($330|0) == 2)) {
    while(1) {
     $359 = HEAP32[3232>>2]|0; //@line 830 "hsp3gr_dish.cpp"
     $360 = ($359|0)<=(0); //@line 830 "hsp3gr_dish.cpp"
     if ($360) {
      label = 72;
      break;
     }
     $361 = (_getchar()|0); //@line 831 "hsp3gr_dish.cpp"
     $a = $361; //@line 831 "hsp3gr_dish.cpp"
     $362 = $a; //@line 832 "hsp3gr_dish.cpp"
     $363 = ($362|0)==(13); //@line 832 "hsp3gr_dish.cpp"
     if ($363) {
      label = 74;
      break;
     }
     $369 = $a; //@line 839 "hsp3gr_dish.cpp"
     $370 = ($369|0)==(-1); //@line 839 "hsp3gr_dish.cpp"
     if ($370) {
      label = 79;
      break;
     }
     $371 = $a; //@line 839 "hsp3gr_dish.cpp"
     $372 = ($371|0)==(10); //@line 839 "hsp3gr_dish.cpp"
     if ($372) {
      label = 79;
      break;
     }
     $373 = $a; //@line 840 "hsp3gr_dish.cpp"
     $374 = $373&255; //@line 840 "hsp3gr_dish.cpp"
     $375 = $pp2; //@line 840 "hsp3gr_dish.cpp"
     $376 = (($375) + 1|0); //@line 840 "hsp3gr_dish.cpp"
     $pp2 = $376; //@line 840 "hsp3gr_dish.cpp"
     HEAP8[$375>>0] = $374; //@line 840 "hsp3gr_dish.cpp"
     $377 = HEAP32[3232>>2]|0; //@line 841 "hsp3gr_dish.cpp"
     $378 = (($377) + -1)|0; //@line 841 "hsp3gr_dish.cpp"
     HEAP32[3232>>2] = $378; //@line 841 "hsp3gr_dish.cpp"
     $379 = $strsize; //@line 842 "hsp3gr_dish.cpp"
     $380 = (($379) + 1)|0; //@line 842 "hsp3gr_dish.cpp"
     $strsize = $380; //@line 842 "hsp3gr_dish.cpp"
    }
    if ((label|0) == 72) {
    }
    else if ((label|0) == 74) {
     $364 = (_getchar()|0); //@line 833 "hsp3gr_dish.cpp"
     $c = $364; //@line 833 "hsp3gr_dish.cpp"
     $365 = $c; //@line 834 "hsp3gr_dish.cpp"
     $366 = ($365|0)!=(10); //@line 834 "hsp3gr_dish.cpp"
     if ($366) {
      $367 = $c; //@line 835 "hsp3gr_dish.cpp"
      $368 = HEAP32[_stdin>>2]|0; //@line 835 "hsp3gr_dish.cpp"
      (_ungetc(($367|0),($368|0))|0); //@line 835 "hsp3gr_dish.cpp"
     }
    }
    else if ((label|0) == 79) {
    }
   } else if ((($330|0) == 1)) {
    while(1) {
     $344 = HEAP32[3232>>2]|0; //@line 820 "hsp3gr_dish.cpp"
     $345 = ($344|0)<=(0); //@line 820 "hsp3gr_dish.cpp"
     if ($345) {
      label = 64;
      break;
     }
     $346 = (_getchar()|0); //@line 821 "hsp3gr_dish.cpp"
     $a = $346; //@line 821 "hsp3gr_dish.cpp"
     $347 = $a; //@line 822 "hsp3gr_dish.cpp"
     $348 = ($347|0)==(-1); //@line 822 "hsp3gr_dish.cpp"
     if ($348) {
      label = 67;
      break;
     }
     $349 = $a; //@line 822 "hsp3gr_dish.cpp"
     $350 = ($349|0)==(10); //@line 822 "hsp3gr_dish.cpp"
     if ($350) {
      label = 67;
      break;
     }
     $351 = $a; //@line 823 "hsp3gr_dish.cpp"
     $352 = $351&255; //@line 823 "hsp3gr_dish.cpp"
     $353 = $pp2; //@line 823 "hsp3gr_dish.cpp"
     $354 = (($353) + 1|0); //@line 823 "hsp3gr_dish.cpp"
     $pp2 = $354; //@line 823 "hsp3gr_dish.cpp"
     HEAP8[$353>>0] = $352; //@line 823 "hsp3gr_dish.cpp"
     $355 = HEAP32[3232>>2]|0; //@line 824 "hsp3gr_dish.cpp"
     $356 = (($355) + -1)|0; //@line 824 "hsp3gr_dish.cpp"
     HEAP32[3232>>2] = $356; //@line 824 "hsp3gr_dish.cpp"
     $357 = $strsize; //@line 825 "hsp3gr_dish.cpp"
     $358 = (($357) + 1)|0; //@line 825 "hsp3gr_dish.cpp"
     $strsize = $358; //@line 825 "hsp3gr_dish.cpp"
    }
    if ((label|0) == 64) {
    }
    else if ((label|0) == 67) {
    }
   }
   $381 = $pp2; //@line 847 "hsp3gr_dish.cpp"
   HEAP8[$381>>0] = 0; //@line 847 "hsp3gr_dish.cpp"
   $382 = $strsize; //@line 848 "hsp3gr_dish.cpp"
   $383 = (($382) + 1)|0; //@line 848 "hsp3gr_dish.cpp"
   $384 = HEAP32[3152>>2]|0; //@line 848 "hsp3gr_dish.cpp"
   $385 = (($384) + 788|0); //@line 848 "hsp3gr_dish.cpp"
   HEAP32[$385>>2] = $383; //@line 848 "hsp3gr_dish.cpp"
   $386 = HEAP32[3240>>2]|0; //@line 850 "hsp3gr_dish.cpp"
   $387 = $386 & 16; //@line 850 "hsp3gr_dish.cpp"
   $388 = ($387|0)!=(0); //@line 850 "hsp3gr_dish.cpp"
   do {
    if ($388) {
     $389 = HEAP32[$pval5>>2]|0; //@line 851 "hsp3gr_dish.cpp"
     $390 = (($389) + 36|0); //@line 851 "hsp3gr_dish.cpp"
     $391 = HEAP16[$390>>1]|0; //@line 851 "hsp3gr_dish.cpp"
     $392 = $391&65535; //@line 851 "hsp3gr_dish.cpp"
     $393 = $392 & 2; //@line 851 "hsp3gr_dish.cpp"
     $394 = ($393|0)==(0); //@line 851 "hsp3gr_dish.cpp"
     if ($394) {
      $395 = (___cxa_allocate_exception(4)|0); //@line 851 "hsp3gr_dish.cpp"
      HEAP32[$395>>2] = 6; //@line 851 "hsp3gr_dish.cpp"
      ___cxa_throw(($395|0),(624|0),(0|0)); //@line 851 "hsp3gr_dish.cpp"
      // unreachable; //@line 851 "hsp3gr_dish.cpp"
     } else {
      $396 = HEAP32[$pval5>>2]|0; //@line 853 "hsp3gr_dish.cpp"
      $397 = $aptr6; //@line 853 "hsp3gr_dish.cpp"
      $398 = (__Z17HspVarCorePtrAPTRP4PVali($396,$397)|0); //@line 853 "hsp3gr_dish.cpp"
      $vptr = $398; //@line 853 "hsp3gr_dish.cpp"
      $399 = $vptr; //@line 854 "hsp3gr_dish.cpp"
      $400 = HEAP32[3152>>2]|0; //@line 854 "hsp3gr_dish.cpp"
      $401 = (($400) + 824|0); //@line 854 "hsp3gr_dish.cpp"
      $402 = HEAP32[$401>>2]|0; //@line 854 "hsp3gr_dish.cpp"
      $403 = $strsize; //@line 854 "hsp3gr_dish.cpp"
      _memcpy(($399|0),($402|0),($403|0))|0; //@line 854 "hsp3gr_dish.cpp"
      break;
     }
    } else {
     $404 = HEAP32[$pval5>>2]|0; //@line 856 "hsp3gr_dish.cpp"
     $405 = $aptr6; //@line 856 "hsp3gr_dish.cpp"
     $406 = HEAP32[3152>>2]|0; //@line 856 "hsp3gr_dish.cpp"
     $407 = (($406) + 824|0); //@line 856 "hsp3gr_dish.cpp"
     $408 = HEAP32[$407>>2]|0; //@line 856 "hsp3gr_dish.cpp"
     __Z10code_setvaP4PValiiPKv($404,$405,2,$408); //@line 856 "hsp3gr_dish.cpp"
    }
   } while(0);
   break;
  }
  case 35:  {
   $317 = (__Z10code_getvaPP4PVal($pval)|0); //@line 768 "hsp3gr_dish.cpp"
   $aptr = $317; //@line 768 "hsp3gr_dish.cpp"
   $318 = (__Z10code_getdii(1)|0); //@line 769 "hsp3gr_dish.cpp"
   HEAP32[3216>>2] = $318; //@line 769 "hsp3gr_dish.cpp"
   HEAP32[3232>>2] = 0; //@line 770 "hsp3gr_dish.cpp"
   $319 = HEAP32[$pval>>2]|0; //@line 786 "hsp3gr_dish.cpp"
   $320 = $aptr; //@line 786 "hsp3gr_dish.cpp"
   __Z10code_setvaP4PValiiPKv($319,$320,4,3232); //@line 786 "hsp3gr_dish.cpp"
   break;
  }
  case 54:  {
   $536 = (__Z10code_getdii(0)|0); //@line 949 "hsp3gr_dish.cpp"
   HEAP32[3216>>2] = $536; //@line 949 "hsp3gr_dish.cpp"
   $537 = (__Z10code_getdii(0)|0); //@line 950 "hsp3gr_dish.cpp"
   HEAP32[3232>>2] = $537; //@line 950 "hsp3gr_dish.cpp"
   $538 = (__Z10code_getdii(0)|0); //@line 951 "hsp3gr_dish.cpp"
   HEAP32[3240>>2] = $538; //@line 951 "hsp3gr_dish.cpp"
   $539 = (+__Z10code_getddd(0.0)); //@line 952 "hsp3gr_dish.cpp"
   $rot11 = $539; //@line 952 "hsp3gr_dish.cpp"
   $540 = HEAP32[3176>>2]|0; //@line 953 "hsp3gr_dish.cpp"
   $541 = (($540) + 92|0); //@line 953 "hsp3gr_dish.cpp"
   $542 = HEAP32[$541>>2]|0; //@line 953 "hsp3gr_dish.cpp"
   $543 = (__Z10code_getdii($542)|0); //@line 953 "hsp3gr_dish.cpp"
   HEAP32[3248>>2] = $543; //@line 953 "hsp3gr_dish.cpp"
   $544 = HEAP32[3176>>2]|0; //@line 954 "hsp3gr_dish.cpp"
   $545 = (($544) + 96|0); //@line 954 "hsp3gr_dish.cpp"
   $546 = HEAP32[$545>>2]|0; //@line 954 "hsp3gr_dish.cpp"
   $547 = (__Z10code_getdii($546)|0); //@line 954 "hsp3gr_dish.cpp"
   HEAP32[3256>>2] = $547; //@line 954 "hsp3gr_dish.cpp"
   $548 = HEAP32[3144>>2]|0; //@line 956 "hsp3gr_dish.cpp"
   $549 = HEAP32[3216>>2]|0; //@line 956 "hsp3gr_dish.cpp"
   $550 = (__ZN6HspWnd12GetBmscrSafeEi($548,$549)|0); //@line 956 "hsp3gr_dish.cpp"
   $bm2 = $550; //@line 956 "hsp3gr_dish.cpp"
   $551 = HEAP32[3176>>2]|0; //@line 957 "hsp3gr_dish.cpp"
   $552 = HEAP32[3248>>2]|0; //@line 957 "hsp3gr_dish.cpp"
   $553 = HEAP32[3256>>2]|0; //@line 957 "hsp3gr_dish.cpp"
   $554 = $rot11; //@line 957 "hsp3gr_dish.cpp"
   $555 = $554; //@line 957 "hsp3gr_dish.cpp"
   $556 = $bm2; //@line 957 "hsp3gr_dish.cpp"
   $557 = HEAP32[3232>>2]|0; //@line 957 "hsp3gr_dish.cpp"
   $558 = HEAP32[3240>>2]|0; //@line 957 "hsp3gr_dish.cpp"
   $559 = HEAP32[3176>>2]|0; //@line 957 "hsp3gr_dish.cpp"
   $560 = (($559) + 92|0); //@line 957 "hsp3gr_dish.cpp"
   $561 = HEAP32[$560>>2]|0; //@line 957 "hsp3gr_dish.cpp"
   $562 = HEAP32[3176>>2]|0; //@line 957 "hsp3gr_dish.cpp"
   $563 = (($562) + 96|0); //@line 957 "hsp3gr_dish.cpp"
   $564 = HEAP32[$563>>2]|0; //@line 957 "hsp3gr_dish.cpp"
   __ZN5Bmscr10FillRotTexEiifPS_iiii($551,$552,$553,$555,$556,$557,$558,$561,$564); //@line 957 "hsp3gr_dish.cpp"
   break;
  }
  case 53:  {
   $518 = (__Z10code_getdii(0)|0); //@line 936 "hsp3gr_dish.cpp"
   HEAP32[3216>>2] = $518; //@line 936 "hsp3gr_dish.cpp"
   $519 = (__Z10code_getdii(0)|0); //@line 937 "hsp3gr_dish.cpp"
   HEAP32[3232>>2] = $519; //@line 937 "hsp3gr_dish.cpp"
   $520 = (+__Z10code_getddd(0.0)); //@line 938 "hsp3gr_dish.cpp"
   $rot = $520; //@line 938 "hsp3gr_dish.cpp"
   $521 = HEAP32[3176>>2]|0; //@line 939 "hsp3gr_dish.cpp"
   $522 = (($521) + 92|0); //@line 939 "hsp3gr_dish.cpp"
   $523 = HEAP32[$522>>2]|0; //@line 939 "hsp3gr_dish.cpp"
   $524 = (__Z10code_getdii($523)|0); //@line 939 "hsp3gr_dish.cpp"
   HEAP32[3240>>2] = $524; //@line 939 "hsp3gr_dish.cpp"
   $525 = HEAP32[3176>>2]|0; //@line 940 "hsp3gr_dish.cpp"
   $526 = (($525) + 96|0); //@line 940 "hsp3gr_dish.cpp"
   $527 = HEAP32[$526>>2]|0; //@line 940 "hsp3gr_dish.cpp"
   $528 = (__Z10code_getdii($527)|0); //@line 940 "hsp3gr_dish.cpp"
   HEAP32[3248>>2] = $528; //@line 940 "hsp3gr_dish.cpp"
   $529 = HEAP32[3176>>2]|0; //@line 941 "hsp3gr_dish.cpp"
   $530 = HEAP32[3216>>2]|0; //@line 941 "hsp3gr_dish.cpp"
   $531 = HEAP32[3232>>2]|0; //@line 941 "hsp3gr_dish.cpp"
   $532 = HEAP32[3240>>2]|0; //@line 941 "hsp3gr_dish.cpp"
   $533 = HEAP32[3248>>2]|0; //@line 941 "hsp3gr_dish.cpp"
   $534 = $rot; //@line 941 "hsp3gr_dish.cpp"
   $535 = $534; //@line 941 "hsp3gr_dish.cpp"
   __ZN5Bmscr7FillRotEiiiif($529,$530,$531,$532,$533,$535); //@line 941 "hsp3gr_dish.cpp"
   break;
  }
  case 33:  {
   $305 = HEAP32[3176>>2]|0; //@line 754 "hsp3gr_dish.cpp"
   $306 = (__Z9code_getsv()|0); //@line 754 "hsp3gr_dish.cpp"
   $307 = (__ZN5Bmscr7BmpSaveEPc($305,$306)|0); //@line 754 "hsp3gr_dish.cpp"
   $308 = ($307|0)!=(0); //@line 754 "hsp3gr_dish.cpp"
   if ($308) {
    $309 = (___cxa_allocate_exception(4)|0); //@line 754 "hsp3gr_dish.cpp"
    HEAP32[$309>>2] = 12; //@line 754 "hsp3gr_dish.cpp"
    ___cxa_throw(($309|0),(624|0),(0|0)); //@line 754 "hsp3gr_dish.cpp"
    // unreachable; //@line 754 "hsp3gr_dish.cpp"
   } else {
    break L1;
   }
   break;
  }
  case 47:  {
   $434 = (__Z10code_getdii(0)|0); //@line 887 "hsp3gr_dish.cpp"
   HEAP32[3216>>2] = $434; //@line 887 "hsp3gr_dish.cpp"
   $435 = (__Z10code_getdii(0)|0); //@line 888 "hsp3gr_dish.cpp"
   HEAP32[3232>>2] = $435; //@line 888 "hsp3gr_dish.cpp"
   $436 = HEAP32[3176>>2]|0; //@line 889 "hsp3gr_dish.cpp"
   $437 = (($436) + 68|0); //@line 889 "hsp3gr_dish.cpp"
   $438 = HEAP32[$437>>2]|0; //@line 889 "hsp3gr_dish.cpp"
   $439 = (__Z10code_getdii($438)|0); //@line 889 "hsp3gr_dish.cpp"
   $440 = HEAP32[3176>>2]|0; //@line 889 "hsp3gr_dish.cpp"
   $441 = (($440) + 68|0); //@line 889 "hsp3gr_dish.cpp"
   HEAP32[$441>>2] = $439; //@line 889 "hsp3gr_dish.cpp"
   $442 = HEAP32[3176>>2]|0; //@line 890 "hsp3gr_dish.cpp"
   $443 = (($442) + 72|0); //@line 890 "hsp3gr_dish.cpp"
   $444 = HEAP32[$443>>2]|0; //@line 890 "hsp3gr_dish.cpp"
   $445 = (__Z10code_getdii($444)|0); //@line 890 "hsp3gr_dish.cpp"
   $446 = HEAP32[3176>>2]|0; //@line 890 "hsp3gr_dish.cpp"
   $447 = (($446) + 72|0); //@line 890 "hsp3gr_dish.cpp"
   HEAP32[$447>>2] = $445; //@line 890 "hsp3gr_dish.cpp"
   $448 = HEAP32[3176>>2]|0; //@line 891 "hsp3gr_dish.cpp"
   $449 = HEAP32[3216>>2]|0; //@line 891 "hsp3gr_dish.cpp"
   $450 = HEAP32[3232>>2]|0; //@line 891 "hsp3gr_dish.cpp"
   __ZN5Bmscr4LineEii($448,$449,$450); //@line 891 "hsp3gr_dish.cpp"
   break;
  }
  case 48:  {
   $451 = (__Z10code_getdii(0)|0); //@line 895 "hsp3gr_dish.cpp"
   HEAP32[3216>>2] = $451; //@line 895 "hsp3gr_dish.cpp"
   $452 = (__Z10code_getdii(-1)|0); //@line 896 "hsp3gr_dish.cpp"
   HEAP32[3232>>2] = $452; //@line 896 "hsp3gr_dish.cpp"
   $453 = HEAP32[3176>>2]|0; //@line 897 "hsp3gr_dish.cpp"
   $454 = (($453) + 168|0); //@line 897 "hsp3gr_dish.cpp"
   $455 = HEAP32[$454>>2]|0; //@line 897 "hsp3gr_dish.cpp"
   $456 = (($455) - 1)|0; //@line 897 "hsp3gr_dish.cpp"
   HEAP32[3248>>2] = $456; //@line 897 "hsp3gr_dish.cpp"
   $457 = HEAP32[3248>>2]|0; //@line 898 "hsp3gr_dish.cpp"
   $458 = ($457|0)<(0); //@line 898 "hsp3gr_dish.cpp"
   if ($458) {
    break L1;
   }
   $459 = HEAP32[3216>>2]|0; //@line 899 "hsp3gr_dish.cpp"
   $460 = ($459|0)<(0); //@line 899 "hsp3gr_dish.cpp"
   $461 = $460&1; //@line 899 "hsp3gr_dish.cpp"
   $462 = HEAP32[3232>>2]|0; //@line 899 "hsp3gr_dish.cpp"
   $463 = HEAP32[3248>>2]|0; //@line 899 "hsp3gr_dish.cpp"
   $464 = ($462|0)>($463|0); //@line 899 "hsp3gr_dish.cpp"
   $465 = $464&1; //@line 899 "hsp3gr_dish.cpp"
   $466 = $461 | $465; //@line 899 "hsp3gr_dish.cpp"
   $467 = HEAP32[3216>>2]|0; //@line 899 "hsp3gr_dish.cpp"
   $468 = HEAP32[3248>>2]|0; //@line 899 "hsp3gr_dish.cpp"
   $469 = ($467|0)>($468|0); //@line 899 "hsp3gr_dish.cpp"
   $470 = $469&1; //@line 899 "hsp3gr_dish.cpp"
   $471 = $466 | $470; //@line 899 "hsp3gr_dish.cpp"
   $472 = ($471|0)!=(0); //@line 899 "hsp3gr_dish.cpp"
   if ($472) {
    $473 = (___cxa_allocate_exception(4)|0); //@line 899 "hsp3gr_dish.cpp"
    HEAP32[$473>>2] = 3; //@line 899 "hsp3gr_dish.cpp"
    ___cxa_throw(($473|0),(624|0),(0|0)); //@line 899 "hsp3gr_dish.cpp"
    // unreachable; //@line 899 "hsp3gr_dish.cpp"
   }
   $474 = HEAP32[3232>>2]|0; //@line 900 "hsp3gr_dish.cpp"
   $475 = ($474|0)<(0); //@line 900 "hsp3gr_dish.cpp"
   if ($475) {
    $476 = HEAP32[3248>>2]|0; //@line 900 "hsp3gr_dish.cpp"
    HEAP32[3232>>2] = $476; //@line 900 "hsp3gr_dish.cpp"
   }
   $477 = HEAP32[3216>>2]|0; //@line 901 "hsp3gr_dish.cpp"
   HEAP32[3240>>2] = $477; //@line 901 "hsp3gr_dish.cpp"
   while(1) {
    $478 = HEAP32[3240>>2]|0; //@line 901 "hsp3gr_dish.cpp"
    $479 = HEAP32[3232>>2]|0; //@line 901 "hsp3gr_dish.cpp"
    $480 = ($478|0)<=($479|0); //@line 901 "hsp3gr_dish.cpp"
    if (!($480)) {
     break;
    }
    $481 = HEAP32[3176>>2]|0; //@line 902 "hsp3gr_dish.cpp"
    $482 = HEAP32[3240>>2]|0; //@line 902 "hsp3gr_dish.cpp"
    __ZN5Bmscr15DeleteHSPObjectEi($481,$482); //@line 902 "hsp3gr_dish.cpp"
    $483 = HEAP32[3240>>2]|0; //@line 901 "hsp3gr_dish.cpp"
    $484 = (($483) + 1)|0; //@line 901 "hsp3gr_dish.cpp"
    HEAP32[3240>>2] = $484; //@line 901 "hsp3gr_dish.cpp"
   }
   break;
  }
  case 60:  {
   $652 = (__Z9code_getsv()|0); //@line 1034 "hsp3gr_dish.cpp"
   (_strncpy(($fname13|0),($652|0),63)|0); //@line 1034 "hsp3gr_dish.cpp"
   $653 = (__Z10code_getdii(-1)|0); //@line 1035 "hsp3gr_dish.cpp"
   HEAP32[3216>>2] = $653; //@line 1035 "hsp3gr_dish.cpp"
   $654 = (__Z10code_getdii(0)|0); //@line 1036 "hsp3gr_dish.cpp"
   HEAP32[3232>>2] = $654; //@line 1036 "hsp3gr_dish.cpp"
   $655 = HEAP32[3216>>2]|0; //@line 1037 "hsp3gr_dish.cpp"
   $656 = ($655|0)<(0); //@line 1037 "hsp3gr_dish.cpp"
   if ($656) {
    $657 = HEAP32[3144>>2]|0; //@line 1037 "hsp3gr_dish.cpp"
    $658 = (__ZN6HspWnd16GetEmptyBufferIdEv($657)|0); //@line 1037 "hsp3gr_dish.cpp"
    HEAP32[3216>>2] = $658; //@line 1037 "hsp3gr_dish.cpp"
   }
   $659 = HEAP32[3144>>2]|0; //@line 1040 "hsp3gr_dish.cpp"
   $660 = HEAP32[3216>>2]|0; //@line 1040 "hsp3gr_dish.cpp"
   __ZN6HspWnd21MakeBmscrFromResourceEiPc($659,$660,$fname13); //@line 1040 "hsp3gr_dish.cpp"
   $661 = HEAP32[3216>>2]|0; //@line 1044 "hsp3gr_dish.cpp"
   $662 = HEAP32[3152>>2]|0; //@line 1044 "hsp3gr_dish.cpp"
   $663 = (($662) + 784|0); //@line 1044 "hsp3gr_dish.cpp"
   HEAP32[$663>>2] = $661; //@line 1044 "hsp3gr_dish.cpp"
   break;
  }
  case 59:  {
   $647 = (__Z10code_getdii(0)|0); //@line 1024 "hsp3gr_dish.cpp"
   HEAP32[3216>>2] = $647; //@line 1024 "hsp3gr_dish.cpp"
   $648 = (__Z10code_getdii(1)|0); //@line 1025 "hsp3gr_dish.cpp"
   HEAP32[3232>>2] = $648; //@line 1025 "hsp3gr_dish.cpp"
   $649 = HEAP32[3176>>2]|0; //@line 1026 "hsp3gr_dish.cpp"
   $650 = HEAP32[3216>>2]|0; //@line 1026 "hsp3gr_dish.cpp"
   $651 = HEAP32[3232>>2]|0; //@line 1026 "hsp3gr_dish.cpp"
   __ZN5Bmscr12EnableObjectEii($649,$650,$651); //@line 1026 "hsp3gr_dish.cpp"
   break;
  }
  case 57:  {
   $606 = (__Z10code_getdii(-1)|0); //@line 1004 "hsp3gr_dish.cpp"
   HEAP32[3216>>2] = $606; //@line 1004 "hsp3gr_dish.cpp"
   $607 = HEAP32[3216>>2]|0; //@line 1005 "hsp3gr_dish.cpp"
   $608 = HEAP32[3176>>2]|0; //@line 1005 "hsp3gr_dish.cpp"
   $609 = (($608) + 188|0); //@line 1005 "hsp3gr_dish.cpp"
   HEAP32[$609>>2] = $607; //@line 1005 "hsp3gr_dish.cpp"
   $610 = (__Z10code_getdii(0)|0); //@line 1006 "hsp3gr_dish.cpp"
   $611 = $610&65535; //@line 1006 "hsp3gr_dish.cpp"
   $612 = HEAP32[3176>>2]|0; //@line 1006 "hsp3gr_dish.cpp"
   $613 = (($612) + 192|0); //@line 1006 "hsp3gr_dish.cpp"
   HEAP16[$613>>1] = $611; //@line 1006 "hsp3gr_dish.cpp"
   $614 = (__Z10code_getdii(0)|0); //@line 1007 "hsp3gr_dish.cpp"
   $615 = $614&65535; //@line 1007 "hsp3gr_dish.cpp"
   $616 = HEAP32[3176>>2]|0; //@line 1007 "hsp3gr_dish.cpp"
   $617 = (($616) + 194|0); //@line 1007 "hsp3gr_dish.cpp"
   HEAP16[$617>>1] = $615; //@line 1007 "hsp3gr_dish.cpp"
   $618 = (__Z10code_getdii(0)|0); //@line 1008 "hsp3gr_dish.cpp"
   $619 = $618&65535; //@line 1008 "hsp3gr_dish.cpp"
   $620 = HEAP32[3176>>2]|0; //@line 1008 "hsp3gr_dish.cpp"
   $621 = (($620) + 196|0); //@line 1008 "hsp3gr_dish.cpp"
   HEAP16[$621>>1] = $619; //@line 1008 "hsp3gr_dish.cpp"
   $622 = (__Z10code_getdii(0)|0); //@line 1009 "hsp3gr_dish.cpp"
   $623 = $622&65535; //@line 1009 "hsp3gr_dish.cpp"
   $624 = HEAP32[3176>>2]|0; //@line 1009 "hsp3gr_dish.cpp"
   $625 = (($624) + 198|0); //@line 1009 "hsp3gr_dish.cpp"
   HEAP16[$625>>1] = $623; //@line 1009 "hsp3gr_dish.cpp"
   $626 = HEAP32[3176>>2]|0; //@line 1010 "hsp3gr_dish.cpp"
   $627 = (($626) + 192|0); //@line 1010 "hsp3gr_dish.cpp"
   $628 = HEAP16[$627>>1]|0; //@line 1010 "hsp3gr_dish.cpp"
   $629 = $628 << 16 >> 16; //@line 1010 "hsp3gr_dish.cpp"
   $630 = (__Z10code_getdii($629)|0); //@line 1010 "hsp3gr_dish.cpp"
   $631 = $630&65535; //@line 1010 "hsp3gr_dish.cpp"
   $632 = HEAP32[3176>>2]|0; //@line 1010 "hsp3gr_dish.cpp"
   $633 = (($632) + 200|0); //@line 1010 "hsp3gr_dish.cpp"
   HEAP16[$633>>1] = $631; //@line 1010 "hsp3gr_dish.cpp"
   $634 = HEAP32[3176>>2]|0; //@line 1011 "hsp3gr_dish.cpp"
   $635 = (($634) + 194|0); //@line 1011 "hsp3gr_dish.cpp"
   $636 = HEAP16[$635>>1]|0; //@line 1011 "hsp3gr_dish.cpp"
   $637 = $636 << 16 >> 16; //@line 1011 "hsp3gr_dish.cpp"
   $638 = (__Z10code_getdii($637)|0); //@line 1011 "hsp3gr_dish.cpp"
   $639 = $638&65535; //@line 1011 "hsp3gr_dish.cpp"
   $640 = HEAP32[3176>>2]|0; //@line 1011 "hsp3gr_dish.cpp"
   $641 = (($640) + 202|0); //@line 1011 "hsp3gr_dish.cpp"
   HEAP16[$641>>1] = $639; //@line 1011 "hsp3gr_dish.cpp"
   break;
  }
  case 56:  {
   $585 = (__Z10code_getdii(0)|0); //@line 993 "hsp3gr_dish.cpp"
   HEAP32[3216>>2] = $585; //@line 993 "hsp3gr_dish.cpp"
   $586 = (__Z10code_getdii(0)|0); //@line 994 "hsp3gr_dish.cpp"
   HEAP32[3232>>2] = $586; //@line 994 "hsp3gr_dish.cpp"
   $587 = HEAP32[3176>>2]|0; //@line 995 "hsp3gr_dish.cpp"
   $588 = (($587) + 4|0); //@line 995 "hsp3gr_dish.cpp"
   $589 = HEAP32[$588>>2]|0; //@line 995 "hsp3gr_dish.cpp"
   $590 = (__Z10code_getdii($589)|0); //@line 995 "hsp3gr_dish.cpp"
   HEAP32[3240>>2] = $590; //@line 995 "hsp3gr_dish.cpp"
   $591 = HEAP32[3176>>2]|0; //@line 996 "hsp3gr_dish.cpp"
   $592 = (($591) + 8|0); //@line 996 "hsp3gr_dish.cpp"
   $593 = HEAP32[$592>>2]|0; //@line 996 "hsp3gr_dish.cpp"
   $594 = (__Z10code_getdii($593)|0); //@line 996 "hsp3gr_dish.cpp"
   HEAP32[3248>>2] = $594; //@line 996 "hsp3gr_dish.cpp"
   $595 = (__Z10code_getdii(0)|0); //@line 997 "hsp3gr_dish.cpp"
   $gradmode = $595; //@line 997 "hsp3gr_dish.cpp"
   $596 = (__Z10code_getdii(0)|0); //@line 998 "hsp3gr_dish.cpp"
   HEAP32[3256>>2] = $596; //@line 998 "hsp3gr_dish.cpp"
   $597 = (__Z10code_getdii(0)|0); //@line 999 "hsp3gr_dish.cpp"
   HEAP32[3264>>2] = $597; //@line 999 "hsp3gr_dish.cpp"
   $598 = HEAP32[3176>>2]|0; //@line 1000 "hsp3gr_dish.cpp"
   $599 = HEAP32[3216>>2]|0; //@line 1000 "hsp3gr_dish.cpp"
   $600 = HEAP32[3232>>2]|0; //@line 1000 "hsp3gr_dish.cpp"
   $601 = HEAP32[3240>>2]|0; //@line 1000 "hsp3gr_dish.cpp"
   $602 = HEAP32[3248>>2]|0; //@line 1000 "hsp3gr_dish.cpp"
   $603 = $gradmode; //@line 1000 "hsp3gr_dish.cpp"
   $604 = HEAP32[3256>>2]|0; //@line 1000 "hsp3gr_dish.cpp"
   $605 = HEAP32[3264>>2]|0; //@line 1000 "hsp3gr_dish.cpp"
   __ZN5Bmscr8GradFillEiiiiiii($598,$599,$600,$601,$602,$603,$604,$605); //@line 1000 "hsp3gr_dish.cpp"
   break;
  }
  case 58:  {
   $642 = (__Z10code_getdii(0)|0); //@line 1016 "hsp3gr_dish.cpp"
   HEAP32[3216>>2] = $642; //@line 1016 "hsp3gr_dish.cpp"
   $643 = (__Z10code_getdii(2)|0); //@line 1017 "hsp3gr_dish.cpp"
   HEAP32[3232>>2] = $643; //@line 1017 "hsp3gr_dish.cpp"
   $644 = HEAP32[3176>>2]|0; //@line 1018 "hsp3gr_dish.cpp"
   $645 = HEAP32[3216>>2]|0; //@line 1018 "hsp3gr_dish.cpp"
   $646 = HEAP32[3232>>2]|0; //@line 1018 "hsp3gr_dish.cpp"
   __ZN5Bmscr13SetObjectModeEii($644,$645,$646); //@line 1018 "hsp3gr_dish.cpp"
   break;
  }
  case 17:  {
   $128 = HEAP32[3176>>2]|0; //@line 615 "hsp3gr_dish.cpp"
   $129 = (($128) + 68|0); //@line 615 "hsp3gr_dish.cpp"
   $130 = HEAP32[$129>>2]|0; //@line 615 "hsp3gr_dish.cpp"
   $131 = (__Z10code_getdii($130)|0); //@line 615 "hsp3gr_dish.cpp"
   $132 = HEAP32[3176>>2]|0; //@line 615 "hsp3gr_dish.cpp"
   $133 = (($132) + 68|0); //@line 615 "hsp3gr_dish.cpp"
   HEAP32[$133>>2] = $131; //@line 615 "hsp3gr_dish.cpp"
   $134 = HEAP32[3176>>2]|0; //@line 616 "hsp3gr_dish.cpp"
   $135 = (($134) + 72|0); //@line 616 "hsp3gr_dish.cpp"
   $136 = HEAP32[$135>>2]|0; //@line 616 "hsp3gr_dish.cpp"
   $137 = (__Z10code_getdii($136)|0); //@line 616 "hsp3gr_dish.cpp"
   $138 = HEAP32[3176>>2]|0; //@line 616 "hsp3gr_dish.cpp"
   $139 = (($138) + 72|0); //@line 616 "hsp3gr_dish.cpp"
   HEAP32[$139>>2] = $137; //@line 616 "hsp3gr_dish.cpp"
   break;
  }
  case 16:  {
   $125 = (__Z9code_getsv()|0); //@line 610 "hsp3gr_dish.cpp"
   $p = $125; //@line 610 "hsp3gr_dish.cpp"
   $126 = HEAP32[3176>>2]|0; //@line 611 "hsp3gr_dish.cpp"
   $127 = $p; //@line 611 "hsp3gr_dish.cpp"
   __ZN5Bmscr5TitleEPc($126,$127); //@line 611 "hsp3gr_dish.cpp"
   break;
  }
  case 15:  {
   $98 = (__Z8code_getv()|0); //@line 587 "hsp3gr_dish.cpp"
   $chk = $98; //@line 587 "hsp3gr_dish.cpp"
   $99 = $chk; //@line 588 "hsp3gr_dish.cpp"
   $100 = ($99|0)<=(-2); //@line 588 "hsp3gr_dish.cpp"
   if ($100) {
    break L1;
   }
   $101 = HEAP32[592>>2]|0; //@line 592 "hsp3gr_dish.cpp"
   $102 = HEAP16[$101>>1]|0; //@line 592 "hsp3gr_dish.cpp"
   $103 = $102 << 16 >> 16; //@line 592 "hsp3gr_dish.cpp"
   $104 = HEAP32[3456>>2]|0; //@line 592 "hsp3gr_dish.cpp"
   $105 = (($104) + (($103*140)|0)|0); //@line 592 "hsp3gr_dish.cpp"
   $106 = (($105) + 28|0); //@line 592 "hsp3gr_dish.cpp"
   $107 = HEAP32[$106>>2]|0; //@line 592 "hsp3gr_dish.cpp"
   $108 = HEAP32[592>>2]|0; //@line 592 "hsp3gr_dish.cpp"
   $109 = (FUNCTION_TABLE_ii[$107 & 255]($108)|0); //@line 592 "hsp3gr_dish.cpp"
   $ptr = $109; //@line 592 "hsp3gr_dish.cpp"
   $110 = HEAP32[592>>2]|0; //@line 593 "hsp3gr_dish.cpp"
   $111 = HEAP16[$110>>1]|0; //@line 593 "hsp3gr_dish.cpp"
   $112 = $111 << 16 >> 16; //@line 593 "hsp3gr_dish.cpp"
   $113 = ($112|0)!=(2); //@line 593 "hsp3gr_dish.cpp"
   if ($113) {
    $114 = HEAP32[3456>>2]|0; //@line 594 "hsp3gr_dish.cpp"
    $115 = (($114) + 280|0); //@line 594 "hsp3gr_dish.cpp"
    $116 = (($115) + 20|0); //@line 594 "hsp3gr_dish.cpp"
    $117 = HEAP32[$116>>2]|0; //@line 594 "hsp3gr_dish.cpp"
    $118 = $ptr; //@line 594 "hsp3gr_dish.cpp"
    $119 = HEAP32[592>>2]|0; //@line 594 "hsp3gr_dish.cpp"
    $120 = HEAP16[$119>>1]|0; //@line 594 "hsp3gr_dish.cpp"
    $121 = $120 << 16 >> 16; //@line 594 "hsp3gr_dish.cpp"
    $122 = (FUNCTION_TABLE_iii[$117 & 255]($118,$121)|0); //@line 594 "hsp3gr_dish.cpp"
    $ptr = $122; //@line 594 "hsp3gr_dish.cpp"
   }
   $123 = HEAP32[3176>>2]|0; //@line 596 "hsp3gr_dish.cpp"
   $124 = $ptr; //@line 596 "hsp3gr_dish.cpp"
   __ZN5Bmscr5PrintEPc($123,$124); //@line 596 "hsp3gr_dish.cpp"
   break;
  }
  case 12:  {
   $87 = HEAP32[3176>>2]|0; //@line 577 "hsp3gr_dish.cpp"
   $88 = (($87) + 68|0); //@line 577 "hsp3gr_dish.cpp"
   $89 = HEAP32[$88>>2]|0; //@line 577 "hsp3gr_dish.cpp"
   $90 = (__Z10code_getdii($89)|0); //@line 577 "hsp3gr_dish.cpp"
   HEAP32[3216>>2] = $90; //@line 577 "hsp3gr_dish.cpp"
   $91 = HEAP32[3176>>2]|0; //@line 578 "hsp3gr_dish.cpp"
   $92 = (($91) + 72|0); //@line 578 "hsp3gr_dish.cpp"
   $93 = HEAP32[$92>>2]|0; //@line 578 "hsp3gr_dish.cpp"
   $94 = (__Z10code_getdii($93)|0); //@line 578 "hsp3gr_dish.cpp"
   HEAP32[3232>>2] = $94; //@line 578 "hsp3gr_dish.cpp"
   $95 = HEAP32[3176>>2]|0; //@line 579 "hsp3gr_dish.cpp"
   $96 = HEAP32[3216>>2]|0; //@line 579 "hsp3gr_dish.cpp"
   $97 = HEAP32[3232>>2]|0; //@line 579 "hsp3gr_dish.cpp"
   __ZN5Bmscr4PsetEii($95,$96,$97); //@line 579 "hsp3gr_dish.cpp"
   break;
  }
  case 10:  {
   $84 = (__Z10code_getdii(-1)|0); //@line 562 "hsp3gr_dish.cpp"
   HEAP32[3216>>2] = $84; //@line 562 "hsp3gr_dish.cpp"
   $85 = HEAP32[3184>>2]|0; //@line 563 "hsp3gr_dish.cpp"
   $86 = HEAP32[3216>>2]|0; //@line 563 "hsp3gr_dish.cpp"
   __ZN5MMMan8StopBankEi($85,$86); //@line 563 "hsp3gr_dish.cpp"
   break;
  }
  case 9:  {
   $81 = (__Z10code_getdii(0)|0); //@line 556 "hsp3gr_dish.cpp"
   HEAP32[3216>>2] = $81; //@line 556 "hsp3gr_dish.cpp"
   $82 = HEAP32[3184>>2]|0; //@line 558 "hsp3gr_dish.cpp"
   $83 = HEAP32[3216>>2]|0; //@line 558 "hsp3gr_dish.cpp"
   (__ZN5MMMan4PlayEi($82,$83)|0); //@line 558 "hsp3gr_dish.cpp"
   break;
  }
  case 8:  {
   $71 = (__Z9code_getsv()|0); //@line 548 "hsp3gr_dish.cpp"
   (_strncpy(($fname2|0),($71|0),255)|0); //@line 548 "hsp3gr_dish.cpp"
   $72 = (__Z10code_getdii(0)|0); //@line 549 "hsp3gr_dish.cpp"
   HEAP32[3216>>2] = $72; //@line 549 "hsp3gr_dish.cpp"
   $73 = (__Z10code_getdii(0)|0); //@line 550 "hsp3gr_dish.cpp"
   HEAP32[3232>>2] = $73; //@line 550 "hsp3gr_dish.cpp"
   $74 = HEAP32[3184>>2]|0; //@line 551 "hsp3gr_dish.cpp"
   $75 = HEAP32[3216>>2]|0; //@line 551 "hsp3gr_dish.cpp"
   $76 = HEAP32[3232>>2]|0; //@line 551 "hsp3gr_dish.cpp"
   $77 = (__ZN5MMMan4LoadEPcii($74,$fname2,$75,$76)|0); //@line 551 "hsp3gr_dish.cpp"
   $i1 = $77; //@line 551 "hsp3gr_dish.cpp"
   $78 = $i1; //@line 552 "hsp3gr_dish.cpp"
   $79 = ($78|0)!=(0); //@line 552 "hsp3gr_dish.cpp"
   if ($79) {
    $80 = (___cxa_allocate_exception(4)|0); //@line 552 "hsp3gr_dish.cpp"
    HEAP32[$80>>2] = 12; //@line 552 "hsp3gr_dish.cpp"
    ___cxa_throw(($80|0),(624|0),(0|0)); //@line 552 "hsp3gr_dish.cpp"
    // unreachable; //@line 552 "hsp3gr_dish.cpp"
   } else {
    break L1;
   }
   break;
  }
  case 3:  {
   __ZL14cmdfunc_dialogv(); //@line 538 "hsp3gr_dish.cpp"
   $67 = HEAP32[3152>>2]|0; //@line 539 "hsp3gr_dish.cpp"
   $68 = (($67) + 240|0); //@line 539 "hsp3gr_dish.cpp"
   HEAP32[$68>>2] = 0; //@line 539 "hsp3gr_dish.cpp"
   $69 = HEAP32[3152>>2]|0; //@line 540 "hsp3gr_dish.cpp"
   $70 = (($69) + 236|0); //@line 540 "hsp3gr_dish.cpp"
   HEAP32[$70>>2] = 1; //@line 540 "hsp3gr_dish.cpp"
   $0 = 1; //@line 541 "hsp3gr_dish.cpp"
   $847 = $0; //@line 3306 "hsp3gr_dish.cpp"
   STACKTOP = sp;return ($847|0); //@line 3306 "hsp3gr_dish.cpp"
   break;
  }
  case 2:  {
   $56 = (__Z9code_getsv()|0); //@line 527 "hsp3gr_dish.cpp"
   $57 = (__Z12code_stmpstrPc($56)|0); //@line 527 "hsp3gr_dish.cpp"
   $fname = $57; //@line 527 "hsp3gr_dish.cpp"
   $58 = (__Z10code_getdii(0)|0); //@line 528 "hsp3gr_dish.cpp"
   HEAP32[3216>>2] = $58; //@line 528 "hsp3gr_dish.cpp"
   $59 = (__Z10code_getdsPKc(3224)|0); //@line 529 "hsp3gr_dish.cpp"
   $ps = $59; //@line 529 "hsp3gr_dish.cpp"
   $60 = $fname; //@line 530 "hsp3gr_dish.cpp"
   $61 = $ps; //@line 530 "hsp3gr_dish.cpp"
   $62 = HEAP32[3216>>2]|0; //@line 530 "hsp3gr_dish.cpp"
   __ZL8ExecFilePcS_i($60,$61,$62); //@line 530 "hsp3gr_dish.cpp"
   $63 = HEAP32[3152>>2]|0; //@line 532 "hsp3gr_dish.cpp"
   $64 = (($63) + 240|0); //@line 532 "hsp3gr_dish.cpp"
   HEAP32[$64>>2] = 0; //@line 532 "hsp3gr_dish.cpp"
   $65 = HEAP32[3152>>2]|0; //@line 533 "hsp3gr_dish.cpp"
   $66 = (($65) + 236|0); //@line 533 "hsp3gr_dish.cpp"
   HEAP32[$66>>2] = 1; //@line 533 "hsp3gr_dish.cpp"
   $0 = 1; //@line 534 "hsp3gr_dish.cpp"
   $847 = $0; //@line 3306 "hsp3gr_dish.cpp"
   STACKTOP = sp;return ($847|0); //@line 3306 "hsp3gr_dish.cpp"
   break;
  }
  case 0:  {
   $i = 0; //@line 502 "hsp3gr_dish.cpp"
   $3 = HEAP32[3160>>2]|0; //@line 503 "hsp3gr_dish.cpp"
   $4 = HEAP32[$3>>2]|0; //@line 503 "hsp3gr_dish.cpp"
   $5 = ($4|0)==(15); //@line 503 "hsp3gr_dish.cpp"
   do {
    if ($5) {
     $6 = HEAP32[3168>>2]|0; //@line 504 "hsp3gr_dish.cpp"
     $7 = HEAP32[$6>>2]|0; //@line 504 "hsp3gr_dish.cpp"
     $i = $7; //@line 504 "hsp3gr_dish.cpp"
     $8 = $i; //@line 505 "hsp3gr_dish.cpp"
     $9 = ($8|0)>=(2); //@line 505 "hsp3gr_dish.cpp"
     if ($9) {
      $10 = (___cxa_allocate_exception(4)|0); //@line 505 "hsp3gr_dish.cpp"
      HEAP32[$10>>2] = 2; //@line 505 "hsp3gr_dish.cpp"
      ___cxa_throw(($10|0),(624|0),(0|0)); //@line 505 "hsp3gr_dish.cpp"
      // unreachable; //@line 505 "hsp3gr_dish.cpp"
     } else {
      __Z9code_nextv(); //@line 506 "hsp3gr_dish.cpp"
      break;
     }
    }
   } while(0);
   $11 = (__Z9code_getsv()|0); //@line 511 "hsp3gr_dish.cpp"
   (_strncpy(($btnname|0),($11|0),255)|0); //@line 511 "hsp3gr_dish.cpp"
   $12 = (__Z10code_getlbv()|0); //@line 512 "hsp3gr_dish.cpp"
   $sbr = $12; //@line 512 "hsp3gr_dish.cpp"
   __Z9code_nextv(); //@line 513 "hsp3gr_dish.cpp"
   $13 = HEAP32[3176>>2]|0; //@line 514 "hsp3gr_dish.cpp"
   $14 = $i; //@line 514 "hsp3gr_dish.cpp"
   $15 = $sbr; //@line 514 "hsp3gr_dish.cpp"
   $16 = (__ZN5Bmscr18AddHSPObjectButtonEPciPv($13,$btnname,$14,$15)|0); //@line 514 "hsp3gr_dish.cpp"
   $17 = HEAP32[3152>>2]|0; //@line 514 "hsp3gr_dish.cpp"
   $18 = (($17) + 784|0); //@line 514 "hsp3gr_dish.cpp"
   HEAP32[$18>>2] = $16; //@line 514 "hsp3gr_dish.cpp"
   $19 = HEAP32[3176>>2]|0; //@line 515 "hsp3gr_dish.cpp"
   $20 = (($19) + 188|0); //@line 515 "hsp3gr_dish.cpp"
   $21 = HEAP32[$20>>2]|0; //@line 515 "hsp3gr_dish.cpp"
   HEAP32[3216>>2] = $21; //@line 515 "hsp3gr_dish.cpp"
   $22 = HEAP32[3216>>2]|0; //@line 516 "hsp3gr_dish.cpp"
   $23 = ($22|0)>=(0); //@line 516 "hsp3gr_dish.cpp"
   if ($23) {
    $24 = HEAP32[3144>>2]|0; //@line 517 "hsp3gr_dish.cpp"
    $25 = HEAP32[3216>>2]|0; //@line 517 "hsp3gr_dish.cpp"
    $26 = (__ZN6HspWnd12GetBmscrSafeEi($24,$25)|0); //@line 517 "hsp3gr_dish.cpp"
    $bmsrc = $26; //@line 517 "hsp3gr_dish.cpp"
    $27 = HEAP32[3176>>2]|0; //@line 518 "hsp3gr_dish.cpp"
    $28 = HEAP32[3152>>2]|0; //@line 518 "hsp3gr_dish.cpp"
    $29 = (($28) + 784|0); //@line 518 "hsp3gr_dish.cpp"
    $30 = HEAP32[$29>>2]|0; //@line 518 "hsp3gr_dish.cpp"
    $31 = HEAP32[3216>>2]|0; //@line 518 "hsp3gr_dish.cpp"
    $32 = HEAP32[3176>>2]|0; //@line 518 "hsp3gr_dish.cpp"
    $33 = (($32) + 192|0); //@line 518 "hsp3gr_dish.cpp"
    $34 = HEAP16[$33>>1]|0; //@line 518 "hsp3gr_dish.cpp"
    $35 = $34 << 16 >> 16; //@line 518 "hsp3gr_dish.cpp"
    $36 = HEAP32[3176>>2]|0; //@line 518 "hsp3gr_dish.cpp"
    $37 = (($36) + 194|0); //@line 518 "hsp3gr_dish.cpp"
    $38 = HEAP16[$37>>1]|0; //@line 518 "hsp3gr_dish.cpp"
    $39 = $38 << 16 >> 16; //@line 518 "hsp3gr_dish.cpp"
    $40 = HEAP32[3176>>2]|0; //@line 518 "hsp3gr_dish.cpp"
    $41 = (($40) + 196|0); //@line 518 "hsp3gr_dish.cpp"
    $42 = HEAP16[$41>>1]|0; //@line 518 "hsp3gr_dish.cpp"
    $43 = $42 << 16 >> 16; //@line 518 "hsp3gr_dish.cpp"
    $44 = HEAP32[3176>>2]|0; //@line 518 "hsp3gr_dish.cpp"
    $45 = (($44) + 198|0); //@line 518 "hsp3gr_dish.cpp"
    $46 = HEAP16[$45>>1]|0; //@line 518 "hsp3gr_dish.cpp"
    $47 = $46 << 16 >> 16; //@line 518 "hsp3gr_dish.cpp"
    $48 = HEAP32[3176>>2]|0; //@line 518 "hsp3gr_dish.cpp"
    $49 = (($48) + 200|0); //@line 518 "hsp3gr_dish.cpp"
    $50 = HEAP16[$49>>1]|0; //@line 518 "hsp3gr_dish.cpp"
    $51 = $50 << 16 >> 16; //@line 518 "hsp3gr_dish.cpp"
    $52 = HEAP32[3176>>2]|0; //@line 518 "hsp3gr_dish.cpp"
    $53 = (($52) + 202|0); //@line 518 "hsp3gr_dish.cpp"
    $54 = HEAP16[$53>>1]|0; //@line 518 "hsp3gr_dish.cpp"
    $55 = $54 << 16 >> 16; //@line 518 "hsp3gr_dish.cpp"
    __ZN5Bmscr14SetButtonImageEiiiiiiii($27,$30,$31,$35,$39,$43,$47,$51,$55); //@line 518 "hsp3gr_dish.cpp"
   }
   break;
  }
  case 27:  {
   $193 = (__Z10code_getdii(1)|0); //@line 667 "hsp3gr_dish.cpp"
   HEAP32[3216>>2] = $193; //@line 667 "hsp3gr_dish.cpp"
   $194 = (__Z10code_getdii(0)|0); //@line 668 "hsp3gr_dish.cpp"
   HEAP32[3232>>2] = $194; //@line 668 "hsp3gr_dish.cpp"
   $195 = (__Z10code_getdii(0)|0); //@line 669 "hsp3gr_dish.cpp"
   HEAP32[3240>>2] = $195; //@line 669 "hsp3gr_dish.cpp"
   $196 = (__Z10code_getdii(0)|0); //@line 670 "hsp3gr_dish.cpp"
   HEAP32[3248>>2] = $196; //@line 670 "hsp3gr_dish.cpp"
   $197 = (__Z10code_getdii(0)|0); //@line 671 "hsp3gr_dish.cpp"
   HEAP32[3256>>2] = $197; //@line 671 "hsp3gr_dish.cpp"
   $198 = HEAP32[3216>>2]|0; //@line 672 "hsp3gr_dish.cpp"
   $199 = $198 & 1; //@line 672 "hsp3gr_dish.cpp"
   $200 = ($199|0)!=(0); //@line 672 "hsp3gr_dish.cpp"
   do {
    if ($200) {
     $201 = HEAP32[3216>>2]|0; //@line 673 "hsp3gr_dish.cpp"
     $202 = $201 & 16; //@line 673 "hsp3gr_dish.cpp"
     $203 = ($202|0)==(0); //@line 673 "hsp3gr_dish.cpp"
     if ($203) {
      $204 = HEAP32[3176>>2]|0; //@line 674 "hsp3gr_dish.cpp"
      (__ZN5Bmscr14DrawAllObjectsEv($204)|0); //@line 674 "hsp3gr_dish.cpp"
      $205 = HEAP32[3176>>2]|0; //@line 675 "hsp3gr_dish.cpp"
      __ZN5Bmscr14SetDefaultFontEv($205); //@line 675 "hsp3gr_dish.cpp"
     }
    } else {
     $206 = HEAP32[3216>>2]|0; //@line 681 "hsp3gr_dish.cpp"
     $207 = $206 & 16; //@line 681 "hsp3gr_dish.cpp"
     $208 = ($207|0)!=(0); //@line 681 "hsp3gr_dish.cpp"
     if ($208) {
      $209 = HEAP32[3176>>2]|0; //@line 682 "hsp3gr_dish.cpp"
      (__ZN5Bmscr14DrawAllObjectsEv($209)|0); //@line 682 "hsp3gr_dish.cpp"
      $210 = HEAP32[3176>>2]|0; //@line 683 "hsp3gr_dish.cpp"
      __ZN5Bmscr14SetDefaultFontEv($210); //@line 683 "hsp3gr_dish.cpp"
      break L1;
     } else {
      break;
     }
    }
   } while(0);
   $211 = HEAP32[3176>>2]|0; //@line 690 "hsp3gr_dish.cpp"
   $212 = HEAP32[3216>>2]|0; //@line 690 "hsp3gr_dish.cpp"
   $213 = (_hgio_redraw($211,$212)|0); //@line 690 "hsp3gr_dish.cpp"
   $214 = HEAP32[3152>>2]|0; //@line 690 "hsp3gr_dish.cpp"
   $215 = (($214) + 784|0); //@line 690 "hsp3gr_dish.cpp"
   HEAP32[$215>>2] = $213; //@line 690 "hsp3gr_dish.cpp"
   break;
  }
  case 24:  {
   $186 = (__Z10code_getdii(0)|0); //@line 661 "hsp3gr_dish.cpp"
   HEAP32[3216>>2] = $186; //@line 661 "hsp3gr_dish.cpp"
   $187 = (__Z10code_getdii(0)|0); //@line 662 "hsp3gr_dish.cpp"
   HEAP32[3232>>2] = $187; //@line 662 "hsp3gr_dish.cpp"
   $188 = (__Z10code_getdii(0)|0); //@line 663 "hsp3gr_dish.cpp"
   HEAP32[3240>>2] = $188; //@line 663 "hsp3gr_dish.cpp"
   $189 = HEAP32[3176>>2]|0; //@line 664 "hsp3gr_dish.cpp"
   $190 = HEAP32[3216>>2]|0; //@line 664 "hsp3gr_dish.cpp"
   $191 = HEAP32[3232>>2]|0; //@line 664 "hsp3gr_dish.cpp"
   $192 = HEAP32[3240>>2]|0; //@line 664 "hsp3gr_dish.cpp"
   __ZN5Bmscr8SetcolorEiii($189,$190,$191,$192); //@line 664 "hsp3gr_dish.cpp"
   break;
  }
  case 23:  {
   $178 = (__Z9code_getsv()|0); //@line 651 "hsp3gr_dish.cpp"
   (_strncpy(($fname3|0),($178|0),63)|0); //@line 651 "hsp3gr_dish.cpp"
   $179 = (__Z10code_getdii(0)|0); //@line 652 "hsp3gr_dish.cpp"
   HEAP32[3216>>2] = $179; //@line 652 "hsp3gr_dish.cpp"
   $180 = HEAP32[3176>>2]|0; //@line 653 "hsp3gr_dish.cpp"
   $181 = (($180) + 32|0); //@line 653 "hsp3gr_dish.cpp"
   $182 = HEAP32[$181>>2]|0; //@line 653 "hsp3gr_dish.cpp"
   $wid = $182; //@line 653 "hsp3gr_dish.cpp"
   $183 = HEAP32[3144>>2]|0; //@line 654 "hsp3gr_dish.cpp"
   $184 = $wid; //@line 654 "hsp3gr_dish.cpp"
   $185 = HEAP32[3216>>2]|0; //@line 654 "hsp3gr_dish.cpp"
   (__ZN6HspWnd7PicloadEiPci($183,$184,$fname3,$185)|0); //@line 654 "hsp3gr_dish.cpp"
   break;
  }
  case 32:  {
   $289 = (__Z10code_getdii(0)|0); //@line 740 "hsp3gr_dish.cpp"
   HEAP32[3216>>2] = $289; //@line 740 "hsp3gr_dish.cpp"
   $290 = (__Z10code_getdii(32)|0); //@line 741 "hsp3gr_dish.cpp"
   HEAP32[3232>>2] = $290; //@line 741 "hsp3gr_dish.cpp"
   $291 = (__Z10code_getdii(32)|0); //@line 742 "hsp3gr_dish.cpp"
   HEAP32[3240>>2] = $291; //@line 742 "hsp3gr_dish.cpp"
   $292 = (__Z10code_getdii(0)|0); //@line 743 "hsp3gr_dish.cpp"
   HEAP32[3248>>2] = $292; //@line 743 "hsp3gr_dish.cpp"
   $293 = HEAP32[3216>>2]|0; //@line 745 "hsp3gr_dish.cpp"
   $294 = HEAP32[3176>>2]|0; //@line 745 "hsp3gr_dish.cpp"
   $295 = (($294) + 100|0); //@line 745 "hsp3gr_dish.cpp"
   HEAP32[$295>>2] = $293; //@line 745 "hsp3gr_dish.cpp"
   $296 = HEAP32[3232>>2]|0; //@line 746 "hsp3gr_dish.cpp"
   $297 = HEAP32[3176>>2]|0; //@line 746 "hsp3gr_dish.cpp"
   $298 = (($297) + 92|0); //@line 746 "hsp3gr_dish.cpp"
   HEAP32[$298>>2] = $296; //@line 746 "hsp3gr_dish.cpp"
   $299 = HEAP32[3240>>2]|0; //@line 747 "hsp3gr_dish.cpp"
   $300 = HEAP32[3176>>2]|0; //@line 747 "hsp3gr_dish.cpp"
   $301 = (($300) + 96|0); //@line 747 "hsp3gr_dish.cpp"
   HEAP32[$301>>2] = $299; //@line 747 "hsp3gr_dish.cpp"
   $302 = HEAP32[3248>>2]|0; //@line 748 "hsp3gr_dish.cpp"
   $303 = HEAP32[3176>>2]|0; //@line 748 "hsp3gr_dish.cpp"
   $304 = (($303) + 144|0); //@line 748 "hsp3gr_dish.cpp"
   HEAP32[$304>>2] = $302; //@line 748 "hsp3gr_dish.cpp"
   break;
  }
  case 31:  {
   $254 = HEAP32[3176>>2]|0; //@line 726 "hsp3gr_dish.cpp"
   $255 = (($254) + 4|0); //@line 726 "hsp3gr_dish.cpp"
   $256 = HEAP32[$255>>2]|0; //@line 726 "hsp3gr_dish.cpp"
   $257 = (__Z10code_getdii($256)|0); //@line 726 "hsp3gr_dish.cpp"
   HEAP32[3216>>2] = $257; //@line 726 "hsp3gr_dish.cpp"
   $258 = HEAP32[3176>>2]|0; //@line 727 "hsp3gr_dish.cpp"
   $259 = (($258) + 8|0); //@line 727 "hsp3gr_dish.cpp"
   $260 = HEAP32[$259>>2]|0; //@line 727 "hsp3gr_dish.cpp"
   $261 = (__Z10code_getdii($260)|0); //@line 727 "hsp3gr_dish.cpp"
   HEAP32[3232>>2] = $261; //@line 727 "hsp3gr_dish.cpp"
   $262 = (__Z10code_getdii(0)|0); //@line 728 "hsp3gr_dish.cpp"
   HEAP32[3240>>2] = $262; //@line 728 "hsp3gr_dish.cpp"
   $263 = (__Z10code_getdii(0)|0); //@line 729 "hsp3gr_dish.cpp"
   HEAP32[3248>>2] = $263; //@line 729 "hsp3gr_dish.cpp"
   $264 = (__Z10code_getdii(0)|0); //@line 730 "hsp3gr_dish.cpp"
   HEAP32[3256>>2] = $264; //@line 730 "hsp3gr_dish.cpp"
   $265 = HEAP32[3176>>2]|0; //@line 731 "hsp3gr_dish.cpp"
   $266 = (($265) + 92|0); //@line 731 "hsp3gr_dish.cpp"
   $267 = HEAP32[$266>>2]|0; //@line 731 "hsp3gr_dish.cpp"
   $268 = (__Z10code_getdii($267)|0); //@line 731 "hsp3gr_dish.cpp"
   HEAP32[3264>>2] = $268; //@line 731 "hsp3gr_dish.cpp"
   $269 = HEAP32[3176>>2]|0; //@line 732 "hsp3gr_dish.cpp"
   $270 = (($269) + 96|0); //@line 732 "hsp3gr_dish.cpp"
   $271 = HEAP32[$270>>2]|0; //@line 732 "hsp3gr_dish.cpp"
   $272 = (__Z10code_getdii($271)|0); //@line 732 "hsp3gr_dish.cpp"
   $p7 = $272; //@line 732 "hsp3gr_dish.cpp"
   $273 = (__Z10code_getdii(0)|0); //@line 733 "hsp3gr_dish.cpp"
   $p8 = $273; //@line 733 "hsp3gr_dish.cpp"
   $274 = HEAP32[3144>>2]|0; //@line 734 "hsp3gr_dish.cpp"
   $275 = HEAP32[3240>>2]|0; //@line 734 "hsp3gr_dish.cpp"
   $276 = (__ZN6HspWnd12GetBmscrSafeEi($274,$275)|0); //@line 734 "hsp3gr_dish.cpp"
   $src4 = $276; //@line 734 "hsp3gr_dish.cpp"
   $277 = HEAP32[3176>>2]|0; //@line 735 "hsp3gr_dish.cpp"
   $278 = HEAP32[3216>>2]|0; //@line 735 "hsp3gr_dish.cpp"
   $279 = HEAP32[3232>>2]|0; //@line 735 "hsp3gr_dish.cpp"
   $280 = $src4; //@line 735 "hsp3gr_dish.cpp"
   $281 = HEAP32[3248>>2]|0; //@line 735 "hsp3gr_dish.cpp"
   $282 = HEAP32[3256>>2]|0; //@line 735 "hsp3gr_dish.cpp"
   $283 = HEAP32[3264>>2]|0; //@line 735 "hsp3gr_dish.cpp"
   $284 = $p7; //@line 735 "hsp3gr_dish.cpp"
   $285 = $p8; //@line 735 "hsp3gr_dish.cpp"
   $286 = (__ZN5Bmscr4ZoomEiiPS_iiiii($277,$278,$279,$280,$281,$282,$283,$284,$285)|0); //@line 735 "hsp3gr_dish.cpp"
   $287 = ($286|0)!=(0); //@line 735 "hsp3gr_dish.cpp"
   if ($287) {
    $288 = (___cxa_allocate_exception(4)|0); //@line 735 "hsp3gr_dish.cpp"
    HEAP32[$288>>2] = 21; //@line 735 "hsp3gr_dish.cpp"
    ___cxa_throw(($288|0),(624|0),(0|0)); //@line 735 "hsp3gr_dish.cpp"
    // unreachable; //@line 735 "hsp3gr_dish.cpp"
   } else {
    break L1;
   }
   break;
  }
  case 22:  {
   $166 = (__Z10code_getdii(64)|0); //@line 641 "hsp3gr_dish.cpp"
   HEAP32[3216>>2] = $166; //@line 641 "hsp3gr_dish.cpp"
   $167 = (__Z10code_getdii(24)|0); //@line 642 "hsp3gr_dish.cpp"
   HEAP32[3232>>2] = $167; //@line 642 "hsp3gr_dish.cpp"
   $168 = (__Z10code_getdii(0)|0); //@line 643 "hsp3gr_dish.cpp"
   HEAP32[3240>>2] = $168; //@line 643 "hsp3gr_dish.cpp"
   $169 = HEAP32[3216>>2]|0; //@line 644 "hsp3gr_dish.cpp"
   $170 = HEAP32[3176>>2]|0; //@line 644 "hsp3gr_dish.cpp"
   $171 = (($170) + 76|0); //@line 644 "hsp3gr_dish.cpp"
   HEAP32[$171>>2] = $169; //@line 644 "hsp3gr_dish.cpp"
   $172 = HEAP32[3232>>2]|0; //@line 644 "hsp3gr_dish.cpp"
   $173 = HEAP32[3176>>2]|0; //@line 644 "hsp3gr_dish.cpp"
   $174 = (($173) + 80|0); //@line 644 "hsp3gr_dish.cpp"
   HEAP32[$174>>2] = $172; //@line 644 "hsp3gr_dish.cpp"
   $175 = HEAP32[3240>>2]|0; //@line 644 "hsp3gr_dish.cpp"
   $176 = HEAP32[3176>>2]|0; //@line 644 "hsp3gr_dish.cpp"
   $177 = (($176) + 84|0); //@line 644 "hsp3gr_dish.cpp"
   HEAP32[$177>>2] = $175; //@line 644 "hsp3gr_dish.cpp"
   break;
  }
  case 20:  {
   $160 = (__Z9code_getsv()|0); //@line 634 "hsp3gr_dish.cpp"
   (_strncpy(($fontname|0),($160|0),255)|0); //@line 634 "hsp3gr_dish.cpp"
   $161 = (__Z10code_getdii(12)|0); //@line 635 "hsp3gr_dish.cpp"
   HEAP32[3216>>2] = $161; //@line 635 "hsp3gr_dish.cpp"
   $162 = (__Z10code_getdii(0)|0); //@line 636 "hsp3gr_dish.cpp"
   HEAP32[3232>>2] = $162; //@line 636 "hsp3gr_dish.cpp"
   $163 = HEAP32[3176>>2]|0; //@line 637 "hsp3gr_dish.cpp"
   $164 = HEAP32[3216>>2]|0; //@line 637 "hsp3gr_dish.cpp"
   $165 = HEAP32[3232>>2]|0; //@line 637 "hsp3gr_dish.cpp"
   __ZN5Bmscr7SetFontEPcii($163,$fontname,$164,$165); //@line 637 "hsp3gr_dish.cpp"
   break;
  }
  case 19:  {
   $157 = (__Z10code_getdii(0)|0); //@line 628 "hsp3gr_dish.cpp"
   HEAP32[3216>>2] = $157; //@line 628 "hsp3gr_dish.cpp"
   $158 = HEAP32[3176>>2]|0; //@line 629 "hsp3gr_dish.cpp"
   $159 = HEAP32[3216>>2]|0; //@line 629 "hsp3gr_dish.cpp"
   __ZN5Bmscr3ClsEi($158,$159); //@line 629 "hsp3gr_dish.cpp"
   break;
  }
  case 18:  {
   $140 = (__Z10code_getdii(0)|0); //@line 620 "hsp3gr_dish.cpp"
   HEAP32[3216>>2] = $140; //@line 620 "hsp3gr_dish.cpp"
   $141 = (__Z10code_getdii(0)|0); //@line 621 "hsp3gr_dish.cpp"
   HEAP32[3232>>2] = $141; //@line 621 "hsp3gr_dish.cpp"
   $142 = HEAP32[3176>>2]|0; //@line 622 "hsp3gr_dish.cpp"
   $143 = (($142) + 4|0); //@line 622 "hsp3gr_dish.cpp"
   $144 = HEAP32[$143>>2]|0; //@line 622 "hsp3gr_dish.cpp"
   $145 = (__Z10code_getdii($144)|0); //@line 622 "hsp3gr_dish.cpp"
   HEAP32[3240>>2] = $145; //@line 622 "hsp3gr_dish.cpp"
   $146 = HEAP32[3176>>2]|0; //@line 623 "hsp3gr_dish.cpp"
   $147 = (($146) + 8|0); //@line 623 "hsp3gr_dish.cpp"
   $148 = HEAP32[$147>>2]|0; //@line 623 "hsp3gr_dish.cpp"
   $149 = (__Z10code_getdii($148)|0); //@line 623 "hsp3gr_dish.cpp"
   HEAP32[3248>>2] = $149; //@line 623 "hsp3gr_dish.cpp"
   $150 = (__Z10code_getdii(1)|0); //@line 624 "hsp3gr_dish.cpp"
   HEAP32[3256>>2] = $150; //@line 624 "hsp3gr_dish.cpp"
   $151 = HEAP32[3176>>2]|0; //@line 625 "hsp3gr_dish.cpp"
   $152 = HEAP32[3216>>2]|0; //@line 625 "hsp3gr_dish.cpp"
   $153 = HEAP32[3232>>2]|0; //@line 625 "hsp3gr_dish.cpp"
   $154 = HEAP32[3240>>2]|0; //@line 625 "hsp3gr_dish.cpp"
   $155 = HEAP32[3248>>2]|0; //@line 625 "hsp3gr_dish.cpp"
   $156 = HEAP32[3256>>2]|0; //@line 625 "hsp3gr_dish.cpp"
   __ZN5Bmscr6CircleEiiiii($151,$152,$153,$154,$155,$156); //@line 625 "hsp3gr_dish.cpp"
   break;
  }
  case 28:  {
   $216 = (__Z10code_getdii(-1)|0); //@line 694 "hsp3gr_dish.cpp"
   HEAP32[3216>>2] = $216; //@line 694 "hsp3gr_dish.cpp"
   $217 = (__Z10code_getdii(-1)|0); //@line 695 "hsp3gr_dish.cpp"
   HEAP32[3232>>2] = $217; //@line 695 "hsp3gr_dish.cpp"
   $218 = (__Z10code_getdii(-1)|0); //@line 696 "hsp3gr_dish.cpp"
   HEAP32[3240>>2] = $218; //@line 696 "hsp3gr_dish.cpp"
   $219 = (__Z10code_getdii(-1)|0); //@line 697 "hsp3gr_dish.cpp"
   HEAP32[3248>>2] = $219; //@line 697 "hsp3gr_dish.cpp"
   $220 = HEAP32[3176>>2]|0; //@line 698 "hsp3gr_dish.cpp"
   $221 = HEAP32[3216>>2]|0; //@line 698 "hsp3gr_dish.cpp"
   $222 = HEAP32[3232>>2]|0; //@line 698 "hsp3gr_dish.cpp"
   $223 = HEAP32[3240>>2]|0; //@line 698 "hsp3gr_dish.cpp"
   $224 = HEAP32[3248>>2]|0; //@line 698 "hsp3gr_dish.cpp"
   __ZN5Bmscr5WidthEiiiii($220,$221,$222,$223,$224,1); //@line 698 "hsp3gr_dish.cpp"
   break;
  }
  case 29:  {
   $225 = (__Z10code_getdii(0)|0); //@line 702 "hsp3gr_dish.cpp"
   HEAP32[3216>>2] = $225; //@line 702 "hsp3gr_dish.cpp"
   $226 = (__Z10code_getdii(0)|0); //@line 703 "hsp3gr_dish.cpp"
   HEAP32[3232>>2] = $226; //@line 703 "hsp3gr_dish.cpp"
   $227 = HEAP32[3144>>2]|0; //@line 705 "hsp3gr_dish.cpp"
   $228 = HEAP32[3216>>2]|0; //@line 705 "hsp3gr_dish.cpp"
   $229 = (__ZN6HspWnd12GetBmscrSafeEi($227,$228)|0); //@line 705 "hsp3gr_dish.cpp"
   HEAP32[3176>>2] = $229; //@line 705 "hsp3gr_dish.cpp"
   $230 = HEAP32[3216>>2]|0; //@line 706 "hsp3gr_dish.cpp"
   HEAP32[3192>>2] = $230; //@line 706 "hsp3gr_dish.cpp"
   break;
  }
  case 30:  {
   $231 = (__Z10code_getdii(0)|0); //@line 712 "hsp3gr_dish.cpp"
   HEAP32[3216>>2] = $231; //@line 712 "hsp3gr_dish.cpp"
   $232 = (__Z10code_getdii(0)|0); //@line 713 "hsp3gr_dish.cpp"
   HEAP32[3232>>2] = $232; //@line 713 "hsp3gr_dish.cpp"
   $233 = (__Z10code_getdii(0)|0); //@line 714 "hsp3gr_dish.cpp"
   HEAP32[3240>>2] = $233; //@line 714 "hsp3gr_dish.cpp"
   $234 = HEAP32[3176>>2]|0; //@line 715 "hsp3gr_dish.cpp"
   $235 = (($234) + 92|0); //@line 715 "hsp3gr_dish.cpp"
   $236 = HEAP32[$235>>2]|0; //@line 715 "hsp3gr_dish.cpp"
   $237 = (__Z10code_getdii($236)|0); //@line 715 "hsp3gr_dish.cpp"
   HEAP32[3248>>2] = $237; //@line 715 "hsp3gr_dish.cpp"
   $238 = HEAP32[3176>>2]|0; //@line 716 "hsp3gr_dish.cpp"
   $239 = (($238) + 96|0); //@line 716 "hsp3gr_dish.cpp"
   $240 = HEAP32[$239>>2]|0; //@line 716 "hsp3gr_dish.cpp"
   $241 = (__Z10code_getdii($240)|0); //@line 716 "hsp3gr_dish.cpp"
   HEAP32[3256>>2] = $241; //@line 716 "hsp3gr_dish.cpp"
   $242 = HEAP32[3144>>2]|0; //@line 717 "hsp3gr_dish.cpp"
   $243 = HEAP32[3216>>2]|0; //@line 717 "hsp3gr_dish.cpp"
   $244 = (__ZN6HspWnd12GetBmscrSafeEi($242,$243)|0); //@line 717 "hsp3gr_dish.cpp"
   $src = $244; //@line 717 "hsp3gr_dish.cpp"
   $245 = HEAP32[3176>>2]|0; //@line 718 "hsp3gr_dish.cpp"
   $246 = $src; //@line 718 "hsp3gr_dish.cpp"
   $247 = HEAP32[3232>>2]|0; //@line 718 "hsp3gr_dish.cpp"
   $248 = HEAP32[3240>>2]|0; //@line 718 "hsp3gr_dish.cpp"
   $249 = HEAP32[3248>>2]|0; //@line 718 "hsp3gr_dish.cpp"
   $250 = HEAP32[3256>>2]|0; //@line 718 "hsp3gr_dish.cpp"
   $251 = (__ZN5Bmscr4CopyEPS_iiii($245,$246,$247,$248,$249,$250)|0); //@line 718 "hsp3gr_dish.cpp"
   $252 = ($251|0)!=(0); //@line 718 "hsp3gr_dish.cpp"
   if ($252) {
    $253 = (___cxa_allocate_exception(4)|0); //@line 718 "hsp3gr_dish.cpp"
    HEAP32[$253>>2] = 21; //@line 718 "hsp3gr_dish.cpp"
    ___cxa_throw(($253|0),(624|0),(0|0)); //@line 718 "hsp3gr_dish.cpp"
    // unreachable; //@line 718 "hsp3gr_dish.cpp"
   } else {
    break L1;
   }
   break;
  }
  case 61:  {
   $664 = (__Z10code_getdii(1)|0); //@line 1050 "hsp3gr_dish.cpp"
   HEAP32[3216>>2] = $664; //@line 1050 "hsp3gr_dish.cpp"
   $665 = (__Z10code_getdii(0)|0); //@line 1051 "hsp3gr_dish.cpp"
   HEAP32[3232>>2] = $665; //@line 1051 "hsp3gr_dish.cpp"
   $666 = (__Z10code_getdii(0)|0); //@line 1052 "hsp3gr_dish.cpp"
   HEAP32[3240>>2] = $666; //@line 1052 "hsp3gr_dish.cpp"
   $667 = (__Z10code_getdii(0)|0); //@line 1053 "hsp3gr_dish.cpp"
   HEAP32[3248>>2] = $667; //@line 1053 "hsp3gr_dish.cpp"
   $668 = (__Z10code_getdii(0)|0); //@line 1054 "hsp3gr_dish.cpp"
   HEAP32[3256>>2] = $668; //@line 1054 "hsp3gr_dish.cpp"
   $669 = HEAP32[3144>>2]|0; //@line 1057 "hsp3gr_dish.cpp"
   $670 = HEAP32[3216>>2]|0; //@line 1057 "hsp3gr_dish.cpp"
   $671 = (__ZN6HspWnd12GetBmscrSafeEi($669,$670)|0); //@line 1057 "hsp3gr_dish.cpp"
   $bm214 = $671; //@line 1057 "hsp3gr_dish.cpp"
   $672 = $bm214; //@line 1058 "hsp3gr_dish.cpp"
   $673 = HEAP32[3232>>2]|0; //@line 1058 "hsp3gr_dish.cpp"
   $674 = HEAP32[3240>>2]|0; //@line 1058 "hsp3gr_dish.cpp"
   $675 = HEAP32[3248>>2]|0; //@line 1058 "hsp3gr_dish.cpp"
   $676 = HEAP32[3256>>2]|0; //@line 1058 "hsp3gr_dish.cpp"
   __ZN5Bmscr16SetCelDivideSizeEiiii($672,$673,$674,$675,$676); //@line 1058 "hsp3gr_dish.cpp"
   break;
  }
  case 62:  {
   $677 = (__Z10code_getdii(1)|0); //@line 1066 "hsp3gr_dish.cpp"
   HEAP32[3216>>2] = $677; //@line 1066 "hsp3gr_dish.cpp"
   $678 = (__Z10code_getdii(0)|0); //@line 1067 "hsp3gr_dish.cpp"
   HEAP32[3232>>2] = $678; //@line 1067 "hsp3gr_dish.cpp"
   $679 = (+__Z10code_getddd(1.0)); //@line 1068 "hsp3gr_dish.cpp"
   $zx = $679; //@line 1068 "hsp3gr_dish.cpp"
   $680 = (+__Z10code_getddd(1.0)); //@line 1069 "hsp3gr_dish.cpp"
   $zy = $680; //@line 1069 "hsp3gr_dish.cpp"
   $681 = (+__Z10code_getddd(0.0)); //@line 1070 "hsp3gr_dish.cpp"
   $rot16 = $681; //@line 1070 "hsp3gr_dish.cpp"
   $682 = HEAP32[3144>>2]|0; //@line 1071 "hsp3gr_dish.cpp"
   $683 = HEAP32[3216>>2]|0; //@line 1071 "hsp3gr_dish.cpp"
   $684 = (__ZN6HspWnd12GetBmscrSafeEi($682,$683)|0); //@line 1071 "hsp3gr_dish.cpp"
   $bm215 = $684; //@line 1071 "hsp3gr_dish.cpp"
   $685 = $rot16; //@line 1073 "hsp3gr_dish.cpp"
   $686 = $685 == 0.0; //@line 1073 "hsp3gr_dish.cpp"
   if ($686) {
    $687 = $zx; //@line 1073 "hsp3gr_dish.cpp"
    $688 = $687 == 1.0; //@line 1073 "hsp3gr_dish.cpp"
    if ($688) {
     $689 = $zy; //@line 1073 "hsp3gr_dish.cpp"
     $690 = $689 == 1.0; //@line 1073 "hsp3gr_dish.cpp"
     if ($690) {
      $691 = HEAP32[3176>>2]|0; //@line 1075 "hsp3gr_dish.cpp"
      $692 = $bm215; //@line 1075 "hsp3gr_dish.cpp"
      $693 = HEAP32[3232>>2]|0; //@line 1075 "hsp3gr_dish.cpp"
      (__ZN5Bmscr6CelPutEPS_i($691,$692,$693)|0); //@line 1075 "hsp3gr_dish.cpp"
      break L1;
     }
    }
   }
   $694 = HEAP32[3176>>2]|0; //@line 1080 "hsp3gr_dish.cpp"
   $695 = $bm215; //@line 1080 "hsp3gr_dish.cpp"
   $696 = HEAP32[3232>>2]|0; //@line 1080 "hsp3gr_dish.cpp"
   $697 = $zx; //@line 1080 "hsp3gr_dish.cpp"
   $698 = $697; //@line 1080 "hsp3gr_dish.cpp"
   $699 = $zy; //@line 1080 "hsp3gr_dish.cpp"
   $700 = $699; //@line 1080 "hsp3gr_dish.cpp"
   $701 = $rot16; //@line 1080 "hsp3gr_dish.cpp"
   $702 = $701; //@line 1080 "hsp3gr_dish.cpp"
   (__ZN5Bmscr6CelPutEPS_ifff($694,$695,$696,$698,$700,$702)|0); //@line 1080 "hsp3gr_dish.cpp"
   break;
  }
  case 63:  {
   $703 = (__Z10code_getdii(0)|0); //@line 1085 "hsp3gr_dish.cpp"
   HEAP32[3216>>2] = $703; //@line 1085 "hsp3gr_dish.cpp"
   $704 = HEAP32[3176>>2]|0; //@line 1087 "hsp3gr_dish.cpp"
   $705 = HEAP32[3216>>2]|0; //@line 1087 "hsp3gr_dish.cpp"
   __ZN5Bmscr9SetFilterEi($704,$705); //@line 1087 "hsp3gr_dish.cpp"
   break;
  }
  case 64:  {
   $706 = (__Z10code_getdii(0)|0); //@line 1090 "hsp3gr_dish.cpp"
   HEAP32[3216>>2] = $706; //@line 1090 "hsp3gr_dish.cpp"
   $707 = (__Z10code_getdii(0)|0); //@line 1091 "hsp3gr_dish.cpp"
   HEAP32[3232>>2] = $707; //@line 1091 "hsp3gr_dish.cpp"
   $708 = HEAP32[3216>>2]|0; //@line 1095 "hsp3gr_dish.cpp"
   $709 = HEAP32[3232>>2]|0; //@line 1095 "hsp3gr_dish.cpp"
   _SetSysReq($708,$709); //@line 1095 "hsp3gr_dish.cpp"
   break;
  }
  case 65:  {
   $710 = (__Z10code_getvaPP4PVal($p_pval)|0); //@line 1101 "hsp3gr_dish.cpp"
   $p_aptr = $710; //@line 1101 "hsp3gr_dish.cpp"
   $711 = (__Z10code_getdii(0)|0); //@line 1102 "hsp3gr_dish.cpp"
   HEAP32[3216>>2] = $711; //@line 1102 "hsp3gr_dish.cpp"
   $712 = HEAP32[3216>>2]|0; //@line 1110 "hsp3gr_dish.cpp"
   $713 = (_GetSysReq($712)|0); //@line 1110 "hsp3gr_dish.cpp"
   HEAP32[3232>>2] = $713; //@line 1110 "hsp3gr_dish.cpp"
   $714 = HEAP32[$p_pval>>2]|0; //@line 1111 "hsp3gr_dish.cpp"
   $715 = $p_aptr; //@line 1111 "hsp3gr_dish.cpp"
   __Z10code_setvaP4PValiiPKv($714,$715,4,3232); //@line 1111 "hsp3gr_dish.cpp"
   break;
  }
  case 66:  {
   $716 = (__Z10code_getdii(0)|0); //@line 1116 "hsp3gr_dish.cpp"
   HEAP32[3216>>2] = $716; //@line 1116 "hsp3gr_dish.cpp"
   $717 = (__Z10code_getdii(0)|0); //@line 1117 "hsp3gr_dish.cpp"
   HEAP32[3232>>2] = $717; //@line 1117 "hsp3gr_dish.cpp"
   $718 = HEAP32[3184>>2]|0; //@line 1118 "hsp3gr_dish.cpp"
   $719 = HEAP32[3216>>2]|0; //@line 1118 "hsp3gr_dish.cpp"
   $720 = HEAP32[3232>>2]|0; //@line 1118 "hsp3gr_dish.cpp"
   __ZN5MMMan6SetVolEii($718,$719,$720); //@line 1118 "hsp3gr_dish.cpp"
   break;
  }
  case 67:  {
   $721 = (__Z10code_getdii(0)|0); //@line 1121 "hsp3gr_dish.cpp"
   HEAP32[3216>>2] = $721; //@line 1121 "hsp3gr_dish.cpp"
   $722 = (__Z10code_getdii(0)|0); //@line 1122 "hsp3gr_dish.cpp"
   HEAP32[3232>>2] = $722; //@line 1122 "hsp3gr_dish.cpp"
   $723 = HEAP32[3184>>2]|0; //@line 1123 "hsp3gr_dish.cpp"
   $724 = HEAP32[3216>>2]|0; //@line 1123 "hsp3gr_dish.cpp"
   $725 = HEAP32[3232>>2]|0; //@line 1123 "hsp3gr_dish.cpp"
   __ZN5MMMan6SetPanEii($723,$724,$725); //@line 1123 "hsp3gr_dish.cpp"
   break;
  }
  case 68:  {
   $726 = (__Z10code_getvaPP4PVal($p_pval17)|0); //@line 1129 "hsp3gr_dish.cpp"
   $p_aptr18 = $726; //@line 1129 "hsp3gr_dish.cpp"
   $727 = (__Z10code_getdii(0)|0); //@line 1130 "hsp3gr_dish.cpp"
   HEAP32[3216>>2] = $727; //@line 1130 "hsp3gr_dish.cpp"
   $728 = (__Z10code_getdii(0)|0); //@line 1131 "hsp3gr_dish.cpp"
   HEAP32[3232>>2] = $728; //@line 1131 "hsp3gr_dish.cpp"
   $729 = HEAP32[3184>>2]|0; //@line 1132 "hsp3gr_dish.cpp"
   $730 = HEAP32[3216>>2]|0; //@line 1132 "hsp3gr_dish.cpp"
   $731 = HEAP32[3232>>2]|0; //@line 1132 "hsp3gr_dish.cpp"
   $732 = (__ZN5MMMan9GetStatusEii($729,$730,$731)|0); //@line 1132 "hsp3gr_dish.cpp"
   HEAP32[3240>>2] = $732; //@line 1132 "hsp3gr_dish.cpp"
   $733 = HEAP32[$p_pval17>>2]|0; //@line 1133 "hsp3gr_dish.cpp"
   $734 = $p_aptr18; //@line 1133 "hsp3gr_dish.cpp"
   __Z10code_setvaP4PValiiPKv($733,$734,4,3240); //@line 1133 "hsp3gr_dish.cpp"
   break;
  }
  case 69:  {
   $735 = (__ZL11code_getiv2PP4PVal($p_pval19)|0); //@line 1141 "hsp3gr_dish.cpp"
   $p_ptr = $735; //@line 1141 "hsp3gr_dish.cpp"
   $736 = HEAP32[3176>>2]|0; //@line 1142 "hsp3gr_dish.cpp"
   $737 = $p_ptr; //@line 1142 "hsp3gr_dish.cpp"
   $738 = (__ZN5Bmscr10listMTouchEPi($736,$737)|0); //@line 1142 "hsp3gr_dish.cpp"
   $p_size = $738; //@line 1142 "hsp3gr_dish.cpp"
   $739 = HEAP32[$p_pval19>>2]|0; //@line 1143 "hsp3gr_dish.cpp"
   $740 = $p_size; //@line 1143 "hsp3gr_dish.cpp"
   __ZL13code_setivlenP4PVali($739,$740); //@line 1143 "hsp3gr_dish.cpp"
   $741 = $p_size; //@line 1144 "hsp3gr_dish.cpp"
   $742 = HEAP32[3152>>2]|0; //@line 1144 "hsp3gr_dish.cpp"
   $743 = (($742) + 784|0); //@line 1144 "hsp3gr_dish.cpp"
   HEAP32[$743>>2] = $741; //@line 1144 "hsp3gr_dish.cpp"
   break;
  }
  case 70:  {
   $744 = (__ZL11code_getiv2PP4PVal($p_pval21)|0); //@line 1152 "hsp3gr_dish.cpp"
   $p_ptr20 = $744; //@line 1152 "hsp3gr_dish.cpp"
   $745 = (__Z10code_getdii(0)|0); //@line 1153 "hsp3gr_dish.cpp"
   HEAP32[3216>>2] = $745; //@line 1153 "hsp3gr_dish.cpp"
   $746 = HEAP32[3176>>2]|0; //@line 1154 "hsp3gr_dish.cpp"
   $747 = HEAP32[3216>>2]|0; //@line 1154 "hsp3gr_dish.cpp"
   $748 = (__ZN5Bmscr9getMTouchEi($746,$747)|0); //@line 1154 "hsp3gr_dish.cpp"
   $mt = $748; //@line 1154 "hsp3gr_dish.cpp"
   $749 = HEAP32[$p_pval21>>2]|0; //@line 1155 "hsp3gr_dish.cpp"
   __ZL13code_setivlenP4PVali($749,4); //@line 1155 "hsp3gr_dish.cpp"
   $750 = $mt; //@line 1156 "hsp3gr_dish.cpp"
   $751 = ($750|0)!=(0|0); //@line 1156 "hsp3gr_dish.cpp"
   if ($751) {
    $752 = $mt; //@line 1157 "hsp3gr_dish.cpp"
    $753 = HEAP32[$752>>2]|0; //@line 1157 "hsp3gr_dish.cpp"
    $754 = $p_ptr20; //@line 1157 "hsp3gr_dish.cpp"
    HEAP32[$754>>2] = $753; //@line 1157 "hsp3gr_dish.cpp"
    $755 = $mt; //@line 1158 "hsp3gr_dish.cpp"
    $756 = (($755) + 4|0); //@line 1158 "hsp3gr_dish.cpp"
    $757 = HEAP32[$756>>2]|0; //@line 1158 "hsp3gr_dish.cpp"
    $758 = $p_ptr20; //@line 1158 "hsp3gr_dish.cpp"
    $759 = (($758) + 4|0); //@line 1158 "hsp3gr_dish.cpp"
    HEAP32[$759>>2] = $757; //@line 1158 "hsp3gr_dish.cpp"
    $760 = $mt; //@line 1159 "hsp3gr_dish.cpp"
    $761 = (($760) + 8|0); //@line 1159 "hsp3gr_dish.cpp"
    $762 = HEAP32[$761>>2]|0; //@line 1159 "hsp3gr_dish.cpp"
    $763 = $p_ptr20; //@line 1159 "hsp3gr_dish.cpp"
    $764 = (($763) + 8|0); //@line 1159 "hsp3gr_dish.cpp"
    HEAP32[$764>>2] = $762; //@line 1159 "hsp3gr_dish.cpp"
    $765 = $mt; //@line 1160 "hsp3gr_dish.cpp"
    $766 = (($765) + 12|0); //@line 1160 "hsp3gr_dish.cpp"
    $767 = HEAP32[$766>>2]|0; //@line 1160 "hsp3gr_dish.cpp"
    $768 = $p_ptr20; //@line 1160 "hsp3gr_dish.cpp"
    $769 = (($768) + 12|0); //@line 1160 "hsp3gr_dish.cpp"
    HEAP32[$769>>2] = $767; //@line 1160 "hsp3gr_dish.cpp"
    $770 = $mt; //@line 1161 "hsp3gr_dish.cpp"
    $771 = HEAP32[$770>>2]|0; //@line 1161 "hsp3gr_dish.cpp"
    $772 = HEAP32[3152>>2]|0; //@line 1161 "hsp3gr_dish.cpp"
    $773 = (($772) + 784|0); //@line 1161 "hsp3gr_dish.cpp"
    HEAP32[$773>>2] = $771; //@line 1161 "hsp3gr_dish.cpp"
   } else {
    $774 = $p_ptr20; //@line 1163 "hsp3gr_dish.cpp"
    HEAP32[$774>>2] = -1; //@line 1163 "hsp3gr_dish.cpp"
    $775 = $p_ptr20; //@line 1164 "hsp3gr_dish.cpp"
    $776 = (($775) + 4|0); //@line 1164 "hsp3gr_dish.cpp"
    HEAP32[$776>>2] = 0; //@line 1164 "hsp3gr_dish.cpp"
    $777 = $p_ptr20; //@line 1165 "hsp3gr_dish.cpp"
    $778 = (($777) + 8|0); //@line 1165 "hsp3gr_dish.cpp"
    HEAP32[$778>>2] = 0; //@line 1165 "hsp3gr_dish.cpp"
    $779 = $p_ptr20; //@line 1166 "hsp3gr_dish.cpp"
    $780 = (($779) + 12|0); //@line 1166 "hsp3gr_dish.cpp"
    HEAP32[$780>>2] = 0; //@line 1166 "hsp3gr_dish.cpp"
    $781 = HEAP32[3152>>2]|0; //@line 1167 "hsp3gr_dish.cpp"
    $782 = (($781) + 784|0); //@line 1167 "hsp3gr_dish.cpp"
    HEAP32[$782>>2] = -1; //@line 1167 "hsp3gr_dish.cpp"
   }
   break;
  }
  case 71:  {
   $783 = (__Z10code_getvaPP4PVal($p_pval22)|0); //@line 1178 "hsp3gr_dish.cpp"
   $p_aptr23 = $783; //@line 1178 "hsp3gr_dish.cpp"
   $784 = (__Z9code_getsv()|0); //@line 1179 "hsp3gr_dish.cpp"
   $ps24 = $784; //@line 1179 "hsp3gr_dish.cpp"
   $p_res = 0; //@line 1180 "hsp3gr_dish.cpp"
   $785 = HEAP32[3144>>2]|0; //@line 1181 "hsp3gr_dish.cpp"
   $786 = (__ZN6HspWnd10getDevInfoEv($785)|0); //@line 1181 "hsp3gr_dish.cpp"
   $787 = (($786) + 20|0); //@line 1181 "hsp3gr_dish.cpp"
   $788 = HEAP32[$787>>2]|0; //@line 1181 "hsp3gr_dish.cpp"
   $789 = $ps24; //@line 1181 "hsp3gr_dish.cpp"
   $790 = (FUNCTION_TABLE_ii[$788 & 255]($789)|0); //@line 1181 "hsp3gr_dish.cpp"
   $s_res = $790; //@line 1181 "hsp3gr_dish.cpp"
   $791 = $s_res; //@line 1182 "hsp3gr_dish.cpp"
   $792 = ($791|0)==(0|0); //@line 1182 "hsp3gr_dish.cpp"
   if ($792) {
    $p_res = -1; //@line 1183 "hsp3gr_dish.cpp"
   } else {
    $793 = HEAP32[$p_pval22>>2]|0; //@line 1185 "hsp3gr_dish.cpp"
    $794 = $p_aptr23; //@line 1185 "hsp3gr_dish.cpp"
    $795 = $s_res; //@line 1185 "hsp3gr_dish.cpp"
    __Z10code_setvaP4PValiiPKv($793,$794,2,$795); //@line 1185 "hsp3gr_dish.cpp"
   }
   $796 = $p_res; //@line 1187 "hsp3gr_dish.cpp"
   $797 = HEAP32[3152>>2]|0; //@line 1187 "hsp3gr_dish.cpp"
   $798 = (($797) + 784|0); //@line 1187 "hsp3gr_dish.cpp"
   HEAP32[$798>>2] = $796; //@line 1187 "hsp3gr_dish.cpp"
   break;
  }
  case 72:  {
   $799 = (__ZL11code_getiv2PP4PVal($p_pval25)|0); //@line 1197 "hsp3gr_dish.cpp"
   $p_ptr26 = $799; //@line 1197 "hsp3gr_dish.cpp"
   $800 = (__Z9code_getsv()|0); //@line 1198 "hsp3gr_dish.cpp"
   $ps27 = $800; //@line 1198 "hsp3gr_dish.cpp"
   $801 = HEAP32[3144>>2]|0; //@line 1199 "hsp3gr_dish.cpp"
   $802 = (__ZN6HspWnd10getDevInfoEv($801)|0); //@line 1199 "hsp3gr_dish.cpp"
   $803 = (($802) + 16|0); //@line 1199 "hsp3gr_dish.cpp"
   $804 = HEAP32[$803>>2]|0; //@line 1199 "hsp3gr_dish.cpp"
   $805 = $ps27; //@line 1199 "hsp3gr_dish.cpp"
   $806 = (FUNCTION_TABLE_iii[$804 & 255]($805,$p_size28)|0); //@line 1199 "hsp3gr_dish.cpp"
   $i_res = $806; //@line 1199 "hsp3gr_dish.cpp"
   $807 = $i_res; //@line 1200 "hsp3gr_dish.cpp"
   $808 = ($807|0)==(0|0); //@line 1200 "hsp3gr_dish.cpp"
   if ($808) {
    HEAP32[$p_size28>>2] = -1; //@line 1201 "hsp3gr_dish.cpp"
   } else {
    $809 = HEAP32[$p_pval25>>2]|0; //@line 1203 "hsp3gr_dish.cpp"
    $810 = HEAP32[$p_size28>>2]|0; //@line 1203 "hsp3gr_dish.cpp"
    __ZL13code_setivlenP4PVali($809,$810); //@line 1203 "hsp3gr_dish.cpp"
    $811 = $p_ptr26; //@line 1204 "hsp3gr_dish.cpp"
    $812 = $i_res; //@line 1204 "hsp3gr_dish.cpp"
    $813 = HEAP32[$p_size28>>2]|0; //@line 1204 "hsp3gr_dish.cpp"
    $814 = $813<<2; //@line 1204 "hsp3gr_dish.cpp"
    _memcpy(($811|0),($812|0),($814|0))|0; //@line 1204 "hsp3gr_dish.cpp"
   }
   $815 = HEAP32[$p_size28>>2]|0; //@line 1206 "hsp3gr_dish.cpp"
   $816 = HEAP32[3152>>2]|0; //@line 1206 "hsp3gr_dish.cpp"
   $817 = (($816) + 784|0); //@line 1206 "hsp3gr_dish.cpp"
   HEAP32[$817>>2] = $815; //@line 1206 "hsp3gr_dish.cpp"
   break;
  }
  case 73:  {
   $818 = (__Z9code_getsv()|0); //@line 1214 "hsp3gr_dish.cpp"
   (_strncpy(($prmname|0),($818|0),255)|0); //@line 1214 "hsp3gr_dish.cpp"
   $819 = (__Z9code_getsv()|0); //@line 1215 "hsp3gr_dish.cpp"
   $ps29 = $819; //@line 1215 "hsp3gr_dish.cpp"
   $820 = HEAP32[3144>>2]|0; //@line 1216 "hsp3gr_dish.cpp"
   $821 = (__ZN6HspWnd10getDevInfoEv($820)|0); //@line 1216 "hsp3gr_dish.cpp"
   $822 = (($821) + 8|0); //@line 1216 "hsp3gr_dish.cpp"
   $823 = HEAP32[$822>>2]|0; //@line 1216 "hsp3gr_dish.cpp"
   $824 = $ps29; //@line 1216 "hsp3gr_dish.cpp"
   $825 = (FUNCTION_TABLE_iii[$823 & 255]($prmname,$824)|0); //@line 1216 "hsp3gr_dish.cpp"
   $p_res30 = $825; //@line 1216 "hsp3gr_dish.cpp"
   $826 = $p_res30; //@line 1217 "hsp3gr_dish.cpp"
   $827 = HEAP32[3152>>2]|0; //@line 1217 "hsp3gr_dish.cpp"
   $828 = (($827) + 784|0); //@line 1217 "hsp3gr_dish.cpp"
   HEAP32[$828>>2] = $826; //@line 1217 "hsp3gr_dish.cpp"
   break;
  }
  case 74:  {
   $829 = (__Z9code_getsv()|0); //@line 1224 "hsp3gr_dish.cpp"
   $830 = (__Z12code_stmpstrPc($829)|0); //@line 1224 "hsp3gr_dish.cpp"
   $cname = $830; //@line 1224 "hsp3gr_dish.cpp"
   $831 = (__Z10code_getdii(0)|0); //@line 1225 "hsp3gr_dish.cpp"
   HEAP32[3216>>2] = $831; //@line 1225 "hsp3gr_dish.cpp"
   $832 = (__Z10code_getdii(0)|0); //@line 1226 "hsp3gr_dish.cpp"
   HEAP32[3232>>2] = $832; //@line 1226 "hsp3gr_dish.cpp"
   $833 = (__Z10code_getdii(0)|0); //@line 1227 "hsp3gr_dish.cpp"
   HEAP32[3240>>2] = $833; //@line 1227 "hsp3gr_dish.cpp"
   $834 = HEAP32[3144>>2]|0; //@line 1228 "hsp3gr_dish.cpp"
   $835 = (__ZN6HspWnd10getDevInfoEv($834)|0); //@line 1228 "hsp3gr_dish.cpp"
   $836 = (($835) + 12|0); //@line 1228 "hsp3gr_dish.cpp"
   $837 = HEAP32[$836>>2]|0; //@line 1228 "hsp3gr_dish.cpp"
   $838 = $cname; //@line 1228 "hsp3gr_dish.cpp"
   $839 = HEAP32[3216>>2]|0; //@line 1228 "hsp3gr_dish.cpp"
   $840 = HEAP32[3232>>2]|0; //@line 1228 "hsp3gr_dish.cpp"
   $841 = HEAP32[3240>>2]|0; //@line 1228 "hsp3gr_dish.cpp"
   $842 = (FUNCTION_TABLE_iiiii[$837 & 255]($838,$839,$840,$841)|0); //@line 1228 "hsp3gr_dish.cpp"
   $p_res31 = $842; //@line 1228 "hsp3gr_dish.cpp"
   $843 = $p_res31; //@line 1229 "hsp3gr_dish.cpp"
   $844 = HEAP32[3152>>2]|0; //@line 1229 "hsp3gr_dish.cpp"
   $845 = (($844) + 784|0); //@line 1229 "hsp3gr_dish.cpp"
   HEAP32[$845>>2] = $843; //@line 1229 "hsp3gr_dish.cpp"
   break;
  }
  default: {
   $846 = (___cxa_allocate_exception(4)|0); //@line 3304 "hsp3gr_dish.cpp"
   HEAP32[$846>>2] = 21; //@line 3304 "hsp3gr_dish.cpp"
   ___cxa_throw(($846|0),(624|0),(0|0)); //@line 3304 "hsp3gr_dish.cpp"
   // unreachable; //@line 3304 "hsp3gr_dish.cpp"
  }
  }
 } while(0);
 $0 = 0; //@line 3306 "hsp3gr_dish.cpp"
 $847 = $0; //@line 3306 "hsp3gr_dish.cpp"
 STACKTOP = sp;return ($847|0); //@line 3306 "hsp3gr_dish.cpp"
}
function __ZL15termfunc_extcmdi($option) {
 $option = $option|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $option;
 $3 = HEAP32[3184>>2]|0; //@line 3531 "hsp3gr_dish.cpp"
 $4 = ($3|0)==(0|0); //@line 3531 "hsp3gr_dish.cpp"
 do {
  if (!($4)) {
   __THREW__ = 0;
   invoke_vi(80,($3|0)); //@line 3531 "hsp3gr_dish.cpp"
   $5 = __THREW__; __THREW__ = 0;
   $6 = $5&1;
   if (!($6)) {
    __ZdlPv($3); //@line 3531 "hsp3gr_dish.cpp"
    break;
   }
   $11 = ___cxa_find_matching_catch(-1,-1)|0;
   $12 = tempRet0;
   $1 = $11; //@line 3531 "hsp3gr_dish.cpp"
   $2 = $12; //@line 3531 "hsp3gr_dish.cpp"
   __ZdlPv($3); //@line 3531 "hsp3gr_dish.cpp"
   $15 = $1; //@line 3531 "hsp3gr_dish.cpp"
   $16 = $2; //@line 3531 "hsp3gr_dish.cpp"
   ___resumeException($15|0);
   // unreachable;
  }
 } while(0);
 $7 = HEAP32[3144>>2]|0; //@line 3536 "hsp3gr_dish.cpp"
 $8 = ($7|0)==(0|0); //@line 3536 "hsp3gr_dish.cpp"
 if ($8) {
  STACKTOP = sp;return 0; //@line 3537 "hsp3gr_dish.cpp"
 }
 __THREW__ = 0;
 invoke_vi(81,($7|0)); //@line 3536 "hsp3gr_dish.cpp"
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $13 = ___cxa_find_matching_catch(-1,-1)|0;
  $14 = tempRet0;
  $1 = $13; //@line 3536 "hsp3gr_dish.cpp"
  $2 = $14; //@line 3536 "hsp3gr_dish.cpp"
  __ZdlPv($7); //@line 3536 "hsp3gr_dish.cpp"
  $15 = $1; //@line 3531 "hsp3gr_dish.cpp"
  $16 = $2; //@line 3531 "hsp3gr_dish.cpp"
  ___resumeException($15|0);
  // unreachable;
 } else {
  __ZdlPv($7); //@line 3536 "hsp3gr_dish.cpp"
  STACKTOP = sp;return 0; //@line 3537 "hsp3gr_dish.cpp"
 }
 return 0|0;
}
function __Z20hsp3typeinit_extfuncP12HSP3TYPEINFO($info) {
 $info = $info|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $info;
 $1 = $0; //@line 3579 "hsp3gr_dish.cpp"
 $2 = (($1) + 16|0); //@line 3579 "hsp3gr_dish.cpp"
 HEAP32[$2>>2] = 82; //@line 3579 "hsp3gr_dish.cpp"
 STACKTOP = sp;return; //@line 3580 "hsp3gr_dish.cpp"
}
function __ZL14reffunc_sysvarPii139($type_res,$arg) {
 $type_res = $type_res|0;
 $arg = $arg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $type_res;
 $2 = $arg;
 $3 = $2; //@line 3483 "hsp3gr_dish.cpp"
 $4 = $3 & 256; //@line 3483 "hsp3gr_dish.cpp"
 $5 = ($4|0)!=(0); //@line 3483 "hsp3gr_dish.cpp"
 if ($5) {
  $6 = $1; //@line 3483 "hsp3gr_dish.cpp"
  $7 = $2; //@line 3483 "hsp3gr_dish.cpp"
  $8 = (__ZL16reffunc_functionPii($6,$7)|0); //@line 3483 "hsp3gr_dish.cpp"
  $0 = $8; //@line 3483 "hsp3gr_dish.cpp"
  $30 = $0; //@line 3522 "hsp3gr_dish.cpp"
  STACKTOP = sp;return ($30|0); //@line 3522 "hsp3gr_dish.cpp"
 }
 $9 = $1; //@line 3487 "hsp3gr_dish.cpp"
 HEAP32[$9>>2] = 4; //@line 3487 "hsp3gr_dish.cpp"
 $ptr = 3200; //@line 3488 "hsp3gr_dish.cpp"
 $10 = $2; //@line 3490 "hsp3gr_dish.cpp"
 switch ($10|0) {
 case 0:  {
  $11 = HEAP32[3176>>2]|0; //@line 3494 "hsp3gr_dish.cpp"
  $12 = (($11) + 176|0); //@line 3494 "hsp3gr_dish.cpp"
  $13 = HEAP16[$12>>1]|0; //@line 3494 "hsp3gr_dish.cpp"
  $14 = $13 << 16 >> 16; //@line 3494 "hsp3gr_dish.cpp"
  HEAP32[3200>>2] = $14; //@line 3494 "hsp3gr_dish.cpp"
  break;
 }
 case 1:  {
  $15 = HEAP32[3176>>2]|0; //@line 3499 "hsp3gr_dish.cpp"
  $16 = (($15) + 176|0); //@line 3499 "hsp3gr_dish.cpp"
  $17 = (($16) + 2|0); //@line 3499 "hsp3gr_dish.cpp"
  $18 = HEAP16[$17>>1]|0; //@line 3499 "hsp3gr_dish.cpp"
  $19 = $18 << 16 >> 16; //@line 3499 "hsp3gr_dish.cpp"
  HEAP32[3200>>2] = $19; //@line 3499 "hsp3gr_dish.cpp"
  break;
 }
 case 2:  {
  $20 = HEAP32[3176>>2]|0; //@line 3502 "hsp3gr_dish.cpp"
  $21 = (($20) + 176|0); //@line 3502 "hsp3gr_dish.cpp"
  $22 = (($21) + 6|0); //@line 3502 "hsp3gr_dish.cpp"
  $23 = HEAP16[$22>>1]|0; //@line 3502 "hsp3gr_dish.cpp"
  $24 = $23 << 16 >> 16; //@line 3502 "hsp3gr_dish.cpp"
  HEAP32[3200>>2] = $24; //@line 3502 "hsp3gr_dish.cpp"
  $25 = HEAP32[3176>>2]|0; //@line 3503 "hsp3gr_dish.cpp"
  $26 = (($25) + 176|0); //@line 3503 "hsp3gr_dish.cpp"
  $27 = (($26) + 6|0); //@line 3503 "hsp3gr_dish.cpp"
  HEAP16[$27>>1] = 0; //@line 3503 "hsp3gr_dish.cpp"
  break;
 }
 case 3:  {
  HEAP32[3200>>2] = 0; //@line 3507 "hsp3gr_dish.cpp"
  break;
 }
 case 4:  {
  HEAP32[3200>>2] = 0; //@line 3511 "hsp3gr_dish.cpp"
  break;
 }
 case 5:  {
  HEAP32[3200>>2] = 0; //@line 3515 "hsp3gr_dish.cpp"
  break;
 }
 default: {
  $28 = (___cxa_allocate_exception(4)|0); //@line 3519 "hsp3gr_dish.cpp"
  HEAP32[$28>>2] = 21; //@line 3519 "hsp3gr_dish.cpp"
  ___cxa_throw(($28|0),(624|0),(0|0)); //@line 3519 "hsp3gr_dish.cpp"
  // unreachable; //@line 3519 "hsp3gr_dish.cpp"
 }
 }
 $29 = $ptr; //@line 3521 "hsp3gr_dish.cpp"
 $0 = $29; //@line 3521 "hsp3gr_dish.cpp"
 $30 = $0; //@line 3522 "hsp3gr_dish.cpp"
 STACKTOP = sp;return ($30|0); //@line 3522 "hsp3gr_dish.cpp"
}
function __Z21hsp3extcmd_getdevinfov() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[3144>>2]|0; //@line 3584 "hsp3gr_dish.cpp"
 $1 = (__ZN6HspWnd10getDevInfoEv($0)|0); //@line 3584 "hsp3gr_dish.cpp"
 STACKTOP = sp;return ($1|0); //@line 3584 "hsp3gr_dish.cpp"
}
function __ZN6HspWnd10getDevInfoEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 44|0); //@line 323 "./hspwnd_dish.h"
 STACKTOP = sp;return ($2|0); //@line 323 "./hspwnd_dish.h"
}
function __ZL16reffunc_functionPii($type_res,$arg) {
 $type_res = $type_res|0;
 $arg = $arg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $i = 0, $ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $type_res;
 $1 = $arg;
 $2 = $0; //@line 3427 "hsp3gr_dish.cpp"
 HEAP32[$2>>2] = 4; //@line 3427 "hsp3gr_dish.cpp"
 $ptr = 3200; //@line 3428 "hsp3gr_dish.cpp"
 $3 = HEAP32[3160>>2]|0; //@line 3432 "hsp3gr_dish.cpp"
 $4 = HEAP32[$3>>2]|0; //@line 3432 "hsp3gr_dish.cpp"
 $5 = ($4|0)!=(0); //@line 3432 "hsp3gr_dish.cpp"
 if ($5) {
  $6 = (___cxa_allocate_exception(4)|0); //@line 3432 "hsp3gr_dish.cpp"
  HEAP32[$6>>2] = 32; //@line 3432 "hsp3gr_dish.cpp"
  ___cxa_throw(($6|0),(624|0),(0|0)); //@line 3432 "hsp3gr_dish.cpp"
  // unreachable; //@line 3432 "hsp3gr_dish.cpp"
 }
 $7 = HEAP32[3168>>2]|0; //@line 3433 "hsp3gr_dish.cpp"
 $8 = HEAP32[$7>>2]|0; //@line 3433 "hsp3gr_dish.cpp"
 $9 = ($8|0)!=(40); //@line 3433 "hsp3gr_dish.cpp"
 if ($9) {
  $10 = (___cxa_allocate_exception(4)|0); //@line 3433 "hsp3gr_dish.cpp"
  HEAP32[$10>>2] = 32; //@line 3433 "hsp3gr_dish.cpp"
  ___cxa_throw(($10|0),(624|0),(0|0)); //@line 3433 "hsp3gr_dish.cpp"
  // unreachable; //@line 3433 "hsp3gr_dish.cpp"
 }
 __Z9code_nextv(); //@line 3434 "hsp3gr_dish.cpp"
 $11 = $1; //@line 3436 "hsp3gr_dish.cpp"
 $12 = $11 & 255; //@line 3436 "hsp3gr_dish.cpp"
 if ((($12|0) == 3)) {
  $25 = (__Z9code_getiv()|0); //@line 3458 "hsp3gr_dish.cpp"
  HEAP32[3216>>2] = $25; //@line 3458 "hsp3gr_dish.cpp"
  $26 = HEAP32[3216>>2]|0; //@line 3459 "hsp3gr_dish.cpp"
  $27 = (__ZL7sysinfoi($26)|0); //@line 3459 "hsp3gr_dish.cpp"
  $28 = $0; //@line 3459 "hsp3gr_dish.cpp"
  HEAP32[$28>>2] = $27; //@line 3459 "hsp3gr_dish.cpp"
  $29 = HEAP32[3152>>2]|0; //@line 3460 "hsp3gr_dish.cpp"
  $30 = (($29) + 824|0); //@line 3460 "hsp3gr_dish.cpp"
  $31 = HEAP32[$30>>2]|0; //@line 3460 "hsp3gr_dish.cpp"
  $ptr = $31; //@line 3460 "hsp3gr_dish.cpp"
 } else if ((($12|0) == 2)) {
  $21 = (__Z9code_getiv()|0); //@line 3452 "hsp3gr_dish.cpp"
  HEAP32[3216>>2] = $21; //@line 3452 "hsp3gr_dish.cpp"
  $22 = HEAP32[3216>>2]|0; //@line 3453 "hsp3gr_dish.cpp"
  $23 = (__ZL6getdiri($22)|0); //@line 3453 "hsp3gr_dish.cpp"
  $ptr = $23; //@line 3453 "hsp3gr_dish.cpp"
  $24 = $0; //@line 3454 "hsp3gr_dish.cpp"
  HEAP32[$24>>2] = 2; //@line 3454 "hsp3gr_dish.cpp"
 } else if ((($12|0) == 0)) {
  $13 = (__Z9code_getiv()|0); //@line 3440 "hsp3gr_dish.cpp"
  $i = $13; //@line 3440 "hsp3gr_dish.cpp"
  $14 = $i; //@line 3441 "hsp3gr_dish.cpp"
  $15 = ($14|0)<(256); //@line 3441 "hsp3gr_dish.cpp"
  if ($15) {
   $16 = $i; //@line 3442 "hsp3gr_dish.cpp"
   $17 = (__ZL9get_ginfoi($16)|0); //@line 3442 "hsp3gr_dish.cpp"
   HEAP32[3200>>2] = $17; //@line 3442 "hsp3gr_dish.cpp"
  } else {
   $18 = $i; //@line 3444 "hsp3gr_dish.cpp"
   $19 = (+_hgio_getinfo($18)); //@line 3444 "hsp3gr_dish.cpp"
   HEAPF64[3208>>3] = $19; //@line 3444 "hsp3gr_dish.cpp"
   $ptr = 3208; //@line 3445 "hsp3gr_dish.cpp"
   $20 = $0; //@line 3446 "hsp3gr_dish.cpp"
   HEAP32[$20>>2] = 3; //@line 3446 "hsp3gr_dish.cpp"
  }
 } else {
  $32 = (___cxa_allocate_exception(4)|0); //@line 3464 "hsp3gr_dish.cpp"
  HEAP32[$32>>2] = 21; //@line 3464 "hsp3gr_dish.cpp"
  ___cxa_throw(($32|0),(624|0),(0|0)); //@line 3464 "hsp3gr_dish.cpp"
  // unreachable; //@line 3464 "hsp3gr_dish.cpp"
 }
 $33 = HEAP32[3160>>2]|0; //@line 3469 "hsp3gr_dish.cpp"
 $34 = HEAP32[$33>>2]|0; //@line 3469 "hsp3gr_dish.cpp"
 $35 = ($34|0)!=(0); //@line 3469 "hsp3gr_dish.cpp"
 if ($35) {
  $36 = (___cxa_allocate_exception(4)|0); //@line 3469 "hsp3gr_dish.cpp"
  HEAP32[$36>>2] = 32; //@line 3469 "hsp3gr_dish.cpp"
  ___cxa_throw(($36|0),(624|0),(0|0)); //@line 3469 "hsp3gr_dish.cpp"
  // unreachable; //@line 3469 "hsp3gr_dish.cpp"
 }
 $37 = HEAP32[3168>>2]|0; //@line 3470 "hsp3gr_dish.cpp"
 $38 = HEAP32[$37>>2]|0; //@line 3470 "hsp3gr_dish.cpp"
 $39 = ($38|0)!=(41); //@line 3470 "hsp3gr_dish.cpp"
 if ($39) {
  $40 = (___cxa_allocate_exception(4)|0); //@line 3470 "hsp3gr_dish.cpp"
  HEAP32[$40>>2] = 32; //@line 3470 "hsp3gr_dish.cpp"
  ___cxa_throw(($40|0),(624|0),(0|0)); //@line 3470 "hsp3gr_dish.cpp"
  // unreachable; //@line 3470 "hsp3gr_dish.cpp"
 } else {
  __Z9code_nextv(); //@line 3471 "hsp3gr_dish.cpp"
  $41 = $ptr; //@line 3473 "hsp3gr_dish.cpp"
  STACKTOP = sp;return ($41|0); //@line 3473 "hsp3gr_dish.cpp"
 }
 return 0|0;
}
function __ZL9get_ginfoi($arg) {
 $arg = $arg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $arg;
 $2 = $1; //@line 3319 "hsp3gr_dish.cpp"
 do {
  switch ($2|0) {
  case 31: case 30: case 29: case 28:  {
   $0 = 0; //@line 3408 "hsp3gr_dish.cpp"
   break;
  }
  case 0:  {
   $0 = 0; //@line 3323 "hsp3gr_dish.cpp"
   break;
  }
  case 25:  {
   $42 = HEAP32[3144>>2]|0; //@line 3403 "hsp3gr_dish.cpp"
   $43 = (__ZN6HspWnd16GetEmptyBufferIdEv($42)|0); //@line 3403 "hsp3gr_dish.cpp"
   $0 = $43; //@line 3403 "hsp3gr_dish.cpp"
   break;
  }
  case 1:  {
   $0 = 0; //@line 3327 "hsp3gr_dish.cpp"
   break;
  }
  case 2:  {
   $3 = HEAP32[3144>>2]|0; //@line 3329 "hsp3gr_dish.cpp"
   $4 = (__ZN6HspWnd9GetActiveEv($3)|0); //@line 3329 "hsp3gr_dish.cpp"
   $0 = $4; //@line 3329 "hsp3gr_dish.cpp"
   break;
  }
  case 3:  {
   $5 = HEAP32[3192>>2]|0; //@line 3331 "hsp3gr_dish.cpp"
   $0 = $5; //@line 3331 "hsp3gr_dish.cpp"
   break;
  }
  case 9: case 8:  {
   $0 = 0; //@line 3345 "hsp3gr_dish.cpp"
   break;
  }
  case 24:  {
   $0 = 0; //@line 3401 "hsp3gr_dish.cpp"
   break;
  }
  case 11: case 10:  {
   $0 = 0; //@line 3350 "hsp3gr_dish.cpp"
   break;
  }
  case 7: case 6: case 5: case 4:  {
   $0 = 0; //@line 3340 "hsp3gr_dish.cpp"
   break;
  }
  case 26: case 12:  {
   $6 = HEAP32[3176>>2]|0; //@line 3357 "hsp3gr_dish.cpp"
   $7 = (($6) + 4|0); //@line 3357 "hsp3gr_dish.cpp"
   $8 = HEAP32[$7>>2]|0; //@line 3357 "hsp3gr_dish.cpp"
   $0 = $8; //@line 3357 "hsp3gr_dish.cpp"
   break;
  }
  case 27: case 13:  {
   $9 = HEAP32[3176>>2]|0; //@line 3366 "hsp3gr_dish.cpp"
   $10 = (($9) + 8|0); //@line 3366 "hsp3gr_dish.cpp"
   $11 = HEAP32[$10>>2]|0; //@line 3366 "hsp3gr_dish.cpp"
   $0 = $11; //@line 3366 "hsp3gr_dish.cpp"
   break;
  }
  case 14:  {
   $12 = HEAP32[3176>>2]|0; //@line 3370 "hsp3gr_dish.cpp"
   $13 = (($12) + 156|0); //@line 3370 "hsp3gr_dish.cpp"
   $14 = HEAP16[$13>>1]|0; //@line 3370 "hsp3gr_dish.cpp"
   $15 = $14 << 16 >> 16; //@line 3370 "hsp3gr_dish.cpp"
   $0 = $15; //@line 3370 "hsp3gr_dish.cpp"
   break;
  }
  case 17:  {
   $25 = HEAP32[3176>>2]|0; //@line 3378 "hsp3gr_dish.cpp"
   $26 = (($25) + 104|0); //@line 3378 "hsp3gr_dish.cpp"
   $27 = HEAP32[$26>>2]|0; //@line 3378 "hsp3gr_dish.cpp"
   $28 = $27 >> 8; //@line 3378 "hsp3gr_dish.cpp"
   $29 = $28 & 255; //@line 3378 "hsp3gr_dish.cpp"
   $0 = $29; //@line 3378 "hsp3gr_dish.cpp"
   break;
  }
  case 16:  {
   $20 = HEAP32[3176>>2]|0; //@line 3375 "hsp3gr_dish.cpp"
   $21 = (($20) + 104|0); //@line 3375 "hsp3gr_dish.cpp"
   $22 = HEAP32[$21>>2]|0; //@line 3375 "hsp3gr_dish.cpp"
   $23 = $22 >> 16; //@line 3375 "hsp3gr_dish.cpp"
   $24 = $23 & 255; //@line 3375 "hsp3gr_dish.cpp"
   $0 = $24; //@line 3375 "hsp3gr_dish.cpp"
   break;
  }
  case 15:  {
   $16 = HEAP32[3176>>2]|0; //@line 3372 "hsp3gr_dish.cpp"
   $17 = (($16) + 158|0); //@line 3372 "hsp3gr_dish.cpp"
   $18 = HEAP16[$17>>1]|0; //@line 3372 "hsp3gr_dish.cpp"
   $19 = $18 << 16 >> 16; //@line 3372 "hsp3gr_dish.cpp"
   $0 = $19; //@line 3372 "hsp3gr_dish.cpp"
   break;
  }
  case 18:  {
   $30 = HEAP32[3176>>2]|0; //@line 3381 "hsp3gr_dish.cpp"
   $31 = (($30) + 104|0); //@line 3381 "hsp3gr_dish.cpp"
   $32 = HEAP32[$31>>2]|0; //@line 3381 "hsp3gr_dish.cpp"
   $33 = $32 & 255; //@line 3381 "hsp3gr_dish.cpp"
   $0 = $33; //@line 3381 "hsp3gr_dish.cpp"
   break;
  }
  case 19:  {
   $0 = 0; //@line 3388 "hsp3gr_dish.cpp"
   break;
  }
  case 22:  {
   $36 = HEAP32[3176>>2]|0; //@line 3396 "hsp3gr_dish.cpp"
   $37 = (($36) + 68|0); //@line 3396 "hsp3gr_dish.cpp"
   $38 = HEAP32[$37>>2]|0; //@line 3396 "hsp3gr_dish.cpp"
   $0 = $38; //@line 3396 "hsp3gr_dish.cpp"
   break;
  }
  case 21:  {
   $35 = (_hgio_getHeight()|0); //@line 3393 "hsp3gr_dish.cpp"
   $0 = $35; //@line 3393 "hsp3gr_dish.cpp"
   break;
  }
  case 20:  {
   $34 = (_hgio_getWidth()|0); //@line 3390 "hsp3gr_dish.cpp"
   $0 = $34; //@line 3390 "hsp3gr_dish.cpp"
   break;
  }
  case 23:  {
   $39 = HEAP32[3176>>2]|0; //@line 3398 "hsp3gr_dish.cpp"
   $40 = (($39) + 72|0); //@line 3398 "hsp3gr_dish.cpp"
   $41 = HEAP32[$40>>2]|0; //@line 3398 "hsp3gr_dish.cpp"
   $0 = $41; //@line 3398 "hsp3gr_dish.cpp"
   break;
  }
  default: {
   $44 = (___cxa_allocate_exception(4)|0); //@line 3411 "hsp3gr_dish.cpp"
   HEAP32[$44>>2] = 21; //@line 3411 "hsp3gr_dish.cpp"
   ___cxa_throw(($44|0),(624|0),(0|0)); //@line 3411 "hsp3gr_dish.cpp"
   // unreachable; //@line 3411 "hsp3gr_dish.cpp"
  }
  }
 } while(0);
 $45 = $0; //@line 3414 "hsp3gr_dish.cpp"
 STACKTOP = sp;return ($45|0); //@line 3414 "hsp3gr_dish.cpp"
}
function __ZL6getdiri($id) {
 $id = $id|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $id;
 $1 = HEAP32[3152>>2]|0; //@line 153 "hsp3gr_dish.cpp"
 $2 = (($1) + 824|0); //@line 153 "hsp3gr_dish.cpp"
 $3 = HEAP32[$2>>2]|0; //@line 153 "hsp3gr_dish.cpp"
 $p = $3; //@line 153 "hsp3gr_dish.cpp"
 $4 = $p; //@line 155 "hsp3gr_dish.cpp"
 HEAP8[$4>>0] = 0; //@line 155 "hsp3gr_dish.cpp"
 $5 = $0; //@line 157 "hsp3gr_dish.cpp"
 switch ($5|0) {
 case 0:  {
  break;
 }
 case 1:  {
  break;
 }
 case 2:  {
  break;
 }
 case 3:  {
  break;
 }
 case 5:  {
  break;
 }
 case 4:  {
  break;
 }
 default: {
  $6 = (___cxa_allocate_exception(4)|0); //@line 208 "hsp3gr_dish.cpp"
  HEAP32[$6>>2] = 3; //@line 208 "hsp3gr_dish.cpp"
  ___cxa_throw(($6|0),(624|0),(0|0)); //@line 208 "hsp3gr_dish.cpp"
  // unreachable; //@line 208 "hsp3gr_dish.cpp"
 }
 }
 $7 = $p; //@line 216 "hsp3gr_dish.cpp"
 STACKTOP = sp;return ($7|0); //@line 216 "hsp3gr_dish.cpp"
}
function __ZL7sysinfoi($p2) {
 $p2 = $p2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fl = 0, $p1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $fl = sp + 4|0;
 $1 = $p2;
 $2 = $1; //@line 227 "hsp3gr_dish.cpp"
 $3 = HEAP32[3152>>2]|0; //@line 227 "hsp3gr_dish.cpp"
 $4 = (($3) + 824|0); //@line 227 "hsp3gr_dish.cpp"
 $5 = HEAP32[$4>>2]|0; //@line 227 "hsp3gr_dish.cpp"
 $6 = (_hgio_sysinfo($2,$fl,$5)|0); //@line 227 "hsp3gr_dish.cpp"
 $p1 = $6; //@line 227 "hsp3gr_dish.cpp"
 $7 = $p1; //@line 228 "hsp3gr_dish.cpp"
 $8 = ($7|0)==(0|0); //@line 228 "hsp3gr_dish.cpp"
 if ($8) {
  $9 = HEAP32[3152>>2]|0; //@line 229 "hsp3gr_dish.cpp"
  $10 = (($9) + 824|0); //@line 229 "hsp3gr_dish.cpp"
  $11 = HEAP32[$10>>2]|0; //@line 229 "hsp3gr_dish.cpp"
  $p1 = $11; //@line 229 "hsp3gr_dish.cpp"
  $12 = $p1; //@line 230 "hsp3gr_dish.cpp"
  HEAP8[$12>>0] = 0; //@line 230 "hsp3gr_dish.cpp"
  $0 = 4; //@line 231 "hsp3gr_dish.cpp"
  $14 = $0; //@line 234 "hsp3gr_dish.cpp"
  STACKTOP = sp;return ($14|0); //@line 234 "hsp3gr_dish.cpp"
 } else {
  $13 = HEAP32[$fl>>2]|0; //@line 233 "hsp3gr_dish.cpp"
  $0 = $13; //@line 233 "hsp3gr_dish.cpp"
  $14 = $0; //@line 234 "hsp3gr_dish.cpp"
  STACKTOP = sp;return ($14|0); //@line 234 "hsp3gr_dish.cpp"
 }
 return 0|0;
}
function __ZL8ExecFilePcS_i($stmp,$ps,$mode) {
 $stmp = $stmp|0;
 $ps = $ps|0;
 $mode = $mode|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $stmp;
 $1 = $ps;
 $2 = $mode;
 $3 = $0; //@line 141 "hsp3gr_dish.cpp"
 $4 = $1; //@line 141 "hsp3gr_dish.cpp"
 $5 = $2; //@line 141 "hsp3gr_dish.cpp"
 (_hgio_exec($3,$4,$5)|0); //@line 141 "hsp3gr_dish.cpp"
 STACKTOP = sp;return; //@line 142 "hsp3gr_dish.cpp"
}
function __ZL14cmdfunc_dialogv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $ps = 0, $ptr = 0, $stmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16400|0;
 $stmp = sp + 8|0;
 $0 = (__Z11code_getdsiPKc(3224)|0); //@line 478 "hsp3gr_dish.cpp"
 $ptr = $0; //@line 478 "hsp3gr_dish.cpp"
 $1 = $ptr; //@line 479 "hsp3gr_dish.cpp"
 (_strncpy(($stmp|0),($1|0),16383)|0); //@line 479 "hsp3gr_dish.cpp"
 $2 = (__Z10code_getdii(0)|0); //@line 480 "hsp3gr_dish.cpp"
 HEAP32[3216>>2] = $2; //@line 480 "hsp3gr_dish.cpp"
 $3 = (__Z10code_getdsPKc(3224)|0); //@line 481 "hsp3gr_dish.cpp"
 $ps = $3; //@line 481 "hsp3gr_dish.cpp"
 $4 = HEAP32[3216>>2]|0; //@line 482 "hsp3gr_dish.cpp"
 $5 = $ps; //@line 482 "hsp3gr_dish.cpp"
 $6 = (_hgio_dialog($4,$stmp,$5)|0); //@line 482 "hsp3gr_dish.cpp"
 $7 = HEAP32[3152>>2]|0; //@line 482 "hsp3gr_dish.cpp"
 $8 = (($7) + 784|0); //@line 482 "hsp3gr_dish.cpp"
 HEAP32[$8>>2] = $6; //@line 482 "hsp3gr_dish.cpp"
 STACKTOP = sp;return; //@line 483 "hsp3gr_dish.cpp"
}
function __ZL10code_getivv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $pval = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = (__Z12code_getpvalv()|0); //@line 429 "hsp3gr_dish.cpp"
 $pval = $0; //@line 429 "hsp3gr_dish.cpp"
 $1 = $pval; //@line 430 "hsp3gr_dish.cpp"
 $2 = HEAP16[$1>>1]|0; //@line 430 "hsp3gr_dish.cpp"
 $3 = $2 << 16 >> 16; //@line 430 "hsp3gr_dish.cpp"
 $4 = ($3|0)!=(4); //@line 430 "hsp3gr_dish.cpp"
 if ($4) {
  $5 = (___cxa_allocate_exception(4)|0); //@line 430 "hsp3gr_dish.cpp"
  HEAP32[$5>>2] = 6; //@line 430 "hsp3gr_dish.cpp"
  ___cxa_throw(($5|0),(624|0),(0|0)); //@line 430 "hsp3gr_dish.cpp"
  // unreachable; //@line 430 "hsp3gr_dish.cpp"
 } else {
  $6 = $pval; //@line 431 "hsp3gr_dish.cpp"
  $7 = (__Z17HspVarCorePtrAPTRP4PVali($6,0)|0); //@line 431 "hsp3gr_dish.cpp"
  STACKTOP = sp;return ($7|0); //@line 431 "hsp3gr_dish.cpp"
 }
 return 0|0;
}
function __ZL11code_getiv2PP4PVal($out_pval) {
 $out_pval = $out_pval|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dummy = 0, $pval = 0, $size = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $pval = sp;
 $size = sp + 8|0;
 $dummy = sp + 12|0;
 $0 = $out_pval;
 $1 = (__Z12code_getvptrPP4PValPi($pval,$size)|0); //@line 443 "hsp3gr_dish.cpp"
 $v = $1; //@line 443 "hsp3gr_dish.cpp"
 $2 = HEAP32[$pval>>2]|0; //@line 444 "hsp3gr_dish.cpp"
 $3 = HEAP16[$2>>1]|0; //@line 444 "hsp3gr_dish.cpp"
 $4 = $3 << 16 >> 16; //@line 444 "hsp3gr_dish.cpp"
 $5 = ($4|0)!=(4); //@line 444 "hsp3gr_dish.cpp"
 if ($5) {
  HEAP32[$dummy>>2] = 0; //@line 445 "hsp3gr_dish.cpp"
  $6 = HEAP32[$pval>>2]|0; //@line 446 "hsp3gr_dish.cpp"
  __Z10code_setvaP4PValiiPKv($6,0,4,$dummy); //@line 446 "hsp3gr_dish.cpp"
  $7 = HEAP32[$pval>>2]|0; //@line 447 "hsp3gr_dish.cpp"
  $8 = (__Z17HspVarCorePtrAPTRP4PVali($7,0)|0); //@line 447 "hsp3gr_dish.cpp"
  $v = $8; //@line 447 "hsp3gr_dish.cpp"
 }
 $9 = HEAP32[$pval>>2]|0; //@line 449 "hsp3gr_dish.cpp"
 $10 = $0; //@line 449 "hsp3gr_dish.cpp"
 HEAP32[$10>>2] = $9; //@line 449 "hsp3gr_dish.cpp"
 $11 = $v; //@line 450 "hsp3gr_dish.cpp"
 STACKTOP = sp;return ($11|0); //@line 450 "hsp3gr_dish.cpp"
}
function __ZL13code_setivlenP4PVali($pval,$len) {
 $pval = $pval|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ilen = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $pval;
 $1 = $len;
 $2 = $1; //@line 458 "hsp3gr_dish.cpp"
 $ilen = $2; //@line 458 "hsp3gr_dish.cpp"
 $3 = $ilen; //@line 459 "hsp3gr_dish.cpp"
 $4 = ($3|0)<(1); //@line 459 "hsp3gr_dish.cpp"
 if ($4) {
  $ilen = 1; //@line 459 "hsp3gr_dish.cpp"
 }
 $5 = $ilen; //@line 460 "hsp3gr_dish.cpp"
 $6 = $0; //@line 460 "hsp3gr_dish.cpp"
 $7 = (($6) + 4|0); //@line 460 "hsp3gr_dish.cpp"
 $8 = (($7) + 4|0); //@line 460 "hsp3gr_dish.cpp"
 HEAP32[$8>>2] = $5; //@line 460 "hsp3gr_dish.cpp"
 $9 = $ilen; //@line 461 "hsp3gr_dish.cpp"
 $10 = $9<<2; //@line 461 "hsp3gr_dish.cpp"
 $11 = $0; //@line 461 "hsp3gr_dish.cpp"
 $12 = (($11) + 24|0); //@line 461 "hsp3gr_dish.cpp"
 HEAP32[$12>>2] = $10; //@line 461 "hsp3gr_dish.cpp"
 STACKTOP = sp;return; //@line 462 "hsp3gr_dish.cpp"
}
function ___cxx_global_var_init() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN8CStrNoteC2Ev(3296); //@line 39 "../hsp3/hsp3int.cpp"
 (___cxa_atexit((83|0),(3296|0),(___dso_handle|0))|0); //@line 39 "../hsp3/hsp3int.cpp"
 STACKTOP = sp;return; //@line 39 "../hsp3/hsp3int.cpp"
}
function __ZN11CAutoSbFreeC2EPPc($this,$pptr) {
 $this = $this|0;
 $pptr = $pptr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $pptr;
 $2 = $0;
 $3 = $1; //@line 358 "../hsp3/hsp3int.cpp"
 HEAP32[$2>>2] = $3; //@line 358 "../hsp3/hsp3int.cpp"
 STACKTOP = sp;return; //@line 358 "../hsp3/hsp3int.cpp"
}
function __ZN11CAutoSbFreeD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0; //@line 361 "../hsp3/hsp3int.cpp"
 $3 = HEAP32[$2>>2]|0; //@line 361 "../hsp3/hsp3int.cpp"
 __Z6sbFreePv($3); //@line 361 "../hsp3/hsp3int.cpp"
 STACKTOP = sp;return; //@line 362 "../hsp3/hsp3int.cpp"
}
function __Z19hsp3typeinit_intcmdP12HSP3TYPEINFO($info) {
 $info = $info|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $info;
 $1 = $0; //@line 1369 "../hsp3/hsp3int.cpp"
 $2 = (($1) + 4|0); //@line 1369 "../hsp3/hsp3int.cpp"
 $3 = HEAP32[$2>>2]|0; //@line 1369 "../hsp3/hsp3int.cpp"
 HEAP32[3320>>2] = $3; //@line 1369 "../hsp3/hsp3int.cpp"
 $4 = $0; //@line 1370 "../hsp3/hsp3int.cpp"
 $5 = (($4) + 8|0); //@line 1370 "../hsp3/hsp3int.cpp"
 $6 = HEAP32[$5>>2]|0; //@line 1370 "../hsp3/hsp3int.cpp"
 HEAP32[3328>>2] = $6; //@line 1370 "../hsp3/hsp3int.cpp"
 $7 = HEAP32[3328>>2]|0; //@line 1371 "../hsp3/hsp3int.cpp"
 $8 = (($7) + 24|0); //@line 1371 "../hsp3/hsp3int.cpp"
 $9 = HEAP32[$8>>2]|0; //@line 1371 "../hsp3/hsp3int.cpp"
 HEAP32[3336>>2] = $9; //@line 1371 "../hsp3/hsp3int.cpp"
 $10 = HEAP32[3328>>2]|0; //@line 1372 "../hsp3/hsp3int.cpp"
 $11 = (($10) + 28|0); //@line 1372 "../hsp3/hsp3int.cpp"
 $12 = HEAP32[$11>>2]|0; //@line 1372 "../hsp3/hsp3int.cpp"
 HEAP32[3344>>2] = $12; //@line 1372 "../hsp3/hsp3int.cpp"
 __ZL8initEasev(); //@line 1373 "../hsp3/hsp3int.cpp"
 $13 = $0; //@line 1375 "../hsp3/hsp3int.cpp"
 $14 = (($13) + 12|0); //@line 1375 "../hsp3/hsp3int.cpp"
 HEAP32[$14>>2] = 84; //@line 1375 "../hsp3/hsp3int.cpp"
 $15 = $0; //@line 1376 "../hsp3/hsp3int.cpp"
 $16 = (($15) + 20|0); //@line 1376 "../hsp3/hsp3int.cpp"
 HEAP32[$16>>2] = 85; //@line 1376 "../hsp3/hsp3int.cpp"
 STACKTOP = sp;return; //@line 1377 "../hsp3/hsp3int.cpp"
}
function __ZL8initEasev() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[3432>>3] = 2.44140625E-4; //@line 222 "../hsp3/hsp3int.cpp"
 STACKTOP = sp;return; //@line 223 "../hsp3/hsp3int.cpp"
}
function __ZL14cmdfunc_intcmdi($cmd) {
 $cmd = $cmd|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0.0, $519 = 0.0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0.0, $524 = 0.0, $525 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $actid = 0, $aptr = 0, $aptr10 = 0, $aptr14 = 0, $aptr26 = 0, $aptr29 = 0, $aptr33 = 0, $bp = 0, $bufsize_s = 0, $bufsize_t = 0, $cust = 0, $dval = 0.0, $dval2 = 0.0, $fl = 0;
 var $i = 0, $irq = 0, $is_last = 0, $len = 0, $n = 0, $newsptr = 0, $np = 0, $opt = 0, $p = 0, $p1 = 0, $p2 = 0, $p27 = 0, $p3 = 0, $pdat = 0, $pdat23 = 0, $ps = 0, $ptr = 0, $ptr11 = 0, $ptr15 = 0, $ptr18 = 0;
 var $ptr2 = 0, $ptr22 = 0, $ptr4 = 0, $ptr7 = 0, $pval = 0, $pval1 = 0, $pval13 = 0, $pval16 = 0, $pval17 = 0, $pval2 = 0, $pval25 = 0, $pval28 = 0, $pval3 = 0, $pval32 = 0, $pval6 = 0, $pval9 = 0, $s_buffer = 0, $s_rep = 0, $s_result = 0, $sbr = 0;
 var $sep = 0, $sep_len = 0, $size = 0, $size12 = 0, $size19 = 0, $size20 = 0, $size21 = 0, $size24 = 0, $size31 = 0, $size5 = 0, $size8 = 0, $sptr = 0, $sptr30 = 0, $ss = 0, $tmp = 0, $tmpsize = 0, $tptr = 0, $tval = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0;
 $p2 = sp + 288|0;
 $pval = sp + 252|0;
 $ptr = sp + 244|0;
 $pval1 = sp + 240|0;
 $size = sp + 232|0;
 $pval3 = sp + 224|0;
 $size5 = sp + 216|0;
 $pval6 = sp + 212|0;
 $size8 = sp + 204|0;
 $pval2 = sp + 188|0;
 $pval9 = sp + 184|0;
 $size12 = sp + 168|0;
 $pval13 = sp + 164|0;
 $pval16 = sp + 152|0;
 $bufsize_t = sp + 68|0;
 $bufsize_s = sp + 64|0;
 $pval17 = sp + 60|0;
 $size19 = sp + 52|0;
 $pval25 = sp + 44|0;
 $pval28 = sp + 88|0;
 $size31 = sp + 108|0;
 $pval32 = sp + 124|0;
 $0 = $cmd;
 __Z9code_nextv(); //@line 524 "../hsp3/hsp3int.cpp"
 $1 = $0; //@line 526 "../hsp3/hsp3int.cpp"
 do {
  switch ($1|0) {
  case 29:  {
   $169 = (__Z10code_getvaPP4PVal($pval9)|0); //@line 701 "../hsp3/hsp3int.cpp"
   $aptr10 = $169; //@line 701 "../hsp3/hsp3int.cpp"
   $170 = (__Z12code_getvptrPP4PValPi($pval2,$size12)|0); //@line 702 "../hsp3/hsp3int.cpp"
   $ptr11 = $170; //@line 702 "../hsp3/hsp3int.cpp"
   $171 = (__Z10code_getdii(0)|0); //@line 703 "../hsp3/hsp3int.cpp"
   $p1 = $171; //@line 703 "../hsp3/hsp3int.cpp"
   $172 = (__Z10code_getdii(0)|0); //@line 704 "../hsp3/hsp3int.cpp"
   HEAP32[$p2>>2] = $172; //@line 704 "../hsp3/hsp3int.cpp"
   $173 = (__Z10code_getdii(1024)|0); //@line 705 "../hsp3/hsp3int.cpp"
   $p3 = $173; //@line 705 "../hsp3/hsp3int.cpp"
   $174 = $p1; //@line 706 "../hsp3/hsp3int.cpp"
   $175 = HEAP32[$size12>>2]|0; //@line 706 "../hsp3/hsp3int.cpp"
   $176 = ($174|0)>=($175|0); //@line 706 "../hsp3/hsp3int.cpp"
   if ($176) {
    $177 = (___cxa_allocate_exception(4)|0); //@line 706 "../hsp3/hsp3int.cpp"
    HEAP32[$177>>2] = 20; //@line 706 "../hsp3/hsp3int.cpp"
    ___cxa_throw(($177|0),(624|0),(0|0)); //@line 706 "../hsp3/hsp3int.cpp"
    // unreachable; //@line 706 "../hsp3/hsp3int.cpp"
   }
   $178 = $p1; //@line 707 "../hsp3/hsp3int.cpp"
   $179 = $ptr11; //@line 707 "../hsp3/hsp3int.cpp"
   $180 = (($179) + ($178)|0); //@line 707 "../hsp3/hsp3int.cpp"
   $ptr11 = $180; //@line 707 "../hsp3/hsp3int.cpp"
   $181 = $p3; //@line 708 "../hsp3/hsp3int.cpp"
   $182 = (($181) + 1)|0; //@line 708 "../hsp3/hsp3int.cpp"
   $183 = (__Z9code_stmpi($182)|0); //@line 708 "../hsp3/hsp3int.cpp"
   $p = $183; //@line 708 "../hsp3/hsp3int.cpp"
   __Z9strsp_iniv(); //@line 709 "../hsp3/hsp3int.cpp"
   $184 = $ptr11; //@line 710 "../hsp3/hsp3int.cpp"
   $185 = $p; //@line 710 "../hsp3/hsp3int.cpp"
   $186 = HEAP32[$p2>>2]|0; //@line 710 "../hsp3/hsp3int.cpp"
   $187 = $186&255; //@line 710 "../hsp3/hsp3int.cpp"
   $188 = $p3; //@line 710 "../hsp3/hsp3int.cpp"
   $189 = (__Z9strsp_getPcS_ci($184,$185,$187,$188)|0); //@line 710 "../hsp3/hsp3int.cpp"
   $190 = HEAP32[3320>>2]|0; //@line 710 "../hsp3/hsp3int.cpp"
   $191 = (($190) + 784|0); //@line 710 "../hsp3/hsp3int.cpp"
   HEAP32[$191>>2] = $189; //@line 710 "../hsp3/hsp3int.cpp"
   $192 = (__Z12strsp_getptrv()|0); //@line 711 "../hsp3/hsp3int.cpp"
   $193 = HEAP32[3320>>2]|0; //@line 711 "../hsp3/hsp3int.cpp"
   $194 = (($193) + 788|0); //@line 711 "../hsp3/hsp3int.cpp"
   HEAP32[$194>>2] = $192; //@line 711 "../hsp3/hsp3int.cpp"
   $195 = HEAP32[$pval9>>2]|0; //@line 712 "../hsp3/hsp3int.cpp"
   $196 = $aptr10; //@line 712 "../hsp3/hsp3int.cpp"
   $197 = $p; //@line 712 "../hsp3/hsp3int.cpp"
   __Z10code_setvaP4PValiiPKv($195,$196,2,$197); //@line 712 "../hsp3/hsp3int.cpp"
   STACKTOP = sp;return 0; //@line 969 "../hsp3/hsp3int.cpp"
   break;
  }
  case 38:  {
   $387 = (__Z9code_getsv()|0); //@line 840 "../hsp3/hsp3int.cpp"
   (__Z10code_eventiiiPv(5,0,0,$387)|0); //@line 840 "../hsp3/hsp3int.cpp"
   $388 = (__ZL11note_updatev()|0); //@line 841 "../hsp3/hsp3int.cpp"
   $pdat23 = $388; //@line 841 "../hsp3/hsp3int.cpp"
   $389 = $pdat23; //@line 842 "../hsp3/hsp3int.cpp"
   $390 = (_strlen(($389|0))|0); //@line 842 "../hsp3/hsp3int.cpp"
   $size24 = $390; //@line 842 "../hsp3/hsp3int.cpp"
   $391 = $size24; //@line 843 "../hsp3/hsp3int.cpp"
   $392 = $pdat23; //@line 843 "../hsp3/hsp3int.cpp"
   (__Z10code_eventiiiPv(7,-1,$391,$392)|0); //@line 843 "../hsp3/hsp3int.cpp"
   STACKTOP = sp;return 0; //@line 969 "../hsp3/hsp3int.cpp"
   break;
  }
  case 39:  {
   $393 = (_time((0|0))|0); //@line 850 "../hsp3/hsp3int.cpp"
   HEAP32[$p2>>2] = $393; //@line 850 "../hsp3/hsp3int.cpp"
   $394 = HEAP32[$p2>>2]|0; //@line 852 "../hsp3/hsp3int.cpp"
   $395 = (__Z10code_getdii($394)|0); //@line 852 "../hsp3/hsp3int.cpp"
   $p1 = $395; //@line 852 "../hsp3/hsp3int.cpp"
   $396 = $p1; //@line 853 "../hsp3/hsp3int.cpp"
   _srand(($396|0)); //@line 853 "../hsp3/hsp3int.cpp"
   STACKTOP = sp;return 0; //@line 969 "../hsp3/hsp3int.cpp"
   break;
  }
  case 42:  {
   HEAP32[$pval28>>2] = 0; //@line 875 "../hsp3/hsp3int.cpp"
   $aptr29 = 0; //@line 876 "../hsp3/hsp3int.cpp"
   $n = 0; //@line 882 "../hsp3/hsp3int.cpp"
   $is_last = 0; //@line 883 "../hsp3/hsp3int.cpp"
   $414 = (__Z12code_getvptrPP4PValPi($pval28,$size31)|0); //@line 885 "../hsp3/hsp3int.cpp"
   $sptr30 = $414; //@line 885 "../hsp3/hsp3int.cpp"
   $415 = HEAP32[$pval28>>2]|0; //@line 886 "../hsp3/hsp3int.cpp"
   $416 = HEAP16[$415>>1]|0; //@line 886 "../hsp3/hsp3int.cpp"
   $417 = $416 << 16 >> 16; //@line 886 "../hsp3/hsp3int.cpp"
   $418 = ($417|0)!=(2); //@line 886 "../hsp3/hsp3int.cpp"
   if ($418) {
    $419 = (___cxa_allocate_exception(4)|0); //@line 886 "../hsp3/hsp3int.cpp"
    HEAP32[$419>>2] = 6; //@line 886 "../hsp3/hsp3int.cpp"
    ___cxa_throw(($419|0),(624|0),(0|0)); //@line 886 "../hsp3/hsp3int.cpp"
    // unreachable; //@line 886 "../hsp3/hsp3int.cpp"
   }
   $420 = (__Z9code_getsv()|0); //@line 887 "../hsp3/hsp3int.cpp"
   $sep = $420; //@line 887 "../hsp3/hsp3int.cpp"
   $421 = $sep; //@line 888 "../hsp3/hsp3int.cpp"
   $422 = (_strlen(($421|0))|0); //@line 888 "../hsp3/hsp3int.cpp"
   $sep_len = $422; //@line 888 "../hsp3/hsp3int.cpp"
   while(1) {
    $423 = $sptr30; //@line 891 "../hsp3/hsp3int.cpp"
    $424 = $sep; //@line 891 "../hsp3/hsp3int.cpp"
    $425 = (__Z7strstr2PcS_($423,$424)|0); //@line 891 "../hsp3/hsp3int.cpp"
    $newsptr = $425; //@line 891 "../hsp3/hsp3int.cpp"
    $426 = $is_last; //@line 892 "../hsp3/hsp3int.cpp"
    $427 = ($426|0)!=(0); //@line 892 "../hsp3/hsp3int.cpp"
    if (!($427)) {
     $428 = HEAP32[3328>>2]|0; //@line 892 "../hsp3/hsp3int.cpp"
     $429 = (($428) + 84|0); //@line 892 "../hsp3/hsp3int.cpp"
     $430 = HEAP32[$429>>2]|0; //@line 892 "../hsp3/hsp3int.cpp"
     $431 = HEAP32[$430>>2]|0; //@line 892 "../hsp3/hsp3int.cpp"
     $432 = $431 & 8192; //@line 892 "../hsp3/hsp3int.cpp"
     $433 = ($432|0)!=(0); //@line 892 "../hsp3/hsp3int.cpp"
     if ($433) {
      $434 = $aptr29; //@line 895 "../hsp3/hsp3int.cpp"
      $435 = ($434|0)!=(0); //@line 895 "../hsp3/hsp3int.cpp"
      if ($435) {
       HEAP32[$pval28>>2] = 0; //@line 895 "../hsp3/hsp3int.cpp"
      }
      $is_last = 1; //@line 896 "../hsp3/hsp3int.cpp"
      $aptr29 = 0; //@line 897 "../hsp3/hsp3int.cpp"
     }
    }
    $436 = $is_last; //@line 899 "../hsp3/hsp3int.cpp"
    $437 = ($436|0)!=(0); //@line 899 "../hsp3/hsp3int.cpp"
    if ($437) {
     $438 = $aptr29; //@line 900 "../hsp3/hsp3int.cpp"
     $439 = (($438) + 1)|0; //@line 900 "../hsp3/hsp3int.cpp"
     $aptr29 = $439; //@line 900 "../hsp3/hsp3int.cpp"
     $440 = HEAP32[$pval28>>2]|0; //@line 901 "../hsp3/hsp3int.cpp"
     $441 = ($440|0)!=(0|0); //@line 901 "../hsp3/hsp3int.cpp"
     if ($441) {
      $442 = $aptr29; //@line 901 "../hsp3/hsp3int.cpp"
      $443 = HEAP32[$pval28>>2]|0; //@line 901 "../hsp3/hsp3int.cpp"
      $444 = (($443) + 4|0); //@line 901 "../hsp3/hsp3int.cpp"
      $445 = (($444) + 4|0); //@line 901 "../hsp3/hsp3int.cpp"
      $446 = HEAP32[$445>>2]|0; //@line 901 "../hsp3/hsp3int.cpp"
      $447 = ($442|0)>=($446|0); //@line 901 "../hsp3/hsp3int.cpp"
      if ($447) {
       $448 = HEAP32[$pval28>>2]|0; //@line 902 "../hsp3/hsp3int.cpp"
       $449 = (($448) + 4|0); //@line 902 "../hsp3/hsp3int.cpp"
       $450 = (($449) + 8|0); //@line 902 "../hsp3/hsp3int.cpp"
       $451 = HEAP32[$450>>2]|0; //@line 902 "../hsp3/hsp3int.cpp"
       $452 = ($451|0)!=(0); //@line 902 "../hsp3/hsp3int.cpp"
       if ($452) {
        label = 114;
        break;
       }
       $454 = HEAP32[$pval28>>2]|0; //@line 903 "../hsp3/hsp3int.cpp"
       $455 = $aptr29; //@line 903 "../hsp3/hsp3int.cpp"
       $456 = (($455) + 1)|0; //@line 903 "../hsp3/hsp3int.cpp"
       __Z15HspVarCoreReDimP4PValii($454,1,$456); //@line 903 "../hsp3/hsp3int.cpp"
      }
     }
    } else {
     $457 = (__Z10code_getvaPP4PVal($pval28)|0); //@line 906 "../hsp3/hsp3int.cpp"
     $aptr29 = $457; //@line 906 "../hsp3/hsp3int.cpp"
    }
    $458 = HEAP32[$pval28>>2]|0; //@line 908 "../hsp3/hsp3int.cpp"
    $459 = ($458|0)!=(0|0); //@line 908 "../hsp3/hsp3int.cpp"
    if ($459) {
     $460 = $newsptr; //@line 909 "../hsp3/hsp3int.cpp"
     $461 = ($460|0)==(0|0); //@line 909 "../hsp3/hsp3int.cpp"
     if ($461) {
      $462 = HEAP32[$pval28>>2]|0; //@line 910 "../hsp3/hsp3int.cpp"
      $463 = $aptr29; //@line 910 "../hsp3/hsp3int.cpp"
      $464 = $sptr30; //@line 910 "../hsp3/hsp3int.cpp"
      __Z10code_setvaP4PValiiPKv($462,$463,2,$464); //@line 910 "../hsp3/hsp3int.cpp"
     } else {
      $465 = HEAP32[$pval28>>2]|0; //@line 912 "../hsp3/hsp3int.cpp"
      $466 = $aptr29; //@line 912 "../hsp3/hsp3int.cpp"
      $467 = $sptr30; //@line 912 "../hsp3/hsp3int.cpp"
      $468 = $newsptr; //@line 912 "../hsp3/hsp3int.cpp"
      $469 = $sptr30; //@line 912 "../hsp3/hsp3int.cpp"
      $470 = $468; //@line 912 "../hsp3/hsp3int.cpp"
      $471 = $469; //@line 912 "../hsp3/hsp3int.cpp"
      $472 = (($470) - ($471))|0; //@line 912 "../hsp3/hsp3int.cpp"
      __ZL15var_set_str_lenP4PValiPci($465,$466,$467,$472); //@line 912 "../hsp3/hsp3int.cpp"
     }
    }
    $473 = $n; //@line 915 "../hsp3/hsp3int.cpp"
    $474 = (($473) + 1)|0; //@line 915 "../hsp3/hsp3int.cpp"
    $n = $474; //@line 915 "../hsp3/hsp3int.cpp"
    $475 = $newsptr; //@line 916 "../hsp3/hsp3int.cpp"
    $476 = ($475|0)==(0|0); //@line 916 "../hsp3/hsp3int.cpp"
    if ($476) {
     break;
    }
    $486 = $newsptr; //@line 924 "../hsp3/hsp3int.cpp"
    $487 = $sep_len; //@line 924 "../hsp3/hsp3int.cpp"
    $488 = (($486) + ($487)|0); //@line 924 "../hsp3/hsp3int.cpp"
    $sptr30 = $488; //@line 924 "../hsp3/hsp3int.cpp"
   }
   if ((label|0) == 114) {
    $453 = (___cxa_allocate_exception(4)|0); //@line 902 "../hsp3/hsp3int.cpp"
    HEAP32[$453>>2] = 7; //@line 902 "../hsp3/hsp3int.cpp"
    ___cxa_throw(($453|0),(624|0),(0|0)); //@line 902 "../hsp3/hsp3int.cpp"
    // unreachable; //@line 902 "../hsp3/hsp3int.cpp"
   }
   while(1) {
    $477 = HEAP32[3328>>2]|0; //@line 918 "../hsp3/hsp3int.cpp"
    $478 = (($477) + 84|0); //@line 918 "../hsp3/hsp3int.cpp"
    $479 = HEAP32[$478>>2]|0; //@line 918 "../hsp3/hsp3int.cpp"
    $480 = HEAP32[$479>>2]|0; //@line 918 "../hsp3/hsp3int.cpp"
    $481 = $480 & 8192; //@line 918 "../hsp3/hsp3int.cpp"
    $482 = ($481|0)==(0); //@line 918 "../hsp3/hsp3int.cpp"
    if (!($482)) {
     break;
    }
    $483 = (__Z10code_getvaPP4PVal($pval28)|0); //@line 919 "../hsp3/hsp3int.cpp"
    $aptr29 = $483; //@line 919 "../hsp3/hsp3int.cpp"
    $484 = HEAP32[$pval28>>2]|0; //@line 920 "../hsp3/hsp3int.cpp"
    $485 = $aptr29; //@line 920 "../hsp3/hsp3int.cpp"
    __Z10code_setvaP4PValiiPKv($484,$485,2,3440); //@line 920 "../hsp3/hsp3int.cpp"
   }
   $489 = $n; //@line 926 "../hsp3/hsp3int.cpp"
   $490 = HEAP32[3320>>2]|0; //@line 926 "../hsp3/hsp3int.cpp"
   $491 = (($490) + 784|0); //@line 926 "../hsp3/hsp3int.cpp"
   HEAP32[$491>>2] = $489; //@line 926 "../hsp3/hsp3int.cpp"
   STACKTOP = sp;return 0; //@line 969 "../hsp3/hsp3int.cpp"
   break;
  }
  case 41:  {
   (__ZL11note_updatev()|0); //@line 864 "../hsp3/hsp3int.cpp"
   $407 = (__Z10code_getvaPP4PVal($pval25)|0); //@line 865 "../hsp3/hsp3int.cpp"
   $aptr26 = $407; //@line 865 "../hsp3/hsp3int.cpp"
   $408 = (__Z10code_getdii(0)|0); //@line 866 "../hsp3/hsp3int.cpp"
   $p1 = $408; //@line 866 "../hsp3/hsp3int.cpp"
   $409 = $p1; //@line 867 "../hsp3/hsp3int.cpp"
   $410 = (__ZN8CStrNote13GetLineDirectEi(3296,$409)|0); //@line 867 "../hsp3/hsp3int.cpp"
   $p27 = $410; //@line 867 "../hsp3/hsp3int.cpp"
   $411 = HEAP32[$pval25>>2]|0; //@line 868 "../hsp3/hsp3int.cpp"
   $412 = $aptr26; //@line 868 "../hsp3/hsp3int.cpp"
   $413 = $p27; //@line 868 "../hsp3/hsp3int.cpp"
   __Z10code_setvaP4PValiiPKv($411,$412,2,$413); //@line 868 "../hsp3/hsp3int.cpp"
   __ZN8CStrNote16ResumeLineDirectEv(3296); //@line 869 "../hsp3/hsp3int.cpp"
   STACKTOP = sp;return 0; //@line 969 "../hsp3/hsp3int.cpp"
   break;
  }
  case 31:  {
   $208 = (__Z10code_getvaPP4PVal($pval13)|0); //@line 732 "../hsp3/hsp3int.cpp"
   $aptr14 = $208; //@line 732 "../hsp3/hsp3int.cpp"
   $209 = HEAP32[$pval13>>2]|0; //@line 733 "../hsp3/hsp3int.cpp"
   $210 = $aptr14; //@line 733 "../hsp3/hsp3int.cpp"
   $211 = (__Z17HspVarCorePtrAPTRP4PVali($209,$210)|0); //@line 733 "../hsp3/hsp3int.cpp"
   $ptr15 = $211; //@line 733 "../hsp3/hsp3int.cpp"
   $212 = HEAP32[$pval13>>2]|0; //@line 734 "../hsp3/hsp3int.cpp"
   $213 = (($212) + 36|0); //@line 734 "../hsp3/hsp3int.cpp"
   $214 = HEAP16[$213>>1]|0; //@line 734 "../hsp3/hsp3int.cpp"
   $215 = $214&65535; //@line 734 "../hsp3/hsp3int.cpp"
   $216 = $215 & 2; //@line 734 "../hsp3/hsp3int.cpp"
   $217 = ($216|0)==(0); //@line 734 "../hsp3/hsp3int.cpp"
   if ($217) {
    $218 = (___cxa_allocate_exception(4)|0); //@line 734 "../hsp3/hsp3int.cpp"
    HEAP32[$218>>2] = 6; //@line 734 "../hsp3/hsp3int.cpp"
    ___cxa_throw(($218|0),(624|0),(0|0)); //@line 734 "../hsp3/hsp3int.cpp"
    // unreachable; //@line 734 "../hsp3/hsp3int.cpp"
   }
   $219 = (__Z10code_getdii(0)|0); //@line 735 "../hsp3/hsp3int.cpp"
   $p1 = $219; //@line 735 "../hsp3/hsp3int.cpp"
   $220 = $p1; //@line 736 "../hsp3/hsp3int.cpp"
   $221 = ($220|0)<(64); //@line 736 "../hsp3/hsp3int.cpp"
   if ($221) {
    $p1 = 64; //@line 736 "../hsp3/hsp3int.cpp"
   }
   $222 = HEAP32[$pval13>>2]|0; //@line 737 "../hsp3/hsp3int.cpp"
   $223 = HEAP16[$222>>1]|0; //@line 737 "../hsp3/hsp3int.cpp"
   $224 = $223 << 16 >> 16; //@line 737 "../hsp3/hsp3int.cpp"
   $225 = HEAP32[3456>>2]|0; //@line 737 "../hsp3/hsp3int.cpp"
   $226 = (($225) + (($224*140)|0)|0); //@line 737 "../hsp3/hsp3int.cpp"
   $227 = (($226) + 68|0); //@line 737 "../hsp3/hsp3int.cpp"
   $228 = HEAP32[$227>>2]|0; //@line 737 "../hsp3/hsp3int.cpp"
   $229 = HEAP32[$pval13>>2]|0; //@line 737 "../hsp3/hsp3int.cpp"
   $230 = $ptr15; //@line 737 "../hsp3/hsp3int.cpp"
   $231 = $p1; //@line 737 "../hsp3/hsp3int.cpp"
   FUNCTION_TABLE_viii[$228 & 255]($229,$230,$231); //@line 737 "../hsp3/hsp3int.cpp"
   STACKTOP = sp;return 0; //@line 969 "../hsp3/hsp3int.cpp"
   break;
  }
  case 40:  {
   $397 = HEAP32[3320>>2]|0; //@line 856 "../hsp3/hsp3int.cpp"
   $398 = (($397) + 820|0); //@line 856 "../hsp3/hsp3int.cpp"
   $399 = HEAP32[$398>>2]|0; //@line 856 "../hsp3/hsp3int.cpp"
   $400 = HEAP32[3320>>2]|0; //@line 856 "../hsp3/hsp3int.cpp"
   $401 = (($400) + 812|0); //@line 856 "../hsp3/hsp3int.cpp"
   HEAP32[$401>>2] = $399; //@line 856 "../hsp3/hsp3int.cpp"
   $402 = HEAP32[3320>>2]|0; //@line 857 "../hsp3/hsp3int.cpp"
   $403 = (($402) + 816|0); //@line 857 "../hsp3/hsp3int.cpp"
   $404 = HEAP32[$403>>2]|0; //@line 857 "../hsp3/hsp3int.cpp"
   $405 = HEAP32[3320>>2]|0; //@line 857 "../hsp3/hsp3int.cpp"
   $406 = (($405) + 808|0); //@line 857 "../hsp3/hsp3int.cpp"
   HEAP32[$406>>2] = $404; //@line 857 "../hsp3/hsp3int.cpp"
   STACKTOP = sp;return 0; //@line 969 "../hsp3/hsp3int.cpp"
   break;
  }
  case 34:  {
   $287 = HEAP32[3320>>2]|0; //@line 783 "../hsp3/hsp3int.cpp"
   $288 = (($287) + 812|0); //@line 783 "../hsp3/hsp3int.cpp"
   $289 = HEAP32[$288>>2]|0; //@line 783 "../hsp3/hsp3int.cpp"
   $290 = HEAP32[3320>>2]|0; //@line 783 "../hsp3/hsp3int.cpp"
   $291 = (($290) + 820|0); //@line 783 "../hsp3/hsp3int.cpp"
   HEAP32[$291>>2] = $289; //@line 783 "../hsp3/hsp3int.cpp"
   $292 = HEAP32[3320>>2]|0; //@line 784 "../hsp3/hsp3int.cpp"
   $293 = (($292) + 808|0); //@line 784 "../hsp3/hsp3int.cpp"
   $294 = HEAP32[$293>>2]|0; //@line 784 "../hsp3/hsp3int.cpp"
   $295 = HEAP32[3320>>2]|0; //@line 784 "../hsp3/hsp3int.cpp"
   $296 = (($295) + 816|0); //@line 784 "../hsp3/hsp3int.cpp"
   HEAP32[$296>>2] = $294; //@line 784 "../hsp3/hsp3int.cpp"
   $297 = HEAP32[3320>>2]|0; //@line 785 "../hsp3/hsp3int.cpp"
   $298 = (($297) + 808|0); //@line 785 "../hsp3/hsp3int.cpp"
   $299 = (__Z10code_getvaPP4PVal($298)|0); //@line 785 "../hsp3/hsp3int.cpp"
   $300 = HEAP32[3320>>2]|0; //@line 785 "../hsp3/hsp3int.cpp"
   $301 = (($300) + 812|0); //@line 785 "../hsp3/hsp3int.cpp"
   HEAP32[$301>>2] = $299; //@line 785 "../hsp3/hsp3int.cpp"
   $302 = HEAP32[3320>>2]|0; //@line 786 "../hsp3/hsp3int.cpp"
   $303 = (($302) + 808|0); //@line 786 "../hsp3/hsp3int.cpp"
   $304 = HEAP32[$303>>2]|0; //@line 786 "../hsp3/hsp3int.cpp"
   $305 = HEAP16[$304>>1]|0; //@line 786 "../hsp3/hsp3int.cpp"
   $306 = $305 << 16 >> 16; //@line 786 "../hsp3/hsp3int.cpp"
   $307 = ($306|0)!=(2); //@line 786 "../hsp3/hsp3int.cpp"
   if ($307) {
    $308 = HEAP32[3320>>2]|0; //@line 787 "../hsp3/hsp3int.cpp"
    $309 = (($308) + 808|0); //@line 787 "../hsp3/hsp3int.cpp"
    $310 = HEAP32[$309>>2]|0; //@line 787 "../hsp3/hsp3int.cpp"
    $311 = HEAP32[3320>>2]|0; //@line 787 "../hsp3/hsp3int.cpp"
    $312 = (($311) + 812|0); //@line 787 "../hsp3/hsp3int.cpp"
    $313 = HEAP32[$312>>2]|0; //@line 787 "../hsp3/hsp3int.cpp"
    __Z10code_setvaP4PValiiPKv($310,$313,2,3440); //@line 787 "../hsp3/hsp3int.cpp"
   }
   STACKTOP = sp;return 0; //@line 969 "../hsp3/hsp3int.cpp"
   break;
  }
  case 35:  {
   $314 = (__ZL11note_updatev()|0); //@line 796 "../hsp3/hsp3int.cpp"
   $np = $314; //@line 796 "../hsp3/hsp3int.cpp"
   $315 = (__Z9code_getsv()|0); //@line 797 "../hsp3/hsp3int.cpp"
   $ps = $315; //@line 797 "../hsp3/hsp3int.cpp"
   $316 = $ps; //@line 798 "../hsp3/hsp3int.cpp"
   $317 = (_strlen(($316|0))|0); //@line 798 "../hsp3/hsp3int.cpp"
   $318 = (($317) + 8)|0; //@line 798 "../hsp3/hsp3int.cpp"
   $size20 = $318; //@line 798 "../hsp3/hsp3int.cpp"
   $319 = HEAP32[3320>>2]|0; //@line 799 "../hsp3/hsp3int.cpp"
   $320 = (($319) + 808|0); //@line 799 "../hsp3/hsp3int.cpp"
   $321 = HEAP32[$320>>2]|0; //@line 799 "../hsp3/hsp3int.cpp"
   $322 = HEAP16[$321>>1]|0; //@line 799 "../hsp3/hsp3int.cpp"
   $323 = $322 << 16 >> 16; //@line 799 "../hsp3/hsp3int.cpp"
   $324 = HEAP32[3456>>2]|0; //@line 799 "../hsp3/hsp3int.cpp"
   $325 = (($324) + (($323*140)|0)|0); //@line 799 "../hsp3/hsp3int.cpp"
   $326 = (($325) + 68|0); //@line 799 "../hsp3/hsp3int.cpp"
   $327 = HEAP32[$326>>2]|0; //@line 799 "../hsp3/hsp3int.cpp"
   $328 = HEAP32[3320>>2]|0; //@line 799 "../hsp3/hsp3int.cpp"
   $329 = (($328) + 808|0); //@line 799 "../hsp3/hsp3int.cpp"
   $330 = HEAP32[$329>>2]|0; //@line 799 "../hsp3/hsp3int.cpp"
   $331 = $np; //@line 799 "../hsp3/hsp3int.cpp"
   $332 = $np; //@line 799 "../hsp3/hsp3int.cpp"
   $333 = (_strlen(($332|0))|0); //@line 799 "../hsp3/hsp3int.cpp"
   $334 = $size20; //@line 799 "../hsp3/hsp3int.cpp"
   $335 = (($333) + ($334))|0; //@line 799 "../hsp3/hsp3int.cpp"
   FUNCTION_TABLE_viii[$327 & 255]($330,$331,$335); //@line 799 "../hsp3/hsp3int.cpp"
   $336 = $size20; //@line 801 "../hsp3/hsp3int.cpp"
   $337 = (__Z7sbAlloci($336)|0); //@line 801 "../hsp3/hsp3int.cpp"
   $tmp = $337; //@line 801 "../hsp3/hsp3int.cpp"
   $338 = $tmp; //@line 802 "../hsp3/hsp3int.cpp"
   $339 = $ps; //@line 802 "../hsp3/hsp3int.cpp"
   (_strcpy(($338|0),($339|0))|0); //@line 802 "../hsp3/hsp3int.cpp"
   $340 = (__Z10code_getdii(-1)|0); //@line 804 "../hsp3/hsp3int.cpp"
   $p1 = $340; //@line 804 "../hsp3/hsp3int.cpp"
   $341 = (__Z10code_getdii(0)|0); //@line 805 "../hsp3/hsp3int.cpp"
   HEAP32[$p2>>2] = $341; //@line 805 "../hsp3/hsp3int.cpp"
   $342 = (__ZL11note_updatev()|0); //@line 806 "../hsp3/hsp3int.cpp"
   $np = $342; //@line 806 "../hsp3/hsp3int.cpp"
   $343 = $tmp; //@line 807 "../hsp3/hsp3int.cpp"
   $344 = $p1; //@line 807 "../hsp3/hsp3int.cpp"
   $345 = HEAP32[$p2>>2]|0; //@line 807 "../hsp3/hsp3int.cpp"
   (__ZN8CStrNote7PutLineEPcii(3296,$343,$344,$345)|0); //@line 807 "../hsp3/hsp3int.cpp"
   $346 = $tmp; //@line 808 "../hsp3/hsp3int.cpp"
   __Z6sbFreePv($346); //@line 808 "../hsp3/hsp3int.cpp"
   STACKTOP = sp;return 0; //@line 969 "../hsp3/hsp3int.cpp"
   break;
  }
  case 36:  {
   $347 = (__Z10code_getdii(0)|0); //@line 812 "../hsp3/hsp3int.cpp"
   $p1 = $347; //@line 812 "../hsp3/hsp3int.cpp"
   (__ZL11note_updatev()|0); //@line 813 "../hsp3/hsp3int.cpp"
   $348 = $p1; //@line 814 "../hsp3/hsp3int.cpp"
   (__ZN8CStrNote7PutLineEPcii(3296,0,$348,1)|0); //@line 814 "../hsp3/hsp3int.cpp"
   STACKTOP = sp;return 0; //@line 969 "../hsp3/hsp3int.cpp"
   break;
  }
  case 37:  {
   $349 = (__Z9code_getsv()|0); //@line 822 "../hsp3/hsp3int.cpp"
   (__Z10code_eventiiiPv(5,0,0,$349)|0); //@line 822 "../hsp3/hsp3int.cpp"
   $350 = (__Z10code_getdii(-1)|0); //@line 823 "../hsp3/hsp3int.cpp"
   $p1 = $350; //@line 823 "../hsp3/hsp3int.cpp"
   (__Z10code_eventiiiPv(8,0,0,0)|0); //@line 824 "../hsp3/hsp3int.cpp"
   $351 = HEAP32[3320>>2]|0; //@line 825 "../hsp3/hsp3int.cpp"
   $352 = (($351) + 788|0); //@line 825 "../hsp3/hsp3int.cpp"
   $353 = HEAP32[$352>>2]|0; //@line 825 "../hsp3/hsp3int.cpp"
   $size21 = $353; //@line 825 "../hsp3/hsp3int.cpp"
   $354 = $size21; //@line 826 "../hsp3/hsp3int.cpp"
   $355 = ($354|0)<(0); //@line 826 "../hsp3/hsp3int.cpp"
   if ($355) {
    $356 = (___cxa_allocate_exception(4)|0); //@line 826 "../hsp3/hsp3int.cpp"
    HEAP32[$356>>2] = 12; //@line 826 "../hsp3/hsp3int.cpp"
    ___cxa_throw(($356|0),(624|0),(0|0)); //@line 826 "../hsp3/hsp3int.cpp"
    // unreachable; //@line 826 "../hsp3/hsp3int.cpp"
   }
   $357 = $p1; //@line 827 "../hsp3/hsp3int.cpp"
   $358 = ($357|0)>=(0); //@line 827 "../hsp3/hsp3int.cpp"
   if ($358) {
    $359 = $size21; //@line 827 "../hsp3/hsp3int.cpp"
    $360 = $p1; //@line 827 "../hsp3/hsp3int.cpp"
    $361 = ($359|0)>=($360|0); //@line 827 "../hsp3/hsp3int.cpp"
    if ($361) {
     $362 = $p1; //@line 827 "../hsp3/hsp3int.cpp"
     $size21 = $362; //@line 827 "../hsp3/hsp3int.cpp"
     $363 = HEAP32[3320>>2]|0; //@line 827 "../hsp3/hsp3int.cpp"
     $364 = (($363) + 788|0); //@line 827 "../hsp3/hsp3int.cpp"
     HEAP32[$364>>2] = $362; //@line 827 "../hsp3/hsp3int.cpp"
    }
   }
   $365 = (__ZL11note_updatev()|0); //@line 829 "../hsp3/hsp3int.cpp"
   $pdat = $365; //@line 829 "../hsp3/hsp3int.cpp"
   $366 = HEAP32[3320>>2]|0; //@line 830 "../hsp3/hsp3int.cpp"
   $367 = (($366) + 808|0); //@line 830 "../hsp3/hsp3int.cpp"
   $368 = HEAP32[$367>>2]|0; //@line 830 "../hsp3/hsp3int.cpp"
   $369 = HEAP16[$368>>1]|0; //@line 830 "../hsp3/hsp3int.cpp"
   $370 = $369 << 16 >> 16; //@line 830 "../hsp3/hsp3int.cpp"
   $371 = HEAP32[3456>>2]|0; //@line 830 "../hsp3/hsp3int.cpp"
   $372 = (($371) + (($370*140)|0)|0); //@line 830 "../hsp3/hsp3int.cpp"
   $373 = (($372) + 68|0); //@line 830 "../hsp3/hsp3int.cpp"
   $374 = HEAP32[$373>>2]|0; //@line 830 "../hsp3/hsp3int.cpp"
   $375 = HEAP32[3320>>2]|0; //@line 830 "../hsp3/hsp3int.cpp"
   $376 = (($375) + 808|0); //@line 830 "../hsp3/hsp3int.cpp"
   $377 = HEAP32[$376>>2]|0; //@line 830 "../hsp3/hsp3int.cpp"
   $378 = $pdat; //@line 830 "../hsp3/hsp3int.cpp"
   $379 = $size21; //@line 830 "../hsp3/hsp3int.cpp"
   $380 = (($379) + 1)|0; //@line 830 "../hsp3/hsp3int.cpp"
   FUNCTION_TABLE_viii[$374 & 255]($377,$378,$380); //@line 830 "../hsp3/hsp3int.cpp"
   $381 = (__ZL11note_updatev()|0); //@line 831 "../hsp3/hsp3int.cpp"
   $ptr22 = $381; //@line 831 "../hsp3/hsp3int.cpp"
   $382 = $size21; //@line 832 "../hsp3/hsp3int.cpp"
   $383 = $ptr22; //@line 832 "../hsp3/hsp3int.cpp"
   (__Z10code_eventiiiPv(6,0,$382,$383)|0); //@line 832 "../hsp3/hsp3int.cpp"
   $384 = $size21; //@line 833 "../hsp3/hsp3int.cpp"
   $385 = $ptr22; //@line 833 "../hsp3/hsp3int.cpp"
   $386 = (($385) + ($384)|0); //@line 833 "../hsp3/hsp3int.cpp"
   HEAP8[$386>>0] = 0; //@line 833 "../hsp3/hsp3int.cpp"
   STACKTOP = sp;return 0; //@line 969 "../hsp3/hsp3int.cpp"
   break;
  }
  case 30:  {
   $198 = (__Z9code_getsv()|0); //@line 716 "../hsp3/hsp3int.cpp"
   (__Z10code_eventiiiPv(5,0,0,$198)|0); //@line 716 "../hsp3/hsp3int.cpp"
   $199 = (__Z10code_getdii(-1)|0); //@line 717 "../hsp3/hsp3int.cpp"
   $p1 = $199; //@line 717 "../hsp3/hsp3int.cpp"
   __Z7dpm_byev(); //@line 718 "../hsp3/hsp3int.cpp"
   $200 = HEAP32[3320>>2]|0; //@line 719 "../hsp3/hsp3int.cpp"
   $201 = (($200) + 796|0); //@line 719 "../hsp3/hsp3int.cpp"
   $202 = HEAP32[$201>>2]|0; //@line 719 "../hsp3/hsp3int.cpp"
   $203 = $p1; //@line 719 "../hsp3/hsp3int.cpp"
   $204 = (__Z7dpm_iniPclii($202,0,-1,$203)|0); //@line 719 "../hsp3/hsp3int.cpp"
   HEAP32[$p2>>2] = $204; //@line 719 "../hsp3/hsp3int.cpp"
   $205 = HEAP32[$p2>>2]|0; //@line 720 "../hsp3/hsp3int.cpp"
   $206 = ($205|0)!=(0); //@line 720 "../hsp3/hsp3int.cpp"
   if ($206) {
    $207 = (___cxa_allocate_exception(4)|0); //@line 720 "../hsp3/hsp3int.cpp"
    HEAP32[$207>>2] = 12; //@line 720 "../hsp3/hsp3int.cpp"
    ___cxa_throw(($207|0),(624|0),(0|0)); //@line 720 "../hsp3/hsp3int.cpp"
    // unreachable; //@line 720 "../hsp3/hsp3int.cpp"
   }
   STACKTOP = sp;return 0; //@line 969 "../hsp3/hsp3int.cpp"
   break;
  }
  case 33:  {
   $265 = (__Z12code_getvptrPP4PValPi($pval17,$size19)|0); //@line 769 "../hsp3/hsp3int.cpp"
   $ptr18 = $265; //@line 769 "../hsp3/hsp3int.cpp"
   $266 = (__Z10code_getdii(0)|0); //@line 770 "../hsp3/hsp3int.cpp"
   $p1 = $266; //@line 770 "../hsp3/hsp3int.cpp"
   $267 = (__Z10code_getdii(0)|0); //@line 771 "../hsp3/hsp3int.cpp"
   HEAP32[$p2>>2] = $267; //@line 771 "../hsp3/hsp3int.cpp"
   $268 = (__Z10code_getdii(0)|0); //@line 772 "../hsp3/hsp3int.cpp"
   $p3 = $268; //@line 772 "../hsp3/hsp3int.cpp"
   $269 = $p3; //@line 773 "../hsp3/hsp3int.cpp"
   $270 = ($269|0)<(0); //@line 773 "../hsp3/hsp3int.cpp"
   if ($270) {
    $271 = (___cxa_allocate_exception(4)|0); //@line 773 "../hsp3/hsp3int.cpp"
    HEAP32[$271>>2] = 20; //@line 773 "../hsp3/hsp3int.cpp"
    ___cxa_throw(($271|0),(624|0),(0|0)); //@line 773 "../hsp3/hsp3int.cpp"
    // unreachable; //@line 773 "../hsp3/hsp3int.cpp"
   }
   $272 = $p3; //@line 774 "../hsp3/hsp3int.cpp"
   $273 = $ptr18; //@line 774 "../hsp3/hsp3int.cpp"
   $274 = (($273) + ($272)|0); //@line 774 "../hsp3/hsp3int.cpp"
   $ptr18 = $274; //@line 774 "../hsp3/hsp3int.cpp"
   $275 = $p3; //@line 775 "../hsp3/hsp3int.cpp"
   $276 = HEAP32[$p2>>2]|0; //@line 775 "../hsp3/hsp3int.cpp"
   $277 = (($275) + ($276))|0; //@line 775 "../hsp3/hsp3int.cpp"
   $278 = HEAP32[$size19>>2]|0; //@line 775 "../hsp3/hsp3int.cpp"
   $279 = ($277|0)>($278|0); //@line 775 "../hsp3/hsp3int.cpp"
   if ($279) {
    $280 = (___cxa_allocate_exception(4)|0); //@line 775 "../hsp3/hsp3int.cpp"
    HEAP32[$280>>2] = 20; //@line 775 "../hsp3/hsp3int.cpp"
    ___cxa_throw(($280|0),(624|0),(0|0)); //@line 775 "../hsp3/hsp3int.cpp"
    // unreachable; //@line 775 "../hsp3/hsp3int.cpp"
   }
   $281 = HEAP32[$p2>>2]|0; //@line 776 "../hsp3/hsp3int.cpp"
   $282 = ($281|0)>(0); //@line 776 "../hsp3/hsp3int.cpp"
   if ($282) {
    $283 = $ptr18; //@line 777 "../hsp3/hsp3int.cpp"
    $284 = $p1; //@line 777 "../hsp3/hsp3int.cpp"
    $285 = $284&255; //@line 777 "../hsp3/hsp3int.cpp"
    $286 = HEAP32[$p2>>2]|0; //@line 777 "../hsp3/hsp3int.cpp"
    _memset(($283|0),($285|0),($286|0))|0; //@line 777 "../hsp3/hsp3int.cpp"
   }
   STACKTOP = sp;return 0; //@line 969 "../hsp3/hsp3int.cpp"
   break;
  }
  case 32:  {
   $232 = (__Z12code_getvptrPP4PValPi($pval16,$bufsize_t)|0); //@line 748 "../hsp3/hsp3int.cpp"
   $tptr = $232; //@line 748 "../hsp3/hsp3int.cpp"
   $233 = (__Z12code_getvptrPP4PValPi($pval16,$bufsize_s)|0); //@line 749 "../hsp3/hsp3int.cpp"
   $sptr = $233; //@line 749 "../hsp3/hsp3int.cpp"
   $234 = (__Z10code_getdii(0)|0); //@line 750 "../hsp3/hsp3int.cpp"
   $p1 = $234; //@line 750 "../hsp3/hsp3int.cpp"
   $235 = (__Z10code_getdii(0)|0); //@line 751 "../hsp3/hsp3int.cpp"
   HEAP32[$p2>>2] = $235; //@line 751 "../hsp3/hsp3int.cpp"
   $236 = (__Z10code_getdii(0)|0); //@line 752 "../hsp3/hsp3int.cpp"
   $p3 = $236; //@line 752 "../hsp3/hsp3int.cpp"
   $237 = HEAP32[$p2>>2]|0; //@line 753 "../hsp3/hsp3int.cpp"
   $238 = ($237|0)<(0); //@line 753 "../hsp3/hsp3int.cpp"
   if ($238) {
    $241 = (___cxa_allocate_exception(4)|0); //@line 753 "../hsp3/hsp3int.cpp"
    HEAP32[$241>>2] = 20; //@line 753 "../hsp3/hsp3int.cpp"
    ___cxa_throw(($241|0),(624|0),(0|0)); //@line 753 "../hsp3/hsp3int.cpp"
    // unreachable; //@line 753 "../hsp3/hsp3int.cpp"
   }
   $239 = $p3; //@line 753 "../hsp3/hsp3int.cpp"
   $240 = ($239|0)<(0); //@line 753 "../hsp3/hsp3int.cpp"
   if ($240) {
    $241 = (___cxa_allocate_exception(4)|0); //@line 753 "../hsp3/hsp3int.cpp"
    HEAP32[$241>>2] = 20; //@line 753 "../hsp3/hsp3int.cpp"
    ___cxa_throw(($241|0),(624|0),(0|0)); //@line 753 "../hsp3/hsp3int.cpp"
    // unreachable; //@line 753 "../hsp3/hsp3int.cpp"
   }
   $242 = HEAP32[$p2>>2]|0; //@line 755 "../hsp3/hsp3int.cpp"
   $243 = $tptr; //@line 755 "../hsp3/hsp3int.cpp"
   $244 = (($243) + ($242)|0); //@line 755 "../hsp3/hsp3int.cpp"
   $tptr = $244; //@line 755 "../hsp3/hsp3int.cpp"
   $245 = $p3; //@line 756 "../hsp3/hsp3int.cpp"
   $246 = $sptr; //@line 756 "../hsp3/hsp3int.cpp"
   $247 = (($246) + ($245)|0); //@line 756 "../hsp3/hsp3int.cpp"
   $sptr = $247; //@line 756 "../hsp3/hsp3int.cpp"
   $248 = $p1; //@line 757 "../hsp3/hsp3int.cpp"
   $249 = HEAP32[$p2>>2]|0; //@line 757 "../hsp3/hsp3int.cpp"
   $250 = (($248) + ($249))|0; //@line 757 "../hsp3/hsp3int.cpp"
   $251 = HEAP32[$bufsize_t>>2]|0; //@line 757 "../hsp3/hsp3int.cpp"
   $252 = ($250|0)>($251|0); //@line 757 "../hsp3/hsp3int.cpp"
   if ($252) {
    $253 = (___cxa_allocate_exception(4)|0); //@line 757 "../hsp3/hsp3int.cpp"
    HEAP32[$253>>2] = 20; //@line 757 "../hsp3/hsp3int.cpp"
    ___cxa_throw(($253|0),(624|0),(0|0)); //@line 757 "../hsp3/hsp3int.cpp"
    // unreachable; //@line 757 "../hsp3/hsp3int.cpp"
   }
   $254 = $p1; //@line 758 "../hsp3/hsp3int.cpp"
   $255 = $p3; //@line 758 "../hsp3/hsp3int.cpp"
   $256 = (($254) + ($255))|0; //@line 758 "../hsp3/hsp3int.cpp"
   $257 = HEAP32[$bufsize_s>>2]|0; //@line 758 "../hsp3/hsp3int.cpp"
   $258 = ($256|0)>($257|0); //@line 758 "../hsp3/hsp3int.cpp"
   if ($258) {
    $259 = (___cxa_allocate_exception(4)|0); //@line 758 "../hsp3/hsp3int.cpp"
    HEAP32[$259>>2] = 20; //@line 758 "../hsp3/hsp3int.cpp"
    ___cxa_throw(($259|0),(624|0),(0|0)); //@line 758 "../hsp3/hsp3int.cpp"
    // unreachable; //@line 758 "../hsp3/hsp3int.cpp"
   }
   $260 = $p1; //@line 759 "../hsp3/hsp3int.cpp"
   $261 = ($260|0)>(0); //@line 759 "../hsp3/hsp3int.cpp"
   if ($261) {
    $262 = $tptr; //@line 760 "../hsp3/hsp3int.cpp"
    $263 = $sptr; //@line 760 "../hsp3/hsp3int.cpp"
    $264 = $p1; //@line 760 "../hsp3/hsp3int.cpp"
    _memmove(($262|0),($263|0),($264|0))|0; //@line 760 "../hsp3/hsp3int.cpp"
   }
   STACKTOP = sp;return 0; //@line 969 "../hsp3/hsp3int.cpp"
   break;
  }
  case 28: case 27: case 26:  {
   $106 = (__Z12code_getvptrPP4PValPi($pval6,$size8)|0); //@line 650 "../hsp3/hsp3int.cpp"
   $ptr7 = $106; //@line 650 "../hsp3/hsp3int.cpp"
   $107 = (__Z10code_getdii(0)|0); //@line 651 "../hsp3/hsp3int.cpp"
   $p1 = $107; //@line 651 "../hsp3/hsp3int.cpp"
   $108 = $p1; //@line 652 "../hsp3/hsp3int.cpp"
   $109 = ($108|0)<(0); //@line 652 "../hsp3/hsp3int.cpp"
   if ($109) {
    $110 = (___cxa_allocate_exception(4)|0); //@line 652 "../hsp3/hsp3int.cpp"
    HEAP32[$110>>2] = 20; //@line 652 "../hsp3/hsp3int.cpp"
    ___cxa_throw(($110|0),(624|0),(0|0)); //@line 652 "../hsp3/hsp3int.cpp"
    // unreachable; //@line 652 "../hsp3/hsp3int.cpp"
   }
   $111 = $p1; //@line 653 "../hsp3/hsp3int.cpp"
   $112 = $ptr7; //@line 653 "../hsp3/hsp3int.cpp"
   $113 = (($112) + ($111)|0); //@line 653 "../hsp3/hsp3int.cpp"
   $ptr7 = $113; //@line 653 "../hsp3/hsp3int.cpp"
   $114 = (__Z8code_getv()|0); //@line 655 "../hsp3/hsp3int.cpp"
   $115 = ($114|0)<=(-2); //@line 655 "../hsp3/hsp3int.cpp"
   if ($115) {
    $fl = 4; //@line 656 "../hsp3/hsp3int.cpp"
    $bp = $p2; //@line 657 "../hsp3/hsp3int.cpp"
    HEAP32[$p2>>2] = 0; //@line 657 "../hsp3/hsp3int.cpp"
   } else {
    $116 = HEAP32[592>>2]|0; //@line 659 "../hsp3/hsp3int.cpp"
    $117 = HEAP16[$116>>1]|0; //@line 659 "../hsp3/hsp3int.cpp"
    $118 = $117 << 16 >> 16; //@line 659 "../hsp3/hsp3int.cpp"
    $fl = $118; //@line 659 "../hsp3/hsp3int.cpp"
    $119 = HEAP32[592>>2]|0; //@line 660 "../hsp3/hsp3int.cpp"
    $120 = (($119) + 28|0); //@line 660 "../hsp3/hsp3int.cpp"
    $121 = HEAP32[$120>>2]|0; //@line 660 "../hsp3/hsp3int.cpp"
    $bp = $121; //@line 660 "../hsp3/hsp3int.cpp"
   }
   $122 = $0; //@line 663 "../hsp3/hsp3int.cpp"
   $123 = ($122|0)==(26); //@line 663 "../hsp3/hsp3int.cpp"
   if ($123) {
    $124 = $fl; //@line 664 "../hsp3/hsp3int.cpp"
    do {
     if ((($124|0) == 2)) {
      $132 = $bp; //@line 670 "../hsp3/hsp3int.cpp"
      $133 = (_strlen(($132|0))|0); //@line 670 "../hsp3/hsp3int.cpp"
      $len = $133; //@line 670 "../hsp3/hsp3int.cpp"
      $134 = $len; //@line 671 "../hsp3/hsp3int.cpp"
      $135 = HEAP32[3320>>2]|0; //@line 671 "../hsp3/hsp3int.cpp"
      $136 = (($135) + 788|0); //@line 671 "../hsp3/hsp3int.cpp"
      HEAP32[$136>>2] = $134; //@line 671 "../hsp3/hsp3int.cpp"
      $137 = $len; //@line 672 "../hsp3/hsp3int.cpp"
      $138 = (($137) + 1)|0; //@line 672 "../hsp3/hsp3int.cpp"
      $len = $138; //@line 672 "../hsp3/hsp3int.cpp"
      $139 = $p1; //@line 673 "../hsp3/hsp3int.cpp"
      $140 = $len; //@line 673 "../hsp3/hsp3int.cpp"
      $141 = (($139) + ($140))|0; //@line 673 "../hsp3/hsp3int.cpp"
      $142 = HEAP32[$size8>>2]|0; //@line 673 "../hsp3/hsp3int.cpp"
      $143 = ($141|0)>($142|0); //@line 673 "../hsp3/hsp3int.cpp"
      if ($143) {
       $144 = (___cxa_allocate_exception(4)|0); //@line 673 "../hsp3/hsp3int.cpp"
       HEAP32[$144>>2] = 20; //@line 673 "../hsp3/hsp3int.cpp"
       ___cxa_throw(($144|0),(624|0),(0|0)); //@line 673 "../hsp3/hsp3int.cpp"
       // unreachable; //@line 673 "../hsp3/hsp3int.cpp"
      } else {
       $145 = $ptr7; //@line 674 "../hsp3/hsp3int.cpp"
       $146 = $bp; //@line 674 "../hsp3/hsp3int.cpp"
       (_strcpy(($145|0),($146|0))|0); //@line 674 "../hsp3/hsp3int.cpp"
       break;
      }
     } else if ((($124|0) == 4)) {
      $125 = $p1; //@line 666 "../hsp3/hsp3int.cpp"
      $126 = HEAP32[$size8>>2]|0; //@line 666 "../hsp3/hsp3int.cpp"
      $127 = ($125|0)>=($126|0); //@line 666 "../hsp3/hsp3int.cpp"
      if ($127) {
       $128 = (___cxa_allocate_exception(4)|0); //@line 666 "../hsp3/hsp3int.cpp"
       HEAP32[$128>>2] = 20; //@line 666 "../hsp3/hsp3int.cpp"
       ___cxa_throw(($128|0),(624|0),(0|0)); //@line 666 "../hsp3/hsp3int.cpp"
       // unreachable; //@line 666 "../hsp3/hsp3int.cpp"
      } else {
       $129 = $bp; //@line 667 "../hsp3/hsp3int.cpp"
       $130 = HEAP8[$129>>0]|0; //@line 667 "../hsp3/hsp3int.cpp"
       $131 = $ptr7; //@line 667 "../hsp3/hsp3int.cpp"
       HEAP8[$131>>0] = $130; //@line 667 "../hsp3/hsp3int.cpp"
       break;
      }
     } else {
      $147 = (___cxa_allocate_exception(4)|0); //@line 677 "../hsp3/hsp3int.cpp"
      HEAP32[$147>>2] = 6; //@line 677 "../hsp3/hsp3int.cpp"
      ___cxa_throw(($147|0),(624|0),(0|0)); //@line 677 "../hsp3/hsp3int.cpp"
      // unreachable; //@line 677 "../hsp3/hsp3int.cpp"
     }
    } while(0);
    STACKTOP = sp;return 0; //@line 969 "../hsp3/hsp3int.cpp"
   }
   $148 = $fl; //@line 682 "../hsp3/hsp3int.cpp"
   $149 = ($148|0)!=(4); //@line 682 "../hsp3/hsp3int.cpp"
   if ($149) {
    $150 = (___cxa_allocate_exception(4)|0); //@line 682 "../hsp3/hsp3int.cpp"
    HEAP32[$150>>2] = 6; //@line 682 "../hsp3/hsp3int.cpp"
    ___cxa_throw(($150|0),(624|0),(0|0)); //@line 682 "../hsp3/hsp3int.cpp"
    // unreachable; //@line 682 "../hsp3/hsp3int.cpp"
   }
   $151 = $0; //@line 683 "../hsp3/hsp3int.cpp"
   $152 = ($151|0)==(27); //@line 683 "../hsp3/hsp3int.cpp"
   do {
    if ($152) {
     $153 = $p1; //@line 684 "../hsp3/hsp3int.cpp"
     $154 = (($153) + 2)|0; //@line 684 "../hsp3/hsp3int.cpp"
     $155 = HEAP32[$size8>>2]|0; //@line 684 "../hsp3/hsp3int.cpp"
     $156 = ($154|0)>($155|0); //@line 684 "../hsp3/hsp3int.cpp"
     if ($156) {
      $157 = (___cxa_allocate_exception(4)|0); //@line 684 "../hsp3/hsp3int.cpp"
      HEAP32[$157>>2] = 20; //@line 684 "../hsp3/hsp3int.cpp"
      ___cxa_throw(($157|0),(624|0),(0|0)); //@line 684 "../hsp3/hsp3int.cpp"
      // unreachable; //@line 684 "../hsp3/hsp3int.cpp"
     } else {
      $158 = $bp; //@line 685 "../hsp3/hsp3int.cpp"
      $159 = HEAP16[$158>>1]|0; //@line 685 "../hsp3/hsp3int.cpp"
      $160 = $ptr7; //@line 685 "../hsp3/hsp3int.cpp"
      HEAP16[$160>>1] = $159; //@line 685 "../hsp3/hsp3int.cpp"
      break;
     }
    } else {
     $161 = $p1; //@line 687 "../hsp3/hsp3int.cpp"
     $162 = (($161) + 4)|0; //@line 687 "../hsp3/hsp3int.cpp"
     $163 = HEAP32[$size8>>2]|0; //@line 687 "../hsp3/hsp3int.cpp"
     $164 = ($162|0)>($163|0); //@line 687 "../hsp3/hsp3int.cpp"
     if ($164) {
      $165 = (___cxa_allocate_exception(4)|0); //@line 687 "../hsp3/hsp3int.cpp"
      HEAP32[$165>>2] = 20; //@line 687 "../hsp3/hsp3int.cpp"
      ___cxa_throw(($165|0),(624|0),(0|0)); //@line 687 "../hsp3/hsp3int.cpp"
      // unreachable; //@line 687 "../hsp3/hsp3int.cpp"
     } else {
      $166 = $bp; //@line 688 "../hsp3/hsp3int.cpp"
      $167 = HEAP32[$166>>2]|0; //@line 688 "../hsp3/hsp3int.cpp"
      $168 = $ptr7; //@line 688 "../hsp3/hsp3int.cpp"
      HEAP32[$168>>2] = $167; //@line 688 "../hsp3/hsp3int.cpp"
      break;
     }
    }
   } while(0);
   STACKTOP = sp;return 0; //@line 969 "../hsp3/hsp3int.cpp"
   break;
  }
  case 44:  {
   $518 = (+__Z9code_getdv()); //@line 958 "../hsp3/hsp3int.cpp"
   $dval = $518; //@line 958 "../hsp3/hsp3int.cpp"
   $519 = (+__Z9code_getdv()); //@line 959 "../hsp3/hsp3int.cpp"
   $dval2 = $519; //@line 959 "../hsp3/hsp3int.cpp"
   $520 = HEAP32[3368>>2]|0; //@line 960 "../hsp3/hsp3int.cpp"
   $521 = (__Z10code_getdii($520)|0); //@line 960 "../hsp3/hsp3int.cpp"
   $p1 = $521; //@line 960 "../hsp3/hsp3int.cpp"
   $522 = $p1; //@line 961 "../hsp3/hsp3int.cpp"
   $523 = $dval; //@line 961 "../hsp3/hsp3int.cpp"
   $524 = $dval2; //@line 961 "../hsp3/hsp3int.cpp"
   __ZL7setEaseidd($522,$523,$524); //@line 961 "../hsp3/hsp3int.cpp"
   STACKTOP = sp;return 0; //@line 969 "../hsp3/hsp3int.cpp"
   break;
  }
  case 43:  {
   $492 = (__Z10code_getvaPP4PVal($pval32)|0); //@line 939 "../hsp3/hsp3int.cpp"
   $aptr33 = $492; //@line 939 "../hsp3/hsp3int.cpp"
   $493 = HEAP32[$pval32>>2]|0; //@line 940 "../hsp3/hsp3int.cpp"
   $494 = HEAP16[$493>>1]|0; //@line 940 "../hsp3/hsp3int.cpp"
   $495 = $494 << 16 >> 16; //@line 940 "../hsp3/hsp3int.cpp"
   $496 = ($495|0)!=(2); //@line 940 "../hsp3/hsp3int.cpp"
   if ($496) {
    $497 = (___cxa_allocate_exception(4)|0); //@line 940 "../hsp3/hsp3int.cpp"
    HEAP32[$497>>2] = 6; //@line 940 "../hsp3/hsp3int.cpp"
    ___cxa_throw(($497|0),(624|0),(0|0)); //@line 940 "../hsp3/hsp3int.cpp"
    // unreachable; //@line 940 "../hsp3/hsp3int.cpp"
   }
   $498 = HEAP32[$pval32>>2]|0; //@line 941 "../hsp3/hsp3int.cpp"
   $499 = $aptr33; //@line 941 "../hsp3/hsp3int.cpp"
   $500 = (__Z17HspVarCorePtrAPTRP4PVali($498,$499)|0); //@line 941 "../hsp3/hsp3int.cpp"
   $s_buffer = $500; //@line 941 "../hsp3/hsp3int.cpp"
   $501 = (__Z9code_getsv()|0); //@line 943 "../hsp3/hsp3int.cpp"
   $ss = $501; //@line 943 "../hsp3/hsp3int.cpp"
   $502 = $ss; //@line 944 "../hsp3/hsp3int.cpp"
   $503 = HEAP8[$502>>0]|0; //@line 944 "../hsp3/hsp3int.cpp"
   $504 = $503 << 24 >> 24; //@line 944 "../hsp3/hsp3int.cpp"
   $505 = ($504|0)==(0); //@line 944 "../hsp3/hsp3int.cpp"
   if ($505) {
    $506 = (___cxa_allocate_exception(4)|0); //@line 944 "../hsp3/hsp3int.cpp"
    HEAP32[$506>>2] = 3; //@line 944 "../hsp3/hsp3int.cpp"
    ___cxa_throw(($506|0),(624|0),(0|0)); //@line 944 "../hsp3/hsp3int.cpp"
    // unreachable; //@line 944 "../hsp3/hsp3int.cpp"
   }
   $507 = $s_buffer; //@line 945 "../hsp3/hsp3int.cpp"
   $508 = $ss; //@line 945 "../hsp3/hsp3int.cpp"
   __Z15ReplaceSetMatchPcS_($507,$508); //@line 945 "../hsp3/hsp3int.cpp"
   $509 = (__Z9code_getsv()|0); //@line 947 "../hsp3/hsp3int.cpp"
   $s_rep = $509; //@line 947 "../hsp3/hsp3int.cpp"
   $510 = $s_rep; //@line 948 "../hsp3/hsp3int.cpp"
   $511 = (__Z10ReplaceStrPc($510)|0); //@line 948 "../hsp3/hsp3int.cpp"
   $s_result = $511; //@line 948 "../hsp3/hsp3int.cpp"
   $512 = HEAP32[$pval32>>2]|0; //@line 949 "../hsp3/hsp3int.cpp"
   $513 = $aptr33; //@line 949 "../hsp3/hsp3int.cpp"
   $514 = $s_result; //@line 949 "../hsp3/hsp3int.cpp"
   __Z10code_setvaP4PValiiPKv($512,$513,2,$514); //@line 949 "../hsp3/hsp3int.cpp"
   $515 = (__Z11ReplaceDonev()|0); //@line 950 "../hsp3/hsp3int.cpp"
   $516 = HEAP32[3320>>2]|0; //@line 950 "../hsp3/hsp3int.cpp"
   $517 = (($516) + 784|0); //@line 950 "../hsp3/hsp3int.cpp"
   HEAP32[$517>>2] = $515; //@line 950 "../hsp3/hsp3int.cpp"
   STACKTOP = sp;return 0; //@line 969 "../hsp3/hsp3int.cpp"
   break;
  }
  case 25:  {
   $94 = (__Z12code_getvptrPP4PValPi($pval3,$size5)|0); //@line 632 "../hsp3/hsp3int.cpp"
   $ptr4 = $94; //@line 632 "../hsp3/hsp3int.cpp"
   $95 = (__Z10code_getdii(0)|0); //@line 633 "../hsp3/hsp3int.cpp"
   $p1 = $95; //@line 633 "../hsp3/hsp3int.cpp"
   $96 = (__Z10code_getdii(0)|0); //@line 634 "../hsp3/hsp3int.cpp"
   HEAP32[$p2>>2] = $96; //@line 634 "../hsp3/hsp3int.cpp"
   $97 = HEAP32[$p2>>2]|0; //@line 635 "../hsp3/hsp3int.cpp"
   $98 = ($97|0)==(0); //@line 635 "../hsp3/hsp3int.cpp"
   if ($98) {
    $99 = HEAP32[$size5>>2]|0; //@line 635 "../hsp3/hsp3int.cpp"
    $100 = $p1; //@line 635 "../hsp3/hsp3int.cpp"
    $101 = (($99) - ($100))|0; //@line 635 "../hsp3/hsp3int.cpp"
    HEAP32[$p2>>2] = $101; //@line 635 "../hsp3/hsp3int.cpp"
   }
   $102 = $ptr4; //@line 636 "../hsp3/hsp3int.cpp"
   $103 = $p1; //@line 636 "../hsp3/hsp3int.cpp"
   $104 = (($102) + ($103)|0); //@line 636 "../hsp3/hsp3int.cpp"
   $105 = HEAP32[$p2>>2]|0; //@line 636 "../hsp3/hsp3int.cpp"
   __Z11dpm_memfilePvi($104,$105); //@line 636 "../hsp3/hsp3int.cpp"
   STACKTOP = sp;return 0; //@line 969 "../hsp3/hsp3int.cpp"
   break;
  }
  case 24:  {
   $92 = (__Z9code_getsv()|0); //@line 624 "../hsp3/hsp3int.cpp"
   (__Z10code_eventiiiPv(5,0,0,$92)|0); //@line 624 "../hsp3/hsp3int.cpp"
   $93 = (__Z9code_getsv()|0); //@line 625 "../hsp3/hsp3int.cpp"
   (__Z10code_eventiiiPv(12,0,0,$93)|0); //@line 625 "../hsp3/hsp3int.cpp"
   STACKTOP = sp;return 0; //@line 969 "../hsp3/hsp3int.cpp"
   break;
  }
  case 21:  {
   $64 = (__Z10code_getvaPP4PVal($pval)|0); //@line 595 "../hsp3/hsp3int.cpp"
   $aptr = $64; //@line 595 "../hsp3/hsp3int.cpp"
   $65 = (__Z9code_getsv()|0); //@line 596 "../hsp3/hsp3int.cpp"
   (__Z10code_eventiiiPv(5,0,0,$65)|0); //@line 596 "../hsp3/hsp3int.cpp"
   $66 = (__Z10code_getdii(0)|0); //@line 597 "../hsp3/hsp3int.cpp"
   $p1 = $66; //@line 597 "../hsp3/hsp3int.cpp"
   $67 = $p1; //@line 598 "../hsp3/hsp3int.cpp"
   (__Z10code_eventiiiPv(13,$67,0,$ptr)|0); //@line 598 "../hsp3/hsp3int.cpp"
   $68 = HEAP32[$pval>>2]|0; //@line 599 "../hsp3/hsp3int.cpp"
   $69 = $aptr; //@line 599 "../hsp3/hsp3int.cpp"
   $70 = HEAP32[$ptr>>2]|0; //@line 599 "../hsp3/hsp3int.cpp"
   __Z10code_setvaP4PValiiPKv($68,$69,2,$70); //@line 599 "../hsp3/hsp3int.cpp"
   (__Z10code_eventiiiPv(14,0,0,0)|0); //@line 600 "../hsp3/hsp3int.cpp"
   STACKTOP = sp;return 0; //@line 969 "../hsp3/hsp3int.cpp"
   break;
  }
  case 4: case 3: case 2: case 1: case 0:  {
   $2 = HEAP32[3336>>2]|0; //@line 541 "../hsp3/hsp3int.cpp"
   $3 = HEAP32[$2>>2]|0; //@line 541 "../hsp3/hsp3int.cpp"
   $tval = $3; //@line 541 "../hsp3/hsp3int.cpp"
   $opt = 0; //@line 542 "../hsp3/hsp3int.cpp"
   $4 = $tval; //@line 548 "../hsp3/hsp3int.cpp"
   $5 = ($4|0)==(1); //@line 548 "../hsp3/hsp3int.cpp"
   if ($5) {
    $6 = HEAP32[3320>>2]|0; //@line 549 "../hsp3/hsp3int.cpp"
    $7 = (($6) + 44|0); //@line 549 "../hsp3/hsp3int.cpp"
    $8 = HEAP32[$7>>2]|0; //@line 549 "../hsp3/hsp3int.cpp"
    $9 = HEAP32[3344>>2]|0; //@line 549 "../hsp3/hsp3int.cpp"
    $10 = HEAP32[$9>>2]|0; //@line 549 "../hsp3/hsp3int.cpp"
    $11 = (($8) + (($10*48)|0)|0); //@line 549 "../hsp3/hsp3int.cpp"
    $12 = HEAP16[$11>>1]|0; //@line 549 "../hsp3/hsp3int.cpp"
    $13 = $12 << 16 >> 16; //@line 549 "../hsp3/hsp3int.cpp"
    $14 = ($13|0)==(1); //@line 549 "../hsp3/hsp3int.cpp"
    if ($14) {
     $tval = 7; //@line 550 "../hsp3/hsp3int.cpp"
    }
   }
   $15 = $tval; //@line 553 "../hsp3/hsp3int.cpp"
   $16 = ($15|0)!=(15); //@line 553 "../hsp3/hsp3int.cpp"
   if ($16) {
    $17 = $tval; //@line 553 "../hsp3/hsp3int.cpp"
    $18 = ($17|0)!=(7); //@line 553 "../hsp3/hsp3int.cpp"
    if ($18) {
     $19 = (__Z9code_getiv()|0); //@line 554 "../hsp3/hsp3int.cpp"
     $i = $19; //@line 554 "../hsp3/hsp3int.cpp"
     $20 = $0; //@line 555 "../hsp3/hsp3int.cpp"
     $21 = $i; //@line 555 "../hsp3/hsp3int.cpp"
     __Z14code_enableirqii($20,$21); //@line 555 "../hsp3/hsp3int.cpp"
     STACKTOP = sp;return 0; //@line 969 "../hsp3/hsp3int.cpp"
    }
   }
   $22 = $tval; //@line 559 "../hsp3/hsp3int.cpp"
   $23 = ($22|0)==(15); //@line 559 "../hsp3/hsp3int.cpp"
   do {
    if ($23) {
     $24 = HEAP32[3344>>2]|0; //@line 560 "../hsp3/hsp3int.cpp"
     $25 = HEAP32[$24>>2]|0; //@line 560 "../hsp3/hsp3int.cpp"
     $opt = $25; //@line 560 "../hsp3/hsp3int.cpp"
     $26 = $opt; //@line 561 "../hsp3/hsp3int.cpp"
     $27 = ($26|0)>=(2); //@line 561 "../hsp3/hsp3int.cpp"
     if ($27) {
      $28 = (___cxa_allocate_exception(4)|0); //@line 561 "../hsp3/hsp3int.cpp"
      HEAP32[$28>>2] = 2; //@line 561 "../hsp3/hsp3int.cpp"
      ___cxa_throw(($28|0),(624|0),(0|0)); //@line 561 "../hsp3/hsp3int.cpp"
      // unreachable; //@line 561 "../hsp3/hsp3int.cpp"
     } else {
      __Z9code_nextv(); //@line 562 "../hsp3/hsp3int.cpp"
      break;
     }
    }
   } while(0);
   $29 = (__Z11code_getlb2v()|0); //@line 565 "../hsp3/hsp3int.cpp"
   $sbr = $29; //@line 565 "../hsp3/hsp3int.cpp"
   $30 = $0; //@line 566 "../hsp3/hsp3int.cpp"
   $31 = ($30|0)!=(4); //@line 566 "../hsp3/hsp3int.cpp"
   if ($31) {
    $32 = $0; //@line 567 "../hsp3/hsp3int.cpp"
    $33 = $opt; //@line 567 "../hsp3/hsp3int.cpp"
    $34 = $sbr; //@line 567 "../hsp3/hsp3int.cpp"
    __Z11code_setirqiiiPt($32,$33,-1,$34); //@line 567 "../hsp3/hsp3int.cpp"
    STACKTOP = sp;return 0; //@line 969 "../hsp3/hsp3int.cpp"
   }
   $35 = (__Z9code_getiv()|0); //@line 570 "../hsp3/hsp3int.cpp"
   $cust = $35; //@line 570 "../hsp3/hsp3int.cpp"
   $36 = HEAP32[3328>>2]|0; //@line 571 "../hsp3/hsp3int.cpp"
   $37 = (($36) + 20|0); //@line 571 "../hsp3/hsp3int.cpp"
   $38 = HEAP32[$37>>2]|0; //@line 571 "../hsp3/hsp3int.cpp"
   $39 = HEAP32[$38>>2]|0; //@line 571 "../hsp3/hsp3int.cpp"
   $actid = $39; //@line 571 "../hsp3/hsp3int.cpp"
   $40 = $actid; //@line 572 "../hsp3/hsp3int.cpp"
   $41 = $cust; //@line 572 "../hsp3/hsp3int.cpp"
   $42 = (__Z12code_seekirqii($40,$41)|0); //@line 572 "../hsp3/hsp3int.cpp"
   $irq = $42; //@line 572 "../hsp3/hsp3int.cpp"
   $43 = $irq; //@line 573 "../hsp3/hsp3int.cpp"
   $44 = ($43|0)==(0|0); //@line 573 "../hsp3/hsp3int.cpp"
   if ($44) {
    $45 = (__Z11code_addirqv()|0); //@line 573 "../hsp3/hsp3int.cpp"
    $irq = $45; //@line 573 "../hsp3/hsp3int.cpp"
   }
   $46 = $irq; //@line 574 "../hsp3/hsp3int.cpp"
   HEAP16[$46>>1] = 2; //@line 574 "../hsp3/hsp3int.cpp"
   $47 = $opt; //@line 575 "../hsp3/hsp3int.cpp"
   $48 = $47&65535; //@line 575 "../hsp3/hsp3int.cpp"
   $49 = $irq; //@line 575 "../hsp3/hsp3int.cpp"
   $50 = (($49) + 2|0); //@line 575 "../hsp3/hsp3int.cpp"
   HEAP16[$50>>1] = $48; //@line 575 "../hsp3/hsp3int.cpp"
   $51 = $sbr; //@line 576 "../hsp3/hsp3int.cpp"
   $52 = $irq; //@line 576 "../hsp3/hsp3int.cpp"
   $53 = (($52) + 16|0); //@line 576 "../hsp3/hsp3int.cpp"
   HEAP32[$53>>2] = $51; //@line 576 "../hsp3/hsp3int.cpp"
   $54 = $cust; //@line 577 "../hsp3/hsp3int.cpp"
   $55 = $irq; //@line 577 "../hsp3/hsp3int.cpp"
   $56 = (($55) + 4|0); //@line 577 "../hsp3/hsp3int.cpp"
   HEAP32[$56>>2] = $54; //@line 577 "../hsp3/hsp3int.cpp"
   $57 = $actid; //@line 578 "../hsp3/hsp3int.cpp"
   $58 = $irq; //@line 578 "../hsp3/hsp3int.cpp"
   $59 = (($58) + 8|0); //@line 578 "../hsp3/hsp3int.cpp"
   HEAP32[$59>>2] = $57; //@line 578 "../hsp3/hsp3int.cpp"
   STACKTOP = sp;return 0; //@line 969 "../hsp3/hsp3int.cpp"
   break;
  }
  case 20: case 19: case 18: case 17:  {
   $60 = (__Z9code_getsv()|0); //@line 586 "../hsp3/hsp3int.cpp"
   (__Z10code_eventiiiPv(5,0,0,$60)|0); //@line 586 "../hsp3/hsp3int.cpp"
   $61 = $0; //@line 587 "../hsp3/hsp3int.cpp"
   $62 = (($61) - 17)|0; //@line 587 "../hsp3/hsp3int.cpp"
   $63 = (8 + ($62))|0; //@line 587 "../hsp3/hsp3int.cpp"
   (__Z10code_eventiiiPv($63,0,0,0)|0); //@line 587 "../hsp3/hsp3int.cpp"
   STACKTOP = sp;return 0; //@line 969 "../hsp3/hsp3int.cpp"
   break;
  }
  case 23: case 22:  {
   $71 = (__Z9code_getsv()|0); //@line 610 "../hsp3/hsp3int.cpp"
   (__Z10code_eventiiiPv(5,0,0,$71)|0); //@line 610 "../hsp3/hsp3int.cpp"
   $72 = (__Z12code_getvptrPP4PValPi($pval1,$size)|0); //@line 611 "../hsp3/hsp3int.cpp"
   $ptr2 = $72; //@line 611 "../hsp3/hsp3int.cpp"
   $73 = (__Z10code_getdii(-1)|0); //@line 612 "../hsp3/hsp3int.cpp"
   $p1 = $73; //@line 612 "../hsp3/hsp3int.cpp"
   $74 = (__Z10code_getdii(-1)|0); //@line 613 "../hsp3/hsp3int.cpp"
   HEAP32[$p2>>2] = $74; //@line 613 "../hsp3/hsp3int.cpp"
   $75 = $p1; //@line 614 "../hsp3/hsp3int.cpp"
   $76 = ($75|0)<(0); //@line 614 "../hsp3/hsp3int.cpp"
   if ($76) {
    label = 22;
   } else {
    $77 = $p1; //@line 614 "../hsp3/hsp3int.cpp"
    $78 = HEAP32[$size>>2]|0; //@line 614 "../hsp3/hsp3int.cpp"
    $79 = ($77|0)>($78|0); //@line 614 "../hsp3/hsp3int.cpp"
    if ($79) {
     label = 22;
    }
   }
   if ((label|0) == 22) {
    $80 = HEAP32[$size>>2]|0; //@line 614 "../hsp3/hsp3int.cpp"
    $p1 = $80; //@line 614 "../hsp3/hsp3int.cpp"
   }
   $81 = $0; //@line 615 "../hsp3/hsp3int.cpp"
   $82 = ($81|0)==(22); //@line 615 "../hsp3/hsp3int.cpp"
   if ($82) {
    $83 = HEAP32[$p2>>2]|0; //@line 616 "../hsp3/hsp3int.cpp"
    $tmpsize = $83; //@line 616 "../hsp3/hsp3int.cpp"
    $84 = $tmpsize; //@line 616 "../hsp3/hsp3int.cpp"
    $85 = ($84|0)<(0); //@line 616 "../hsp3/hsp3int.cpp"
    if ($85) {
     $tmpsize = 0; //@line 616 "../hsp3/hsp3int.cpp"
    }
    $86 = $tmpsize; //@line 617 "../hsp3/hsp3int.cpp"
    $87 = $p1; //@line 617 "../hsp3/hsp3int.cpp"
    $88 = $ptr2; //@line 617 "../hsp3/hsp3int.cpp"
    (__Z10code_eventiiiPv(6,$86,$87,$88)|0); //@line 617 "../hsp3/hsp3int.cpp"
   } else {
    $89 = HEAP32[$p2>>2]|0; //@line 619 "../hsp3/hsp3int.cpp"
    $90 = $p1; //@line 619 "../hsp3/hsp3int.cpp"
    $91 = $ptr2; //@line 619 "../hsp3/hsp3int.cpp"
    (__Z10code_eventiiiPv(7,$89,$90,$91)|0); //@line 619 "../hsp3/hsp3int.cpp"
   }
   STACKTOP = sp;return 0; //@line 969 "../hsp3/hsp3int.cpp"
   break;
  }
  default: {
   $525 = (___cxa_allocate_exception(4)|0); //@line 967 "../hsp3/hsp3int.cpp"
   HEAP32[$525>>2] = 21; //@line 967 "../hsp3/hsp3int.cpp"
   ___cxa_throw(($525|0),(624|0),(0|0)); //@line 967 "../hsp3/hsp3int.cpp"
   // unreachable; //@line 967 "../hsp3/hsp3int.cpp"
  }
  }
 } while(0);
 return 0|0;
}
function __ZL15termfunc_intcmdi($option) {
 $option = $option|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $option;
 STACKTOP = sp;return 0; //@line 1364 "../hsp3/hsp3int.cpp"
}
function __Z20hsp3typeinit_intfuncP12HSP3TYPEINFO($info) {
 $info = $info|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $info;
 $1 = $0; //@line 1381 "../hsp3/hsp3int.cpp"
 $2 = (($1) + 16|0); //@line 1381 "../hsp3/hsp3int.cpp"
 HEAP32[$2>>2] = 86; //@line 1381 "../hsp3/hsp3int.cpp"
 STACKTOP = sp;return; //@line 1382 "../hsp3/hsp3int.cpp"
}
function __ZL15reffunc_intfuncPii($type_res,$arg) {
 $type_res = $type_res|0;
 $arg = $arg|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0.0, $27 = 0, $270 = 0.0, $271 = 0.0, $272 = 0.0, $273 = 0.0, $274 = 0.0, $275 = 0.0, $276 = 0.0, $277 = 0.0, $278 = 0.0;
 var $279 = 0.0, $28 = 0, $280 = 0.0, $281 = 0.0, $282 = 0.0, $283 = 0.0, $284 = 0.0, $285 = 0.0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0.0, $294 = 0.0, $295 = 0.0, $296 = 0;
 var $297 = 0.0, $298 = 0.0, $299 = 0.0, $3 = 0, $30 = 0, $300 = 0.0, $301 = 0.0, $302 = 0.0, $303 = 0.0, $304 = 0.0, $305 = 0.0, $306 = 0.0, $307 = 0.0, $308 = 0.0, $309 = 0.0, $31 = 0, $310 = 0, $311 = 0.0, $312 = 0.0, $313 = 0.0;
 var $314 = 0, $315 = 0.0, $316 = 0.0, $317 = 0.0, $318 = 0.0, $319 = 0.0, $32 = 0, $320 = 0.0, $321 = 0.0, $322 = 0.0, $323 = 0.0, $324 = 0.0, $325 = 0, $326 = 0.0, $327 = 0.0, $328 = 0.0, $329 = 0.0, $33 = 0, $330 = 0.0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $aptr = 0, $aptr5 = 0, $chk = 0, $chrtmp = 0, $d1 = 0.0, $d2 = 0.0, $d3 = 0.0, $dp = 0, $dval = 0.0, $dval2 = 0.0, $i = 0, $ip = 0, $ival = 0, $p = 0, $p1 = 0, $p110 = 0, $p13 = 0, $p16 = 0, $p2 = 0;
 var $p3 = 0, $pathname = 0, $pdat = 0, $pdat6 = 0, $proc = 0, $ps = 0, $ps2 = 0, $ptr = 0, $ptr2 = 0, $ptr8 = 0, $pv = 0, $pv1 = 0, $pval = 0, $pval11 = 0, $pval14 = 0, $pval3 = 0, $pval4 = 0, $pval7 = 0, $size = 0, $size12 = 0;
 var $size17 = 0, $size9 = 0, $slen = 0, $sp = 0, $sptr = 0, $sptr15 = 0, $st = 0, $sval = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 480|0;
 $pv1 = sp + 204|0;
 $pval = sp + 152|0;
 $size = sp + 144|0;
 $pval3 = sp + 140|0;
 $pval4 = sp + 124|0;
 $pval7 = sp + 44|0;
 $size9 = sp + 80|0;
 $pval11 = sp + 40|0;
 $size12 = sp + 64|0;
 $pathname = sp + 216|0;
 $pval14 = sp + 92|0;
 $size17 = sp + 104|0;
 $0 = $type_res;
 $1 = $arg;
 $2 = HEAP32[3336>>2]|0; //@line 990 "../hsp3/hsp3int.cpp"
 $3 = HEAP32[$2>>2]|0; //@line 990 "../hsp3/hsp3int.cpp"
 $4 = ($3|0)!=(0); //@line 990 "../hsp3/hsp3int.cpp"
 if ($4) {
  $5 = (___cxa_allocate_exception(4)|0); //@line 990 "../hsp3/hsp3int.cpp"
  HEAP32[$5>>2] = 32; //@line 990 "../hsp3/hsp3int.cpp"
  ___cxa_throw(($5|0),(624|0),(0|0)); //@line 990 "../hsp3/hsp3int.cpp"
  // unreachable; //@line 990 "../hsp3/hsp3int.cpp"
 }
 $6 = HEAP32[3344>>2]|0; //@line 991 "../hsp3/hsp3int.cpp"
 $7 = HEAP32[$6>>2]|0; //@line 991 "../hsp3/hsp3int.cpp"
 $8 = ($7|0)!=(40); //@line 991 "../hsp3/hsp3int.cpp"
 if ($8) {
  $9 = (___cxa_allocate_exception(4)|0); //@line 991 "../hsp3/hsp3int.cpp"
  HEAP32[$9>>2] = 32; //@line 991 "../hsp3/hsp3int.cpp"
  ___cxa_throw(($9|0),(624|0),(0|0)); //@line 991 "../hsp3/hsp3int.cpp"
  // unreachable; //@line 991 "../hsp3/hsp3int.cpp"
 }
 __Z9code_nextv(); //@line 992 "../hsp3/hsp3int.cpp"
 $10 = $1; //@line 999 "../hsp3/hsp3int.cpp"
 $11 = $10 >> 7; //@line 999 "../hsp3/hsp3int.cpp"
 if ((($11|0) == 3)) {
  $13 = $0; //@line 1005 "../hsp3/hsp3int.cpp"
  HEAP32[$13>>2] = 3; //@line 1005 "../hsp3/hsp3int.cpp"
  $ptr = 3352; //@line 1006 "../hsp3/hsp3int.cpp"
 } else if ((($11|0) == 2)) {
  $12 = $0; //@line 1001 "../hsp3/hsp3int.cpp"
  HEAP32[$12>>2] = 2; //@line 1001 "../hsp3/hsp3int.cpp"
  $ptr = 0; //@line 1002 "../hsp3/hsp3int.cpp"
 } else {
  $14 = $0; //@line 1009 "../hsp3/hsp3int.cpp"
  HEAP32[$14>>2] = 4; //@line 1009 "../hsp3/hsp3int.cpp"
  $ptr = 3360; //@line 1010 "../hsp3/hsp3int.cpp"
 }
 $15 = $1; //@line 1014 "../hsp3/hsp3int.cpp"
 L12: do {
  switch ($15|0) {
  case 390:  {
   $294 = (+__Z9code_getdv()); //@line 1300 "../hsp3/hsp3int.cpp"
   HEAPF64[3352>>3] = $294; //@line 1300 "../hsp3/hsp3int.cpp"
   $295 = +HEAPF64[3352>>3]; //@line 1301 "../hsp3/hsp3int.cpp"
   $296 = $295 < 0.0; //@line 1301 "../hsp3/hsp3int.cpp"
   if ($296) {
    $297 = +HEAPF64[3352>>3]; //@line 1301 "../hsp3/hsp3int.cpp"
    $298 = -$297; //@line 1301 "../hsp3/hsp3int.cpp"
    HEAPF64[3352>>3] = $298; //@line 1301 "../hsp3/hsp3int.cpp"
   }
   break;
  }
  case 394:  {
   $317 = (+__Z9code_getdv()); //@line 1323 "../hsp3/hsp3int.cpp"
   $dval = $317; //@line 1323 "../hsp3/hsp3int.cpp"
   $318 = (+__Z9code_getdv()); //@line 1324 "../hsp3/hsp3int.cpp"
   $dval2 = $318; //@line 1324 "../hsp3/hsp3int.cpp"
   $319 = $dval; //@line 1325 "../hsp3/hsp3int.cpp"
   $320 = $dval2; //@line 1325 "../hsp3/hsp3int.cpp"
   $321 = (+Math_pow((+$319),(+$320))); //@line 1325 "../hsp3/hsp3int.cpp"
   HEAPF64[3352>>3] = $321; //@line 1325 "../hsp3/hsp3int.cpp"
   break;
  }
  case 395:  {
   $322 = (+__Z9code_getdv()); //@line 1328 "../hsp3/hsp3int.cpp"
   $dval = $322; //@line 1328 "../hsp3/hsp3int.cpp"
   $323 = (+__Z10code_getddd(1.0)); //@line 1329 "../hsp3/hsp3int.cpp"
   $dval2 = $323; //@line 1329 "../hsp3/hsp3int.cpp"
   $324 = $dval2; //@line 1330 "../hsp3/hsp3int.cpp"
   $325 = $324 == 1.0; //@line 1330 "../hsp3/hsp3int.cpp"
   if ($325) {
    $326 = $dval; //@line 1331 "../hsp3/hsp3int.cpp"
    $327 = (+__ZL7getEased($326)); //@line 1331 "../hsp3/hsp3int.cpp"
    HEAPF64[3352>>3] = $327; //@line 1331 "../hsp3/hsp3int.cpp"
   } else {
    $328 = $dval; //@line 1333 "../hsp3/hsp3int.cpp"
    $329 = $dval2; //@line 1333 "../hsp3/hsp3int.cpp"
    $330 = (+__ZL7getEasedd($328,$329)); //@line 1333 "../hsp3/hsp3int.cpp"
    HEAPF64[3352>>3] = $330; //@line 1333 "../hsp3/hsp3int.cpp"
   }
   break;
  }
  case 387:  {
   $278 = (+__Z9code_getdv()); //@line 1282 "../hsp3/hsp3int.cpp"
   $dval = $278; //@line 1282 "../hsp3/hsp3int.cpp"
   $279 = (+__Z10code_getddd(1.0)); //@line 1283 "../hsp3/hsp3int.cpp"
   $dval2 = $279; //@line 1283 "../hsp3/hsp3int.cpp"
   $280 = $dval; //@line 1284 "../hsp3/hsp3int.cpp"
   $281 = $dval2; //@line 1284 "../hsp3/hsp3int.cpp"
   $282 = (+Math_atan2((+$280),(+$281))); //@line 1284 "../hsp3/hsp3int.cpp"
   HEAPF64[3352>>3] = $282; //@line 1284 "../hsp3/hsp3int.cpp"
   break;
  }
  case 393:  {
   $305 = (+__Z9code_getdv()); //@line 1314 "../hsp3/hsp3int.cpp"
   $d1 = $305; //@line 1314 "../hsp3/hsp3int.cpp"
   $306 = (+__Z9code_getdv()); //@line 1315 "../hsp3/hsp3int.cpp"
   $d2 = $306; //@line 1315 "../hsp3/hsp3int.cpp"
   $307 = (+__Z9code_getdv()); //@line 1316 "../hsp3/hsp3int.cpp"
   $d3 = $307; //@line 1316 "../hsp3/hsp3int.cpp"
   $308 = $d1; //@line 1317 "../hsp3/hsp3int.cpp"
   $309 = $d2; //@line 1317 "../hsp3/hsp3int.cpp"
   $310 = $308 < $309; //@line 1317 "../hsp3/hsp3int.cpp"
   if ($310) {
    $311 = $d2; //@line 1317 "../hsp3/hsp3int.cpp"
    $d1 = $311; //@line 1317 "../hsp3/hsp3int.cpp"
   }
   $312 = $d1; //@line 1318 "../hsp3/hsp3int.cpp"
   $313 = $d3; //@line 1318 "../hsp3/hsp3int.cpp"
   $314 = $312 > $313; //@line 1318 "../hsp3/hsp3int.cpp"
   if ($314) {
    $315 = $d3; //@line 1318 "../hsp3/hsp3int.cpp"
    $d1 = $315; //@line 1318 "../hsp3/hsp3int.cpp"
   }
   $316 = $d1; //@line 1319 "../hsp3/hsp3int.cpp"
   HEAPF64[3352>>3] = $316; //@line 1319 "../hsp3/hsp3int.cpp"
   break;
  }
  case 17:  {
   $172 = (__Z9code_getiv()|0); //@line 1168 "../hsp3/hsp3int.cpp"
   $p1 = $172; //@line 1168 "../hsp3/hsp3int.cpp"
   $173 = (__Z9code_getiv()|0); //@line 1169 "../hsp3/hsp3int.cpp"
   $p2 = $173; //@line 1169 "../hsp3/hsp3int.cpp"
   $174 = (__Z9code_getiv()|0); //@line 1170 "../hsp3/hsp3int.cpp"
   $p3 = $174; //@line 1170 "../hsp3/hsp3int.cpp"
   $175 = $p1; //@line 1171 "../hsp3/hsp3int.cpp"
   $176 = $p2; //@line 1171 "../hsp3/hsp3int.cpp"
   $177 = $p3; //@line 1171 "../hsp3/hsp3int.cpp"
   $178 = (__Z8GetLimitiii($175,$176,$177)|0); //@line 1171 "../hsp3/hsp3int.cpp"
   HEAP32[3360>>2] = $178; //@line 1171 "../hsp3/hsp3int.cpp"
   break;
  }
  case 18:  {
   $179 = (__Z9code_getiv()|0); //@line 1175 "../hsp3/hsp3int.cpp"
   $p1 = $179; //@line 1175 "../hsp3/hsp3int.cpp"
   $180 = (__Z10code_getdii(-1)|0); //@line 1176 "../hsp3/hsp3int.cpp"
   $p2 = $180; //@line 1176 "../hsp3/hsp3int.cpp"
   $181 = $p1; //@line 1177 "../hsp3/hsp3int.cpp"
   $182 = $p2; //@line 1177 "../hsp3/hsp3int.cpp"
   $183 = (__ZL10getEaseIntii($181,$182)|0); //@line 1177 "../hsp3/hsp3int.cpp"
   HEAP32[3360>>2] = $183; //@line 1177 "../hsp3/hsp3int.cpp"
   break;
  }
  case 14:  {
   $135 = (__Z10code_getdii(0)|0); //@line 1121 "../hsp3/hsp3int.cpp"
   $ival = $135; //@line 1121 "../hsp3/hsp3int.cpp"
   (__ZL11note_updatev()|0); //@line 1122 "../hsp3/hsp3int.cpp"
   $136 = $ival; //@line 1123 "../hsp3/hsp3int.cpp"
   if ((($136|0) == 0)) {
    $137 = (__ZN8CStrNote10GetMaxLineEv(3296)|0); //@line 1125 "../hsp3/hsp3int.cpp"
    HEAP32[3360>>2] = $137; //@line 1125 "../hsp3/hsp3int.cpp"
   } else if ((($136|0) == 1)) {
    $138 = (__ZN8CStrNote7GetSizeEv(3296)|0); //@line 1128 "../hsp3/hsp3int.cpp"
    HEAP32[3360>>2] = $138; //@line 1128 "../hsp3/hsp3int.cpp"
   } else {
    $139 = (___cxa_allocate_exception(4)|0); //@line 1131 "../hsp3/hsp3int.cpp"
    HEAP32[$139>>2] = 3; //@line 1131 "../hsp3/hsp3int.cpp"
    ___cxa_throw(($139|0),(624|0),(0|0)); //@line 1131 "../hsp3/hsp3int.cpp"
    // unreachable; //@line 1131 "../hsp3/hsp3int.cpp"
   }
   break;
  }
  case 16:  {
   $167 = (__Z9code_getiv()|0); //@line 1163 "../hsp3/hsp3int.cpp"
   HEAP32[3360>>2] = $167; //@line 1163 "../hsp3/hsp3int.cpp"
   $168 = HEAP32[3360>>2]|0; //@line 1164 "../hsp3/hsp3int.cpp"
   $169 = ($168|0)<(0); //@line 1164 "../hsp3/hsp3int.cpp"
   if ($169) {
    $170 = HEAP32[3360>>2]|0; //@line 1164 "../hsp3/hsp3int.cpp"
    $171 = (0 - ($170))|0; //@line 1164 "../hsp3/hsp3int.cpp"
    HEAP32[3360>>2] = $171; //@line 1164 "../hsp3/hsp3int.cpp"
   }
   break;
  }
  case 256:  {
   $184 = (__Z8code_getv()|0); //@line 1185 "../hsp3/hsp3int.cpp"
   $chk = $184; //@line 1185 "../hsp3/hsp3int.cpp"
   $185 = $chk; //@line 1186 "../hsp3/hsp3int.cpp"
   $186 = ($185|0)<=(-2); //@line 1186 "../hsp3/hsp3int.cpp"
   if ($186) {
    $187 = (___cxa_allocate_exception(4)|0); //@line 1186 "../hsp3/hsp3int.cpp"
    HEAP32[$187>>2] = 32; //@line 1186 "../hsp3/hsp3int.cpp"
    ___cxa_throw(($187|0),(624|0),(0|0)); //@line 1186 "../hsp3/hsp3int.cpp"
    // unreachable; //@line 1186 "../hsp3/hsp3int.cpp"
   } else {
    $188 = HEAP32[592>>2]|0; //@line 1187 "../hsp3/hsp3int.cpp"
    $189 = (__Z16HspVarCoreCnvPtrP4PVali($188,2)|0); //@line 1187 "../hsp3/hsp3int.cpp"
    $sp = $189; //@line 1187 "../hsp3/hsp3int.cpp"
    $190 = $sp; //@line 1188 "../hsp3/hsp3int.cpp"
    $ptr = $190; //@line 1188 "../hsp3/hsp3int.cpp"
    break L12;
   }
   break;
  }
  case 257:  {
   $191 = (__Z12code_getvptrPP4PValPi($pval11,$size12)|0); //@line 1200 "../hsp3/hsp3int.cpp"
   $sptr = $191; //@line 1200 "../hsp3/hsp3int.cpp"
   $192 = HEAP32[$pval11>>2]|0; //@line 1201 "../hsp3/hsp3int.cpp"
   $193 = HEAP16[$192>>1]|0; //@line 1201 "../hsp3/hsp3int.cpp"
   $194 = $193 << 16 >> 16; //@line 1201 "../hsp3/hsp3int.cpp"
   $195 = ($194|0)!=(2); //@line 1201 "../hsp3/hsp3int.cpp"
   if ($195) {
    $196 = (___cxa_allocate_exception(4)|0); //@line 1201 "../hsp3/hsp3int.cpp"
    HEAP32[$196>>2] = 6; //@line 1201 "../hsp3/hsp3int.cpp"
    ___cxa_throw(($196|0),(624|0),(0|0)); //@line 1201 "../hsp3/hsp3int.cpp"
    // unreachable; //@line 1201 "../hsp3/hsp3int.cpp"
   }
   $197 = (__Z9code_getiv()|0); //@line 1202 "../hsp3/hsp3int.cpp"
   $p1 = $197; //@line 1202 "../hsp3/hsp3int.cpp"
   $198 = (__Z9code_getiv()|0); //@line 1203 "../hsp3/hsp3int.cpp"
   $p2 = $198; //@line 1203 "../hsp3/hsp3int.cpp"
   $199 = $sptr; //@line 1205 "../hsp3/hsp3int.cpp"
   $200 = (_strlen(($199|0))|0); //@line 1205 "../hsp3/hsp3int.cpp"
   $slen = $200; //@line 1205 "../hsp3/hsp3int.cpp"
   $201 = $p1; //@line 1206 "../hsp3/hsp3int.cpp"
   $202 = ($201|0)<(0); //@line 1206 "../hsp3/hsp3int.cpp"
   if ($202) {
    $203 = $slen; //@line 1207 "../hsp3/hsp3int.cpp"
    $204 = $p2; //@line 1207 "../hsp3/hsp3int.cpp"
    $205 = (($203) - ($204))|0; //@line 1207 "../hsp3/hsp3int.cpp"
    $p1 = $205; //@line 1207 "../hsp3/hsp3int.cpp"
    $206 = $p1; //@line 1208 "../hsp3/hsp3int.cpp"
    $207 = ($206|0)<(0); //@line 1208 "../hsp3/hsp3int.cpp"
    if ($207) {
     $p1 = 0; //@line 1208 "../hsp3/hsp3int.cpp"
    }
   }
   $208 = $p1; //@line 1210 "../hsp3/hsp3int.cpp"
   $209 = $slen; //@line 1210 "../hsp3/hsp3int.cpp"
   $210 = ($208|0)>=($209|0); //@line 1210 "../hsp3/hsp3int.cpp"
   if ($210) {
    $p2 = 0; //@line 1211 "../hsp3/hsp3int.cpp"
   }
   $211 = $p2; //@line 1212 "../hsp3/hsp3int.cpp"
   $212 = $slen; //@line 1212 "../hsp3/hsp3int.cpp"
   $213 = ($211|0)>($212|0); //@line 1212 "../hsp3/hsp3int.cpp"
   if ($213) {
    $214 = $slen; //@line 1212 "../hsp3/hsp3int.cpp"
    $p2 = $214; //@line 1212 "../hsp3/hsp3int.cpp"
   }
   $215 = $p1; //@line 1213 "../hsp3/hsp3int.cpp"
   $216 = $sptr; //@line 1213 "../hsp3/hsp3int.cpp"
   $217 = (($216) + ($215)|0); //@line 1213 "../hsp3/hsp3int.cpp"
   $sptr = $217; //@line 1213 "../hsp3/hsp3int.cpp"
   $218 = $p2; //@line 1214 "../hsp3/hsp3int.cpp"
   $219 = (($218) + 1)|0; //@line 1214 "../hsp3/hsp3int.cpp"
   $220 = (__Z9code_stmpi($219)|0); //@line 1214 "../hsp3/hsp3int.cpp"
   $p = $220; //@line 1214 "../hsp3/hsp3int.cpp"
   $ptr = $220; //@line 1214 "../hsp3/hsp3int.cpp"
   $i = 0; //@line 1215 "../hsp3/hsp3int.cpp"
   while(1) {
    $221 = $i; //@line 1215 "../hsp3/hsp3int.cpp"
    $222 = $p2; //@line 1215 "../hsp3/hsp3int.cpp"
    $223 = ($221|0)<($222|0); //@line 1215 "../hsp3/hsp3int.cpp"
    if (!($223)) {
     break;
    }
    $224 = $sptr; //@line 1216 "../hsp3/hsp3int.cpp"
    $225 = (($224) + 1|0); //@line 1216 "../hsp3/hsp3int.cpp"
    $sptr = $225; //@line 1216 "../hsp3/hsp3int.cpp"
    $226 = HEAP8[$224>>0]|0; //@line 1216 "../hsp3/hsp3int.cpp"
    $chrtmp = $226; //@line 1216 "../hsp3/hsp3int.cpp"
    $227 = $chrtmp; //@line 1217 "../hsp3/hsp3int.cpp"
    $228 = $p; //@line 1217 "../hsp3/hsp3int.cpp"
    $229 = (($228) + 1|0); //@line 1217 "../hsp3/hsp3int.cpp"
    $p = $229; //@line 1217 "../hsp3/hsp3int.cpp"
    HEAP8[$228>>0] = $227; //@line 1217 "../hsp3/hsp3int.cpp"
    $230 = $chrtmp; //@line 1218 "../hsp3/hsp3int.cpp"
    $231 = $230 << 24 >> 24; //@line 1218 "../hsp3/hsp3int.cpp"
    $232 = ($231|0)==(0); //@line 1218 "../hsp3/hsp3int.cpp"
    if ($232) {
     label = 84;
     break;
    }
    $233 = $i; //@line 1215 "../hsp3/hsp3int.cpp"
    $234 = (($233) + 1)|0; //@line 1215 "../hsp3/hsp3int.cpp"
    $i = $234; //@line 1215 "../hsp3/hsp3int.cpp"
   }
   if ((label|0) == 84) {
   }
   $235 = $p; //@line 1220 "../hsp3/hsp3int.cpp"
   HEAP8[$235>>0] = 0; //@line 1220 "../hsp3/hsp3int.cpp"
   break;
  }
  case 384:  {
   $269 = (+__Z9code_getdv()); //@line 1270 "../hsp3/hsp3int.cpp"
   $dval = $269; //@line 1270 "../hsp3/hsp3int.cpp"
   $270 = $dval; //@line 1271 "../hsp3/hsp3int.cpp"
   $271 = (+Math_sin((+$270))); //@line 1271 "../hsp3/hsp3int.cpp"
   HEAPF64[3352>>3] = $271; //@line 1271 "../hsp3/hsp3int.cpp"
   break;
  }
  case 385:  {
   $272 = (+__Z9code_getdv()); //@line 1274 "../hsp3/hsp3int.cpp"
   $dval = $272; //@line 1274 "../hsp3/hsp3int.cpp"
   $273 = $dval; //@line 1275 "../hsp3/hsp3int.cpp"
   $274 = (+Math_cos((+$273))); //@line 1275 "../hsp3/hsp3int.cpp"
   HEAPF64[3352>>3] = $274; //@line 1275 "../hsp3/hsp3int.cpp"
   break;
  }
  case 392:  {
   $302 = (+__Z9code_getdv()); //@line 1308 "../hsp3/hsp3int.cpp"
   $dval = $302; //@line 1308 "../hsp3/hsp3int.cpp"
   $303 = $dval; //@line 1309 "../hsp3/hsp3int.cpp"
   $304 = (+Math_log((+$303))); //@line 1309 "../hsp3/hsp3int.cpp"
   HEAPF64[3352>>3] = $304; //@line 1309 "../hsp3/hsp3int.cpp"
   break;
  }
  case 389:  {
   $286 = (__Z8code_getv()|0); //@line 1293 "../hsp3/hsp3int.cpp"
   $chk = $286; //@line 1293 "../hsp3/hsp3int.cpp"
   $287 = $chk; //@line 1294 "../hsp3/hsp3int.cpp"
   $288 = ($287|0)<=(-2); //@line 1294 "../hsp3/hsp3int.cpp"
   if ($288) {
    $289 = (___cxa_allocate_exception(4)|0); //@line 1294 "../hsp3/hsp3int.cpp"
    HEAP32[$289>>2] = 32; //@line 1294 "../hsp3/hsp3int.cpp"
    ___cxa_throw(($289|0),(624|0),(0|0)); //@line 1294 "../hsp3/hsp3int.cpp"
    // unreachable; //@line 1294 "../hsp3/hsp3int.cpp"
   } else {
    $290 = HEAP32[592>>2]|0; //@line 1295 "../hsp3/hsp3int.cpp"
    $291 = (__Z16HspVarCoreCnvPtrP4PVali($290,3)|0); //@line 1295 "../hsp3/hsp3int.cpp"
    $dp = $291; //@line 1295 "../hsp3/hsp3int.cpp"
    $292 = $dp; //@line 1296 "../hsp3/hsp3int.cpp"
    $293 = +HEAPF64[$292>>3]; //@line 1296 "../hsp3/hsp3int.cpp"
    HEAPF64[3352>>3] = $293; //@line 1296 "../hsp3/hsp3int.cpp"
    break L12;
   }
   break;
  }
  case 388:  {
   $283 = (+__Z9code_getdv()); //@line 1287 "../hsp3/hsp3int.cpp"
   $dval = $283; //@line 1287 "../hsp3/hsp3int.cpp"
   $284 = $dval; //@line 1288 "../hsp3/hsp3int.cpp"
   $285 = (+Math_sqrt((+$284))); //@line 1288 "../hsp3/hsp3int.cpp"
   HEAPF64[3352>>3] = $285; //@line 1288 "../hsp3/hsp3int.cpp"
   break;
  }
  case 386:  {
   $275 = (+__Z9code_getdv()); //@line 1278 "../hsp3/hsp3int.cpp"
   $dval = $275; //@line 1278 "../hsp3/hsp3int.cpp"
   $276 = $dval; //@line 1279 "../hsp3/hsp3int.cpp"
   $277 = (+Math_tan((+$276))); //@line 1279 "../hsp3/hsp3int.cpp"
   HEAPF64[3352>>3] = $277; //@line 1279 "../hsp3/hsp3int.cpp"
   break;
  }
  case 260:  {
   $237 = HEAP32[3320>>2]|0; //@line 1231 "../hsp3/hsp3int.cpp"
   $238 = (($237) + 824|0); //@line 1231 "../hsp3/hsp3int.cpp"
   $239 = HEAP32[$238>>2]|0; //@line 1231 "../hsp3/hsp3int.cpp"
   $p13 = $239; //@line 1231 "../hsp3/hsp3int.cpp"
   $240 = (__Z9code_getsv()|0); //@line 1232 "../hsp3/hsp3int.cpp"
   (_strncpy(($pathname|0),($240|0),255)|0); //@line 1232 "../hsp3/hsp3int.cpp"
   $241 = (__Z9code_getiv()|0); //@line 1233 "../hsp3/hsp3int.cpp"
   $p1 = $241; //@line 1233 "../hsp3/hsp3int.cpp"
   $242 = $p13; //@line 1234 "../hsp3/hsp3int.cpp"
   $243 = $p1; //@line 1234 "../hsp3/hsp3int.cpp"
   __Z7getpathPcS_i($pathname,$242,$243); //@line 1234 "../hsp3/hsp3int.cpp"
   $244 = $p13; //@line 1235 "../hsp3/hsp3int.cpp"
   $ptr = $244; //@line 1235 "../hsp3/hsp3int.cpp"
   break;
  }
  case 259:  {
   $236 = (__ZL9cnvformatv()|0); //@line 1225 "../hsp3/hsp3int.cpp"
   $ptr = $236; //@line 1225 "../hsp3/hsp3int.cpp"
   break;
  }
  case 261:  {
   $245 = (__Z12code_getvptrPP4PValPi($pval14,$size17)|0); //@line 1244 "../hsp3/hsp3int.cpp"
   $sptr15 = $245; //@line 1244 "../hsp3/hsp3int.cpp"
   $246 = HEAP32[$pval14>>2]|0; //@line 1245 "../hsp3/hsp3int.cpp"
   $247 = HEAP16[$246>>1]|0; //@line 1245 "../hsp3/hsp3int.cpp"
   $248 = $247 << 16 >> 16; //@line 1245 "../hsp3/hsp3int.cpp"
   $249 = ($248|0)!=(2); //@line 1245 "../hsp3/hsp3int.cpp"
   if ($249) {
    $250 = (___cxa_allocate_exception(4)|0); //@line 1245 "../hsp3/hsp3int.cpp"
    HEAP32[$250>>2] = 6; //@line 1245 "../hsp3/hsp3int.cpp"
    ___cxa_throw(($250|0),(624|0),(0|0)); //@line 1245 "../hsp3/hsp3int.cpp"
    // unreachable; //@line 1245 "../hsp3/hsp3int.cpp"
   }
   $251 = (__Z10code_getdii(0)|0); //@line 1246 "../hsp3/hsp3int.cpp"
   $p1 = $251; //@line 1246 "../hsp3/hsp3int.cpp"
   $252 = (__Z10code_getdii(32)|0); //@line 1247 "../hsp3/hsp3int.cpp"
   $p2 = $252; //@line 1247 "../hsp3/hsp3int.cpp"
   $253 = HEAP32[$size17>>2]|0; //@line 1248 "../hsp3/hsp3int.cpp"
   $254 = (($253) + 1)|0; //@line 1248 "../hsp3/hsp3int.cpp"
   $255 = (__Z9code_stmpi($254)|0); //@line 1248 "../hsp3/hsp3int.cpp"
   $p16 = $255; //@line 1248 "../hsp3/hsp3int.cpp"
   $ptr = $255; //@line 1248 "../hsp3/hsp3int.cpp"
   $256 = $p16; //@line 1249 "../hsp3/hsp3int.cpp"
   $257 = $sptr15; //@line 1249 "../hsp3/hsp3int.cpp"
   (_strcpy(($256|0),($257|0))|0); //@line 1249 "../hsp3/hsp3int.cpp"
   $258 = $p1; //@line 1250 "../hsp3/hsp3int.cpp"
   if ((($258|0) == 0)) {
    $259 = $p16; //@line 1252 "../hsp3/hsp3int.cpp"
    $260 = $p2; //@line 1252 "../hsp3/hsp3int.cpp"
    __Z9TrimCodeLPci($259,$260); //@line 1252 "../hsp3/hsp3int.cpp"
    $261 = $p16; //@line 1253 "../hsp3/hsp3int.cpp"
    $262 = $p2; //@line 1253 "../hsp3/hsp3int.cpp"
    __Z9TrimCodeRPci($261,$262); //@line 1253 "../hsp3/hsp3int.cpp"
   } else if ((($258|0) == 3)) {
    $267 = $p16; //@line 1262 "../hsp3/hsp3int.cpp"
    $268 = $p2; //@line 1262 "../hsp3/hsp3int.cpp"
    __Z8TrimCodePci($267,$268); //@line 1262 "../hsp3/hsp3int.cpp"
   } else if ((($258|0) == 2)) {
    $265 = $p16; //@line 1259 "../hsp3/hsp3int.cpp"
    $266 = $p2; //@line 1259 "../hsp3/hsp3int.cpp"
    __Z9TrimCodeRPci($265,$266); //@line 1259 "../hsp3/hsp3int.cpp"
   } else if ((($258|0) == 1)) {
    $263 = $p16; //@line 1256 "../hsp3/hsp3int.cpp"
    $264 = $p2; //@line 1256 "../hsp3/hsp3int.cpp"
    __Z9TrimCodeLPci($263,$264); //@line 1256 "../hsp3/hsp3int.cpp"
   }
   break;
  }
  case 391:  {
   $299 = (+__Z9code_getdv()); //@line 1304 "../hsp3/hsp3int.cpp"
   $dval = $299; //@line 1304 "../hsp3/hsp3int.cpp"
   $300 = $dval; //@line 1305 "../hsp3/hsp3int.cpp"
   $301 = (+Math_exp((+$300))); //@line 1305 "../hsp3/hsp3int.cpp"
   HEAPF64[3352>>3] = $301; //@line 1305 "../hsp3/hsp3int.cpp"
   break;
  }
  case 11: case 10: case 9:  {
   $59 = (__Z12code_getvptrPP4PValPi($pval,$size)|0); //@line 1075 "../hsp3/hsp3int.cpp"
   $ptr2 = $59; //@line 1075 "../hsp3/hsp3int.cpp"
   $60 = (__Z10code_getdii(0)|0); //@line 1076 "../hsp3/hsp3int.cpp"
   $p1 = $60; //@line 1076 "../hsp3/hsp3int.cpp"
   $61 = $p1; //@line 1077 "../hsp3/hsp3int.cpp"
   $62 = ($61|0)<(0); //@line 1077 "../hsp3/hsp3int.cpp"
   if ($62) {
    $63 = (___cxa_allocate_exception(4)|0); //@line 1077 "../hsp3/hsp3int.cpp"
    HEAP32[$63>>2] = 3; //@line 1077 "../hsp3/hsp3int.cpp"
    ___cxa_throw(($63|0),(624|0),(0|0)); //@line 1077 "../hsp3/hsp3int.cpp"
    // unreachable; //@line 1077 "../hsp3/hsp3int.cpp"
   }
   $64 = $p1; //@line 1078 "../hsp3/hsp3int.cpp"
   $65 = $ptr2; //@line 1078 "../hsp3/hsp3int.cpp"
   $66 = (($65) + ($64)|0); //@line 1078 "../hsp3/hsp3int.cpp"
   $ptr2 = $66; //@line 1078 "../hsp3/hsp3int.cpp"
   $67 = $1; //@line 1079 "../hsp3/hsp3int.cpp"
   $68 = ($67|0)==(9); //@line 1079 "../hsp3/hsp3int.cpp"
   do {
    if ($68) {
     $69 = $p1; //@line 1080 "../hsp3/hsp3int.cpp"
     $70 = (($69) + 1)|0; //@line 1080 "../hsp3/hsp3int.cpp"
     $71 = HEAP32[$size>>2]|0; //@line 1080 "../hsp3/hsp3int.cpp"
     $72 = ($70|0)>($71|0); //@line 1080 "../hsp3/hsp3int.cpp"
     if ($72) {
      $73 = (___cxa_allocate_exception(4)|0); //@line 1080 "../hsp3/hsp3int.cpp"
      HEAP32[$73>>2] = 3; //@line 1080 "../hsp3/hsp3int.cpp"
      ___cxa_throw(($73|0),(624|0),(0|0)); //@line 1080 "../hsp3/hsp3int.cpp"
      // unreachable; //@line 1080 "../hsp3/hsp3int.cpp"
     } else {
      $74 = $ptr2; //@line 1081 "../hsp3/hsp3int.cpp"
      $75 = HEAP8[$74>>0]|0; //@line 1081 "../hsp3/hsp3int.cpp"
      $76 = $75 << 24 >> 24; //@line 1081 "../hsp3/hsp3int.cpp"
      $77 = $76 & 255; //@line 1081 "../hsp3/hsp3int.cpp"
      HEAP32[3360>>2] = $77; //@line 1081 "../hsp3/hsp3int.cpp"
      break;
     }
    } else {
     $78 = $1; //@line 1082 "../hsp3/hsp3int.cpp"
     $79 = ($78|0)==(10); //@line 1082 "../hsp3/hsp3int.cpp"
     do {
      if ($79) {
       $80 = $p1; //@line 1083 "../hsp3/hsp3int.cpp"
       $81 = (($80) + 2)|0; //@line 1083 "../hsp3/hsp3int.cpp"
       $82 = HEAP32[$size>>2]|0; //@line 1083 "../hsp3/hsp3int.cpp"
       $83 = ($81|0)>($82|0); //@line 1083 "../hsp3/hsp3int.cpp"
       if ($83) {
        $84 = (___cxa_allocate_exception(4)|0); //@line 1083 "../hsp3/hsp3int.cpp"
        HEAP32[$84>>2] = 3; //@line 1083 "../hsp3/hsp3int.cpp"
        ___cxa_throw(($84|0),(624|0),(0|0)); //@line 1083 "../hsp3/hsp3int.cpp"
        // unreachable; //@line 1083 "../hsp3/hsp3int.cpp"
       } else {
        $85 = $ptr2; //@line 1084 "../hsp3/hsp3int.cpp"
        $86 = HEAP16[$85>>1]|0; //@line 1084 "../hsp3/hsp3int.cpp"
        $87 = $86 << 16 >> 16; //@line 1084 "../hsp3/hsp3int.cpp"
        $88 = $87 & 65535; //@line 1084 "../hsp3/hsp3int.cpp"
        HEAP32[3360>>2] = $88; //@line 1084 "../hsp3/hsp3int.cpp"
        break;
       }
      } else {
       $89 = $p1; //@line 1086 "../hsp3/hsp3int.cpp"
       $90 = (($89) + 4)|0; //@line 1086 "../hsp3/hsp3int.cpp"
       $91 = HEAP32[$size>>2]|0; //@line 1086 "../hsp3/hsp3int.cpp"
       $92 = ($90|0)>($91|0); //@line 1086 "../hsp3/hsp3int.cpp"
       if ($92) {
        $93 = (___cxa_allocate_exception(4)|0); //@line 1086 "../hsp3/hsp3int.cpp"
        HEAP32[$93>>2] = 3; //@line 1086 "../hsp3/hsp3int.cpp"
        ___cxa_throw(($93|0),(624|0),(0|0)); //@line 1086 "../hsp3/hsp3int.cpp"
        // unreachable; //@line 1086 "../hsp3/hsp3int.cpp"
       } else {
        $94 = $ptr2; //@line 1087 "../hsp3/hsp3int.cpp"
        $95 = HEAP32[$94>>2]|0; //@line 1087 "../hsp3/hsp3int.cpp"
        HEAP32[3360>>2] = $95; //@line 1087 "../hsp3/hsp3int.cpp"
        break;
       }
      }
     } while(0);
    }
   } while(0);
   break;
  }
  case 8:  {
   $56 = (__Z9code_getiv()|0); //@line 1064 "../hsp3/hsp3int.cpp"
   $ival = $56; //@line 1064 "../hsp3/hsp3int.cpp"
   $57 = $ival; //@line 1065 "../hsp3/hsp3int.cpp"
   $58 = (__Z7gettimei($57)|0); //@line 1065 "../hsp3/hsp3int.cpp"
   HEAP32[3360>>2] = $58; //@line 1065 "../hsp3/hsp3int.cpp"
   break;
  }
  case 7:  {
   $41 = HEAP32[3336>>2]|0; //@line 1051 "../hsp3/hsp3int.cpp"
   $42 = HEAP32[$41>>2]|0; //@line 1051 "../hsp3/hsp3int.cpp"
   $43 = ($42|0)==(2); //@line 1051 "../hsp3/hsp3int.cpp"
   do {
    if ($43) {
     $44 = (__Z9code_getsv()|0); //@line 1052 "../hsp3/hsp3int.cpp"
     $sval = $44; //@line 1052 "../hsp3/hsp3int.cpp"
     $45 = $sval; //@line 1053 "../hsp3/hsp3int.cpp"
     $46 = (__Z18HspVarCoreSeekProcPKc($45)|0); //@line 1053 "../hsp3/hsp3int.cpp"
     $proc = $46; //@line 1053 "../hsp3/hsp3int.cpp"
     $47 = $proc; //@line 1054 "../hsp3/hsp3int.cpp"
     $48 = ($47|0)==(0|0); //@line 1054 "../hsp3/hsp3int.cpp"
     if ($48) {
      $49 = (___cxa_allocate_exception(4)|0); //@line 1054 "../hsp3/hsp3int.cpp"
      HEAP32[$49>>2] = 3; //@line 1054 "../hsp3/hsp3int.cpp"
      ___cxa_throw(($49|0),(624|0),(0|0)); //@line 1054 "../hsp3/hsp3int.cpp"
      // unreachable; //@line 1054 "../hsp3/hsp3int.cpp"
     } else {
      $50 = $proc; //@line 1055 "../hsp3/hsp3int.cpp"
      $51 = HEAP16[$50>>1]|0; //@line 1055 "../hsp3/hsp3int.cpp"
      $52 = $51 << 16 >> 16; //@line 1055 "../hsp3/hsp3int.cpp"
      HEAP32[3360>>2] = $52; //@line 1055 "../hsp3/hsp3int.cpp"
      break;
     }
    } else {
     (__Z10code_getvaPP4PVal($pv1)|0); //@line 1057 "../hsp3/hsp3int.cpp"
     $53 = HEAP32[$pv1>>2]|0; //@line 1058 "../hsp3/hsp3int.cpp"
     $54 = HEAP16[$53>>1]|0; //@line 1058 "../hsp3/hsp3int.cpp"
     $55 = $54 << 16 >> 16; //@line 1058 "../hsp3/hsp3int.cpp"
     HEAP32[3360>>2] = $55; //@line 1058 "../hsp3/hsp3int.cpp"
    }
   } while(0);
   break;
  }
  case 2:  {
   $31 = (__Z9code_getsv()|0); //@line 1032 "../hsp3/hsp3int.cpp"
   $sval = $31; //@line 1032 "../hsp3/hsp3int.cpp"
   $32 = $sval; //@line 1033 "../hsp3/hsp3int.cpp"
   $33 = (_strlen(($32|0))|0); //@line 1033 "../hsp3/hsp3int.cpp"
   HEAP32[3360>>2] = $33; //@line 1033 "../hsp3/hsp3int.cpp"
   break;
  }
  case 6: case 5: case 4: case 3:  {
   $34 = (__Z12code_getpvalv()|0); //@line 1042 "../hsp3/hsp3int.cpp"
   $pv = $34; //@line 1042 "../hsp3/hsp3int.cpp"
   $35 = $1; //@line 1043 "../hsp3/hsp3int.cpp"
   $36 = (($35) - 2)|0; //@line 1043 "../hsp3/hsp3int.cpp"
   $37 = $pv; //@line 1043 "../hsp3/hsp3int.cpp"
   $38 = (($37) + 4|0); //@line 1043 "../hsp3/hsp3int.cpp"
   $39 = (($38) + ($36<<2)|0); //@line 1043 "../hsp3/hsp3int.cpp"
   $40 = HEAP32[$39>>2]|0; //@line 1043 "../hsp3/hsp3int.cpp"
   HEAP32[3360>>2] = $40; //@line 1043 "../hsp3/hsp3int.cpp"
   break;
  }
  case 0:  {
   $16 = (__Z8code_getv()|0); //@line 1020 "../hsp3/hsp3int.cpp"
   $chk = $16; //@line 1020 "../hsp3/hsp3int.cpp"
   $17 = $chk; //@line 1021 "../hsp3/hsp3int.cpp"
   $18 = ($17|0)<=(-2); //@line 1021 "../hsp3/hsp3int.cpp"
   if ($18) {
    $19 = (___cxa_allocate_exception(4)|0); //@line 1021 "../hsp3/hsp3int.cpp"
    HEAP32[$19>>2] = 32; //@line 1021 "../hsp3/hsp3int.cpp"
    ___cxa_throw(($19|0),(624|0),(0|0)); //@line 1021 "../hsp3/hsp3int.cpp"
    // unreachable; //@line 1021 "../hsp3/hsp3int.cpp"
   } else {
    $20 = HEAP32[592>>2]|0; //@line 1022 "../hsp3/hsp3int.cpp"
    $21 = (__Z16HspVarCoreCnvPtrP4PVali($20,4)|0); //@line 1022 "../hsp3/hsp3int.cpp"
    $ip = $21; //@line 1022 "../hsp3/hsp3int.cpp"
    $22 = $ip; //@line 1023 "../hsp3/hsp3int.cpp"
    $23 = HEAP32[$22>>2]|0; //@line 1023 "../hsp3/hsp3int.cpp"
    HEAP32[3360>>2] = $23; //@line 1023 "../hsp3/hsp3int.cpp"
    break L12;
   }
   break;
  }
  case 13:  {
   $115 = (__Z10code_getvaPP4PVal($pval4)|0); //@line 1113 "../hsp3/hsp3int.cpp"
   $aptr5 = $115; //@line 1113 "../hsp3/hsp3int.cpp"
   $116 = HEAP32[$pval4>>2]|0; //@line 1114 "../hsp3/hsp3int.cpp"
   $117 = (($116) + 36|0); //@line 1114 "../hsp3/hsp3int.cpp"
   $118 = HEAP16[$117>>1]|0; //@line 1114 "../hsp3/hsp3int.cpp"
   $119 = $118&65535; //@line 1114 "../hsp3/hsp3int.cpp"
   $120 = $119 & 128; //@line 1114 "../hsp3/hsp3int.cpp"
   $121 = ($120|0)!=(0); //@line 1114 "../hsp3/hsp3int.cpp"
   if (!($121)) {
    $134 = (___cxa_allocate_exception(4)|0); //@line 1117 "../hsp3/hsp3int.cpp"
    HEAP32[$134>>2] = 6; //@line 1117 "../hsp3/hsp3int.cpp"
    ___cxa_throw(($134|0),(624|0),(0|0)); //@line 1117 "../hsp3/hsp3int.cpp"
    // unreachable; //@line 1117 "../hsp3/hsp3int.cpp"
   }
   $122 = HEAP32[$pval4>>2]|0; //@line 1115 "../hsp3/hsp3int.cpp"
   $123 = $aptr5; //@line 1115 "../hsp3/hsp3int.cpp"
   $124 = (__Z17HspVarCorePtrAPTRP4PVali($122,$123)|0); //@line 1115 "../hsp3/hsp3int.cpp"
   $pdat6 = $124; //@line 1115 "../hsp3/hsp3int.cpp"
   $125 = HEAP32[$pval4>>2]|0; //@line 1116 "../hsp3/hsp3int.cpp"
   $126 = HEAP16[$125>>1]|0; //@line 1116 "../hsp3/hsp3int.cpp"
   $127 = $126 << 16 >> 16; //@line 1116 "../hsp3/hsp3int.cpp"
   $128 = HEAP32[3456>>2]|0; //@line 1116 "../hsp3/hsp3int.cpp"
   $129 = (($128) + (($127*140)|0)|0); //@line 1116 "../hsp3/hsp3int.cpp"
   $130 = (($129) + 60|0); //@line 1116 "../hsp3/hsp3int.cpp"
   $131 = HEAP32[$130>>2]|0; //@line 1116 "../hsp3/hsp3int.cpp"
   $132 = $pdat6; //@line 1116 "../hsp3/hsp3int.cpp"
   $133 = (FUNCTION_TABLE_ii[$131 & 255]($132)|0); //@line 1116 "../hsp3/hsp3int.cpp"
   HEAP32[3360>>2] = $133; //@line 1116 "../hsp3/hsp3int.cpp"
   break;
  }
  case 12:  {
   $96 = HEAP32[3336>>2]|0; //@line 1097 "../hsp3/hsp3int.cpp"
   $97 = HEAP32[$96>>2]|0; //@line 1097 "../hsp3/hsp3int.cpp"
   $98 = ($97|0)==(16); //@line 1097 "../hsp3/hsp3int.cpp"
   if ($98) {
    $99 = HEAP32[3344>>2]|0; //@line 1098 "../hsp3/hsp3int.cpp"
    $100 = HEAP32[$99>>2]|0; //@line 1098 "../hsp3/hsp3int.cpp"
    $101 = HEAP32[3320>>2]|0; //@line 1098 "../hsp3/hsp3int.cpp"
    $102 = (($101) + 840|0); //@line 1098 "../hsp3/hsp3int.cpp"
    $103 = HEAP32[$102>>2]|0; //@line 1098 "../hsp3/hsp3int.cpp"
    $104 = (($103) + (($100*28)|0)|0); //@line 1098 "../hsp3/hsp3int.cpp"
    $st = $104; //@line 1098 "../hsp3/hsp3int.cpp"
    $105 = $st; //@line 1099 "../hsp3/hsp3int.cpp"
    $106 = (($105) + 24|0); //@line 1099 "../hsp3/hsp3int.cpp"
    $107 = HEAP32[$106>>2]|0; //@line 1099 "../hsp3/hsp3int.cpp"
    $108 = $107; //@line 1099 "../hsp3/hsp3int.cpp"
    HEAP32[3360>>2] = $108; //@line 1099 "../hsp3/hsp3int.cpp"
    __Z9code_nextv(); //@line 1100 "../hsp3/hsp3int.cpp"
    break L12;
   } else {
    $109 = (__Z10code_getvaPP4PVal($pval3)|0); //@line 1103 "../hsp3/hsp3int.cpp"
    $aptr = $109; //@line 1103 "../hsp3/hsp3int.cpp"
    $110 = HEAP32[$pval3>>2]|0; //@line 1104 "../hsp3/hsp3int.cpp"
    $111 = $aptr; //@line 1104 "../hsp3/hsp3int.cpp"
    $112 = (__Z17HspVarCorePtrAPTRP4PVali($110,$111)|0); //@line 1104 "../hsp3/hsp3int.cpp"
    $pdat = $112; //@line 1104 "../hsp3/hsp3int.cpp"
    $113 = $pdat; //@line 1105 "../hsp3/hsp3int.cpp"
    $114 = $113; //@line 1105 "../hsp3/hsp3int.cpp"
    HEAP32[3360>>2] = $114; //@line 1105 "../hsp3/hsp3int.cpp"
    break L12;
   }
   break;
  }
  case 15:  {
   $140 = (__Z12code_getvptrPP4PValPi($pval7,$size9)|0); //@line 1143 "../hsp3/hsp3int.cpp"
   $ptr8 = $140; //@line 1143 "../hsp3/hsp3int.cpp"
   $141 = HEAP32[$pval7>>2]|0; //@line 1144 "../hsp3/hsp3int.cpp"
   $142 = HEAP16[$141>>1]|0; //@line 1144 "../hsp3/hsp3int.cpp"
   $143 = $142 << 16 >> 16; //@line 1144 "../hsp3/hsp3int.cpp"
   $144 = ($143|0)!=(2); //@line 1144 "../hsp3/hsp3int.cpp"
   if ($144) {
    $145 = (___cxa_allocate_exception(4)|0); //@line 1144 "../hsp3/hsp3int.cpp"
    HEAP32[$145>>2] = 6; //@line 1144 "../hsp3/hsp3int.cpp"
    ___cxa_throw(($145|0),(624|0),(0|0)); //@line 1144 "../hsp3/hsp3int.cpp"
    // unreachable; //@line 1144 "../hsp3/hsp3int.cpp"
   }
   $146 = (__Z10code_getdii(0)|0); //@line 1145 "../hsp3/hsp3int.cpp"
   $p110 = $146; //@line 1145 "../hsp3/hsp3int.cpp"
   $147 = $p110; //@line 1146 "../hsp3/hsp3int.cpp"
   $148 = HEAP32[$size9>>2]|0; //@line 1146 "../hsp3/hsp3int.cpp"
   $149 = ($147|0)>=($148|0); //@line 1146 "../hsp3/hsp3int.cpp"
   if ($149) {
    $150 = (___cxa_allocate_exception(4)|0); //@line 1146 "../hsp3/hsp3int.cpp"
    HEAP32[$150>>2] = 20; //@line 1146 "../hsp3/hsp3int.cpp"
    ___cxa_throw(($150|0),(624|0),(0|0)); //@line 1146 "../hsp3/hsp3int.cpp"
    // unreachable; //@line 1146 "../hsp3/hsp3int.cpp"
   }
   $151 = (__Z9code_getsv()|0); //@line 1147 "../hsp3/hsp3int.cpp"
   $ps = $151; //@line 1147 "../hsp3/hsp3int.cpp"
   $152 = $p110; //@line 1148 "../hsp3/hsp3int.cpp"
   $153 = ($152|0)>=(0); //@line 1148 "../hsp3/hsp3int.cpp"
   if ($153) {
    $154 = $p110; //@line 1149 "../hsp3/hsp3int.cpp"
    $155 = $ptr8; //@line 1149 "../hsp3/hsp3int.cpp"
    $156 = (($155) + ($154)|0); //@line 1149 "../hsp3/hsp3int.cpp"
    $ptr8 = $156; //@line 1149 "../hsp3/hsp3int.cpp"
    $157 = $ptr8; //@line 1150 "../hsp3/hsp3int.cpp"
    $158 = $ps; //@line 1150 "../hsp3/hsp3int.cpp"
    $159 = (__Z7strstr2PcS_($157,$158)|0); //@line 1150 "../hsp3/hsp3int.cpp"
    $ps2 = $159; //@line 1150 "../hsp3/hsp3int.cpp"
   } else {
    $ps2 = 0; //@line 1152 "../hsp3/hsp3int.cpp"
   }
   $160 = $ps2; //@line 1154 "../hsp3/hsp3int.cpp"
   $161 = ($160|0)==(0|0); //@line 1154 "../hsp3/hsp3int.cpp"
   if ($161) {
    HEAP32[3360>>2] = -1; //@line 1155 "../hsp3/hsp3int.cpp"
   } else {
    $162 = $ps2; //@line 1157 "../hsp3/hsp3int.cpp"
    $163 = $ptr8; //@line 1157 "../hsp3/hsp3int.cpp"
    $164 = $162; //@line 1157 "../hsp3/hsp3int.cpp"
    $165 = $163; //@line 1157 "../hsp3/hsp3int.cpp"
    $166 = (($164) - ($165))|0; //@line 1157 "../hsp3/hsp3int.cpp"
    HEAP32[3360>>2] = $166; //@line 1157 "../hsp3/hsp3int.cpp"
   }
   break;
  }
  case 1:  {
   $24 = (__Z9code_getiv()|0); //@line 1027 "../hsp3/hsp3int.cpp"
   $ival = $24; //@line 1027 "../hsp3/hsp3int.cpp"
   $25 = $ival; //@line 1028 "../hsp3/hsp3int.cpp"
   $26 = ($25|0)==(0); //@line 1028 "../hsp3/hsp3int.cpp"
   if ($26) {
    $27 = (___cxa_allocate_exception(4)|0); //@line 1028 "../hsp3/hsp3int.cpp"
    HEAP32[$27>>2] = 19; //@line 1028 "../hsp3/hsp3int.cpp"
    ___cxa_throw(($27|0),(624|0),(0|0)); //@line 1028 "../hsp3/hsp3int.cpp"
    // unreachable; //@line 1028 "../hsp3/hsp3int.cpp"
   } else {
    $28 = (_rand()|0); //@line 1029 "../hsp3/hsp3int.cpp"
    $29 = $ival; //@line 1029 "../hsp3/hsp3int.cpp"
    $30 = (($28|0) % ($29|0))&-1; //@line 1029 "../hsp3/hsp3int.cpp"
    HEAP32[3360>>2] = $30; //@line 1029 "../hsp3/hsp3int.cpp"
    break L12;
   }
   break;
  }
  default: {
   $331 = (___cxa_allocate_exception(4)|0); //@line 1338 "../hsp3/hsp3int.cpp"
   HEAP32[$331>>2] = 21; //@line 1338 "../hsp3/hsp3int.cpp"
   ___cxa_throw(($331|0),(624|0),(0|0)); //@line 1338 "../hsp3/hsp3int.cpp"
   // unreachable; //@line 1338 "../hsp3/hsp3int.cpp"
  }
  }
 } while(0);
 $332 = HEAP32[3336>>2]|0; //@line 1343 "../hsp3/hsp3int.cpp"
 $333 = HEAP32[$332>>2]|0; //@line 1343 "../hsp3/hsp3int.cpp"
 $334 = ($333|0)!=(0); //@line 1343 "../hsp3/hsp3int.cpp"
 if ($334) {
  $335 = (___cxa_allocate_exception(4)|0); //@line 1343 "../hsp3/hsp3int.cpp"
  HEAP32[$335>>2] = 32; //@line 1343 "../hsp3/hsp3int.cpp"
  ___cxa_throw(($335|0),(624|0),(0|0)); //@line 1343 "../hsp3/hsp3int.cpp"
  // unreachable; //@line 1343 "../hsp3/hsp3int.cpp"
 }
 $336 = HEAP32[3344>>2]|0; //@line 1344 "../hsp3/hsp3int.cpp"
 $337 = HEAP32[$336>>2]|0; //@line 1344 "../hsp3/hsp3int.cpp"
 $338 = ($337|0)!=(41); //@line 1344 "../hsp3/hsp3int.cpp"
 if ($338) {
  $339 = (___cxa_allocate_exception(4)|0); //@line 1344 "../hsp3/hsp3int.cpp"
  HEAP32[$339>>2] = 32; //@line 1344 "../hsp3/hsp3int.cpp"
  ___cxa_throw(($339|0),(624|0),(0|0)); //@line 1344 "../hsp3/hsp3int.cpp"
  // unreachable; //@line 1344 "../hsp3/hsp3int.cpp"
 } else {
  __Z9code_nextv(); //@line 1345 "../hsp3/hsp3int.cpp"
  $340 = $ptr; //@line 1347 "../hsp3/hsp3int.cpp"
  STACKTOP = sp;return ($340|0); //@line 1347 "../hsp3/hsp3int.cpp"
 }
 return 0|0;
}
function __ZL11note_updatev() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = HEAP32[3320>>2]|0; //@line 335 "../hsp3/hsp3int.cpp"
 $1 = (($0) + 808|0); //@line 335 "../hsp3/hsp3int.cpp"
 $2 = HEAP32[$1>>2]|0; //@line 335 "../hsp3/hsp3int.cpp"
 $3 = ($2|0)==(0|0); //@line 335 "../hsp3/hsp3int.cpp"
 if ($3) {
  $4 = (___cxa_allocate_exception(4)|0); //@line 335 "../hsp3/hsp3int.cpp"
  HEAP32[$4>>2] = 3; //@line 335 "../hsp3/hsp3int.cpp"
  ___cxa_throw(($4|0),(624|0),(0|0)); //@line 335 "../hsp3/hsp3int.cpp"
  // unreachable; //@line 335 "../hsp3/hsp3int.cpp"
 } else {
  $5 = HEAP32[3320>>2]|0; //@line 336 "../hsp3/hsp3int.cpp"
  $6 = (($5) + 808|0); //@line 336 "../hsp3/hsp3int.cpp"
  $7 = HEAP32[$6>>2]|0; //@line 336 "../hsp3/hsp3int.cpp"
  $8 = HEAP32[3320>>2]|0; //@line 336 "../hsp3/hsp3int.cpp"
  $9 = (($8) + 812|0); //@line 336 "../hsp3/hsp3int.cpp"
  $10 = HEAP32[$9>>2]|0; //@line 336 "../hsp3/hsp3int.cpp"
  $11 = (__Z17HspVarCorePtrAPTRP4PVali($7,$10)|0); //@line 336 "../hsp3/hsp3int.cpp"
  $p = $11; //@line 336 "../hsp3/hsp3int.cpp"
  $12 = $p; //@line 337 "../hsp3/hsp3int.cpp"
  __ZN8CStrNote6SelectEPc(3296,$12); //@line 337 "../hsp3/hsp3int.cpp"
  $13 = $p; //@line 338 "../hsp3/hsp3int.cpp"
  STACKTOP = sp;return ($13|0); //@line 338 "../hsp3/hsp3int.cpp"
 }
 return 0|0;
}
function __ZL10getEaseIntii($i_value,$i_maxvalue) {
 $i_value = $i_value|0;
 $i_maxvalue = $i_maxvalue|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $i = 0, $value = 0.0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $i_value;
 $1 = $i_maxvalue;
 $2 = $1; //@line 316 "../hsp3/hsp3int.cpp"
 $3 = ($2|0)>(0); //@line 316 "../hsp3/hsp3int.cpp"
 if ($3) {
  $4 = $0; //@line 317 "../hsp3/hsp3int.cpp"
  $5 = (+($4|0)); //@line 317 "../hsp3/hsp3int.cpp"
  $6 = $1; //@line 317 "../hsp3/hsp3int.cpp"
  $7 = (+($6|0)); //@line 317 "../hsp3/hsp3int.cpp"
  $8 = $5 / $7; //@line 317 "../hsp3/hsp3int.cpp"
  $value = $8; //@line 317 "../hsp3/hsp3int.cpp"
 } else {
  $9 = +HEAPF64[3432>>3]; //@line 319 "../hsp3/hsp3int.cpp"
  $10 = $0; //@line 319 "../hsp3/hsp3int.cpp"
  $11 = (+($10|0)); //@line 319 "../hsp3/hsp3int.cpp"
  $12 = $9 * $11; //@line 319 "../hsp3/hsp3int.cpp"
  $value = $12; //@line 319 "../hsp3/hsp3int.cpp"
 }
 $13 = $value; //@line 321 "../hsp3/hsp3int.cpp"
 $14 = (+__ZL7getEased($13)); //@line 321 "../hsp3/hsp3int.cpp"
 $15 = (~~(($14))); //@line 321 "../hsp3/hsp3int.cpp"
 $i = $15; //@line 321 "../hsp3/hsp3int.cpp"
 $16 = $i; //@line 322 "../hsp3/hsp3int.cpp"
 STACKTOP = sp;return ($16|0); //@line 322 "../hsp3/hsp3int.cpp"
}
function __ZL9cnvformatv() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0.0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $autofree = 0, $capacity = 0, $fmt = 0, $fp = 0;
 var $fstr = 0, $i = 0, $len = 0, $n = 0, $p = 0, $result = 0, $space = 0, $specifier = 0, $val_ptr = 0, $val_type = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1152|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp;
 $vararg_buffer = sp + 8|0;
 $fstr = sp + 80|0;
 $capacity = sp + 68|0;
 $p = sp + 56|0;
 $autofree = sp + 52|0;
 $fmt = sp + 1112|0;
 $3 = (__Z9code_getsv()|0); //@line 393 "../hsp3/hsp3int.cpp"
 (_strncpy(($fstr|0),($3|0),1024)|0); //@line 393 "../hsp3/hsp3int.cpp"
 $4 = (($fstr) + 1023|0); //@line 394 "../hsp3/hsp3int.cpp"
 HEAP8[$4>>0] = 0; //@line 394 "../hsp3/hsp3int.cpp"
 $fp = $fstr; //@line 395 "../hsp3/hsp3int.cpp"
 HEAP32[$capacity>>2] = 1024; //@line 396 "../hsp3/hsp3int.cpp"
 $5 = HEAP32[$capacity>>2]|0; //@line 397 "../hsp3/hsp3int.cpp"
 $6 = (__Z7sbAlloci($5)|0); //@line 397 "../hsp3/hsp3int.cpp"
 HEAP32[$p>>2] = $6; //@line 397 "../hsp3/hsp3int.cpp"
 $len = 0; //@line 398 "../hsp3/hsp3int.cpp"
 __ZN11CAutoSbFreeC2EPPc($autofree,$p); //@line 400 "../hsp3/hsp3int.cpp"
 L1: while(1) {
  $i = 0; //@line 409 "../hsp3/hsp3int.cpp"
  while(1) {
   $7 = $i; //@line 410 "../hsp3/hsp3int.cpp"
   $8 = $fp; //@line 410 "../hsp3/hsp3int.cpp"
   $9 = (($8) + ($7)|0); //@line 410 "../hsp3/hsp3int.cpp"
   $10 = HEAP8[$9>>0]|0; //@line 410 "../hsp3/hsp3int.cpp"
   $11 = $10 << 24 >> 24; //@line 410 "../hsp3/hsp3int.cpp"
   $12 = ($11|0)!=(0); //@line 410 "../hsp3/hsp3int.cpp"
   if ($12) {
    $13 = $i; //@line 410 "../hsp3/hsp3int.cpp"
    $14 = $fp; //@line 410 "../hsp3/hsp3int.cpp"
    $15 = (($14) + ($13)|0); //@line 410 "../hsp3/hsp3int.cpp"
    $16 = HEAP8[$15>>0]|0; //@line 410 "../hsp3/hsp3int.cpp"
    $17 = $16 << 24 >> 24; //@line 410 "../hsp3/hsp3int.cpp"
    $18 = ($17|0)!=(37); //@line 410 "../hsp3/hsp3int.cpp"
    $175 = $18;
   } else {
    $175 = 0;
   }
   if (!($175)) {
    break;
   }
   $19 = $i; //@line 411 "../hsp3/hsp3int.cpp"
   $20 = (($19) + 1)|0; //@line 411 "../hsp3/hsp3int.cpp"
   $i = $20; //@line 411 "../hsp3/hsp3int.cpp"
  }
  $21 = $len; //@line 413 "../hsp3/hsp3int.cpp"
  $22 = $i; //@line 413 "../hsp3/hsp3int.cpp"
  __THREW__ = 0;
  invoke_viiii(87,($p|0),($capacity|0),($21|0),($22|0)); //@line 413 "../hsp3/hsp3int.cpp"
  $23 = __THREW__; __THREW__ = 0;
  $24 = $23&1;
  if ($24) {
   break;
  }
  $25 = HEAP32[$p>>2]|0; //@line 414 "../hsp3/hsp3int.cpp"
  $26 = $len; //@line 414 "../hsp3/hsp3int.cpp"
  $27 = (($25) + ($26)|0); //@line 414 "../hsp3/hsp3int.cpp"
  $28 = $fp; //@line 414 "../hsp3/hsp3int.cpp"
  $29 = $i; //@line 414 "../hsp3/hsp3int.cpp"
  _memcpy(($27|0),($28|0),($29|0))|0; //@line 414 "../hsp3/hsp3int.cpp"
  $30 = $i; //@line 415 "../hsp3/hsp3int.cpp"
  $31 = $len; //@line 415 "../hsp3/hsp3int.cpp"
  $32 = (($31) + ($30))|0; //@line 415 "../hsp3/hsp3int.cpp"
  $len = $32; //@line 415 "../hsp3/hsp3int.cpp"
  $33 = $i; //@line 416 "../hsp3/hsp3int.cpp"
  $34 = $fp; //@line 416 "../hsp3/hsp3int.cpp"
  $35 = (($34) + ($33)|0); //@line 416 "../hsp3/hsp3int.cpp"
  $fp = $35; //@line 416 "../hsp3/hsp3int.cpp"
  $36 = $fp; //@line 417 "../hsp3/hsp3int.cpp"
  $37 = HEAP8[$36>>0]|0; //@line 417 "../hsp3/hsp3int.cpp"
  $38 = $37 << 24 >> 24; //@line 417 "../hsp3/hsp3int.cpp"
  $39 = ($38|0)==(0); //@line 417 "../hsp3/hsp3int.cpp"
  if ($39) {
   label = 10;
   break;
  }
  $44 = $fp; //@line 420 "../hsp3/hsp3int.cpp"
  $45 = (($44) + 1|0); //@line 420 "../hsp3/hsp3int.cpp"
  __THREW__ = 0;
  $46 = (invoke_iii(89,($45|0),(3416|0))|0); //@line 420 "../hsp3/hsp3int.cpp"
  $47 = __THREW__; __THREW__ = 0;
  $48 = $47&1;
  if ($48) {
   break;
  }
  $49 = (($46) + 1)|0; //@line 420 "../hsp3/hsp3int.cpp"
  $i = $49; //@line 420 "../hsp3/hsp3int.cpp"
  $50 = $fp; //@line 421 "../hsp3/hsp3int.cpp"
  __THREW__ = 0;
  (invoke_iiii(90,($fmt|0),($50|0),32)|0); //@line 421 "../hsp3/hsp3int.cpp"
  $51 = __THREW__; __THREW__ = 0;
  $52 = $51&1;
  if ($52) {
   break;
  }
  $53 = (($fmt) + 31|0); //@line 422 "../hsp3/hsp3int.cpp"
  HEAP8[$53>>0] = 0; //@line 422 "../hsp3/hsp3int.cpp"
  $54 = $i; //@line 423 "../hsp3/hsp3int.cpp"
  $55 = (($54) + 1)|0; //@line 423 "../hsp3/hsp3int.cpp"
  $56 = ($55|0)<(32); //@line 423 "../hsp3/hsp3int.cpp"
  if ($56) {
   $57 = $i; //@line 423 "../hsp3/hsp3int.cpp"
   $58 = (($57) + 1)|0; //@line 423 "../hsp3/hsp3int.cpp"
   $59 = (($fmt) + ($58)|0); //@line 423 "../hsp3/hsp3int.cpp"
   HEAP8[$59>>0] = 0; //@line 423 "../hsp3/hsp3int.cpp"
  }
  $60 = $i; //@line 424 "../hsp3/hsp3int.cpp"
  $61 = $fp; //@line 424 "../hsp3/hsp3int.cpp"
  $62 = (($61) + ($60)|0); //@line 424 "../hsp3/hsp3int.cpp"
  $fp = $62; //@line 424 "../hsp3/hsp3int.cpp"
  $63 = $fp; //@line 426 "../hsp3/hsp3int.cpp"
  $64 = HEAP8[$63>>0]|0; //@line 426 "../hsp3/hsp3int.cpp"
  $specifier = $64; //@line 426 "../hsp3/hsp3int.cpp"
  $65 = $fp; //@line 427 "../hsp3/hsp3int.cpp"
  $66 = (($65) + 1|0); //@line 427 "../hsp3/hsp3int.cpp"
  $fp = $66; //@line 427 "../hsp3/hsp3int.cpp"
  $67 = $specifier; //@line 440 "../hsp3/hsp3int.cpp"
  $68 = $67 << 24 >> 24; //@line 440 "../hsp3/hsp3int.cpp"
  $69 = ($68|0)==(0); //@line 440 "../hsp3/hsp3int.cpp"
  if ($69) {
   label = 17;
   break;
  }
  $70 = $specifier; //@line 441 "../hsp3/hsp3int.cpp"
  $71 = $70 << 24 >> 24; //@line 441 "../hsp3/hsp3int.cpp"
  $72 = ($71|0)==(37); //@line 441 "../hsp3/hsp3int.cpp"
  if ($72) {
   $73 = $len; //@line 442 "../hsp3/hsp3int.cpp"
   __THREW__ = 0;
   invoke_viiii(87,($p|0),($capacity|0),($73|0),1); //@line 442 "../hsp3/hsp3int.cpp"
   $74 = __THREW__; __THREW__ = 0;
   $75 = $74&1;
   if ($75) {
    break;
   }
   $76 = $len; //@line 443 "../hsp3/hsp3int.cpp"
   $77 = (($76) + 1)|0; //@line 443 "../hsp3/hsp3int.cpp"
   $len = $77; //@line 443 "../hsp3/hsp3int.cpp"
   $78 = HEAP32[$p>>2]|0; //@line 443 "../hsp3/hsp3int.cpp"
   $79 = (($78) + ($76)|0); //@line 443 "../hsp3/hsp3int.cpp"
   HEAP8[$79>>0] = 37; //@line 443 "../hsp3/hsp3int.cpp"
   continue;
  }
  __THREW__ = 0;
  $80 = (invoke_i(91)|0); //@line 448 "../hsp3/hsp3int.cpp"
  $81 = __THREW__; __THREW__ = 0;
  $82 = $81&1;
  if ($82) {
   break;
  }
  $83 = ($80|0)<=(-2); //@line 448 "../hsp3/hsp3int.cpp"
  if ($83) {
   label = 23;
   break;
  }
  $87 = $specifier; //@line 449 "../hsp3/hsp3int.cpp"
  $88 = $87 << 24 >> 24; //@line 449 "../hsp3/hsp3int.cpp"
  switch ($88|0) {
  case 115:  {
   $val_type = 2; //@line 459 "../hsp3/hsp3int.cpp"
   $97 = HEAP32[592>>2]|0; //@line 460 "../hsp3/hsp3int.cpp"
   __THREW__ = 0;
   $98 = (invoke_iii(93,($97|0),2)|0); //@line 460 "../hsp3/hsp3int.cpp"
   $99 = __THREW__; __THREW__ = 0;
   $100 = $99&1;
   if ($100) {
    break L1;
   }
   $val_ptr = $98; //@line 460 "../hsp3/hsp3int.cpp"
   break;
  }
  case 112: case 117: case 88: case 120: case 111: case 99: case 105: case 100:  {
   $val_type = 4; //@line 451 "../hsp3/hsp3int.cpp"
   $89 = HEAP32[592>>2]|0; //@line 452 "../hsp3/hsp3int.cpp"
   __THREW__ = 0;
   $90 = (invoke_iii(93,($89|0),4)|0); //@line 452 "../hsp3/hsp3int.cpp"
   $91 = __THREW__; __THREW__ = 0;
   $92 = $91&1;
   if ($92) {
    break L1;
   }
   $val_ptr = $90; //@line 452 "../hsp3/hsp3int.cpp"
   break;
  }
  case 71: case 103: case 69: case 101: case 102:  {
   $val_type = 3; //@line 455 "../hsp3/hsp3int.cpp"
   $93 = HEAP32[592>>2]|0; //@line 456 "../hsp3/hsp3int.cpp"
   __THREW__ = 0;
   $94 = (invoke_iii(93,($93|0),3)|0); //@line 456 "../hsp3/hsp3int.cpp"
   $95 = __THREW__; __THREW__ = 0;
   $96 = $95&1;
   if ($96) {
    break L1;
   }
   $val_ptr = $94; //@line 456 "../hsp3/hsp3int.cpp"
   break;
  }
  default: {
   label = 31;
   break L1;
  }
  }
  while(1) {
   $104 = HEAP32[$capacity>>2]|0; //@line 469 "../hsp3/hsp3int.cpp"
   $105 = $len; //@line 469 "../hsp3/hsp3int.cpp"
   $106 = (($104) - ($105))|0; //@line 469 "../hsp3/hsp3int.cpp"
   $107 = (($106) - 1)|0; //@line 469 "../hsp3/hsp3int.cpp"
   $space = $107; //@line 469 "../hsp3/hsp3int.cpp"
   $108 = $val_type; //@line 470 "../hsp3/hsp3int.cpp"
   $109 = ($108|0)==(4); //@line 470 "../hsp3/hsp3int.cpp"
   if ($109) {
    $110 = HEAP32[$p>>2]|0; //@line 471 "../hsp3/hsp3int.cpp"
    $111 = $len; //@line 471 "../hsp3/hsp3int.cpp"
    $112 = (($110) + ($111)|0); //@line 471 "../hsp3/hsp3int.cpp"
    $113 = $space; //@line 471 "../hsp3/hsp3int.cpp"
    $114 = $val_ptr; //@line 471 "../hsp3/hsp3int.cpp"
    $115 = HEAP32[$114>>2]|0; //@line 471 "../hsp3/hsp3int.cpp"
    __THREW__ = 0;
    HEAP32[$vararg_buffer>>2] = $115; //@line 471 "../hsp3/hsp3int.cpp"
    $116 = (invoke_iiiii(94,($112|0),($113|0),($fmt|0),($vararg_buffer|0))|0); //@line 471 "../hsp3/hsp3int.cpp"
    $117 = __THREW__; __THREW__ = 0;
    $118 = $117&1;
    if ($118) {
     break L1;
    }
    $n = $116; //@line 471 "../hsp3/hsp3int.cpp"
   } else {
    $119 = $val_type; //@line 472 "../hsp3/hsp3int.cpp"
    $120 = ($119|0)==(3); //@line 472 "../hsp3/hsp3int.cpp"
    if ($120) {
     $121 = HEAP32[$p>>2]|0; //@line 473 "../hsp3/hsp3int.cpp"
     $122 = $len; //@line 473 "../hsp3/hsp3int.cpp"
     $123 = (($121) + ($122)|0); //@line 473 "../hsp3/hsp3int.cpp"
     $124 = $space; //@line 473 "../hsp3/hsp3int.cpp"
     $125 = $val_ptr; //@line 473 "../hsp3/hsp3int.cpp"
     $126 = +HEAPF64[$125>>3]; //@line 473 "../hsp3/hsp3int.cpp"
     __THREW__ = 0;
     HEAPF64[tempDoublePtr>>3]=$126;HEAP32[$vararg_buffer1>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer1+4>>2]=HEAP32[tempDoublePtr+4>>2]; //@line 473 "../hsp3/hsp3int.cpp"
     $127 = (invoke_iiiii(94,($123|0),($124|0),($fmt|0),($vararg_buffer1|0))|0); //@line 473 "../hsp3/hsp3int.cpp"
     $128 = __THREW__; __THREW__ = 0;
     $129 = $128&1;
     if ($129) {
      break L1;
     }
     $n = $127; //@line 473 "../hsp3/hsp3int.cpp"
    } else {
     $130 = HEAP32[$p>>2]|0; //@line 475 "../hsp3/hsp3int.cpp"
     $131 = $len; //@line 475 "../hsp3/hsp3int.cpp"
     $132 = (($130) + ($131)|0); //@line 475 "../hsp3/hsp3int.cpp"
     $133 = $space; //@line 475 "../hsp3/hsp3int.cpp"
     $134 = $val_ptr; //@line 475 "../hsp3/hsp3int.cpp"
     __THREW__ = 0;
     HEAP32[$vararg_buffer4>>2] = $134; //@line 475 "../hsp3/hsp3int.cpp"
     $135 = (invoke_iiiii(94,($132|0),($133|0),($fmt|0),($vararg_buffer4|0))|0); //@line 475 "../hsp3/hsp3int.cpp"
     $136 = __THREW__; __THREW__ = 0;
     $137 = $136&1;
     if ($137) {
      break L1;
     }
     $n = $135; //@line 475 "../hsp3/hsp3int.cpp"
    }
   }
   $138 = $n; //@line 478 "../hsp3/hsp3int.cpp"
   $139 = ($138|0)>=(0); //@line 478 "../hsp3/hsp3int.cpp"
   if ($139) {
    $140 = $n; //@line 478 "../hsp3/hsp3int.cpp"
    $141 = $space; //@line 478 "../hsp3/hsp3int.cpp"
    $142 = ($140|0)<($141|0); //@line 478 "../hsp3/hsp3int.cpp"
    if ($142) {
     break;
    }
   }
   $146 = $n; //@line 482 "../hsp3/hsp3int.cpp"
   $147 = ($146|0)>=(0); //@line 482 "../hsp3/hsp3int.cpp"
   if ($147) {
    $148 = $n; //@line 483 "../hsp3/hsp3int.cpp"
    $149 = (($148) + 1)|0; //@line 483 "../hsp3/hsp3int.cpp"
    $space = $149; //@line 483 "../hsp3/hsp3int.cpp"
   } else {
    $150 = $space; //@line 485 "../hsp3/hsp3int.cpp"
    $151 = $150<<1; //@line 485 "../hsp3/hsp3int.cpp"
    $space = $151; //@line 485 "../hsp3/hsp3int.cpp"
    $152 = $space; //@line 486 "../hsp3/hsp3int.cpp"
    $153 = ($152|0)<(32); //@line 486 "../hsp3/hsp3int.cpp"
    if ($153) {
     $space = 32; //@line 486 "../hsp3/hsp3int.cpp"
    }
   }
   $154 = $len; //@line 488 "../hsp3/hsp3int.cpp"
   $155 = $space; //@line 488 "../hsp3/hsp3int.cpp"
   __THREW__ = 0;
   invoke_viiii(87,($p|0),($capacity|0),($154|0),($155|0)); //@line 488 "../hsp3/hsp3int.cpp"
   $156 = __THREW__; __THREW__ = 0;
   $157 = $156&1;
   if ($157) {
    break L1;
   }
  }
  $143 = $n; //@line 479 "../hsp3/hsp3int.cpp"
  $144 = $len; //@line 479 "../hsp3/hsp3int.cpp"
  $145 = (($144) + ($143))|0; //@line 479 "../hsp3/hsp3int.cpp"
  $len = $145; //@line 479 "../hsp3/hsp3int.cpp"
 }
 if ((label|0) == 10) {
  label = 54;
 }
 else if ((label|0) == 17) {
  label = 54;
 }
 else if ((label|0) == 23) {
  $84 = (___cxa_allocate_exception(4)|0); //@line 448 "../hsp3/hsp3int.cpp"
  HEAP32[$84>>2] = 32; //@line 448 "../hsp3/hsp3int.cpp"
  __THREW__ = 0;
  invoke_viii(92,($84|0),(624|0),(0|0)); //@line 448 "../hsp3/hsp3int.cpp"
  $85 = __THREW__; __THREW__ = 0;
  $86 = $85&1;
  if (!($86)) {
   // unreachable;
  }
 }
 else if ((label|0) == 31) {
  $101 = (___cxa_allocate_exception(4)|0); //@line 463 "../hsp3/hsp3int.cpp"
  HEAP32[$101>>2] = 32; //@line 463 "../hsp3/hsp3int.cpp"
  __THREW__ = 0;
  invoke_viii(92,($101|0),(624|0),(0|0)); //@line 463 "../hsp3/hsp3int.cpp"
  $102 = __THREW__; __THREW__ = 0;
  $103 = $102&1;
  if (!($103)) {
   // unreachable;
  }
 }
 if ((label|0) == 54) {
  $158 = $len; //@line 491 "../hsp3/hsp3int.cpp"
  $159 = HEAP32[$p>>2]|0; //@line 491 "../hsp3/hsp3int.cpp"
  $160 = (($159) + ($158)|0); //@line 491 "../hsp3/hsp3int.cpp"
  HEAP8[$160>>0] = 0; //@line 491 "../hsp3/hsp3int.cpp"
  $161 = $len; //@line 493 "../hsp3/hsp3int.cpp"
  $162 = (($161) + 1)|0; //@line 493 "../hsp3/hsp3int.cpp"
  __THREW__ = 0;
  $163 = (invoke_ii(95,($162|0))|0); //@line 493 "../hsp3/hsp3int.cpp"
  $164 = __THREW__; __THREW__ = 0;
  $165 = $164&1;
  if (!($165)) {
   $result = $163; //@line 493 "../hsp3/hsp3int.cpp"
   $166 = $result; //@line 494 "../hsp3/hsp3int.cpp"
   $167 = HEAP32[$p>>2]|0; //@line 494 "../hsp3/hsp3int.cpp"
   __THREW__ = 0;
   (invoke_iii(96,($166|0),($167|0))|0); //@line 494 "../hsp3/hsp3int.cpp"
   $168 = __THREW__; __THREW__ = 0;
   $169 = $168&1;
   if (!($169)) {
    $170 = $result; //@line 495 "../hsp3/hsp3int.cpp"
    $2 = 1;
    __ZN11CAutoSbFreeD2Ev($autofree); //@line 496 "../hsp3/hsp3int.cpp"
    STACKTOP = sp;return ($170|0); //@line 496 "../hsp3/hsp3int.cpp"
   }
  }
 }
 $40 = ___cxa_find_matching_catch(-1,-1)|0;
 $41 = tempRet0;
 $0 = $40; //@line 413 "../hsp3/hsp3int.cpp"
 $1 = $41; //@line 413 "../hsp3/hsp3int.cpp"
 __THREW__ = 0;
 invoke_vi(88,($autofree|0)); //@line 496 "../hsp3/hsp3int.cpp"
 $42 = __THREW__; __THREW__ = 0;
 $43 = $42&1;
 if ($43) {
  $173 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $174 = tempRet0;
  ___clang_call_terminate($173); //@line 496 "../hsp3/hsp3int.cpp"
  // unreachable; //@line 496 "../hsp3/hsp3int.cpp"
 }
 $171 = $0; //@line 496 "../hsp3/hsp3int.cpp"
 $172 = $1; //@line 496 "../hsp3/hsp3int.cpp"
 ___resumeException($171|0);
 // unreachable;
 return 0|0;
}
function __ZL7getEased($value) {
 $value = +$value;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0;
 var $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0;
 var $63 = 0.0, $64 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, $dval = 0, $ival = 0, $reverse = 0, $t = 0.0, $type = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $dval = sp + 8|0;
 $1 = $value;
 $2 = $1; //@line 238 "../hsp3/hsp3int.cpp"
 $t = $2; //@line 238 "../hsp3/hsp3int.cpp"
 $3 = HEAP32[3368>>2]|0; //@line 239 "../hsp3/hsp3int.cpp"
 $4 = $3 & 4095; //@line 239 "../hsp3/hsp3int.cpp"
 $type = $4; //@line 239 "../hsp3/hsp3int.cpp"
 $reverse = 0; //@line 240 "../hsp3/hsp3int.cpp"
 $5 = HEAP32[3368>>2]|0; //@line 241 "../hsp3/hsp3int.cpp"
 $6 = $5 & 4096; //@line 241 "../hsp3/hsp3int.cpp"
 $7 = ($6|0)!=(0); //@line 241 "../hsp3/hsp3int.cpp"
 if ($7) {
  $8 = $t; //@line 244 "../hsp3/hsp3int.cpp"
  $9 = (+_modf((+$8),($dval|0))); //@line 244 "../hsp3/hsp3int.cpp"
  $t = $9; //@line 244 "../hsp3/hsp3int.cpp"
  $10 = +HEAPF64[$dval>>3]; //@line 245 "../hsp3/hsp3int.cpp"
  $11 = (~~(($10))); //@line 245 "../hsp3/hsp3int.cpp"
  $ival = $11; //@line 245 "../hsp3/hsp3int.cpp"
  $12 = $ival; //@line 246 "../hsp3/hsp3int.cpp"
  $13 = $12 & 1; //@line 246 "../hsp3/hsp3int.cpp"
  $reverse = $13; //@line 246 "../hsp3/hsp3int.cpp"
 } else {
  $14 = $t; //@line 248 "../hsp3/hsp3int.cpp"
  $15 = $14 < 0.0; //@line 248 "../hsp3/hsp3int.cpp"
  if ($15) {
   $t = 0.0; //@line 248 "../hsp3/hsp3int.cpp"
  }
  $16 = $t; //@line 249 "../hsp3/hsp3int.cpp"
  $17 = $16 > 1.0; //@line 249 "../hsp3/hsp3int.cpp"
  if ($17) {
   $t = 1.0; //@line 249 "../hsp3/hsp3int.cpp"
  }
 }
 $18 = HEAP32[3376>>2]|0; //@line 252 "../hsp3/hsp3int.cpp"
 $19 = $reverse; //@line 252 "../hsp3/hsp3int.cpp"
 $20 = ($18|0)!=($19|0); //@line 252 "../hsp3/hsp3int.cpp"
 if ($20) {
  $21 = $reverse; //@line 253 "../hsp3/hsp3int.cpp"
  HEAP32[3376>>2] = $21; //@line 253 "../hsp3/hsp3int.cpp"
  $22 = HEAP32[3376>>2]|0; //@line 254 "../hsp3/hsp3int.cpp"
  $23 = ($22|0)!=(0); //@line 254 "../hsp3/hsp3int.cpp"
  if ($23) {
   $24 = +HEAPF64[3384>>3]; //@line 255 "../hsp3/hsp3int.cpp"
   $25 = +HEAPF64[3392>>3]; //@line 255 "../hsp3/hsp3int.cpp"
   $26 = $24 + $25; //@line 255 "../hsp3/hsp3int.cpp"
   HEAPF64[3400>>3] = $26; //@line 255 "../hsp3/hsp3int.cpp"
   $27 = +HEAPF64[3392>>3]; //@line 256 "../hsp3/hsp3int.cpp"
   $28 = -$27; //@line 256 "../hsp3/hsp3int.cpp"
   HEAPF64[3408>>3] = $28; //@line 256 "../hsp3/hsp3int.cpp"
  } else {
   $29 = +HEAPF64[3384>>3]; //@line 258 "../hsp3/hsp3int.cpp"
   HEAPF64[3400>>3] = $29; //@line 258 "../hsp3/hsp3int.cpp"
   $30 = +HEAPF64[3392>>3]; //@line 259 "../hsp3/hsp3int.cpp"
   HEAPF64[3408>>3] = $30; //@line 259 "../hsp3/hsp3int.cpp"
  }
 }
 $31 = $type; //@line 263 "../hsp3/hsp3int.cpp"
 do {
  switch ($31|0) {
  case 15:  {
   $60 = $t; //@line 297 "../hsp3/hsp3int.cpp"
   $61 = (+__ZL17_ease_shake_inoutd($60)); //@line 297 "../hsp3/hsp3int.cpp"
   $0 = $61; //@line 297 "../hsp3/hsp3int.cpp"
   break;
  }
  case 11:  {
   $52 = $t; //@line 288 "../hsp3/hsp3int.cpp"
   $53 = (+__ZL16_ease_bounce_outd($52)); //@line 288 "../hsp3/hsp3int.cpp"
   $0 = $53; //@line 288 "../hsp3/hsp3int.cpp"
   break;
  }
  case 13:  {
   $56 = $t; //@line 293 "../hsp3/hsp3int.cpp"
   $57 = (+__ZL14_ease_shake_ind($56)); //@line 293 "../hsp3/hsp3int.cpp"
   $0 = $57; //@line 293 "../hsp3/hsp3int.cpp"
   break;
  }
  case 14:  {
   $58 = $t; //@line 295 "../hsp3/hsp3int.cpp"
   $59 = (+__ZL15_ease_shake_outd($58)); //@line 295 "../hsp3/hsp3int.cpp"
   $0 = $59; //@line 295 "../hsp3/hsp3int.cpp"
   break;
  }
  case 12:  {
   $54 = $t; //@line 290 "../hsp3/hsp3int.cpp"
   $55 = (+__ZL18_ease_bounce_inoutd($54)); //@line 290 "../hsp3/hsp3int.cpp"
   $0 = $55; //@line 290 "../hsp3/hsp3int.cpp"
   break;
  }
  case 3:  {
   $36 = $t; //@line 269 "../hsp3/hsp3int.cpp"
   $37 = (+__ZL16_ease_quad_inoutd($36)); //@line 269 "../hsp3/hsp3int.cpp"
   $0 = $37; //@line 269 "../hsp3/hsp3int.cpp"
   break;
  }
  case 1:  {
   $32 = $t; //@line 265 "../hsp3/hsp3int.cpp"
   $33 = (+__ZL13_ease_quad_ind($32)); //@line 265 "../hsp3/hsp3int.cpp"
   $0 = $33; //@line 265 "../hsp3/hsp3int.cpp"
   break;
  }
  case 2:  {
   $34 = $t; //@line 267 "../hsp3/hsp3int.cpp"
   $35 = (+__ZL14_ease_quad_outd($34)); //@line 267 "../hsp3/hsp3int.cpp"
   $0 = $35; //@line 267 "../hsp3/hsp3int.cpp"
   break;
  }
  case 4:  {
   $38 = $t; //@line 272 "../hsp3/hsp3int.cpp"
   $39 = (+__ZL14_ease_cubic_ind($38)); //@line 272 "../hsp3/hsp3int.cpp"
   $0 = $39; //@line 272 "../hsp3/hsp3int.cpp"
   break;
  }
  case 7:  {
   $44 = $t; //@line 279 "../hsp3/hsp3int.cpp"
   $45 = (+__ZL16_ease_quartic_ind($44)); //@line 279 "../hsp3/hsp3int.cpp"
   $0 = $45; //@line 279 "../hsp3/hsp3int.cpp"
   break;
  }
  case 10:  {
   $50 = $t; //@line 286 "../hsp3/hsp3int.cpp"
   $51 = (+__ZL15_ease_bounce_ind($50)); //@line 286 "../hsp3/hsp3int.cpp"
   $0 = $51; //@line 286 "../hsp3/hsp3int.cpp"
   break;
  }
  case 9:  {
   $48 = $t; //@line 283 "../hsp3/hsp3int.cpp"
   $49 = (+__ZL19_ease_quartic_inoutd($48)); //@line 283 "../hsp3/hsp3int.cpp"
   $0 = $49; //@line 283 "../hsp3/hsp3int.cpp"
   break;
  }
  case 8:  {
   $46 = $t; //@line 281 "../hsp3/hsp3int.cpp"
   $47 = (+__ZL17_ease_quartic_outd($46)); //@line 281 "../hsp3/hsp3int.cpp"
   $0 = $47; //@line 281 "../hsp3/hsp3int.cpp"
   break;
  }
  case 0:  {
   label = 30;
   break;
  }
  case 6:  {
   $42 = $t; //@line 276 "../hsp3/hsp3int.cpp"
   $43 = (+__ZL17_ease_cubic_inoutd($42)); //@line 276 "../hsp3/hsp3int.cpp"
   $0 = $43; //@line 276 "../hsp3/hsp3int.cpp"
   break;
  }
  case 5:  {
   $40 = $t; //@line 274 "../hsp3/hsp3int.cpp"
   $41 = (+__ZL15_ease_cubic_outd($40)); //@line 274 "../hsp3/hsp3int.cpp"
   $0 = $41; //@line 274 "../hsp3/hsp3int.cpp"
   break;
  }
  default: {
   label = 30;
  }
  }
 } while(0);
 if ((label|0) == 30) {
  $62 = $t; //@line 303 "../hsp3/hsp3int.cpp"
  $63 = (+__ZL12_ease_lineard($62)); //@line 303 "../hsp3/hsp3int.cpp"
  $0 = $63; //@line 303 "../hsp3/hsp3int.cpp"
 }
 $64 = $0; //@line 304 "../hsp3/hsp3int.cpp"
 STACKTOP = sp;return (+$64); //@line 304 "../hsp3/hsp3int.cpp"
}
function __ZL7getEasedd($value,$maxvalue) {
 $value = +$value;
 $maxvalue = +$maxvalue;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = $value;
 $2 = $maxvalue;
 $3 = $2; //@line 308 "../hsp3/hsp3int.cpp"
 $4 = $3 == 0.0; //@line 308 "../hsp3/hsp3int.cpp"
 if ($4) {
  $0 = 0.0; //@line 308 "../hsp3/hsp3int.cpp"
 } else {
  $5 = $1; //@line 309 "../hsp3/hsp3int.cpp"
  $6 = $2; //@line 309 "../hsp3/hsp3int.cpp"
  $7 = $5 / $6; //@line 309 "../hsp3/hsp3int.cpp"
  $8 = (+__ZL7getEased($7)); //@line 309 "../hsp3/hsp3int.cpp"
  $0 = $8; //@line 309 "../hsp3/hsp3int.cpp"
 }
 $9 = $0; //@line 310 "../hsp3/hsp3int.cpp"
 STACKTOP = sp;return (+$9); //@line 310 "../hsp3/hsp3int.cpp"
}
function __ZL13_ease_quad_ind($t) {
 $t = +$t;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $t;
 $1 = +HEAPF64[3408>>3]; //@line 83 "../hsp3/hsp3int.cpp"
 $2 = $0; //@line 83 "../hsp3/hsp3int.cpp"
 $3 = $1 * $2; //@line 83 "../hsp3/hsp3int.cpp"
 $4 = $0; //@line 83 "../hsp3/hsp3int.cpp"
 $5 = $3 * $4; //@line 83 "../hsp3/hsp3int.cpp"
 $6 = +HEAPF64[3400>>3]; //@line 83 "../hsp3/hsp3int.cpp"
 $7 = $5 + $6; //@line 83 "../hsp3/hsp3int.cpp"
 STACKTOP = sp;return (+$7); //@line 83 "../hsp3/hsp3int.cpp"
}
function __ZL14_ease_quad_outd($t) {
 $t = +$t;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $t;
 $1 = +HEAPF64[3408>>3]; //@line 88 "../hsp3/hsp3int.cpp"
 $2 = -$1; //@line 88 "../hsp3/hsp3int.cpp"
 $3 = $0; //@line 88 "../hsp3/hsp3int.cpp"
 $4 = $2 * $3; //@line 88 "../hsp3/hsp3int.cpp"
 $5 = $0; //@line 88 "../hsp3/hsp3int.cpp"
 $6 = $5 - 2.0; //@line 88 "../hsp3/hsp3int.cpp"
 $7 = $4 * $6; //@line 88 "../hsp3/hsp3int.cpp"
 $8 = +HEAPF64[3400>>3]; //@line 88 "../hsp3/hsp3int.cpp"
 $9 = $7 + $8; //@line 88 "../hsp3/hsp3int.cpp"
 STACKTOP = sp;return (+$9); //@line 88 "../hsp3/hsp3int.cpp"
}
function __ZL16_ease_quad_inoutd($t) {
 $t = +$t;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $tt = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = $t;
 $2 = $1; //@line 94 "../hsp3/hsp3int.cpp"
 $3 = $2 * 2.0; //@line 94 "../hsp3/hsp3int.cpp"
 $tt = $3; //@line 94 "../hsp3/hsp3int.cpp"
 $4 = $tt; //@line 95 "../hsp3/hsp3int.cpp"
 $5 = $4 < 1.0; //@line 95 "../hsp3/hsp3int.cpp"
 if ($5) {
  $6 = +HEAPF64[3408>>3]; //@line 96 "../hsp3/hsp3int.cpp"
  $7 = $6 * 0.5; //@line 96 "../hsp3/hsp3int.cpp"
  $8 = $tt; //@line 96 "../hsp3/hsp3int.cpp"
  $9 = $7 * $8; //@line 96 "../hsp3/hsp3int.cpp"
  $10 = $tt; //@line 96 "../hsp3/hsp3int.cpp"
  $11 = $9 * $10; //@line 96 "../hsp3/hsp3int.cpp"
  $12 = +HEAPF64[3400>>3]; //@line 96 "../hsp3/hsp3int.cpp"
  $13 = $11 + $12; //@line 96 "../hsp3/hsp3int.cpp"
  $0 = $13; //@line 96 "../hsp3/hsp3int.cpp"
  $27 = $0; //@line 100 "../hsp3/hsp3int.cpp"
  STACKTOP = sp;return (+$27); //@line 100 "../hsp3/hsp3int.cpp"
 } else {
  $14 = $tt; //@line 98 "../hsp3/hsp3int.cpp"
  $15 = $14 - 1.0; //@line 98 "../hsp3/hsp3int.cpp"
  $tt = $15; //@line 98 "../hsp3/hsp3int.cpp"
  $16 = +HEAPF64[3408>>3]; //@line 99 "../hsp3/hsp3int.cpp"
  $17 = -$16; //@line 99 "../hsp3/hsp3int.cpp"
  $18 = $17 * 0.5; //@line 99 "../hsp3/hsp3int.cpp"
  $19 = $tt; //@line 99 "../hsp3/hsp3int.cpp"
  $20 = $tt; //@line 99 "../hsp3/hsp3int.cpp"
  $21 = $20 - 2.0; //@line 99 "../hsp3/hsp3int.cpp"
  $22 = $19 * $21; //@line 99 "../hsp3/hsp3int.cpp"
  $23 = $22 - 1.0; //@line 99 "../hsp3/hsp3int.cpp"
  $24 = $18 * $23; //@line 99 "../hsp3/hsp3int.cpp"
  $25 = +HEAPF64[3400>>3]; //@line 99 "../hsp3/hsp3int.cpp"
  $26 = $24 + $25; //@line 99 "../hsp3/hsp3int.cpp"
  $0 = $26; //@line 99 "../hsp3/hsp3int.cpp"
  $27 = $0; //@line 100 "../hsp3/hsp3int.cpp"
  STACKTOP = sp;return (+$27); //@line 100 "../hsp3/hsp3int.cpp"
 }
 return +0;
}
function __ZL14_ease_cubic_ind($t) {
 $t = +$t;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $t;
 $1 = +HEAPF64[3408>>3]; //@line 104 "../hsp3/hsp3int.cpp"
 $2 = $0; //@line 104 "../hsp3/hsp3int.cpp"
 $3 = $1 * $2; //@line 104 "../hsp3/hsp3int.cpp"
 $4 = $0; //@line 104 "../hsp3/hsp3int.cpp"
 $5 = $3 * $4; //@line 104 "../hsp3/hsp3int.cpp"
 $6 = $0; //@line 104 "../hsp3/hsp3int.cpp"
 $7 = $5 * $6; //@line 104 "../hsp3/hsp3int.cpp"
 $8 = +HEAPF64[3400>>3]; //@line 104 "../hsp3/hsp3int.cpp"
 $9 = $7 + $8; //@line 104 "../hsp3/hsp3int.cpp"
 STACKTOP = sp;return (+$9); //@line 104 "../hsp3/hsp3int.cpp"
}
function __ZL15_ease_cubic_outd($t) {
 $t = +$t;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $tt = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $t;
 $1 = $0; //@line 110 "../hsp3/hsp3int.cpp"
 $2 = $1 - 1.0; //@line 110 "../hsp3/hsp3int.cpp"
 $tt = $2; //@line 110 "../hsp3/hsp3int.cpp"
 $3 = +HEAPF64[3408>>3]; //@line 111 "../hsp3/hsp3int.cpp"
 $4 = $tt; //@line 111 "../hsp3/hsp3int.cpp"
 $5 = $tt; //@line 111 "../hsp3/hsp3int.cpp"
 $6 = $4 * $5; //@line 111 "../hsp3/hsp3int.cpp"
 $7 = $tt; //@line 111 "../hsp3/hsp3int.cpp"
 $8 = $6 * $7; //@line 111 "../hsp3/hsp3int.cpp"
 $9 = $8 + 1.0; //@line 111 "../hsp3/hsp3int.cpp"
 $10 = $3 * $9; //@line 111 "../hsp3/hsp3int.cpp"
 $11 = +HEAPF64[3400>>3]; //@line 111 "../hsp3/hsp3int.cpp"
 $12 = $10 + $11; //@line 111 "../hsp3/hsp3int.cpp"
 STACKTOP = sp;return (+$12); //@line 111 "../hsp3/hsp3int.cpp"
}
function __ZL17_ease_cubic_inoutd($t) {
 $t = +$t;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $tt = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = $t;
 $2 = $1; //@line 117 "../hsp3/hsp3int.cpp"
 $3 = $2 * 2.0; //@line 117 "../hsp3/hsp3int.cpp"
 $tt = $3; //@line 117 "../hsp3/hsp3int.cpp"
 $4 = $tt; //@line 118 "../hsp3/hsp3int.cpp"
 $5 = $4 < 1.0; //@line 118 "../hsp3/hsp3int.cpp"
 if ($5) {
  $6 = +HEAPF64[3408>>3]; //@line 119 "../hsp3/hsp3int.cpp"
  $7 = $6 * 0.5; //@line 119 "../hsp3/hsp3int.cpp"
  $8 = $tt; //@line 119 "../hsp3/hsp3int.cpp"
  $9 = $7 * $8; //@line 119 "../hsp3/hsp3int.cpp"
  $10 = $tt; //@line 119 "../hsp3/hsp3int.cpp"
  $11 = $9 * $10; //@line 119 "../hsp3/hsp3int.cpp"
  $12 = $tt; //@line 119 "../hsp3/hsp3int.cpp"
  $13 = $11 * $12; //@line 119 "../hsp3/hsp3int.cpp"
  $14 = +HEAPF64[3400>>3]; //@line 119 "../hsp3/hsp3int.cpp"
  $15 = $13 + $14; //@line 119 "../hsp3/hsp3int.cpp"
  $0 = $15; //@line 119 "../hsp3/hsp3int.cpp"
  $29 = $0; //@line 123 "../hsp3/hsp3int.cpp"
  STACKTOP = sp;return (+$29); //@line 123 "../hsp3/hsp3int.cpp"
 } else {
  $16 = $tt; //@line 121 "../hsp3/hsp3int.cpp"
  $17 = $16 - 2.0; //@line 121 "../hsp3/hsp3int.cpp"
  $tt = $17; //@line 121 "../hsp3/hsp3int.cpp"
  $18 = +HEAPF64[3408>>3]; //@line 122 "../hsp3/hsp3int.cpp"
  $19 = $18 * 0.5; //@line 122 "../hsp3/hsp3int.cpp"
  $20 = $tt; //@line 122 "../hsp3/hsp3int.cpp"
  $21 = $tt; //@line 122 "../hsp3/hsp3int.cpp"
  $22 = $20 * $21; //@line 122 "../hsp3/hsp3int.cpp"
  $23 = $tt; //@line 122 "../hsp3/hsp3int.cpp"
  $24 = $22 * $23; //@line 122 "../hsp3/hsp3int.cpp"
  $25 = $24 + 2.0; //@line 122 "../hsp3/hsp3int.cpp"
  $26 = $19 * $25; //@line 122 "../hsp3/hsp3int.cpp"
  $27 = +HEAPF64[3400>>3]; //@line 122 "../hsp3/hsp3int.cpp"
  $28 = $26 + $27; //@line 122 "../hsp3/hsp3int.cpp"
  $0 = $28; //@line 122 "../hsp3/hsp3int.cpp"
  $29 = $0; //@line 123 "../hsp3/hsp3int.cpp"
  STACKTOP = sp;return (+$29); //@line 123 "../hsp3/hsp3int.cpp"
 }
 return +0;
}
function __ZL16_ease_quartic_ind($t) {
 $t = +$t;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $t;
 $1 = +HEAPF64[3408>>3]; //@line 127 "../hsp3/hsp3int.cpp"
 $2 = $0; //@line 127 "../hsp3/hsp3int.cpp"
 $3 = $1 * $2; //@line 127 "../hsp3/hsp3int.cpp"
 $4 = $0; //@line 127 "../hsp3/hsp3int.cpp"
 $5 = $3 * $4; //@line 127 "../hsp3/hsp3int.cpp"
 $6 = $0; //@line 127 "../hsp3/hsp3int.cpp"
 $7 = $5 * $6; //@line 127 "../hsp3/hsp3int.cpp"
 $8 = $0; //@line 127 "../hsp3/hsp3int.cpp"
 $9 = $7 * $8; //@line 127 "../hsp3/hsp3int.cpp"
 $10 = +HEAPF64[3400>>3]; //@line 127 "../hsp3/hsp3int.cpp"
 $11 = $9 + $10; //@line 127 "../hsp3/hsp3int.cpp"
 STACKTOP = sp;return (+$11); //@line 127 "../hsp3/hsp3int.cpp"
}
function __ZL17_ease_quartic_outd($t) {
 $t = +$t;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $tt = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $t;
 $1 = $0; //@line 133 "../hsp3/hsp3int.cpp"
 $2 = $1 - 1.0; //@line 133 "../hsp3/hsp3int.cpp"
 $tt = $2; //@line 133 "../hsp3/hsp3int.cpp"
 $3 = +HEAPF64[3408>>3]; //@line 134 "../hsp3/hsp3int.cpp"
 $4 = -$3; //@line 134 "../hsp3/hsp3int.cpp"
 $5 = $tt; //@line 134 "../hsp3/hsp3int.cpp"
 $6 = $tt; //@line 134 "../hsp3/hsp3int.cpp"
 $7 = $5 * $6; //@line 134 "../hsp3/hsp3int.cpp"
 $8 = $tt; //@line 134 "../hsp3/hsp3int.cpp"
 $9 = $7 * $8; //@line 134 "../hsp3/hsp3int.cpp"
 $10 = $tt; //@line 134 "../hsp3/hsp3int.cpp"
 $11 = $9 * $10; //@line 134 "../hsp3/hsp3int.cpp"
 $12 = $11 - 1.0; //@line 134 "../hsp3/hsp3int.cpp"
 $13 = $4 * $12; //@line 134 "../hsp3/hsp3int.cpp"
 $14 = +HEAPF64[3400>>3]; //@line 134 "../hsp3/hsp3int.cpp"
 $15 = $13 + $14; //@line 134 "../hsp3/hsp3int.cpp"
 STACKTOP = sp;return (+$15); //@line 134 "../hsp3/hsp3int.cpp"
}
function __ZL19_ease_quartic_inoutd($t) {
 $t = +$t;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $tt = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = $t;
 $2 = $1; //@line 140 "../hsp3/hsp3int.cpp"
 $3 = $2 * 2.0; //@line 140 "../hsp3/hsp3int.cpp"
 $tt = $3; //@line 140 "../hsp3/hsp3int.cpp"
 $4 = $tt; //@line 141 "../hsp3/hsp3int.cpp"
 $5 = $4 < 1.0; //@line 141 "../hsp3/hsp3int.cpp"
 if ($5) {
  $6 = +HEAPF64[3408>>3]; //@line 142 "../hsp3/hsp3int.cpp"
  $7 = $6 * 0.5; //@line 142 "../hsp3/hsp3int.cpp"
  $8 = $tt; //@line 142 "../hsp3/hsp3int.cpp"
  $9 = $7 * $8; //@line 142 "../hsp3/hsp3int.cpp"
  $10 = $tt; //@line 142 "../hsp3/hsp3int.cpp"
  $11 = $9 * $10; //@line 142 "../hsp3/hsp3int.cpp"
  $12 = $tt; //@line 142 "../hsp3/hsp3int.cpp"
  $13 = $11 * $12; //@line 142 "../hsp3/hsp3int.cpp"
  $14 = $tt; //@line 142 "../hsp3/hsp3int.cpp"
  $15 = $13 * $14; //@line 142 "../hsp3/hsp3int.cpp"
  $16 = +HEAPF64[3400>>3]; //@line 142 "../hsp3/hsp3int.cpp"
  $17 = $15 + $16; //@line 142 "../hsp3/hsp3int.cpp"
  $0 = $17; //@line 142 "../hsp3/hsp3int.cpp"
  $34 = $0; //@line 146 "../hsp3/hsp3int.cpp"
  STACKTOP = sp;return (+$34); //@line 146 "../hsp3/hsp3int.cpp"
 } else {
  $18 = $tt; //@line 144 "../hsp3/hsp3int.cpp"
  $19 = $18 - 2.0; //@line 144 "../hsp3/hsp3int.cpp"
  $tt = $19; //@line 144 "../hsp3/hsp3int.cpp"
  $20 = +HEAPF64[3408>>3]; //@line 145 "../hsp3/hsp3int.cpp"
  $21 = -$20; //@line 145 "../hsp3/hsp3int.cpp"
  $22 = $21 * 0.5; //@line 145 "../hsp3/hsp3int.cpp"
  $23 = $tt; //@line 145 "../hsp3/hsp3int.cpp"
  $24 = $tt; //@line 145 "../hsp3/hsp3int.cpp"
  $25 = $23 * $24; //@line 145 "../hsp3/hsp3int.cpp"
  $26 = $tt; //@line 145 "../hsp3/hsp3int.cpp"
  $27 = $25 * $26; //@line 145 "../hsp3/hsp3int.cpp"
  $28 = $tt; //@line 145 "../hsp3/hsp3int.cpp"
  $29 = $27 * $28; //@line 145 "../hsp3/hsp3int.cpp"
  $30 = $29 - 2.0; //@line 145 "../hsp3/hsp3int.cpp"
  $31 = $22 * $30; //@line 145 "../hsp3/hsp3int.cpp"
  $32 = +HEAPF64[3400>>3]; //@line 145 "../hsp3/hsp3int.cpp"
  $33 = $31 + $32; //@line 145 "../hsp3/hsp3int.cpp"
  $0 = $33; //@line 145 "../hsp3/hsp3int.cpp"
  $34 = $0; //@line 146 "../hsp3/hsp3int.cpp"
  STACKTOP = sp;return (+$34); //@line 146 "../hsp3/hsp3int.cpp"
 }
 return +0;
}
function __ZL15_ease_bounce_ind($t) {
 $t = +$t;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $tt = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $t;
 $1 = $0; //@line 164 "../hsp3/hsp3int.cpp"
 $2 = 1.0 - $1; //@line 164 "../hsp3/hsp3int.cpp"
 $tt = $2; //@line 164 "../hsp3/hsp3int.cpp"
 $3 = +HEAPF64[3408>>3]; //@line 165 "../hsp3/hsp3int.cpp"
 $4 = $tt; //@line 165 "../hsp3/hsp3int.cpp"
 $5 = (+__ZL12_ease_bounced($4)); //@line 165 "../hsp3/hsp3int.cpp"
 $6 = $3 - $5; //@line 165 "../hsp3/hsp3int.cpp"
 $7 = +HEAPF64[3400>>3]; //@line 165 "../hsp3/hsp3int.cpp"
 $8 = $6 + $7; //@line 165 "../hsp3/hsp3int.cpp"
 STACKTOP = sp;return (+$8); //@line 165 "../hsp3/hsp3int.cpp"
}
function __ZL16_ease_bounce_outd($t) {
 $t = +$t;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $t;
 $1 = $0; //@line 170 "../hsp3/hsp3int.cpp"
 $2 = (+__ZL12_ease_bounced($1)); //@line 170 "../hsp3/hsp3int.cpp"
 $3 = +HEAPF64[3400>>3]; //@line 170 "../hsp3/hsp3int.cpp"
 $4 = $2 + $3; //@line 170 "../hsp3/hsp3int.cpp"
 STACKTOP = sp;return (+$4); //@line 170 "../hsp3/hsp3int.cpp"
}
function __ZL18_ease_bounce_inoutd($t) {
 $t = +$t;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $3 = 0, $4 = 0.0;
 var $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $tt = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = $t;
 $2 = $1; //@line 176 "../hsp3/hsp3int.cpp"
 $3 = $2 < 0.5; //@line 176 "../hsp3/hsp3int.cpp"
 if ($3) {
  $4 = $1; //@line 177 "../hsp3/hsp3int.cpp"
  $5 = $4 * 2.0; //@line 177 "../hsp3/hsp3int.cpp"
  $6 = 1.0 - $5; //@line 177 "../hsp3/hsp3int.cpp"
  $tt = $6; //@line 177 "../hsp3/hsp3int.cpp"
  $7 = +HEAPF64[3408>>3]; //@line 178 "../hsp3/hsp3int.cpp"
  $8 = $tt; //@line 178 "../hsp3/hsp3int.cpp"
  $9 = (+__ZL12_ease_bounced($8)); //@line 178 "../hsp3/hsp3int.cpp"
  $10 = $7 - $9; //@line 178 "../hsp3/hsp3int.cpp"
  $11 = $10 * 0.5; //@line 178 "../hsp3/hsp3int.cpp"
  $12 = +HEAPF64[3400>>3]; //@line 178 "../hsp3/hsp3int.cpp"
  $13 = $11 + $12; //@line 178 "../hsp3/hsp3int.cpp"
  $0 = $13; //@line 178 "../hsp3/hsp3int.cpp"
  $24 = $0; //@line 181 "../hsp3/hsp3int.cpp"
  STACKTOP = sp;return (+$24); //@line 181 "../hsp3/hsp3int.cpp"
 } else {
  $14 = $1; //@line 180 "../hsp3/hsp3int.cpp"
  $15 = $14 * 2.0; //@line 180 "../hsp3/hsp3int.cpp"
  $16 = $15 - 1.0; //@line 180 "../hsp3/hsp3int.cpp"
  $17 = (+__ZL12_ease_bounced($16)); //@line 180 "../hsp3/hsp3int.cpp"
  $18 = $17 * 0.5; //@line 180 "../hsp3/hsp3int.cpp"
  $19 = +HEAPF64[3408>>3]; //@line 180 "../hsp3/hsp3int.cpp"
  $20 = $19 * 0.5; //@line 180 "../hsp3/hsp3int.cpp"
  $21 = $18 + $20; //@line 180 "../hsp3/hsp3int.cpp"
  $22 = +HEAPF64[3400>>3]; //@line 180 "../hsp3/hsp3int.cpp"
  $23 = $21 + $22; //@line 180 "../hsp3/hsp3int.cpp"
  $0 = $23; //@line 180 "../hsp3/hsp3int.cpp"
  $24 = $0; //@line 181 "../hsp3/hsp3int.cpp"
  STACKTOP = sp;return (+$24); //@line 181 "../hsp3/hsp3int.cpp"
 }
 return +0;
}
function __ZL14_ease_shake_ind($t) {
 $t = +$t;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $tt = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $t;
 $1 = $0; //@line 198 "../hsp3/hsp3int.cpp"
 $2 = 1.0 - $1; //@line 198 "../hsp3/hsp3int.cpp"
 $tt = $2; //@line 198 "../hsp3/hsp3int.cpp"
 $3 = +HEAPF64[3408>>3]; //@line 199 "../hsp3/hsp3int.cpp"
 $4 = $tt; //@line 199 "../hsp3/hsp3int.cpp"
 $5 = (+__ZL11_ease_shaked($4)); //@line 199 "../hsp3/hsp3int.cpp"
 $6 = $3 * $5; //@line 199 "../hsp3/hsp3int.cpp"
 $7 = $tt; //@line 199 "../hsp3/hsp3int.cpp"
 $8 = $6 * $7; //@line 199 "../hsp3/hsp3int.cpp"
 $9 = +HEAPF64[3408>>3]; //@line 199 "../hsp3/hsp3int.cpp"
 $10 = $9 * 0.5; //@line 199 "../hsp3/hsp3int.cpp"
 $11 = $tt; //@line 199 "../hsp3/hsp3int.cpp"
 $12 = $10 * $11; //@line 199 "../hsp3/hsp3int.cpp"
 $13 = $8 - $12; //@line 199 "../hsp3/hsp3int.cpp"
 $14 = +HEAPF64[3400>>3]; //@line 199 "../hsp3/hsp3int.cpp"
 $15 = $13 + $14; //@line 199 "../hsp3/hsp3int.cpp"
 STACKTOP = sp;return (+$15); //@line 199 "../hsp3/hsp3int.cpp"
}
function __ZL15_ease_shake_outd($t) {
 $t = +$t;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $t;
 $1 = +HEAPF64[3408>>3]; //@line 204 "../hsp3/hsp3int.cpp"
 $2 = $0; //@line 204 "../hsp3/hsp3int.cpp"
 $3 = (+__ZL11_ease_shaked($2)); //@line 204 "../hsp3/hsp3int.cpp"
 $4 = $1 * $3; //@line 204 "../hsp3/hsp3int.cpp"
 $5 = $0; //@line 204 "../hsp3/hsp3int.cpp"
 $6 = $4 * $5; //@line 204 "../hsp3/hsp3int.cpp"
 $7 = +HEAPF64[3408>>3]; //@line 204 "../hsp3/hsp3int.cpp"
 $8 = $7 * 0.5; //@line 204 "../hsp3/hsp3int.cpp"
 $9 = $0; //@line 204 "../hsp3/hsp3int.cpp"
 $10 = $8 * $9; //@line 204 "../hsp3/hsp3int.cpp"
 $11 = $6 - $10; //@line 204 "../hsp3/hsp3int.cpp"
 $12 = +HEAPF64[3400>>3]; //@line 204 "../hsp3/hsp3int.cpp"
 $13 = $11 + $12; //@line 204 "../hsp3/hsp3int.cpp"
 STACKTOP = sp;return (+$13); //@line 204 "../hsp3/hsp3int.cpp"
}
function __ZL17_ease_shake_inoutd($t) {
 $t = +$t;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $tt = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = $t;
 $2 = $1; //@line 210 "../hsp3/hsp3int.cpp"
 $3 = $2 * 2.0; //@line 210 "../hsp3/hsp3int.cpp"
 $tt = $3; //@line 210 "../hsp3/hsp3int.cpp"
 $4 = $tt; //@line 211 "../hsp3/hsp3int.cpp"
 $5 = $4 < 1.0; //@line 211 "../hsp3/hsp3int.cpp"
 if ($5) {
  $6 = $tt; //@line 212 "../hsp3/hsp3int.cpp"
  $7 = (+__ZL14_ease_shake_ind($6)); //@line 212 "../hsp3/hsp3int.cpp"
  $0 = $7; //@line 212 "../hsp3/hsp3int.cpp"
  $12 = $0; //@line 216 "../hsp3/hsp3int.cpp"
  STACKTOP = sp;return (+$12); //@line 216 "../hsp3/hsp3int.cpp"
 } else {
  $8 = $tt; //@line 214 "../hsp3/hsp3int.cpp"
  $9 = $8 - 1.0; //@line 214 "../hsp3/hsp3int.cpp"
  $tt = $9; //@line 214 "../hsp3/hsp3int.cpp"
  $10 = $tt; //@line 215 "../hsp3/hsp3int.cpp"
  $11 = (+__ZL15_ease_shake_outd($10)); //@line 215 "../hsp3/hsp3int.cpp"
  $0 = $11; //@line 215 "../hsp3/hsp3int.cpp"
  $12 = $0; //@line 216 "../hsp3/hsp3int.cpp"
  STACKTOP = sp;return (+$12); //@line 216 "../hsp3/hsp3int.cpp"
 }
 return +0;
}
function __ZL12_ease_lineard($t) {
 $t = +$t;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $t;
 $1 = +HEAPF64[3408>>3]; //@line 78 "../hsp3/hsp3int.cpp"
 $2 = $0; //@line 78 "../hsp3/hsp3int.cpp"
 $3 = $1 * $2; //@line 78 "../hsp3/hsp3int.cpp"
 $4 = +HEAPF64[3400>>3]; //@line 78 "../hsp3/hsp3int.cpp"
 $5 = $3 + $4; //@line 78 "../hsp3/hsp3int.cpp"
 STACKTOP = sp;return (+$5); //@line 78 "../hsp3/hsp3int.cpp"
}
function __ZL11_ease_shaked($t) {
 $t = +$t;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, $pulse = 0;
 var $tt = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = $t;
 $2 = $1; //@line 187 "../hsp3/hsp3int.cpp"
 $3 = $1; //@line 187 "../hsp3/hsp3int.cpp"
 $4 = $2 * $3; //@line 187 "../hsp3/hsp3int.cpp"
 $5 = $4 * 8.0; //@line 187 "../hsp3/hsp3int.cpp"
 $tt = $5; //@line 187 "../hsp3/hsp3int.cpp"
 $6 = $tt; //@line 188 "../hsp3/hsp3int.cpp"
 $7 = (~~(($6))); //@line 188 "../hsp3/hsp3int.cpp"
 $pulse = $7; //@line 188 "../hsp3/hsp3int.cpp"
 $8 = $pulse; //@line 189 "../hsp3/hsp3int.cpp"
 $9 = (+($8|0)); //@line 189 "../hsp3/hsp3int.cpp"
 $10 = $tt; //@line 189 "../hsp3/hsp3int.cpp"
 $11 = $10 - $9; //@line 189 "../hsp3/hsp3int.cpp"
 $tt = $11; //@line 189 "../hsp3/hsp3int.cpp"
 $12 = $pulse; //@line 190 "../hsp3/hsp3int.cpp"
 $13 = $12 & 1; //@line 190 "../hsp3/hsp3int.cpp"
 $14 = ($13|0)!=(0); //@line 190 "../hsp3/hsp3int.cpp"
 if ($14) {
  $15 = $tt; //@line 191 "../hsp3/hsp3int.cpp"
  $16 = 1.0 - $15; //@line 191 "../hsp3/hsp3int.cpp"
  $0 = $16; //@line 191 "../hsp3/hsp3int.cpp"
  $18 = $0; //@line 194 "../hsp3/hsp3int.cpp"
  STACKTOP = sp;return (+$18); //@line 194 "../hsp3/hsp3int.cpp"
 } else {
  $17 = $tt; //@line 193 "../hsp3/hsp3int.cpp"
  $0 = $17; //@line 193 "../hsp3/hsp3int.cpp"
  $18 = $0; //@line 194 "../hsp3/hsp3int.cpp"
  STACKTOP = sp;return (+$18); //@line 194 "../hsp3/hsp3int.cpp"
 }
 return +0;
}
function __ZL12_ease_bounced($t) {
 $t = +$t;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $t;
 $2 = $1; //@line 150 "../hsp3/hsp3int.cpp"
 $3 = $2 < 0.363636363636363646457; //@line 150 "../hsp3/hsp3int.cpp"
 if ($3) {
  $4 = +HEAPF64[3408>>3]; //@line 151 "../hsp3/hsp3int.cpp"
  $5 = $1; //@line 151 "../hsp3/hsp3int.cpp"
  $6 = 7.5625 * $5; //@line 151 "../hsp3/hsp3int.cpp"
  $7 = $1; //@line 151 "../hsp3/hsp3int.cpp"
  $8 = $6 * $7; //@line 151 "../hsp3/hsp3int.cpp"
  $9 = $4 * $8; //@line 151 "../hsp3/hsp3int.cpp"
  $0 = $9; //@line 151 "../hsp3/hsp3int.cpp"
  $38 = $0; //@line 159 "../hsp3/hsp3int.cpp"
  STACKTOP = sp;return (+$38); //@line 159 "../hsp3/hsp3int.cpp"
 }
 $10 = $1; //@line 152 "../hsp3/hsp3int.cpp"
 $11 = $10 < 0.727272727272727292913; //@line 152 "../hsp3/hsp3int.cpp"
 if ($11) {
  $12 = +HEAPF64[3408>>3]; //@line 153 "../hsp3/hsp3int.cpp"
  $13 = $1; //@line 153 "../hsp3/hsp3int.cpp"
  $14 = $13 - 0.545454545454545414174; //@line 153 "../hsp3/hsp3int.cpp"
  $1 = $14; //@line 153 "../hsp3/hsp3int.cpp"
  $15 = 7.5625 * $14; //@line 153 "../hsp3/hsp3int.cpp"
  $16 = $1; //@line 153 "../hsp3/hsp3int.cpp"
  $17 = $15 * $16; //@line 153 "../hsp3/hsp3int.cpp"
  $18 = $17 + 0.75; //@line 153 "../hsp3/hsp3int.cpp"
  $19 = $12 * $18; //@line 153 "../hsp3/hsp3int.cpp"
  $0 = $19; //@line 153 "../hsp3/hsp3int.cpp"
  $38 = $0; //@line 159 "../hsp3/hsp3int.cpp"
  STACKTOP = sp;return (+$38); //@line 159 "../hsp3/hsp3int.cpp"
 }
 $20 = $1; //@line 154 "../hsp3/hsp3int.cpp"
 $21 = $20 < 0.90909090909090906063; //@line 154 "../hsp3/hsp3int.cpp"
 if ($21) {
  $22 = +HEAPF64[3408>>3]; //@line 155 "../hsp3/hsp3int.cpp"
  $23 = $1; //@line 155 "../hsp3/hsp3int.cpp"
  $24 = $23 - 0.818181818181818232283; //@line 155 "../hsp3/hsp3int.cpp"
  $1 = $24; //@line 155 "../hsp3/hsp3int.cpp"
  $25 = 7.5625 * $24; //@line 155 "../hsp3/hsp3int.cpp"
  $26 = $1; //@line 155 "../hsp3/hsp3int.cpp"
  $27 = $25 * $26; //@line 155 "../hsp3/hsp3int.cpp"
  $28 = $27 + 0.9375; //@line 155 "../hsp3/hsp3int.cpp"
  $29 = $22 * $28; //@line 155 "../hsp3/hsp3int.cpp"
  $0 = $29; //@line 155 "../hsp3/hsp3int.cpp"
  $38 = $0; //@line 159 "../hsp3/hsp3int.cpp"
  STACKTOP = sp;return (+$38); //@line 159 "../hsp3/hsp3int.cpp"
 } else {
  $30 = +HEAPF64[3408>>3]; //@line 157 "../hsp3/hsp3int.cpp"
  $31 = $1; //@line 157 "../hsp3/hsp3int.cpp"
  $32 = $31 - 0.954545454545454585826; //@line 157 "../hsp3/hsp3int.cpp"
  $1 = $32; //@line 157 "../hsp3/hsp3int.cpp"
  $33 = 7.5625 * $32; //@line 157 "../hsp3/hsp3int.cpp"
  $34 = $1; //@line 157 "../hsp3/hsp3int.cpp"
  $35 = $33 * $34; //@line 157 "../hsp3/hsp3int.cpp"
  $36 = $35 + 0.984375; //@line 157 "../hsp3/hsp3int.cpp"
  $37 = $30 * $36; //@line 157 "../hsp3/hsp3int.cpp"
  $0 = $37; //@line 157 "../hsp3/hsp3int.cpp"
  $38 = $0; //@line 159 "../hsp3/hsp3int.cpp"
  STACKTOP = sp;return (+$38); //@line 159 "../hsp3/hsp3int.cpp"
 }
 return +0;
}
function __ZL16cnvformat_expandPPcPiii($p,$capacity,$len,$n) {
 $p = $p|0;
 $capacity = $capacity|0;
 $len = $len|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $capa = 0, $needed_size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $p;
 $1 = $capacity;
 $2 = $len;
 $3 = $n;
 $4 = $2; //@line 366 "../hsp3/hsp3int.cpp"
 $5 = $3; //@line 366 "../hsp3/hsp3int.cpp"
 $6 = (($4) + ($5))|0; //@line 366 "../hsp3/hsp3int.cpp"
 $7 = (($6) + 1)|0; //@line 366 "../hsp3/hsp3int.cpp"
 $needed_size = $7; //@line 366 "../hsp3/hsp3int.cpp"
 $8 = $1; //@line 367 "../hsp3/hsp3int.cpp"
 $9 = HEAP32[$8>>2]|0; //@line 367 "../hsp3/hsp3int.cpp"
 $capa = $9; //@line 367 "../hsp3/hsp3int.cpp"
 $10 = $needed_size; //@line 368 "../hsp3/hsp3int.cpp"
 $11 = $capa; //@line 368 "../hsp3/hsp3int.cpp"
 $12 = ($10|0)>($11|0); //@line 368 "../hsp3/hsp3int.cpp"
 if (!($12)) {
  STACKTOP = sp;return; //@line 375 "../hsp3/hsp3int.cpp"
 }
 while(1) {
  $13 = $needed_size; //@line 369 "../hsp3/hsp3int.cpp"
  $14 = $capa; //@line 369 "../hsp3/hsp3int.cpp"
  $15 = ($13|0)>($14|0); //@line 369 "../hsp3/hsp3int.cpp"
  if (!($15)) {
   break;
  }
  $16 = $capa; //@line 370 "../hsp3/hsp3int.cpp"
  $17 = $16<<1; //@line 370 "../hsp3/hsp3int.cpp"
  $capa = $17; //@line 370 "../hsp3/hsp3int.cpp"
 }
 $18 = $0; //@line 372 "../hsp3/hsp3int.cpp"
 $19 = HEAP32[$18>>2]|0; //@line 372 "../hsp3/hsp3int.cpp"
 $20 = $capa; //@line 372 "../hsp3/hsp3int.cpp"
 $21 = (__Z8sbExpandPci($19,$20)|0); //@line 372 "../hsp3/hsp3int.cpp"
 $22 = $0; //@line 372 "../hsp3/hsp3int.cpp"
 HEAP32[$22>>2] = $21; //@line 372 "../hsp3/hsp3int.cpp"
 $23 = $capa; //@line 373 "../hsp3/hsp3int.cpp"
 $24 = $1; //@line 373 "../hsp3/hsp3int.cpp"
 HEAP32[$24>>2] = $23; //@line 373 "../hsp3/hsp3int.cpp"
 STACKTOP = sp;return; //@line 375 "../hsp3/hsp3int.cpp"
}
function __ZL15var_set_str_lenP4PValiPci($pval,$aptr,$str,$len) {
 $pval = $pval|0;
 $aptr = $aptr|0;
 $str = $str|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $proc = 0, $ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $pval;
 $1 = $aptr;
 $2 = $str;
 $3 = $len;
 $4 = HEAP32[3456>>2]|0; //@line 503 "../hsp3/hsp3int.cpp"
 $5 = (($4) + 280|0); //@line 503 "../hsp3/hsp3int.cpp"
 $proc = $5; //@line 503 "../hsp3/hsp3int.cpp"
 $6 = $0; //@line 504 "../hsp3/hsp3int.cpp"
 $7 = HEAP16[$6>>1]|0; //@line 504 "../hsp3/hsp3int.cpp"
 $8 = $7 << 16 >> 16; //@line 504 "../hsp3/hsp3int.cpp"
 $9 = ($8|0)!=(2); //@line 504 "../hsp3/hsp3int.cpp"
 do {
  if ($9) {
   $10 = $1; //@line 505 "../hsp3/hsp3int.cpp"
   $11 = ($10|0)!=(0); //@line 505 "../hsp3/hsp3int.cpp"
   if ($11) {
    $12 = (___cxa_allocate_exception(4)|0); //@line 505 "../hsp3/hsp3int.cpp"
    HEAP32[$12>>2] = 31; //@line 505 "../hsp3/hsp3int.cpp"
    ___cxa_throw(($12|0),(624|0),(0|0)); //@line 505 "../hsp3/hsp3int.cpp"
    // unreachable; //@line 505 "../hsp3/hsp3int.cpp"
   } else {
    $13 = $0; //@line 506 "../hsp3/hsp3int.cpp"
    __Z15HspVarCoreClearP4PVali($13,2); //@line 506 "../hsp3/hsp3int.cpp"
    break;
   }
  }
 } while(0);
 $14 = $1; //@line 508 "../hsp3/hsp3int.cpp"
 $15 = $0; //@line 508 "../hsp3/hsp3int.cpp"
 $16 = (($15) + 40|0); //@line 508 "../hsp3/hsp3int.cpp"
 HEAP32[$16>>2] = $14; //@line 508 "../hsp3/hsp3int.cpp"
 $17 = $0; //@line 509 "../hsp3/hsp3int.cpp"
 $18 = HEAP16[$17>>1]|0; //@line 509 "../hsp3/hsp3int.cpp"
 $19 = $18 << 16 >> 16; //@line 509 "../hsp3/hsp3int.cpp"
 $20 = HEAP32[3456>>2]|0; //@line 509 "../hsp3/hsp3int.cpp"
 $21 = (($20) + (($19*140)|0)|0); //@line 509 "../hsp3/hsp3int.cpp"
 $22 = (($21) + 68|0); //@line 509 "../hsp3/hsp3int.cpp"
 $23 = HEAP32[$22>>2]|0; //@line 509 "../hsp3/hsp3int.cpp"
 $24 = $0; //@line 509 "../hsp3/hsp3int.cpp"
 $25 = $proc; //@line 509 "../hsp3/hsp3int.cpp"
 $26 = (($25) + 28|0); //@line 509 "../hsp3/hsp3int.cpp"
 $27 = HEAP32[$26>>2]|0; //@line 509 "../hsp3/hsp3int.cpp"
 $28 = $0; //@line 509 "../hsp3/hsp3int.cpp"
 $29 = (FUNCTION_TABLE_ii[$27 & 255]($28)|0); //@line 509 "../hsp3/hsp3int.cpp"
 $30 = $3; //@line 509 "../hsp3/hsp3int.cpp"
 $31 = (($30) + 1)|0; //@line 509 "../hsp3/hsp3int.cpp"
 FUNCTION_TABLE_viii[$23 & 255]($24,$29,$31); //@line 509 "../hsp3/hsp3int.cpp"
 $32 = $proc; //@line 510 "../hsp3/hsp3int.cpp"
 $33 = (($32) + 28|0); //@line 510 "../hsp3/hsp3int.cpp"
 $34 = HEAP32[$33>>2]|0; //@line 510 "../hsp3/hsp3int.cpp"
 $35 = $0; //@line 510 "../hsp3/hsp3int.cpp"
 $36 = (FUNCTION_TABLE_ii[$34 & 255]($35)|0); //@line 510 "../hsp3/hsp3int.cpp"
 $ptr = $36; //@line 510 "../hsp3/hsp3int.cpp"
 $37 = $ptr; //@line 511 "../hsp3/hsp3int.cpp"
 $38 = $2; //@line 511 "../hsp3/hsp3int.cpp"
 $39 = $3; //@line 511 "../hsp3/hsp3int.cpp"
 _memcpy(($37|0),($38|0),($39|0))|0; //@line 511 "../hsp3/hsp3int.cpp"
 $40 = $3; //@line 512 "../hsp3/hsp3int.cpp"
 $41 = $ptr; //@line 512 "../hsp3/hsp3int.cpp"
 $42 = (($41) + ($40)|0); //@line 512 "../hsp3/hsp3int.cpp"
 HEAP8[$42>>0] = 0; //@line 512 "../hsp3/hsp3int.cpp"
 STACKTOP = sp;return; //@line 513 "../hsp3/hsp3int.cpp"
}
function __ZL7setEaseidd($type,$value_start,$value_end) {
 $type = $type|0;
 $value_start = +$value_start;
 $value_end = +$value_end;
 var $0 = 0, $1 = 0.0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $type;
 $1 = $value_start;
 $2 = $value_end;
 $3 = $0; //@line 227 "../hsp3/hsp3int.cpp"
 HEAP32[3368>>2] = $3; //@line 227 "../hsp3/hsp3int.cpp"
 HEAP32[3376>>2] = 0; //@line 228 "../hsp3/hsp3int.cpp"
 $4 = $1; //@line 229 "../hsp3/hsp3int.cpp"
 HEAPF64[3400>>3] = $4; //@line 229 "../hsp3/hsp3int.cpp"
 HEAPF64[3384>>3] = $4; //@line 229 "../hsp3/hsp3int.cpp"
 $5 = $2; //@line 230 "../hsp3/hsp3int.cpp"
 $6 = $1; //@line 230 "../hsp3/hsp3int.cpp"
 $7 = $5 - $6; //@line 230 "../hsp3/hsp3int.cpp"
 HEAPF64[3408>>3] = $7; //@line 230 "../hsp3/hsp3int.cpp"
 HEAPF64[3392>>3] = $7; //@line 230 "../hsp3/hsp3int.cpp"
 STACKTOP = sp;return; //@line 231 "../hsp3/hsp3int.cpp"
}
function __GLOBAL__I_a() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___cxx_global_var_init(); //@line 37 "../hsp3/hsp3int.cpp"
 STACKTOP = sp;return; //@line 37 "../hsp3/hsp3int.cpp"
}
function __Z14HspVarCoreInitv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0;
 var $pval = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = (__Z7sbAlloci(1120)|0); //@line 40 "../hsp3/hspvar_core.cpp"
 HEAP32[3456>>2] = $0; //@line 40 "../hsp3/hspvar_core.cpp"
 HEAP32[3464>>2] = 8; //@line 41 "../hsp3/hspvar_core.cpp"
 $i = 0; //@line 42 "../hsp3/hspvar_core.cpp"
 while(1) {
  $1 = $i; //@line 42 "../hsp3/hspvar_core.cpp"
  $2 = ($1|0)<(8); //@line 42 "../hsp3/hspvar_core.cpp"
  if (!($2)) {
   break;
  }
  $3 = $i; //@line 43 "../hsp3/hspvar_core.cpp"
  $4 = HEAP32[3456>>2]|0; //@line 43 "../hsp3/hspvar_core.cpp"
  $5 = (($4) + (($3*140)|0)|0); //@line 43 "../hsp3/hspvar_core.cpp"
  HEAP16[$5>>1] = 0; //@line 43 "../hsp3/hspvar_core.cpp"
  $6 = $i; //@line 42 "../hsp3/hspvar_core.cpp"
  $7 = (($6) + 1)|0; //@line 42 "../hsp3/hspvar_core.cpp"
  $i = $7; //@line 42 "../hsp3/hspvar_core.cpp"
 }
 $8 = (__Z7sbAlloci(384)|0); //@line 49 "../hsp3/hspvar_core.cpp"
 HEAP32[3448>>2] = $8; //@line 49 "../hsp3/hspvar_core.cpp"
 $i = 0; //@line 50 "../hsp3/hspvar_core.cpp"
 while(1) {
  $9 = $i; //@line 50 "../hsp3/hspvar_core.cpp"
  $10 = ($9|0)<(8); //@line 50 "../hsp3/hspvar_core.cpp"
  if (!($10)) {
   break;
  }
  $11 = $i; //@line 51 "../hsp3/hspvar_core.cpp"
  $12 = HEAP32[3448>>2]|0; //@line 51 "../hsp3/hspvar_core.cpp"
  $13 = (($12) + (($11*48)|0)|0); //@line 51 "../hsp3/hspvar_core.cpp"
  $pval = $13; //@line 51 "../hsp3/hspvar_core.cpp"
  $14 = $pval; //@line 52 "../hsp3/hspvar_core.cpp"
  $15 = (($14) + 2|0); //@line 52 "../hsp3/hspvar_core.cpp"
  HEAP16[$15>>1] = -1; //@line 52 "../hsp3/hspvar_core.cpp"
  $16 = $pval; //@line 53 "../hsp3/hspvar_core.cpp"
  HEAP16[$16>>1] = 4; //@line 53 "../hsp3/hspvar_core.cpp"
  $17 = $i; //@line 50 "../hsp3/hspvar_core.cpp"
  $18 = (($17) + 1)|0; //@line 50 "../hsp3/hspvar_core.cpp"
  $i = $18; //@line 50 "../hsp3/hspvar_core.cpp"
 }
 STACKTOP = sp;return; //@line 55 "../hsp3/hspvar_core.cpp"
}
function __Z13HspVarCoreByev() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $i = 0; //@line 60 "../hsp3/hspvar_core.cpp"
 while(1) {
  $0 = $i; //@line 60 "../hsp3/hspvar_core.cpp"
  $1 = HEAP32[3464>>2]|0; //@line 60 "../hsp3/hspvar_core.cpp"
  $2 = ($0|0)<($1|0); //@line 60 "../hsp3/hspvar_core.cpp"
  if (!($2)) {
   break;
  }
  $3 = $i; //@line 61 "../hsp3/hspvar_core.cpp"
  $4 = HEAP32[3448>>2]|0; //@line 61 "../hsp3/hspvar_core.cpp"
  $5 = (($4) + (($3*48)|0)|0); //@line 61 "../hsp3/hspvar_core.cpp"
  $6 = (($5) + 2|0); //@line 61 "../hsp3/hspvar_core.cpp"
  $7 = HEAP16[$6>>1]|0; //@line 61 "../hsp3/hspvar_core.cpp"
  $8 = $7 << 16 >> 16; //@line 61 "../hsp3/hspvar_core.cpp"
  $9 = ($8|0)==(1); //@line 61 "../hsp3/hspvar_core.cpp"
  if ($9) {
   $10 = $i; //@line 62 "../hsp3/hspvar_core.cpp"
   $11 = HEAP32[3448>>2]|0; //@line 62 "../hsp3/hspvar_core.cpp"
   $12 = (($11) + (($10*48)|0)|0); //@line 62 "../hsp3/hspvar_core.cpp"
   $13 = HEAP16[$12>>1]|0; //@line 62 "../hsp3/hspvar_core.cpp"
   $14 = $13 << 16 >> 16; //@line 62 "../hsp3/hspvar_core.cpp"
   $15 = HEAP32[3456>>2]|0; //@line 62 "../hsp3/hspvar_core.cpp"
   $16 = (($15) + (($14*140)|0)|0); //@line 62 "../hsp3/hspvar_core.cpp"
   $17 = (($16) + 52|0); //@line 62 "../hsp3/hspvar_core.cpp"
   $18 = HEAP32[$17>>2]|0; //@line 62 "../hsp3/hspvar_core.cpp"
   $19 = $i; //@line 62 "../hsp3/hspvar_core.cpp"
   $20 = HEAP32[3448>>2]|0; //@line 62 "../hsp3/hspvar_core.cpp"
   $21 = (($20) + (($19*48)|0)|0); //@line 62 "../hsp3/hspvar_core.cpp"
   FUNCTION_TABLE_vi[$18 & 255]($21); //@line 62 "../hsp3/hspvar_core.cpp"
  }
  $22 = $i; //@line 60 "../hsp3/hspvar_core.cpp"
  $23 = (($22) + 1)|0; //@line 60 "../hsp3/hspvar_core.cpp"
  $i = $23; //@line 60 "../hsp3/hspvar_core.cpp"
 }
 $24 = HEAP32[3448>>2]|0; //@line 65 "../hsp3/hspvar_core.cpp"
 __Z6sbFreePv($24); //@line 65 "../hsp3/hspvar_core.cpp"
 $25 = HEAP32[3456>>2]|0; //@line 66 "../hsp3/hspvar_core.cpp"
 __Z6sbFreePv($25); //@line 66 "../hsp3/hspvar_core.cpp"
 STACKTOP = sp;return; //@line 67 "../hsp3/hspvar_core.cpp"
}
function __Z22HspVarCoreResetVartypei($expand) {
 $expand = $expand|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $expand;
 $1 = HEAP32[3464>>2]|0; //@line 75 "../hsp3/hspvar_core.cpp"
 $2 = $0; //@line 75 "../hsp3/hspvar_core.cpp"
 $3 = (($1) + ($2))|0; //@line 75 "../hsp3/hspvar_core.cpp"
 HEAP32[3472>>2] = $3; //@line 75 "../hsp3/hspvar_core.cpp"
 $4 = $0; //@line 76 "../hsp3/hspvar_core.cpp"
 $5 = ($4|0)>=(0); //@line 76 "../hsp3/hspvar_core.cpp"
 if ($5) {
  $6 = HEAP32[3456>>2]|0; //@line 77 "../hsp3/hspvar_core.cpp"
  $7 = HEAP32[3472>>2]|0; //@line 77 "../hsp3/hspvar_core.cpp"
  $8 = ($7*140)|0; //@line 77 "../hsp3/hspvar_core.cpp"
  $9 = (__Z8sbExpandPci($6,$8)|0); //@line 77 "../hsp3/hspvar_core.cpp"
  HEAP32[3456>>2] = $9; //@line 77 "../hsp3/hspvar_core.cpp"
  $10 = HEAP32[3448>>2]|0; //@line 78 "../hsp3/hspvar_core.cpp"
  $11 = HEAP32[3472>>2]|0; //@line 78 "../hsp3/hspvar_core.cpp"
  $12 = ($11*48)|0; //@line 78 "../hsp3/hspvar_core.cpp"
  $13 = (__Z8sbExpandPci($10,$12)|0); //@line 78 "../hsp3/hspvar_core.cpp"
  HEAP32[3448>>2] = $13; //@line 78 "../hsp3/hspvar_core.cpp"
 }
 __Z22HspVarCoreRegisterTypeiPFvP10HspVarProcE(4,97); //@line 83 "../hsp3/hspvar_core.cpp"
 __Z22HspVarCoreRegisterTypeiPFvP10HspVarProcE(2,98); //@line 84 "../hsp3/hspvar_core.cpp"
 __Z22HspVarCoreRegisterTypeiPFvP10HspVarProcE(3,99); //@line 85 "../hsp3/hspvar_core.cpp"
 __Z22HspVarCoreRegisterTypeiPFvP10HspVarProcE(5,100); //@line 86 "../hsp3/hspvar_core.cpp"
 __Z22HspVarCoreRegisterTypeiPFvP10HspVarProcE(1,101); //@line 87 "../hsp3/hspvar_core.cpp"
 STACKTOP = sp;return; //@line 88 "../hsp3/hspvar_core.cpp"
}
function __Z22HspVarCoreRegisterTypeiPFvP10HspVarProcE($flag,$func) {
 $flag = $flag|0;
 $func = $func|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $id = 0, $p = 0, $procs = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $flag;
 $1 = $func;
 $2 = $0; //@line 119 "../hsp3/hspvar_core.cpp"
 $id = $2; //@line 119 "../hsp3/hspvar_core.cpp"
 $3 = $id; //@line 120 "../hsp3/hspvar_core.cpp"
 $4 = ($3|0)<(0); //@line 120 "../hsp3/hspvar_core.cpp"
 do {
  if ($4) {
   $5 = (__Z17HspVarCoreAddTypev()|0); //@line 121 "../hsp3/hspvar_core.cpp"
   $id = $5; //@line 121 "../hsp3/hspvar_core.cpp"
   $6 = $id; //@line 122 "../hsp3/hspvar_core.cpp"
   $7 = ($6|0)<(0); //@line 122 "../hsp3/hspvar_core.cpp"
   if (!($7)) {
    break;
   }
   STACKTOP = sp;return; //@line 136 "../hsp3/hspvar_core.cpp"
  }
 } while(0);
 $8 = $id; //@line 124 "../hsp3/hspvar_core.cpp"
 $9 = HEAP32[3456>>2]|0; //@line 124 "../hsp3/hspvar_core.cpp"
 $10 = (($9) + (($8*140)|0)|0); //@line 124 "../hsp3/hspvar_core.cpp"
 $p = $10; //@line 124 "../hsp3/hspvar_core.cpp"
 $11 = $id; //@line 125 "../hsp3/hspvar_core.cpp"
 $12 = $11&65535; //@line 125 "../hsp3/hspvar_core.cpp"
 $13 = $p; //@line 125 "../hsp3/hspvar_core.cpp"
 $14 = (($13) + 2|0); //@line 125 "../hsp3/hspvar_core.cpp"
 HEAP16[$14>>1] = $12; //@line 125 "../hsp3/hspvar_core.cpp"
 $15 = $p; //@line 125 "../hsp3/hspvar_core.cpp"
 HEAP16[$15>>1] = $12; //@line 125 "../hsp3/hspvar_core.cpp"
 $16 = $p; //@line 127 "../hsp3/hspvar_core.cpp"
 $17 = (($16) + 20|0); //@line 127 "../hsp3/hspvar_core.cpp"
 $procs = $17; //@line 127 "../hsp3/hspvar_core.cpp"
 while(1) {
  $18 = $procs; //@line 129 "../hsp3/hspvar_core.cpp"
  HEAP32[$18>>2] = 102; //@line 129 "../hsp3/hspvar_core.cpp"
  $19 = $procs; //@line 130 "../hsp3/hspvar_core.cpp"
  $20 = $p; //@line 130 "../hsp3/hspvar_core.cpp"
  $21 = (($20) + 136|0); //@line 130 "../hsp3/hspvar_core.cpp"
  $22 = ($19|0)==($21|0); //@line 130 "../hsp3/hspvar_core.cpp"
  if ($22) {
   break;
  }
  $23 = $procs; //@line 131 "../hsp3/hspvar_core.cpp"
  $24 = (($23) + 4|0); //@line 131 "../hsp3/hspvar_core.cpp"
  $procs = $24; //@line 131 "../hsp3/hspvar_core.cpp"
 }
 $25 = $1; //@line 136 "../hsp3/hspvar_core.cpp"
 $26 = $p; //@line 136 "../hsp3/hspvar_core.cpp"
 FUNCTION_TABLE_vi[$25 & 255]($26); //@line 136 "../hsp3/hspvar_core.cpp"
 STACKTOP = sp;return; //@line 136 "../hsp3/hspvar_core.cpp"
}
function __Z17HspVarCoreAddTypev() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $id = 0, $pval = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = HEAP32[3464>>2]|0; //@line 95 "../hsp3/hspvar_core.cpp"
 $2 = HEAP32[3472>>2]|0; //@line 95 "../hsp3/hspvar_core.cpp"
 $3 = ($1|0)>=($2|0); //@line 95 "../hsp3/hspvar_core.cpp"
 if ($3) {
  $0 = -1; //@line 95 "../hsp3/hspvar_core.cpp"
  $16 = $0; //@line 104 "../hsp3/hspvar_core.cpp"
  STACKTOP = sp;return ($16|0); //@line 104 "../hsp3/hspvar_core.cpp"
 } else {
  $4 = HEAP32[3464>>2]|0; //@line 96 "../hsp3/hspvar_core.cpp"
  $5 = (($4) + 1)|0; //@line 96 "../hsp3/hspvar_core.cpp"
  HEAP32[3464>>2] = $5; //@line 96 "../hsp3/hspvar_core.cpp"
  $id = $4; //@line 96 "../hsp3/hspvar_core.cpp"
  $6 = $id; //@line 98 "../hsp3/hspvar_core.cpp"
  $7 = HEAP32[3456>>2]|0; //@line 98 "../hsp3/hspvar_core.cpp"
  $8 = (($7) + (($6*140)|0)|0); //@line 98 "../hsp3/hspvar_core.cpp"
  HEAP16[$8>>1] = 0; //@line 98 "../hsp3/hspvar_core.cpp"
  $9 = $id; //@line 100 "../hsp3/hspvar_core.cpp"
  $10 = HEAP32[3448>>2]|0; //@line 100 "../hsp3/hspvar_core.cpp"
  $11 = (($10) + (($9*48)|0)|0); //@line 100 "../hsp3/hspvar_core.cpp"
  $pval = $11; //@line 100 "../hsp3/hspvar_core.cpp"
  $12 = $pval; //@line 101 "../hsp3/hspvar_core.cpp"
  $13 = (($12) + 2|0); //@line 101 "../hsp3/hspvar_core.cpp"
  HEAP16[$13>>1] = -1; //@line 101 "../hsp3/hspvar_core.cpp"
  $14 = $pval; //@line 102 "../hsp3/hspvar_core.cpp"
  HEAP16[$14>>1] = 4; //@line 102 "../hsp3/hspvar_core.cpp"
  $15 = $id; //@line 103 "../hsp3/hspvar_core.cpp"
  $0 = $15; //@line 103 "../hsp3/hspvar_core.cpp"
  $16 = $0; //@line 104 "../hsp3/hspvar_core.cpp"
  STACKTOP = sp;return ($16|0); //@line 104 "../hsp3/hspvar_core.cpp"
 }
 return 0|0;
}
function __ZL10PutInvalidv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___cxa_allocate_exception(4)|0); //@line 109 "../hsp3/hspvar_core.cpp"
 HEAP32[$0>>2] = 21; //@line 109 "../hsp3/hspvar_core.cpp"
 ___cxa_throw(($0|0),(624|0),(0|0)); //@line 109 "../hsp3/hspvar_core.cpp"
 // unreachable; //@line 109 "../hsp3/hspvar_core.cpp"
}
function __Z16HspVarCoreDupPtrP4PValiPvi($pval,$flag,$ptr,$size) {
 $pval = $pval|0;
 $flag = $flag|0;
 $ptr = $ptr|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $buf = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $pval;
 $1 = $flag;
 $2 = $ptr;
 $3 = $size;
 $4 = $1; //@line 148 "../hsp3/hspvar_core.cpp"
 $5 = HEAP32[3456>>2]|0; //@line 148 "../hsp3/hspvar_core.cpp"
 $6 = (($5) + (($4*140)|0)|0); //@line 148 "../hsp3/hspvar_core.cpp"
 $p = $6; //@line 148 "../hsp3/hspvar_core.cpp"
 $7 = $2; //@line 149 "../hsp3/hspvar_core.cpp"
 $buf = $7; //@line 149 "../hsp3/hspvar_core.cpp"
 $8 = $0; //@line 151 "../hsp3/hspvar_core.cpp"
 $9 = HEAP16[$8>>1]|0; //@line 151 "../hsp3/hspvar_core.cpp"
 $10 = $9 << 16 >> 16; //@line 151 "../hsp3/hspvar_core.cpp"
 $11 = HEAP32[3456>>2]|0; //@line 151 "../hsp3/hspvar_core.cpp"
 $12 = (($11) + (($10*140)|0)|0); //@line 151 "../hsp3/hspvar_core.cpp"
 $13 = (($12) + 52|0); //@line 151 "../hsp3/hspvar_core.cpp"
 $14 = HEAP32[$13>>2]|0; //@line 151 "../hsp3/hspvar_core.cpp"
 $15 = $0; //@line 151 "../hsp3/hspvar_core.cpp"
 FUNCTION_TABLE_vi[$14 & 255]($15); //@line 151 "../hsp3/hspvar_core.cpp"
 $16 = $buf; //@line 152 "../hsp3/hspvar_core.cpp"
 $17 = $0; //@line 152 "../hsp3/hspvar_core.cpp"
 $18 = (($17) + 28|0); //@line 152 "../hsp3/hspvar_core.cpp"
 HEAP32[$18>>2] = $16; //@line 152 "../hsp3/hspvar_core.cpp"
 $19 = $1; //@line 153 "../hsp3/hspvar_core.cpp"
 $20 = $19&65535; //@line 153 "../hsp3/hspvar_core.cpp"
 $21 = $0; //@line 153 "../hsp3/hspvar_core.cpp"
 HEAP16[$21>>1] = $20; //@line 153 "../hsp3/hspvar_core.cpp"
 $22 = $3; //@line 154 "../hsp3/hspvar_core.cpp"
 $23 = $0; //@line 154 "../hsp3/hspvar_core.cpp"
 $24 = (($23) + 24|0); //@line 154 "../hsp3/hspvar_core.cpp"
 HEAP32[$24>>2] = $22; //@line 154 "../hsp3/hspvar_core.cpp"
 $25 = $0; //@line 155 "../hsp3/hspvar_core.cpp"
 $26 = (($25) + 2|0); //@line 155 "../hsp3/hspvar_core.cpp"
 HEAP16[$26>>1] = 2; //@line 155 "../hsp3/hspvar_core.cpp"
 $27 = $0; //@line 156 "../hsp3/hspvar_core.cpp"
 $28 = (($27) + 4|0); //@line 156 "../hsp3/hspvar_core.cpp"
 HEAP32[$28>>2] = 1; //@line 156 "../hsp3/hspvar_core.cpp"
 $29 = $p; //@line 158 "../hsp3/hspvar_core.cpp"
 $30 = (($29) + 8|0); //@line 158 "../hsp3/hspvar_core.cpp"
 $31 = HEAP16[$30>>1]|0; //@line 158 "../hsp3/hspvar_core.cpp"
 $32 = $31 << 16 >> 16; //@line 158 "../hsp3/hspvar_core.cpp"
 $33 = ($32|0)<(0); //@line 158 "../hsp3/hspvar_core.cpp"
 if ($33) {
  $34 = $0; //@line 159 "../hsp3/hspvar_core.cpp"
  $35 = (($34) + 4|0); //@line 159 "../hsp3/hspvar_core.cpp"
  $36 = (($35) + 4|0); //@line 159 "../hsp3/hspvar_core.cpp"
  HEAP32[$36>>2] = 1; //@line 159 "../hsp3/hspvar_core.cpp"
 } else {
  $37 = $3; //@line 161 "../hsp3/hspvar_core.cpp"
  $38 = $p; //@line 161 "../hsp3/hspvar_core.cpp"
  $39 = (($38) + 8|0); //@line 161 "../hsp3/hspvar_core.cpp"
  $40 = HEAP16[$39>>1]|0; //@line 161 "../hsp3/hspvar_core.cpp"
  $41 = $40 << 16 >> 16; //@line 161 "../hsp3/hspvar_core.cpp"
  $42 = (($37|0) / ($41|0))&-1; //@line 161 "../hsp3/hspvar_core.cpp"
  $43 = $0; //@line 161 "../hsp3/hspvar_core.cpp"
  $44 = (($43) + 4|0); //@line 161 "../hsp3/hspvar_core.cpp"
  $45 = (($44) + 4|0); //@line 161 "../hsp3/hspvar_core.cpp"
  HEAP32[$45>>2] = $42; //@line 161 "../hsp3/hspvar_core.cpp"
 }
 $46 = $0; //@line 163 "../hsp3/hspvar_core.cpp"
 $47 = (($46) + 4|0); //@line 163 "../hsp3/hspvar_core.cpp"
 $48 = (($47) + 8|0); //@line 163 "../hsp3/hspvar_core.cpp"
 HEAP32[$48>>2] = 0; //@line 163 "../hsp3/hspvar_core.cpp"
 $49 = $0; //@line 164 "../hsp3/hspvar_core.cpp"
 $50 = (($49) + 4|0); //@line 164 "../hsp3/hspvar_core.cpp"
 $51 = (($50) + 12|0); //@line 164 "../hsp3/hspvar_core.cpp"
 HEAP32[$51>>2] = 0; //@line 164 "../hsp3/hspvar_core.cpp"
 $52 = $0; //@line 165 "../hsp3/hspvar_core.cpp"
 $53 = (($52) + 4|0); //@line 165 "../hsp3/hspvar_core.cpp"
 $54 = (($53) + 16|0); //@line 165 "../hsp3/hspvar_core.cpp"
 HEAP32[$54>>2] = 0; //@line 165 "../hsp3/hspvar_core.cpp"
 $55 = $0; //@line 166 "../hsp3/hspvar_core.cpp"
 $56 = (($55) + 40|0); //@line 166 "../hsp3/hspvar_core.cpp"
 HEAP32[$56>>2] = 0; //@line 166 "../hsp3/hspvar_core.cpp"
 $57 = $0; //@line 167 "../hsp3/hspvar_core.cpp"
 $58 = (($57) + 38|0); //@line 167 "../hsp3/hspvar_core.cpp"
 HEAP16[$58>>1] = 0; //@line 167 "../hsp3/hspvar_core.cpp"
 $59 = $0; //@line 168 "../hsp3/hspvar_core.cpp"
 $60 = (($59) + 36|0); //@line 168 "../hsp3/hspvar_core.cpp"
 HEAP16[$60>>1] = 1; //@line 168 "../hsp3/hspvar_core.cpp"
 STACKTOP = sp;return; //@line 169 "../hsp3/hspvar_core.cpp"
}
function __Z13HspVarCoreDupP4PValS0_i($pval,$arg,$aptr) {
 $pval = $pval|0;
 $arg = $arg|0;
 $aptr = $aptr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $p = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $size = sp + 8|0;
 $0 = $pval;
 $1 = $arg;
 $2 = $aptr;
 $3 = $1; //@line 179 "../hsp3/hspvar_core.cpp"
 $4 = HEAP16[$3>>1]|0; //@line 179 "../hsp3/hspvar_core.cpp"
 $5 = $4 << 16 >> 16; //@line 179 "../hsp3/hspvar_core.cpp"
 $6 = HEAP32[3456>>2]|0; //@line 179 "../hsp3/hspvar_core.cpp"
 $7 = (($6) + (($5*140)|0)|0); //@line 179 "../hsp3/hspvar_core.cpp"
 $p = $7; //@line 179 "../hsp3/hspvar_core.cpp"
 $8 = $1; //@line 180 "../hsp3/hspvar_core.cpp"
 $9 = $2; //@line 180 "../hsp3/hspvar_core.cpp"
 $10 = (__Z17HspVarCorePtrAPTRP4PVali($8,$9)|0); //@line 180 "../hsp3/hspvar_core.cpp"
 $buf = $10; //@line 180 "../hsp3/hspvar_core.cpp"
 $11 = $1; //@line 181 "../hsp3/hspvar_core.cpp"
 $12 = HEAP16[$11>>1]|0; //@line 181 "../hsp3/hspvar_core.cpp"
 $13 = $12 << 16 >> 16; //@line 181 "../hsp3/hspvar_core.cpp"
 $14 = HEAP32[3456>>2]|0; //@line 181 "../hsp3/hspvar_core.cpp"
 $15 = (($14) + (($13*140)|0)|0); //@line 181 "../hsp3/hspvar_core.cpp"
 $16 = (($15) + 64|0); //@line 181 "../hsp3/hspvar_core.cpp"
 $17 = HEAP32[$16>>2]|0; //@line 181 "../hsp3/hspvar_core.cpp"
 $18 = $1; //@line 181 "../hsp3/hspvar_core.cpp"
 $19 = $buf; //@line 181 "../hsp3/hspvar_core.cpp"
 (FUNCTION_TABLE_iiii[$17 & 255]($18,$19,$size)|0); //@line 181 "../hsp3/hspvar_core.cpp"
 $20 = $0; //@line 182 "../hsp3/hspvar_core.cpp"
 $21 = $1; //@line 182 "../hsp3/hspvar_core.cpp"
 $22 = HEAP16[$21>>1]|0; //@line 182 "../hsp3/hspvar_core.cpp"
 $23 = $22 << 16 >> 16; //@line 182 "../hsp3/hspvar_core.cpp"
 $24 = $buf; //@line 182 "../hsp3/hspvar_core.cpp"
 $25 = HEAP32[$size>>2]|0; //@line 182 "../hsp3/hspvar_core.cpp"
 __Z16HspVarCoreDupPtrP4PValiPvi($20,$23,$24,$25); //@line 182 "../hsp3/hspvar_core.cpp"
 STACKTOP = sp;return; //@line 183 "../hsp3/hspvar_core.cpp"
}
function __Z13HspVarCoreDimP4PValiiiii($pval,$flag,$len1,$len2,$len3,$len4) {
 $pval = $pval|0;
 $flag = $flag|0;
 $len1 = $len1|0;
 $len2 = $len2|0;
 $len3 = $len3|0;
 $len4 = $len4|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $pval;
 $1 = $flag;
 $2 = $len1;
 $3 = $len2;
 $4 = $len3;
 $5 = $len4;
 $6 = $1; //@line 192 "../hsp3/hspvar_core.cpp"
 $7 = HEAP32[3456>>2]|0; //@line 192 "../hsp3/hspvar_core.cpp"
 $8 = (($7) + (($6*140)|0)|0); //@line 192 "../hsp3/hspvar_core.cpp"
 $p = $8; //@line 192 "../hsp3/hspvar_core.cpp"
 $9 = $2; //@line 193 "../hsp3/hspvar_core.cpp"
 $10 = ($9|0)<(0); //@line 193 "../hsp3/hspvar_core.cpp"
 if ($10) {
  $17 = (___cxa_allocate_exception(4)|0); //@line 193 "../hsp3/hspvar_core.cpp"
  HEAP32[$17>>2] = 3; //@line 193 "../hsp3/hspvar_core.cpp"
  ___cxa_throw(($17|0),(624|0),(0|0)); //@line 193 "../hsp3/hspvar_core.cpp"
  // unreachable; //@line 193 "../hsp3/hspvar_core.cpp"
 }
 $11 = $3; //@line 193 "../hsp3/hspvar_core.cpp"
 $12 = ($11|0)<(0); //@line 193 "../hsp3/hspvar_core.cpp"
 if ($12) {
  $17 = (___cxa_allocate_exception(4)|0); //@line 193 "../hsp3/hspvar_core.cpp"
  HEAP32[$17>>2] = 3; //@line 193 "../hsp3/hspvar_core.cpp"
  ___cxa_throw(($17|0),(624|0),(0|0)); //@line 193 "../hsp3/hspvar_core.cpp"
  // unreachable; //@line 193 "../hsp3/hspvar_core.cpp"
 }
 $13 = $4; //@line 193 "../hsp3/hspvar_core.cpp"
 $14 = ($13|0)<(0); //@line 193 "../hsp3/hspvar_core.cpp"
 if ($14) {
  $17 = (___cxa_allocate_exception(4)|0); //@line 193 "../hsp3/hspvar_core.cpp"
  HEAP32[$17>>2] = 3; //@line 193 "../hsp3/hspvar_core.cpp"
  ___cxa_throw(($17|0),(624|0),(0|0)); //@line 193 "../hsp3/hspvar_core.cpp"
  // unreachable; //@line 193 "../hsp3/hspvar_core.cpp"
 }
 $15 = $5; //@line 193 "../hsp3/hspvar_core.cpp"
 $16 = ($15|0)<(0); //@line 193 "../hsp3/hspvar_core.cpp"
 if ($16) {
  $17 = (___cxa_allocate_exception(4)|0); //@line 193 "../hsp3/hspvar_core.cpp"
  HEAP32[$17>>2] = 3; //@line 193 "../hsp3/hspvar_core.cpp"
  ___cxa_throw(($17|0),(624|0),(0|0)); //@line 193 "../hsp3/hspvar_core.cpp"
  // unreachable; //@line 193 "../hsp3/hspvar_core.cpp"
 } else {
  $18 = $0; //@line 195 "../hsp3/hspvar_core.cpp"
  $19 = HEAP16[$18>>1]|0; //@line 195 "../hsp3/hspvar_core.cpp"
  $20 = $19 << 16 >> 16; //@line 195 "../hsp3/hspvar_core.cpp"
  $21 = HEAP32[3456>>2]|0; //@line 195 "../hsp3/hspvar_core.cpp"
  $22 = (($21) + (($20*140)|0)|0); //@line 195 "../hsp3/hspvar_core.cpp"
  $23 = (($22) + 52|0); //@line 195 "../hsp3/hspvar_core.cpp"
  $24 = HEAP32[$23>>2]|0; //@line 195 "../hsp3/hspvar_core.cpp"
  $25 = $0; //@line 195 "../hsp3/hspvar_core.cpp"
  FUNCTION_TABLE_vi[$24 & 255]($25); //@line 195 "../hsp3/hspvar_core.cpp"
  $26 = $1; //@line 197 "../hsp3/hspvar_core.cpp"
  $27 = $26&65535; //@line 197 "../hsp3/hspvar_core.cpp"
  $28 = $0; //@line 197 "../hsp3/hspvar_core.cpp"
  HEAP16[$28>>1] = $27; //@line 197 "../hsp3/hspvar_core.cpp"
  $29 = $0; //@line 198 "../hsp3/hspvar_core.cpp"
  $30 = (($29) + 4|0); //@line 198 "../hsp3/hspvar_core.cpp"
  HEAP32[$30>>2] = 1; //@line 198 "../hsp3/hspvar_core.cpp"
  $31 = $0; //@line 199 "../hsp3/hspvar_core.cpp"
  $32 = (($31) + 40|0); //@line 199 "../hsp3/hspvar_core.cpp"
  HEAP32[$32>>2] = 0; //@line 199 "../hsp3/hspvar_core.cpp"
  $33 = $0; //@line 200 "../hsp3/hspvar_core.cpp"
  $34 = (($33) + 38|0); //@line 200 "../hsp3/hspvar_core.cpp"
  HEAP16[$34>>1] = 0; //@line 200 "../hsp3/hspvar_core.cpp"
  $35 = $p; //@line 201 "../hsp3/hspvar_core.cpp"
  $36 = (($35) + 6|0); //@line 201 "../hsp3/hspvar_core.cpp"
  $37 = HEAP16[$36>>1]|0; //@line 201 "../hsp3/hspvar_core.cpp"
  $38 = $0; //@line 201 "../hsp3/hspvar_core.cpp"
  $39 = (($38) + 36|0); //@line 201 "../hsp3/hspvar_core.cpp"
  HEAP16[$39>>1] = $37; //@line 201 "../hsp3/hspvar_core.cpp"
  $40 = $2; //@line 202 "../hsp3/hspvar_core.cpp"
  $41 = $0; //@line 202 "../hsp3/hspvar_core.cpp"
  $42 = (($41) + 4|0); //@line 202 "../hsp3/hspvar_core.cpp"
  $43 = (($42) + 4|0); //@line 202 "../hsp3/hspvar_core.cpp"
  HEAP32[$43>>2] = $40; //@line 202 "../hsp3/hspvar_core.cpp"
  $44 = $3; //@line 203 "../hsp3/hspvar_core.cpp"
  $45 = $0; //@line 203 "../hsp3/hspvar_core.cpp"
  $46 = (($45) + 4|0); //@line 203 "../hsp3/hspvar_core.cpp"
  $47 = (($46) + 8|0); //@line 203 "../hsp3/hspvar_core.cpp"
  HEAP32[$47>>2] = $44; //@line 203 "../hsp3/hspvar_core.cpp"
  $48 = $4; //@line 204 "../hsp3/hspvar_core.cpp"
  $49 = $0; //@line 204 "../hsp3/hspvar_core.cpp"
  $50 = (($49) + 4|0); //@line 204 "../hsp3/hspvar_core.cpp"
  $51 = (($50) + 12|0); //@line 204 "../hsp3/hspvar_core.cpp"
  HEAP32[$51>>2] = $48; //@line 204 "../hsp3/hspvar_core.cpp"
  $52 = $5; //@line 205 "../hsp3/hspvar_core.cpp"
  $53 = $0; //@line 205 "../hsp3/hspvar_core.cpp"
  $54 = (($53) + 4|0); //@line 205 "../hsp3/hspvar_core.cpp"
  $55 = (($54) + 16|0); //@line 205 "../hsp3/hspvar_core.cpp"
  HEAP32[$55>>2] = $52; //@line 205 "../hsp3/hspvar_core.cpp"
  $56 = $p; //@line 206 "../hsp3/hspvar_core.cpp"
  $57 = (($56) + 48|0); //@line 206 "../hsp3/hspvar_core.cpp"
  $58 = HEAP32[$57>>2]|0; //@line 206 "../hsp3/hspvar_core.cpp"
  $59 = $0; //@line 206 "../hsp3/hspvar_core.cpp"
  FUNCTION_TABLE_vii[$58 & 255]($59,0); //@line 206 "../hsp3/hspvar_core.cpp"
  STACKTOP = sp;return; //@line 207 "../hsp3/hspvar_core.cpp"
 }
}
function __Z17HspVarCoreDimFlexP4PValiiiiii($pval,$flag,$len0,$len1,$len2,$len3,$len4) {
 $pval = $pval|0;
 $flag = $flag|0;
 $len0 = $len0|0;
 $len1 = $len1|0;
 $len2 = $len2|0;
 $len3 = $len3|0;
 $len4 = $len4|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $pval;
 $1 = $flag;
 $2 = $len0;
 $3 = $len1;
 $4 = $len2;
 $5 = $len3;
 $6 = $len4;
 $7 = $1; //@line 216 "../hsp3/hspvar_core.cpp"
 $8 = HEAP32[3456>>2]|0; //@line 216 "../hsp3/hspvar_core.cpp"
 $9 = (($8) + (($7*140)|0)|0); //@line 216 "../hsp3/hspvar_core.cpp"
 $p = $9; //@line 216 "../hsp3/hspvar_core.cpp"
 $10 = $3; //@line 217 "../hsp3/hspvar_core.cpp"
 $11 = ($10|0)<(0); //@line 217 "../hsp3/hspvar_core.cpp"
 if ($11) {
  $18 = (___cxa_allocate_exception(4)|0); //@line 217 "../hsp3/hspvar_core.cpp"
  HEAP32[$18>>2] = 3; //@line 217 "../hsp3/hspvar_core.cpp"
  ___cxa_throw(($18|0),(624|0),(0|0)); //@line 217 "../hsp3/hspvar_core.cpp"
  // unreachable; //@line 217 "../hsp3/hspvar_core.cpp"
 }
 $12 = $4; //@line 217 "../hsp3/hspvar_core.cpp"
 $13 = ($12|0)<(0); //@line 217 "../hsp3/hspvar_core.cpp"
 if ($13) {
  $18 = (___cxa_allocate_exception(4)|0); //@line 217 "../hsp3/hspvar_core.cpp"
  HEAP32[$18>>2] = 3; //@line 217 "../hsp3/hspvar_core.cpp"
  ___cxa_throw(($18|0),(624|0),(0|0)); //@line 217 "../hsp3/hspvar_core.cpp"
  // unreachable; //@line 217 "../hsp3/hspvar_core.cpp"
 }
 $14 = $5; //@line 217 "../hsp3/hspvar_core.cpp"
 $15 = ($14|0)<(0); //@line 217 "../hsp3/hspvar_core.cpp"
 if ($15) {
  $18 = (___cxa_allocate_exception(4)|0); //@line 217 "../hsp3/hspvar_core.cpp"
  HEAP32[$18>>2] = 3; //@line 217 "../hsp3/hspvar_core.cpp"
  ___cxa_throw(($18|0),(624|0),(0|0)); //@line 217 "../hsp3/hspvar_core.cpp"
  // unreachable; //@line 217 "../hsp3/hspvar_core.cpp"
 }
 $16 = $6; //@line 217 "../hsp3/hspvar_core.cpp"
 $17 = ($16|0)<(0); //@line 217 "../hsp3/hspvar_core.cpp"
 if ($17) {
  $18 = (___cxa_allocate_exception(4)|0); //@line 217 "../hsp3/hspvar_core.cpp"
  HEAP32[$18>>2] = 3; //@line 217 "../hsp3/hspvar_core.cpp"
  ___cxa_throw(($18|0),(624|0),(0|0)); //@line 217 "../hsp3/hspvar_core.cpp"
  // unreachable; //@line 217 "../hsp3/hspvar_core.cpp"
 } else {
  $19 = $0; //@line 218 "../hsp3/hspvar_core.cpp"
  $20 = HEAP16[$19>>1]|0; //@line 218 "../hsp3/hspvar_core.cpp"
  $21 = $20 << 16 >> 16; //@line 218 "../hsp3/hspvar_core.cpp"
  $22 = HEAP32[3456>>2]|0; //@line 218 "../hsp3/hspvar_core.cpp"
  $23 = (($22) + (($21*140)|0)|0); //@line 218 "../hsp3/hspvar_core.cpp"
  $24 = (($23) + 52|0); //@line 218 "../hsp3/hspvar_core.cpp"
  $25 = HEAP32[$24>>2]|0; //@line 218 "../hsp3/hspvar_core.cpp"
  $26 = $0; //@line 218 "../hsp3/hspvar_core.cpp"
  FUNCTION_TABLE_vi[$25 & 255]($26); //@line 218 "../hsp3/hspvar_core.cpp"
  $27 = $1; //@line 219 "../hsp3/hspvar_core.cpp"
  $28 = $27&65535; //@line 219 "../hsp3/hspvar_core.cpp"
  $29 = $0; //@line 219 "../hsp3/hspvar_core.cpp"
  HEAP16[$29>>1] = $28; //@line 219 "../hsp3/hspvar_core.cpp"
  $30 = $2; //@line 220 "../hsp3/hspvar_core.cpp"
  $31 = $0; //@line 220 "../hsp3/hspvar_core.cpp"
  $32 = (($31) + 4|0); //@line 220 "../hsp3/hspvar_core.cpp"
  HEAP32[$32>>2] = $30; //@line 220 "../hsp3/hspvar_core.cpp"
  $33 = $0; //@line 221 "../hsp3/hspvar_core.cpp"
  $34 = (($33) + 40|0); //@line 221 "../hsp3/hspvar_core.cpp"
  HEAP32[$34>>2] = 0; //@line 221 "../hsp3/hspvar_core.cpp"
  $35 = $0; //@line 222 "../hsp3/hspvar_core.cpp"
  $36 = (($35) + 38|0); //@line 222 "../hsp3/hspvar_core.cpp"
  HEAP16[$36>>1] = 0; //@line 222 "../hsp3/hspvar_core.cpp"
  $37 = $p; //@line 223 "../hsp3/hspvar_core.cpp"
  $38 = (($37) + 6|0); //@line 223 "../hsp3/hspvar_core.cpp"
  $39 = HEAP16[$38>>1]|0; //@line 223 "../hsp3/hspvar_core.cpp"
  $40 = $0; //@line 223 "../hsp3/hspvar_core.cpp"
  $41 = (($40) + 36|0); //@line 223 "../hsp3/hspvar_core.cpp"
  HEAP16[$41>>1] = $39; //@line 223 "../hsp3/hspvar_core.cpp"
  $42 = $3; //@line 224 "../hsp3/hspvar_core.cpp"
  $43 = $0; //@line 224 "../hsp3/hspvar_core.cpp"
  $44 = (($43) + 4|0); //@line 224 "../hsp3/hspvar_core.cpp"
  $45 = (($44) + 4|0); //@line 224 "../hsp3/hspvar_core.cpp"
  HEAP32[$45>>2] = $42; //@line 224 "../hsp3/hspvar_core.cpp"
  $46 = $4; //@line 225 "../hsp3/hspvar_core.cpp"
  $47 = $0; //@line 225 "../hsp3/hspvar_core.cpp"
  $48 = (($47) + 4|0); //@line 225 "../hsp3/hspvar_core.cpp"
  $49 = (($48) + 8|0); //@line 225 "../hsp3/hspvar_core.cpp"
  HEAP32[$49>>2] = $46; //@line 225 "../hsp3/hspvar_core.cpp"
  $50 = $5; //@line 226 "../hsp3/hspvar_core.cpp"
  $51 = $0; //@line 226 "../hsp3/hspvar_core.cpp"
  $52 = (($51) + 4|0); //@line 226 "../hsp3/hspvar_core.cpp"
  $53 = (($52) + 12|0); //@line 226 "../hsp3/hspvar_core.cpp"
  HEAP32[$53>>2] = $50; //@line 226 "../hsp3/hspvar_core.cpp"
  $54 = $6; //@line 227 "../hsp3/hspvar_core.cpp"
  $55 = $0; //@line 227 "../hsp3/hspvar_core.cpp"
  $56 = (($55) + 4|0); //@line 227 "../hsp3/hspvar_core.cpp"
  $57 = (($56) + 16|0); //@line 227 "../hsp3/hspvar_core.cpp"
  HEAP32[$57>>2] = $54; //@line 227 "../hsp3/hspvar_core.cpp"
  $58 = $p; //@line 228 "../hsp3/hspvar_core.cpp"
  $59 = (($58) + 48|0); //@line 228 "../hsp3/hspvar_core.cpp"
  $60 = HEAP32[$59>>2]|0; //@line 228 "../hsp3/hspvar_core.cpp"
  $61 = $0; //@line 228 "../hsp3/hspvar_core.cpp"
  FUNCTION_TABLE_vii[$60 & 255]($61,0); //@line 228 "../hsp3/hspvar_core.cpp"
  $62 = $0; //@line 229 "../hsp3/hspvar_core.cpp"
  $63 = (($62) + 4|0); //@line 229 "../hsp3/hspvar_core.cpp"
  HEAP32[$63>>2] = 1; //@line 229 "../hsp3/hspvar_core.cpp"
  STACKTOP = sp;return; //@line 230 "../hsp3/hspvar_core.cpp"
 }
}
function __Z15HspVarCoreReDimP4PValii($pval,$lenid,$len) {
 $pval = $pval|0;
 $lenid = $lenid|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $pval;
 $1 = $lenid;
 $2 = $len;
 $3 = $0; //@line 238 "../hsp3/hspvar_core.cpp"
 $4 = HEAP16[$3>>1]|0; //@line 238 "../hsp3/hspvar_core.cpp"
 $5 = $4 << 16 >> 16; //@line 238 "../hsp3/hspvar_core.cpp"
 $6 = HEAP32[3456>>2]|0; //@line 238 "../hsp3/hspvar_core.cpp"
 $7 = (($6) + (($5*140)|0)|0); //@line 238 "../hsp3/hspvar_core.cpp"
 $p = $7; //@line 238 "../hsp3/hspvar_core.cpp"
 $8 = $2; //@line 239 "../hsp3/hspvar_core.cpp"
 $9 = $1; //@line 239 "../hsp3/hspvar_core.cpp"
 $10 = $0; //@line 239 "../hsp3/hspvar_core.cpp"
 $11 = (($10) + 4|0); //@line 239 "../hsp3/hspvar_core.cpp"
 $12 = (($11) + ($9<<2)|0); //@line 239 "../hsp3/hspvar_core.cpp"
 HEAP32[$12>>2] = $8; //@line 239 "../hsp3/hspvar_core.cpp"
 $13 = $p; //@line 240 "../hsp3/hspvar_core.cpp"
 $14 = (($13) + 48|0); //@line 240 "../hsp3/hspvar_core.cpp"
 $15 = HEAP32[$14>>2]|0; //@line 240 "../hsp3/hspvar_core.cpp"
 $16 = $0; //@line 240 "../hsp3/hspvar_core.cpp"
 $17 = $0; //@line 240 "../hsp3/hspvar_core.cpp"
 FUNCTION_TABLE_vii[$15 & 255]($16,$17); //@line 240 "../hsp3/hspvar_core.cpp"
 STACKTOP = sp;return; //@line 241 "../hsp3/hspvar_core.cpp"
}
function __Z15HspVarCoreClearP4PVali($pval,$flag) {
 $pval = $pval|0;
 $flag = $flag|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $pval;
 $1 = $flag;
 $2 = $0; //@line 248 "../hsp3/hspvar_core.cpp"
 $3 = $1; //@line 248 "../hsp3/hspvar_core.cpp"
 __Z13HspVarCoreDimP4PValiiiii($2,$3,1,0,0,0); //@line 248 "../hsp3/hspvar_core.cpp"
 STACKTOP = sp;return; //@line 249 "../hsp3/hspvar_core.cpp"
}
function __Z19HspVarCoreClearTempP4PVali($pval,$flag) {
 $pval = $pval|0;
 $flag = $flag|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $pval;
 $1 = $flag;
 $2 = $0; //@line 256 "../hsp3/hspvar_core.cpp"
 $3 = $1; //@line 256 "../hsp3/hspvar_core.cpp"
 __Z13HspVarCoreDimP4PValiiiii($2,$3,1,0,0,0); //@line 256 "../hsp3/hspvar_core.cpp"
 $4 = $0; //@line 257 "../hsp3/hspvar_core.cpp"
 $5 = (($4) + 36|0); //@line 257 "../hsp3/hspvar_core.cpp"
 $6 = HEAP16[$5>>1]|0; //@line 257 "../hsp3/hspvar_core.cpp"
 $7 = $6&65535; //@line 257 "../hsp3/hspvar_core.cpp"
 $8 = $7 | 256; //@line 257 "../hsp3/hspvar_core.cpp"
 $9 = $8&65535; //@line 257 "../hsp3/hspvar_core.cpp"
 HEAP16[$5>>1] = $9; //@line 257 "../hsp3/hspvar_core.cpp"
 STACKTOP = sp;return; //@line 258 "../hsp3/hspvar_core.cpp"
}
function __Z16HspVarCoreCnvPtrP4PVali($pval,$flag) {
 $pval = $pval|0;
 $flag = $flag|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $pval;
 $2 = $flag;
 $3 = $1; //@line 265 "../hsp3/hspvar_core.cpp"
 $4 = HEAP16[$3>>1]|0; //@line 265 "../hsp3/hspvar_core.cpp"
 $5 = $4 << 16 >> 16; //@line 265 "../hsp3/hspvar_core.cpp"
 $6 = $2; //@line 265 "../hsp3/hspvar_core.cpp"
 $7 = ($5|0)==($6|0); //@line 265 "../hsp3/hspvar_core.cpp"
 if ($7) {
  $8 = $2; //@line 266 "../hsp3/hspvar_core.cpp"
  $9 = HEAP32[3456>>2]|0; //@line 266 "../hsp3/hspvar_core.cpp"
  $10 = (($9) + (($8*140)|0)|0); //@line 266 "../hsp3/hspvar_core.cpp"
  $11 = (($10) + 28|0); //@line 266 "../hsp3/hspvar_core.cpp"
  $12 = HEAP32[$11>>2]|0; //@line 266 "../hsp3/hspvar_core.cpp"
  $13 = $1; //@line 266 "../hsp3/hspvar_core.cpp"
  $14 = (FUNCTION_TABLE_ii[$12 & 255]($13)|0); //@line 266 "../hsp3/hspvar_core.cpp"
  $0 = $14; //@line 266 "../hsp3/hspvar_core.cpp"
  $48 = $0; //@line 275 "../hsp3/hspvar_core.cpp"
  STACKTOP = sp;return ($48|0); //@line 275 "../hsp3/hspvar_core.cpp"
 }
 $15 = $1; //@line 270 "../hsp3/hspvar_core.cpp"
 $16 = HEAP16[$15>>1]|0; //@line 270 "../hsp3/hspvar_core.cpp"
 $17 = $16 << 16 >> 16; //@line 270 "../hsp3/hspvar_core.cpp"
 $18 = HEAP32[3456>>2]|0; //@line 270 "../hsp3/hspvar_core.cpp"
 $19 = (($18) + (($17*140)|0)|0); //@line 270 "../hsp3/hspvar_core.cpp"
 $20 = (($19) + 28|0); //@line 270 "../hsp3/hspvar_core.cpp"
 $21 = HEAP32[$20>>2]|0; //@line 270 "../hsp3/hspvar_core.cpp"
 $22 = $1; //@line 270 "../hsp3/hspvar_core.cpp"
 $23 = (FUNCTION_TABLE_ii[$21 & 255]($22)|0); //@line 270 "../hsp3/hspvar_core.cpp"
 $buf = $23; //@line 270 "../hsp3/hspvar_core.cpp"
 $24 = $1; //@line 271 "../hsp3/hspvar_core.cpp"
 $25 = HEAP16[$24>>1]|0; //@line 271 "../hsp3/hspvar_core.cpp"
 $26 = $25 << 16 >> 16; //@line 271 "../hsp3/hspvar_core.cpp"
 $27 = ($26|0)>=(8); //@line 271 "../hsp3/hspvar_core.cpp"
 if ($27) {
  $28 = $1; //@line 272 "../hsp3/hspvar_core.cpp"
  $29 = HEAP16[$28>>1]|0; //@line 272 "../hsp3/hspvar_core.cpp"
  $30 = $29 << 16 >> 16; //@line 272 "../hsp3/hspvar_core.cpp"
  $31 = HEAP32[3456>>2]|0; //@line 272 "../hsp3/hspvar_core.cpp"
  $32 = (($31) + (($30*140)|0)|0); //@line 272 "../hsp3/hspvar_core.cpp"
  $33 = (($32) + 24|0); //@line 272 "../hsp3/hspvar_core.cpp"
  $34 = HEAP32[$33>>2]|0; //@line 272 "../hsp3/hspvar_core.cpp"
  $35 = $buf; //@line 272 "../hsp3/hspvar_core.cpp"
  $36 = $2; //@line 272 "../hsp3/hspvar_core.cpp"
  $37 = (FUNCTION_TABLE_iii[$34 & 255]($35,$36)|0); //@line 272 "../hsp3/hspvar_core.cpp"
  $0 = $37; //@line 272 "../hsp3/hspvar_core.cpp"
  $48 = $0; //@line 275 "../hsp3/hspvar_core.cpp"
  STACKTOP = sp;return ($48|0); //@line 275 "../hsp3/hspvar_core.cpp"
 } else {
  $38 = $2; //@line 274 "../hsp3/hspvar_core.cpp"
  $39 = HEAP32[3456>>2]|0; //@line 274 "../hsp3/hspvar_core.cpp"
  $40 = (($39) + (($38*140)|0)|0); //@line 274 "../hsp3/hspvar_core.cpp"
  $41 = (($40) + 20|0); //@line 274 "../hsp3/hspvar_core.cpp"
  $42 = HEAP32[$41>>2]|0; //@line 274 "../hsp3/hspvar_core.cpp"
  $43 = $buf; //@line 274 "../hsp3/hspvar_core.cpp"
  $44 = $1; //@line 274 "../hsp3/hspvar_core.cpp"
  $45 = HEAP16[$44>>1]|0; //@line 274 "../hsp3/hspvar_core.cpp"
  $46 = $45 << 16 >> 16; //@line 274 "../hsp3/hspvar_core.cpp"
  $47 = (FUNCTION_TABLE_iii[$42 & 255]($43,$46)|0); //@line 274 "../hsp3/hspvar_core.cpp"
  $0 = $47; //@line 274 "../hsp3/hspvar_core.cpp"
  $48 = $0; //@line 275 "../hsp3/hspvar_core.cpp"
  STACKTOP = sp;return ($48|0); //@line 275 "../hsp3/hspvar_core.cpp"
 }
 return 0|0;
}
function __Z18HspVarCoreSeekProcPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $i = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $name;
 $i = 0; //@line 294 "../hsp3/hspvar_core.cpp"
 while(1) {
  $2 = $i; //@line 294 "../hsp3/hspvar_core.cpp"
  $3 = HEAP32[3464>>2]|0; //@line 294 "../hsp3/hspvar_core.cpp"
  $4 = ($2|0)<($3|0); //@line 294 "../hsp3/hspvar_core.cpp"
  if (!($4)) {
   label = 9;
   break;
  }
  $5 = $i; //@line 295 "../hsp3/hspvar_core.cpp"
  $6 = HEAP32[3456>>2]|0; //@line 295 "../hsp3/hspvar_core.cpp"
  $7 = (($6) + (($5*140)|0)|0); //@line 295 "../hsp3/hspvar_core.cpp"
  $p = $7; //@line 295 "../hsp3/hspvar_core.cpp"
  $8 = $p; //@line 296 "../hsp3/hspvar_core.cpp"
  $9 = HEAP16[$8>>1]|0; //@line 296 "../hsp3/hspvar_core.cpp"
  $10 = ($9<<16>>16)!=(0); //@line 296 "../hsp3/hspvar_core.cpp"
  if ($10) {
   $11 = $p; //@line 297 "../hsp3/hspvar_core.cpp"
   $12 = (($11) + 12|0); //@line 297 "../hsp3/hspvar_core.cpp"
   $13 = HEAP32[$12>>2]|0; //@line 297 "../hsp3/hspvar_core.cpp"
   $14 = $1; //@line 297 "../hsp3/hspvar_core.cpp"
   $15 = (_strcmp($13,$14)|0); //@line 297 "../hsp3/hspvar_core.cpp"
   $16 = ($15|0)==(0); //@line 297 "../hsp3/hspvar_core.cpp"
   if ($16) {
    label = 5;
    break;
   }
  }
  $18 = $i; //@line 294 "../hsp3/hspvar_core.cpp"
  $19 = (($18) + 1)|0; //@line 294 "../hsp3/hspvar_core.cpp"
  $i = $19; //@line 294 "../hsp3/hspvar_core.cpp"
 }
 if ((label|0) == 5) {
  $17 = $p; //@line 298 "../hsp3/hspvar_core.cpp"
  $0 = $17; //@line 298 "../hsp3/hspvar_core.cpp"
  $20 = $0; //@line 303 "../hsp3/hspvar_core.cpp"
  STACKTOP = sp;return ($20|0); //@line 303 "../hsp3/hspvar_core.cpp"
 }
 else if ((label|0) == 9) {
  $0 = 0; //@line 302 "../hsp3/hspvar_core.cpp"
  $20 = $0; //@line 303 "../hsp3/hspvar_core.cpp"
  STACKTOP = sp;return ($20|0); //@line 303 "../hsp3/hspvar_core.cpp"
 }
 return 0|0;
}
function __Z15HspVarCoreArrayP4PVali($pval,$offset) {
 $pval = $pval|0;
 $offset = $offset|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $pval;
 $1 = $offset;
 $2 = $0; //@line 311 "../hsp3/hspvar_core.cpp"
 $3 = (($2) + 38|0); //@line 311 "../hsp3/hspvar_core.cpp"
 $4 = HEAP16[$3>>1]|0; //@line 311 "../hsp3/hspvar_core.cpp"
 $5 = $4 << 16 >> 16; //@line 311 "../hsp3/hspvar_core.cpp"
 $6 = ($5|0)>=(5); //@line 311 "../hsp3/hspvar_core.cpp"
 if ($6) {
  $7 = (___cxa_allocate_exception(4)|0); //@line 311 "../hsp3/hspvar_core.cpp"
  HEAP32[$7>>2] = 7; //@line 311 "../hsp3/hspvar_core.cpp"
  ___cxa_throw(($7|0),(624|0),(0|0)); //@line 311 "../hsp3/hspvar_core.cpp"
  // unreachable; //@line 311 "../hsp3/hspvar_core.cpp"
 }
 $8 = $0; //@line 312 "../hsp3/hspvar_core.cpp"
 $9 = (($8) + 38|0); //@line 312 "../hsp3/hspvar_core.cpp"
 $10 = HEAP16[$9>>1]|0; //@line 312 "../hsp3/hspvar_core.cpp"
 $11 = $10 << 16 >> 16; //@line 312 "../hsp3/hspvar_core.cpp"
 $12 = ($11|0)==(0); //@line 312 "../hsp3/hspvar_core.cpp"
 if ($12) {
  $13 = $0; //@line 313 "../hsp3/hspvar_core.cpp"
  $14 = (($13) + 44|0); //@line 313 "../hsp3/hspvar_core.cpp"
  HEAP32[$14>>2] = 1; //@line 313 "../hsp3/hspvar_core.cpp"
 } else {
  $15 = $0; //@line 315 "../hsp3/hspvar_core.cpp"
  $16 = (($15) + 38|0); //@line 315 "../hsp3/hspvar_core.cpp"
  $17 = HEAP16[$16>>1]|0; //@line 315 "../hsp3/hspvar_core.cpp"
  $18 = $17 << 16 >> 16; //@line 315 "../hsp3/hspvar_core.cpp"
  $19 = $0; //@line 315 "../hsp3/hspvar_core.cpp"
  $20 = (($19) + 4|0); //@line 315 "../hsp3/hspvar_core.cpp"
  $21 = (($20) + ($18<<2)|0); //@line 315 "../hsp3/hspvar_core.cpp"
  $22 = HEAP32[$21>>2]|0; //@line 315 "../hsp3/hspvar_core.cpp"
  $23 = $0; //@line 315 "../hsp3/hspvar_core.cpp"
  $24 = (($23) + 44|0); //@line 315 "../hsp3/hspvar_core.cpp"
  $25 = HEAP32[$24>>2]|0; //@line 315 "../hsp3/hspvar_core.cpp"
  $26 = Math_imul($25, $22)|0; //@line 315 "../hsp3/hspvar_core.cpp"
  HEAP32[$24>>2] = $26; //@line 315 "../hsp3/hspvar_core.cpp"
 }
 $27 = $0; //@line 317 "../hsp3/hspvar_core.cpp"
 $28 = (($27) + 38|0); //@line 317 "../hsp3/hspvar_core.cpp"
 $29 = HEAP16[$28>>1]|0; //@line 317 "../hsp3/hspvar_core.cpp"
 $30 = (($29) + 1)<<16>>16; //@line 317 "../hsp3/hspvar_core.cpp"
 HEAP16[$28>>1] = $30; //@line 317 "../hsp3/hspvar_core.cpp"
 $31 = $1; //@line 318 "../hsp3/hspvar_core.cpp"
 $32 = ($31|0)<(0); //@line 318 "../hsp3/hspvar_core.cpp"
 if ($32) {
  $33 = (___cxa_allocate_exception(4)|0); //@line 318 "../hsp3/hspvar_core.cpp"
  HEAP32[$33>>2] = 7; //@line 318 "../hsp3/hspvar_core.cpp"
  ___cxa_throw(($33|0),(624|0),(0|0)); //@line 318 "../hsp3/hspvar_core.cpp"
  // unreachable; //@line 318 "../hsp3/hspvar_core.cpp"
 }
 $34 = $1; //@line 319 "../hsp3/hspvar_core.cpp"
 $35 = $0; //@line 319 "../hsp3/hspvar_core.cpp"
 $36 = (($35) + 38|0); //@line 319 "../hsp3/hspvar_core.cpp"
 $37 = HEAP16[$36>>1]|0; //@line 319 "../hsp3/hspvar_core.cpp"
 $38 = $37 << 16 >> 16; //@line 319 "../hsp3/hspvar_core.cpp"
 $39 = $0; //@line 319 "../hsp3/hspvar_core.cpp"
 $40 = (($39) + 4|0); //@line 319 "../hsp3/hspvar_core.cpp"
 $41 = (($40) + ($38<<2)|0); //@line 319 "../hsp3/hspvar_core.cpp"
 $42 = HEAP32[$41>>2]|0; //@line 319 "../hsp3/hspvar_core.cpp"
 $43 = ($34|0)>=($42|0); //@line 319 "../hsp3/hspvar_core.cpp"
 if ($43) {
  $44 = (___cxa_allocate_exception(4)|0); //@line 320 "../hsp3/hspvar_core.cpp"
  HEAP32[$44>>2] = 7; //@line 320 "../hsp3/hspvar_core.cpp"
  ___cxa_throw(($44|0),(624|0),(0|0)); //@line 320 "../hsp3/hspvar_core.cpp"
  // unreachable; //@line 320 "../hsp3/hspvar_core.cpp"
 } else {
  $45 = $1; //@line 322 "../hsp3/hspvar_core.cpp"
  $46 = $0; //@line 322 "../hsp3/hspvar_core.cpp"
  $47 = (($46) + 44|0); //@line 322 "../hsp3/hspvar_core.cpp"
  $48 = HEAP32[$47>>2]|0; //@line 322 "../hsp3/hspvar_core.cpp"
  $49 = Math_imul($45, $48)|0; //@line 322 "../hsp3/hspvar_core.cpp"
  $50 = $0; //@line 322 "../hsp3/hspvar_core.cpp"
  $51 = (($50) + 40|0); //@line 322 "../hsp3/hspvar_core.cpp"
  $52 = HEAP32[$51>>2]|0; //@line 322 "../hsp3/hspvar_core.cpp"
  $53 = (($52) + ($49))|0; //@line 322 "../hsp3/hspvar_core.cpp"
  HEAP32[$51>>2] = $53; //@line 322 "../hsp3/hspvar_core.cpp"
  STACKTOP = sp;return; //@line 323 "../hsp3/hspvar_core.cpp"
 }
}
function __Z17HspVarDouble_InitP10HspVarProc($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $p;
 $1 = $0; //@line 244 "../hsp3/hspvar_double.cpp"
 $2 = (($1) + 2|0); //@line 244 "../hsp3/hspvar_double.cpp"
 HEAP32[3480>>2] = $2; //@line 244 "../hsp3/hspvar_double.cpp"
 $3 = $0; //@line 246 "../hsp3/hspvar_double.cpp"
 $4 = (($3) + 72|0); //@line 246 "../hsp3/hspvar_double.cpp"
 HEAP32[$4>>2] = 103; //@line 246 "../hsp3/hspvar_double.cpp"
 $5 = $0; //@line 247 "../hsp3/hspvar_double.cpp"
 $6 = (($5) + 20|0); //@line 247 "../hsp3/hspvar_double.cpp"
 HEAP32[$6>>2] = 104; //@line 247 "../hsp3/hspvar_double.cpp"
 $7 = $0; //@line 248 "../hsp3/hspvar_double.cpp"
 $8 = (($7) + 28|0); //@line 248 "../hsp3/hspvar_double.cpp"
 HEAP32[$8>>2] = 105; //@line 248 "../hsp3/hspvar_double.cpp"
 $9 = $0; //@line 250 "../hsp3/hspvar_double.cpp"
 $10 = (($9) + 56|0); //@line 250 "../hsp3/hspvar_double.cpp"
 HEAP32[$10>>2] = 106; //@line 250 "../hsp3/hspvar_double.cpp"
 $11 = $0; //@line 251 "../hsp3/hspvar_double.cpp"
 $12 = (($11) + 64|0); //@line 251 "../hsp3/hspvar_double.cpp"
 HEAP32[$12>>2] = 107; //@line 251 "../hsp3/hspvar_double.cpp"
 $13 = $0; //@line 252 "../hsp3/hspvar_double.cpp"
 $14 = (($13) + 68|0); //@line 252 "../hsp3/hspvar_double.cpp"
 HEAP32[$14>>2] = 108; //@line 252 "../hsp3/hspvar_double.cpp"
 $15 = $0; //@line 255 "../hsp3/hspvar_double.cpp"
 $16 = (($15) + 48|0); //@line 255 "../hsp3/hspvar_double.cpp"
 HEAP32[$16>>2] = 109; //@line 255 "../hsp3/hspvar_double.cpp"
 $17 = $0; //@line 256 "../hsp3/hspvar_double.cpp"
 $18 = (($17) + 52|0); //@line 256 "../hsp3/hspvar_double.cpp"
 HEAP32[$18>>2] = 110; //@line 256 "../hsp3/hspvar_double.cpp"
 $19 = $0; //@line 258 "../hsp3/hspvar_double.cpp"
 $20 = (($19) + 76|0); //@line 258 "../hsp3/hspvar_double.cpp"
 HEAP32[$20>>2] = 111; //@line 258 "../hsp3/hspvar_double.cpp"
 $21 = $0; //@line 259 "../hsp3/hspvar_double.cpp"
 $22 = (($21) + 80|0); //@line 259 "../hsp3/hspvar_double.cpp"
 HEAP32[$22>>2] = 112; //@line 259 "../hsp3/hspvar_double.cpp"
 $23 = $0; //@line 260 "../hsp3/hspvar_double.cpp"
 $24 = (($23) + 84|0); //@line 260 "../hsp3/hspvar_double.cpp"
 HEAP32[$24>>2] = 113; //@line 260 "../hsp3/hspvar_double.cpp"
 $25 = $0; //@line 261 "../hsp3/hspvar_double.cpp"
 $26 = (($25) + 88|0); //@line 261 "../hsp3/hspvar_double.cpp"
 HEAP32[$26>>2] = 114; //@line 261 "../hsp3/hspvar_double.cpp"
 $27 = $0; //@line 262 "../hsp3/hspvar_double.cpp"
 $28 = (($27) + 92|0); //@line 262 "../hsp3/hspvar_double.cpp"
 HEAP32[$28>>2] = 115; //@line 262 "../hsp3/hspvar_double.cpp"
 $29 = $0; //@line 268 "../hsp3/hspvar_double.cpp"
 $30 = (($29) + 108|0); //@line 268 "../hsp3/hspvar_double.cpp"
 HEAP32[$30>>2] = 116; //@line 268 "../hsp3/hspvar_double.cpp"
 $31 = $0; //@line 269 "../hsp3/hspvar_double.cpp"
 $32 = (($31) + 112|0); //@line 269 "../hsp3/hspvar_double.cpp"
 HEAP32[$32>>2] = 117; //@line 269 "../hsp3/hspvar_double.cpp"
 $33 = $0; //@line 270 "../hsp3/hspvar_double.cpp"
 $34 = (($33) + 116|0); //@line 270 "../hsp3/hspvar_double.cpp"
 HEAP32[$34>>2] = 118; //@line 270 "../hsp3/hspvar_double.cpp"
 $35 = $0; //@line 271 "../hsp3/hspvar_double.cpp"
 $36 = (($35) + 120|0); //@line 271 "../hsp3/hspvar_double.cpp"
 HEAP32[$36>>2] = 119; //@line 271 "../hsp3/hspvar_double.cpp"
 $37 = $0; //@line 272 "../hsp3/hspvar_double.cpp"
 $38 = (($37) + 124|0); //@line 272 "../hsp3/hspvar_double.cpp"
 HEAP32[$38>>2] = 120; //@line 272 "../hsp3/hspvar_double.cpp"
 $39 = $0; //@line 273 "../hsp3/hspvar_double.cpp"
 $40 = (($39) + 128|0); //@line 273 "../hsp3/hspvar_double.cpp"
 HEAP32[$40>>2] = 121; //@line 273 "../hsp3/hspvar_double.cpp"
 $41 = $0; //@line 278 "../hsp3/hspvar_double.cpp"
 $42 = (($41) + 12|0); //@line 278 "../hsp3/hspvar_double.cpp"
 HEAP32[$42>>2] = 3488; //@line 278 "../hsp3/hspvar_double.cpp"
 $43 = $0; //@line 279 "../hsp3/hspvar_double.cpp"
 $44 = (($43) + 4|0); //@line 279 "../hsp3/hspvar_double.cpp"
 HEAP16[$44>>1] = 1; //@line 279 "../hsp3/hspvar_double.cpp"
 $45 = $0; //@line 280 "../hsp3/hspvar_double.cpp"
 $46 = (($45) + 6|0); //@line 280 "../hsp3/hspvar_double.cpp"
 HEAP16[$46>>1] = 9; //@line 280 "../hsp3/hspvar_double.cpp"
 $47 = $0; //@line 282 "../hsp3/hspvar_double.cpp"
 $48 = (($47) + 8|0); //@line 282 "../hsp3/hspvar_double.cpp"
 HEAP16[$48>>1] = 8; //@line 282 "../hsp3/hspvar_double.cpp"
 STACKTOP = sp;return; //@line 283 "../hsp3/hspvar_double.cpp"
}
function __ZL16HspVarDouble_SetP4PValPPvPKv($pval,$pdat,$in) {
 $pval = $pval|0;
 $pdat = $pdat|0;
 $in = $in|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $pval;
 $1 = $pdat;
 $2 = $in;
 $3 = $1; //@line 134 "../hsp3/hspvar_double.cpp"
 $4 = $2; //@line 134 "../hsp3/hspvar_double.cpp"
 ;HEAP8[$3+0>>0]=HEAP8[$4+0>>0]|0;HEAP8[$3+1>>0]=HEAP8[$4+1>>0]|0;HEAP8[$3+2>>0]=HEAP8[$4+2>>0]|0;HEAP8[$3+3>>0]=HEAP8[$4+3>>0]|0;HEAP8[$3+4>>0]=HEAP8[$4+4>>0]|0;HEAP8[$3+5>>0]=HEAP8[$4+5>>0]|0;HEAP8[$3+6>>0]=HEAP8[$4+6>>0]|0;HEAP8[$3+7>>0]=HEAP8[$4+7>>0]|0; //@line 134 "../hsp3/hspvar_double.cpp"
 STACKTOP = sp;return; //@line 135 "../hsp3/hspvar_double.cpp"
}
function __ZL16HspVarDouble_CnvPKvi($buffer,$flag) {
 $buffer = $buffer|0;
 $flag = $flag|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $buffer;
 $2 = $flag;
 $3 = $2; //@line 37 "../hsp3/hspvar_double.cpp"
 if ((($3|0) == 3)) {
  $10 = $1; //@line 49 "../hsp3/hspvar_double.cpp"
  $0 = $10; //@line 49 "../hsp3/hspvar_double.cpp"
 } else if ((($3|0) == 4)) {
  $6 = $1; //@line 42 "../hsp3/hspvar_double.cpp"
  $7 = HEAP32[$6>>2]|0; //@line 42 "../hsp3/hspvar_double.cpp"
  $8 = (+($7|0)); //@line 42 "../hsp3/hspvar_double.cpp"
  HEAPF64[3496>>3] = $8; //@line 42 "../hsp3/hspvar_double.cpp"
  $0 = 3496; //@line 43 "../hsp3/hspvar_double.cpp"
 } else if ((($3|0) == 2)) {
  $4 = $1; //@line 39 "../hsp3/hspvar_double.cpp"
  $5 = (+_atof($4)); //@line 39 "../hsp3/hspvar_double.cpp"
  HEAPF64[3496>>3] = $5; //@line 39 "../hsp3/hspvar_double.cpp"
  $0 = 3496; //@line 40 "../hsp3/hspvar_double.cpp"
 } else {
  $9 = (___cxa_allocate_exception(4)|0); //@line 47 "../hsp3/hspvar_double.cpp"
  HEAP32[$9>>2] = 6; //@line 47 "../hsp3/hspvar_double.cpp"
  ___cxa_throw(($9|0),(624|0),(0|0)); //@line 47 "../hsp3/hspvar_double.cpp"
  // unreachable; //@line 47 "../hsp3/hspvar_double.cpp"
 }
 $11 = $0; //@line 50 "../hsp3/hspvar_double.cpp"
 STACKTOP = sp;return ($11|0); //@line 50 "../hsp3/hspvar_double.cpp"
}
function __ZL19HspVarDouble_GetPtrP4PVal($pval) {
 $pval = $pval|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $pval;
 $1 = $0; //@line 28 "../hsp3/hspvar_double.cpp"
 $2 = (($1) + 28|0); //@line 28 "../hsp3/hspvar_double.cpp"
 $3 = HEAP32[$2>>2]|0; //@line 28 "../hsp3/hspvar_double.cpp"
 $4 = $0; //@line 28 "../hsp3/hspvar_double.cpp"
 $5 = (($4) + 40|0); //@line 28 "../hsp3/hspvar_double.cpp"
 $6 = HEAP32[$5>>2]|0; //@line 28 "../hsp3/hspvar_double.cpp"
 $7 = (($3) + ($6<<3)|0); //@line 28 "../hsp3/hspvar_double.cpp"
 STACKTOP = sp;return ($7|0); //@line 28 "../hsp3/hspvar_double.cpp"
}
function __ZL20HspVarDouble_GetSizePKPv($pval) {
 $pval = $pval|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $pval;
 STACKTOP = sp;return 8; //@line 127 "../hsp3/hspvar_double.cpp"
}
function __ZL12GetBlockSizeP4PValPPvPi($pval,$pdat,$size) {
 $pval = $pval|0;
 $pdat = $pdat|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $pval;
 $1 = $pdat;
 $2 = $size;
 $3 = $0; //@line 231 "../hsp3/hspvar_double.cpp"
 $4 = (($3) + 24|0); //@line 231 "../hsp3/hspvar_double.cpp"
 $5 = HEAP32[$4>>2]|0; //@line 231 "../hsp3/hspvar_double.cpp"
 $6 = $1; //@line 231 "../hsp3/hspvar_double.cpp"
 $7 = $0; //@line 231 "../hsp3/hspvar_double.cpp"
 $8 = (($7) + 28|0); //@line 231 "../hsp3/hspvar_double.cpp"
 $9 = HEAP32[$8>>2]|0; //@line 231 "../hsp3/hspvar_double.cpp"
 $10 = $6; //@line 231 "../hsp3/hspvar_double.cpp"
 $11 = $9; //@line 231 "../hsp3/hspvar_double.cpp"
 $12 = (($10) - ($11))|0; //@line 231 "../hsp3/hspvar_double.cpp"
 $13 = (($5) - ($12))|0; //@line 231 "../hsp3/hspvar_double.cpp"
 $14 = $2; //@line 231 "../hsp3/hspvar_double.cpp"
 HEAP32[$14>>2] = $13; //@line 231 "../hsp3/hspvar_double.cpp"
 $15 = $1; //@line 232 "../hsp3/hspvar_double.cpp"
 STACKTOP = sp;return ($15|0); //@line 232 "../hsp3/hspvar_double.cpp"
}
function __ZL10AllocBlockP4PValPPvi($pval,$pdat,$size) {
 $pval = $pval|0;
 $pdat = $pdat|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $pval;
 $1 = $pdat;
 $2 = $size;
 STACKTOP = sp;return; //@line 237 "../hsp3/hspvar_double.cpp"
}
function __ZL18HspVarDouble_AllocP4PValPKS_($pval,$pval2) {
 $pval = $pval|0;
 $pval2 = $pval2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fv = 0, $i = 0, $pt = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $pval;
 $1 = $pval2;
 $2 = $0; //@line 100 "../hsp3/hspvar_double.cpp"
 $3 = (($2) + 4|0); //@line 100 "../hsp3/hspvar_double.cpp"
 $4 = (($3) + 4|0); //@line 100 "../hsp3/hspvar_double.cpp"
 $5 = HEAP32[$4>>2]|0; //@line 100 "../hsp3/hspvar_double.cpp"
 $6 = ($5|0)<(1); //@line 100 "../hsp3/hspvar_double.cpp"
 if ($6) {
  $7 = $0; //@line 100 "../hsp3/hspvar_double.cpp"
  $8 = (($7) + 4|0); //@line 100 "../hsp3/hspvar_double.cpp"
  $9 = (($8) + 4|0); //@line 100 "../hsp3/hspvar_double.cpp"
  HEAP32[$9>>2] = 1; //@line 100 "../hsp3/hspvar_double.cpp"
 }
 $10 = $0; //@line 101 "../hsp3/hspvar_double.cpp"
 $11 = (__ZL10GetVarSizeP4PVal($10)|0); //@line 101 "../hsp3/hspvar_double.cpp"
 $size = $11; //@line 101 "../hsp3/hspvar_double.cpp"
 $12 = $0; //@line 102 "../hsp3/hspvar_double.cpp"
 $13 = (($12) + 2|0); //@line 102 "../hsp3/hspvar_double.cpp"
 HEAP16[$13>>1] = 1; //@line 102 "../hsp3/hspvar_double.cpp"
 $14 = $size; //@line 103 "../hsp3/hspvar_double.cpp"
 $15 = (__Z7sbAlloci($14)|0); //@line 103 "../hsp3/hspvar_double.cpp"
 $pt = $15; //@line 103 "../hsp3/hspvar_double.cpp"
 $16 = $pt; //@line 104 "../hsp3/hspvar_double.cpp"
 $fv = $16; //@line 104 "../hsp3/hspvar_double.cpp"
 $i = 0; //@line 105 "../hsp3/hspvar_double.cpp"
 while(1) {
  $17 = $i; //@line 105 "../hsp3/hspvar_double.cpp"
  $18 = $size; //@line 105 "../hsp3/hspvar_double.cpp"
  $19 = (($18>>>0) / 8)&-1; //@line 105 "../hsp3/hspvar_double.cpp"
  $20 = ($17|0)<($19|0); //@line 105 "../hsp3/hspvar_double.cpp"
  if (!($20)) {
   break;
  }
  $21 = $i; //@line 105 "../hsp3/hspvar_double.cpp"
  $22 = $fv; //@line 105 "../hsp3/hspvar_double.cpp"
  $23 = (($22) + ($21<<3)|0); //@line 105 "../hsp3/hspvar_double.cpp"
  HEAPF64[$23>>3] = 0.0; //@line 105 "../hsp3/hspvar_double.cpp"
  $24 = $i; //@line 105 "../hsp3/hspvar_double.cpp"
  $25 = (($24) + 1)|0; //@line 105 "../hsp3/hspvar_double.cpp"
  $i = $25; //@line 105 "../hsp3/hspvar_double.cpp"
 }
 $26 = $1; //@line 106 "../hsp3/hspvar_double.cpp"
 $27 = ($26|0)!=(0|0); //@line 106 "../hsp3/hspvar_double.cpp"
 if (!($27)) {
  $38 = $pt; //@line 110 "../hsp3/hspvar_double.cpp"
  $39 = $0; //@line 110 "../hsp3/hspvar_double.cpp"
  $40 = (($39) + 28|0); //@line 110 "../hsp3/hspvar_double.cpp"
  HEAP32[$40>>2] = $38; //@line 110 "../hsp3/hspvar_double.cpp"
  $41 = $size; //@line 111 "../hsp3/hspvar_double.cpp"
  $42 = $0; //@line 111 "../hsp3/hspvar_double.cpp"
  $43 = (($42) + 24|0); //@line 111 "../hsp3/hspvar_double.cpp"
  HEAP32[$43>>2] = $41; //@line 111 "../hsp3/hspvar_double.cpp"
  STACKTOP = sp;return; //@line 112 "../hsp3/hspvar_double.cpp"
 }
 $28 = $pt; //@line 107 "../hsp3/hspvar_double.cpp"
 $29 = $0; //@line 107 "../hsp3/hspvar_double.cpp"
 $30 = (($29) + 28|0); //@line 107 "../hsp3/hspvar_double.cpp"
 $31 = HEAP32[$30>>2]|0; //@line 107 "../hsp3/hspvar_double.cpp"
 $32 = $0; //@line 107 "../hsp3/hspvar_double.cpp"
 $33 = (($32) + 24|0); //@line 107 "../hsp3/hspvar_double.cpp"
 $34 = HEAP32[$33>>2]|0; //@line 107 "../hsp3/hspvar_double.cpp"
 _memcpy(($28|0),($31|0),($34|0))|0; //@line 107 "../hsp3/hspvar_double.cpp"
 $35 = $0; //@line 108 "../hsp3/hspvar_double.cpp"
 $36 = (($35) + 28|0); //@line 108 "../hsp3/hspvar_double.cpp"
 $37 = HEAP32[$36>>2]|0; //@line 108 "../hsp3/hspvar_double.cpp"
 __Z6sbFreePv($37); //@line 108 "../hsp3/hspvar_double.cpp"
 $38 = $pt; //@line 110 "../hsp3/hspvar_double.cpp"
 $39 = $0; //@line 110 "../hsp3/hspvar_double.cpp"
 $40 = (($39) + 28|0); //@line 110 "../hsp3/hspvar_double.cpp"
 HEAP32[$40>>2] = $38; //@line 110 "../hsp3/hspvar_double.cpp"
 $41 = $size; //@line 111 "../hsp3/hspvar_double.cpp"
 $42 = $0; //@line 111 "../hsp3/hspvar_double.cpp"
 $43 = (($42) + 24|0); //@line 111 "../hsp3/hspvar_double.cpp"
 HEAP32[$43>>2] = $41; //@line 111 "../hsp3/hspvar_double.cpp"
 STACKTOP = sp;return; //@line 112 "../hsp3/hspvar_double.cpp"
}
function __ZL17HspVarDouble_FreeP4PVal($pval) {
 $pval = $pval|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $pval;
 $1 = $0; //@line 83 "../hsp3/hspvar_double.cpp"
 $2 = (($1) + 2|0); //@line 83 "../hsp3/hspvar_double.cpp"
 $3 = HEAP16[$2>>1]|0; //@line 83 "../hsp3/hspvar_double.cpp"
 $4 = $3 << 16 >> 16; //@line 83 "../hsp3/hspvar_double.cpp"
 $5 = ($4|0)==(1); //@line 83 "../hsp3/hspvar_double.cpp"
 if ($5) {
  $6 = $0; //@line 83 "../hsp3/hspvar_double.cpp"
  $7 = (($6) + 28|0); //@line 83 "../hsp3/hspvar_double.cpp"
  $8 = HEAP32[$7>>2]|0; //@line 83 "../hsp3/hspvar_double.cpp"
  __Z6sbFreePv($8); //@line 83 "../hsp3/hspvar_double.cpp"
 }
 $9 = $0; //@line 84 "../hsp3/hspvar_double.cpp"
 $10 = (($9) + 28|0); //@line 84 "../hsp3/hspvar_double.cpp"
 HEAP32[$10>>2] = 0; //@line 84 "../hsp3/hspvar_double.cpp"
 $11 = $0; //@line 85 "../hsp3/hspvar_double.cpp"
 $12 = (($11) + 2|0); //@line 85 "../hsp3/hspvar_double.cpp"
 HEAP16[$12>>1] = -1; //@line 85 "../hsp3/hspvar_double.cpp"
 STACKTOP = sp;return; //@line 86 "../hsp3/hspvar_double.cpp"
}
function __ZL17HspVarDouble_AddIPPvPKv($pval,$val) {
 $pval = $pval|0;
 $val = $val|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $pval;
 $1 = $val;
 $2 = $1; //@line 140 "../hsp3/hspvar_double.cpp"
 $3 = +HEAPF64[$2>>3]; //@line 140 "../hsp3/hspvar_double.cpp"
 $4 = $0; //@line 140 "../hsp3/hspvar_double.cpp"
 $5 = +HEAPF64[$4>>3]; //@line 140 "../hsp3/hspvar_double.cpp"
 $6 = $5 + $3; //@line 140 "../hsp3/hspvar_double.cpp"
 HEAPF64[$4>>3] = $6; //@line 140 "../hsp3/hspvar_double.cpp"
 $7 = HEAP32[3480>>2]|0; //@line 141 "../hsp3/hspvar_double.cpp"
 HEAP16[$7>>1] = 3; //@line 141 "../hsp3/hspvar_double.cpp"
 STACKTOP = sp;return; //@line 142 "../hsp3/hspvar_double.cpp"
}
function __ZL17HspVarDouble_SubIPPvPKv($pval,$val) {
 $pval = $pval|0;
 $val = $val|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $pval;
 $1 = $val;
 $2 = $1; //@line 147 "../hsp3/hspvar_double.cpp"
 $3 = +HEAPF64[$2>>3]; //@line 147 "../hsp3/hspvar_double.cpp"
 $4 = $0; //@line 147 "../hsp3/hspvar_double.cpp"
 $5 = +HEAPF64[$4>>3]; //@line 147 "../hsp3/hspvar_double.cpp"
 $6 = $5 - $3; //@line 147 "../hsp3/hspvar_double.cpp"
 HEAPF64[$4>>3] = $6; //@line 147 "../hsp3/hspvar_double.cpp"
 $7 = HEAP32[3480>>2]|0; //@line 148 "../hsp3/hspvar_double.cpp"
 HEAP16[$7>>1] = 3; //@line 148 "../hsp3/hspvar_double.cpp"
 STACKTOP = sp;return; //@line 149 "../hsp3/hspvar_double.cpp"
}
function __ZL17HspVarDouble_MulIPPvPKv($pval,$val) {
 $pval = $pval|0;
 $val = $val|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $pval;
 $1 = $val;
 $2 = $1; //@line 154 "../hsp3/hspvar_double.cpp"
 $3 = +HEAPF64[$2>>3]; //@line 154 "../hsp3/hspvar_double.cpp"
 $4 = $0; //@line 154 "../hsp3/hspvar_double.cpp"
 $5 = +HEAPF64[$4>>3]; //@line 154 "../hsp3/hspvar_double.cpp"
 $6 = $5 * $3; //@line 154 "../hsp3/hspvar_double.cpp"
 HEAPF64[$4>>3] = $6; //@line 154 "../hsp3/hspvar_double.cpp"
 $7 = HEAP32[3480>>2]|0; //@line 155 "../hsp3/hspvar_double.cpp"
 HEAP16[$7>>1] = 3; //@line 155 "../hsp3/hspvar_double.cpp"
 STACKTOP = sp;return; //@line 156 "../hsp3/hspvar_double.cpp"
}
function __ZL17HspVarDouble_DivIPPvPKv($pval,$val) {
 $pval = $pval|0;
 $val = $val|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, $p = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $pval;
 $1 = $val;
 $2 = $1; //@line 161 "../hsp3/hspvar_double.cpp"
 $3 = +HEAPF64[$2>>3]; //@line 161 "../hsp3/hspvar_double.cpp"
 $p = $3; //@line 161 "../hsp3/hspvar_double.cpp"
 $4 = $p; //@line 162 "../hsp3/hspvar_double.cpp"
 $5 = $4 == 0.0; //@line 162 "../hsp3/hspvar_double.cpp"
 if ($5) {
  $6 = (___cxa_allocate_exception(4)|0); //@line 162 "../hsp3/hspvar_double.cpp"
  HEAP32[$6>>2] = 19; //@line 162 "../hsp3/hspvar_double.cpp"
  ___cxa_throw(($6|0),(624|0),(0|0)); //@line 162 "../hsp3/hspvar_double.cpp"
  // unreachable; //@line 162 "../hsp3/hspvar_double.cpp"
 } else {
  $7 = $p; //@line 163 "../hsp3/hspvar_double.cpp"
  $8 = $0; //@line 163 "../hsp3/hspvar_double.cpp"
  $9 = +HEAPF64[$8>>3]; //@line 163 "../hsp3/hspvar_double.cpp"
  $10 = $9 / $7; //@line 163 "../hsp3/hspvar_double.cpp"
  HEAPF64[$8>>3] = $10; //@line 163 "../hsp3/hspvar_double.cpp"
  $11 = HEAP32[3480>>2]|0; //@line 164 "../hsp3/hspvar_double.cpp"
  HEAP16[$11>>1] = 3; //@line 164 "../hsp3/hspvar_double.cpp"
  STACKTOP = sp;return; //@line 165 "../hsp3/hspvar_double.cpp"
 }
}
function __ZL17HspVarDouble_ModIPPvPKv($pval,$val) {
 $pval = $pval|0;
 $val = $val|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, $dval = 0.0, $p = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $pval;
 $1 = $val;
 $2 = $1; //@line 170 "../hsp3/hspvar_double.cpp"
 $3 = +HEAPF64[$2>>3]; //@line 170 "../hsp3/hspvar_double.cpp"
 $p = $3; //@line 170 "../hsp3/hspvar_double.cpp"
 $4 = $p; //@line 172 "../hsp3/hspvar_double.cpp"
 $5 = $4 == 0.0; //@line 172 "../hsp3/hspvar_double.cpp"
 if ($5) {
  $6 = (___cxa_allocate_exception(4)|0); //@line 172 "../hsp3/hspvar_double.cpp"
  HEAP32[$6>>2] = 19; //@line 172 "../hsp3/hspvar_double.cpp"
  ___cxa_throw(($6|0),(624|0),(0|0)); //@line 172 "../hsp3/hspvar_double.cpp"
  // unreachable; //@line 172 "../hsp3/hspvar_double.cpp"
 } else {
  $7 = $0; //@line 173 "../hsp3/hspvar_double.cpp"
  $8 = +HEAPF64[$7>>3]; //@line 173 "../hsp3/hspvar_double.cpp"
  $dval = $8; //@line 173 "../hsp3/hspvar_double.cpp"
  $9 = $dval; //@line 174 "../hsp3/hspvar_double.cpp"
  $10 = $p; //@line 174 "../hsp3/hspvar_double.cpp"
  $11 = (+_fmod((+$9),(+$10))); //@line 174 "../hsp3/hspvar_double.cpp"
  $12 = $0; //@line 174 "../hsp3/hspvar_double.cpp"
  HEAPF64[$12>>3] = $11; //@line 174 "../hsp3/hspvar_double.cpp"
  $13 = HEAP32[3480>>2]|0; //@line 175 "../hsp3/hspvar_double.cpp"
  HEAP16[$13>>1] = 3; //@line 175 "../hsp3/hspvar_double.cpp"
  STACKTOP = sp;return; //@line 176 "../hsp3/hspvar_double.cpp"
 }
}
function __ZL16HspVarDouble_EqIPPvPKv($pval,$val) {
 $pval = $pval|0;
 $val = $val|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $pval;
 $1 = $val;
 $2 = $0; //@line 182 "../hsp3/hspvar_double.cpp"
 $3 = +HEAPF64[$2>>3]; //@line 182 "../hsp3/hspvar_double.cpp"
 $4 = $1; //@line 182 "../hsp3/hspvar_double.cpp"
 $5 = +HEAPF64[$4>>3]; //@line 182 "../hsp3/hspvar_double.cpp"
 $6 = $3 == $5; //@line 182 "../hsp3/hspvar_double.cpp"
 $7 = $6&1; //@line 182 "../hsp3/hspvar_double.cpp"
 $8 = $0; //@line 182 "../hsp3/hspvar_double.cpp"
 HEAP32[$8>>2] = $7; //@line 182 "../hsp3/hspvar_double.cpp"
 $9 = HEAP32[3480>>2]|0; //@line 183 "../hsp3/hspvar_double.cpp"
 HEAP16[$9>>1] = 4; //@line 183 "../hsp3/hspvar_double.cpp"
 STACKTOP = sp;return; //@line 184 "../hsp3/hspvar_double.cpp"
}
function __ZL16HspVarDouble_NeIPPvPKv($pval,$val) {
 $pval = $pval|0;
 $val = $val|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $pval;
 $1 = $val;
 $2 = $0; //@line 189 "../hsp3/hspvar_double.cpp"
 $3 = +HEAPF64[$2>>3]; //@line 189 "../hsp3/hspvar_double.cpp"
 $4 = $1; //@line 189 "../hsp3/hspvar_double.cpp"
 $5 = +HEAPF64[$4>>3]; //@line 189 "../hsp3/hspvar_double.cpp"
 $6 = $3 != $5; //@line 189 "../hsp3/hspvar_double.cpp"
 $7 = $6&1; //@line 189 "../hsp3/hspvar_double.cpp"
 $8 = $0; //@line 189 "../hsp3/hspvar_double.cpp"
 HEAP32[$8>>2] = $7; //@line 189 "../hsp3/hspvar_double.cpp"
 $9 = HEAP32[3480>>2]|0; //@line 190 "../hsp3/hspvar_double.cpp"
 HEAP16[$9>>1] = 4; //@line 190 "../hsp3/hspvar_double.cpp"
 STACKTOP = sp;return; //@line 191 "../hsp3/hspvar_double.cpp"
}
function __ZL16HspVarDouble_GtIPPvPKv($pval,$val) {
 $pval = $pval|0;
 $val = $val|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $pval;
 $1 = $val;
 $2 = $0; //@line 196 "../hsp3/hspvar_double.cpp"
 $3 = +HEAPF64[$2>>3]; //@line 196 "../hsp3/hspvar_double.cpp"
 $4 = $1; //@line 196 "../hsp3/hspvar_double.cpp"
 $5 = +HEAPF64[$4>>3]; //@line 196 "../hsp3/hspvar_double.cpp"
 $6 = $3 > $5; //@line 196 "../hsp3/hspvar_double.cpp"
 $7 = $6&1; //@line 196 "../hsp3/hspvar_double.cpp"
 $8 = $0; //@line 196 "../hsp3/hspvar_double.cpp"
 HEAP32[$8>>2] = $7; //@line 196 "../hsp3/hspvar_double.cpp"
 $9 = HEAP32[3480>>2]|0; //@line 197 "../hsp3/hspvar_double.cpp"
 HEAP16[$9>>1] = 4; //@line 197 "../hsp3/hspvar_double.cpp"
 STACKTOP = sp;return; //@line 198 "../hsp3/hspvar_double.cpp"
}
function __ZL16HspVarDouble_LtIPPvPKv($pval,$val) {
 $pval = $pval|0;
 $val = $val|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $pval;
 $1 = $val;
 $2 = $0; //@line 203 "../hsp3/hspvar_double.cpp"
 $3 = +HEAPF64[$2>>3]; //@line 203 "../hsp3/hspvar_double.cpp"
 $4 = $1; //@line 203 "../hsp3/hspvar_double.cpp"
 $5 = +HEAPF64[$4>>3]; //@line 203 "../hsp3/hspvar_double.cpp"
 $6 = $3 < $5; //@line 203 "../hsp3/hspvar_double.cpp"
 $7 = $6&1; //@line 203 "../hsp3/hspvar_double.cpp"
 $8 = $0; //@line 203 "../hsp3/hspvar_double.cpp"
 HEAP32[$8>>2] = $7; //@line 203 "../hsp3/hspvar_double.cpp"
 $9 = HEAP32[3480>>2]|0; //@line 204 "../hsp3/hspvar_double.cpp"
 HEAP16[$9>>1] = 4; //@line 204 "../hsp3/hspvar_double.cpp"
 STACKTOP = sp;return; //@line 205 "../hsp3/hspvar_double.cpp"
}
function __ZL18HspVarDouble_GtEqIPPvPKv($pval,$val) {
 $pval = $pval|0;
 $val = $val|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $pval;
 $1 = $val;
 $2 = $0; //@line 210 "../hsp3/hspvar_double.cpp"
 $3 = +HEAPF64[$2>>3]; //@line 210 "../hsp3/hspvar_double.cpp"
 $4 = $1; //@line 210 "../hsp3/hspvar_double.cpp"
 $5 = +HEAPF64[$4>>3]; //@line 210 "../hsp3/hspvar_double.cpp"
 $6 = $3 >= $5; //@line 210 "../hsp3/hspvar_double.cpp"
 $7 = $6&1; //@line 210 "../hsp3/hspvar_double.cpp"
 $8 = $0; //@line 210 "../hsp3/hspvar_double.cpp"
 HEAP32[$8>>2] = $7; //@line 210 "../hsp3/hspvar_double.cpp"
 $9 = HEAP32[3480>>2]|0; //@line 211 "../hsp3/hspvar_double.cpp"
 HEAP16[$9>>1] = 4; //@line 211 "../hsp3/hspvar_double.cpp"
 STACKTOP = sp;return; //@line 212 "../hsp3/hspvar_double.cpp"
}
function __ZL18HspVarDouble_LtEqIPPvPKv($pval,$val) {
 $pval = $pval|0;
 $val = $val|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $pval;
 $1 = $val;
 $2 = $0; //@line 217 "../hsp3/hspvar_double.cpp"
 $3 = +HEAPF64[$2>>3]; //@line 217 "../hsp3/hspvar_double.cpp"
 $4 = $1; //@line 217 "../hsp3/hspvar_double.cpp"
 $5 = +HEAPF64[$4>>3]; //@line 217 "../hsp3/hspvar_double.cpp"
 $6 = $3 <= $5; //@line 217 "../hsp3/hspvar_double.cpp"
 $7 = $6&1; //@line 217 "../hsp3/hspvar_double.cpp"
 $8 = $0; //@line 217 "../hsp3/hspvar_double.cpp"
 HEAP32[$8>>2] = $7; //@line 217 "../hsp3/hspvar_double.cpp"
 $9 = HEAP32[3480>>2]|0; //@line 218 "../hsp3/hspvar_double.cpp"
 HEAP16[$9>>1] = 4; //@line 218 "../hsp3/hspvar_double.cpp"
 STACKTOP = sp;return; //@line 219 "../hsp3/hspvar_double.cpp"
}
function __ZL10GetVarSizeP4PVal($pval) {
 $pval = $pval|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $pval;
 $1 = $0; //@line 70 "../hsp3/hspvar_double.cpp"
 $2 = (($1) + 4|0); //@line 70 "../hsp3/hspvar_double.cpp"
 $3 = (($2) + 4|0); //@line 70 "../hsp3/hspvar_double.cpp"
 $4 = HEAP32[$3>>2]|0; //@line 70 "../hsp3/hspvar_double.cpp"
 $size = $4; //@line 70 "../hsp3/hspvar_double.cpp"
 $5 = $0; //@line 71 "../hsp3/hspvar_double.cpp"
 $6 = (($5) + 4|0); //@line 71 "../hsp3/hspvar_double.cpp"
 $7 = (($6) + 8|0); //@line 71 "../hsp3/hspvar_double.cpp"
 $8 = HEAP32[$7>>2]|0; //@line 71 "../hsp3/hspvar_double.cpp"
 $9 = ($8|0)!=(0); //@line 71 "../hsp3/hspvar_double.cpp"
 if ($9) {
  $10 = $0; //@line 71 "../hsp3/hspvar_double.cpp"
  $11 = (($10) + 4|0); //@line 71 "../hsp3/hspvar_double.cpp"
  $12 = (($11) + 8|0); //@line 71 "../hsp3/hspvar_double.cpp"
  $13 = HEAP32[$12>>2]|0; //@line 71 "../hsp3/hspvar_double.cpp"
  $14 = $size; //@line 71 "../hsp3/hspvar_double.cpp"
  $15 = Math_imul($14, $13)|0; //@line 71 "../hsp3/hspvar_double.cpp"
  $size = $15; //@line 71 "../hsp3/hspvar_double.cpp"
 }
 $16 = $0; //@line 72 "../hsp3/hspvar_double.cpp"
 $17 = (($16) + 4|0); //@line 72 "../hsp3/hspvar_double.cpp"
 $18 = (($17) + 12|0); //@line 72 "../hsp3/hspvar_double.cpp"
 $19 = HEAP32[$18>>2]|0; //@line 72 "../hsp3/hspvar_double.cpp"
 $20 = ($19|0)!=(0); //@line 72 "../hsp3/hspvar_double.cpp"
 if ($20) {
  $21 = $0; //@line 72 "../hsp3/hspvar_double.cpp"
  $22 = (($21) + 4|0); //@line 72 "../hsp3/hspvar_double.cpp"
  $23 = (($22) + 12|0); //@line 72 "../hsp3/hspvar_double.cpp"
  $24 = HEAP32[$23>>2]|0; //@line 72 "../hsp3/hspvar_double.cpp"
  $25 = $size; //@line 72 "../hsp3/hspvar_double.cpp"
  $26 = Math_imul($25, $24)|0; //@line 72 "../hsp3/hspvar_double.cpp"
  $size = $26; //@line 72 "../hsp3/hspvar_double.cpp"
 }
 $27 = $0; //@line 73 "../hsp3/hspvar_double.cpp"
 $28 = (($27) + 4|0); //@line 73 "../hsp3/hspvar_double.cpp"
 $29 = (($28) + 16|0); //@line 73 "../hsp3/hspvar_double.cpp"
 $30 = HEAP32[$29>>2]|0; //@line 73 "../hsp3/hspvar_double.cpp"
 $31 = ($30|0)!=(0); //@line 73 "../hsp3/hspvar_double.cpp"
 if (!($31)) {
  $38 = $size; //@line 74 "../hsp3/hspvar_double.cpp"
  $39 = $38<<3; //@line 74 "../hsp3/hspvar_double.cpp"
  $size = $39; //@line 74 "../hsp3/hspvar_double.cpp"
  $40 = $size; //@line 75 "../hsp3/hspvar_double.cpp"
  STACKTOP = sp;return ($40|0); //@line 75 "../hsp3/hspvar_double.cpp"
 }
 $32 = $0; //@line 73 "../hsp3/hspvar_double.cpp"
 $33 = (($32) + 4|0); //@line 73 "../hsp3/hspvar_double.cpp"
 $34 = (($33) + 16|0); //@line 73 "../hsp3/hspvar_double.cpp"
 $35 = HEAP32[$34>>2]|0; //@line 73 "../hsp3/hspvar_double.cpp"
 $36 = $size; //@line 73 "../hsp3/hspvar_double.cpp"
 $37 = Math_imul($36, $35)|0; //@line 73 "../hsp3/hspvar_double.cpp"
 $size = $37; //@line 73 "../hsp3/hspvar_double.cpp"
 $38 = $size; //@line 74 "../hsp3/hspvar_double.cpp"
 $39 = $38<<3; //@line 74 "../hsp3/hspvar_double.cpp"
 $size = $39; //@line 74 "../hsp3/hspvar_double.cpp"
 $40 = $size; //@line 75 "../hsp3/hspvar_double.cpp"
 STACKTOP = sp;return ($40|0); //@line 75 "../hsp3/hspvar_double.cpp"
}
function __Z14HspVarInt_InitP10HspVarProc($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $p;
 $1 = $0; //@line 258 "../hsp3/hspvar_int.cpp"
 $2 = (($1) + 72|0); //@line 258 "../hsp3/hspvar_int.cpp"
 HEAP32[$2>>2] = 122; //@line 258 "../hsp3/hspvar_int.cpp"
 $3 = $0; //@line 259 "../hsp3/hspvar_int.cpp"
 $4 = (($3) + 20|0); //@line 259 "../hsp3/hspvar_int.cpp"
 HEAP32[$4>>2] = 123; //@line 259 "../hsp3/hspvar_int.cpp"
 $5 = $0; //@line 260 "../hsp3/hspvar_int.cpp"
 $6 = (($5) + 28|0); //@line 260 "../hsp3/hspvar_int.cpp"
 HEAP32[$6>>2] = 124; //@line 260 "../hsp3/hspvar_int.cpp"
 $7 = $0; //@line 262 "../hsp3/hspvar_int.cpp"
 $8 = (($7) + 56|0); //@line 262 "../hsp3/hspvar_int.cpp"
 HEAP32[$8>>2] = 125; //@line 262 "../hsp3/hspvar_int.cpp"
 $9 = $0; //@line 263 "../hsp3/hspvar_int.cpp"
 $10 = (($9) + 64|0); //@line 263 "../hsp3/hspvar_int.cpp"
 HEAP32[$10>>2] = 126; //@line 263 "../hsp3/hspvar_int.cpp"
 $11 = $0; //@line 264 "../hsp3/hspvar_int.cpp"
 $12 = (($11) + 68|0); //@line 264 "../hsp3/hspvar_int.cpp"
 HEAP32[$12>>2] = 127; //@line 264 "../hsp3/hspvar_int.cpp"
 $13 = $0; //@line 267 "../hsp3/hspvar_int.cpp"
 $14 = (($13) + 48|0); //@line 267 "../hsp3/hspvar_int.cpp"
 HEAP32[$14>>2] = 128; //@line 267 "../hsp3/hspvar_int.cpp"
 $15 = $0; //@line 268 "../hsp3/hspvar_int.cpp"
 $16 = (($15) + 52|0); //@line 268 "../hsp3/hspvar_int.cpp"
 HEAP32[$16>>2] = 129; //@line 268 "../hsp3/hspvar_int.cpp"
 $17 = $0; //@line 270 "../hsp3/hspvar_int.cpp"
 $18 = (($17) + 76|0); //@line 270 "../hsp3/hspvar_int.cpp"
 HEAP32[$18>>2] = 130; //@line 270 "../hsp3/hspvar_int.cpp"
 $19 = $0; //@line 271 "../hsp3/hspvar_int.cpp"
 $20 = (($19) + 80|0); //@line 271 "../hsp3/hspvar_int.cpp"
 HEAP32[$20>>2] = 131; //@line 271 "../hsp3/hspvar_int.cpp"
 $21 = $0; //@line 272 "../hsp3/hspvar_int.cpp"
 $22 = (($21) + 84|0); //@line 272 "../hsp3/hspvar_int.cpp"
 HEAP32[$22>>2] = 132; //@line 272 "../hsp3/hspvar_int.cpp"
 $23 = $0; //@line 273 "../hsp3/hspvar_int.cpp"
 $24 = (($23) + 88|0); //@line 273 "../hsp3/hspvar_int.cpp"
 HEAP32[$24>>2] = 133; //@line 273 "../hsp3/hspvar_int.cpp"
 $25 = $0; //@line 274 "../hsp3/hspvar_int.cpp"
 $26 = (($25) + 92|0); //@line 274 "../hsp3/hspvar_int.cpp"
 HEAP32[$26>>2] = 134; //@line 274 "../hsp3/hspvar_int.cpp"
 $27 = $0; //@line 276 "../hsp3/hspvar_int.cpp"
 $28 = (($27) + 96|0); //@line 276 "../hsp3/hspvar_int.cpp"
 HEAP32[$28>>2] = 135; //@line 276 "../hsp3/hspvar_int.cpp"
 $29 = $0; //@line 277 "../hsp3/hspvar_int.cpp"
 $30 = (($29) + 100|0); //@line 277 "../hsp3/hspvar_int.cpp"
 HEAP32[$30>>2] = 136; //@line 277 "../hsp3/hspvar_int.cpp"
 $31 = $0; //@line 278 "../hsp3/hspvar_int.cpp"
 $32 = (($31) + 104|0); //@line 278 "../hsp3/hspvar_int.cpp"
 HEAP32[$32>>2] = 137; //@line 278 "../hsp3/hspvar_int.cpp"
 $33 = $0; //@line 280 "../hsp3/hspvar_int.cpp"
 $34 = (($33) + 108|0); //@line 280 "../hsp3/hspvar_int.cpp"
 HEAP32[$34>>2] = 138; //@line 280 "../hsp3/hspvar_int.cpp"
 $35 = $0; //@line 281 "../hsp3/hspvar_int.cpp"
 $36 = (($35) + 112|0); //@line 281 "../hsp3/hspvar_int.cpp"
 HEAP32[$36>>2] = 139; //@line 281 "../hsp3/hspvar_int.cpp"
 $37 = $0; //@line 282 "../hsp3/hspvar_int.cpp"
 $38 = (($37) + 116|0); //@line 282 "../hsp3/hspvar_int.cpp"
 HEAP32[$38>>2] = 140; //@line 282 "../hsp3/hspvar_int.cpp"
 $39 = $0; //@line 283 "../hsp3/hspvar_int.cpp"
 $40 = (($39) + 120|0); //@line 283 "../hsp3/hspvar_int.cpp"
 HEAP32[$40>>2] = 141; //@line 283 "../hsp3/hspvar_int.cpp"
 $41 = $0; //@line 284 "../hsp3/hspvar_int.cpp"
 $42 = (($41) + 124|0); //@line 284 "../hsp3/hspvar_int.cpp"
 HEAP32[$42>>2] = 142; //@line 284 "../hsp3/hspvar_int.cpp"
 $43 = $0; //@line 285 "../hsp3/hspvar_int.cpp"
 $44 = (($43) + 128|0); //@line 285 "../hsp3/hspvar_int.cpp"
 HEAP32[$44>>2] = 143; //@line 285 "../hsp3/hspvar_int.cpp"
 $45 = $0; //@line 287 "../hsp3/hspvar_int.cpp"
 $46 = (($45) + 132|0); //@line 287 "../hsp3/hspvar_int.cpp"
 HEAP32[$46>>2] = 144; //@line 287 "../hsp3/hspvar_int.cpp"
 $47 = $0; //@line 288 "../hsp3/hspvar_int.cpp"
 $48 = (($47) + 136|0); //@line 288 "../hsp3/hspvar_int.cpp"
 HEAP32[$48>>2] = 145; //@line 288 "../hsp3/hspvar_int.cpp"
 $49 = $0; //@line 290 "../hsp3/hspvar_int.cpp"
 $50 = (($49) + 12|0); //@line 290 "../hsp3/hspvar_int.cpp"
 HEAP32[$50>>2] = 3504; //@line 290 "../hsp3/hspvar_int.cpp"
 $51 = $0; //@line 291 "../hsp3/hspvar_int.cpp"
 $52 = (($51) + 4|0); //@line 291 "../hsp3/hspvar_int.cpp"
 HEAP16[$52>>1] = 1; //@line 291 "../hsp3/hspvar_int.cpp"
 $53 = $0; //@line 292 "../hsp3/hspvar_int.cpp"
 $54 = (($53) + 6|0); //@line 292 "../hsp3/hspvar_int.cpp"
 HEAP16[$54>>1] = 9; //@line 292 "../hsp3/hspvar_int.cpp"
 $55 = $0; //@line 294 "../hsp3/hspvar_int.cpp"
 $56 = (($55) + 8|0); //@line 294 "../hsp3/hspvar_int.cpp"
 HEAP16[$56>>1] = 4; //@line 294 "../hsp3/hspvar_int.cpp"
 STACKTOP = sp;return; //@line 295 "../hsp3/hspvar_int.cpp"
}
function __ZL13HspVarInt_SetP4PValPPvPKv($pval,$pdat,$in) {
 $pval = $pval|0;
 $pdat = $pdat|0;
 $in = $in|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $pval;
 $1 = $pdat;
 $2 = $in;
 $3 = $2; //@line 136 "../hsp3/hspvar_int.cpp"
 $4 = HEAP32[$3>>2]|0; //@line 136 "../hsp3/hspvar_int.cpp"
 $5 = $1; //@line 136 "../hsp3/hspvar_int.cpp"
 HEAP32[$5>>2] = $4; //@line 136 "../hsp3/hspvar_int.cpp"
 STACKTOP = sp;return; //@line 137 "../hsp3/hspvar_int.cpp"
}
function __ZL13HspVarInt_CnvPKvi($buffer,$flag) {
 $buffer = $buffer|0;
 $flag = $flag|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $buffer;
 $2 = $flag;
 $3 = $2; //@line 37 "../hsp3/hspvar_int.cpp"
 if ((($3|0) == 4)) {
  $16 = $1; //@line 53 "../hsp3/hspvar_int.cpp"
  $0 = $16; //@line 53 "../hsp3/hspvar_int.cpp"
  $17 = $0; //@line 54 "../hsp3/hspvar_int.cpp"
  STACKTOP = sp;return ($17|0); //@line 54 "../hsp3/hspvar_int.cpp"
 } else if ((($3|0) == 3)) {
  $12 = $1; //@line 48 "../hsp3/hspvar_int.cpp"
  $13 = +HEAPF64[$12>>3]; //@line 48 "../hsp3/hspvar_int.cpp"
  $14 = (~~(($13))); //@line 48 "../hsp3/hspvar_int.cpp"
  HEAP32[3512>>2] = $14; //@line 48 "../hsp3/hspvar_int.cpp"
  $0 = 3512; //@line 49 "../hsp3/hspvar_int.cpp"
  $17 = $0; //@line 54 "../hsp3/hspvar_int.cpp"
  STACKTOP = sp;return ($17|0); //@line 54 "../hsp3/hspvar_int.cpp"
 } else if ((($3|0) == 2)) {
  $4 = $1; //@line 39 "../hsp3/hspvar_int.cpp"
  $5 = HEAP8[$4>>0]|0; //@line 39 "../hsp3/hspvar_int.cpp"
  $6 = $5 << 24 >> 24; //@line 39 "../hsp3/hspvar_int.cpp"
  $7 = ($6|0)==(36); //@line 39 "../hsp3/hspvar_int.cpp"
  if ($7) {
   $8 = $1; //@line 40 "../hsp3/hspvar_int.cpp"
   $9 = (__Z4htoiPc($8)|0); //@line 40 "../hsp3/hspvar_int.cpp"
   HEAP32[3512>>2] = $9; //@line 40 "../hsp3/hspvar_int.cpp"
  } else {
   $10 = $1; //@line 42 "../hsp3/hspvar_int.cpp"
   $11 = (_atoi($10)|0); //@line 42 "../hsp3/hspvar_int.cpp"
   HEAP32[3512>>2] = $11; //@line 42 "../hsp3/hspvar_int.cpp"
  }
  $0 = 3512; //@line 44 "../hsp3/hspvar_int.cpp"
  $17 = $0; //@line 54 "../hsp3/hspvar_int.cpp"
  STACKTOP = sp;return ($17|0); //@line 54 "../hsp3/hspvar_int.cpp"
 } else {
  $15 = (___cxa_allocate_exception(4)|0); //@line 51 "../hsp3/hspvar_int.cpp"
  HEAP32[$15>>2] = 6; //@line 51 "../hsp3/hspvar_int.cpp"
  ___cxa_throw(($15|0),(624|0),(0|0)); //@line 51 "../hsp3/hspvar_int.cpp"
  // unreachable; //@line 51 "../hsp3/hspvar_int.cpp"
 }
 return 0|0;
}
function __ZL16HspVarInt_GetPtrP4PVal($pval) {
 $pval = $pval|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $pval;
 $1 = $0; //@line 28 "../hsp3/hspvar_int.cpp"
 $2 = (($1) + 28|0); //@line 28 "../hsp3/hspvar_int.cpp"
 $3 = HEAP32[$2>>2]|0; //@line 28 "../hsp3/hspvar_int.cpp"
 $4 = $0; //@line 28 "../hsp3/hspvar_int.cpp"
 $5 = (($4) + 40|0); //@line 28 "../hsp3/hspvar_int.cpp"
 $6 = HEAP32[$5>>2]|0; //@line 28 "../hsp3/hspvar_int.cpp"
 $7 = (($3) + ($6<<2)|0); //@line 28 "../hsp3/hspvar_int.cpp"
 STACKTOP = sp;return ($7|0); //@line 28 "../hsp3/hspvar_int.cpp"
}
function __ZL17HspVarInt_GetSizePKPv($pval) {
 $pval = $pval|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $pval;
 STACKTOP = sp;return 4; //@line 130 "../hsp3/hspvar_int.cpp"
}
function __ZL12GetBlockSizeP4PValPPvPi189($pval,$pdat,$size) {
 $pval = $pval|0;
 $pdat = $pdat|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $pval;
 $1 = $pdat;
 $2 = $size;
 $3 = $0; //@line 245 "../hsp3/hspvar_int.cpp"
 $4 = (($3) + 24|0); //@line 245 "../hsp3/hspvar_int.cpp"
 $5 = HEAP32[$4>>2]|0; //@line 245 "../hsp3/hspvar_int.cpp"
 $6 = $1; //@line 245 "../hsp3/hspvar_int.cpp"
 $7 = $0; //@line 245 "../hsp3/hspvar_int.cpp"
 $8 = (($7) + 28|0); //@line 245 "../hsp3/hspvar_int.cpp"
 $9 = HEAP32[$8>>2]|0; //@line 245 "../hsp3/hspvar_int.cpp"
 $10 = $6; //@line 245 "../hsp3/hspvar_int.cpp"
 $11 = $9; //@line 245 "../hsp3/hspvar_int.cpp"
 $12 = (($10) - ($11))|0; //@line 245 "../hsp3/hspvar_int.cpp"
 $13 = (($5) - ($12))|0; //@line 245 "../hsp3/hspvar_int.cpp"
 $14 = $2; //@line 245 "../hsp3/hspvar_int.cpp"
 HEAP32[$14>>2] = $13; //@line 245 "../hsp3/hspvar_int.cpp"
 $15 = $1; //@line 246 "../hsp3/hspvar_int.cpp"
 STACKTOP = sp;return ($15|0); //@line 246 "../hsp3/hspvar_int.cpp"
}
function __ZL10AllocBlockP4PValPPvi190($pval,$pdat,$size) {
 $pval = $pval|0;
 $pdat = $pdat|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $pval;
 $1 = $pdat;
 $2 = $size;
 STACKTOP = sp;return; //@line 251 "../hsp3/hspvar_int.cpp"
}
function __ZL15HspVarInt_AllocP4PValPKS_($pval,$pval2) {
 $pval = $pval|0;
 $pval2 = $pval2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fv = 0, $i = 0, $pt = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $pval;
 $1 = $pval2;
 $2 = $0; //@line 103 "../hsp3/hspvar_int.cpp"
 $3 = (($2) + 4|0); //@line 103 "../hsp3/hspvar_int.cpp"
 $4 = (($3) + 4|0); //@line 103 "../hsp3/hspvar_int.cpp"
 $5 = HEAP32[$4>>2]|0; //@line 103 "../hsp3/hspvar_int.cpp"
 $6 = ($5|0)<(1); //@line 103 "../hsp3/hspvar_int.cpp"
 if ($6) {
  $7 = $0; //@line 103 "../hsp3/hspvar_int.cpp"
  $8 = (($7) + 4|0); //@line 103 "../hsp3/hspvar_int.cpp"
  $9 = (($8) + 4|0); //@line 103 "../hsp3/hspvar_int.cpp"
  HEAP32[$9>>2] = 1; //@line 103 "../hsp3/hspvar_int.cpp"
 }
 $10 = $0; //@line 104 "../hsp3/hspvar_int.cpp"
 $11 = (__ZL10GetVarSizeP4PVal191($10)|0); //@line 104 "../hsp3/hspvar_int.cpp"
 $size = $11; //@line 104 "../hsp3/hspvar_int.cpp"
 $12 = $0; //@line 105 "../hsp3/hspvar_int.cpp"
 $13 = (($12) + 2|0); //@line 105 "../hsp3/hspvar_int.cpp"
 HEAP16[$13>>1] = 1; //@line 105 "../hsp3/hspvar_int.cpp"
 $14 = $size; //@line 106 "../hsp3/hspvar_int.cpp"
 $15 = (__Z7sbAlloci($14)|0); //@line 106 "../hsp3/hspvar_int.cpp"
 $pt = $15; //@line 106 "../hsp3/hspvar_int.cpp"
 $16 = $pt; //@line 107 "../hsp3/hspvar_int.cpp"
 $fv = $16; //@line 107 "../hsp3/hspvar_int.cpp"
 $i = 0; //@line 108 "../hsp3/hspvar_int.cpp"
 while(1) {
  $17 = $i; //@line 108 "../hsp3/hspvar_int.cpp"
  $18 = $size; //@line 108 "../hsp3/hspvar_int.cpp"
  $19 = (($18>>>0) / 4)&-1; //@line 108 "../hsp3/hspvar_int.cpp"
  $20 = ($17|0)<($19|0); //@line 108 "../hsp3/hspvar_int.cpp"
  if (!($20)) {
   break;
  }
  $21 = $i; //@line 108 "../hsp3/hspvar_int.cpp"
  $22 = $fv; //@line 108 "../hsp3/hspvar_int.cpp"
  $23 = (($22) + ($21<<2)|0); //@line 108 "../hsp3/hspvar_int.cpp"
  HEAP32[$23>>2] = 0; //@line 108 "../hsp3/hspvar_int.cpp"
  $24 = $i; //@line 108 "../hsp3/hspvar_int.cpp"
  $25 = (($24) + 1)|0; //@line 108 "../hsp3/hspvar_int.cpp"
  $i = $25; //@line 108 "../hsp3/hspvar_int.cpp"
 }
 $26 = $1; //@line 109 "../hsp3/hspvar_int.cpp"
 $27 = ($26|0)!=(0|0); //@line 109 "../hsp3/hspvar_int.cpp"
 if (!($27)) {
  $38 = $pt; //@line 113 "../hsp3/hspvar_int.cpp"
  $39 = $0; //@line 113 "../hsp3/hspvar_int.cpp"
  $40 = (($39) + 28|0); //@line 113 "../hsp3/hspvar_int.cpp"
  HEAP32[$40>>2] = $38; //@line 113 "../hsp3/hspvar_int.cpp"
  $41 = $size; //@line 114 "../hsp3/hspvar_int.cpp"
  $42 = $0; //@line 114 "../hsp3/hspvar_int.cpp"
  $43 = (($42) + 24|0); //@line 114 "../hsp3/hspvar_int.cpp"
  HEAP32[$43>>2] = $41; //@line 114 "../hsp3/hspvar_int.cpp"
  STACKTOP = sp;return; //@line 115 "../hsp3/hspvar_int.cpp"
 }
 $28 = $pt; //@line 110 "../hsp3/hspvar_int.cpp"
 $29 = $0; //@line 110 "../hsp3/hspvar_int.cpp"
 $30 = (($29) + 28|0); //@line 110 "../hsp3/hspvar_int.cpp"
 $31 = HEAP32[$30>>2]|0; //@line 110 "../hsp3/hspvar_int.cpp"
 $32 = $0; //@line 110 "../hsp3/hspvar_int.cpp"
 $33 = (($32) + 24|0); //@line 110 "../hsp3/hspvar_int.cpp"
 $34 = HEAP32[$33>>2]|0; //@line 110 "../hsp3/hspvar_int.cpp"
 _memcpy(($28|0),($31|0),($34|0))|0; //@line 110 "../hsp3/hspvar_int.cpp"
 $35 = $0; //@line 111 "../hsp3/hspvar_int.cpp"
 $36 = (($35) + 28|0); //@line 111 "../hsp3/hspvar_int.cpp"
 $37 = HEAP32[$36>>2]|0; //@line 111 "../hsp3/hspvar_int.cpp"
 __Z6sbFreePv($37); //@line 111 "../hsp3/hspvar_int.cpp"
 $38 = $pt; //@line 113 "../hsp3/hspvar_int.cpp"
 $39 = $0; //@line 113 "../hsp3/hspvar_int.cpp"
 $40 = (($39) + 28|0); //@line 113 "../hsp3/hspvar_int.cpp"
 HEAP32[$40>>2] = $38; //@line 113 "../hsp3/hspvar_int.cpp"
 $41 = $size; //@line 114 "../hsp3/hspvar_int.cpp"
 $42 = $0; //@line 114 "../hsp3/hspvar_int.cpp"
 $43 = (($42) + 24|0); //@line 114 "../hsp3/hspvar_int.cpp"
 HEAP32[$43>>2] = $41; //@line 114 "../hsp3/hspvar_int.cpp"
 STACKTOP = sp;return; //@line 115 "../hsp3/hspvar_int.cpp"
}
function __ZL14HspVarInt_FreeP4PVal($pval) {
 $pval = $pval|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $pval;
 $1 = $0; //@line 87 "../hsp3/hspvar_int.cpp"
 $2 = (($1) + 2|0); //@line 87 "../hsp3/hspvar_int.cpp"
 $3 = HEAP16[$2>>1]|0; //@line 87 "../hsp3/hspvar_int.cpp"
 $4 = $3 << 16 >> 16; //@line 87 "../hsp3/hspvar_int.cpp"
 $5 = ($4|0)==(1); //@line 87 "../hsp3/hspvar_int.cpp"
 if ($5) {
  $6 = $0; //@line 87 "../hsp3/hspvar_int.cpp"
  $7 = (($6) + 28|0); //@line 87 "../hsp3/hspvar_int.cpp"
  $8 = HEAP32[$7>>2]|0; //@line 87 "../hsp3/hspvar_int.cpp"
  __Z6sbFreePv($8); //@line 87 "../hsp3/hspvar_int.cpp"
 }
 $9 = $0; //@line 88 "../hsp3/hspvar_int.cpp"
 $10 = (($9) + 28|0); //@line 88 "../hsp3/hspvar_int.cpp"
 HEAP32[$10>>2] = 0; //@line 88 "../hsp3/hspvar_int.cpp"
 $11 = $0; //@line 89 "../hsp3/hspvar_int.cpp"
 $12 = (($11) + 2|0); //@line 89 "../hsp3/hspvar_int.cpp"
 HEAP16[$12>>1] = -1; //@line 89 "../hsp3/hspvar_int.cpp"
 STACKTOP = sp;return; //@line 90 "../hsp3/hspvar_int.cpp"
}
function __ZL14HspVarInt_AddIPPvPKv($pval,$val) {
 $pval = $pval|0;
 $val = $val|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $pval;
 $1 = $val;
 $2 = $1; //@line 142 "../hsp3/hspvar_int.cpp"
 $3 = HEAP32[$2>>2]|0; //@line 142 "../hsp3/hspvar_int.cpp"
 $4 = $0; //@line 142 "../hsp3/hspvar_int.cpp"
 $5 = HEAP32[$4>>2]|0; //@line 142 "../hsp3/hspvar_int.cpp"
 $6 = (($5) + ($3))|0; //@line 142 "../hsp3/hspvar_int.cpp"
 HEAP32[$4>>2] = $6; //@line 142 "../hsp3/hspvar_int.cpp"
 STACKTOP = sp;return; //@line 143 "../hsp3/hspvar_int.cpp"
}
function __ZL14HspVarInt_SubIPPvPKv($pval,$val) {
 $pval = $pval|0;
 $val = $val|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $pval;
 $1 = $val;
 $2 = $1; //@line 149 "../hsp3/hspvar_int.cpp"
 $3 = HEAP32[$2>>2]|0; //@line 149 "../hsp3/hspvar_int.cpp"
 $4 = $0; //@line 149 "../hsp3/hspvar_int.cpp"
 $5 = HEAP32[$4>>2]|0; //@line 149 "../hsp3/hspvar_int.cpp"
 $6 = (($5) - ($3))|0; //@line 149 "../hsp3/hspvar_int.cpp"
 HEAP32[$4>>2] = $6; //@line 149 "../hsp3/hspvar_int.cpp"
 STACKTOP = sp;return; //@line 150 "../hsp3/hspvar_int.cpp"
}
function __ZL14HspVarInt_MulIPPvPKv($pval,$val) {
 $pval = $pval|0;
 $val = $val|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $pval;
 $1 = $val;
 $2 = $1; //@line 155 "../hsp3/hspvar_int.cpp"
 $3 = HEAP32[$2>>2]|0; //@line 155 "../hsp3/hspvar_int.cpp"
 $4 = $0; //@line 155 "../hsp3/hspvar_int.cpp"
 $5 = HEAP32[$4>>2]|0; //@line 155 "../hsp3/hspvar_int.cpp"
 $6 = Math_imul($5, $3)|0; //@line 155 "../hsp3/hspvar_int.cpp"
 HEAP32[$4>>2] = $6; //@line 155 "../hsp3/hspvar_int.cpp"
 STACKTOP = sp;return; //@line 156 "../hsp3/hspvar_int.cpp"
}
function __ZL14HspVarInt_DivIPPvPKv($pval,$val) {
 $pval = $pval|0;
 $val = $val|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $pval;
 $1 = $val;
 $2 = $1; //@line 161 "../hsp3/hspvar_int.cpp"
 $3 = HEAP32[$2>>2]|0; //@line 161 "../hsp3/hspvar_int.cpp"
 $p = $3; //@line 161 "../hsp3/hspvar_int.cpp"
 $4 = $p; //@line 162 "../hsp3/hspvar_int.cpp"
 $5 = ($4|0)==(0); //@line 162 "../hsp3/hspvar_int.cpp"
 if ($5) {
  $6 = (___cxa_allocate_exception(4)|0); //@line 162 "../hsp3/hspvar_int.cpp"
  HEAP32[$6>>2] = 19; //@line 162 "../hsp3/hspvar_int.cpp"
  ___cxa_throw(($6|0),(624|0),(0|0)); //@line 162 "../hsp3/hspvar_int.cpp"
  // unreachable; //@line 162 "../hsp3/hspvar_int.cpp"
 } else {
  $7 = $p; //@line 163 "../hsp3/hspvar_int.cpp"
  $8 = $0; //@line 163 "../hsp3/hspvar_int.cpp"
  $9 = HEAP32[$8>>2]|0; //@line 163 "../hsp3/hspvar_int.cpp"
  $10 = (($9|0) / ($7|0))&-1; //@line 163 "../hsp3/hspvar_int.cpp"
  HEAP32[$8>>2] = $10; //@line 163 "../hsp3/hspvar_int.cpp"
  STACKTOP = sp;return; //@line 164 "../hsp3/hspvar_int.cpp"
 }
}
function __ZL14HspVarInt_ModIPPvPKv($pval,$val) {
 $pval = $pval|0;
 $val = $val|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $pval;
 $1 = $val;
 $2 = $1; //@line 169 "../hsp3/hspvar_int.cpp"
 $3 = HEAP32[$2>>2]|0; //@line 169 "../hsp3/hspvar_int.cpp"
 $p = $3; //@line 169 "../hsp3/hspvar_int.cpp"
 $4 = $p; //@line 170 "../hsp3/hspvar_int.cpp"
 $5 = ($4|0)==(0); //@line 170 "../hsp3/hspvar_int.cpp"
 if ($5) {
  $6 = (___cxa_allocate_exception(4)|0); //@line 170 "../hsp3/hspvar_int.cpp"
  HEAP32[$6>>2] = 19; //@line 170 "../hsp3/hspvar_int.cpp"
  ___cxa_throw(($6|0),(624|0),(0|0)); //@line 170 "../hsp3/hspvar_int.cpp"
  // unreachable; //@line 170 "../hsp3/hspvar_int.cpp"
 } else {
  $7 = $p; //@line 171 "../hsp3/hspvar_int.cpp"
  $8 = $0; //@line 171 "../hsp3/hspvar_int.cpp"
  $9 = HEAP32[$8>>2]|0; //@line 171 "../hsp3/hspvar_int.cpp"
  $10 = (($9|0) % ($7|0))&-1; //@line 171 "../hsp3/hspvar_int.cpp"
  HEAP32[$8>>2] = $10; //@line 171 "../hsp3/hspvar_int.cpp"
  STACKTOP = sp;return; //@line 172 "../hsp3/hspvar_int.cpp"
 }
}
function __ZL14HspVarInt_AndIPPvPKv($pval,$val) {
 $pval = $pval|0;
 $val = $val|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $pval;
 $1 = $val;
 $2 = $1; //@line 178 "../hsp3/hspvar_int.cpp"
 $3 = HEAP32[$2>>2]|0; //@line 178 "../hsp3/hspvar_int.cpp"
 $4 = $0; //@line 178 "../hsp3/hspvar_int.cpp"
 $5 = HEAP32[$4>>2]|0; //@line 178 "../hsp3/hspvar_int.cpp"
 $6 = $5 & $3; //@line 178 "../hsp3/hspvar_int.cpp"
 HEAP32[$4>>2] = $6; //@line 178 "../hsp3/hspvar_int.cpp"
 STACKTOP = sp;return; //@line 179 "../hsp3/hspvar_int.cpp"
}
function __ZL13HspVarInt_OrIPPvPKv($pval,$val) {
 $pval = $pval|0;
 $val = $val|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $pval;
 $1 = $val;
 $2 = $1; //@line 184 "../hsp3/hspvar_int.cpp"
 $3 = HEAP32[$2>>2]|0; //@line 184 "../hsp3/hspvar_int.cpp"
 $4 = $0; //@line 184 "../hsp3/hspvar_int.cpp"
 $5 = HEAP32[$4>>2]|0; //@line 184 "../hsp3/hspvar_int.cpp"
 $6 = $5 | $3; //@line 184 "../hsp3/hspvar_int.cpp"
 HEAP32[$4>>2] = $6; //@line 184 "../hsp3/hspvar_int.cpp"
 STACKTOP = sp;return; //@line 185 "../hsp3/hspvar_int.cpp"
}
function __ZL14HspVarInt_XorIPPvPKv($pval,$val) {
 $pval = $pval|0;
 $val = $val|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $pval;
 $1 = $val;
 $2 = $1; //@line 190 "../hsp3/hspvar_int.cpp"
 $3 = HEAP32[$2>>2]|0; //@line 190 "../hsp3/hspvar_int.cpp"
 $4 = $0; //@line 190 "../hsp3/hspvar_int.cpp"
 $5 = HEAP32[$4>>2]|0; //@line 190 "../hsp3/hspvar_int.cpp"
 $6 = $5 ^ $3; //@line 190 "../hsp3/hspvar_int.cpp"
 HEAP32[$4>>2] = $6; //@line 190 "../hsp3/hspvar_int.cpp"
 STACKTOP = sp;return; //@line 191 "../hsp3/hspvar_int.cpp"
}
function __ZL13HspVarInt_EqIPPvPKv($pval,$val) {
 $pval = $pval|0;
 $val = $val|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $pval;
 $1 = $val;
 $2 = $0; //@line 197 "../hsp3/hspvar_int.cpp"
 $3 = HEAP32[$2>>2]|0; //@line 197 "../hsp3/hspvar_int.cpp"
 $4 = $1; //@line 197 "../hsp3/hspvar_int.cpp"
 $5 = HEAP32[$4>>2]|0; //@line 197 "../hsp3/hspvar_int.cpp"
 $6 = ($3|0)==($5|0); //@line 197 "../hsp3/hspvar_int.cpp"
 $7 = $6&1; //@line 197 "../hsp3/hspvar_int.cpp"
 $8 = $0; //@line 197 "../hsp3/hspvar_int.cpp"
 HEAP32[$8>>2] = $7; //@line 197 "../hsp3/hspvar_int.cpp"
 STACKTOP = sp;return; //@line 198 "../hsp3/hspvar_int.cpp"
}
function __ZL13HspVarInt_NeIPPvPKv($pval,$val) {
 $pval = $pval|0;
 $val = $val|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $pval;
 $1 = $val;
 $2 = $0; //@line 203 "../hsp3/hspvar_int.cpp"
 $3 = HEAP32[$2>>2]|0; //@line 203 "../hsp3/hspvar_int.cpp"
 $4 = $1; //@line 203 "../hsp3/hspvar_int.cpp"
 $5 = HEAP32[$4>>2]|0; //@line 203 "../hsp3/hspvar_int.cpp"
 $6 = ($3|0)!=($5|0); //@line 203 "../hsp3/hspvar_int.cpp"
 $7 = $6&1; //@line 203 "../hsp3/hspvar_int.cpp"
 $8 = $0; //@line 203 "../hsp3/hspvar_int.cpp"
 HEAP32[$8>>2] = $7; //@line 203 "../hsp3/hspvar_int.cpp"
 STACKTOP = sp;return; //@line 204 "../hsp3/hspvar_int.cpp"
}
function __ZL13HspVarInt_GtIPPvPKv($pval,$val) {
 $pval = $pval|0;
 $val = $val|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $pval;
 $1 = $val;
 $2 = $0; //@line 209 "../hsp3/hspvar_int.cpp"
 $3 = HEAP32[$2>>2]|0; //@line 209 "../hsp3/hspvar_int.cpp"
 $4 = $1; //@line 209 "../hsp3/hspvar_int.cpp"
 $5 = HEAP32[$4>>2]|0; //@line 209 "../hsp3/hspvar_int.cpp"
 $6 = ($3|0)>($5|0); //@line 209 "../hsp3/hspvar_int.cpp"
 $7 = $6&1; //@line 209 "../hsp3/hspvar_int.cpp"
 $8 = $0; //@line 209 "../hsp3/hspvar_int.cpp"
 HEAP32[$8>>2] = $7; //@line 209 "../hsp3/hspvar_int.cpp"
 STACKTOP = sp;return; //@line 210 "../hsp3/hspvar_int.cpp"
}
function __ZL13HspVarInt_LtIPPvPKv($pval,$val) {
 $pval = $pval|0;
 $val = $val|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $pval;
 $1 = $val;
 $2 = $0; //@line 215 "../hsp3/hspvar_int.cpp"
 $3 = HEAP32[$2>>2]|0; //@line 215 "../hsp3/hspvar_int.cpp"
 $4 = $1; //@line 215 "../hsp3/hspvar_int.cpp"
 $5 = HEAP32[$4>>2]|0; //@line 215 "../hsp3/hspvar_int.cpp"
 $6 = ($3|0)<($5|0); //@line 215 "../hsp3/hspvar_int.cpp"
 $7 = $6&1; //@line 215 "../hsp3/hspvar_int.cpp"
 $8 = $0; //@line 215 "../hsp3/hspvar_int.cpp"
 HEAP32[$8>>2] = $7; //@line 215 "../hsp3/hspvar_int.cpp"
 STACKTOP = sp;return; //@line 216 "../hsp3/hspvar_int.cpp"
}
function __ZL15HspVarInt_GtEqIPPvPKv($pval,$val) {
 $pval = $pval|0;
 $val = $val|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $pval;
 $1 = $val;
 $2 = $0; //@line 221 "../hsp3/hspvar_int.cpp"
 $3 = HEAP32[$2>>2]|0; //@line 221 "../hsp3/hspvar_int.cpp"
 $4 = $1; //@line 221 "../hsp3/hspvar_int.cpp"
 $5 = HEAP32[$4>>2]|0; //@line 221 "../hsp3/hspvar_int.cpp"
 $6 = ($3|0)>=($5|0); //@line 221 "../hsp3/hspvar_int.cpp"
 $7 = $6&1; //@line 221 "../hsp3/hspvar_int.cpp"
 $8 = $0; //@line 221 "../hsp3/hspvar_int.cpp"
 HEAP32[$8>>2] = $7; //@line 221 "../hsp3/hspvar_int.cpp"
 STACKTOP = sp;return; //@line 222 "../hsp3/hspvar_int.cpp"
}
function __ZL15HspVarInt_LtEqIPPvPKv($pval,$val) {
 $pval = $pval|0;
 $val = $val|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $pval;
 $1 = $val;
 $2 = $0; //@line 227 "../hsp3/hspvar_int.cpp"
 $3 = HEAP32[$2>>2]|0; //@line 227 "../hsp3/hspvar_int.cpp"
 $4 = $1; //@line 227 "../hsp3/hspvar_int.cpp"
 $5 = HEAP32[$4>>2]|0; //@line 227 "../hsp3/hspvar_int.cpp"
 $6 = ($3|0)<=($5|0); //@line 227 "../hsp3/hspvar_int.cpp"
 $7 = $6&1; //@line 227 "../hsp3/hspvar_int.cpp"
 $8 = $0; //@line 227 "../hsp3/hspvar_int.cpp"
 HEAP32[$8>>2] = $7; //@line 227 "../hsp3/hspvar_int.cpp"
 STACKTOP = sp;return; //@line 228 "../hsp3/hspvar_int.cpp"
}
function __ZL13HspVarInt_RrIPPvPKv($pval,$val) {
 $pval = $pval|0;
 $val = $val|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $pval;
 $1 = $val;
 $2 = $1; //@line 233 "../hsp3/hspvar_int.cpp"
 $3 = HEAP32[$2>>2]|0; //@line 233 "../hsp3/hspvar_int.cpp"
 $4 = $0; //@line 233 "../hsp3/hspvar_int.cpp"
 $5 = HEAP32[$4>>2]|0; //@line 233 "../hsp3/hspvar_int.cpp"
 $6 = $5 >> $3; //@line 233 "../hsp3/hspvar_int.cpp"
 HEAP32[$4>>2] = $6; //@line 233 "../hsp3/hspvar_int.cpp"
 STACKTOP = sp;return; //@line 234 "../hsp3/hspvar_int.cpp"
}
function __ZL13HspVarInt_LrIPPvPKv($pval,$val) {
 $pval = $pval|0;
 $val = $val|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $pval;
 $1 = $val;
 $2 = $1; //@line 239 "../hsp3/hspvar_int.cpp"
 $3 = HEAP32[$2>>2]|0; //@line 239 "../hsp3/hspvar_int.cpp"
 $4 = $0; //@line 239 "../hsp3/hspvar_int.cpp"
 $5 = HEAP32[$4>>2]|0; //@line 239 "../hsp3/hspvar_int.cpp"
 $6 = $5 << $3; //@line 239 "../hsp3/hspvar_int.cpp"
 HEAP32[$4>>2] = $6; //@line 239 "../hsp3/hspvar_int.cpp"
 STACKTOP = sp;return; //@line 240 "../hsp3/hspvar_int.cpp"
}
function __ZL10GetVarSizeP4PVal191($pval) {
 $pval = $pval|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $pval;
 $1 = $0; //@line 74 "../hsp3/hspvar_int.cpp"
 $2 = (($1) + 4|0); //@line 74 "../hsp3/hspvar_int.cpp"
 $3 = (($2) + 4|0); //@line 74 "../hsp3/hspvar_int.cpp"
 $4 = HEAP32[$3>>2]|0; //@line 74 "../hsp3/hspvar_int.cpp"
 $size = $4; //@line 74 "../hsp3/hspvar_int.cpp"
 $5 = $0; //@line 75 "../hsp3/hspvar_int.cpp"
 $6 = (($5) + 4|0); //@line 75 "../hsp3/hspvar_int.cpp"
 $7 = (($6) + 8|0); //@line 75 "../hsp3/hspvar_int.cpp"
 $8 = HEAP32[$7>>2]|0; //@line 75 "../hsp3/hspvar_int.cpp"
 $9 = ($8|0)!=(0); //@line 75 "../hsp3/hspvar_int.cpp"
 if ($9) {
  $10 = $0; //@line 75 "../hsp3/hspvar_int.cpp"
  $11 = (($10) + 4|0); //@line 75 "../hsp3/hspvar_int.cpp"
  $12 = (($11) + 8|0); //@line 75 "../hsp3/hspvar_int.cpp"
  $13 = HEAP32[$12>>2]|0; //@line 75 "../hsp3/hspvar_int.cpp"
  $14 = $size; //@line 75 "../hsp3/hspvar_int.cpp"
  $15 = Math_imul($14, $13)|0; //@line 75 "../hsp3/hspvar_int.cpp"
  $size = $15; //@line 75 "../hsp3/hspvar_int.cpp"
 }
 $16 = $0; //@line 76 "../hsp3/hspvar_int.cpp"
 $17 = (($16) + 4|0); //@line 76 "../hsp3/hspvar_int.cpp"
 $18 = (($17) + 12|0); //@line 76 "../hsp3/hspvar_int.cpp"
 $19 = HEAP32[$18>>2]|0; //@line 76 "../hsp3/hspvar_int.cpp"
 $20 = ($19|0)!=(0); //@line 76 "../hsp3/hspvar_int.cpp"
 if ($20) {
  $21 = $0; //@line 76 "../hsp3/hspvar_int.cpp"
  $22 = (($21) + 4|0); //@line 76 "../hsp3/hspvar_int.cpp"
  $23 = (($22) + 12|0); //@line 76 "../hsp3/hspvar_int.cpp"
  $24 = HEAP32[$23>>2]|0; //@line 76 "../hsp3/hspvar_int.cpp"
  $25 = $size; //@line 76 "../hsp3/hspvar_int.cpp"
  $26 = Math_imul($25, $24)|0; //@line 76 "../hsp3/hspvar_int.cpp"
  $size = $26; //@line 76 "../hsp3/hspvar_int.cpp"
 }
 $27 = $0; //@line 77 "../hsp3/hspvar_int.cpp"
 $28 = (($27) + 4|0); //@line 77 "../hsp3/hspvar_int.cpp"
 $29 = (($28) + 16|0); //@line 77 "../hsp3/hspvar_int.cpp"
 $30 = HEAP32[$29>>2]|0; //@line 77 "../hsp3/hspvar_int.cpp"
 $31 = ($30|0)!=(0); //@line 77 "../hsp3/hspvar_int.cpp"
 if (!($31)) {
  $38 = $size; //@line 78 "../hsp3/hspvar_int.cpp"
  $39 = $38<<2; //@line 78 "../hsp3/hspvar_int.cpp"
  $size = $39; //@line 78 "../hsp3/hspvar_int.cpp"
  $40 = $size; //@line 79 "../hsp3/hspvar_int.cpp"
  STACKTOP = sp;return ($40|0); //@line 79 "../hsp3/hspvar_int.cpp"
 }
 $32 = $0; //@line 77 "../hsp3/hspvar_int.cpp"
 $33 = (($32) + 4|0); //@line 77 "../hsp3/hspvar_int.cpp"
 $34 = (($33) + 16|0); //@line 77 "../hsp3/hspvar_int.cpp"
 $35 = HEAP32[$34>>2]|0; //@line 77 "../hsp3/hspvar_int.cpp"
 $36 = $size; //@line 77 "../hsp3/hspvar_int.cpp"
 $37 = Math_imul($36, $35)|0; //@line 77 "../hsp3/hspvar_int.cpp"
 $size = $37; //@line 77 "../hsp3/hspvar_int.cpp"
 $38 = $size; //@line 78 "../hsp3/hspvar_int.cpp"
 $39 = $38<<2; //@line 78 "../hsp3/hspvar_int.cpp"
 $size = $39; //@line 78 "../hsp3/hspvar_int.cpp"
 $40 = $size; //@line 79 "../hsp3/hspvar_int.cpp"
 STACKTOP = sp;return ($40|0); //@line 79 "../hsp3/hspvar_int.cpp"
}
function _HspVarLabel_Init($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $p;
 $1 = $0; //@line 116 "../hsp3/hspvar_label.cpp"
 $2 = (($1) + 72|0); //@line 116 "../hsp3/hspvar_label.cpp"
 HEAP32[$2>>2] = 146; //@line 116 "../hsp3/hspvar_label.cpp"
 $3 = $0; //@line 117 "../hsp3/hspvar_label.cpp"
 $4 = (($3) + 28|0); //@line 117 "../hsp3/hspvar_label.cpp"
 HEAP32[$4>>2] = 147; //@line 117 "../hsp3/hspvar_label.cpp"
 $5 = $0; //@line 118 "../hsp3/hspvar_label.cpp"
 $6 = (($5) + 56|0); //@line 118 "../hsp3/hspvar_label.cpp"
 HEAP32[$6>>2] = 148; //@line 118 "../hsp3/hspvar_label.cpp"
 $7 = $0; //@line 119 "../hsp3/hspvar_label.cpp"
 $8 = (($7) + 60|0); //@line 119 "../hsp3/hspvar_label.cpp"
 HEAP32[$8>>2] = 149; //@line 119 "../hsp3/hspvar_label.cpp"
 $9 = $0; //@line 120 "../hsp3/hspvar_label.cpp"
 $10 = (($9) + 64|0); //@line 120 "../hsp3/hspvar_label.cpp"
 HEAP32[$10>>2] = 150; //@line 120 "../hsp3/hspvar_label.cpp"
 $11 = $0; //@line 121 "../hsp3/hspvar_label.cpp"
 $12 = (($11) + 68|0); //@line 121 "../hsp3/hspvar_label.cpp"
 HEAP32[$12>>2] = 151; //@line 121 "../hsp3/hspvar_label.cpp"
 $13 = $0; //@line 123 "../hsp3/hspvar_label.cpp"
 $14 = (($13) + 48|0); //@line 123 "../hsp3/hspvar_label.cpp"
 HEAP32[$14>>2] = 152; //@line 123 "../hsp3/hspvar_label.cpp"
 $15 = $0; //@line 124 "../hsp3/hspvar_label.cpp"
 $16 = (($15) + 52|0); //@line 124 "../hsp3/hspvar_label.cpp"
 HEAP32[$16>>2] = 153; //@line 124 "../hsp3/hspvar_label.cpp"
 $17 = $0; //@line 126 "../hsp3/hspvar_label.cpp"
 $18 = (($17) + 12|0); //@line 126 "../hsp3/hspvar_label.cpp"
 HEAP32[$18>>2] = 3520; //@line 126 "../hsp3/hspvar_label.cpp"
 $19 = $0; //@line 127 "../hsp3/hspvar_label.cpp"
 $20 = (($19) + 4|0); //@line 127 "../hsp3/hspvar_label.cpp"
 HEAP16[$20>>1] = 1; //@line 127 "../hsp3/hspvar_label.cpp"
 $21 = $0; //@line 128 "../hsp3/hspvar_label.cpp"
 $22 = (($21) + 6|0); //@line 128 "../hsp3/hspvar_label.cpp"
 HEAP16[$22>>1] = 137; //@line 128 "../hsp3/hspvar_label.cpp"
 $23 = $0; //@line 130 "../hsp3/hspvar_label.cpp"
 $24 = (($23) + 8|0); //@line 130 "../hsp3/hspvar_label.cpp"
 HEAP16[$24>>1] = 4; //@line 130 "../hsp3/hspvar_label.cpp"
 STACKTOP = sp;return; //@line 131 "../hsp3/hspvar_label.cpp"
}
function __ZL15HspVarLabel_SetP4PValPPvPKv($pval,$pdat,$in) {
 $pval = $pval|0;
 $pdat = $pdat|0;
 $in = $in|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $pval;
 $1 = $pdat;
 $2 = $in;
 $3 = $2; //@line 98 "../hsp3/hspvar_label.cpp"
 $4 = HEAP32[$3>>2]|0; //@line 98 "../hsp3/hspvar_label.cpp"
 $5 = $1; //@line 98 "../hsp3/hspvar_label.cpp"
 HEAP32[$5>>2] = $4; //@line 98 "../hsp3/hspvar_label.cpp"
 STACKTOP = sp;return; //@line 99 "../hsp3/hspvar_label.cpp"
}
function __ZL18HspVarLabel_GetPtrP4PVal($pval) {
 $pval = $pval|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $pval;
 $1 = $0; //@line 28 "../hsp3/hspvar_label.cpp"
 $2 = (($1) + 28|0); //@line 28 "../hsp3/hspvar_label.cpp"
 $3 = HEAP32[$2>>2]|0; //@line 28 "../hsp3/hspvar_label.cpp"
 $4 = $0; //@line 28 "../hsp3/hspvar_label.cpp"
 $5 = (($4) + 40|0); //@line 28 "../hsp3/hspvar_label.cpp"
 $6 = HEAP32[$5>>2]|0; //@line 28 "../hsp3/hspvar_label.cpp"
 $7 = (($3) + ($6<<2)|0); //@line 28 "../hsp3/hspvar_label.cpp"
 STACKTOP = sp;return ($7|0); //@line 28 "../hsp3/hspvar_label.cpp"
}
function __ZL19HspVarLabel_GetSizePKPv($pval) {
 $pval = $pval|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $pval;
 STACKTOP = sp;return 4; //@line 85 "../hsp3/hspvar_label.cpp"
}
function __ZL20HspVarLabel_GetUsingPKPv($pdat) {
 $pdat = $pdat|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $pdat;
 $1 = $0; //@line 92 "../hsp3/hspvar_label.cpp"
 $2 = HEAP32[$1>>2]|0; //@line 92 "../hsp3/hspvar_label.cpp"
 $3 = ($2|0)!=(0|0); //@line 92 "../hsp3/hspvar_label.cpp"
 $4 = $3&1; //@line 92 "../hsp3/hspvar_label.cpp"
 STACKTOP = sp;return ($4|0); //@line 92 "../hsp3/hspvar_label.cpp"
}
function __ZL12GetBlockSizeP4PValPPvPi195($pval,$pdat,$size) {
 $pval = $pval|0;
 $pdat = $pdat|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $pval;
 $1 = $pdat;
 $2 = $size;
 $3 = $0; //@line 103 "../hsp3/hspvar_label.cpp"
 $4 = (($3) + 24|0); //@line 103 "../hsp3/hspvar_label.cpp"
 $5 = HEAP32[$4>>2]|0; //@line 103 "../hsp3/hspvar_label.cpp"
 $6 = $1; //@line 103 "../hsp3/hspvar_label.cpp"
 $7 = $0; //@line 103 "../hsp3/hspvar_label.cpp"
 $8 = (($7) + 28|0); //@line 103 "../hsp3/hspvar_label.cpp"
 $9 = HEAP32[$8>>2]|0; //@line 103 "../hsp3/hspvar_label.cpp"
 $10 = $6; //@line 103 "../hsp3/hspvar_label.cpp"
 $11 = $9; //@line 103 "../hsp3/hspvar_label.cpp"
 $12 = (($10) - ($11))|0; //@line 103 "../hsp3/hspvar_label.cpp"
 $13 = (($5) - ($12))|0; //@line 103 "../hsp3/hspvar_label.cpp"
 $14 = $2; //@line 103 "../hsp3/hspvar_label.cpp"
 HEAP32[$14>>2] = $13; //@line 103 "../hsp3/hspvar_label.cpp"
 $15 = $1; //@line 104 "../hsp3/hspvar_label.cpp"
 STACKTOP = sp;return ($15|0); //@line 104 "../hsp3/hspvar_label.cpp"
}
function __ZL10AllocBlockP4PValPPvi196($pval,$pdat,$size) {
 $pval = $pval|0;
 $pdat = $pdat|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $pval;
 $1 = $pdat;
 $2 = $size;
 STACKTOP = sp;return; //@line 109 "../hsp3/hspvar_label.cpp"
}
function __ZL17HspVarLabel_AllocP4PValPKS_($pval,$pval2) {
 $pval = $pval|0;
 $pval2 = $pval2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fv = 0, $i = 0, $pt = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $pval;
 $1 = $pval2;
 $2 = $0; //@line 68 "../hsp3/hspvar_label.cpp"
 $3 = (($2) + 4|0); //@line 68 "../hsp3/hspvar_label.cpp"
 $4 = (($3) + 4|0); //@line 68 "../hsp3/hspvar_label.cpp"
 $5 = HEAP32[$4>>2]|0; //@line 68 "../hsp3/hspvar_label.cpp"
 $6 = ($5|0)<(1); //@line 68 "../hsp3/hspvar_label.cpp"
 if ($6) {
  $7 = $0; //@line 68 "../hsp3/hspvar_label.cpp"
  $8 = (($7) + 4|0); //@line 68 "../hsp3/hspvar_label.cpp"
  $9 = (($8) + 4|0); //@line 68 "../hsp3/hspvar_label.cpp"
  HEAP32[$9>>2] = 1; //@line 68 "../hsp3/hspvar_label.cpp"
 }
 $10 = $0; //@line 69 "../hsp3/hspvar_label.cpp"
 $11 = (__ZL10GetVarSizeP4PVal197($10)|0); //@line 69 "../hsp3/hspvar_label.cpp"
 $size = $11; //@line 69 "../hsp3/hspvar_label.cpp"
 $12 = $0; //@line 70 "../hsp3/hspvar_label.cpp"
 $13 = (($12) + 2|0); //@line 70 "../hsp3/hspvar_label.cpp"
 HEAP16[$13>>1] = 1; //@line 70 "../hsp3/hspvar_label.cpp"
 $14 = $size; //@line 71 "../hsp3/hspvar_label.cpp"
 $15 = (__Z7sbAlloci($14)|0); //@line 71 "../hsp3/hspvar_label.cpp"
 $pt = $15; //@line 71 "../hsp3/hspvar_label.cpp"
 $16 = $pt; //@line 72 "../hsp3/hspvar_label.cpp"
 $fv = $16; //@line 72 "../hsp3/hspvar_label.cpp"
 $i = 0; //@line 73 "../hsp3/hspvar_label.cpp"
 while(1) {
  $17 = $i; //@line 73 "../hsp3/hspvar_label.cpp"
  $18 = $size; //@line 73 "../hsp3/hspvar_label.cpp"
  $19 = (($18>>>0) / 4)&-1; //@line 73 "../hsp3/hspvar_label.cpp"
  $20 = ($17|0)<($19|0); //@line 73 "../hsp3/hspvar_label.cpp"
  if (!($20)) {
   break;
  }
  $21 = $i; //@line 73 "../hsp3/hspvar_label.cpp"
  $22 = $fv; //@line 73 "../hsp3/hspvar_label.cpp"
  $23 = (($22) + ($21<<2)|0); //@line 73 "../hsp3/hspvar_label.cpp"
  HEAP32[$23>>2] = 0; //@line 73 "../hsp3/hspvar_label.cpp"
  $24 = $i; //@line 73 "../hsp3/hspvar_label.cpp"
  $25 = (($24) + 1)|0; //@line 73 "../hsp3/hspvar_label.cpp"
  $i = $25; //@line 73 "../hsp3/hspvar_label.cpp"
 }
 $26 = $1; //@line 74 "../hsp3/hspvar_label.cpp"
 $27 = ($26|0)!=(0|0); //@line 74 "../hsp3/hspvar_label.cpp"
 if (!($27)) {
  $38 = $pt; //@line 78 "../hsp3/hspvar_label.cpp"
  $39 = $0; //@line 78 "../hsp3/hspvar_label.cpp"
  $40 = (($39) + 28|0); //@line 78 "../hsp3/hspvar_label.cpp"
  HEAP32[$40>>2] = $38; //@line 78 "../hsp3/hspvar_label.cpp"
  $41 = $size; //@line 79 "../hsp3/hspvar_label.cpp"
  $42 = $0; //@line 79 "../hsp3/hspvar_label.cpp"
  $43 = (($42) + 24|0); //@line 79 "../hsp3/hspvar_label.cpp"
  HEAP32[$43>>2] = $41; //@line 79 "../hsp3/hspvar_label.cpp"
  STACKTOP = sp;return; //@line 80 "../hsp3/hspvar_label.cpp"
 }
 $28 = $pt; //@line 75 "../hsp3/hspvar_label.cpp"
 $29 = $0; //@line 75 "../hsp3/hspvar_label.cpp"
 $30 = (($29) + 28|0); //@line 75 "../hsp3/hspvar_label.cpp"
 $31 = HEAP32[$30>>2]|0; //@line 75 "../hsp3/hspvar_label.cpp"
 $32 = $0; //@line 75 "../hsp3/hspvar_label.cpp"
 $33 = (($32) + 24|0); //@line 75 "../hsp3/hspvar_label.cpp"
 $34 = HEAP32[$33>>2]|0; //@line 75 "../hsp3/hspvar_label.cpp"
 _memcpy(($28|0),($31|0),($34|0))|0; //@line 75 "../hsp3/hspvar_label.cpp"
 $35 = $0; //@line 76 "../hsp3/hspvar_label.cpp"
 $36 = (($35) + 28|0); //@line 76 "../hsp3/hspvar_label.cpp"
 $37 = HEAP32[$36>>2]|0; //@line 76 "../hsp3/hspvar_label.cpp"
 __Z6sbFreePv($37); //@line 76 "../hsp3/hspvar_label.cpp"
 $38 = $pt; //@line 78 "../hsp3/hspvar_label.cpp"
 $39 = $0; //@line 78 "../hsp3/hspvar_label.cpp"
 $40 = (($39) + 28|0); //@line 78 "../hsp3/hspvar_label.cpp"
 HEAP32[$40>>2] = $38; //@line 78 "../hsp3/hspvar_label.cpp"
 $41 = $size; //@line 79 "../hsp3/hspvar_label.cpp"
 $42 = $0; //@line 79 "../hsp3/hspvar_label.cpp"
 $43 = (($42) + 24|0); //@line 79 "../hsp3/hspvar_label.cpp"
 HEAP32[$43>>2] = $41; //@line 79 "../hsp3/hspvar_label.cpp"
 STACKTOP = sp;return; //@line 80 "../hsp3/hspvar_label.cpp"
}
function __ZL16HspVarLabel_FreeP4PVal($pval) {
 $pval = $pval|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $pval;
 $1 = $0; //@line 51 "../hsp3/hspvar_label.cpp"
 $2 = (($1) + 2|0); //@line 51 "../hsp3/hspvar_label.cpp"
 $3 = HEAP16[$2>>1]|0; //@line 51 "../hsp3/hspvar_label.cpp"
 $4 = $3 << 16 >> 16; //@line 51 "../hsp3/hspvar_label.cpp"
 $5 = ($4|0)==(1); //@line 51 "../hsp3/hspvar_label.cpp"
 if ($5) {
  $6 = $0; //@line 51 "../hsp3/hspvar_label.cpp"
  $7 = (($6) + 28|0); //@line 51 "../hsp3/hspvar_label.cpp"
  $8 = HEAP32[$7>>2]|0; //@line 51 "../hsp3/hspvar_label.cpp"
  __Z6sbFreePv($8); //@line 51 "../hsp3/hspvar_label.cpp"
 }
 $9 = $0; //@line 52 "../hsp3/hspvar_label.cpp"
 $10 = (($9) + 28|0); //@line 52 "../hsp3/hspvar_label.cpp"
 HEAP32[$10>>2] = 0; //@line 52 "../hsp3/hspvar_label.cpp"
 $11 = $0; //@line 53 "../hsp3/hspvar_label.cpp"
 $12 = (($11) + 2|0); //@line 53 "../hsp3/hspvar_label.cpp"
 HEAP16[$12>>1] = -1; //@line 53 "../hsp3/hspvar_label.cpp"
 STACKTOP = sp;return; //@line 54 "../hsp3/hspvar_label.cpp"
}
function __ZL10GetVarSizeP4PVal197($pval) {
 $pval = $pval|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $pval;
 $1 = $0; //@line 38 "../hsp3/hspvar_label.cpp"
 $2 = (($1) + 4|0); //@line 38 "../hsp3/hspvar_label.cpp"
 $3 = (($2) + 4|0); //@line 38 "../hsp3/hspvar_label.cpp"
 $4 = HEAP32[$3>>2]|0; //@line 38 "../hsp3/hspvar_label.cpp"
 $size = $4; //@line 38 "../hsp3/hspvar_label.cpp"
 $5 = $0; //@line 39 "../hsp3/hspvar_label.cpp"
 $6 = (($5) + 4|0); //@line 39 "../hsp3/hspvar_label.cpp"
 $7 = (($6) + 8|0); //@line 39 "../hsp3/hspvar_label.cpp"
 $8 = HEAP32[$7>>2]|0; //@line 39 "../hsp3/hspvar_label.cpp"
 $9 = ($8|0)!=(0); //@line 39 "../hsp3/hspvar_label.cpp"
 if ($9) {
  $10 = $0; //@line 39 "../hsp3/hspvar_label.cpp"
  $11 = (($10) + 4|0); //@line 39 "../hsp3/hspvar_label.cpp"
  $12 = (($11) + 8|0); //@line 39 "../hsp3/hspvar_label.cpp"
  $13 = HEAP32[$12>>2]|0; //@line 39 "../hsp3/hspvar_label.cpp"
  $14 = $size; //@line 39 "../hsp3/hspvar_label.cpp"
  $15 = Math_imul($14, $13)|0; //@line 39 "../hsp3/hspvar_label.cpp"
  $size = $15; //@line 39 "../hsp3/hspvar_label.cpp"
 }
 $16 = $0; //@line 40 "../hsp3/hspvar_label.cpp"
 $17 = (($16) + 4|0); //@line 40 "../hsp3/hspvar_label.cpp"
 $18 = (($17) + 12|0); //@line 40 "../hsp3/hspvar_label.cpp"
 $19 = HEAP32[$18>>2]|0; //@line 40 "../hsp3/hspvar_label.cpp"
 $20 = ($19|0)!=(0); //@line 40 "../hsp3/hspvar_label.cpp"
 if ($20) {
  $21 = $0; //@line 40 "../hsp3/hspvar_label.cpp"
  $22 = (($21) + 4|0); //@line 40 "../hsp3/hspvar_label.cpp"
  $23 = (($22) + 12|0); //@line 40 "../hsp3/hspvar_label.cpp"
  $24 = HEAP32[$23>>2]|0; //@line 40 "../hsp3/hspvar_label.cpp"
  $25 = $size; //@line 40 "../hsp3/hspvar_label.cpp"
  $26 = Math_imul($25, $24)|0; //@line 40 "../hsp3/hspvar_label.cpp"
  $size = $26; //@line 40 "../hsp3/hspvar_label.cpp"
 }
 $27 = $0; //@line 41 "../hsp3/hspvar_label.cpp"
 $28 = (($27) + 4|0); //@line 41 "../hsp3/hspvar_label.cpp"
 $29 = (($28) + 16|0); //@line 41 "../hsp3/hspvar_label.cpp"
 $30 = HEAP32[$29>>2]|0; //@line 41 "../hsp3/hspvar_label.cpp"
 $31 = ($30|0)!=(0); //@line 41 "../hsp3/hspvar_label.cpp"
 if (!($31)) {
  $38 = $size; //@line 42 "../hsp3/hspvar_label.cpp"
  $39 = $38<<2; //@line 42 "../hsp3/hspvar_label.cpp"
  $size = $39; //@line 42 "../hsp3/hspvar_label.cpp"
  $40 = $size; //@line 43 "../hsp3/hspvar_label.cpp"
  STACKTOP = sp;return ($40|0); //@line 43 "../hsp3/hspvar_label.cpp"
 }
 $32 = $0; //@line 41 "../hsp3/hspvar_label.cpp"
 $33 = (($32) + 4|0); //@line 41 "../hsp3/hspvar_label.cpp"
 $34 = (($33) + 16|0); //@line 41 "../hsp3/hspvar_label.cpp"
 $35 = HEAP32[$34>>2]|0; //@line 41 "../hsp3/hspvar_label.cpp"
 $36 = $size; //@line 41 "../hsp3/hspvar_label.cpp"
 $37 = Math_imul($36, $35)|0; //@line 41 "../hsp3/hspvar_label.cpp"
 $size = $37; //@line 41 "../hsp3/hspvar_label.cpp"
 $38 = $size; //@line 42 "../hsp3/hspvar_label.cpp"
 $39 = $38<<2; //@line 42 "../hsp3/hspvar_label.cpp"
 $size = $39; //@line 42 "../hsp3/hspvar_label.cpp"
 $40 = $size; //@line 43 "../hsp3/hspvar_label.cpp"
 STACKTOP = sp;return ($40|0); //@line 43 "../hsp3/hspvar_label.cpp"
}
function __Z14HspVarStr_InitP10HspVarProc($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $p;
 $1 = $0; //@line 250 "../hsp3/hspvar_str.cpp"
 HEAP32[3528>>2] = $1; //@line 250 "../hsp3/hspvar_str.cpp"
 $2 = $0; //@line 252 "../hsp3/hspvar_str.cpp"
 $3 = (($2) + 72|0); //@line 252 "../hsp3/hspvar_str.cpp"
 HEAP32[$3>>2] = 154; //@line 252 "../hsp3/hspvar_str.cpp"
 $4 = $0; //@line 253 "../hsp3/hspvar_str.cpp"
 $5 = (($4) + 20|0); //@line 253 "../hsp3/hspvar_str.cpp"
 HEAP32[$5>>2] = 155; //@line 253 "../hsp3/hspvar_str.cpp"
 $6 = $0; //@line 254 "../hsp3/hspvar_str.cpp"
 $7 = (($6) + 28|0); //@line 254 "../hsp3/hspvar_str.cpp"
 HEAP32[$7>>2] = 156; //@line 254 "../hsp3/hspvar_str.cpp"
 $8 = $0; //@line 256 "../hsp3/hspvar_str.cpp"
 $9 = (($8) + 56|0); //@line 256 "../hsp3/hspvar_str.cpp"
 HEAP32[$9>>2] = 157; //@line 256 "../hsp3/hspvar_str.cpp"
 $10 = $0; //@line 257 "../hsp3/hspvar_str.cpp"
 $11 = (($10) + 64|0); //@line 257 "../hsp3/hspvar_str.cpp"
 HEAP32[$11>>2] = 158; //@line 257 "../hsp3/hspvar_str.cpp"
 $12 = $0; //@line 258 "../hsp3/hspvar_str.cpp"
 $13 = (($12) + 68|0); //@line 258 "../hsp3/hspvar_str.cpp"
 HEAP32[$13>>2] = 159; //@line 258 "../hsp3/hspvar_str.cpp"
 $14 = $0; //@line 261 "../hsp3/hspvar_str.cpp"
 $15 = (($14) + 48|0); //@line 261 "../hsp3/hspvar_str.cpp"
 HEAP32[$15>>2] = 160; //@line 261 "../hsp3/hspvar_str.cpp"
 $16 = $0; //@line 262 "../hsp3/hspvar_str.cpp"
 $17 = (($16) + 52|0); //@line 262 "../hsp3/hspvar_str.cpp"
 HEAP32[$17>>2] = 161; //@line 262 "../hsp3/hspvar_str.cpp"
 $18 = $0; //@line 264 "../hsp3/hspvar_str.cpp"
 $19 = (($18) + 76|0); //@line 264 "../hsp3/hspvar_str.cpp"
 HEAP32[$19>>2] = 162; //@line 264 "../hsp3/hspvar_str.cpp"
 $20 = $0; //@line 274 "../hsp3/hspvar_str.cpp"
 $21 = (($20) + 108|0); //@line 274 "../hsp3/hspvar_str.cpp"
 HEAP32[$21>>2] = 163; //@line 274 "../hsp3/hspvar_str.cpp"
 $22 = $0; //@line 275 "../hsp3/hspvar_str.cpp"
 $23 = (($22) + 112|0); //@line 275 "../hsp3/hspvar_str.cpp"
 HEAP32[$23>>2] = 164; //@line 275 "../hsp3/hspvar_str.cpp"
 $24 = $0; //@line 284 "../hsp3/hspvar_str.cpp"
 $25 = (($24) + 12|0); //@line 284 "../hsp3/hspvar_str.cpp"
 HEAP32[$25>>2] = 3536; //@line 284 "../hsp3/hspvar_str.cpp"
 $26 = $0; //@line 285 "../hsp3/hspvar_str.cpp"
 $27 = (($26) + 4|0); //@line 285 "../hsp3/hspvar_str.cpp"
 HEAP16[$27>>1] = 1; //@line 285 "../hsp3/hspvar_str.cpp"
 $28 = $0; //@line 286 "../hsp3/hspvar_str.cpp"
 $29 = (($28) + 6|0); //@line 286 "../hsp3/hspvar_str.cpp"
 HEAP16[$29>>1] = 10; //@line 286 "../hsp3/hspvar_str.cpp"
 $30 = $0; //@line 288 "../hsp3/hspvar_str.cpp"
 $31 = (($30) + 8|0); //@line 288 "../hsp3/hspvar_str.cpp"
 HEAP16[$31>>1] = -1; //@line 288 "../hsp3/hspvar_str.cpp"
 STACKTOP = sp;return; //@line 289 "../hsp3/hspvar_str.cpp"
}
function __ZL13HspVarStr_SetP4PValPPvPKv($pval,$pdat,$in) {
 $pval = $pval|0;
 $pdat = $pdat|0;
 $in = $in|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $pval;
 $1 = $pdat;
 $2 = $in;
 $3 = $0; //@line 178 "../hsp3/hspvar_str.cpp"
 $4 = (($3) + 2|0); //@line 178 "../hsp3/hspvar_str.cpp"
 $5 = HEAP16[$4>>1]|0; //@line 178 "../hsp3/hspvar_str.cpp"
 $6 = $5 << 16 >> 16; //@line 178 "../hsp3/hspvar_str.cpp"
 $7 = ($6|0)==(2); //@line 178 "../hsp3/hspvar_str.cpp"
 if ($7) {
  $8 = $1; //@line 179 "../hsp3/hspvar_str.cpp"
  $9 = $2; //@line 179 "../hsp3/hspvar_str.cpp"
  $10 = $0; //@line 179 "../hsp3/hspvar_str.cpp"
  $11 = (($10) + 24|0); //@line 179 "../hsp3/hspvar_str.cpp"
  $12 = HEAP32[$11>>2]|0; //@line 179 "../hsp3/hspvar_str.cpp"
  (_strncpy(($8|0),($9|0),($12|0))|0); //@line 179 "../hsp3/hspvar_str.cpp"
  STACKTOP = sp;return; //@line 183 "../hsp3/hspvar_str.cpp"
 } else {
  $13 = $1; //@line 182 "../hsp3/hspvar_str.cpp"
  $14 = (__Z11sbGetOptionPc($13)|0); //@line 182 "../hsp3/hspvar_str.cpp"
  $pp = $14; //@line 182 "../hsp3/hspvar_str.cpp"
  $15 = $pp; //@line 183 "../hsp3/hspvar_str.cpp"
  $16 = $2; //@line 183 "../hsp3/hspvar_str.cpp"
  __Z9sbStrCopyPPcS_($15,$16); //@line 183 "../hsp3/hspvar_str.cpp"
  STACKTOP = sp;return; //@line 183 "../hsp3/hspvar_str.cpp"
 }
}
function __ZL13HspVarStr_CnvPKvi($buffer,$flag) {
 $buffer = $buffer|0;
 $flag = $flag|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $buffer;
 $2 = $flag;
 $3 = $2; //@line 52 "../hsp3/hspvar_str.cpp"
 if ((($3|0) == 2)) {
  $9 = $1; //@line 69 "../hsp3/hspvar_str.cpp"
  $0 = $9; //@line 69 "../hsp3/hspvar_str.cpp"
  $10 = $0; //@line 70 "../hsp3/hspvar_str.cpp"
  STACKTOP = sp;return ($10|0); //@line 70 "../hsp3/hspvar_str.cpp"
 } else if ((($3|0) == 3)) {
  $6 = $1; //@line 64 "../hsp3/hspvar_str.cpp"
  $7 = +HEAPF64[$6>>3]; //@line 64 "../hsp3/hspvar_str.cpp"
  HEAPF64[tempDoublePtr>>3]=$7;HEAP32[$vararg_buffer1>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer1+4>>2]=HEAP32[tempDoublePtr+4>>2]; //@line 64 "../hsp3/hspvar_str.cpp"
  (_sprintf(3544,3952,$vararg_buffer1)|0); //@line 64 "../hsp3/hspvar_str.cpp"
  $0 = 3544; //@line 65 "../hsp3/hspvar_str.cpp"
  $10 = $0; //@line 70 "../hsp3/hspvar_str.cpp"
  STACKTOP = sp;return ($10|0); //@line 70 "../hsp3/hspvar_str.cpp"
 } else if ((($3|0) == 4)) {
  $4 = $1; //@line 57 "../hsp3/hspvar_str.cpp"
  $5 = HEAP32[$4>>2]|0; //@line 57 "../hsp3/hspvar_str.cpp"
  HEAP32[$vararg_buffer>>2] = $5; //@line 57 "../hsp3/hspvar_str.cpp"
  (_sprintf(3544,3944,$vararg_buffer)|0); //@line 57 "../hsp3/hspvar_str.cpp"
  $0 = 3544; //@line 59 "../hsp3/hspvar_str.cpp"
  $10 = $0; //@line 70 "../hsp3/hspvar_str.cpp"
  STACKTOP = sp;return ($10|0); //@line 70 "../hsp3/hspvar_str.cpp"
 } else {
  $8 = (___cxa_allocate_exception(4)|0); //@line 67 "../hsp3/hspvar_str.cpp"
  HEAP32[$8>>2] = 6; //@line 67 "../hsp3/hspvar_str.cpp"
  ___cxa_throw(($8|0),(624|0),(0|0)); //@line 67 "../hsp3/hspvar_str.cpp"
  // unreachable; //@line 67 "../hsp3/hspvar_str.cpp"
 }
 return 0|0;
}
function __ZL16HspVarStr_GetPtrP4PVal($pval) {
 $pval = $pval|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $pp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $pval;
 $1 = $0; //@line 42 "../hsp3/hspvar_str.cpp"
 $2 = $0; //@line 42 "../hsp3/hspvar_str.cpp"
 $3 = (($2) + 40|0); //@line 42 "../hsp3/hspvar_str.cpp"
 $4 = HEAP32[$3>>2]|0; //@line 42 "../hsp3/hspvar_str.cpp"
 $5 = (__ZL13GetFlexBufPtrP4PVali($1,$4)|0); //@line 42 "../hsp3/hspvar_str.cpp"
 $pp = $5; //@line 42 "../hsp3/hspvar_str.cpp"
 $6 = $pp; //@line 43 "../hsp3/hspvar_str.cpp"
 $7 = HEAP32[$6>>2]|0; //@line 43 "../hsp3/hspvar_str.cpp"
 STACKTOP = sp;return ($7|0); //@line 43 "../hsp3/hspvar_str.cpp"
}
function __ZL17HspVarStr_GetSizePKPv($pval) {
 $pval = $pval|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $pval;
 $1 = $0; //@line 171 "../hsp3/hspvar_str.cpp"
 $2 = (_strlen(($1|0))|0); //@line 171 "../hsp3/hspvar_str.cpp"
 $3 = (($2) + 1)|0; //@line 171 "../hsp3/hspvar_str.cpp"
 STACKTOP = sp;return ($3|0); //@line 171 "../hsp3/hspvar_str.cpp"
}
function __ZL12GetBlockSizeP4PValPPvPi204($pval,$pdat,$size) {
 $pval = $pval|0;
 $pdat = $pdat|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $inf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = $pval;
 $2 = $pdat;
 $3 = $size;
 $4 = $1; //@line 228 "../hsp3/hspvar_str.cpp"
 $5 = (($4) + 2|0); //@line 228 "../hsp3/hspvar_str.cpp"
 $6 = HEAP16[$5>>1]|0; //@line 228 "../hsp3/hspvar_str.cpp"
 $7 = $6 << 16 >> 16; //@line 228 "../hsp3/hspvar_str.cpp"
 $8 = ($7|0)==(2); //@line 228 "../hsp3/hspvar_str.cpp"
 if ($8) {
  $9 = $1; //@line 229 "../hsp3/hspvar_str.cpp"
  $10 = (($9) + 24|0); //@line 229 "../hsp3/hspvar_str.cpp"
  $11 = HEAP32[$10>>2]|0; //@line 229 "../hsp3/hspvar_str.cpp"
  $12 = $3; //@line 229 "../hsp3/hspvar_str.cpp"
  HEAP32[$12>>2] = $11; //@line 229 "../hsp3/hspvar_str.cpp"
  $13 = $2; //@line 230 "../hsp3/hspvar_str.cpp"
  $0 = $13; //@line 230 "../hsp3/hspvar_str.cpp"
  $21 = $0; //@line 235 "../hsp3/hspvar_str.cpp"
  STACKTOP = sp;return ($21|0); //@line 235 "../hsp3/hspvar_str.cpp"
 } else {
  $14 = $2; //@line 232 "../hsp3/hspvar_str.cpp"
  $15 = (__Z11sbGetSTRINFPc($14)|0); //@line 232 "../hsp3/hspvar_str.cpp"
  $inf = $15; //@line 232 "../hsp3/hspvar_str.cpp"
  $16 = $inf; //@line 233 "../hsp3/hspvar_str.cpp"
  $17 = (($16) + 8|0); //@line 233 "../hsp3/hspvar_str.cpp"
  $18 = HEAP32[$17>>2]|0; //@line 233 "../hsp3/hspvar_str.cpp"
  $19 = $3; //@line 233 "../hsp3/hspvar_str.cpp"
  HEAP32[$19>>2] = $18; //@line 233 "../hsp3/hspvar_str.cpp"
  $20 = $2; //@line 234 "../hsp3/hspvar_str.cpp"
  $0 = $20; //@line 234 "../hsp3/hspvar_str.cpp"
  $21 = $0; //@line 235 "../hsp3/hspvar_str.cpp"
  STACKTOP = sp;return ($21|0); //@line 235 "../hsp3/hspvar_str.cpp"
 }
 return 0|0;
}
function __ZL10AllocBlockP4PValPPvi205($pval,$pdat,$size) {
 $pval = $pval|0;
 $pdat = $pdat|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $pval;
 $1 = $pdat;
 $2 = $size;
 $3 = $0; //@line 240 "../hsp3/hspvar_str.cpp"
 $4 = (($3) + 2|0); //@line 240 "../hsp3/hspvar_str.cpp"
 $5 = HEAP16[$4>>1]|0; //@line 240 "../hsp3/hspvar_str.cpp"
 $6 = $5 << 16 >> 16; //@line 240 "../hsp3/hspvar_str.cpp"
 $7 = ($6|0)==(2); //@line 240 "../hsp3/hspvar_str.cpp"
 if ($7) {
  STACKTOP = sp;return; //@line 242 "../hsp3/hspvar_str.cpp"
 } else {
  $8 = $1; //@line 241 "../hsp3/hspvar_str.cpp"
  $9 = (__Z11sbGetOptionPc($8)|0); //@line 241 "../hsp3/hspvar_str.cpp"
  $pp = $9; //@line 241 "../hsp3/hspvar_str.cpp"
  $10 = $pp; //@line 242 "../hsp3/hspvar_str.cpp"
  $11 = HEAP32[$10>>2]|0; //@line 242 "../hsp3/hspvar_str.cpp"
  $12 = $2; //@line 242 "../hsp3/hspvar_str.cpp"
  $13 = (__Z8sbExpandPci($11,$12)|0); //@line 242 "../hsp3/hspvar_str.cpp"
  $14 = $pp; //@line 242 "../hsp3/hspvar_str.cpp"
  HEAP32[$14>>2] = $13; //@line 242 "../hsp3/hspvar_str.cpp"
  STACKTOP = sp;return; //@line 242 "../hsp3/hspvar_str.cpp"
 }
}
function __ZL15HspVarStr_AllocP4PValPKS_($pval,$pval2) {
 $pval = $pval|0;
 $pval2 = $pval2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $bsize = 0, $i = 0, $i2 = 0, $oldvar = 0, $pp = 0, $size = 0;
 var dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $oldvar = sp + 24|0;
 $0 = $pval;
 $1 = $pval2;
 $2 = $0; //@line 127 "../hsp3/hspvar_str.cpp"
 $3 = (($2) + 4|0); //@line 127 "../hsp3/hspvar_str.cpp"
 $4 = (($3) + 4|0); //@line 127 "../hsp3/hspvar_str.cpp"
 $5 = HEAP32[$4>>2]|0; //@line 127 "../hsp3/hspvar_str.cpp"
 $6 = ($5|0)<(1); //@line 127 "../hsp3/hspvar_str.cpp"
 if ($6) {
  $7 = $0; //@line 127 "../hsp3/hspvar_str.cpp"
  $8 = (($7) + 4|0); //@line 127 "../hsp3/hspvar_str.cpp"
  $9 = (($8) + 4|0); //@line 127 "../hsp3/hspvar_str.cpp"
  HEAP32[$9>>2] = 1; //@line 127 "../hsp3/hspvar_str.cpp"
 }
 $10 = $1; //@line 128 "../hsp3/hspvar_str.cpp"
 $11 = ($10|0)!=(0|0); //@line 128 "../hsp3/hspvar_str.cpp"
 if ($11) {
  $12 = $1; //@line 128 "../hsp3/hspvar_str.cpp"
  dest=$oldvar+0|0; src=$12+0|0; stop=dest+48|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0)); //@line 128 "../hsp3/hspvar_str.cpp"
 }
 $13 = $0; //@line 130 "../hsp3/hspvar_str.cpp"
 $14 = (__ZL10GetVarSizeP4PVal206($13)|0); //@line 130 "../hsp3/hspvar_str.cpp"
 $size = $14; //@line 130 "../hsp3/hspvar_str.cpp"
 $15 = $0; //@line 131 "../hsp3/hspvar_str.cpp"
 $16 = (($15) + 2|0); //@line 131 "../hsp3/hspvar_str.cpp"
 HEAP16[$16>>1] = 1; //@line 131 "../hsp3/hspvar_str.cpp"
 $17 = $size; //@line 132 "../hsp3/hspvar_str.cpp"
 $18 = (_calloc($17,1)|0); //@line 132 "../hsp3/hspvar_str.cpp"
 $19 = $0; //@line 132 "../hsp3/hspvar_str.cpp"
 $20 = (($19) + 32|0); //@line 132 "../hsp3/hspvar_str.cpp"
 HEAP32[$20>>2] = $18; //@line 132 "../hsp3/hspvar_str.cpp"
 $21 = $0; //@line 133 "../hsp3/hspvar_str.cpp"
 $22 = (($21) + 32|0); //@line 133 "../hsp3/hspvar_str.cpp"
 $23 = HEAP32[$22>>2]|0; //@line 133 "../hsp3/hspvar_str.cpp"
 $24 = ($23|0)==(0|0); //@line 133 "../hsp3/hspvar_str.cpp"
 if ($24) {
  $25 = (___cxa_allocate_exception(4)|0); //@line 133 "../hsp3/hspvar_str.cpp"
  HEAP32[$25>>2] = 26; //@line 133 "../hsp3/hspvar_str.cpp"
  ___cxa_throw(($25|0),(624|0),(0|0)); //@line 133 "../hsp3/hspvar_str.cpp"
  // unreachable; //@line 133 "../hsp3/hspvar_str.cpp"
 }
 $26 = $1; //@line 135 "../hsp3/hspvar_str.cpp"
 $27 = ($26|0)==(0|0); //@line 135 "../hsp3/hspvar_str.cpp"
 if ($27) {
  $28 = $0; //@line 136 "../hsp3/hspvar_str.cpp"
  $29 = (($28) + 4|0); //@line 136 "../hsp3/hspvar_str.cpp"
  $30 = HEAP32[$29>>2]|0; //@line 136 "../hsp3/hspvar_str.cpp"
  $bsize = $30; //@line 136 "../hsp3/hspvar_str.cpp"
  $31 = $bsize; //@line 136 "../hsp3/hspvar_str.cpp"
  $32 = ($31|0)<(64); //@line 136 "../hsp3/hspvar_str.cpp"
  if ($32) {
   $bsize = 64; //@line 136 "../hsp3/hspvar_str.cpp"
  }
  $i = 0; //@line 137 "../hsp3/hspvar_str.cpp"
  while(1) {
   $33 = $i; //@line 137 "../hsp3/hspvar_str.cpp"
   $34 = $size; //@line 137 "../hsp3/hspvar_str.cpp"
   $35 = (($34>>>0) / 4)&-1; //@line 137 "../hsp3/hspvar_str.cpp"
   $36 = ($33|0)<($35|0); //@line 137 "../hsp3/hspvar_str.cpp"
   if (!($36)) {
    break;
   }
   $37 = $0; //@line 138 "../hsp3/hspvar_str.cpp"
   $38 = $i; //@line 138 "../hsp3/hspvar_str.cpp"
   $39 = (__ZL13GetFlexBufPtrP4PVali($37,$38)|0); //@line 138 "../hsp3/hspvar_str.cpp"
   $pp = $39; //@line 138 "../hsp3/hspvar_str.cpp"
   $40 = $bsize; //@line 139 "../hsp3/hspvar_str.cpp"
   $41 = (__Z12sbAllocCleari($40)|0); //@line 139 "../hsp3/hspvar_str.cpp"
   $42 = $pp; //@line 139 "../hsp3/hspvar_str.cpp"
   HEAP32[$42>>2] = $41; //@line 139 "../hsp3/hspvar_str.cpp"
   $43 = $pp; //@line 140 "../hsp3/hspvar_str.cpp"
   $44 = HEAP32[$43>>2]|0; //@line 140 "../hsp3/hspvar_str.cpp"
   $45 = $pp; //@line 140 "../hsp3/hspvar_str.cpp"
   __Z11sbSetOptionPcPv($44,$45); //@line 140 "../hsp3/hspvar_str.cpp"
   $46 = $i; //@line 137 "../hsp3/hspvar_str.cpp"
   $47 = (($46) + 1)|0; //@line 137 "../hsp3/hspvar_str.cpp"
   $i = $47; //@line 137 "../hsp3/hspvar_str.cpp"
  }
  STACKTOP = sp;return; //@line 155 "../hsp3/hspvar_str.cpp"
 }
 $48 = (($oldvar) + 24|0); //@line 145 "../hsp3/hspvar_str.cpp"
 $49 = HEAP32[$48>>2]|0; //@line 145 "../hsp3/hspvar_str.cpp"
 $50 = (($49>>>0) / 4)&-1; //@line 145 "../hsp3/hspvar_str.cpp"
 $i2 = $50; //@line 145 "../hsp3/hspvar_str.cpp"
 $i = 0; //@line 146 "../hsp3/hspvar_str.cpp"
 while(1) {
  $51 = $i; //@line 146 "../hsp3/hspvar_str.cpp"
  $52 = $size; //@line 146 "../hsp3/hspvar_str.cpp"
  $53 = (($52>>>0) / 4)&-1; //@line 146 "../hsp3/hspvar_str.cpp"
  $54 = ($51|0)<($53|0); //@line 146 "../hsp3/hspvar_str.cpp"
  if (!($54)) {
   break;
  }
  $55 = $0; //@line 147 "../hsp3/hspvar_str.cpp"
  $56 = $i; //@line 147 "../hsp3/hspvar_str.cpp"
  $57 = (__ZL13GetFlexBufPtrP4PVali($55,$56)|0); //@line 147 "../hsp3/hspvar_str.cpp"
  $pp = $57; //@line 147 "../hsp3/hspvar_str.cpp"
  $58 = $i; //@line 148 "../hsp3/hspvar_str.cpp"
  $59 = $i2; //@line 148 "../hsp3/hspvar_str.cpp"
  $60 = ($58|0)>=($59|0); //@line 148 "../hsp3/hspvar_str.cpp"
  if ($60) {
   $61 = (__Z12sbAllocCleari(64)|0); //@line 149 "../hsp3/hspvar_str.cpp"
   $62 = $pp; //@line 149 "../hsp3/hspvar_str.cpp"
   HEAP32[$62>>2] = $61; //@line 149 "../hsp3/hspvar_str.cpp"
  } else {
   $63 = $i; //@line 151 "../hsp3/hspvar_str.cpp"
   $64 = (__ZL13GetFlexBufPtrP4PVali($oldvar,$63)|0); //@line 151 "../hsp3/hspvar_str.cpp"
   $65 = HEAP32[$64>>2]|0; //@line 151 "../hsp3/hspvar_str.cpp"
   $66 = $pp; //@line 151 "../hsp3/hspvar_str.cpp"
   HEAP32[$66>>2] = $65; //@line 151 "../hsp3/hspvar_str.cpp"
  }
  $67 = $pp; //@line 153 "../hsp3/hspvar_str.cpp"
  $68 = HEAP32[$67>>2]|0; //@line 153 "../hsp3/hspvar_str.cpp"
  $69 = $pp; //@line 153 "../hsp3/hspvar_str.cpp"
  __Z11sbSetOptionPcPv($68,$69); //@line 153 "../hsp3/hspvar_str.cpp"
  $70 = $i; //@line 146 "../hsp3/hspvar_str.cpp"
  $71 = (($70) + 1)|0; //@line 146 "../hsp3/hspvar_str.cpp"
  $i = $71; //@line 146 "../hsp3/hspvar_str.cpp"
 }
 $72 = (($oldvar) + 32|0); //@line 155 "../hsp3/hspvar_str.cpp"
 $73 = HEAP32[$72>>2]|0; //@line 155 "../hsp3/hspvar_str.cpp"
 _free($73); //@line 155 "../hsp3/hspvar_str.cpp"
 STACKTOP = sp;return; //@line 155 "../hsp3/hspvar_str.cpp"
}
function __ZL14HspVarStr_FreeP4PVal($pval) {
 $pval = $pval|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $pp = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $pval;
 $1 = $0; //@line 105 "../hsp3/hspvar_str.cpp"
 $2 = (($1) + 2|0); //@line 105 "../hsp3/hspvar_str.cpp"
 $3 = HEAP16[$2>>1]|0; //@line 105 "../hsp3/hspvar_str.cpp"
 $4 = $3 << 16 >> 16; //@line 105 "../hsp3/hspvar_str.cpp"
 $5 = ($4|0)==(1); //@line 105 "../hsp3/hspvar_str.cpp"
 if (!($5)) {
  $22 = $0; //@line 113 "../hsp3/hspvar_str.cpp"
  $23 = (($22) + 2|0); //@line 113 "../hsp3/hspvar_str.cpp"
  HEAP16[$23>>1] = -1; //@line 113 "../hsp3/hspvar_str.cpp"
  STACKTOP = sp;return; //@line 114 "../hsp3/hspvar_str.cpp"
 }
 $6 = $0; //@line 106 "../hsp3/hspvar_str.cpp"
 $7 = (__ZL10GetVarSizeP4PVal206($6)|0); //@line 106 "../hsp3/hspvar_str.cpp"
 $size = $7; //@line 106 "../hsp3/hspvar_str.cpp"
 $i = 0; //@line 107 "../hsp3/hspvar_str.cpp"
 while(1) {
  $8 = $i; //@line 107 "../hsp3/hspvar_str.cpp"
  $9 = $size; //@line 107 "../hsp3/hspvar_str.cpp"
  $10 = (($9>>>0) / 4)&-1; //@line 107 "../hsp3/hspvar_str.cpp"
  $11 = ($8|0)<($10|0); //@line 107 "../hsp3/hspvar_str.cpp"
  if (!($11)) {
   break;
  }
  $12 = $0; //@line 108 "../hsp3/hspvar_str.cpp"
  $13 = $i; //@line 108 "../hsp3/hspvar_str.cpp"
  $14 = (__ZL13GetFlexBufPtrP4PVali($12,$13)|0); //@line 108 "../hsp3/hspvar_str.cpp"
  $pp = $14; //@line 108 "../hsp3/hspvar_str.cpp"
  $15 = $pp; //@line 109 "../hsp3/hspvar_str.cpp"
  $16 = HEAP32[$15>>2]|0; //@line 109 "../hsp3/hspvar_str.cpp"
  __Z6sbFreePv($16); //@line 109 "../hsp3/hspvar_str.cpp"
  $17 = $i; //@line 107 "../hsp3/hspvar_str.cpp"
  $18 = (($17) + 1)|0; //@line 107 "../hsp3/hspvar_str.cpp"
  $i = $18; //@line 107 "../hsp3/hspvar_str.cpp"
 }
 $19 = $0; //@line 111 "../hsp3/hspvar_str.cpp"
 $20 = (($19) + 32|0); //@line 111 "../hsp3/hspvar_str.cpp"
 $21 = HEAP32[$20>>2]|0; //@line 111 "../hsp3/hspvar_str.cpp"
 _free($21); //@line 111 "../hsp3/hspvar_str.cpp"
 $22 = $0; //@line 113 "../hsp3/hspvar_str.cpp"
 $23 = (($22) + 2|0); //@line 113 "../hsp3/hspvar_str.cpp"
 HEAP16[$23>>1] = -1; //@line 113 "../hsp3/hspvar_str.cpp"
 STACKTOP = sp;return; //@line 114 "../hsp3/hspvar_str.cpp"
}
function __ZL14HspVarStr_AddIPPvPKv($pval,$val) {
 $pval = $pval|0;
 $val = $val|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $pp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $pval;
 $1 = $val;
 $2 = $0; //@line 191 "../hsp3/hspvar_str.cpp"
 $3 = (__Z11sbGetOptionPc($2)|0); //@line 191 "../hsp3/hspvar_str.cpp"
 $pp = $3; //@line 191 "../hsp3/hspvar_str.cpp"
 $4 = $pp; //@line 192 "../hsp3/hspvar_str.cpp"
 $5 = $1; //@line 192 "../hsp3/hspvar_str.cpp"
 __Z8sbStrAddPPcS_($4,$5); //@line 192 "../hsp3/hspvar_str.cpp"
 $6 = HEAP32[3528>>2]|0; //@line 194 "../hsp3/hspvar_str.cpp"
 $7 = (($6) + 2|0); //@line 194 "../hsp3/hspvar_str.cpp"
 HEAP16[$7>>1] = 2; //@line 194 "../hsp3/hspvar_str.cpp"
 STACKTOP = sp;return; //@line 195 "../hsp3/hspvar_str.cpp"
}
function __ZL13HspVarStr_EqIPPvPKv($pdat,$val) {
 $pdat = $pdat|0;
 $val = $val|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $pdat;
 $1 = $val;
 $2 = $0; //@line 200 "../hsp3/hspvar_str.cpp"
 $3 = $1; //@line 200 "../hsp3/hspvar_str.cpp"
 $4 = (_strcmp($2,$3)|0); //@line 200 "../hsp3/hspvar_str.cpp"
 $5 = ($4|0)!=(0); //@line 200 "../hsp3/hspvar_str.cpp"
 if ($5) {
  $6 = $0; //@line 201 "../hsp3/hspvar_str.cpp"
  HEAP32[$6>>2] = 0; //@line 201 "../hsp3/hspvar_str.cpp"
 } else {
  $7 = $0; //@line 203 "../hsp3/hspvar_str.cpp"
  HEAP32[$7>>2] = 1; //@line 203 "../hsp3/hspvar_str.cpp"
 }
 $8 = HEAP32[3528>>2]|0; //@line 205 "../hsp3/hspvar_str.cpp"
 $9 = (($8) + 2|0); //@line 205 "../hsp3/hspvar_str.cpp"
 HEAP16[$9>>1] = 4; //@line 205 "../hsp3/hspvar_str.cpp"
 STACKTOP = sp;return; //@line 206 "../hsp3/hspvar_str.cpp"
}
function __ZL13HspVarStr_NeIPPvPKv($pdat,$val) {
 $pdat = $pdat|0;
 $val = $val|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $pdat;
 $1 = $val;
 $2 = $0; //@line 212 "../hsp3/hspvar_str.cpp"
 $3 = $1; //@line 212 "../hsp3/hspvar_str.cpp"
 $4 = (_strcmp($2,$3)|0); //@line 212 "../hsp3/hspvar_str.cpp"
 $i = $4; //@line 212 "../hsp3/hspvar_str.cpp"
 $5 = $i; //@line 213 "../hsp3/hspvar_str.cpp"
 $6 = $0; //@line 213 "../hsp3/hspvar_str.cpp"
 HEAP32[$6>>2] = $5; //@line 213 "../hsp3/hspvar_str.cpp"
 $7 = HEAP32[3528>>2]|0; //@line 214 "../hsp3/hspvar_str.cpp"
 $8 = (($7) + 2|0); //@line 214 "../hsp3/hspvar_str.cpp"
 HEAP16[$8>>1] = 4; //@line 214 "../hsp3/hspvar_str.cpp"
 STACKTOP = sp;return; //@line 215 "../hsp3/hspvar_str.cpp"
}
function __ZL10GetVarSizeP4PVal206($pval) {
 $pval = $pval|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $pval;
 $1 = $0; //@line 90 "../hsp3/hspvar_str.cpp"
 $2 = (($1) + 4|0); //@line 90 "../hsp3/hspvar_str.cpp"
 $3 = (($2) + 4|0); //@line 90 "../hsp3/hspvar_str.cpp"
 $4 = HEAP32[$3>>2]|0; //@line 90 "../hsp3/hspvar_str.cpp"
 $size = $4; //@line 90 "../hsp3/hspvar_str.cpp"
 $5 = $0; //@line 91 "../hsp3/hspvar_str.cpp"
 $6 = (($5) + 4|0); //@line 91 "../hsp3/hspvar_str.cpp"
 $7 = (($6) + 8|0); //@line 91 "../hsp3/hspvar_str.cpp"
 $8 = HEAP32[$7>>2]|0; //@line 91 "../hsp3/hspvar_str.cpp"
 $9 = ($8|0)!=(0); //@line 91 "../hsp3/hspvar_str.cpp"
 if ($9) {
  $10 = $0; //@line 91 "../hsp3/hspvar_str.cpp"
  $11 = (($10) + 4|0); //@line 91 "../hsp3/hspvar_str.cpp"
  $12 = (($11) + 8|0); //@line 91 "../hsp3/hspvar_str.cpp"
  $13 = HEAP32[$12>>2]|0; //@line 91 "../hsp3/hspvar_str.cpp"
  $14 = $size; //@line 91 "../hsp3/hspvar_str.cpp"
  $15 = Math_imul($14, $13)|0; //@line 91 "../hsp3/hspvar_str.cpp"
  $size = $15; //@line 91 "../hsp3/hspvar_str.cpp"
 }
 $16 = $0; //@line 92 "../hsp3/hspvar_str.cpp"
 $17 = (($16) + 4|0); //@line 92 "../hsp3/hspvar_str.cpp"
 $18 = (($17) + 12|0); //@line 92 "../hsp3/hspvar_str.cpp"
 $19 = HEAP32[$18>>2]|0; //@line 92 "../hsp3/hspvar_str.cpp"
 $20 = ($19|0)!=(0); //@line 92 "../hsp3/hspvar_str.cpp"
 if ($20) {
  $21 = $0; //@line 92 "../hsp3/hspvar_str.cpp"
  $22 = (($21) + 4|0); //@line 92 "../hsp3/hspvar_str.cpp"
  $23 = (($22) + 12|0); //@line 92 "../hsp3/hspvar_str.cpp"
  $24 = HEAP32[$23>>2]|0; //@line 92 "../hsp3/hspvar_str.cpp"
  $25 = $size; //@line 92 "../hsp3/hspvar_str.cpp"
  $26 = Math_imul($25, $24)|0; //@line 92 "../hsp3/hspvar_str.cpp"
  $size = $26; //@line 92 "../hsp3/hspvar_str.cpp"
 }
 $27 = $0; //@line 93 "../hsp3/hspvar_str.cpp"
 $28 = (($27) + 4|0); //@line 93 "../hsp3/hspvar_str.cpp"
 $29 = (($28) + 16|0); //@line 93 "../hsp3/hspvar_str.cpp"
 $30 = HEAP32[$29>>2]|0; //@line 93 "../hsp3/hspvar_str.cpp"
 $31 = ($30|0)!=(0); //@line 93 "../hsp3/hspvar_str.cpp"
 if (!($31)) {
  $38 = $size; //@line 94 "../hsp3/hspvar_str.cpp"
  $39 = $38<<2; //@line 94 "../hsp3/hspvar_str.cpp"
  $size = $39; //@line 94 "../hsp3/hspvar_str.cpp"
  $40 = $size; //@line 95 "../hsp3/hspvar_str.cpp"
  $41 = $0; //@line 95 "../hsp3/hspvar_str.cpp"
  $42 = (($41) + 24|0); //@line 95 "../hsp3/hspvar_str.cpp"
  HEAP32[$42>>2] = $40; //@line 95 "../hsp3/hspvar_str.cpp"
  $43 = $size; //@line 96 "../hsp3/hspvar_str.cpp"
  STACKTOP = sp;return ($43|0); //@line 96 "../hsp3/hspvar_str.cpp"
 }
 $32 = $0; //@line 93 "../hsp3/hspvar_str.cpp"
 $33 = (($32) + 4|0); //@line 93 "../hsp3/hspvar_str.cpp"
 $34 = (($33) + 16|0); //@line 93 "../hsp3/hspvar_str.cpp"
 $35 = HEAP32[$34>>2]|0; //@line 93 "../hsp3/hspvar_str.cpp"
 $36 = $size; //@line 93 "../hsp3/hspvar_str.cpp"
 $37 = Math_imul($36, $35)|0; //@line 93 "../hsp3/hspvar_str.cpp"
 $size = $37; //@line 93 "../hsp3/hspvar_str.cpp"
 $38 = $size; //@line 94 "../hsp3/hspvar_str.cpp"
 $39 = $38<<2; //@line 94 "../hsp3/hspvar_str.cpp"
 $size = $39; //@line 94 "../hsp3/hspvar_str.cpp"
 $40 = $size; //@line 95 "../hsp3/hspvar_str.cpp"
 $41 = $0; //@line 95 "../hsp3/hspvar_str.cpp"
 $42 = (($41) + 24|0); //@line 95 "../hsp3/hspvar_str.cpp"
 HEAP32[$42>>2] = $40; //@line 95 "../hsp3/hspvar_str.cpp"
 $43 = $size; //@line 96 "../hsp3/hspvar_str.cpp"
 STACKTOP = sp;return ($43|0); //@line 96 "../hsp3/hspvar_str.cpp"
}
function __ZL13GetFlexBufPtrP4PVali($pval,$num) {
 $pval = $pval|0;
 $num = $num|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $pval;
 $2 = $num;
 $3 = $2; //@line 31 "../hsp3/hspvar_str.cpp"
 $4 = ($3|0)==(0); //@line 31 "../hsp3/hspvar_str.cpp"
 if ($4) {
  $5 = $1; //@line 31 "../hsp3/hspvar_str.cpp"
  $6 = (($5) + 28|0); //@line 31 "../hsp3/hspvar_str.cpp"
  $0 = $6; //@line 31 "../hsp3/hspvar_str.cpp"
  $13 = $0; //@line 34 "../hsp3/hspvar_str.cpp"
  STACKTOP = sp;return ($13|0); //@line 34 "../hsp3/hspvar_str.cpp"
 } else {
  $7 = $1; //@line 32 "../hsp3/hspvar_str.cpp"
  $8 = (($7) + 32|0); //@line 32 "../hsp3/hspvar_str.cpp"
  $9 = HEAP32[$8>>2]|0; //@line 32 "../hsp3/hspvar_str.cpp"
  $pp = $9; //@line 32 "../hsp3/hspvar_str.cpp"
  $10 = $2; //@line 33 "../hsp3/hspvar_str.cpp"
  $11 = $pp; //@line 33 "../hsp3/hspvar_str.cpp"
  $12 = (($11) + ($10<<2)|0); //@line 33 "../hsp3/hspvar_str.cpp"
  $0 = $12; //@line 33 "../hsp3/hspvar_str.cpp"
  $13 = $0; //@line 34 "../hsp3/hspvar_str.cpp"
  STACKTOP = sp;return ($13|0); //@line 34 "../hsp3/hspvar_str.cpp"
 }
 return 0|0;
}
function __Z17HspVarStruct_InitP10HspVarProc($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $p;
 $1 = $0; //@line 173 "../hsp3/hspvar_struct.cpp"
 $2 = (($1) + 72|0); //@line 173 "../hsp3/hspvar_struct.cpp"
 HEAP32[$2>>2] = 165; //@line 173 "../hsp3/hspvar_struct.cpp"
 $3 = $0; //@line 174 "../hsp3/hspvar_struct.cpp"
 $4 = (($3) + 28|0); //@line 174 "../hsp3/hspvar_struct.cpp"
 HEAP32[$4>>2] = 166; //@line 174 "../hsp3/hspvar_struct.cpp"
 $5 = $0; //@line 177 "../hsp3/hspvar_struct.cpp"
 $6 = (($5) + 56|0); //@line 177 "../hsp3/hspvar_struct.cpp"
 HEAP32[$6>>2] = 167; //@line 177 "../hsp3/hspvar_struct.cpp"
 $7 = $0; //@line 178 "../hsp3/hspvar_struct.cpp"
 $8 = (($7) + 60|0); //@line 178 "../hsp3/hspvar_struct.cpp"
 HEAP32[$8>>2] = 168; //@line 178 "../hsp3/hspvar_struct.cpp"
 $9 = $0; //@line 179 "../hsp3/hspvar_struct.cpp"
 $10 = (($9) + 64|0); //@line 179 "../hsp3/hspvar_struct.cpp"
 HEAP32[$10>>2] = 169; //@line 179 "../hsp3/hspvar_struct.cpp"
 $11 = $0; //@line 180 "../hsp3/hspvar_struct.cpp"
 $12 = (($11) + 68|0); //@line 180 "../hsp3/hspvar_struct.cpp"
 HEAP32[$12>>2] = 170; //@line 180 "../hsp3/hspvar_struct.cpp"
 $13 = $0; //@line 183 "../hsp3/hspvar_struct.cpp"
 $14 = (($13) + 48|0); //@line 183 "../hsp3/hspvar_struct.cpp"
 HEAP32[$14>>2] = 171; //@line 183 "../hsp3/hspvar_struct.cpp"
 $15 = $0; //@line 184 "../hsp3/hspvar_struct.cpp"
 $16 = (($15) + 52|0); //@line 184 "../hsp3/hspvar_struct.cpp"
 HEAP32[$16>>2] = 172; //@line 184 "../hsp3/hspvar_struct.cpp"
 $17 = $0; //@line 206 "../hsp3/hspvar_struct.cpp"
 $18 = (($17) + 12|0); //@line 206 "../hsp3/hspvar_struct.cpp"
 HEAP32[$18>>2] = 3960; //@line 206 "../hsp3/hspvar_struct.cpp"
 $19 = $0; //@line 207 "../hsp3/hspvar_struct.cpp"
 $20 = (($19) + 4|0); //@line 207 "../hsp3/hspvar_struct.cpp"
 HEAP16[$20>>1] = 1; //@line 207 "../hsp3/hspvar_struct.cpp"
 $21 = $0; //@line 208 "../hsp3/hspvar_struct.cpp"
 $22 = (($21) + 6|0); //@line 208 "../hsp3/hspvar_struct.cpp"
 HEAP16[$22>>1] = 137; //@line 208 "../hsp3/hspvar_struct.cpp"
 $23 = $0; //@line 210 "../hsp3/hspvar_struct.cpp"
 $24 = (($23) + 8|0); //@line 210 "../hsp3/hspvar_struct.cpp"
 HEAP16[$24>>1] = 16; //@line 210 "../hsp3/hspvar_struct.cpp"
 STACKTOP = sp;return; //@line 211 "../hsp3/hspvar_struct.cpp"
}
function __ZL16HspVarStruct_SetP4PValPPvPKv($pval,$pdat,$in) {
 $pval = $pval|0;
 $pdat = $pdat|0;
 $in = $in|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fv = 0, $fv_src = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $pval;
 $1 = $pdat;
 $2 = $in;
 $3 = $2; //@line 140 "../hsp3/hspvar_struct.cpp"
 $fv = $3; //@line 140 "../hsp3/hspvar_struct.cpp"
 $4 = $fv; //@line 141 "../hsp3/hspvar_struct.cpp"
 HEAP16[$4>>1] = 2; //@line 141 "../hsp3/hspvar_struct.cpp"
 $5 = $1; //@line 142 "../hsp3/hspvar_struct.cpp"
 $fv_src = $5; //@line 142 "../hsp3/hspvar_struct.cpp"
 $6 = $fv_src; //@line 143 "../hsp3/hspvar_struct.cpp"
 $7 = HEAP16[$6>>1]|0; //@line 143 "../hsp3/hspvar_struct.cpp"
 $8 = $7 << 16 >> 16; //@line 143 "../hsp3/hspvar_struct.cpp"
 $9 = ($8|0)==(1); //@line 143 "../hsp3/hspvar_struct.cpp"
 if ($9) {
  $10 = $fv_src; //@line 143 "../hsp3/hspvar_struct.cpp"
  $11 = (($10) + 12|0); //@line 143 "../hsp3/hspvar_struct.cpp"
  $12 = HEAP32[$11>>2]|0; //@line 143 "../hsp3/hspvar_struct.cpp"
  __Z6sbFreePv($12); //@line 143 "../hsp3/hspvar_struct.cpp"
 }
 $13 = $1; //@line 144 "../hsp3/hspvar_struct.cpp"
 $14 = $fv; //@line 144 "../hsp3/hspvar_struct.cpp"
 ;HEAP32[$13+0>>2]=HEAP32[$14+0>>2]|0;HEAP32[$13+4>>2]=HEAP32[$14+4>>2]|0;HEAP32[$13+8>>2]=HEAP32[$14+8>>2]|0;HEAP32[$13+12>>2]=HEAP32[$14+12>>2]|0; //@line 144 "../hsp3/hspvar_struct.cpp"
 STACKTOP = sp;return; //@line 146 "../hsp3/hspvar_struct.cpp"
}
function __ZL19HspVarStruct_GetPtrP4PVal($pval) {
 $pval = $pval|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $pval;
 $1 = $0; //@line 26 "../hsp3/hspvar_struct.cpp"
 $2 = (($1) + 28|0); //@line 26 "../hsp3/hspvar_struct.cpp"
 $3 = HEAP32[$2>>2]|0; //@line 26 "../hsp3/hspvar_struct.cpp"
 $4 = $0; //@line 26 "../hsp3/hspvar_struct.cpp"
 $5 = (($4) + 40|0); //@line 26 "../hsp3/hspvar_struct.cpp"
 $6 = HEAP32[$5>>2]|0; //@line 26 "../hsp3/hspvar_struct.cpp"
 $7 = (($3) + ($6<<4)|0); //@line 26 "../hsp3/hspvar_struct.cpp"
 STACKTOP = sp;return ($7|0); //@line 26 "../hsp3/hspvar_struct.cpp"
}
function __ZL20HspVarStruct_GetSizePKPv($pdat) {
 $pdat = $pdat|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $pdat;
 STACKTOP = sp;return 16; //@line 123 "../hsp3/hspvar_struct.cpp"
}
function __ZL21HspVarStruct_GetUsingPKPv($pdat) {
 $pdat = $pdat|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $fv = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $pdat;
 $1 = $0; //@line 131 "../hsp3/hspvar_struct.cpp"
 $fv = $1; //@line 131 "../hsp3/hspvar_struct.cpp"
 $2 = $fv; //@line 132 "../hsp3/hspvar_struct.cpp"
 $3 = HEAP16[$2>>1]|0; //@line 132 "../hsp3/hspvar_struct.cpp"
 $4 = $3 << 16 >> 16; //@line 132 "../hsp3/hspvar_struct.cpp"
 STACKTOP = sp;return ($4|0); //@line 132 "../hsp3/hspvar_struct.cpp"
}
function __ZL12GetBlockSizeP4PValPPvPi210($pval,$pdat,$size) {
 $pval = $pval|0;
 $pdat = $pdat|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fv = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $pval;
 $1 = $pdat;
 $2 = $size;
 $3 = $1; //@line 159 "../hsp3/hspvar_struct.cpp"
 $fv = $3; //@line 159 "../hsp3/hspvar_struct.cpp"
 $4 = $fv; //@line 160 "../hsp3/hspvar_struct.cpp"
 $5 = (($4) + 8|0); //@line 160 "../hsp3/hspvar_struct.cpp"
 $6 = HEAP32[$5>>2]|0; //@line 160 "../hsp3/hspvar_struct.cpp"
 $7 = $2; //@line 160 "../hsp3/hspvar_struct.cpp"
 HEAP32[$7>>2] = $6; //@line 160 "../hsp3/hspvar_struct.cpp"
 $8 = $fv; //@line 161 "../hsp3/hspvar_struct.cpp"
 $9 = (($8) + 12|0); //@line 161 "../hsp3/hspvar_struct.cpp"
 $10 = HEAP32[$9>>2]|0; //@line 161 "../hsp3/hspvar_struct.cpp"
 STACKTOP = sp;return ($10|0); //@line 161 "../hsp3/hspvar_struct.cpp"
}
function __ZL10AllocBlockP4PValPPvi211($pval,$pdat,$size) {
 $pval = $pval|0;
 $pdat = $pdat|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $pval;
 $1 = $pdat;
 $2 = $size;
 STACKTOP = sp;return; //@line 166 "../hsp3/hspvar_struct.cpp"
}
function __ZL18HspVarStruct_AllocP4PValPKS_($pval,$pval2) {
 $pval = $pval|0;
 $pval2 = $pval2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fv = 0, $i = 0, $pt = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $pval;
 $1 = $pval2;
 $2 = $0; //@line 84 "../hsp3/hspvar_struct.cpp"
 $3 = (($2) + 4|0); //@line 84 "../hsp3/hspvar_struct.cpp"
 $4 = (($3) + 4|0); //@line 84 "../hsp3/hspvar_struct.cpp"
 $5 = HEAP32[$4>>2]|0; //@line 84 "../hsp3/hspvar_struct.cpp"
 $6 = ($5|0)<(1); //@line 84 "../hsp3/hspvar_struct.cpp"
 if ($6) {
  $7 = $0; //@line 84 "../hsp3/hspvar_struct.cpp"
  $8 = (($7) + 4|0); //@line 84 "../hsp3/hspvar_struct.cpp"
  $9 = (($8) + 4|0); //@line 84 "../hsp3/hspvar_struct.cpp"
  HEAP32[$9>>2] = 1; //@line 84 "../hsp3/hspvar_struct.cpp"
 }
 $10 = $0; //@line 85 "../hsp3/hspvar_struct.cpp"
 $11 = (($10) + 2|0); //@line 85 "../hsp3/hspvar_struct.cpp"
 HEAP16[$11>>1] = 1; //@line 85 "../hsp3/hspvar_struct.cpp"
 $12 = $0; //@line 86 "../hsp3/hspvar_struct.cpp"
 $13 = (($12) + 4|0); //@line 86 "../hsp3/hspvar_struct.cpp"
 $14 = (($13) + 4|0); //@line 86 "../hsp3/hspvar_struct.cpp"
 $15 = HEAP32[$14>>2]|0; //@line 86 "../hsp3/hspvar_struct.cpp"
 $16 = $15<<4; //@line 86 "../hsp3/hspvar_struct.cpp"
 $size = $16; //@line 86 "../hsp3/hspvar_struct.cpp"
 $17 = $size; //@line 87 "../hsp3/hspvar_struct.cpp"
 $18 = (__Z7sbAlloci($17)|0); //@line 87 "../hsp3/hspvar_struct.cpp"
 $pt = $18; //@line 87 "../hsp3/hspvar_struct.cpp"
 $19 = $pt; //@line 88 "../hsp3/hspvar_struct.cpp"
 $fv = $19; //@line 88 "../hsp3/hspvar_struct.cpp"
 $i = 0; //@line 89 "../hsp3/hspvar_struct.cpp"
 while(1) {
  $20 = $i; //@line 89 "../hsp3/hspvar_struct.cpp"
  $21 = $0; //@line 89 "../hsp3/hspvar_struct.cpp"
  $22 = (($21) + 4|0); //@line 89 "../hsp3/hspvar_struct.cpp"
  $23 = (($22) + 4|0); //@line 89 "../hsp3/hspvar_struct.cpp"
  $24 = HEAP32[$23>>2]|0; //@line 89 "../hsp3/hspvar_struct.cpp"
  $25 = ($20|0)<($24|0); //@line 89 "../hsp3/hspvar_struct.cpp"
  if (!($25)) {
   break;
  }
  $26 = $fv; //@line 97 "../hsp3/hspvar_struct.cpp"
  ;HEAP32[$26+0>>2]=0|0;HEAP32[$26+4>>2]=0|0;HEAP32[$26+8>>2]=0|0;HEAP32[$26+12>>2]=0|0; //@line 97 "../hsp3/hspvar_struct.cpp"
  $27 = $fv; //@line 98 "../hsp3/hspvar_struct.cpp"
  HEAP16[$27>>1] = 0; //@line 98 "../hsp3/hspvar_struct.cpp"
  $28 = $fv; //@line 99 "../hsp3/hspvar_struct.cpp"
  $29 = (($28) + 16|0); //@line 99 "../hsp3/hspvar_struct.cpp"
  $fv = $29; //@line 99 "../hsp3/hspvar_struct.cpp"
  $30 = $i; //@line 89 "../hsp3/hspvar_struct.cpp"
  $31 = (($30) + 1)|0; //@line 89 "../hsp3/hspvar_struct.cpp"
  $i = $31; //@line 89 "../hsp3/hspvar_struct.cpp"
 }
 $32 = $1; //@line 101 "../hsp3/hspvar_struct.cpp"
 $33 = ($32|0)!=(0|0); //@line 101 "../hsp3/hspvar_struct.cpp"
 if (!($33)) {
  $44 = $pt; //@line 105 "../hsp3/hspvar_struct.cpp"
  $45 = $0; //@line 105 "../hsp3/hspvar_struct.cpp"
  $46 = (($45) + 28|0); //@line 105 "../hsp3/hspvar_struct.cpp"
  HEAP32[$46>>2] = $44; //@line 105 "../hsp3/hspvar_struct.cpp"
  $47 = $size; //@line 106 "../hsp3/hspvar_struct.cpp"
  $48 = $0; //@line 106 "../hsp3/hspvar_struct.cpp"
  $49 = (($48) + 24|0); //@line 106 "../hsp3/hspvar_struct.cpp"
  HEAP32[$49>>2] = $47; //@line 106 "../hsp3/hspvar_struct.cpp"
  STACKTOP = sp;return; //@line 107 "../hsp3/hspvar_struct.cpp"
 }
 $34 = $pt; //@line 102 "../hsp3/hspvar_struct.cpp"
 $35 = $0; //@line 102 "../hsp3/hspvar_struct.cpp"
 $36 = (($35) + 28|0); //@line 102 "../hsp3/hspvar_struct.cpp"
 $37 = HEAP32[$36>>2]|0; //@line 102 "../hsp3/hspvar_struct.cpp"
 $38 = $0; //@line 102 "../hsp3/hspvar_struct.cpp"
 $39 = (($38) + 24|0); //@line 102 "../hsp3/hspvar_struct.cpp"
 $40 = HEAP32[$39>>2]|0; //@line 102 "../hsp3/hspvar_struct.cpp"
 _memcpy(($34|0),($37|0),($40|0))|0; //@line 102 "../hsp3/hspvar_struct.cpp"
 $41 = $0; //@line 103 "../hsp3/hspvar_struct.cpp"
 $42 = (($41) + 28|0); //@line 103 "../hsp3/hspvar_struct.cpp"
 $43 = HEAP32[$42>>2]|0; //@line 103 "../hsp3/hspvar_struct.cpp"
 __Z6sbFreePv($43); //@line 103 "../hsp3/hspvar_struct.cpp"
 $44 = $pt; //@line 105 "../hsp3/hspvar_struct.cpp"
 $45 = $0; //@line 105 "../hsp3/hspvar_struct.cpp"
 $46 = (($45) + 28|0); //@line 105 "../hsp3/hspvar_struct.cpp"
 HEAP32[$46>>2] = $44; //@line 105 "../hsp3/hspvar_struct.cpp"
 $47 = $size; //@line 106 "../hsp3/hspvar_struct.cpp"
 $48 = $0; //@line 106 "../hsp3/hspvar_struct.cpp"
 $49 = (($48) + 24|0); //@line 106 "../hsp3/hspvar_struct.cpp"
 HEAP32[$49>>2] = $47; //@line 106 "../hsp3/hspvar_struct.cpp"
 STACKTOP = sp;return; //@line 107 "../hsp3/hspvar_struct.cpp"
}
function __ZL17HspVarStruct_FreeP4PVal($pval) {
 $pval = $pval|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fv = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $pval;
 $1 = $0; //@line 59 "../hsp3/hspvar_struct.cpp"
 $2 = (($1) + 2|0); //@line 59 "../hsp3/hspvar_struct.cpp"
 $3 = HEAP16[$2>>1]|0; //@line 59 "../hsp3/hspvar_struct.cpp"
 $4 = $3 << 16 >> 16; //@line 59 "../hsp3/hspvar_struct.cpp"
 $5 = ($4|0)==(1); //@line 59 "../hsp3/hspvar_struct.cpp"
 if (!($5)) {
  $30 = $0; //@line 70 "../hsp3/hspvar_struct.cpp"
  $31 = (($30) + 2|0); //@line 70 "../hsp3/hspvar_struct.cpp"
  HEAP16[$31>>1] = -1; //@line 70 "../hsp3/hspvar_struct.cpp"
  STACKTOP = sp;return; //@line 71 "../hsp3/hspvar_struct.cpp"
 }
 $6 = $0; //@line 61 "../hsp3/hspvar_struct.cpp"
 __Z18code_delstruct_allP4PVal($6); //@line 61 "../hsp3/hspvar_struct.cpp"
 $7 = $0; //@line 63 "../hsp3/hspvar_struct.cpp"
 $8 = (($7) + 28|0); //@line 63 "../hsp3/hspvar_struct.cpp"
 $9 = HEAP32[$8>>2]|0; //@line 63 "../hsp3/hspvar_struct.cpp"
 $fv = $9; //@line 63 "../hsp3/hspvar_struct.cpp"
 $i = 0; //@line 64 "../hsp3/hspvar_struct.cpp"
 while(1) {
  $10 = $i; //@line 64 "../hsp3/hspvar_struct.cpp"
  $11 = $0; //@line 64 "../hsp3/hspvar_struct.cpp"
  $12 = (($11) + 4|0); //@line 64 "../hsp3/hspvar_struct.cpp"
  $13 = (($12) + 4|0); //@line 64 "../hsp3/hspvar_struct.cpp"
  $14 = HEAP32[$13>>2]|0; //@line 64 "../hsp3/hspvar_struct.cpp"
  $15 = ($10|0)<($14|0); //@line 64 "../hsp3/hspvar_struct.cpp"
  if (!($15)) {
   break;
  }
  $16 = $fv; //@line 65 "../hsp3/hspvar_struct.cpp"
  $17 = HEAP16[$16>>1]|0; //@line 65 "../hsp3/hspvar_struct.cpp"
  $18 = $17 << 16 >> 16; //@line 65 "../hsp3/hspvar_struct.cpp"
  $19 = ($18|0)==(1); //@line 65 "../hsp3/hspvar_struct.cpp"
  if ($19) {
   $20 = $fv; //@line 65 "../hsp3/hspvar_struct.cpp"
   $21 = (($20) + 12|0); //@line 65 "../hsp3/hspvar_struct.cpp"
   $22 = HEAP32[$21>>2]|0; //@line 65 "../hsp3/hspvar_struct.cpp"
   __Z6sbFreePv($22); //@line 65 "../hsp3/hspvar_struct.cpp"
  }
  $23 = $fv; //@line 66 "../hsp3/hspvar_struct.cpp"
  $24 = (($23) + 16|0); //@line 66 "../hsp3/hspvar_struct.cpp"
  $fv = $24; //@line 66 "../hsp3/hspvar_struct.cpp"
  $25 = $i; //@line 64 "../hsp3/hspvar_struct.cpp"
  $26 = (($25) + 1)|0; //@line 64 "../hsp3/hspvar_struct.cpp"
  $i = $26; //@line 64 "../hsp3/hspvar_struct.cpp"
 }
 $27 = $0; //@line 68 "../hsp3/hspvar_struct.cpp"
 $28 = (($27) + 28|0); //@line 68 "../hsp3/hspvar_struct.cpp"
 $29 = HEAP32[$28>>2]|0; //@line 68 "../hsp3/hspvar_struct.cpp"
 __Z6sbFreePv($29); //@line 68 "../hsp3/hspvar_struct.cpp"
 $30 = $0; //@line 70 "../hsp3/hspvar_struct.cpp"
 $31 = (($30) + 2|0); //@line 70 "../hsp3/hspvar_struct.cpp"
 HEAP16[$31>>1] = -1; //@line 70 "../hsp3/hspvar_struct.cpp"
 STACKTOP = sp;return; //@line 71 "../hsp3/hspvar_struct.cpp"
}
function __ZN6HspWndC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZN6HspWnd5ResetEv($1); //@line 39 "hspwnd_dish.cpp"
 STACKTOP = sp;return; //@line 40 "hspwnd_dish.cpp"
}
function __ZN6HspWnd5ResetEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $sx = 0, $sy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 36|0); //@line 119 "hspwnd_dish.cpp"
 HEAP32[$2>>2] = 0; //@line 119 "hspwnd_dish.cpp"
 $3 = (($1) + 32|0); //@line 120 "hspwnd_dish.cpp"
 HEAP32[$3>>2] = 0; //@line 120 "hspwnd_dish.cpp"
 __ZN6HspWnd12ExpandScreenEi($1,16); //@line 121 "hspwnd_dish.cpp"
 $4 = (_hgio_getWidth()|0); //@line 123 "hspwnd_dish.cpp"
 $sx = $4; //@line 123 "hspwnd_dish.cpp"
 $5 = (_hgio_getHeight()|0); //@line 124 "hspwnd_dish.cpp"
 $sy = $5; //@line 124 "hspwnd_dish.cpp"
 $6 = $sx; //@line 126 "hspwnd_dish.cpp"
 $7 = $sy; //@line 126 "hspwnd_dish.cpp"
 __ZN6HspWnd9MakeBmscrEiiiiii($1,0,2,0,0,$6,$7); //@line 126 "hspwnd_dish.cpp"
 HEAP32[3968>>2] = $1; //@line 139 "hspwnd_dish.cpp"
 $8 = (($1) + 44|0); //@line 142 "hspwnd_dish.cpp"
 ;HEAP32[$8+0>>2]=0|0;HEAP32[$8+4>>2]=0|0;HEAP32[$8+8>>2]=0|0;HEAP32[$8+12>>2]=0|0;HEAP32[$8+16>>2]=0|0;HEAP32[$8+20>>2]=0|0; //@line 142 "hspwnd_dish.cpp"
 STACKTOP = sp;return; //@line 143 "hspwnd_dish.cpp"
}
function __ZN6HspWndD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZN6HspWnd7DisposeEv($1); //@line 46 "hspwnd_dish.cpp"
 STACKTOP = sp;return; //@line 47 "hspwnd_dish.cpp"
}
function __ZN6HspWnd7DisposeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bm = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $this;
 $3 = $0;
 $i = 0; //@line 61 "hspwnd_dish.cpp"
 while(1) {
  $4 = $i; //@line 61 "hspwnd_dish.cpp"
  $5 = (($3) + 36|0); //@line 61 "hspwnd_dish.cpp"
  $6 = HEAP32[$5>>2]|0; //@line 61 "hspwnd_dish.cpp"
  $7 = ($4|0)<($6|0); //@line 61 "hspwnd_dish.cpp"
  if (!($7)) {
   label = 11;
   break;
  }
  $8 = $i; //@line 62 "hspwnd_dish.cpp"
  $9 = (($3) + 32|0); //@line 62 "hspwnd_dish.cpp"
  $10 = HEAP32[$9>>2]|0; //@line 62 "hspwnd_dish.cpp"
  $11 = (($10) + ($8<<2)|0); //@line 62 "hspwnd_dish.cpp"
  $12 = HEAP32[$11>>2]|0; //@line 62 "hspwnd_dish.cpp"
  $bm = $12; //@line 62 "hspwnd_dish.cpp"
  $13 = $bm; //@line 63 "hspwnd_dish.cpp"
  $14 = ($13|0)!=(0|0); //@line 63 "hspwnd_dish.cpp"
  if ($14) {
   $15 = $bm; //@line 64 "hspwnd_dish.cpp"
   $16 = ($15|0)==(0|0); //@line 64 "hspwnd_dish.cpp"
   if (!($16)) {
    __THREW__ = 0;
    invoke_vi(173,($15|0)); //@line 64 "hspwnd_dish.cpp"
    $17 = __THREW__; __THREW__ = 0;
    $18 = $17&1;
    if ($18) {
     break;
    }
    __ZdlPv($15); //@line 64 "hspwnd_dish.cpp"
   }
  }
  $21 = $i; //@line 61 "hspwnd_dish.cpp"
  $22 = (($21) + 1)|0; //@line 61 "hspwnd_dish.cpp"
  $i = $22; //@line 61 "hspwnd_dish.cpp"
 }
 if ((label|0) == 11) {
  $23 = (($3) + 32|0); //@line 67 "hspwnd_dish.cpp"
  $24 = HEAP32[$23>>2]|0; //@line 67 "hspwnd_dish.cpp"
  _free($24); //@line 67 "hspwnd_dish.cpp"
  STACKTOP = sp;return; //@line 68 "hspwnd_dish.cpp"
 }
 $19 = ___cxa_find_matching_catch(-1,-1)|0;
 $20 = tempRet0;
 $1 = $19; //@line 64 "hspwnd_dish.cpp"
 $2 = $20; //@line 64 "hspwnd_dish.cpp"
 __ZdlPv($15); //@line 64 "hspwnd_dish.cpp"
 $25 = $1; //@line 64 "hspwnd_dish.cpp"
 $26 = $2; //@line 64 "hspwnd_dish.cpp"
 ___resumeException($25|0);
 // unreachable;
}
function __ZN6HspWnd9GetActiveEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 STACKTOP = sp;return 0; //@line 81 "hspwnd_dish.cpp"
}
function __ZN6HspWnd12ExpandScreenEi($this,$id) {
 $this = $this|0;
 $id = $id|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $idmax = 0, $new_bm = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $this;
 $1 = $id;
 $2 = $0;
 $3 = $1; //@line 92 "hspwnd_dish.cpp"
 $4 = (($3) + 1)|0; //@line 92 "hspwnd_dish.cpp"
 $idmax = $4; //@line 92 "hspwnd_dish.cpp"
 $5 = $idmax; //@line 93 "hspwnd_dish.cpp"
 $6 = (($2) + 36|0); //@line 93 "hspwnd_dish.cpp"
 $7 = HEAP32[$6>>2]|0; //@line 93 "hspwnd_dish.cpp"
 $8 = ($5|0)<=($7|0); //@line 93 "hspwnd_dish.cpp"
 if ($8) {
  STACKTOP = sp;return; //@line 107 "hspwnd_dish.cpp"
 }
 $9 = $idmax; //@line 94 "hspwnd_dish.cpp"
 $10 = $9<<2; //@line 94 "hspwnd_dish.cpp"
 $11 = (_malloc($10)|0); //@line 94 "hspwnd_dish.cpp"
 $new_bm = $11; //@line 94 "hspwnd_dish.cpp"
 $i = 0; //@line 96 "hspwnd_dish.cpp"
 while(1) {
  $12 = $i; //@line 96 "hspwnd_dish.cpp"
  $13 = $idmax; //@line 96 "hspwnd_dish.cpp"
  $14 = ($12|0)<($13|0); //@line 96 "hspwnd_dish.cpp"
  if (!($14)) {
   break;
  }
  $15 = $i; //@line 97 "hspwnd_dish.cpp"
  $16 = (($2) + 36|0); //@line 97 "hspwnd_dish.cpp"
  $17 = HEAP32[$16>>2]|0; //@line 97 "hspwnd_dish.cpp"
  $18 = ($15|0)>=($17|0); //@line 97 "hspwnd_dish.cpp"
  if ($18) {
   label = 7;
  } else {
   $19 = (($2) + 36|0); //@line 97 "hspwnd_dish.cpp"
   $20 = HEAP32[$19>>2]|0; //@line 97 "hspwnd_dish.cpp"
   $21 = ($20|0)==(0); //@line 97 "hspwnd_dish.cpp"
   if ($21) {
    label = 7;
   } else {
    $25 = $i; //@line 101 "hspwnd_dish.cpp"
    $26 = (($2) + 32|0); //@line 101 "hspwnd_dish.cpp"
    $27 = HEAP32[$26>>2]|0; //@line 101 "hspwnd_dish.cpp"
    $28 = (($27) + ($25<<2)|0); //@line 101 "hspwnd_dish.cpp"
    $29 = HEAP32[$28>>2]|0; //@line 101 "hspwnd_dish.cpp"
    $30 = $i; //@line 101 "hspwnd_dish.cpp"
    $31 = $new_bm; //@line 101 "hspwnd_dish.cpp"
    $32 = (($31) + ($30<<2)|0); //@line 101 "hspwnd_dish.cpp"
    HEAP32[$32>>2] = $29; //@line 101 "hspwnd_dish.cpp"
   }
  }
  if ((label|0) == 7) {
   label = 0;
   $22 = $i; //@line 98 "hspwnd_dish.cpp"
   $23 = $new_bm; //@line 98 "hspwnd_dish.cpp"
   $24 = (($23) + ($22<<2)|0); //@line 98 "hspwnd_dish.cpp"
   HEAP32[$24>>2] = 0; //@line 98 "hspwnd_dish.cpp"
  }
  $33 = $i; //@line 96 "hspwnd_dish.cpp"
  $34 = (($33) + 1)|0; //@line 96 "hspwnd_dish.cpp"
  $i = $34; //@line 96 "hspwnd_dish.cpp"
 }
 $35 = (($2) + 32|0); //@line 104 "hspwnd_dish.cpp"
 $36 = HEAP32[$35>>2]|0; //@line 104 "hspwnd_dish.cpp"
 $37 = ($36|0)!=(0|0); //@line 104 "hspwnd_dish.cpp"
 if ($37) {
  $38 = (($2) + 32|0); //@line 104 "hspwnd_dish.cpp"
  $39 = HEAP32[$38>>2]|0; //@line 104 "hspwnd_dish.cpp"
  _free($39); //@line 104 "hspwnd_dish.cpp"
 }
 $40 = $idmax; //@line 106 "hspwnd_dish.cpp"
 $41 = (($2) + 36|0); //@line 106 "hspwnd_dish.cpp"
 HEAP32[$41>>2] = $40; //@line 106 "hspwnd_dish.cpp"
 $42 = $new_bm; //@line 107 "hspwnd_dish.cpp"
 $43 = (($2) + 32|0); //@line 107 "hspwnd_dish.cpp"
 HEAP32[$43>>2] = $42; //@line 107 "hspwnd_dish.cpp"
 STACKTOP = sp;return; //@line 107 "hspwnd_dish.cpp"
}
function __ZN6HspWnd9MakeBmscrEiiiiii($this,$id,$type,$x,$y,$sx,$sy) {
 $this = $this|0;
 $id = $id|0;
 $type = $type|0;
 $x = $x|0;
 $y = $y|0;
 $sx = $sx|0;
 $sy = $sy|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bm = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = $this;
 $1 = $id;
 $2 = $type;
 $3 = $x;
 $4 = $y;
 $5 = $sx;
 $6 = $sy;
 $9 = $0;
 $10 = $1; //@line 150 "hspwnd_dish.cpp"
 __ZN6HspWnd12ExpandScreenEi($9,$10); //@line 150 "hspwnd_dish.cpp"
 $11 = $1; //@line 152 "hspwnd_dish.cpp"
 $12 = (($9) + 32|0); //@line 152 "hspwnd_dish.cpp"
 $13 = HEAP32[$12>>2]|0; //@line 152 "hspwnd_dish.cpp"
 $14 = (($13) + ($11<<2)|0); //@line 152 "hspwnd_dish.cpp"
 $15 = HEAP32[$14>>2]|0; //@line 152 "hspwnd_dish.cpp"
 $16 = ($15|0)!=(0|0); //@line 152 "hspwnd_dish.cpp"
 if ($16) {
  $17 = $1; //@line 153 "hspwnd_dish.cpp"
  $18 = (($9) + 32|0); //@line 153 "hspwnd_dish.cpp"
  $19 = HEAP32[$18>>2]|0; //@line 153 "hspwnd_dish.cpp"
  $20 = (($19) + ($17<<2)|0); //@line 153 "hspwnd_dish.cpp"
  $21 = HEAP32[$20>>2]|0; //@line 153 "hspwnd_dish.cpp"
  $22 = ($21|0)==(0|0); //@line 153 "hspwnd_dish.cpp"
  do {
   if (!($22)) {
    __THREW__ = 0;
    invoke_vi(173,($21|0)); //@line 153 "hspwnd_dish.cpp"
    $23 = __THREW__; __THREW__ = 0;
    $24 = $23&1;
    if (!($24)) {
     __ZdlPv($21); //@line 153 "hspwnd_dish.cpp"
     break;
    }
    $25 = ___cxa_find_matching_catch(-1,-1)|0;
    $26 = tempRet0;
    $7 = $25; //@line 153 "hspwnd_dish.cpp"
    $8 = $26; //@line 153 "hspwnd_dish.cpp"
    __ZdlPv($21); //@line 153 "hspwnd_dish.cpp"
    $50 = $7; //@line 153 "hspwnd_dish.cpp"
    $51 = $8; //@line 153 "hspwnd_dish.cpp"
    ___resumeException($50|0);
    // unreachable;
   }
  } while(0);
 }
 $27 = (__Znwj(640)|0); //@line 155 "hspwnd_dish.cpp"
 __THREW__ = 0;
 invoke_vi(174,($27|0)); //@line 155 "hspwnd_dish.cpp"
 $28 = __THREW__; __THREW__ = 0;
 $29 = $28&1;
 if (!($29)) {
  $bm = $27; //@line 155 "hspwnd_dish.cpp"
  $30 = $bm; //@line 156 "hspwnd_dish.cpp"
  $31 = $1; //@line 156 "hspwnd_dish.cpp"
  $32 = (($9) + 32|0); //@line 156 "hspwnd_dish.cpp"
  $33 = HEAP32[$32>>2]|0; //@line 156 "hspwnd_dish.cpp"
  $34 = (($33) + ($31<<2)|0); //@line 156 "hspwnd_dish.cpp"
  HEAP32[$34>>2] = $30; //@line 156 "hspwnd_dish.cpp"
  $35 = $1; //@line 158 "hspwnd_dish.cpp"
  $36 = $bm; //@line 158 "hspwnd_dish.cpp"
  $37 = (($36) + 32|0); //@line 158 "hspwnd_dish.cpp"
  HEAP32[$37>>2] = $35; //@line 158 "hspwnd_dish.cpp"
  $38 = $2; //@line 159 "hspwnd_dish.cpp"
  $39 = $bm; //@line 159 "hspwnd_dish.cpp"
  $40 = (($39) + 28|0); //@line 159 "hspwnd_dish.cpp"
  HEAP32[$40>>2] = $38; //@line 159 "hspwnd_dish.cpp"
  $41 = $bm; //@line 160 "hspwnd_dish.cpp"
  $42 = (($41) + 280|0); //@line 160 "hspwnd_dish.cpp"
  HEAP32[$42>>2] = -1; //@line 160 "hspwnd_dish.cpp"
  $43 = $bm; //@line 161 "hspwnd_dish.cpp"
  $44 = $5; //@line 161 "hspwnd_dish.cpp"
  $45 = $6; //@line 161 "hspwnd_dish.cpp"
  __ZN5Bmscr4InitEii($43,$44,$45); //@line 161 "hspwnd_dish.cpp"
  $46 = $bm; //@line 162 "hspwnd_dish.cpp"
  $47 = (($46) + 184|0); //@line 162 "hspwnd_dish.cpp"
  HEAP32[$47>>2] = $9; //@line 162 "hspwnd_dish.cpp"
  STACKTOP = sp;return; //@line 163 "hspwnd_dish.cpp"
 }
 $48 = ___cxa_find_matching_catch(-1,-1)|0;
 $49 = tempRet0;
 $7 = $48; //@line 155 "hspwnd_dish.cpp"
 $8 = $49; //@line 155 "hspwnd_dish.cpp"
 __ZdlPv($27); //@line 155 "hspwnd_dish.cpp"
 $50 = $7; //@line 153 "hspwnd_dish.cpp"
 $51 = $8; //@line 153 "hspwnd_dish.cpp"
 ___resumeException($50|0);
 // unreachable;
}
function __ZN5Bmscr4InitEii($this,$p_sx,$p_sy) {
 $this = $this|0;
 $p_sx = $p_sx|0;
 $p_sy = $p_sy|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $p_sx;
 $2 = $p_sy;
 $3 = $0;
 HEAP32[$3>>2] = 1; //@line 299 "hspwnd_dish.cpp"
 $4 = (($3) + 168|0); //@line 301 "hspwnd_dish.cpp"
 HEAP32[$4>>2] = 0; //@line 301 "hspwnd_dish.cpp"
 $5 = (($3) + 164|0); //@line 302 "hspwnd_dish.cpp"
 HEAP32[$5>>2] = 0; //@line 302 "hspwnd_dish.cpp"
 $6 = $1; //@line 303 "hspwnd_dish.cpp"
 $7 = (($3) + 4|0); //@line 303 "hspwnd_dish.cpp"
 HEAP32[$7>>2] = $6; //@line 303 "hspwnd_dish.cpp"
 $8 = $2; //@line 303 "hspwnd_dish.cpp"
 $9 = (($3) + 8|0); //@line 303 "hspwnd_dish.cpp"
 HEAP32[$9>>2] = $8; //@line 303 "hspwnd_dish.cpp"
 $10 = (($3) + 4|0); //@line 304 "hspwnd_dish.cpp"
 $11 = HEAP32[$10>>2]|0; //@line 304 "hspwnd_dish.cpp"
 $12 = (($3) + 152|0); //@line 304 "hspwnd_dish.cpp"
 HEAP32[$12>>2] = $11; //@line 304 "hspwnd_dish.cpp"
 __ZN5Bmscr3ClsEi($3,0); //@line 306 "hspwnd_dish.cpp"
 $13 = (($3) + 188|0); //@line 308 "hspwnd_dish.cpp"
 HEAP32[$13>>2] = -1; //@line 308 "hspwnd_dish.cpp"
 $14 = (($3) + 136|0); //@line 310 "hspwnd_dish.cpp"
 HEAP32[$14>>2] = 1; //@line 310 "hspwnd_dish.cpp"
 $15 = (($3) + 36|0); //@line 311 "hspwnd_dish.cpp"
 HEAP16[$15>>1] = 0; //@line 311 "hspwnd_dish.cpp"
 $16 = (($3) + 36|0); //@line 313 "hspwnd_dish.cpp"
 HEAP16[$16>>1] = 1; //@line 313 "hspwnd_dish.cpp"
 $17 = (($3) + 38|0); //@line 314 "hspwnd_dish.cpp"
 HEAP16[$17>>1] = 1; //@line 314 "hspwnd_dish.cpp"
 $18 = (($3) + 216|0); //@line 316 "hspwnd_dish.cpp"
 HEAP8[$18>>0] = 0; //@line 316 "hspwnd_dish.cpp"
 STACKTOP = sp;return; //@line 317 "hspwnd_dish.cpp"
}
function __ZN6HspWnd21MakeBmscrFromResourceEiPc($this,$id,$fname) {
 $this = $this|0;
 $id = $id|0;
 $fname = $fname|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bm = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $this;
 $1 = $id;
 $2 = $fname;
 $5 = $0;
 $6 = $1; //@line 170 "hspwnd_dish.cpp"
 __ZN6HspWnd12ExpandScreenEi($5,$6); //@line 170 "hspwnd_dish.cpp"
 $7 = $1; //@line 172 "hspwnd_dish.cpp"
 $8 = (($5) + 32|0); //@line 172 "hspwnd_dish.cpp"
 $9 = HEAP32[$8>>2]|0; //@line 172 "hspwnd_dish.cpp"
 $10 = (($9) + ($7<<2)|0); //@line 172 "hspwnd_dish.cpp"
 $11 = HEAP32[$10>>2]|0; //@line 172 "hspwnd_dish.cpp"
 $12 = ($11|0)!=(0|0); //@line 172 "hspwnd_dish.cpp"
 if ($12) {
  $13 = $1; //@line 173 "hspwnd_dish.cpp"
  $14 = (($5) + 32|0); //@line 173 "hspwnd_dish.cpp"
  $15 = HEAP32[$14>>2]|0; //@line 173 "hspwnd_dish.cpp"
  $16 = (($15) + ($13<<2)|0); //@line 173 "hspwnd_dish.cpp"
  $17 = HEAP32[$16>>2]|0; //@line 173 "hspwnd_dish.cpp"
  $18 = ($17|0)==(0|0); //@line 173 "hspwnd_dish.cpp"
  do {
   if (!($18)) {
    __THREW__ = 0;
    invoke_vi(173,($17|0)); //@line 173 "hspwnd_dish.cpp"
    $19 = __THREW__; __THREW__ = 0;
    $20 = $19&1;
    if (!($20)) {
     __ZdlPv($17); //@line 173 "hspwnd_dish.cpp"
     break;
    }
    $21 = ___cxa_find_matching_catch(-1,-1)|0;
    $22 = tempRet0;
    $3 = $21; //@line 173 "hspwnd_dish.cpp"
    $4 = $22; //@line 173 "hspwnd_dish.cpp"
    __ZdlPv($17); //@line 173 "hspwnd_dish.cpp"
    $44 = $3; //@line 173 "hspwnd_dish.cpp"
    $45 = $4; //@line 173 "hspwnd_dish.cpp"
    ___resumeException($44|0);
    // unreachable;
   }
  } while(0);
 }
 $23 = (__Znwj(640)|0); //@line 175 "hspwnd_dish.cpp"
 __THREW__ = 0;
 invoke_vi(174,($23|0)); //@line 175 "hspwnd_dish.cpp"
 $24 = __THREW__; __THREW__ = 0;
 $25 = $24&1;
 if (!($25)) {
  $bm = $23; //@line 175 "hspwnd_dish.cpp"
  $26 = $bm; //@line 176 "hspwnd_dish.cpp"
  $27 = $1; //@line 176 "hspwnd_dish.cpp"
  $28 = (($5) + 32|0); //@line 176 "hspwnd_dish.cpp"
  $29 = HEAP32[$28>>2]|0; //@line 176 "hspwnd_dish.cpp"
  $30 = (($29) + ($27<<2)|0); //@line 176 "hspwnd_dish.cpp"
  HEAP32[$30>>2] = $26; //@line 176 "hspwnd_dish.cpp"
  $31 = $1; //@line 178 "hspwnd_dish.cpp"
  $32 = $bm; //@line 178 "hspwnd_dish.cpp"
  $33 = (($32) + 32|0); //@line 178 "hspwnd_dish.cpp"
  HEAP32[$33>>2] = $31; //@line 178 "hspwnd_dish.cpp"
  $34 = $bm; //@line 179 "hspwnd_dish.cpp"
  $35 = (($34) + 28|0); //@line 179 "hspwnd_dish.cpp"
  HEAP32[$35>>2] = 1; //@line 179 "hspwnd_dish.cpp"
  $36 = $bm; //@line 180 "hspwnd_dish.cpp"
  $37 = (($36) + 280|0); //@line 180 "hspwnd_dish.cpp"
  HEAP32[$37>>2] = -1; //@line 180 "hspwnd_dish.cpp"
  $38 = $bm; //@line 181 "hspwnd_dish.cpp"
  $39 = $2; //@line 181 "hspwnd_dish.cpp"
  __ZN5Bmscr4InitEPc($38,$39); //@line 181 "hspwnd_dish.cpp"
  $40 = $bm; //@line 182 "hspwnd_dish.cpp"
  $41 = (($40) + 184|0); //@line 182 "hspwnd_dish.cpp"
  HEAP32[$41>>2] = $5; //@line 182 "hspwnd_dish.cpp"
  STACKTOP = sp;return; //@line 183 "hspwnd_dish.cpp"
 }
 $42 = ___cxa_find_matching_catch(-1,-1)|0;
 $43 = tempRet0;
 $3 = $42; //@line 175 "hspwnd_dish.cpp"
 $4 = $43; //@line 175 "hspwnd_dish.cpp"
 __ZdlPv($23); //@line 175 "hspwnd_dish.cpp"
 $44 = $3; //@line 173 "hspwnd_dish.cpp"
 $45 = $4; //@line 173 "hspwnd_dish.cpp"
 ___resumeException($44|0);
 // unreachable;
}
function __ZN5Bmscr4InitEPc($this,$fname) {
 $this = $this|0;
 $fname = $fname|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $fname;
 $2 = $0;
 $3 = $1; //@line 323 "hspwnd_dish.cpp"
 $4 = (_hgio_texload($2,$3)|0); //@line 323 "hspwnd_dish.cpp"
 $i = $4; //@line 323 "hspwnd_dish.cpp"
 $5 = $i; //@line 324 "hspwnd_dish.cpp"
 $6 = ($5|0)<(0); //@line 324 "hspwnd_dish.cpp"
 if ($6) {
  $7 = (___cxa_allocate_exception(4)|0); //@line 325 "hspwnd_dish.cpp"
  HEAP32[$7>>2] = 13; //@line 325 "hspwnd_dish.cpp"
  ___cxa_throw(($7|0),(624|0),(0|0)); //@line 325 "hspwnd_dish.cpp"
  // unreachable; //@line 325 "hspwnd_dish.cpp"
 } else {
  $8 = (($2) + 4|0); //@line 327 "hspwnd_dish.cpp"
  $9 = HEAP32[$8>>2]|0; //@line 327 "hspwnd_dish.cpp"
  $10 = (($2) + 8|0); //@line 327 "hspwnd_dish.cpp"
  $11 = HEAP32[$10>>2]|0; //@line 327 "hspwnd_dish.cpp"
  __ZN5Bmscr4InitEii($2,$9,$11); //@line 327 "hspwnd_dish.cpp"
  $12 = (($2) + 216|0); //@line 328 "hspwnd_dish.cpp"
  $13 = $1; //@line 328 "hspwnd_dish.cpp"
  (_strncpy(($12|0),($13|0),63)|0); //@line 328 "hspwnd_dish.cpp"
  STACKTOP = sp;return; //@line 330 "hspwnd_dish.cpp"
 }
}
function __ZN6HspWnd7PicloadEiPci($this,$id,$fname,$mode) {
 $this = $this|0;
 $id = $id|0;
 $fname = $fname|0;
 $mode = $mode|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $bm = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = $this;
 $2 = $id;
 $3 = $fname;
 $4 = $mode;
 $5 = $1;
 $6 = $2; //@line 193 "hspwnd_dish.cpp"
 $7 = (__ZN6HspWnd8GetBmscrEi($5,$6)|0); //@line 193 "hspwnd_dish.cpp"
 $bm = $7; //@line 193 "hspwnd_dish.cpp"
 $8 = $bm; //@line 194 "hspwnd_dish.cpp"
 $9 = ($8|0)==(0|0); //@line 194 "hspwnd_dish.cpp"
 if ($9) {
  $0 = 1; //@line 194 "hspwnd_dish.cpp"
  $19 = $0; //@line 205 "hspwnd_dish.cpp"
  STACKTOP = sp;return ($19|0); //@line 205 "hspwnd_dish.cpp"
 }
 $10 = $bm; //@line 195 "hspwnd_dish.cpp"
 $11 = HEAP32[$10>>2]|0; //@line 195 "hspwnd_dish.cpp"
 $12 = ($11|0)==(0); //@line 195 "hspwnd_dish.cpp"
 if ($12) {
  $0 = 1; //@line 195 "hspwnd_dish.cpp"
  $19 = $0; //@line 205 "hspwnd_dish.cpp"
  STACKTOP = sp;return ($19|0); //@line 205 "hspwnd_dish.cpp"
 }
 $13 = $bm; //@line 196 "hspwnd_dish.cpp"
 $14 = (($13) + 28|0); //@line 196 "hspwnd_dish.cpp"
 $15 = HEAP32[$14>>2]|0; //@line 196 "hspwnd_dish.cpp"
 if ((($15|0) == 2)) {
 } else if ((($15|0) == 1)) {
  $16 = $2; //@line 200 "hspwnd_dish.cpp"
  $17 = $3; //@line 200 "hspwnd_dish.cpp"
  __ZN6HspWnd21MakeBmscrFromResourceEiPc($5,$16,$17); //@line 200 "hspwnd_dish.cpp"
 } else {
  $18 = (___cxa_allocate_exception(4)|0); //@line 203 "hspwnd_dish.cpp"
  HEAP32[$18>>2] = 21; //@line 203 "hspwnd_dish.cpp"
  ___cxa_throw(($18|0),(624|0),(0|0)); //@line 203 "hspwnd_dish.cpp"
  // unreachable; //@line 203 "hspwnd_dish.cpp"
 }
 $0 = 0; //@line 205 "hspwnd_dish.cpp"
 $19 = $0; //@line 205 "hspwnd_dish.cpp"
 STACKTOP = sp;return ($19|0); //@line 205 "hspwnd_dish.cpp"
}
function __ZN6HspWnd12GetBmscrSafeEi($this,$id) {
 $this = $this|0;
 $id = $id|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $bm = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $id;
 $2 = $0;
 $3 = $1; //@line 214 "hspwnd_dish.cpp"
 $4 = ($3|0)<(0); //@line 214 "hspwnd_dish.cpp"
 if ($4) {
  $9 = (___cxa_allocate_exception(4)|0); //@line 214 "hspwnd_dish.cpp"
  HEAP32[$9>>2] = 3; //@line 214 "hspwnd_dish.cpp"
  ___cxa_throw(($9|0),(624|0),(0|0)); //@line 214 "hspwnd_dish.cpp"
  // unreachable; //@line 214 "hspwnd_dish.cpp"
 }
 $5 = $1; //@line 214 "hspwnd_dish.cpp"
 $6 = (($2) + 36|0); //@line 214 "hspwnd_dish.cpp"
 $7 = HEAP32[$6>>2]|0; //@line 214 "hspwnd_dish.cpp"
 $8 = ($5|0)>=($7|0); //@line 214 "hspwnd_dish.cpp"
 if ($8) {
  $9 = (___cxa_allocate_exception(4)|0); //@line 214 "hspwnd_dish.cpp"
  HEAP32[$9>>2] = 3; //@line 214 "hspwnd_dish.cpp"
  ___cxa_throw(($9|0),(624|0),(0|0)); //@line 214 "hspwnd_dish.cpp"
  // unreachable; //@line 214 "hspwnd_dish.cpp"
 }
 $10 = $1; //@line 215 "hspwnd_dish.cpp"
 $11 = (__ZN6HspWnd8GetBmscrEi($2,$10)|0); //@line 215 "hspwnd_dish.cpp"
 $bm = $11; //@line 215 "hspwnd_dish.cpp"
 $12 = $bm; //@line 216 "hspwnd_dish.cpp"
 $13 = ($12|0)==(0|0); //@line 216 "hspwnd_dish.cpp"
 if ($13) {
  $14 = (___cxa_allocate_exception(4)|0); //@line 216 "hspwnd_dish.cpp"
  HEAP32[$14>>2] = 3; //@line 216 "hspwnd_dish.cpp"
  ___cxa_throw(($14|0),(624|0),(0|0)); //@line 216 "hspwnd_dish.cpp"
  // unreachable; //@line 216 "hspwnd_dish.cpp"
 }
 $15 = $bm; //@line 217 "hspwnd_dish.cpp"
 $16 = HEAP32[$15>>2]|0; //@line 217 "hspwnd_dish.cpp"
 $17 = ($16|0)==(0); //@line 217 "hspwnd_dish.cpp"
 if ($17) {
  $18 = (___cxa_allocate_exception(4)|0); //@line 217 "hspwnd_dish.cpp"
  HEAP32[$18>>2] = 3; //@line 217 "hspwnd_dish.cpp"
  ___cxa_throw(($18|0),(624|0),(0|0)); //@line 217 "hspwnd_dish.cpp"
  // unreachable; //@line 217 "hspwnd_dish.cpp"
 } else {
  $19 = $bm; //@line 218 "hspwnd_dish.cpp"
  STACKTOP = sp;return ($19|0); //@line 218 "hspwnd_dish.cpp"
 }
 return 0|0;
}
function __ZN6HspWnd16GetEmptyBufferIdEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $bm = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $this;
 $2 = $1;
 $i = 0; //@line 228 "hspwnd_dish.cpp"
 while(1) {
  $3 = $i; //@line 228 "hspwnd_dish.cpp"
  $4 = (($2) + 36|0); //@line 228 "hspwnd_dish.cpp"
  $5 = HEAP32[$4>>2]|0; //@line 228 "hspwnd_dish.cpp"
  $6 = ($3|0)<($5|0); //@line 228 "hspwnd_dish.cpp"
  if (!($6)) {
   label = 9;
   break;
  }
  $7 = $i; //@line 229 "hspwnd_dish.cpp"
  $8 = (__ZN6HspWnd8GetBmscrEi($2,$7)|0); //@line 229 "hspwnd_dish.cpp"
  $bm = $8; //@line 229 "hspwnd_dish.cpp"
  $9 = $bm; //@line 230 "hspwnd_dish.cpp"
  $10 = ($9|0)==(0|0); //@line 230 "hspwnd_dish.cpp"
  if ($10) {
   label = 4;
   break;
  }
  $12 = $bm; //@line 231 "hspwnd_dish.cpp"
  $13 = HEAP32[$12>>2]|0; //@line 231 "hspwnd_dish.cpp"
  $14 = ($13|0)==(0); //@line 231 "hspwnd_dish.cpp"
  if ($14) {
   label = 6;
   break;
  }
  $16 = $i; //@line 228 "hspwnd_dish.cpp"
  $17 = (($16) + 1)|0; //@line 228 "hspwnd_dish.cpp"
  $i = $17; //@line 228 "hspwnd_dish.cpp"
 }
 if ((label|0) == 4) {
  $11 = $i; //@line 230 "hspwnd_dish.cpp"
  $0 = $11; //@line 230 "hspwnd_dish.cpp"
  $20 = $0; //@line 234 "hspwnd_dish.cpp"
  STACKTOP = sp;return ($20|0); //@line 234 "hspwnd_dish.cpp"
 }
 else if ((label|0) == 6) {
  $15 = $i; //@line 231 "hspwnd_dish.cpp"
  $0 = $15; //@line 231 "hspwnd_dish.cpp"
  $20 = $0; //@line 234 "hspwnd_dish.cpp"
  STACKTOP = sp;return ($20|0); //@line 234 "hspwnd_dish.cpp"
 }
 else if ((label|0) == 9) {
  $18 = (($2) + 36|0); //@line 233 "hspwnd_dish.cpp"
  $19 = HEAP32[$18>>2]|0; //@line 233 "hspwnd_dish.cpp"
  $0 = $19; //@line 233 "hspwnd_dish.cpp"
  $20 = $0; //@line 234 "hspwnd_dish.cpp"
  STACKTOP = sp;return ($20|0); //@line 234 "hspwnd_dish.cpp"
 }
 return 0|0;
}
function __ZN5BmscrC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 HEAP32[$1>>2] = 0; //@line 278 "hspwnd_dish.cpp"
 STACKTOP = sp;return; //@line 279 "hspwnd_dish.cpp"
}
function __ZN5BmscrD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0; //@line 285 "hspwnd_dish.cpp"
 $3 = ($2|0)==(1); //@line 285 "hspwnd_dish.cpp"
 if (!($3)) {
  STACKTOP = sp;return; //@line 289 "hspwnd_dish.cpp"
 }
 __ZN5Bmscr14ResetHSPObjectEv($1); //@line 286 "hspwnd_dish.cpp"
 _hgio_delscreen($1); //@line 287 "hspwnd_dish.cpp"
 STACKTOP = sp;return; //@line 289 "hspwnd_dish.cpp"
}
function __ZN5Bmscr3ClsEi($this,$mode) {
 $this = $this|0;
 $mode = $mode|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $mode;
 $2 = $0;
 __ZN5Bmscr7SetFontEPcii($2,3976,18,0); //@line 341 "hspwnd_dish.cpp"
 __ZN5Bmscr14ResetHSPObjectEv($2); //@line 346 "hspwnd_dish.cpp"
 $3 = (($2) + 284|0); //@line 347 "hspwnd_dish.cpp"
 HEAP16[$3>>1] = 0; //@line 347 "hspwnd_dish.cpp"
 $4 = (($2) + 286|0); //@line 348 "hspwnd_dish.cpp"
 HEAP16[$4>>1] = 0; //@line 348 "hspwnd_dish.cpp"
 $5 = (($2) + 288|0); //@line 349 "hspwnd_dish.cpp"
 HEAP32[$5>>2] = 0; //@line 349 "hspwnd_dish.cpp"
 $6 = (($2) + 68|0); //@line 353 "hspwnd_dish.cpp"
 HEAP32[$6>>2] = 0; //@line 353 "hspwnd_dish.cpp"
 $7 = (($2) + 72|0); //@line 353 "hspwnd_dish.cpp"
 HEAP32[$7>>2] = 0; //@line 353 "hspwnd_dish.cpp"
 __ZN5Bmscr8SetcolorEiii($2,0,0,0); //@line 354 "hspwnd_dish.cpp"
 $8 = (($2) + 108|0); //@line 358 "hspwnd_dish.cpp"
 HEAP32[$8>>2] = 0; //@line 358 "hspwnd_dish.cpp"
 $9 = (($2) + 76|0); //@line 359 "hspwnd_dish.cpp"
 HEAP32[$9>>2] = 64; //@line 359 "hspwnd_dish.cpp"
 $10 = (($2) + 80|0); //@line 359 "hspwnd_dish.cpp"
 HEAP32[$10>>2] = 32; //@line 359 "hspwnd_dish.cpp"
 $11 = (($2) + 84|0); //@line 359 "hspwnd_dish.cpp"
 HEAP32[$11>>2] = 0; //@line 359 "hspwnd_dish.cpp"
 $12 = (($2) + 92|0); //@line 360 "hspwnd_dish.cpp"
 HEAP32[$12>>2] = 32; //@line 360 "hspwnd_dish.cpp"
 $13 = (($2) + 96|0); //@line 360 "hspwnd_dish.cpp"
 HEAP32[$13>>2] = 32; //@line 360 "hspwnd_dish.cpp"
 $14 = (($2) + 100|0); //@line 360 "hspwnd_dish.cpp"
 HEAP32[$14>>2] = 0; //@line 360 "hspwnd_dish.cpp"
 $15 = (($2) + 160|0); //@line 361 "hspwnd_dish.cpp"
 HEAP32[$15>>2] = 0; //@line 361 "hspwnd_dish.cpp"
 $i = 0; //@line 362 "hspwnd_dish.cpp"
 while(1) {
  $16 = $i; //@line 362 "hspwnd_dish.cpp"
  $17 = ($16|0)<(4); //@line 362 "hspwnd_dish.cpp"
  if (!($17)) {
   break;
  }
  $18 = $i; //@line 362 "hspwnd_dish.cpp"
  $19 = (($2) + 176|0); //@line 362 "hspwnd_dish.cpp"
  $20 = (($19) + ($18<<1)|0); //@line 362 "hspwnd_dish.cpp"
  HEAP16[$20>>1] = 0; //@line 362 "hspwnd_dish.cpp"
  $21 = $i; //@line 362 "hspwnd_dish.cpp"
  $22 = (($21) + 1)|0; //@line 362 "hspwnd_dish.cpp"
  $i = $22; //@line 362 "hspwnd_dish.cpp"
 }
 __ZN5Bmscr16SetCelDivideSizeEiiii($2,0,0,0,0); //@line 366 "hspwnd_dish.cpp"
 $23 = (($2) + 36|0); //@line 370 "hspwnd_dish.cpp"
 $24 = HEAP16[$23>>1]|0; //@line 370 "hspwnd_dish.cpp"
 $25 = (($2) + 38|0); //@line 370 "hspwnd_dish.cpp"
 HEAP16[$25>>1] = $24; //@line 370 "hspwnd_dish.cpp"
 $26 = (($2) + 32|0); //@line 374 "hspwnd_dish.cpp"
 $27 = HEAP32[$26>>2]|0; //@line 374 "hspwnd_dish.cpp"
 $28 = ($27|0)==(0); //@line 374 "hspwnd_dish.cpp"
 if (!($28)) {
  __ZN5Bmscr11resetMTouchEv($2); //@line 379 "hspwnd_dish.cpp"
  STACKTOP = sp;return; //@line 380 "hspwnd_dish.cpp"
 }
 _hgio_screen($2); //@line 375 "hspwnd_dish.cpp"
 __ZN5Bmscr11resetMTouchEv($2); //@line 379 "hspwnd_dish.cpp"
 STACKTOP = sp;return; //@line 380 "hspwnd_dish.cpp"
}
function __ZN5Bmscr7SetFontEPcii($this,$fontname,$size,$style) {
 $this = $this|0;
 $fontname = $fontname|0;
 $size = $size|0;
 $style = $style|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $fontname;
 $2 = $size;
 $3 = $style;
 $4 = $0;
 $5 = (($4) + 568|0); //@line 433 "hspwnd_dish.cpp"
 $6 = $1; //@line 433 "hspwnd_dish.cpp"
 (_strncpy(($5|0),($6|0),63)|0); //@line 433 "hspwnd_dish.cpp"
 $7 = $2; //@line 434 "hspwnd_dish.cpp"
 $8 = (($4) + 632|0); //@line 434 "hspwnd_dish.cpp"
 HEAP32[$8>>2] = $7; //@line 434 "hspwnd_dish.cpp"
 $9 = $3; //@line 435 "hspwnd_dish.cpp"
 $10 = (($4) + 636|0); //@line 435 "hspwnd_dish.cpp"
 HEAP32[$10>>2] = $9; //@line 435 "hspwnd_dish.cpp"
 $11 = $1; //@line 437 "hspwnd_dish.cpp"
 $12 = $2; //@line 437 "hspwnd_dish.cpp"
 $13 = $3; //@line 437 "hspwnd_dish.cpp"
 (_hgio_font($11,$12,$13)|0); //@line 437 "hspwnd_dish.cpp"
 STACKTOP = sp;return; //@line 438 "hspwnd_dish.cpp"
}
function __ZN5Bmscr8SetcolorEiii($this,$a1,$a2,$a3) {
 $this = $this|0;
 $a1 = $a1|0;
 $a2 = $a2|0;
 $a3 = $a3|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $a1;
 $2 = $a2;
 $3 = $a3;
 $4 = $0;
 $5 = $1; //@line 402 "hspwnd_dish.cpp"
 $6 = $5 & 255; //@line 402 "hspwnd_dish.cpp"
 $7 = $6 << 16; //@line 402 "hspwnd_dish.cpp"
 $8 = -16777216 | $7; //@line 402 "hspwnd_dish.cpp"
 $9 = $2; //@line 402 "hspwnd_dish.cpp"
 $10 = $9 & 255; //@line 402 "hspwnd_dish.cpp"
 $11 = $10 << 8; //@line 402 "hspwnd_dish.cpp"
 $12 = $8 | $11; //@line 402 "hspwnd_dish.cpp"
 $13 = $3; //@line 402 "hspwnd_dish.cpp"
 $14 = $13 & 255; //@line 402 "hspwnd_dish.cpp"
 $15 = $12 | $14; //@line 402 "hspwnd_dish.cpp"
 $16 = (($4) + 104|0); //@line 402 "hspwnd_dish.cpp"
 HEAP32[$16>>2] = $15; //@line 402 "hspwnd_dish.cpp"
 STACKTOP = sp;return; //@line 411 "hspwnd_dish.cpp"
}
function __ZN5Bmscr16SetCelDivideSizeEiiii($this,$new_divsx,$new_divsy,$new_ofsx,$new_ofsy) {
 $this = $this|0;
 $new_divsx = $new_divsx|0;
 $new_divsy = $new_divsy|0;
 $new_ofsx = $new_ofsx|0;
 $new_ofsy = $new_ofsy|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $this;
 $1 = $new_divsx;
 $2 = $new_divsy;
 $3 = $new_ofsx;
 $4 = $new_ofsy;
 $5 = $0;
 $6 = $1; //@line 678 "hspwnd_dish.cpp"
 $7 = ($6|0)>(0); //@line 678 "hspwnd_dish.cpp"
 if ($7) {
  $8 = $1; //@line 678 "hspwnd_dish.cpp"
  $9 = $8&65535; //@line 678 "hspwnd_dish.cpp"
  $10 = (($5) + 208|0); //@line 678 "hspwnd_dish.cpp"
  HEAP16[$10>>1] = $9; //@line 678 "hspwnd_dish.cpp"
 } else {
  $11 = (($5) + 4|0); //@line 678 "hspwnd_dish.cpp"
  $12 = HEAP32[$11>>2]|0; //@line 678 "hspwnd_dish.cpp"
  $13 = $12&65535; //@line 678 "hspwnd_dish.cpp"
  $14 = (($5) + 208|0); //@line 678 "hspwnd_dish.cpp"
  HEAP16[$14>>1] = $13; //@line 678 "hspwnd_dish.cpp"
 }
 $15 = $2; //@line 679 "hspwnd_dish.cpp"
 $16 = ($15|0)>(0); //@line 679 "hspwnd_dish.cpp"
 if ($16) {
  $17 = $2; //@line 679 "hspwnd_dish.cpp"
  $18 = $17&65535; //@line 679 "hspwnd_dish.cpp"
  $19 = (($5) + 210|0); //@line 679 "hspwnd_dish.cpp"
  HEAP16[$19>>1] = $18; //@line 679 "hspwnd_dish.cpp"
 } else {
  $20 = (($5) + 8|0); //@line 679 "hspwnd_dish.cpp"
  $21 = HEAP32[$20>>2]|0; //@line 679 "hspwnd_dish.cpp"
  $22 = $21&65535; //@line 679 "hspwnd_dish.cpp"
  $23 = (($5) + 210|0); //@line 679 "hspwnd_dish.cpp"
  HEAP16[$23>>1] = $22; //@line 679 "hspwnd_dish.cpp"
 }
 $24 = (($5) + 4|0); //@line 680 "hspwnd_dish.cpp"
 $25 = HEAP32[$24>>2]|0; //@line 680 "hspwnd_dish.cpp"
 $26 = (($5) + 208|0); //@line 680 "hspwnd_dish.cpp"
 $27 = HEAP16[$26>>1]|0; //@line 680 "hspwnd_dish.cpp"
 $28 = $27 << 16 >> 16; //@line 680 "hspwnd_dish.cpp"
 $29 = (($25|0) / ($28|0))&-1; //@line 680 "hspwnd_dish.cpp"
 $30 = $29&65535; //@line 680 "hspwnd_dish.cpp"
 $31 = (($5) + 204|0); //@line 680 "hspwnd_dish.cpp"
 HEAP16[$31>>1] = $30; //@line 680 "hspwnd_dish.cpp"
 $32 = (($5) + 8|0); //@line 681 "hspwnd_dish.cpp"
 $33 = HEAP32[$32>>2]|0; //@line 681 "hspwnd_dish.cpp"
 $34 = (($5) + 210|0); //@line 681 "hspwnd_dish.cpp"
 $35 = HEAP16[$34>>1]|0; //@line 681 "hspwnd_dish.cpp"
 $36 = $35 << 16 >> 16; //@line 681 "hspwnd_dish.cpp"
 $37 = (($33|0) / ($36|0))&-1; //@line 681 "hspwnd_dish.cpp"
 $38 = $37&65535; //@line 681 "hspwnd_dish.cpp"
 $39 = (($5) + 206|0); //@line 681 "hspwnd_dish.cpp"
 HEAP16[$39>>1] = $38; //@line 681 "hspwnd_dish.cpp"
 $40 = $3; //@line 682 "hspwnd_dish.cpp"
 $41 = $40&65535; //@line 682 "hspwnd_dish.cpp"
 $42 = (($5) + 212|0); //@line 682 "hspwnd_dish.cpp"
 HEAP16[$42>>1] = $41; //@line 682 "hspwnd_dish.cpp"
 $43 = $4; //@line 683 "hspwnd_dish.cpp"
 $44 = $43&65535; //@line 683 "hspwnd_dish.cpp"
 $45 = (($5) + 214|0); //@line 683 "hspwnd_dish.cpp"
 HEAP16[$45>>1] = $44; //@line 683 "hspwnd_dish.cpp"
 STACKTOP = sp;return; //@line 684 "hspwnd_dish.cpp"
}
function __ZN5Bmscr11resetMTouchEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $mt = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 296|0); //@line 836 "hspwnd_dish.cpp"
 $mt = $2; //@line 836 "hspwnd_dish.cpp"
 $3 = (($1) + 292|0); //@line 837 "hspwnd_dish.cpp"
 HEAP32[$3>>2] = 0; //@line 837 "hspwnd_dish.cpp"
 $i = 0; //@line 838 "hspwnd_dish.cpp"
 while(1) {
  $4 = $i; //@line 838 "hspwnd_dish.cpp"
  $5 = ($4|0)<(16); //@line 838 "hspwnd_dish.cpp"
  if (!($5)) {
   break;
  }
  $6 = $mt; //@line 839 "hspwnd_dish.cpp"
  HEAP32[$6>>2] = 0; //@line 839 "hspwnd_dish.cpp"
  $7 = $mt; //@line 840 "hspwnd_dish.cpp"
  $8 = (($7) + 4|0); //@line 840 "hspwnd_dish.cpp"
  HEAP32[$8>>2] = 0; //@line 840 "hspwnd_dish.cpp"
  $9 = $mt; //@line 840 "hspwnd_dish.cpp"
  $10 = (($9) + 8|0); //@line 840 "hspwnd_dish.cpp"
  HEAP32[$10>>2] = 0; //@line 840 "hspwnd_dish.cpp"
  $11 = $mt; //@line 841 "hspwnd_dish.cpp"
  $12 = (($11) + 12|0); //@line 841 "hspwnd_dish.cpp"
  HEAP32[$12>>2] = -2; //@line 841 "hspwnd_dish.cpp"
  $13 = $mt; //@line 842 "hspwnd_dish.cpp"
  $14 = (($13) + 16|0); //@line 842 "hspwnd_dish.cpp"
  $mt = $14; //@line 842 "hspwnd_dish.cpp"
  $15 = $i; //@line 838 "hspwnd_dish.cpp"
  $16 = (($15) + 1)|0; //@line 838 "hspwnd_dish.cpp"
  $i = $16; //@line 838 "hspwnd_dish.cpp"
 }
 STACKTOP = sp;return; //@line 848 "hspwnd_dish.cpp"
}
function __ZN5Bmscr5TitleEPc($this,$str) {
 $this = $this|0;
 $str = $str|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $str;
 $2 = $1; //@line 385 "hspwnd_dish.cpp"
 (_hgio_title($2)|0); //@line 385 "hspwnd_dish.cpp"
 STACKTOP = sp;return; //@line 386 "hspwnd_dish.cpp"
}
function __ZN5Bmscr5WidthEiiiii($this,$x,$y,$wposx,$wposy,$mode) {
 $this = $this|0;
 $x = $x|0;
 $y = $y|0;
 $wposx = $wposx|0;
 $wposy = $wposy|0;
 $mode = $mode|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $this;
 $1 = $x;
 $2 = $y;
 $3 = $wposx;
 $4 = $wposy;
 $5 = $mode;
 STACKTOP = sp;return; //@line 391 "hspwnd_dish.cpp"
}
function __ZN5Bmscr6PosincEi($this,$pp) {
 $this = $this|0;
 $pp = $pp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $pp;
 $2 = $0;
 $3 = $1; //@line 396 "hspwnd_dish.cpp"
 $4 = (($2) + 84|0); //@line 396 "hspwnd_dish.cpp"
 $5 = HEAP32[$4>>2]|0; //@line 396 "hspwnd_dish.cpp"
 $6 = ($3|0)<($5|0); //@line 396 "hspwnd_dish.cpp"
 if ($6) {
  $7 = (($2) + 84|0); //@line 396 "hspwnd_dish.cpp"
  $8 = HEAP32[$7>>2]|0; //@line 396 "hspwnd_dish.cpp"
  $9 = (($2) + 72|0); //@line 396 "hspwnd_dish.cpp"
  $10 = HEAP32[$9>>2]|0; //@line 396 "hspwnd_dish.cpp"
  $11 = (($10) + ($8))|0; //@line 396 "hspwnd_dish.cpp"
  HEAP32[$9>>2] = $11; //@line 396 "hspwnd_dish.cpp"
  STACKTOP = sp;return; //@line 397 "hspwnd_dish.cpp"
 } else {
  $12 = $1; //@line 396 "hspwnd_dish.cpp"
  $13 = (($2) + 72|0); //@line 396 "hspwnd_dish.cpp"
  $14 = HEAP32[$13>>2]|0; //@line 396 "hspwnd_dish.cpp"
  $15 = (($14) + ($12))|0; //@line 396 "hspwnd_dish.cpp"
  HEAP32[$13>>2] = $15; //@line 396 "hspwnd_dish.cpp"
  STACKTOP = sp;return; //@line 397 "hspwnd_dish.cpp"
 }
}
function __ZN5Bmscr8SetcolorEi($this,$icolor) {
 $this = $this|0;
 $icolor = $icolor|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $icolor;
 $2 = $0;
 $3 = $1; //@line 416 "hspwnd_dish.cpp"
 $4 = (($2) + 104|0); //@line 416 "hspwnd_dish.cpp"
 HEAP32[$4>>2] = $3; //@line 416 "hspwnd_dish.cpp"
 STACKTOP = sp;return; //@line 428 "hspwnd_dish.cpp"
}
function __ZN5Bmscr14SetDefaultFontEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 568|0); //@line 443 "hspwnd_dish.cpp"
 $3 = (($1) + 632|0); //@line 443 "hspwnd_dish.cpp"
 $4 = HEAP32[$3>>2]|0; //@line 443 "hspwnd_dish.cpp"
 $5 = (($1) + 636|0); //@line 443 "hspwnd_dish.cpp"
 $6 = HEAP32[$5>>2]|0; //@line 443 "hspwnd_dish.cpp"
 __ZN5Bmscr7SetFontEPcii($1,$2,$4,$6); //@line 443 "hspwnd_dish.cpp"
 STACKTOP = sp;return; //@line 444 "hspwnd_dish.cpp"
}
function __ZN5Bmscr15SetFontInternalEPcii($this,$fontname,$size,$style) {
 $this = $this|0;
 $fontname = $fontname|0;
 $size = $size|0;
 $style = $style|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $fontname;
 $2 = $size;
 $3 = $style;
 $4 = $1; //@line 450 "hspwnd_dish.cpp"
 $5 = $2; //@line 450 "hspwnd_dish.cpp"
 $6 = $3; //@line 450 "hspwnd_dish.cpp"
 (_hgio_font($4,$5,$6)|0); //@line 450 "hspwnd_dish.cpp"
 STACKTOP = sp;return; //@line 451 "hspwnd_dish.cpp"
}
function __ZN5Bmscr5PrintEPc($this,$mes) {
 $this = $this|0;
 $mes = $mes|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $mes;
 $2 = $0;
 $3 = $1; //@line 456 "hspwnd_dish.cpp"
 (_hgio_mes($2,$3)|0); //@line 456 "hspwnd_dish.cpp"
 $4 = (($2) + 158|0); //@line 457 "hspwnd_dish.cpp"
 $5 = HEAP16[$4>>1]|0; //@line 457 "hspwnd_dish.cpp"
 $6 = $5 << 16 >> 16; //@line 457 "hspwnd_dish.cpp"
 __ZN5Bmscr6PosincEi($2,$6); //@line 457 "hspwnd_dish.cpp"
 STACKTOP = sp;return; //@line 458 "hspwnd_dish.cpp"
}
function __ZN5Bmscr7BoxfillEiiii($this,$x1,$y1,$x2,$y2) {
 $this = $this|0;
 $x1 = $x1|0;
 $y1 = $y1|0;
 $x2 = $x2|0;
 $y2 = $y2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $this;
 $1 = $x1;
 $2 = $y1;
 $3 = $x2;
 $4 = $y2;
 $5 = $0;
 $6 = $1; //@line 464 "hspwnd_dish.cpp"
 $7 = (+($6|0)); //@line 464 "hspwnd_dish.cpp"
 $8 = $2; //@line 464 "hspwnd_dish.cpp"
 $9 = (+($8|0)); //@line 464 "hspwnd_dish.cpp"
 $10 = $3; //@line 464 "hspwnd_dish.cpp"
 $11 = (+($10|0)); //@line 464 "hspwnd_dish.cpp"
 $12 = $4; //@line 464 "hspwnd_dish.cpp"
 $13 = (+($12|0)); //@line 464 "hspwnd_dish.cpp"
 _hgio_boxf($5,$7,$9,$11,$13); //@line 464 "hspwnd_dish.cpp"
 STACKTOP = sp;return; //@line 465 "hspwnd_dish.cpp"
}
function __ZN5Bmscr4PsetEii($this,$xx,$yy) {
 $this = $this|0;
 $xx = $xx|0;
 $yy = $yy|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $xx;
 $2 = $yy;
 $3 = $0;
 $4 = $1; //@line 480 "hspwnd_dish.cpp"
 $5 = (+($4|0)); //@line 480 "hspwnd_dish.cpp"
 $6 = $2; //@line 480 "hspwnd_dish.cpp"
 $7 = (+($6|0)); //@line 480 "hspwnd_dish.cpp"
 _hgio_line($3,$5,$7); //@line 480 "hspwnd_dish.cpp"
 $8 = $1; //@line 481 "hspwnd_dish.cpp"
 $9 = (+($8|0)); //@line 481 "hspwnd_dish.cpp"
 $10 = $2; //@line 481 "hspwnd_dish.cpp"
 $11 = (+($10|0)); //@line 481 "hspwnd_dish.cpp"
 _hgio_line2($9,$11); //@line 481 "hspwnd_dish.cpp"
 _hgio_line(0,0.0,0.0); //@line 482 "hspwnd_dish.cpp"
 STACKTOP = sp;return; //@line 483 "hspwnd_dish.cpp"
}
function __ZN5Bmscr4LineEii($this,$xx,$yy) {
 $this = $this|0;
 $xx = $xx|0;
 $yy = $yy|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $xx;
 $2 = $yy;
 $3 = $0;
 $4 = (($3) + 68|0); //@line 490 "hspwnd_dish.cpp"
 $5 = HEAP32[$4>>2]|0; //@line 490 "hspwnd_dish.cpp"
 $6 = (+($5|0)); //@line 490 "hspwnd_dish.cpp"
 $7 = (($3) + 72|0); //@line 490 "hspwnd_dish.cpp"
 $8 = HEAP32[$7>>2]|0; //@line 490 "hspwnd_dish.cpp"
 $9 = (+($8|0)); //@line 490 "hspwnd_dish.cpp"
 _hgio_line($3,$6,$9); //@line 490 "hspwnd_dish.cpp"
 $10 = $1; //@line 491 "hspwnd_dish.cpp"
 $11 = (+($10|0)); //@line 491 "hspwnd_dish.cpp"
 $12 = $2; //@line 491 "hspwnd_dish.cpp"
 $13 = (+($12|0)); //@line 491 "hspwnd_dish.cpp"
 _hgio_line2($11,$13); //@line 491 "hspwnd_dish.cpp"
 _hgio_line(0,0.0,0.0); //@line 492 "hspwnd_dish.cpp"
 $14 = $1; //@line 493 "hspwnd_dish.cpp"
 $15 = (($3) + 68|0); //@line 493 "hspwnd_dish.cpp"
 HEAP32[$15>>2] = $14; //@line 493 "hspwnd_dish.cpp"
 $16 = $2; //@line 493 "hspwnd_dish.cpp"
 $17 = (($3) + 72|0); //@line 493 "hspwnd_dish.cpp"
 HEAP32[$17>>2] = $16; //@line 493 "hspwnd_dish.cpp"
 STACKTOP = sp;return; //@line 509 "hspwnd_dish.cpp"
}
function __ZN5Bmscr6CircleEiiiii($this,$x1,$y1,$x2,$y2,$mode) {
 $this = $this|0;
 $x1 = $x1|0;
 $y1 = $y1|0;
 $x2 = $x2|0;
 $y2 = $y2|0;
 $mode = $mode|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $this;
 $1 = $x1;
 $2 = $y1;
 $3 = $x2;
 $4 = $y2;
 $5 = $mode;
 $6 = $0;
 $7 = $1; //@line 517 "hspwnd_dish.cpp"
 $8 = (+($7|0)); //@line 517 "hspwnd_dish.cpp"
 $9 = $2; //@line 517 "hspwnd_dish.cpp"
 $10 = (+($9|0)); //@line 517 "hspwnd_dish.cpp"
 $11 = $3; //@line 517 "hspwnd_dish.cpp"
 $12 = (+($11|0)); //@line 517 "hspwnd_dish.cpp"
 $13 = $4; //@line 517 "hspwnd_dish.cpp"
 $14 = (+($13|0)); //@line 517 "hspwnd_dish.cpp"
 $15 = $5; //@line 517 "hspwnd_dish.cpp"
 _hgio_circle($6,$8,$10,$12,$14,$15); //@line 517 "hspwnd_dish.cpp"
 STACKTOP = sp;return; //@line 518 "hspwnd_dish.cpp"
}
function __ZN5Bmscr4CopyEPS_iiii($this,$src,$xx,$yy,$s_psx,$s_psy) {
 $this = $this|0;
 $src = $src|0;
 $xx = $xx|0;
 $yy = $yy|0;
 $s_psx = $s_psx|0;
 $s_psy = $s_psy|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0.0;
 var $63 = 0, $7 = 0, $8 = 0, $9 = 0, $psx = 0, $psy = 0, $texpx = 0, $texpy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $1 = $this;
 $2 = $src;
 $3 = $xx;
 $4 = $yy;
 $5 = $s_psx;
 $6 = $s_psy;
 $7 = $1;
 $8 = $5; //@line 528 "hspwnd_dish.cpp"
 $psx = $8; //@line 528 "hspwnd_dish.cpp"
 $9 = $6; //@line 529 "hspwnd_dish.cpp"
 $psy = $9; //@line 529 "hspwnd_dish.cpp"
 $10 = $3; //@line 530 "hspwnd_dish.cpp"
 $11 = $5; //@line 530 "hspwnd_dish.cpp"
 $12 = (($10) + ($11))|0; //@line 530 "hspwnd_dish.cpp"
 $texpx = $12; //@line 530 "hspwnd_dish.cpp"
 $13 = $4; //@line 531 "hspwnd_dish.cpp"
 $14 = $6; //@line 531 "hspwnd_dish.cpp"
 $15 = (($13) + ($14))|0; //@line 531 "hspwnd_dish.cpp"
 $texpy = $15; //@line 531 "hspwnd_dish.cpp"
 $16 = $texpx; //@line 532 "hspwnd_dish.cpp"
 $17 = ($16|0)<(0); //@line 532 "hspwnd_dish.cpp"
 if ($17) {
  $0 = -1; //@line 532 "hspwnd_dish.cpp"
  $63 = $0; //@line 543 "hspwnd_dish.cpp"
  STACKTOP = sp;return ($63|0); //@line 543 "hspwnd_dish.cpp"
 }
 $18 = $texpx; //@line 533 "hspwnd_dish.cpp"
 $19 = $2; //@line 533 "hspwnd_dish.cpp"
 $20 = (($19) + 4|0); //@line 533 "hspwnd_dish.cpp"
 $21 = HEAP32[$20>>2]|0; //@line 533 "hspwnd_dish.cpp"
 $22 = ($18|0)>=($21|0); //@line 533 "hspwnd_dish.cpp"
 do {
  if ($22) {
   $23 = $3; //@line 534 "hspwnd_dish.cpp"
   $24 = $2; //@line 534 "hspwnd_dish.cpp"
   $25 = (($24) + 4|0); //@line 534 "hspwnd_dish.cpp"
   $26 = HEAP32[$25>>2]|0; //@line 534 "hspwnd_dish.cpp"
   $27 = ($23|0)>=($26|0); //@line 534 "hspwnd_dish.cpp"
   if (!($27)) {
    $28 = $2; //@line 535 "hspwnd_dish.cpp"
    $29 = (($28) + 4|0); //@line 535 "hspwnd_dish.cpp"
    $30 = HEAP32[$29>>2]|0; //@line 535 "hspwnd_dish.cpp"
    $31 = $3; //@line 535 "hspwnd_dish.cpp"
    $32 = (($30) - ($31))|0; //@line 535 "hspwnd_dish.cpp"
    $psx = $32; //@line 535 "hspwnd_dish.cpp"
    break;
   }
   $0 = -1; //@line 534 "hspwnd_dish.cpp"
   $63 = $0; //@line 543 "hspwnd_dish.cpp"
   STACKTOP = sp;return ($63|0); //@line 543 "hspwnd_dish.cpp"
  }
 } while(0);
 $33 = $texpy; //@line 537 "hspwnd_dish.cpp"
 $34 = ($33|0)<(0); //@line 537 "hspwnd_dish.cpp"
 if ($34) {
  $0 = -1; //@line 537 "hspwnd_dish.cpp"
  $63 = $0; //@line 543 "hspwnd_dish.cpp"
  STACKTOP = sp;return ($63|0); //@line 543 "hspwnd_dish.cpp"
 }
 $35 = $texpy; //@line 538 "hspwnd_dish.cpp"
 $36 = $2; //@line 538 "hspwnd_dish.cpp"
 $37 = (($36) + 8|0); //@line 538 "hspwnd_dish.cpp"
 $38 = HEAP32[$37>>2]|0; //@line 538 "hspwnd_dish.cpp"
 $39 = ($35|0)>=($38|0); //@line 538 "hspwnd_dish.cpp"
 do {
  if ($39) {
   $40 = $4; //@line 539 "hspwnd_dish.cpp"
   $41 = $2; //@line 539 "hspwnd_dish.cpp"
   $42 = (($41) + 8|0); //@line 539 "hspwnd_dish.cpp"
   $43 = HEAP32[$42>>2]|0; //@line 539 "hspwnd_dish.cpp"
   $44 = ($40|0)>=($43|0); //@line 539 "hspwnd_dish.cpp"
   if (!($44)) {
    $45 = $2; //@line 540 "hspwnd_dish.cpp"
    $46 = (($45) + 8|0); //@line 540 "hspwnd_dish.cpp"
    $47 = HEAP32[$46>>2]|0; //@line 540 "hspwnd_dish.cpp"
    $48 = $4; //@line 540 "hspwnd_dish.cpp"
    $49 = (($47) - ($48))|0; //@line 540 "hspwnd_dish.cpp"
    $psy = $49; //@line 540 "hspwnd_dish.cpp"
    break;
   }
   $0 = -1; //@line 539 "hspwnd_dish.cpp"
   $63 = $0; //@line 543 "hspwnd_dish.cpp"
   STACKTOP = sp;return ($63|0); //@line 543 "hspwnd_dish.cpp"
  }
 } while(0);
 $50 = $3; //@line 542 "hspwnd_dish.cpp"
 $51 = $50&65535; //@line 542 "hspwnd_dish.cpp"
 $52 = $4; //@line 542 "hspwnd_dish.cpp"
 $53 = $52&65535; //@line 542 "hspwnd_dish.cpp"
 $54 = $psx; //@line 542 "hspwnd_dish.cpp"
 $55 = $54&65535; //@line 542 "hspwnd_dish.cpp"
 $56 = $psy; //@line 542 "hspwnd_dish.cpp"
 $57 = $56&65535; //@line 542 "hspwnd_dish.cpp"
 $58 = $2; //@line 542 "hspwnd_dish.cpp"
 $59 = $psx; //@line 542 "hspwnd_dish.cpp"
 $60 = (+($59|0)); //@line 542 "hspwnd_dish.cpp"
 $61 = $psy; //@line 542 "hspwnd_dish.cpp"
 $62 = (+($61|0)); //@line 542 "hspwnd_dish.cpp"
 _hgio_copy($7,$51,$53,$55,$57,$58,$60,$62); //@line 542 "hspwnd_dish.cpp"
 $0 = 0; //@line 543 "hspwnd_dish.cpp"
 $63 = $0; //@line 543 "hspwnd_dish.cpp"
 STACKTOP = sp;return ($63|0); //@line 543 "hspwnd_dish.cpp"
}
function __ZN5Bmscr4ZoomEiiPS_iiiii($this,$dx,$dy,$src,$xx,$yy,$s_psx,$s_psy,$mode) {
 $this = $this|0;
 $dx = $dx|0;
 $dy = $dy|0;
 $src = $src|0;
 $xx = $xx|0;
 $yy = $yy|0;
 $s_psx = $s_psx|0;
 $s_psy = $s_psy|0;
 $mode = $mode|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0.0, $64 = 0, $65 = 0.0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $psx = 0, $psy = 0, $texpx = 0, $texpy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $1 = $this;
 $2 = $dx;
 $3 = $dy;
 $4 = $src;
 $5 = $xx;
 $6 = $yy;
 $7 = $s_psx;
 $8 = $s_psy;
 $9 = $mode;
 $10 = $1;
 $11 = $7; //@line 553 "hspwnd_dish.cpp"
 $psx = $11; //@line 553 "hspwnd_dish.cpp"
 $12 = $8; //@line 554 "hspwnd_dish.cpp"
 $psy = $12; //@line 554 "hspwnd_dish.cpp"
 $13 = $5; //@line 555 "hspwnd_dish.cpp"
 $14 = $7; //@line 555 "hspwnd_dish.cpp"
 $15 = (($13) + ($14))|0; //@line 555 "hspwnd_dish.cpp"
 $texpx = $15; //@line 555 "hspwnd_dish.cpp"
 $16 = $6; //@line 556 "hspwnd_dish.cpp"
 $17 = $8; //@line 556 "hspwnd_dish.cpp"
 $18 = (($16) + ($17))|0; //@line 556 "hspwnd_dish.cpp"
 $texpy = $18; //@line 556 "hspwnd_dish.cpp"
 $19 = $texpx; //@line 557 "hspwnd_dish.cpp"
 $20 = ($19|0)<(0); //@line 557 "hspwnd_dish.cpp"
 if ($20) {
  $0 = -1; //@line 557 "hspwnd_dish.cpp"
  $66 = $0; //@line 568 "hspwnd_dish.cpp"
  STACKTOP = sp;return ($66|0); //@line 568 "hspwnd_dish.cpp"
 }
 $21 = $texpx; //@line 558 "hspwnd_dish.cpp"
 $22 = $4; //@line 558 "hspwnd_dish.cpp"
 $23 = (($22) + 4|0); //@line 558 "hspwnd_dish.cpp"
 $24 = HEAP32[$23>>2]|0; //@line 558 "hspwnd_dish.cpp"
 $25 = ($21|0)>=($24|0); //@line 558 "hspwnd_dish.cpp"
 do {
  if ($25) {
   $26 = $5; //@line 559 "hspwnd_dish.cpp"
   $27 = $4; //@line 559 "hspwnd_dish.cpp"
   $28 = (($27) + 4|0); //@line 559 "hspwnd_dish.cpp"
   $29 = HEAP32[$28>>2]|0; //@line 559 "hspwnd_dish.cpp"
   $30 = ($26|0)>=($29|0); //@line 559 "hspwnd_dish.cpp"
   if (!($30)) {
    $31 = $4; //@line 560 "hspwnd_dish.cpp"
    $32 = (($31) + 4|0); //@line 560 "hspwnd_dish.cpp"
    $33 = HEAP32[$32>>2]|0; //@line 560 "hspwnd_dish.cpp"
    $34 = $5; //@line 560 "hspwnd_dish.cpp"
    $35 = (($33) - ($34))|0; //@line 560 "hspwnd_dish.cpp"
    $psx = $35; //@line 560 "hspwnd_dish.cpp"
    break;
   }
   $0 = -1; //@line 559 "hspwnd_dish.cpp"
   $66 = $0; //@line 568 "hspwnd_dish.cpp"
   STACKTOP = sp;return ($66|0); //@line 568 "hspwnd_dish.cpp"
  }
 } while(0);
 $36 = $texpy; //@line 562 "hspwnd_dish.cpp"
 $37 = ($36|0)<(0); //@line 562 "hspwnd_dish.cpp"
 if ($37) {
  $0 = -1; //@line 562 "hspwnd_dish.cpp"
  $66 = $0; //@line 568 "hspwnd_dish.cpp"
  STACKTOP = sp;return ($66|0); //@line 568 "hspwnd_dish.cpp"
 }
 $38 = $texpy; //@line 563 "hspwnd_dish.cpp"
 $39 = $4; //@line 563 "hspwnd_dish.cpp"
 $40 = (($39) + 8|0); //@line 563 "hspwnd_dish.cpp"
 $41 = HEAP32[$40>>2]|0; //@line 563 "hspwnd_dish.cpp"
 $42 = ($38|0)>=($41|0); //@line 563 "hspwnd_dish.cpp"
 do {
  if ($42) {
   $43 = $6; //@line 564 "hspwnd_dish.cpp"
   $44 = $4; //@line 564 "hspwnd_dish.cpp"
   $45 = (($44) + 8|0); //@line 564 "hspwnd_dish.cpp"
   $46 = HEAP32[$45>>2]|0; //@line 564 "hspwnd_dish.cpp"
   $47 = ($43|0)>=($46|0); //@line 564 "hspwnd_dish.cpp"
   if (!($47)) {
    $48 = $4; //@line 565 "hspwnd_dish.cpp"
    $49 = (($48) + 8|0); //@line 565 "hspwnd_dish.cpp"
    $50 = HEAP32[$49>>2]|0; //@line 565 "hspwnd_dish.cpp"
    $51 = $6; //@line 565 "hspwnd_dish.cpp"
    $52 = (($50) - ($51))|0; //@line 565 "hspwnd_dish.cpp"
    $psy = $52; //@line 565 "hspwnd_dish.cpp"
    break;
   }
   $0 = -1; //@line 564 "hspwnd_dish.cpp"
   $66 = $0; //@line 568 "hspwnd_dish.cpp"
   STACKTOP = sp;return ($66|0); //@line 568 "hspwnd_dish.cpp"
  }
 } while(0);
 $53 = $5; //@line 567 "hspwnd_dish.cpp"
 $54 = $53&65535; //@line 567 "hspwnd_dish.cpp"
 $55 = $6; //@line 567 "hspwnd_dish.cpp"
 $56 = $55&65535; //@line 567 "hspwnd_dish.cpp"
 $57 = $psx; //@line 567 "hspwnd_dish.cpp"
 $58 = $57&65535; //@line 567 "hspwnd_dish.cpp"
 $59 = $psy; //@line 567 "hspwnd_dish.cpp"
 $60 = $59&65535; //@line 567 "hspwnd_dish.cpp"
 $61 = $4; //@line 567 "hspwnd_dish.cpp"
 $62 = $2; //@line 567 "hspwnd_dish.cpp"
 $63 = (+($62|0)); //@line 567 "hspwnd_dish.cpp"
 $64 = $3; //@line 567 "hspwnd_dish.cpp"
 $65 = (+($64|0)); //@line 567 "hspwnd_dish.cpp"
 _hgio_copy($10,$54,$56,$58,$60,$61,$63,$65); //@line 567 "hspwnd_dish.cpp"
 $0 = 0; //@line 568 "hspwnd_dish.cpp"
 $66 = $0; //@line 568 "hspwnd_dish.cpp"
 STACKTOP = sp;return ($66|0); //@line 568 "hspwnd_dish.cpp"
}
function __ZN5Bmscr7BmpSaveEPc($this,$fname) {
 $this = $this|0;
 $fname = $fname|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $fname;
 STACKTOP = sp;return 0; //@line 576 "hspwnd_dish.cpp"
}
function __ZN5Bmscr11SetHSVColorEiii($this,$hval,$sval,$vval) {
 $this = $this|0;
 $hval = $hval|0;
 $sval = $sval|0;
 $vval = $vval|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $h = 0, $i = 0, $mp = 0, $mv = 0, $s = 0, $save_b = 0, $save_g = 0, $save_r = 0, $t = 0, $v = 0;
 var $v1 = 0, $v2 = 0, $v3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $0 = $this;
 $1 = $hval;
 $2 = $sval;
 $3 = $vval;
 $4 = $0;
 $mv = 8160; //@line 588 "hspwnd_dish.cpp"
 $mp = 4080; //@line 589 "hspwnd_dish.cpp"
 $5 = $3; //@line 592 "hspwnd_dish.cpp"
 $6 = $5 & 255; //@line 592 "hspwnd_dish.cpp"
 $v = $6; //@line 592 "hspwnd_dish.cpp"
 $7 = $2; //@line 593 "hspwnd_dish.cpp"
 $8 = $7 & 255; //@line 593 "hspwnd_dish.cpp"
 $s = $8; //@line 593 "hspwnd_dish.cpp"
 $9 = $1; //@line 596 "hspwnd_dish.cpp"
 $10 = (($9|0) % 192)&-1; //@line 596 "hspwnd_dish.cpp"
 $h = $10; //@line 596 "hspwnd_dish.cpp"
 $11 = $h; //@line 597 "hspwnd_dish.cpp"
 $12 = (($11|0) / 32)&-1; //@line 597 "hspwnd_dish.cpp"
 $i = $12; //@line 597 "hspwnd_dish.cpp"
 $13 = $h; //@line 598 "hspwnd_dish.cpp"
 $14 = (($13|0) % 32)&-1; //@line 598 "hspwnd_dish.cpp"
 $t = $14; //@line 598 "hspwnd_dish.cpp"
 $15 = $v; //@line 599 "hspwnd_dish.cpp"
 $16 = $mv; //@line 599 "hspwnd_dish.cpp"
 $17 = $s; //@line 599 "hspwnd_dish.cpp"
 $18 = $17<<5; //@line 599 "hspwnd_dish.cpp"
 $19 = (($16) - ($18))|0; //@line 599 "hspwnd_dish.cpp"
 $20 = Math_imul($15, $19)|0; //@line 599 "hspwnd_dish.cpp"
 $21 = $mp; //@line 599 "hspwnd_dish.cpp"
 $22 = (($20) + ($21))|0; //@line 599 "hspwnd_dish.cpp"
 $23 = $mv; //@line 599 "hspwnd_dish.cpp"
 $24 = (($22|0) / ($23|0))&-1; //@line 599 "hspwnd_dish.cpp"
 $v1 = $24; //@line 599 "hspwnd_dish.cpp"
 $25 = $v; //@line 600 "hspwnd_dish.cpp"
 $26 = $mv; //@line 600 "hspwnd_dish.cpp"
 $27 = $s; //@line 600 "hspwnd_dish.cpp"
 $28 = $t; //@line 600 "hspwnd_dish.cpp"
 $29 = Math_imul($27, $28)|0; //@line 600 "hspwnd_dish.cpp"
 $30 = (($26) - ($29))|0; //@line 600 "hspwnd_dish.cpp"
 $31 = Math_imul($25, $30)|0; //@line 600 "hspwnd_dish.cpp"
 $32 = $mp; //@line 600 "hspwnd_dish.cpp"
 $33 = (($31) + ($32))|0; //@line 600 "hspwnd_dish.cpp"
 $34 = $mv; //@line 600 "hspwnd_dish.cpp"
 $35 = (($33|0) / ($34|0))&-1; //@line 600 "hspwnd_dish.cpp"
 $v2 = $35; //@line 600 "hspwnd_dish.cpp"
 $36 = $v; //@line 601 "hspwnd_dish.cpp"
 $37 = $mv; //@line 601 "hspwnd_dish.cpp"
 $38 = $s; //@line 601 "hspwnd_dish.cpp"
 $39 = $t; //@line 601 "hspwnd_dish.cpp"
 $40 = (32 - ($39))|0; //@line 601 "hspwnd_dish.cpp"
 $41 = Math_imul($38, $40)|0; //@line 601 "hspwnd_dish.cpp"
 $42 = (($37) - ($41))|0; //@line 601 "hspwnd_dish.cpp"
 $43 = Math_imul($36, $42)|0; //@line 601 "hspwnd_dish.cpp"
 $44 = $mp; //@line 601 "hspwnd_dish.cpp"
 $45 = (($43) + ($44))|0; //@line 601 "hspwnd_dish.cpp"
 $46 = $mv; //@line 601 "hspwnd_dish.cpp"
 $47 = (($45|0) / ($46|0))&-1; //@line 601 "hspwnd_dish.cpp"
 $v3 = $47; //@line 601 "hspwnd_dish.cpp"
 $48 = $i; //@line 602 "hspwnd_dish.cpp"
 switch ($48|0) {
 case 6: case 0:  {
  $49 = $v; //@line 605 "hspwnd_dish.cpp"
  $save_r = $49; //@line 605 "hspwnd_dish.cpp"
  $50 = $v3; //@line 605 "hspwnd_dish.cpp"
  $save_g = $50; //@line 605 "hspwnd_dish.cpp"
  $51 = $v1; //@line 605 "hspwnd_dish.cpp"
  $save_b = $51; //@line 605 "hspwnd_dish.cpp"
  break;
 }
 case 4:  {
  $61 = $v3; //@line 613 "hspwnd_dish.cpp"
  $save_r = $61; //@line 613 "hspwnd_dish.cpp"
  $62 = $v1; //@line 613 "hspwnd_dish.cpp"
  $save_g = $62; //@line 613 "hspwnd_dish.cpp"
  $63 = $v; //@line 613 "hspwnd_dish.cpp"
  $save_b = $63; //@line 613 "hspwnd_dish.cpp"
  break;
 }
 case 5:  {
  $64 = $v; //@line 615 "hspwnd_dish.cpp"
  $save_r = $64; //@line 615 "hspwnd_dish.cpp"
  $65 = $v1; //@line 615 "hspwnd_dish.cpp"
  $save_g = $65; //@line 615 "hspwnd_dish.cpp"
  $66 = $v2; //@line 615 "hspwnd_dish.cpp"
  $save_b = $66; //@line 615 "hspwnd_dish.cpp"
  break;
 }
 case 3:  {
  $58 = $v1; //@line 611 "hspwnd_dish.cpp"
  $save_r = $58; //@line 611 "hspwnd_dish.cpp"
  $59 = $v2; //@line 611 "hspwnd_dish.cpp"
  $save_g = $59; //@line 611 "hspwnd_dish.cpp"
  $60 = $v; //@line 611 "hspwnd_dish.cpp"
  $save_b = $60; //@line 611 "hspwnd_dish.cpp"
  break;
 }
 case 2:  {
  $55 = $v1; //@line 609 "hspwnd_dish.cpp"
  $save_r = $55; //@line 609 "hspwnd_dish.cpp"
  $56 = $v; //@line 609 "hspwnd_dish.cpp"
  $save_g = $56; //@line 609 "hspwnd_dish.cpp"
  $57 = $v3; //@line 609 "hspwnd_dish.cpp"
  $save_b = $57; //@line 609 "hspwnd_dish.cpp"
  break;
 }
 case 1:  {
  $52 = $v2; //@line 607 "hspwnd_dish.cpp"
  $save_r = $52; //@line 607 "hspwnd_dish.cpp"
  $53 = $v; //@line 607 "hspwnd_dish.cpp"
  $save_g = $53; //@line 607 "hspwnd_dish.cpp"
  $54 = $v1; //@line 607 "hspwnd_dish.cpp"
  $save_b = $54; //@line 607 "hspwnd_dish.cpp"
  break;
 }
 default: {
 }
 }
 $67 = $save_r; //@line 617 "hspwnd_dish.cpp"
 $68 = $save_g; //@line 617 "hspwnd_dish.cpp"
 $69 = $save_b; //@line 617 "hspwnd_dish.cpp"
 __ZN5Bmscr8SetcolorEiii($4,$67,$68,$69); //@line 617 "hspwnd_dish.cpp"
 STACKTOP = sp;return; //@line 618 "hspwnd_dish.cpp"
}
function __ZN5Bmscr8GradFillEiiiiiii($this,$_x,$_y,$_sx,$_sy,$mode,$col1,$col2) {
 $this = $this|0;
 $_x = $_x|0;
 $_y = $_y|0;
 $_sx = $_sx|0;
 $_sy = $_sy|0;
 $mode = $mode|0;
 $col1 = $col1|0;
 $col2 = $col2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $posx = 0, $posy = 0, $vcol = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $posx = sp + 16|0;
 $posy = sp;
 $vcol = sp + 40|0;
 $0 = $this;
 $1 = $_x;
 $2 = $_y;
 $3 = $_sx;
 $4 = $_sy;
 $5 = $mode;
 $6 = $col1;
 $7 = $col2;
 $8 = $0;
 $9 = $1; //@line 642 "hspwnd_dish.cpp"
 HEAP32[$posx>>2] = $9; //@line 642 "hspwnd_dish.cpp"
 $10 = $2; //@line 642 "hspwnd_dish.cpp"
 HEAP32[$posy>>2] = $10; //@line 642 "hspwnd_dish.cpp"
 $11 = $1; //@line 643 "hspwnd_dish.cpp"
 $12 = $3; //@line 643 "hspwnd_dish.cpp"
 $13 = (($11) + ($12))|0; //@line 643 "hspwnd_dish.cpp"
 $14 = (($posx) + 4|0); //@line 643 "hspwnd_dish.cpp"
 HEAP32[$14>>2] = $13; //@line 643 "hspwnd_dish.cpp"
 $15 = $2; //@line 643 "hspwnd_dish.cpp"
 $16 = (($posy) + 4|0); //@line 643 "hspwnd_dish.cpp"
 HEAP32[$16>>2] = $15; //@line 643 "hspwnd_dish.cpp"
 $17 = $1; //@line 644 "hspwnd_dish.cpp"
 $18 = $3; //@line 644 "hspwnd_dish.cpp"
 $19 = (($17) + ($18))|0; //@line 644 "hspwnd_dish.cpp"
 $20 = (($posx) + 8|0); //@line 644 "hspwnd_dish.cpp"
 HEAP32[$20>>2] = $19; //@line 644 "hspwnd_dish.cpp"
 $21 = $2; //@line 644 "hspwnd_dish.cpp"
 $22 = $4; //@line 644 "hspwnd_dish.cpp"
 $23 = (($21) + ($22))|0; //@line 644 "hspwnd_dish.cpp"
 $24 = (($posy) + 8|0); //@line 644 "hspwnd_dish.cpp"
 HEAP32[$24>>2] = $23; //@line 644 "hspwnd_dish.cpp"
 $25 = $1; //@line 645 "hspwnd_dish.cpp"
 $26 = (($posx) + 12|0); //@line 645 "hspwnd_dish.cpp"
 HEAP32[$26>>2] = $25; //@line 645 "hspwnd_dish.cpp"
 $27 = $2; //@line 645 "hspwnd_dish.cpp"
 $28 = $4; //@line 645 "hspwnd_dish.cpp"
 $29 = (($27) + ($28))|0; //@line 645 "hspwnd_dish.cpp"
 $30 = (($posy) + 12|0); //@line 645 "hspwnd_dish.cpp"
 HEAP32[$30>>2] = $29; //@line 645 "hspwnd_dish.cpp"
 $31 = $5; //@line 647 "hspwnd_dish.cpp"
 $32 = ($31|0)!=(0); //@line 647 "hspwnd_dish.cpp"
 if ($32) {
  $33 = $6; //@line 648 "hspwnd_dish.cpp"
  $34 = (($vcol) + 4|0); //@line 648 "hspwnd_dish.cpp"
  HEAP32[$34>>2] = $33; //@line 648 "hspwnd_dish.cpp"
  HEAP32[$vcol>>2] = $33; //@line 648 "hspwnd_dish.cpp"
  $35 = $7; //@line 649 "hspwnd_dish.cpp"
  $36 = (($vcol) + 12|0); //@line 649 "hspwnd_dish.cpp"
  HEAP32[$36>>2] = $35; //@line 649 "hspwnd_dish.cpp"
  $37 = (($vcol) + 8|0); //@line 649 "hspwnd_dish.cpp"
  HEAP32[$37>>2] = $35; //@line 649 "hspwnd_dish.cpp"
  __ZN5Bmscr9SquareTexEPiS0_PS_S0_S0_i($8,$posx,$posy,0,$vcol,0,-257); //@line 654 "hspwnd_dish.cpp"
  STACKTOP = sp;return; //@line 655 "hspwnd_dish.cpp"
 } else {
  $38 = $6; //@line 651 "hspwnd_dish.cpp"
  $39 = (($vcol) + 12|0); //@line 651 "hspwnd_dish.cpp"
  HEAP32[$39>>2] = $38; //@line 651 "hspwnd_dish.cpp"
  HEAP32[$vcol>>2] = $38; //@line 651 "hspwnd_dish.cpp"
  $40 = $7; //@line 652 "hspwnd_dish.cpp"
  $41 = (($vcol) + 8|0); //@line 652 "hspwnd_dish.cpp"
  HEAP32[$41>>2] = $40; //@line 652 "hspwnd_dish.cpp"
  $42 = (($vcol) + 4|0); //@line 652 "hspwnd_dish.cpp"
  HEAP32[$42>>2] = $40; //@line 652 "hspwnd_dish.cpp"
  __ZN5Bmscr9SquareTexEPiS0_PS_S0_S0_i($8,$posx,$posy,0,$vcol,0,-257); //@line 654 "hspwnd_dish.cpp"
  STACKTOP = sp;return; //@line 655 "hspwnd_dish.cpp"
 }
}
function __ZN5Bmscr9SquareTexEPiS0_PS_S0_S0_i($this,$dst_x,$dst_y,$src,$src_x,$src_y,$mode) {
 $this = $this|0;
 $dst_x = $dst_x|0;
 $dst_y = $dst_y|0;
 $src = $src|0;
 $src_x = $src_x|0;
 $src_y = $src_y|0;
 $mode = $mode|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $coltmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $coltmp = sp + 24|0;
 $0 = $this;
 $1 = $dst_x;
 $2 = $dst_y;
 $3 = $src;
 $4 = $src_x;
 $5 = $src_y;
 $6 = $mode;
 $7 = $0;
 $8 = $6; //@line 773 "hspwnd_dish.cpp"
 $9 = ($8|0)<(0); //@line 773 "hspwnd_dish.cpp"
 if (!($9)) {
  $22 = $1; //@line 782 "hspwnd_dish.cpp"
  $23 = $2; //@line 782 "hspwnd_dish.cpp"
  $24 = $3; //@line 782 "hspwnd_dish.cpp"
  $25 = $4; //@line 782 "hspwnd_dish.cpp"
  $26 = $5; //@line 782 "hspwnd_dish.cpp"
  _hgio_square_tex($7,$22,$23,$24,$25,$26); //@line 782 "hspwnd_dish.cpp"
  STACKTOP = sp;return; //@line 782 "hspwnd_dish.cpp"
 }
 $10 = $6; //@line 774 "hspwnd_dish.cpp"
 $11 = ($10|0)==(-257); //@line 774 "hspwnd_dish.cpp"
 if ($11) {
  $12 = $1; //@line 775 "hspwnd_dish.cpp"
  $13 = $2; //@line 775 "hspwnd_dish.cpp"
  $14 = $4; //@line 775 "hspwnd_dish.cpp"
  _hgio_square($7,$12,$13,$14); //@line 775 "hspwnd_dish.cpp"
 } else {
  $15 = (($7) + 104|0); //@line 777 "hspwnd_dish.cpp"
  $16 = HEAP32[$15>>2]|0; //@line 777 "hspwnd_dish.cpp"
  $17 = (($coltmp) + 12|0); //@line 777 "hspwnd_dish.cpp"
  HEAP32[$17>>2] = $16; //@line 777 "hspwnd_dish.cpp"
  $18 = (($coltmp) + 8|0); //@line 777 "hspwnd_dish.cpp"
  HEAP32[$18>>2] = $16; //@line 777 "hspwnd_dish.cpp"
  $19 = (($coltmp) + 4|0); //@line 777 "hspwnd_dish.cpp"
  HEAP32[$19>>2] = $16; //@line 777 "hspwnd_dish.cpp"
  HEAP32[$coltmp>>2] = $16; //@line 777 "hspwnd_dish.cpp"
  $20 = $1; //@line 778 "hspwnd_dish.cpp"
  $21 = $2; //@line 778 "hspwnd_dish.cpp"
  _hgio_square($7,$20,$21,$coltmp); //@line 778 "hspwnd_dish.cpp"
 }
 STACKTOP = sp;return; //@line 782 "hspwnd_dish.cpp"
}
function __ZN5Bmscr7FillRotEiiiif($this,$x,$y,$dst_sx,$dst_sy,$ang) {
 $this = $this|0;
 $x = $x|0;
 $y = $y|0;
 $dst_sx = $dst_sx|0;
 $dst_sy = $dst_sy|0;
 $ang = +$ang;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $this;
 $1 = $x;
 $2 = $y;
 $3 = $dst_sx;
 $4 = $dst_sy;
 $5 = $ang;
 $6 = $0;
 $7 = $1; //@line 662 "hspwnd_dish.cpp"
 $8 = (+($7|0)); //@line 662 "hspwnd_dish.cpp"
 $9 = $2; //@line 662 "hspwnd_dish.cpp"
 $10 = (+($9|0)); //@line 662 "hspwnd_dish.cpp"
 $11 = $3; //@line 662 "hspwnd_dish.cpp"
 $12 = (+($11|0)); //@line 662 "hspwnd_dish.cpp"
 $13 = $4; //@line 662 "hspwnd_dish.cpp"
 $14 = (+($13|0)); //@line 662 "hspwnd_dish.cpp"
 $15 = $5; //@line 662 "hspwnd_dish.cpp"
 _hgio_fillrot($6,$8,$10,$12,$14,$15); //@line 662 "hspwnd_dish.cpp"
 STACKTOP = sp;return; //@line 663 "hspwnd_dish.cpp"
}
function __ZN5Bmscr10FillRotTexEiifPS_iiii($this,$dst_sx,$dst_sy,$ang,$src,$tx,$ty,$srcx,$srcy) {
 $this = $this|0;
 $dst_sx = $dst_sx|0;
 $dst_sy = $dst_sy|0;
 $ang = +$ang;
 $src = $src|0;
 $tx = $tx|0;
 $ty = $ty|0;
 $srcx = $srcx|0;
 $srcy = $srcy|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0.0;
 var $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = $this;
 $1 = $dst_sx;
 $2 = $dst_sy;
 $3 = $ang;
 $4 = $src;
 $5 = $tx;
 $6 = $ty;
 $7 = $srcx;
 $8 = $srcy;
 $9 = $0;
 $10 = $5; //@line 670 "hspwnd_dish.cpp"
 $11 = $10&65535; //@line 670 "hspwnd_dish.cpp"
 $12 = $6; //@line 670 "hspwnd_dish.cpp"
 $13 = $12&65535; //@line 670 "hspwnd_dish.cpp"
 $14 = $7; //@line 670 "hspwnd_dish.cpp"
 $15 = $14&65535; //@line 670 "hspwnd_dish.cpp"
 $16 = $8; //@line 670 "hspwnd_dish.cpp"
 $17 = $16&65535; //@line 670 "hspwnd_dish.cpp"
 $18 = $1; //@line 670 "hspwnd_dish.cpp"
 $19 = $18 >> 1; //@line 670 "hspwnd_dish.cpp"
 $20 = (+($19|0)); //@line 670 "hspwnd_dish.cpp"
 $21 = $2; //@line 670 "hspwnd_dish.cpp"
 $22 = $21 >> 1; //@line 670 "hspwnd_dish.cpp"
 $23 = (+($22|0)); //@line 670 "hspwnd_dish.cpp"
 $24 = $4; //@line 670 "hspwnd_dish.cpp"
 $25 = $1; //@line 670 "hspwnd_dish.cpp"
 $26 = (+($25|0)); //@line 670 "hspwnd_dish.cpp"
 $27 = $2; //@line 670 "hspwnd_dish.cpp"
 $28 = (+($27|0)); //@line 670 "hspwnd_dish.cpp"
 $29 = $3; //@line 670 "hspwnd_dish.cpp"
 _hgio_copyrot($9,$11,$13,$15,$17,$20,$23,$24,$26,$28,$29); //@line 670 "hspwnd_dish.cpp"
 STACKTOP = sp;return; //@line 671 "hspwnd_dish.cpp"
}
function __ZN5Bmscr6CelPutEPS_ifff($this,$src,$id,$destx,$desty,$ang) {
 $this = $this|0;
 $src = $src|0;
 $id = $id|0;
 $destx = +$destx;
 $desty = +$desty;
 $ang = +$ang;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0.0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0.0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0, $82 = 0.0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0.0, $99 = 0.0, $bak_cx = 0, $bak_cy = 0, $dsx = 0.0, $dsy = 0.0;
 var $psx = 0, $psy = 0, $texpx = 0, $texpy = 0, $xx = 0, $yy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $1 = $this;
 $2 = $src;
 $3 = $id;
 $4 = $destx;
 $5 = $desty;
 $6 = $ang;
 $7 = $1;
 $8 = $2; //@line 695 "hspwnd_dish.cpp"
 $9 = (($8) + 208|0); //@line 695 "hspwnd_dish.cpp"
 $10 = HEAP16[$9>>1]|0; //@line 695 "hspwnd_dish.cpp"
 $11 = $10 << 16 >> 16; //@line 695 "hspwnd_dish.cpp"
 $psx = $11; //@line 695 "hspwnd_dish.cpp"
 $12 = $2; //@line 696 "hspwnd_dish.cpp"
 $13 = (($12) + 210|0); //@line 696 "hspwnd_dish.cpp"
 $14 = HEAP16[$13>>1]|0; //@line 696 "hspwnd_dish.cpp"
 $15 = $14 << 16 >> 16; //@line 696 "hspwnd_dish.cpp"
 $psy = $15; //@line 696 "hspwnd_dish.cpp"
 $16 = $3; //@line 697 "hspwnd_dish.cpp"
 $17 = $2; //@line 697 "hspwnd_dish.cpp"
 $18 = (($17) + 204|0); //@line 697 "hspwnd_dish.cpp"
 $19 = HEAP16[$18>>1]|0; //@line 697 "hspwnd_dish.cpp"
 $20 = $19 << 16 >> 16; //@line 697 "hspwnd_dish.cpp"
 $21 = (($16|0) % ($20|0))&-1; //@line 697 "hspwnd_dish.cpp"
 $22 = $psx; //@line 697 "hspwnd_dish.cpp"
 $23 = Math_imul($21, $22)|0; //@line 697 "hspwnd_dish.cpp"
 $xx = $23; //@line 697 "hspwnd_dish.cpp"
 $24 = $3; //@line 698 "hspwnd_dish.cpp"
 $25 = $2; //@line 698 "hspwnd_dish.cpp"
 $26 = (($25) + 204|0); //@line 698 "hspwnd_dish.cpp"
 $27 = HEAP16[$26>>1]|0; //@line 698 "hspwnd_dish.cpp"
 $28 = $27 << 16 >> 16; //@line 698 "hspwnd_dish.cpp"
 $29 = (($24|0) / ($28|0))&-1; //@line 698 "hspwnd_dish.cpp"
 $30 = $psy; //@line 698 "hspwnd_dish.cpp"
 $31 = Math_imul($29, $30)|0; //@line 698 "hspwnd_dish.cpp"
 $yy = $31; //@line 698 "hspwnd_dish.cpp"
 $32 = $xx; //@line 699 "hspwnd_dish.cpp"
 $33 = $psx; //@line 699 "hspwnd_dish.cpp"
 $34 = (($32) + ($33))|0; //@line 699 "hspwnd_dish.cpp"
 $texpx = $34; //@line 699 "hspwnd_dish.cpp"
 $35 = $yy; //@line 700 "hspwnd_dish.cpp"
 $36 = $psy; //@line 700 "hspwnd_dish.cpp"
 $37 = (($35) + ($36))|0; //@line 700 "hspwnd_dish.cpp"
 $texpy = $37; //@line 700 "hspwnd_dish.cpp"
 $38 = $texpx; //@line 701 "hspwnd_dish.cpp"
 $39 = ($38|0)<(0); //@line 701 "hspwnd_dish.cpp"
 if ($39) {
  $0 = -1; //@line 701 "hspwnd_dish.cpp"
  $115 = $0; //@line 720 "hspwnd_dish.cpp"
  STACKTOP = sp;return ($115|0); //@line 720 "hspwnd_dish.cpp"
 }
 $40 = $texpx; //@line 702 "hspwnd_dish.cpp"
 $41 = $2; //@line 702 "hspwnd_dish.cpp"
 $42 = (($41) + 4|0); //@line 702 "hspwnd_dish.cpp"
 $43 = HEAP32[$42>>2]|0; //@line 702 "hspwnd_dish.cpp"
 $44 = ($40|0)>=($43|0); //@line 702 "hspwnd_dish.cpp"
 do {
  if ($44) {
   $45 = $xx; //@line 703 "hspwnd_dish.cpp"
   $46 = $2; //@line 703 "hspwnd_dish.cpp"
   $47 = (($46) + 4|0); //@line 703 "hspwnd_dish.cpp"
   $48 = HEAP32[$47>>2]|0; //@line 703 "hspwnd_dish.cpp"
   $49 = ($45|0)>=($48|0); //@line 703 "hspwnd_dish.cpp"
   if (!($49)) {
    $50 = $2; //@line 704 "hspwnd_dish.cpp"
    $51 = (($50) + 4|0); //@line 704 "hspwnd_dish.cpp"
    $52 = HEAP32[$51>>2]|0; //@line 704 "hspwnd_dish.cpp"
    $53 = $xx; //@line 704 "hspwnd_dish.cpp"
    $54 = (($52) - ($53))|0; //@line 704 "hspwnd_dish.cpp"
    $psx = $54; //@line 704 "hspwnd_dish.cpp"
    break;
   }
   $0 = -1; //@line 703 "hspwnd_dish.cpp"
   $115 = $0; //@line 720 "hspwnd_dish.cpp"
   STACKTOP = sp;return ($115|0); //@line 720 "hspwnd_dish.cpp"
  }
 } while(0);
 $55 = $texpy; //@line 706 "hspwnd_dish.cpp"
 $56 = ($55|0)<(0); //@line 706 "hspwnd_dish.cpp"
 if ($56) {
  $0 = -1; //@line 706 "hspwnd_dish.cpp"
  $115 = $0; //@line 720 "hspwnd_dish.cpp"
  STACKTOP = sp;return ($115|0); //@line 720 "hspwnd_dish.cpp"
 }
 $57 = $texpy; //@line 707 "hspwnd_dish.cpp"
 $58 = $2; //@line 707 "hspwnd_dish.cpp"
 $59 = (($58) + 8|0); //@line 707 "hspwnd_dish.cpp"
 $60 = HEAP32[$59>>2]|0; //@line 707 "hspwnd_dish.cpp"
 $61 = ($57|0)>=($60|0); //@line 707 "hspwnd_dish.cpp"
 do {
  if ($61) {
   $62 = $yy; //@line 708 "hspwnd_dish.cpp"
   $63 = $2; //@line 708 "hspwnd_dish.cpp"
   $64 = (($63) + 8|0); //@line 708 "hspwnd_dish.cpp"
   $65 = HEAP32[$64>>2]|0; //@line 708 "hspwnd_dish.cpp"
   $66 = ($62|0)>=($65|0); //@line 708 "hspwnd_dish.cpp"
   if (!($66)) {
    $67 = $2; //@line 709 "hspwnd_dish.cpp"
    $68 = (($67) + 8|0); //@line 709 "hspwnd_dish.cpp"
    $69 = HEAP32[$68>>2]|0; //@line 709 "hspwnd_dish.cpp"
    $70 = $yy; //@line 709 "hspwnd_dish.cpp"
    $71 = (($69) - ($70))|0; //@line 709 "hspwnd_dish.cpp"
    $psy = $71; //@line 709 "hspwnd_dish.cpp"
    break;
   }
   $0 = -1; //@line 708 "hspwnd_dish.cpp"
   $115 = $0; //@line 720 "hspwnd_dish.cpp"
   STACKTOP = sp;return ($115|0); //@line 720 "hspwnd_dish.cpp"
  }
 } while(0);
 $72 = $psx; //@line 712 "hspwnd_dish.cpp"
 $73 = (+($72|0)); //@line 712 "hspwnd_dish.cpp"
 $74 = $4; //@line 712 "hspwnd_dish.cpp"
 $75 = $73 * $74; //@line 712 "hspwnd_dish.cpp"
 $dsx = $75; //@line 712 "hspwnd_dish.cpp"
 $76 = $psy; //@line 713 "hspwnd_dish.cpp"
 $77 = (+($76|0)); //@line 713 "hspwnd_dish.cpp"
 $78 = $5; //@line 713 "hspwnd_dish.cpp"
 $79 = $77 * $78; //@line 713 "hspwnd_dish.cpp"
 $dsy = $79; //@line 713 "hspwnd_dish.cpp"
 $80 = (($7) + 68|0); //@line 715 "hspwnd_dish.cpp"
 $81 = HEAP32[$80>>2]|0; //@line 715 "hspwnd_dish.cpp"
 $82 = $dsx; //@line 715 "hspwnd_dish.cpp"
 $83 = (~~(($82))); //@line 715 "hspwnd_dish.cpp"
 $84 = (($81) + ($83))|0; //@line 715 "hspwnd_dish.cpp"
 $bak_cx = $84; //@line 715 "hspwnd_dish.cpp"
 $85 = (($7) + 72|0); //@line 716 "hspwnd_dish.cpp"
 $86 = HEAP32[$85>>2]|0; //@line 716 "hspwnd_dish.cpp"
 $bak_cy = $86; //@line 716 "hspwnd_dish.cpp"
 $87 = $xx; //@line 717 "hspwnd_dish.cpp"
 $88 = $87&65535; //@line 717 "hspwnd_dish.cpp"
 $89 = $yy; //@line 717 "hspwnd_dish.cpp"
 $90 = $89&65535; //@line 717 "hspwnd_dish.cpp"
 $91 = $psx; //@line 717 "hspwnd_dish.cpp"
 $92 = $91&65535; //@line 717 "hspwnd_dish.cpp"
 $93 = $psy; //@line 717 "hspwnd_dish.cpp"
 $94 = $93&65535; //@line 717 "hspwnd_dish.cpp"
 $95 = $2; //@line 717 "hspwnd_dish.cpp"
 $96 = (($95) + 212|0); //@line 717 "hspwnd_dish.cpp"
 $97 = HEAP16[$96>>1]|0; //@line 717 "hspwnd_dish.cpp"
 $98 = (+($97<<16>>16)); //@line 717 "hspwnd_dish.cpp"
 $99 = $4; //@line 717 "hspwnd_dish.cpp"
 $100 = $98 * $99; //@line 717 "hspwnd_dish.cpp"
 $101 = $2; //@line 717 "hspwnd_dish.cpp"
 $102 = (($101) + 214|0); //@line 717 "hspwnd_dish.cpp"
 $103 = HEAP16[$102>>1]|0; //@line 717 "hspwnd_dish.cpp"
 $104 = (+($103<<16>>16)); //@line 717 "hspwnd_dish.cpp"
 $105 = $5; //@line 717 "hspwnd_dish.cpp"
 $106 = $104 * $105; //@line 717 "hspwnd_dish.cpp"
 $107 = $2; //@line 717 "hspwnd_dish.cpp"
 $108 = $dsx; //@line 717 "hspwnd_dish.cpp"
 $109 = $dsy; //@line 717 "hspwnd_dish.cpp"
 $110 = $6; //@line 717 "hspwnd_dish.cpp"
 _hgio_copyrot($7,$88,$90,$92,$94,$100,$106,$107,$108,$109,$110); //@line 717 "hspwnd_dish.cpp"
 $111 = $bak_cx; //@line 718 "hspwnd_dish.cpp"
 $112 = (($7) + 68|0); //@line 718 "hspwnd_dish.cpp"
 HEAP32[$112>>2] = $111; //@line 718 "hspwnd_dish.cpp"
 $113 = $bak_cy; //@line 719 "hspwnd_dish.cpp"
 $114 = (($7) + 72|0); //@line 719 "hspwnd_dish.cpp"
 HEAP32[$114>>2] = $113; //@line 719 "hspwnd_dish.cpp"
 $0 = 0; //@line 720 "hspwnd_dish.cpp"
 $115 = $0; //@line 720 "hspwnd_dish.cpp"
 STACKTOP = sp;return ($115|0); //@line 720 "hspwnd_dish.cpp"
}
function __ZN5Bmscr6CelPutEPS_i($this,$src,$id) {
 $this = $this|0;
 $src = $src|0;
 $id = $id|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0.0, $bak_cx = 0, $bak_cy = 0, $psx = 0, $psy = 0, $texpx = 0, $texpy = 0, $xx = 0, $yy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $1 = $this;
 $2 = $src;
 $3 = $id;
 $4 = $1;
 $5 = $2; //@line 731 "hspwnd_dish.cpp"
 $6 = (($5) + 208|0); //@line 731 "hspwnd_dish.cpp"
 $7 = HEAP16[$6>>1]|0; //@line 731 "hspwnd_dish.cpp"
 $8 = $7 << 16 >> 16; //@line 731 "hspwnd_dish.cpp"
 $psx = $8; //@line 731 "hspwnd_dish.cpp"
 $9 = $2; //@line 732 "hspwnd_dish.cpp"
 $10 = (($9) + 210|0); //@line 732 "hspwnd_dish.cpp"
 $11 = HEAP16[$10>>1]|0; //@line 732 "hspwnd_dish.cpp"
 $12 = $11 << 16 >> 16; //@line 732 "hspwnd_dish.cpp"
 $psy = $12; //@line 732 "hspwnd_dish.cpp"
 $13 = $3; //@line 733 "hspwnd_dish.cpp"
 $14 = $2; //@line 733 "hspwnd_dish.cpp"
 $15 = (($14) + 204|0); //@line 733 "hspwnd_dish.cpp"
 $16 = HEAP16[$15>>1]|0; //@line 733 "hspwnd_dish.cpp"
 $17 = $16 << 16 >> 16; //@line 733 "hspwnd_dish.cpp"
 $18 = (($13|0) % ($17|0))&-1; //@line 733 "hspwnd_dish.cpp"
 $19 = $psx; //@line 733 "hspwnd_dish.cpp"
 $20 = Math_imul($18, $19)|0; //@line 733 "hspwnd_dish.cpp"
 $xx = $20; //@line 733 "hspwnd_dish.cpp"
 $21 = $3; //@line 734 "hspwnd_dish.cpp"
 $22 = $2; //@line 734 "hspwnd_dish.cpp"
 $23 = (($22) + 204|0); //@line 734 "hspwnd_dish.cpp"
 $24 = HEAP16[$23>>1]|0; //@line 734 "hspwnd_dish.cpp"
 $25 = $24 << 16 >> 16; //@line 734 "hspwnd_dish.cpp"
 $26 = (($21|0) / ($25|0))&-1; //@line 734 "hspwnd_dish.cpp"
 $27 = $psy; //@line 734 "hspwnd_dish.cpp"
 $28 = Math_imul($26, $27)|0; //@line 734 "hspwnd_dish.cpp"
 $yy = $28; //@line 734 "hspwnd_dish.cpp"
 $29 = $xx; //@line 735 "hspwnd_dish.cpp"
 $30 = $psx; //@line 735 "hspwnd_dish.cpp"
 $31 = (($29) + ($30))|0; //@line 735 "hspwnd_dish.cpp"
 $texpx = $31; //@line 735 "hspwnd_dish.cpp"
 $32 = $yy; //@line 736 "hspwnd_dish.cpp"
 $33 = $psy; //@line 736 "hspwnd_dish.cpp"
 $34 = (($32) + ($33))|0; //@line 736 "hspwnd_dish.cpp"
 $texpy = $34; //@line 736 "hspwnd_dish.cpp"
 $35 = $texpx; //@line 737 "hspwnd_dish.cpp"
 $36 = ($35|0)<(0); //@line 737 "hspwnd_dish.cpp"
 if ($36) {
  $0 = -1; //@line 737 "hspwnd_dish.cpp"
  $106 = $0; //@line 755 "hspwnd_dish.cpp"
  STACKTOP = sp;return ($106|0); //@line 755 "hspwnd_dish.cpp"
 }
 $37 = $texpx; //@line 738 "hspwnd_dish.cpp"
 $38 = $2; //@line 738 "hspwnd_dish.cpp"
 $39 = (($38) + 4|0); //@line 738 "hspwnd_dish.cpp"
 $40 = HEAP32[$39>>2]|0; //@line 738 "hspwnd_dish.cpp"
 $41 = ($37|0)>=($40|0); //@line 738 "hspwnd_dish.cpp"
 do {
  if ($41) {
   $42 = $xx; //@line 739 "hspwnd_dish.cpp"
   $43 = $2; //@line 739 "hspwnd_dish.cpp"
   $44 = (($43) + 4|0); //@line 739 "hspwnd_dish.cpp"
   $45 = HEAP32[$44>>2]|0; //@line 739 "hspwnd_dish.cpp"
   $46 = ($42|0)>=($45|0); //@line 739 "hspwnd_dish.cpp"
   if (!($46)) {
    $47 = $2; //@line 740 "hspwnd_dish.cpp"
    $48 = (($47) + 4|0); //@line 740 "hspwnd_dish.cpp"
    $49 = HEAP32[$48>>2]|0; //@line 740 "hspwnd_dish.cpp"
    $50 = $xx; //@line 740 "hspwnd_dish.cpp"
    $51 = (($49) - ($50))|0; //@line 740 "hspwnd_dish.cpp"
    $psx = $51; //@line 740 "hspwnd_dish.cpp"
    break;
   }
   $0 = -1; //@line 739 "hspwnd_dish.cpp"
   $106 = $0; //@line 755 "hspwnd_dish.cpp"
   STACKTOP = sp;return ($106|0); //@line 755 "hspwnd_dish.cpp"
  }
 } while(0);
 $52 = $texpy; //@line 742 "hspwnd_dish.cpp"
 $53 = ($52|0)<(0); //@line 742 "hspwnd_dish.cpp"
 if ($53) {
  $0 = -1; //@line 742 "hspwnd_dish.cpp"
  $106 = $0; //@line 755 "hspwnd_dish.cpp"
  STACKTOP = sp;return ($106|0); //@line 755 "hspwnd_dish.cpp"
 }
 $54 = $texpy; //@line 743 "hspwnd_dish.cpp"
 $55 = $2; //@line 743 "hspwnd_dish.cpp"
 $56 = (($55) + 8|0); //@line 743 "hspwnd_dish.cpp"
 $57 = HEAP32[$56>>2]|0; //@line 743 "hspwnd_dish.cpp"
 $58 = ($54|0)>=($57|0); //@line 743 "hspwnd_dish.cpp"
 do {
  if ($58) {
   $59 = $yy; //@line 744 "hspwnd_dish.cpp"
   $60 = $2; //@line 744 "hspwnd_dish.cpp"
   $61 = (($60) + 8|0); //@line 744 "hspwnd_dish.cpp"
   $62 = HEAP32[$61>>2]|0; //@line 744 "hspwnd_dish.cpp"
   $63 = ($59|0)>=($62|0); //@line 744 "hspwnd_dish.cpp"
   if (!($63)) {
    $64 = $2; //@line 745 "hspwnd_dish.cpp"
    $65 = (($64) + 8|0); //@line 745 "hspwnd_dish.cpp"
    $66 = HEAP32[$65>>2]|0; //@line 745 "hspwnd_dish.cpp"
    $67 = $yy; //@line 745 "hspwnd_dish.cpp"
    $68 = (($66) - ($67))|0; //@line 745 "hspwnd_dish.cpp"
    $psy = $68; //@line 745 "hspwnd_dish.cpp"
    break;
   }
   $0 = -1; //@line 744 "hspwnd_dish.cpp"
   $106 = $0; //@line 755 "hspwnd_dish.cpp"
   STACKTOP = sp;return ($106|0); //@line 755 "hspwnd_dish.cpp"
  }
 } while(0);
 $69 = (($4) + 68|0); //@line 748 "hspwnd_dish.cpp"
 $70 = HEAP32[$69>>2]|0; //@line 748 "hspwnd_dish.cpp"
 $71 = $psx; //@line 748 "hspwnd_dish.cpp"
 $72 = (($70) + ($71))|0; //@line 748 "hspwnd_dish.cpp"
 $bak_cx = $72; //@line 748 "hspwnd_dish.cpp"
 $73 = (($4) + 72|0); //@line 749 "hspwnd_dish.cpp"
 $74 = HEAP32[$73>>2]|0; //@line 749 "hspwnd_dish.cpp"
 $bak_cy = $74; //@line 749 "hspwnd_dish.cpp"
 $75 = $2; //@line 750 "hspwnd_dish.cpp"
 $76 = (($75) + 212|0); //@line 750 "hspwnd_dish.cpp"
 $77 = HEAP16[$76>>1]|0; //@line 750 "hspwnd_dish.cpp"
 $78 = $77 << 16 >> 16; //@line 750 "hspwnd_dish.cpp"
 $79 = (($4) + 68|0); //@line 750 "hspwnd_dish.cpp"
 $80 = HEAP32[$79>>2]|0; //@line 750 "hspwnd_dish.cpp"
 $81 = (($80) - ($78))|0; //@line 750 "hspwnd_dish.cpp"
 HEAP32[$79>>2] = $81; //@line 750 "hspwnd_dish.cpp"
 $82 = $2; //@line 751 "hspwnd_dish.cpp"
 $83 = (($82) + 214|0); //@line 751 "hspwnd_dish.cpp"
 $84 = HEAP16[$83>>1]|0; //@line 751 "hspwnd_dish.cpp"
 $85 = $84 << 16 >> 16; //@line 751 "hspwnd_dish.cpp"
 $86 = (($4) + 72|0); //@line 751 "hspwnd_dish.cpp"
 $87 = HEAP32[$86>>2]|0; //@line 751 "hspwnd_dish.cpp"
 $88 = (($87) - ($85))|0; //@line 751 "hspwnd_dish.cpp"
 HEAP32[$86>>2] = $88; //@line 751 "hspwnd_dish.cpp"
 $89 = $xx; //@line 752 "hspwnd_dish.cpp"
 $90 = $89&65535; //@line 752 "hspwnd_dish.cpp"
 $91 = $yy; //@line 752 "hspwnd_dish.cpp"
 $92 = $91&65535; //@line 752 "hspwnd_dish.cpp"
 $93 = $psx; //@line 752 "hspwnd_dish.cpp"
 $94 = $93&65535; //@line 752 "hspwnd_dish.cpp"
 $95 = $psy; //@line 752 "hspwnd_dish.cpp"
 $96 = $95&65535; //@line 752 "hspwnd_dish.cpp"
 $97 = $2; //@line 752 "hspwnd_dish.cpp"
 $98 = $psx; //@line 752 "hspwnd_dish.cpp"
 $99 = (+($98|0)); //@line 752 "hspwnd_dish.cpp"
 $100 = $psy; //@line 752 "hspwnd_dish.cpp"
 $101 = (+($100|0)); //@line 752 "hspwnd_dish.cpp"
 _hgio_copy($4,$90,$92,$94,$96,$97,$99,$101); //@line 752 "hspwnd_dish.cpp"
 $102 = $bak_cx; //@line 753 "hspwnd_dish.cpp"
 $103 = (($4) + 68|0); //@line 753 "hspwnd_dish.cpp"
 HEAP32[$103>>2] = $102; //@line 753 "hspwnd_dish.cpp"
 $104 = $bak_cy; //@line 754 "hspwnd_dish.cpp"
 $105 = (($4) + 72|0); //@line 754 "hspwnd_dish.cpp"
 HEAP32[$105>>2] = $104; //@line 754 "hspwnd_dish.cpp"
 $0 = 0; //@line 755 "hspwnd_dish.cpp"
 $106 = $0; //@line 755 "hspwnd_dish.cpp"
 STACKTOP = sp;return ($106|0); //@line 755 "hspwnd_dish.cpp"
}
function __ZN5Bmscr9SetFilterEi($this,$type) {
 $this = $this|0;
 $type = $type|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $type;
 $2 = $1; //@line 763 "hspwnd_dish.cpp"
 _hgio_setfilter($2,0); //@line 763 "hspwnd_dish.cpp"
 STACKTOP = sp;return; //@line 764 "hspwnd_dish.cpp"
}
function __ZN5Bmscr9setMTouchEP10HSP3MTOUCHiib($this,$mt,$x,$y,$touch) {
 $this = $this|0;
 $mt = $mt|0;
 $x = $x|0;
 $y = $y|0;
 $touch = $touch|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $this;
 $1 = $mt;
 $2 = $x;
 $3 = $y;
 $5 = $touch&1;
 $4 = $5;
 $6 = $1; //@line 789 "hspwnd_dish.cpp"
 $7 = ($6|0)==(0|0); //@line 789 "hspwnd_dish.cpp"
 if ($7) {
  STACKTOP = sp;return; //@line 796 "hspwnd_dish.cpp"
 }
 $8 = $4; //@line 790 "hspwnd_dish.cpp"
 $9 = $8&1; //@line 790 "hspwnd_dish.cpp"
 $10 = $9&1; //@line 790 "hspwnd_dish.cpp"
 $11 = ($10|0)==(0); //@line 790 "hspwnd_dish.cpp"
 if ($11) {
  $12 = $1; //@line 791 "hspwnd_dish.cpp"
  HEAP32[$12>>2] = 0; //@line 791 "hspwnd_dish.cpp"
  STACKTOP = sp;return; //@line 796 "hspwnd_dish.cpp"
 } else {
  $13 = $1; //@line 794 "hspwnd_dish.cpp"
  HEAP32[$13>>2] = 1; //@line 794 "hspwnd_dish.cpp"
  $14 = $2; //@line 795 "hspwnd_dish.cpp"
  $15 = $1; //@line 795 "hspwnd_dish.cpp"
  $16 = (($15) + 4|0); //@line 795 "hspwnd_dish.cpp"
  HEAP32[$16>>2] = $14; //@line 795 "hspwnd_dish.cpp"
  $17 = $3; //@line 796 "hspwnd_dish.cpp"
  $18 = $1; //@line 796 "hspwnd_dish.cpp"
  $19 = (($18) + 8|0); //@line 796 "hspwnd_dish.cpp"
  HEAP32[$19>>2] = $17; //@line 796 "hspwnd_dish.cpp"
  STACKTOP = sp;return; //@line 796 "hspwnd_dish.cpp"
 }
}
function __ZN5Bmscr12getMTouchNewEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $mt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $this;
 $2 = $1;
 $3 = (($2) + 296|0); //@line 891 "hspwnd_dish.cpp"
 $mt = $3; //@line 891 "hspwnd_dish.cpp"
 $i = 0; //@line 892 "hspwnd_dish.cpp"
 while(1) {
  $4 = $i; //@line 892 "hspwnd_dish.cpp"
  $5 = ($4|0)<(16); //@line 892 "hspwnd_dish.cpp"
  if (!($5)) {
   label = 7;
   break;
  }
  $6 = $mt; //@line 893 "hspwnd_dish.cpp"
  $7 = HEAP32[$6>>2]|0; //@line 893 "hspwnd_dish.cpp"
  $8 = ($7|0)==(0); //@line 893 "hspwnd_dish.cpp"
  if ($8) {
   label = 4;
   break;
  }
  $10 = $mt; //@line 896 "hspwnd_dish.cpp"
  $11 = (($10) + 16|0); //@line 896 "hspwnd_dish.cpp"
  $mt = $11; //@line 896 "hspwnd_dish.cpp"
  $12 = $i; //@line 892 "hspwnd_dish.cpp"
  $13 = (($12) + 1)|0; //@line 892 "hspwnd_dish.cpp"
  $i = $13; //@line 892 "hspwnd_dish.cpp"
 }
 if ((label|0) == 4) {
  $9 = $mt; //@line 894 "hspwnd_dish.cpp"
  $0 = $9; //@line 894 "hspwnd_dish.cpp"
  $14 = $0; //@line 899 "hspwnd_dish.cpp"
  STACKTOP = sp;return ($14|0); //@line 899 "hspwnd_dish.cpp"
 }
 else if ((label|0) == 7) {
  $0 = 0; //@line 898 "hspwnd_dish.cpp"
  $14 = $0; //@line 899 "hspwnd_dish.cpp"
  STACKTOP = sp;return ($14|0); //@line 899 "hspwnd_dish.cpp"
 }
 return 0|0;
}
function __ZN5Bmscr18setMTouchByPointIdEiiib($this,$pointid,$x,$y,$touch) {
 $this = $this|0;
 $pointid = $pointid|0;
 $x = $x|0;
 $y = $y|0;
 $touch = $touch|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $mt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $this;
 $1 = $pointid;
 $2 = $x;
 $3 = $y;
 $5 = $touch&1;
 $4 = $5;
 $6 = $0;
 $7 = $1; //@line 814 "hspwnd_dish.cpp"
 $8 = (__ZN5Bmscr18getMTouchByPointIdEi($6,$7)|0); //@line 814 "hspwnd_dish.cpp"
 $mt = $8; //@line 814 "hspwnd_dish.cpp"
 $9 = $mt; //@line 815 "hspwnd_dish.cpp"
 $10 = ($9|0)==(0|0); //@line 815 "hspwnd_dish.cpp"
 do {
  if ($10) {
   $11 = (__ZN5Bmscr12getMTouchNewEv($6)|0); //@line 816 "hspwnd_dish.cpp"
   $mt = $11; //@line 816 "hspwnd_dish.cpp"
   $12 = $mt; //@line 817 "hspwnd_dish.cpp"
   $13 = ($12|0)==(0|0); //@line 817 "hspwnd_dish.cpp"
   if (!($13)) {
    $14 = $1; //@line 818 "hspwnd_dish.cpp"
    $15 = $mt; //@line 818 "hspwnd_dish.cpp"
    $16 = (($15) + 12|0); //@line 818 "hspwnd_dish.cpp"
    HEAP32[$16>>2] = $14; //@line 818 "hspwnd_dish.cpp"
    break;
   }
   STACKTOP = sp;return; //@line 820 "hspwnd_dish.cpp"
  }
 } while(0);
 $17 = $mt; //@line 820 "hspwnd_dish.cpp"
 $18 = $2; //@line 820 "hspwnd_dish.cpp"
 $19 = $3; //@line 820 "hspwnd_dish.cpp"
 $20 = $4; //@line 820 "hspwnd_dish.cpp"
 $21 = $20&1; //@line 820 "hspwnd_dish.cpp"
 __ZN5Bmscr9setMTouchEP10HSP3MTOUCHiib($6,$17,$18,$19,$21); //@line 820 "hspwnd_dish.cpp"
 STACKTOP = sp;return; //@line 820 "hspwnd_dish.cpp"
}
function __ZN5Bmscr18getMTouchByPointIdEi($this,$pointid) {
 $this = $this|0;
 $pointid = $pointid|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $i = 0, $mt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = $this;
 $2 = $pointid;
 $3 = $1;
 $4 = (($3) + 296|0); //@line 855 "hspwnd_dish.cpp"
 $mt = $4; //@line 855 "hspwnd_dish.cpp"
 $i = 0; //@line 856 "hspwnd_dish.cpp"
 while(1) {
  $5 = $i; //@line 856 "hspwnd_dish.cpp"
  $6 = ($5|0)<(16); //@line 856 "hspwnd_dish.cpp"
  if (!($6)) {
   label = 9;
   break;
  }
  $7 = $mt; //@line 857 "hspwnd_dish.cpp"
  $8 = HEAP32[$7>>2]|0; //@line 857 "hspwnd_dish.cpp"
  $9 = ($8|0)!=(0); //@line 857 "hspwnd_dish.cpp"
  if ($9) {
   $10 = $mt; //@line 858 "hspwnd_dish.cpp"
   $11 = (($10) + 12|0); //@line 858 "hspwnd_dish.cpp"
   $12 = HEAP32[$11>>2]|0; //@line 858 "hspwnd_dish.cpp"
   $13 = $2; //@line 858 "hspwnd_dish.cpp"
   $14 = ($12|0)==($13|0); //@line 858 "hspwnd_dish.cpp"
   if ($14) {
    label = 5;
    break;
   }
  }
  $16 = $mt; //@line 862 "hspwnd_dish.cpp"
  $17 = (($16) + 16|0); //@line 862 "hspwnd_dish.cpp"
  $mt = $17; //@line 862 "hspwnd_dish.cpp"
  $18 = $i; //@line 856 "hspwnd_dish.cpp"
  $19 = (($18) + 1)|0; //@line 856 "hspwnd_dish.cpp"
  $i = $19; //@line 856 "hspwnd_dish.cpp"
 }
 if ((label|0) == 5) {
  $15 = $mt; //@line 859 "hspwnd_dish.cpp"
  $0 = $15; //@line 859 "hspwnd_dish.cpp"
  $20 = $0; //@line 865 "hspwnd_dish.cpp"
  STACKTOP = sp;return ($20|0); //@line 865 "hspwnd_dish.cpp"
 }
 else if ((label|0) == 9) {
  $0 = 0; //@line 864 "hspwnd_dish.cpp"
  $20 = $0; //@line 865 "hspwnd_dish.cpp"
  STACKTOP = sp;return ($20|0); //@line 865 "hspwnd_dish.cpp"
 }
 return 0|0;
}
function __ZN5Bmscr9getMTouchEi($this,$touchid) {
 $this = $this|0;
 $touchid = $touchid|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $this;
 $2 = $touchid;
 $3 = $1;
 $4 = $2; //@line 826 "hspwnd_dish.cpp"
 $5 = ($4|0)<(0); //@line 826 "hspwnd_dish.cpp"
 do {
  if ($5) {
   $0 = 0; //@line 826 "hspwnd_dish.cpp"
  } else {
   $6 = $2; //@line 827 "hspwnd_dish.cpp"
   $7 = ($6|0)>=(16); //@line 827 "hspwnd_dish.cpp"
   if ($7) {
    $0 = 0; //@line 827 "hspwnd_dish.cpp"
    break;
   } else {
    $8 = $2; //@line 828 "hspwnd_dish.cpp"
    $9 = (($3) + 296|0); //@line 828 "hspwnd_dish.cpp"
    $10 = (($9) + ($8<<4)|0); //@line 828 "hspwnd_dish.cpp"
    $0 = $10; //@line 828 "hspwnd_dish.cpp"
    break;
   }
  }
 } while(0);
 $11 = $0; //@line 829 "hspwnd_dish.cpp"
 STACKTOP = sp;return ($11|0); //@line 829 "hspwnd_dish.cpp"
}
function __ZN5Bmscr10listMTouchEPi($this,$outbuf) {
 $this = $this|0;
 $outbuf = $outbuf|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $buf = 0, $i = 0, $mt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $this;
 $1 = $outbuf;
 $2 = $0;
 $3 = $1; //@line 910 "hspwnd_dish.cpp"
 $buf = $3; //@line 910 "hspwnd_dish.cpp"
 $4 = (($2) + 296|0); //@line 911 "hspwnd_dish.cpp"
 $mt = $4; //@line 911 "hspwnd_dish.cpp"
 $5 = (($2) + 292|0); //@line 912 "hspwnd_dish.cpp"
 HEAP32[$5>>2] = 0; //@line 912 "hspwnd_dish.cpp"
 $i = 0; //@line 913 "hspwnd_dish.cpp"
 while(1) {
  $6 = $i; //@line 913 "hspwnd_dish.cpp"
  $7 = ($6|0)<(16); //@line 913 "hspwnd_dish.cpp"
  if (!($7)) {
   break;
  }
  $8 = $mt; //@line 914 "hspwnd_dish.cpp"
  $9 = HEAP32[$8>>2]|0; //@line 914 "hspwnd_dish.cpp"
  $10 = ($9|0)!=(0); //@line 914 "hspwnd_dish.cpp"
  if ($10) {
   $11 = $i; //@line 915 "hspwnd_dish.cpp"
   $12 = $buf; //@line 915 "hspwnd_dish.cpp"
   $13 = (($12) + 4|0); //@line 915 "hspwnd_dish.cpp"
   $buf = $13; //@line 915 "hspwnd_dish.cpp"
   HEAP32[$12>>2] = $11; //@line 915 "hspwnd_dish.cpp"
   $14 = (($2) + 292|0); //@line 916 "hspwnd_dish.cpp"
   $15 = HEAP32[$14>>2]|0; //@line 916 "hspwnd_dish.cpp"
   $16 = (($15) + 1)|0; //@line 916 "hspwnd_dish.cpp"
   HEAP32[$14>>2] = $16; //@line 916 "hspwnd_dish.cpp"
  }
  $17 = $mt; //@line 918 "hspwnd_dish.cpp"
  $18 = (($17) + 16|0); //@line 918 "hspwnd_dish.cpp"
  $mt = $18; //@line 918 "hspwnd_dish.cpp"
  $19 = $i; //@line 913 "hspwnd_dish.cpp"
  $20 = (($19) + 1)|0; //@line 913 "hspwnd_dish.cpp"
  $i = $20; //@line 913 "hspwnd_dish.cpp"
 }
 $21 = (($2) + 292|0); //@line 920 "hspwnd_dish.cpp"
 $22 = HEAP32[$21>>2]|0; //@line 920 "hspwnd_dish.cpp"
 STACKTOP = sp;return ($22|0); //@line 920 "hspwnd_dish.cpp"
}
function __Z23SetObjectEventNoticePtrPi($ptr) {
 $ptr = $ptr|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $ptr;
 $1 = $0; //@line 32 "hspwnd_obj.cpp"
 HEAP32[3984>>2] = $1; //@line 32 "hspwnd_obj.cpp"
 STACKTOP = sp;return; //@line 33 "hspwnd_obj.cpp"
}
function __ZN5Bmscr14ResetHSPObjectEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 164|0); //@line 135 "hspwnd_obj.cpp"
 $3 = HEAP32[$2>>2]|0; //@line 135 "hspwnd_obj.cpp"
 $4 = ($3|0)!=(0|0); //@line 135 "hspwnd_obj.cpp"
 if ($4) {
  $i = 0; //@line 136 "hspwnd_obj.cpp"
  while(1) {
   $5 = $i; //@line 136 "hspwnd_obj.cpp"
   $6 = (($1) + 168|0); //@line 136 "hspwnd_obj.cpp"
   $7 = HEAP32[$6>>2]|0; //@line 136 "hspwnd_obj.cpp"
   $8 = ($5|0)<($7|0); //@line 136 "hspwnd_obj.cpp"
   if (!($8)) {
    break;
   }
   $9 = $i; //@line 137 "hspwnd_obj.cpp"
   __ZN5Bmscr15DeleteHSPObjectEi($1,$9); //@line 137 "hspwnd_obj.cpp"
   $10 = $i; //@line 136 "hspwnd_obj.cpp"
   $11 = (($10) + 1)|0; //@line 136 "hspwnd_obj.cpp"
   $i = $11; //@line 136 "hspwnd_obj.cpp"
  }
  $12 = (($1) + 164|0); //@line 139 "hspwnd_obj.cpp"
  $13 = HEAP32[$12>>2]|0; //@line 139 "hspwnd_obj.cpp"
  __Z6sbFreePv($13); //@line 139 "hspwnd_obj.cpp"
 }
 $14 = (($1) + 164|0); //@line 141 "hspwnd_obj.cpp"
 HEAP32[$14>>2] = 0; //@line 141 "hspwnd_obj.cpp"
 $15 = (($1) + 168|0); //@line 142 "hspwnd_obj.cpp"
 HEAP32[$15>>2] = 0; //@line 142 "hspwnd_obj.cpp"
 $16 = (($1) + 172|0); //@line 143 "hspwnd_obj.cpp"
 HEAP32[$16>>2] = 128; //@line 143 "hspwnd_obj.cpp"
 STACKTOP = sp;return; //@line 144 "hspwnd_obj.cpp"
}
function __ZN5Bmscr15DeleteHSPObjectEi($this,$id) {
 $this = $this|0;
 $id = $id|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $obj = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $id;
 $2 = $0;
 $3 = $1; //@line 235 "hspwnd_obj.cpp"
 $4 = (__ZN5Bmscr16GetHSPObjectSafeEi($2,$3)|0); //@line 235 "hspwnd_obj.cpp"
 $obj = $4; //@line 235 "hspwnd_obj.cpp"
 $5 = $obj; //@line 237 "hspwnd_obj.cpp"
 $6 = HEAP16[$5>>1]|0; //@line 237 "hspwnd_obj.cpp"
 $7 = $6 << 16 >> 16; //@line 237 "hspwnd_obj.cpp"
 $8 = ($7|0)==(0); //@line 237 "hspwnd_obj.cpp"
 if ($8) {
  STACKTOP = sp;return; //@line 242 "hspwnd_obj.cpp"
 }
 $9 = $obj; //@line 238 "hspwnd_obj.cpp"
 $10 = (($9) + 48|0); //@line 238 "hspwnd_obj.cpp"
 $11 = HEAP32[$10>>2]|0; //@line 238 "hspwnd_obj.cpp"
 $12 = ($11|0)!=(0|0); //@line 238 "hspwnd_obj.cpp"
 if ($12) {
  $13 = $obj; //@line 238 "hspwnd_obj.cpp"
  $14 = (($13) + 48|0); //@line 238 "hspwnd_obj.cpp"
  $15 = HEAP32[$14>>2]|0; //@line 238 "hspwnd_obj.cpp"
  $16 = $obj; //@line 238 "hspwnd_obj.cpp"
  FUNCTION_TABLE_vi[$15 & 255]($16); //@line 238 "hspwnd_obj.cpp"
 }
 $17 = $obj; //@line 239 "hspwnd_obj.cpp"
 $18 = (($17) + 32|0); //@line 239 "hspwnd_obj.cpp"
 $19 = HEAP32[$18>>2]|0; //@line 239 "hspwnd_obj.cpp"
 $20 = ($19|0)!=(0|0); //@line 239 "hspwnd_obj.cpp"
 if ($20) {
  $21 = $obj; //@line 240 "hspwnd_obj.cpp"
  $22 = (($21) + 32|0); //@line 240 "hspwnd_obj.cpp"
  $23 = HEAP32[$22>>2]|0; //@line 240 "hspwnd_obj.cpp"
  __Z6sbFreePv($23); //@line 240 "hspwnd_obj.cpp"
  $24 = $obj; //@line 240 "hspwnd_obj.cpp"
  $25 = (($24) + 32|0); //@line 240 "hspwnd_obj.cpp"
  HEAP32[$25>>2] = 0; //@line 240 "hspwnd_obj.cpp"
 }
 $26 = $obj; //@line 242 "hspwnd_obj.cpp"
 HEAP16[$26>>1] = 0; //@line 242 "hspwnd_obj.cpp"
 STACKTOP = sp;return; //@line 242 "hspwnd_obj.cpp"
}
function __ZN5Bmscr12EnableObjectEii($this,$id,$sw) {
 $this = $this|0;
 $id = $id|0;
 $sw = $sw|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $obj = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $id;
 $2 = $sw;
 $3 = $0;
 $4 = $1; //@line 150 "hspwnd_obj.cpp"
 $5 = (__ZN5Bmscr16GetHSPObjectSafeEi($3,$4)|0); //@line 150 "hspwnd_obj.cpp"
 $obj = $5; //@line 150 "hspwnd_obj.cpp"
 $6 = $obj; //@line 151 "hspwnd_obj.cpp"
 $7 = HEAP16[$6>>1]|0; //@line 151 "hspwnd_obj.cpp"
 $8 = $7 << 16 >> 16; //@line 151 "hspwnd_obj.cpp"
 $9 = ($8|0)==(0); //@line 151 "hspwnd_obj.cpp"
 if ($9) {
  $10 = (___cxa_allocate_exception(4)|0); //@line 151 "hspwnd_obj.cpp"
  HEAP32[$10>>2] = 3; //@line 151 "hspwnd_obj.cpp"
  ___cxa_throw(($10|0),(624|0),(0|0)); //@line 151 "hspwnd_obj.cpp"
  // unreachable; //@line 151 "hspwnd_obj.cpp"
 } else {
  $11 = $2; //@line 152 "hspwnd_obj.cpp"
  $12 = $11&65535; //@line 152 "hspwnd_obj.cpp"
  $13 = $obj; //@line 152 "hspwnd_obj.cpp"
  $14 = (($13) + 2|0); //@line 152 "hspwnd_obj.cpp"
  HEAP16[$14>>1] = $12; //@line 152 "hspwnd_obj.cpp"
  STACKTOP = sp;return; //@line 154 "hspwnd_obj.cpp"
 }
}
function __ZN5Bmscr16GetHSPObjectSafeEi($this,$id) {
 $this = $this|0;
 $id = $id|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $id;
 $2 = $0;
 $3 = $1; //@line 225 "hspwnd_obj.cpp"
 $4 = ($3|0)<(0); //@line 225 "hspwnd_obj.cpp"
 if (!($4)) {
  $5 = $1; //@line 225 "hspwnd_obj.cpp"
  $6 = (($2) + 168|0); //@line 225 "hspwnd_obj.cpp"
  $7 = HEAP32[$6>>2]|0; //@line 225 "hspwnd_obj.cpp"
  $8 = ($5|0)>=($7|0); //@line 225 "hspwnd_obj.cpp"
  if (!($8)) {
   $10 = $1; //@line 226 "hspwnd_obj.cpp"
   $11 = (($2) + 164|0); //@line 226 "hspwnd_obj.cpp"
   $12 = HEAP32[$11>>2]|0; //@line 226 "hspwnd_obj.cpp"
   $13 = (($12) + (($10*52)|0)|0); //@line 226 "hspwnd_obj.cpp"
   STACKTOP = sp;return ($13|0); //@line 226 "hspwnd_obj.cpp"
  }
 }
 $9 = (___cxa_allocate_exception(4)|0); //@line 225 "hspwnd_obj.cpp"
 HEAP32[$9>>2] = 3; //@line 225 "hspwnd_obj.cpp"
 ___cxa_throw(($9|0),(624|0),(0|0)); //@line 225 "hspwnd_obj.cpp"
 // unreachable; //@line 225 "hspwnd_obj.cpp"
 return 0|0;
}
function __ZN5Bmscr13SetObjectModeEii($this,$id,$owmode) {
 $this = $this|0;
 $id = $id|0;
 $owmode = $owmode|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $obj = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $id;
 $2 = $owmode;
 $3 = $0;
 $4 = $1; //@line 160 "hspwnd_obj.cpp"
 $5 = (__ZN5Bmscr16GetHSPObjectSafeEi($3,$4)|0); //@line 160 "hspwnd_obj.cpp"
 $obj = $5; //@line 160 "hspwnd_obj.cpp"
 $6 = $obj; //@line 161 "hspwnd_obj.cpp"
 $7 = HEAP16[$6>>1]|0; //@line 161 "hspwnd_obj.cpp"
 $8 = $7 << 16 >> 16; //@line 161 "hspwnd_obj.cpp"
 $9 = ($8|0)==(0); //@line 161 "hspwnd_obj.cpp"
 if ($9) {
  $10 = (___cxa_allocate_exception(4)|0); //@line 161 "hspwnd_obj.cpp"
  HEAP32[$10>>2] = 3; //@line 161 "hspwnd_obj.cpp"
  ___cxa_throw(($10|0),(624|0),(0|0)); //@line 161 "hspwnd_obj.cpp"
  // unreachable; //@line 161 "hspwnd_obj.cpp"
 }
 $11 = $2; //@line 162 "hspwnd_obj.cpp"
 $12 = ($11|0)<=(0); //@line 162 "hspwnd_obj.cpp"
 if ($12) {
  $13 = (___cxa_allocate_exception(4)|0); //@line 162 "hspwnd_obj.cpp"
  HEAP32[$13>>2] = 3; //@line 162 "hspwnd_obj.cpp"
  ___cxa_throw(($13|0),(624|0),(0|0)); //@line 162 "hspwnd_obj.cpp"
  // unreachable; //@line 162 "hspwnd_obj.cpp"
 } else {
  $14 = $2; //@line 163 "hspwnd_obj.cpp"
  $15 = $14&65535; //@line 163 "hspwnd_obj.cpp"
  $16 = $obj; //@line 163 "hspwnd_obj.cpp"
  HEAP16[$16>>1] = $15; //@line 163 "hspwnd_obj.cpp"
  STACKTOP = sp;return; //@line 164 "hspwnd_obj.cpp"
 }
}
function __ZN5Bmscr12NewHSPObjectEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $id = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $this;
 $2 = $1;
 $id = 0; //@line 172 "hspwnd_obj.cpp"
 $3 = (($2) + 164|0); //@line 173 "hspwnd_obj.cpp"
 $4 = HEAP32[$3>>2]|0; //@line 173 "hspwnd_obj.cpp"
 $5 = ($4|0)==(0|0); //@line 173 "hspwnd_obj.cpp"
 do {
  if ($5) {
   $6 = (__Z7sbAlloci(52)|0); //@line 174 "hspwnd_obj.cpp"
   $7 = (($2) + 164|0); //@line 174 "hspwnd_obj.cpp"
   HEAP32[$7>>2] = $6; //@line 174 "hspwnd_obj.cpp"
   $8 = (($2) + 168|0); //@line 175 "hspwnd_obj.cpp"
   $9 = HEAP32[$8>>2]|0; //@line 175 "hspwnd_obj.cpp"
   $10 = (($9) + 1)|0; //@line 175 "hspwnd_obj.cpp"
   HEAP32[$8>>2] = $10; //@line 175 "hspwnd_obj.cpp"
  } else {
   $11 = (($2) + 168|0); //@line 177 "hspwnd_obj.cpp"
   $12 = HEAP32[$11>>2]|0; //@line 177 "hspwnd_obj.cpp"
   $13 = ($12|0)!=(0); //@line 177 "hspwnd_obj.cpp"
   do {
    if ($13) {
     $i = 0; //@line 178 "hspwnd_obj.cpp"
     while(1) {
      $14 = $i; //@line 178 "hspwnd_obj.cpp"
      $15 = (($2) + 168|0); //@line 178 "hspwnd_obj.cpp"
      $16 = HEAP32[$15>>2]|0; //@line 178 "hspwnd_obj.cpp"
      $17 = ($14|0)<($16|0); //@line 178 "hspwnd_obj.cpp"
      if (!($17)) {
       label = 10;
       break;
      }
      $18 = $i; //@line 179 "hspwnd_obj.cpp"
      $19 = (($2) + 164|0); //@line 179 "hspwnd_obj.cpp"
      $20 = HEAP32[$19>>2]|0; //@line 179 "hspwnd_obj.cpp"
      $21 = (($20) + (($18*52)|0)|0); //@line 179 "hspwnd_obj.cpp"
      $22 = HEAP16[$21>>1]|0; //@line 179 "hspwnd_obj.cpp"
      $23 = $22 << 16 >> 16; //@line 179 "hspwnd_obj.cpp"
      $24 = ($23|0)==(0); //@line 179 "hspwnd_obj.cpp"
      if ($24) {
       break;
      }
      $26 = $i; //@line 178 "hspwnd_obj.cpp"
      $27 = (($26) + 1)|0; //@line 178 "hspwnd_obj.cpp"
      $i = $27; //@line 178 "hspwnd_obj.cpp"
     }
     if ((label|0) == 10) {
      break;
     }
     $25 = $i; //@line 179 "hspwnd_obj.cpp"
     $0 = $25; //@line 179 "hspwnd_obj.cpp"
     $45 = $0; //@line 187 "hspwnd_obj.cpp"
     STACKTOP = sp;return ($45|0); //@line 187 "hspwnd_obj.cpp"
    }
   } while(0);
   $28 = (($2) + 168|0); //@line 182 "hspwnd_obj.cpp"
   $29 = HEAP32[$28>>2]|0; //@line 182 "hspwnd_obj.cpp"
   $30 = (($2) + 172|0); //@line 182 "hspwnd_obj.cpp"
   $31 = HEAP32[$30>>2]|0; //@line 182 "hspwnd_obj.cpp"
   $32 = ($29|0)>=($31|0); //@line 182 "hspwnd_obj.cpp"
   if ($32) {
    $33 = (___cxa_allocate_exception(4)|0); //@line 182 "hspwnd_obj.cpp"
    HEAP32[$33>>2] = 33; //@line 182 "hspwnd_obj.cpp"
    ___cxa_throw(($33|0),(624|0),(0|0)); //@line 182 "hspwnd_obj.cpp"
    // unreachable; //@line 182 "hspwnd_obj.cpp"
   } else {
    $34 = (($2) + 168|0); //@line 183 "hspwnd_obj.cpp"
    $35 = HEAP32[$34>>2]|0; //@line 183 "hspwnd_obj.cpp"
    $36 = (($35) + 1)|0; //@line 183 "hspwnd_obj.cpp"
    HEAP32[$34>>2] = $36; //@line 183 "hspwnd_obj.cpp"
    $id = $35; //@line 183 "hspwnd_obj.cpp"
    $37 = (($2) + 164|0); //@line 184 "hspwnd_obj.cpp"
    $38 = HEAP32[$37>>2]|0; //@line 184 "hspwnd_obj.cpp"
    $39 = (($2) + 168|0); //@line 184 "hspwnd_obj.cpp"
    $40 = HEAP32[$39>>2]|0; //@line 184 "hspwnd_obj.cpp"
    $41 = ($40*52)|0; //@line 184 "hspwnd_obj.cpp"
    $42 = (__Z8sbExpandPci($38,$41)|0); //@line 184 "hspwnd_obj.cpp"
    $43 = (($2) + 164|0); //@line 184 "hspwnd_obj.cpp"
    HEAP32[$43>>2] = $42; //@line 184 "hspwnd_obj.cpp"
    break;
   }
  }
 } while(0);
 $44 = $id; //@line 186 "hspwnd_obj.cpp"
 $0 = $44; //@line 186 "hspwnd_obj.cpp"
 $45 = $0; //@line 187 "hspwnd_obj.cpp"
 STACKTOP = sp;return ($45|0); //@line 187 "hspwnd_obj.cpp"
}
function __ZN5Bmscr12AddHSPObjectEii($this,$id,$mode) {
 $this = $this|0;
 $id = $id|0;
 $mode = $mode|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $obj = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $id;
 $2 = $mode;
 $3 = $0;
 $4 = $1; //@line 193 "hspwnd_obj.cpp"
 $5 = (($3) + 164|0); //@line 193 "hspwnd_obj.cpp"
 $6 = HEAP32[$5>>2]|0; //@line 193 "hspwnd_obj.cpp"
 $7 = (($6) + (($4*52)|0)|0); //@line 193 "hspwnd_obj.cpp"
 $obj = $7; //@line 193 "hspwnd_obj.cpp"
 $8 = $obj; //@line 194 "hspwnd_obj.cpp"
 $9 = (($8) + 8|0); //@line 194 "hspwnd_obj.cpp"
 HEAP32[$9>>2] = 0; //@line 194 "hspwnd_obj.cpp"
 $10 = $2; //@line 195 "hspwnd_obj.cpp"
 $11 = $10&65535; //@line 195 "hspwnd_obj.cpp"
 $12 = $obj; //@line 195 "hspwnd_obj.cpp"
 HEAP16[$12>>1] = $11; //@line 195 "hspwnd_obj.cpp"
 $13 = $obj; //@line 196 "hspwnd_obj.cpp"
 $14 = (($13) + 2|0); //@line 196 "hspwnd_obj.cpp"
 HEAP16[$14>>1] = 1; //@line 196 "hspwnd_obj.cpp"
 $15 = (__ZN5Bmscr8GetBMSCREv($3)|0); //@line 197 "hspwnd_obj.cpp"
 $16 = $obj; //@line 197 "hspwnd_obj.cpp"
 $17 = (($16) + 4|0); //@line 197 "hspwnd_obj.cpp"
 HEAP32[$17>>2] = $15; //@line 197 "hspwnd_obj.cpp"
 $18 = $obj; //@line 198 "hspwnd_obj.cpp"
 $19 = (($18) + 40|0); //@line 198 "hspwnd_obj.cpp"
 HEAP32[$19>>2] = 0; //@line 198 "hspwnd_obj.cpp"
 $20 = $obj; //@line 199 "hspwnd_obj.cpp"
 $21 = (($20) + 44|0); //@line 199 "hspwnd_obj.cpp"
 HEAP32[$21>>2] = 0; //@line 199 "hspwnd_obj.cpp"
 $22 = $obj; //@line 200 "hspwnd_obj.cpp"
 $23 = (($22) + 48|0); //@line 200 "hspwnd_obj.cpp"
 HEAP32[$23>>2] = 0; //@line 200 "hspwnd_obj.cpp"
 $24 = $obj; //@line 201 "hspwnd_obj.cpp"
 $25 = (($24) + 36|0); //@line 201 "hspwnd_obj.cpp"
 HEAP32[$25>>2] = 0; //@line 201 "hspwnd_obj.cpp"
 $26 = $obj; //@line 202 "hspwnd_obj.cpp"
 $27 = (($26) + 12|0); //@line 202 "hspwnd_obj.cpp"
 HEAP32[$27>>2] = 0; //@line 202 "hspwnd_obj.cpp"
 $28 = $obj; //@line 203 "hspwnd_obj.cpp"
 $29 = (($28) + 16|0); //@line 203 "hspwnd_obj.cpp"
 HEAP32[$29>>2] = 0; //@line 203 "hspwnd_obj.cpp"
 $30 = $obj; //@line 204 "hspwnd_obj.cpp"
 $31 = (($30) + 32|0); //@line 204 "hspwnd_obj.cpp"
 HEAP32[$31>>2] = 0; //@line 204 "hspwnd_obj.cpp"
 $32 = (($3) + 68|0); //@line 206 "hspwnd_obj.cpp"
 $33 = HEAP32[$32>>2]|0; //@line 206 "hspwnd_obj.cpp"
 $34 = $33&65535; //@line 206 "hspwnd_obj.cpp"
 $35 = $obj; //@line 206 "hspwnd_obj.cpp"
 $36 = (($35) + 20|0); //@line 206 "hspwnd_obj.cpp"
 HEAP16[$36>>1] = $34; //@line 206 "hspwnd_obj.cpp"
 $37 = (($3) + 72|0); //@line 207 "hspwnd_obj.cpp"
 $38 = HEAP32[$37>>2]|0; //@line 207 "hspwnd_obj.cpp"
 $39 = $38&65535; //@line 207 "hspwnd_obj.cpp"
 $40 = $obj; //@line 207 "hspwnd_obj.cpp"
 $41 = (($40) + 22|0); //@line 207 "hspwnd_obj.cpp"
 HEAP16[$41>>1] = $39; //@line 207 "hspwnd_obj.cpp"
 $42 = (($3) + 76|0); //@line 208 "hspwnd_obj.cpp"
 $43 = HEAP32[$42>>2]|0; //@line 208 "hspwnd_obj.cpp"
 $44 = $43&65535; //@line 208 "hspwnd_obj.cpp"
 $45 = $obj; //@line 208 "hspwnd_obj.cpp"
 $46 = (($45) + 24|0); //@line 208 "hspwnd_obj.cpp"
 HEAP16[$46>>1] = $44; //@line 208 "hspwnd_obj.cpp"
 $47 = (($3) + 80|0); //@line 209 "hspwnd_obj.cpp"
 $48 = HEAP32[$47>>2]|0; //@line 209 "hspwnd_obj.cpp"
 $49 = $48&65535; //@line 209 "hspwnd_obj.cpp"
 $50 = $obj; //@line 209 "hspwnd_obj.cpp"
 $51 = (($50) + 26|0); //@line 209 "hspwnd_obj.cpp"
 HEAP16[$51>>1] = $49; //@line 209 "hspwnd_obj.cpp"
 $52 = $obj; //@line 210 "hspwnd_obj.cpp"
 $53 = (($52) + 28|0); //@line 210 "hspwnd_obj.cpp"
 HEAP16[$53>>1] = 0; //@line 210 "hspwnd_obj.cpp"
 $54 = $obj; //@line 211 "hspwnd_obj.cpp"
 $55 = (($54) + 30|0); //@line 211 "hspwnd_obj.cpp"
 HEAP16[$55>>1] = -1; //@line 211 "hspwnd_obj.cpp"
 $56 = $obj; //@line 213 "hspwnd_obj.cpp"
 STACKTOP = sp;return ($56|0); //@line 213 "hspwnd_obj.cpp"
}
function __ZN5Bmscr8GetBMSCREv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 STACKTOP = sp;return ($1|0); //@line 141 "./hspwnd_dish.h"
}
function __ZN5Bmscr18AddHSPObjectButtonEPciPv($this,$name,$flag,$callptr) {
 $this = $this|0;
 $name = $name|0;
 $flag = $flag|0;
 $callptr = $callptr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $btn = 0, $id = 0, $obj = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $this;
 $1 = $name;
 $2 = $flag;
 $3 = $callptr;
 $4 = $0;
 $5 = (__ZN5Bmscr12NewHSPObjectEv($4)|0); //@line 254 "hspwnd_obj.cpp"
 $id = $5; //@line 254 "hspwnd_obj.cpp"
 $6 = $id; //@line 255 "hspwnd_obj.cpp"
 $7 = (__ZN5Bmscr12AddHSPObjectEii($4,$6,1)|0); //@line 255 "hspwnd_obj.cpp"
 $obj = $7; //@line 255 "hspwnd_obj.cpp"
 $8 = $obj; //@line 257 "hspwnd_obj.cpp"
 $9 = (($8) + 12|0); //@line 257 "hspwnd_obj.cpp"
 HEAP32[$9>>2] = -1; //@line 257 "hspwnd_obj.cpp"
 $10 = $id; //@line 258 "hspwnd_obj.cpp"
 $11 = $obj; //@line 258 "hspwnd_obj.cpp"
 $12 = (($11) + 16|0); //@line 258 "hspwnd_obj.cpp"
 HEAP32[$12>>2] = $10; //@line 258 "hspwnd_obj.cpp"
 $13 = (__Z7sbAlloci(88)|0); //@line 260 "hspwnd_obj.cpp"
 $btn = $13; //@line 260 "hspwnd_obj.cpp"
 $14 = $btn; //@line 261 "hspwnd_obj.cpp"
 $15 = $obj; //@line 261 "hspwnd_obj.cpp"
 $16 = (($15) + 32|0); //@line 261 "hspwnd_obj.cpp"
 HEAP32[$16>>2] = $14; //@line 261 "hspwnd_obj.cpp"
 $17 = $btn; //@line 263 "hspwnd_obj.cpp"
 $18 = $1; //@line 263 "hspwnd_obj.cpp"
 (_strncpy(($17|0),($18|0),63)|0); //@line 263 "hspwnd_obj.cpp"
 $19 = $2; //@line 264 "hspwnd_obj.cpp"
 $20 = $19&65535; //@line 264 "hspwnd_obj.cpp"
 $21 = $btn; //@line 264 "hspwnd_obj.cpp"
 $22 = (($21) + 80|0); //@line 264 "hspwnd_obj.cpp"
 HEAP16[$22>>1] = $20; //@line 264 "hspwnd_obj.cpp"
 $23 = $3; //@line 265 "hspwnd_obj.cpp"
 $24 = $btn; //@line 265 "hspwnd_obj.cpp"
 $25 = (($24) + 84|0); //@line 265 "hspwnd_obj.cpp"
 HEAP32[$25>>2] = $23; //@line 265 "hspwnd_obj.cpp"
 $26 = $btn; //@line 266 "hspwnd_obj.cpp"
 $27 = (($26) + 64|0); //@line 266 "hspwnd_obj.cpp"
 HEAP16[$27>>1] = -1; //@line 266 "hspwnd_obj.cpp"
 $28 = $btn; //@line 267 "hspwnd_obj.cpp"
 $29 = (($28) + 66|0); //@line 267 "hspwnd_obj.cpp"
 HEAP16[$29>>1] = -1; //@line 267 "hspwnd_obj.cpp"
 $30 = $obj; //@line 269 "hspwnd_obj.cpp"
 $31 = (($30) + 36|0); //@line 269 "hspwnd_obj.cpp"
 HEAP32[$31>>2] = 175; //@line 269 "hspwnd_obj.cpp"
 $32 = $obj; //@line 270 "hspwnd_obj.cpp"
 $33 = (($32) + 40|0); //@line 270 "hspwnd_obj.cpp"
 HEAP32[$33>>2] = 176; //@line 270 "hspwnd_obj.cpp"
 $34 = (($4) + 80|0); //@line 273 "hspwnd_obj.cpp"
 $35 = HEAP32[$34>>2]|0; //@line 273 "hspwnd_obj.cpp"
 __ZN5Bmscr6PosincEi($4,$35); //@line 273 "hspwnd_obj.cpp"
 $36 = $id; //@line 274 "hspwnd_obj.cpp"
 STACKTOP = sp;return ($36|0); //@line 274 "hspwnd_obj.cpp"
}
function __ZL17Object_ButtonDrawP10HSPOBJINFO($info) {
 $info = $info|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bm = 0, $btn = 0, $col1 = 0, $col2 = 0, $tcol = 0, $wnd = 0;
 var $x1 = 0, $x2 = 0, $y1 = 0, $y2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = $info;
 $1 = $0; //@line 55 "hspwnd_obj.cpp"
 $2 = (($1) + 4|0); //@line 55 "hspwnd_obj.cpp"
 $3 = HEAP32[$2>>2]|0; //@line 55 "hspwnd_obj.cpp"
 $bm = $3; //@line 55 "hspwnd_obj.cpp"
 $4 = $bm; //@line 56 "hspwnd_obj.cpp"
 __ZN5Bmscr15SetFontInternalEPcii($4,3992,18,0); //@line 56 "hspwnd_obj.cpp"
 $5 = $0; //@line 58 "hspwnd_obj.cpp"
 $6 = (($5) + 20|0); //@line 58 "hspwnd_obj.cpp"
 $7 = HEAP16[$6>>1]|0; //@line 58 "hspwnd_obj.cpp"
 $8 = $7 << 16 >> 16; //@line 58 "hspwnd_obj.cpp"
 $x1 = $8; //@line 58 "hspwnd_obj.cpp"
 $9 = $0; //@line 58 "hspwnd_obj.cpp"
 $10 = (($9) + 22|0); //@line 58 "hspwnd_obj.cpp"
 $11 = HEAP16[$10>>1]|0; //@line 58 "hspwnd_obj.cpp"
 $12 = $11 << 16 >> 16; //@line 58 "hspwnd_obj.cpp"
 $y1 = $12; //@line 58 "hspwnd_obj.cpp"
 $13 = $0; //@line 59 "hspwnd_obj.cpp"
 $14 = (($13) + 20|0); //@line 59 "hspwnd_obj.cpp"
 $15 = HEAP16[$14>>1]|0; //@line 59 "hspwnd_obj.cpp"
 $16 = $15 << 16 >> 16; //@line 59 "hspwnd_obj.cpp"
 $17 = $0; //@line 59 "hspwnd_obj.cpp"
 $18 = (($17) + 24|0); //@line 59 "hspwnd_obj.cpp"
 $19 = HEAP16[$18>>1]|0; //@line 59 "hspwnd_obj.cpp"
 $20 = $19 << 16 >> 16; //@line 59 "hspwnd_obj.cpp"
 $21 = (($16) + ($20))|0; //@line 59 "hspwnd_obj.cpp"
 $22 = (($21) - 1)|0; //@line 59 "hspwnd_obj.cpp"
 $x2 = $22; //@line 59 "hspwnd_obj.cpp"
 $23 = $0; //@line 59 "hspwnd_obj.cpp"
 $24 = (($23) + 22|0); //@line 59 "hspwnd_obj.cpp"
 $25 = HEAP16[$24>>1]|0; //@line 59 "hspwnd_obj.cpp"
 $26 = $25 << 16 >> 16; //@line 59 "hspwnd_obj.cpp"
 $27 = $0; //@line 59 "hspwnd_obj.cpp"
 $28 = (($27) + 26|0); //@line 59 "hspwnd_obj.cpp"
 $29 = HEAP16[$28>>1]|0; //@line 59 "hspwnd_obj.cpp"
 $30 = $29 << 16 >> 16; //@line 59 "hspwnd_obj.cpp"
 $31 = (($26) + ($30))|0; //@line 59 "hspwnd_obj.cpp"
 $32 = (($31) - 1)|0; //@line 59 "hspwnd_obj.cpp"
 $y2 = $32; //@line 59 "hspwnd_obj.cpp"
 $33 = $0; //@line 61 "hspwnd_obj.cpp"
 $34 = (($33) + 32|0); //@line 61 "hspwnd_obj.cpp"
 $35 = HEAP32[$34>>2]|0; //@line 61 "hspwnd_obj.cpp"
 $btn = $35; //@line 61 "hspwnd_obj.cpp"
 $36 = $btn; //@line 62 "hspwnd_obj.cpp"
 $37 = (($36) + 64|0); //@line 62 "hspwnd_obj.cpp"
 $38 = HEAP16[$37>>1]|0; //@line 62 "hspwnd_obj.cpp"
 $39 = $38 << 16 >> 16; //@line 62 "hspwnd_obj.cpp"
 $40 = ($39|0)<(0); //@line 62 "hspwnd_obj.cpp"
 if ($40) {
  $41 = $bm; //@line 63 "hspwnd_obj.cpp"
  $42 = (($41) + 100|0); //@line 63 "hspwnd_obj.cpp"
  HEAP32[$42>>2] = 3; //@line 63 "hspwnd_obj.cpp"
  $43 = $bm; //@line 64 "hspwnd_obj.cpp"
  $44 = (($43) + 144|0); //@line 64 "hspwnd_obj.cpp"
  HEAP32[$44>>2] = 0; //@line 64 "hspwnd_obj.cpp"
  $45 = $x1; //@line 65 "hspwnd_obj.cpp"
  $46 = $bm; //@line 65 "hspwnd_obj.cpp"
  $47 = (($46) + 68|0); //@line 65 "hspwnd_obj.cpp"
  HEAP32[$47>>2] = $45; //@line 65 "hspwnd_obj.cpp"
  $48 = $y1; //@line 66 "hspwnd_obj.cpp"
  $49 = $bm; //@line 66 "hspwnd_obj.cpp"
  $50 = (($49) + 72|0); //@line 66 "hspwnd_obj.cpp"
  HEAP32[$50>>2] = $48; //@line 66 "hspwnd_obj.cpp"
  $51 = $bm; //@line 67 "hspwnd_obj.cpp"
  __ZN5Bmscr8SetcolorEi($51,0); //@line 67 "hspwnd_obj.cpp"
  $52 = $bm; //@line 68 "hspwnd_obj.cpp"
  $53 = $0; //@line 68 "hspwnd_obj.cpp"
  $54 = (($53) + 32|0); //@line 68 "hspwnd_obj.cpp"
  $55 = HEAP32[$54>>2]|0; //@line 68 "hspwnd_obj.cpp"
  __ZN5Bmscr5PrintEPc($52,$55); //@line 68 "hspwnd_obj.cpp"
  $56 = $bm; //@line 69 "hspwnd_obj.cpp"
  $57 = (($56) + 156|0); //@line 69 "hspwnd_obj.cpp"
  $58 = HEAP16[$57>>1]|0; //@line 69 "hspwnd_obj.cpp"
  $59 = $btn; //@line 69 "hspwnd_obj.cpp"
  $60 = (($59) + 64|0); //@line 69 "hspwnd_obj.cpp"
  HEAP16[$60>>1] = $58; //@line 69 "hspwnd_obj.cpp"
  $61 = $bm; //@line 70 "hspwnd_obj.cpp"
  $62 = (($61) + 158|0); //@line 70 "hspwnd_obj.cpp"
  $63 = HEAP16[$62>>1]|0; //@line 70 "hspwnd_obj.cpp"
  $64 = $btn; //@line 70 "hspwnd_obj.cpp"
  $65 = (($64) + 66|0); //@line 70 "hspwnd_obj.cpp"
  HEAP16[$65>>1] = $63; //@line 70 "hspwnd_obj.cpp"
 }
 $tcol = -16777216; //@line 73 "hspwnd_obj.cpp"
 $66 = $0; //@line 75 "hspwnd_obj.cpp"
 $67 = (($66) + 30|0); //@line 75 "hspwnd_obj.cpp"
 $68 = HEAP16[$67>>1]|0; //@line 75 "hspwnd_obj.cpp"
 $69 = $68 << 16 >> 16; //@line 75 "hspwnd_obj.cpp"
 $70 = ($69|0)<(0); //@line 75 "hspwnd_obj.cpp"
 if ($70) {
  $71 = $0; //@line 77 "hspwnd_obj.cpp"
  $72 = (($71) + 2|0); //@line 77 "hspwnd_obj.cpp"
  $73 = HEAP16[$72>>1]|0; //@line 77 "hspwnd_obj.cpp"
  $74 = ($73<<16>>16)!=(0); //@line 77 "hspwnd_obj.cpp"
  if ($74) {
   $75 = $0; //@line 78 "hspwnd_obj.cpp"
   $76 = (($75) + 28|0); //@line 78 "hspwnd_obj.cpp"
   $77 = HEAP16[$76>>1]|0; //@line 78 "hspwnd_obj.cpp"
   $78 = $77 << 16 >> 16; //@line 78 "hspwnd_obj.cpp"
   $79 = ($78|0)==(1); //@line 78 "hspwnd_obj.cpp"
   if ($79) {
    $col1 = -7303024; //@line 79 "hspwnd_obj.cpp"
    $col2 = -4144960; //@line 79 "hspwnd_obj.cpp"
   } else {
    $col1 = -986896; //@line 82 "hspwnd_obj.cpp"
    $col2 = -4144960; //@line 82 "hspwnd_obj.cpp"
   }
  } else {
   $col1 = -8355712; //@line 86 "hspwnd_obj.cpp"
   $col2 = -10461088; //@line 86 "hspwnd_obj.cpp"
   $tcol = -12566464; //@line 86 "hspwnd_obj.cpp"
  }
  $80 = $bm; //@line 88 "hspwnd_obj.cpp"
  $81 = (($80) + 100|0); //@line 88 "hspwnd_obj.cpp"
  HEAP32[$81>>2] = 0; //@line 88 "hspwnd_obj.cpp"
  $82 = $bm; //@line 89 "hspwnd_obj.cpp"
  $83 = (($82) + 144|0); //@line 89 "hspwnd_obj.cpp"
  HEAP32[$83>>2] = 255; //@line 89 "hspwnd_obj.cpp"
  $84 = $bm; //@line 90 "hspwnd_obj.cpp"
  $85 = $x1; //@line 90 "hspwnd_obj.cpp"
  $86 = (($85) + 1)|0; //@line 90 "hspwnd_obj.cpp"
  $87 = $y1; //@line 90 "hspwnd_obj.cpp"
  $88 = (($87) + 1)|0; //@line 90 "hspwnd_obj.cpp"
  $89 = $0; //@line 90 "hspwnd_obj.cpp"
  $90 = (($89) + 24|0); //@line 90 "hspwnd_obj.cpp"
  $91 = HEAP16[$90>>1]|0; //@line 90 "hspwnd_obj.cpp"
  $92 = $91 << 16 >> 16; //@line 90 "hspwnd_obj.cpp"
  $93 = (($92) - 2)|0; //@line 90 "hspwnd_obj.cpp"
  $94 = $0; //@line 90 "hspwnd_obj.cpp"
  $95 = (($94) + 26|0); //@line 90 "hspwnd_obj.cpp"
  $96 = HEAP16[$95>>1]|0; //@line 90 "hspwnd_obj.cpp"
  $97 = $96 << 16 >> 16; //@line 90 "hspwnd_obj.cpp"
  $98 = (($97) - 2)|0; //@line 90 "hspwnd_obj.cpp"
  $99 = $col1; //@line 90 "hspwnd_obj.cpp"
  $100 = $col2; //@line 90 "hspwnd_obj.cpp"
  __ZN5Bmscr8GradFillEiiiiiii($84,$86,$88,$93,$98,1,$99,$100); //@line 90 "hspwnd_obj.cpp"
  $101 = $bm; //@line 91 "hspwnd_obj.cpp"
  __ZN5Bmscr8SetcolorEi($101,-8355712); //@line 91 "hspwnd_obj.cpp"
  $102 = $x1; //@line 92 "hspwnd_obj.cpp"
  $103 = $bm; //@line 92 "hspwnd_obj.cpp"
  $104 = (($103) + 68|0); //@line 92 "hspwnd_obj.cpp"
  HEAP32[$104>>2] = $102; //@line 92 "hspwnd_obj.cpp"
  $105 = $y1; //@line 92 "hspwnd_obj.cpp"
  $106 = $bm; //@line 92 "hspwnd_obj.cpp"
  $107 = (($106) + 72|0); //@line 92 "hspwnd_obj.cpp"
  HEAP32[$107>>2] = $105; //@line 92 "hspwnd_obj.cpp"
  $108 = $bm; //@line 93 "hspwnd_obj.cpp"
  $109 = $x2; //@line 93 "hspwnd_obj.cpp"
  $110 = $y1; //@line 93 "hspwnd_obj.cpp"
  __ZN5Bmscr4LineEii($108,$109,$110); //@line 93 "hspwnd_obj.cpp"
  $111 = $bm; //@line 94 "hspwnd_obj.cpp"
  $112 = $x2; //@line 94 "hspwnd_obj.cpp"
  $113 = $y2; //@line 94 "hspwnd_obj.cpp"
  __ZN5Bmscr4LineEii($111,$112,$113); //@line 94 "hspwnd_obj.cpp"
  $114 = $bm; //@line 95 "hspwnd_obj.cpp"
  $115 = $x1; //@line 95 "hspwnd_obj.cpp"
  $116 = $y2; //@line 95 "hspwnd_obj.cpp"
  __ZN5Bmscr4LineEii($114,$115,$116); //@line 95 "hspwnd_obj.cpp"
  $117 = $bm; //@line 96 "hspwnd_obj.cpp"
  $118 = $x1; //@line 96 "hspwnd_obj.cpp"
  $119 = $y1; //@line 96 "hspwnd_obj.cpp"
  __ZN5Bmscr4LineEii($117,$118,$119); //@line 96 "hspwnd_obj.cpp"
 } else {
  $120 = $btn; //@line 99 "hspwnd_obj.cpp"
  $121 = (($120) + 68|0); //@line 99 "hspwnd_obj.cpp"
  $122 = HEAP16[$121>>1]|0; //@line 99 "hspwnd_obj.cpp"
  $123 = $122 << 16 >> 16; //@line 99 "hspwnd_obj.cpp"
  $col1 = $123; //@line 99 "hspwnd_obj.cpp"
  $124 = $btn; //@line 99 "hspwnd_obj.cpp"
  $125 = (($124) + 70|0); //@line 99 "hspwnd_obj.cpp"
  $126 = HEAP16[$125>>1]|0; //@line 99 "hspwnd_obj.cpp"
  $127 = $126 << 16 >> 16; //@line 99 "hspwnd_obj.cpp"
  $col2 = $127; //@line 99 "hspwnd_obj.cpp"
  $128 = $0; //@line 100 "hspwnd_obj.cpp"
  $129 = (($128) + 2|0); //@line 100 "hspwnd_obj.cpp"
  $130 = HEAP16[$129>>1]|0; //@line 100 "hspwnd_obj.cpp"
  $131 = ($130<<16>>16)!=(0); //@line 100 "hspwnd_obj.cpp"
  if ($131) {
   $132 = $0; //@line 101 "hspwnd_obj.cpp"
   $133 = (($132) + 28|0); //@line 101 "hspwnd_obj.cpp"
   $134 = HEAP16[$133>>1]|0; //@line 101 "hspwnd_obj.cpp"
   $135 = $134 << 16 >> 16; //@line 101 "hspwnd_obj.cpp"
   $136 = ($135|0)==(1); //@line 101 "hspwnd_obj.cpp"
   if ($136) {
    $137 = $btn; //@line 102 "hspwnd_obj.cpp"
    $138 = (($137) + 72|0); //@line 102 "hspwnd_obj.cpp"
    $139 = HEAP16[$138>>1]|0; //@line 102 "hspwnd_obj.cpp"
    $140 = $139 << 16 >> 16; //@line 102 "hspwnd_obj.cpp"
    $col1 = $140; //@line 102 "hspwnd_obj.cpp"
    $141 = $btn; //@line 102 "hspwnd_obj.cpp"
    $142 = (($141) + 74|0); //@line 102 "hspwnd_obj.cpp"
    $143 = HEAP16[$142>>1]|0; //@line 102 "hspwnd_obj.cpp"
    $144 = $143 << 16 >> 16; //@line 102 "hspwnd_obj.cpp"
    $col2 = $144; //@line 102 "hspwnd_obj.cpp"
   }
  } else {
   $tcol = -8355712; //@line 105 "hspwnd_obj.cpp"
  }
  $145 = $bm; //@line 107 "hspwnd_obj.cpp"
  $146 = (($145) + 100|0); //@line 107 "hspwnd_obj.cpp"
  HEAP32[$146>>2] = 3; //@line 107 "hspwnd_obj.cpp"
  $147 = $bm; //@line 108 "hspwnd_obj.cpp"
  $148 = (($147) + 144|0); //@line 108 "hspwnd_obj.cpp"
  HEAP32[$148>>2] = 255; //@line 108 "hspwnd_obj.cpp"
  $149 = $bm; //@line 109 "hspwnd_obj.cpp"
  $150 = $tcol; //@line 109 "hspwnd_obj.cpp"
  __ZN5Bmscr8SetcolorEi($149,$150); //@line 109 "hspwnd_obj.cpp"
  $151 = $x1; //@line 110 "hspwnd_obj.cpp"
  $152 = $bm; //@line 110 "hspwnd_obj.cpp"
  $153 = (($152) + 68|0); //@line 110 "hspwnd_obj.cpp"
  HEAP32[$153>>2] = $151; //@line 110 "hspwnd_obj.cpp"
  $154 = $y1; //@line 111 "hspwnd_obj.cpp"
  $155 = $bm; //@line 111 "hspwnd_obj.cpp"
  $156 = (($155) + 72|0); //@line 111 "hspwnd_obj.cpp"
  HEAP32[$156>>2] = $154; //@line 111 "hspwnd_obj.cpp"
  $157 = $bm; //@line 112 "hspwnd_obj.cpp"
  $158 = (($157) + 184|0); //@line 112 "hspwnd_obj.cpp"
  $159 = HEAP32[$158>>2]|0; //@line 112 "hspwnd_obj.cpp"
  $wnd = $159; //@line 112 "hspwnd_obj.cpp"
  $160 = $bm; //@line 113 "hspwnd_obj.cpp"
  $161 = $wnd; //@line 113 "hspwnd_obj.cpp"
  $162 = $0; //@line 113 "hspwnd_obj.cpp"
  $163 = (($162) + 30|0); //@line 113 "hspwnd_obj.cpp"
  $164 = HEAP16[$163>>1]|0; //@line 113 "hspwnd_obj.cpp"
  $165 = $164 << 16 >> 16; //@line 113 "hspwnd_obj.cpp"
  $166 = (__ZN6HspWnd12GetBmscrSafeEi($161,$165)|0); //@line 113 "hspwnd_obj.cpp"
  $167 = $col1; //@line 113 "hspwnd_obj.cpp"
  $168 = $col2; //@line 113 "hspwnd_obj.cpp"
  $169 = $0; //@line 113 "hspwnd_obj.cpp"
  $170 = (($169) + 24|0); //@line 113 "hspwnd_obj.cpp"
  $171 = HEAP16[$170>>1]|0; //@line 113 "hspwnd_obj.cpp"
  $172 = $171 << 16 >> 16; //@line 113 "hspwnd_obj.cpp"
  $173 = $0; //@line 113 "hspwnd_obj.cpp"
  $174 = (($173) + 26|0); //@line 113 "hspwnd_obj.cpp"
  $175 = HEAP16[$174>>1]|0; //@line 113 "hspwnd_obj.cpp"
  $176 = $175 << 16 >> 16; //@line 113 "hspwnd_obj.cpp"
  (__ZN5Bmscr4CopyEPS_iiii($160,$166,$167,$168,$172,$176)|0); //@line 113 "hspwnd_obj.cpp"
 }
 $177 = $bm; //@line 116 "hspwnd_obj.cpp"
 $178 = (($177) + 100|0); //@line 116 "hspwnd_obj.cpp"
 HEAP32[$178>>2] = 3; //@line 116 "hspwnd_obj.cpp"
 $179 = $bm; //@line 117 "hspwnd_obj.cpp"
 $180 = (($179) + 144|0); //@line 117 "hspwnd_obj.cpp"
 HEAP32[$180>>2] = 255; //@line 117 "hspwnd_obj.cpp"
 $181 = $bm; //@line 118 "hspwnd_obj.cpp"
 $182 = $tcol; //@line 118 "hspwnd_obj.cpp"
 __ZN5Bmscr8SetcolorEi($181,$182); //@line 118 "hspwnd_obj.cpp"
 $183 = $0; //@line 119 "hspwnd_obj.cpp"
 $184 = (($183) + 20|0); //@line 119 "hspwnd_obj.cpp"
 $185 = HEAP16[$184>>1]|0; //@line 119 "hspwnd_obj.cpp"
 $186 = $185 << 16 >> 16; //@line 119 "hspwnd_obj.cpp"
 $187 = $0; //@line 119 "hspwnd_obj.cpp"
 $188 = (($187) + 24|0); //@line 119 "hspwnd_obj.cpp"
 $189 = HEAP16[$188>>1]|0; //@line 119 "hspwnd_obj.cpp"
 $190 = $189 << 16 >> 16; //@line 119 "hspwnd_obj.cpp"
 $191 = $btn; //@line 119 "hspwnd_obj.cpp"
 $192 = (($191) + 64|0); //@line 119 "hspwnd_obj.cpp"
 $193 = HEAP16[$192>>1]|0; //@line 119 "hspwnd_obj.cpp"
 $194 = $193 << 16 >> 16; //@line 119 "hspwnd_obj.cpp"
 $195 = (($190) - ($194))|0; //@line 119 "hspwnd_obj.cpp"
 $196 = (($195|0) / 2)&-1; //@line 119 "hspwnd_obj.cpp"
 $197 = (($186) + ($196))|0; //@line 119 "hspwnd_obj.cpp"
 $198 = $bm; //@line 119 "hspwnd_obj.cpp"
 $199 = (($198) + 68|0); //@line 119 "hspwnd_obj.cpp"
 HEAP32[$199>>2] = $197; //@line 119 "hspwnd_obj.cpp"
 $200 = $0; //@line 120 "hspwnd_obj.cpp"
 $201 = (($200) + 22|0); //@line 120 "hspwnd_obj.cpp"
 $202 = HEAP16[$201>>1]|0; //@line 120 "hspwnd_obj.cpp"
 $203 = $202 << 16 >> 16; //@line 120 "hspwnd_obj.cpp"
 $204 = $0; //@line 120 "hspwnd_obj.cpp"
 $205 = (($204) + 26|0); //@line 120 "hspwnd_obj.cpp"
 $206 = HEAP16[$205>>1]|0; //@line 120 "hspwnd_obj.cpp"
 $207 = $206 << 16 >> 16; //@line 120 "hspwnd_obj.cpp"
 $208 = $btn; //@line 120 "hspwnd_obj.cpp"
 $209 = (($208) + 66|0); //@line 120 "hspwnd_obj.cpp"
 $210 = HEAP16[$209>>1]|0; //@line 120 "hspwnd_obj.cpp"
 $211 = $210 << 16 >> 16; //@line 120 "hspwnd_obj.cpp"
 $212 = (($207) - ($211))|0; //@line 120 "hspwnd_obj.cpp"
 $213 = (($212|0) / 2)&-1; //@line 120 "hspwnd_obj.cpp"
 $214 = (($203) + ($213))|0; //@line 120 "hspwnd_obj.cpp"
 $215 = $bm; //@line 120 "hspwnd_obj.cpp"
 $216 = (($215) + 72|0); //@line 120 "hspwnd_obj.cpp"
 HEAP32[$216>>2] = $214; //@line 120 "hspwnd_obj.cpp"
 $217 = $0; //@line 121 "hspwnd_obj.cpp"
 $218 = (($217) + 28|0); //@line 121 "hspwnd_obj.cpp"
 $219 = HEAP16[$218>>1]|0; //@line 121 "hspwnd_obj.cpp"
 $220 = $219 << 16 >> 16; //@line 121 "hspwnd_obj.cpp"
 $221 = ($220|0)==(1); //@line 121 "hspwnd_obj.cpp"
 if (!($221)) {
  $230 = $bm; //@line 125 "hspwnd_obj.cpp"
  $231 = $0; //@line 125 "hspwnd_obj.cpp"
  $232 = (($231) + 32|0); //@line 125 "hspwnd_obj.cpp"
  $233 = HEAP32[$232>>2]|0; //@line 125 "hspwnd_obj.cpp"
  __ZN5Bmscr5PrintEPc($230,$233); //@line 125 "hspwnd_obj.cpp"
  STACKTOP = sp;return; //@line 126 "hspwnd_obj.cpp"
 }
 $222 = $bm; //@line 122 "hspwnd_obj.cpp"
 $223 = (($222) + 68|0); //@line 122 "hspwnd_obj.cpp"
 $224 = HEAP32[$223>>2]|0; //@line 122 "hspwnd_obj.cpp"
 $225 = (($224) + 1)|0; //@line 122 "hspwnd_obj.cpp"
 HEAP32[$223>>2] = $225; //@line 122 "hspwnd_obj.cpp"
 $226 = $bm; //@line 123 "hspwnd_obj.cpp"
 $227 = (($226) + 72|0); //@line 123 "hspwnd_obj.cpp"
 $228 = HEAP32[$227>>2]|0; //@line 123 "hspwnd_obj.cpp"
 $229 = (($228) + 1)|0; //@line 123 "hspwnd_obj.cpp"
 HEAP32[$227>>2] = $229; //@line 123 "hspwnd_obj.cpp"
 $230 = $bm; //@line 125 "hspwnd_obj.cpp"
 $231 = $0; //@line 125 "hspwnd_obj.cpp"
 $232 = (($231) + 32|0); //@line 125 "hspwnd_obj.cpp"
 $233 = HEAP32[$232>>2]|0; //@line 125 "hspwnd_obj.cpp"
 __ZN5Bmscr5PrintEPc($230,$233); //@line 125 "hspwnd_obj.cpp"
 STACKTOP = sp;return; //@line 126 "hspwnd_obj.cpp"
}
function __ZL16Object_JumpEventP10HSPOBJINFOi($info,$wparam) {
 $info = $info|0;
 $wparam = $wparam|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $info;
 $1 = $wparam;
 $2 = $0; //@line 37 "hspwnd_obj.cpp"
 $3 = (($2) + 2|0); //@line 37 "hspwnd_obj.cpp"
 $4 = HEAP16[$3>>1]|0; //@line 37 "hspwnd_obj.cpp"
 $5 = $4 << 16 >> 16; //@line 37 "hspwnd_obj.cpp"
 $6 = ($5|0)==(0); //@line 37 "hspwnd_obj.cpp"
 if ($6) {
  STACKTOP = sp;return; //@line 43 "hspwnd_obj.cpp"
 }
 $7 = $0; //@line 38 "hspwnd_obj.cpp"
 $8 = (($7) + 16|0); //@line 38 "hspwnd_obj.cpp"
 $9 = HEAP32[$8>>2]|0; //@line 38 "hspwnd_obj.cpp"
 $10 = HEAP32[3984>>2]|0; //@line 38 "hspwnd_obj.cpp"
 HEAP32[$10>>2] = $9; //@line 38 "hspwnd_obj.cpp"
 $11 = $0; //@line 40 "hspwnd_obj.cpp"
 $12 = (($11) + 32|0); //@line 40 "hspwnd_obj.cpp"
 $13 = HEAP32[$12>>2]|0; //@line 40 "hspwnd_obj.cpp"
 $14 = (($13) + 80|0); //@line 40 "hspwnd_obj.cpp"
 $15 = HEAP16[$14>>1]|0; //@line 40 "hspwnd_obj.cpp"
 $16 = $15 << 16 >> 16; //@line 40 "hspwnd_obj.cpp"
 $17 = $16 & 1; //@line 40 "hspwnd_obj.cpp"
 $18 = ($17|0)!=(0); //@line 40 "hspwnd_obj.cpp"
 if ($18) {
  $19 = $0; //@line 41 "hspwnd_obj.cpp"
  $20 = (($19) + 32|0); //@line 41 "hspwnd_obj.cpp"
  $21 = HEAP32[$20>>2]|0; //@line 41 "hspwnd_obj.cpp"
  $22 = (($21) + 84|0); //@line 41 "hspwnd_obj.cpp"
  $23 = HEAP32[$22>>2]|0; //@line 41 "hspwnd_obj.cpp"
  __Z9code_callPKt($23); //@line 41 "hspwnd_obj.cpp"
  STACKTOP = sp;return; //@line 43 "hspwnd_obj.cpp"
 } else {
  $24 = $0; //@line 43 "hspwnd_obj.cpp"
  $25 = (($24) + 32|0); //@line 43 "hspwnd_obj.cpp"
  $26 = HEAP32[$25>>2]|0; //@line 43 "hspwnd_obj.cpp"
  $27 = (($26) + 84|0); //@line 43 "hspwnd_obj.cpp"
  $28 = HEAP32[$27>>2]|0; //@line 43 "hspwnd_obj.cpp"
  __Z11code_setpciPKt($28); //@line 43 "hspwnd_obj.cpp"
  STACKTOP = sp;return; //@line 43 "hspwnd_obj.cpp"
 }
}
function __ZN5Bmscr14SetButtonImageEiiiiiiii($this,$id,$bufid,$x1,$y1,$x2,$y2,$x3,$y3) {
 $this = $this|0;
 $id = $id|0;
 $bufid = $bufid|0;
 $x1 = $x1|0;
 $y1 = $y1|0;
 $x2 = $x2|0;
 $y2 = $y2|0;
 $x3 = $x3|0;
 $y3 = $y3|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bset = 0, $obj = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = $this;
 $1 = $id;
 $2 = $bufid;
 $3 = $x1;
 $4 = $y1;
 $5 = $x2;
 $6 = $y2;
 $7 = $x3;
 $8 = $y3;
 $9 = $0;
 $10 = $1; //@line 283 "hspwnd_obj.cpp"
 $11 = (__ZN5Bmscr16GetHSPObjectSafeEi($9,$10)|0); //@line 283 "hspwnd_obj.cpp"
 $obj = $11; //@line 283 "hspwnd_obj.cpp"
 $12 = $obj; //@line 285 "hspwnd_obj.cpp"
 $13 = (($12) + 40|0); //@line 285 "hspwnd_obj.cpp"
 $14 = HEAP32[$13>>2]|0; //@line 285 "hspwnd_obj.cpp"
 $15 = ($14|0)!=(176|0); //@line 285 "hspwnd_obj.cpp"
 if ($15) {
  $16 = (___cxa_allocate_exception(4)|0); //@line 285 "hspwnd_obj.cpp"
  HEAP32[$16>>2] = 21; //@line 285 "hspwnd_obj.cpp"
  ___cxa_throw(($16|0),(624|0),(0|0)); //@line 285 "hspwnd_obj.cpp"
  // unreachable; //@line 285 "hspwnd_obj.cpp"
 }
 $17 = $2; //@line 287 "hspwnd_obj.cpp"
 $18 = $17&65535; //@line 287 "hspwnd_obj.cpp"
 $19 = $obj; //@line 287 "hspwnd_obj.cpp"
 $20 = (($19) + 30|0); //@line 287 "hspwnd_obj.cpp"
 HEAP16[$20>>1] = $18; //@line 287 "hspwnd_obj.cpp"
 $21 = $obj; //@line 289 "hspwnd_obj.cpp"
 $22 = (($21) + 32|0); //@line 289 "hspwnd_obj.cpp"
 $23 = HEAP32[$22>>2]|0; //@line 289 "hspwnd_obj.cpp"
 $bset = $23; //@line 289 "hspwnd_obj.cpp"
 $24 = $bset; //@line 290 "hspwnd_obj.cpp"
 $25 = ($24|0)!=(0|0); //@line 290 "hspwnd_obj.cpp"
 if (!($25)) {
  STACKTOP = sp;return; //@line 298 "hspwnd_obj.cpp"
 }
 $26 = $3; //@line 291 "hspwnd_obj.cpp"
 $27 = $26&65535; //@line 291 "hspwnd_obj.cpp"
 $28 = $bset; //@line 291 "hspwnd_obj.cpp"
 $29 = (($28) + 68|0); //@line 291 "hspwnd_obj.cpp"
 HEAP16[$29>>1] = $27; //@line 291 "hspwnd_obj.cpp"
 $30 = $4; //@line 292 "hspwnd_obj.cpp"
 $31 = $30&65535; //@line 292 "hspwnd_obj.cpp"
 $32 = $bset; //@line 292 "hspwnd_obj.cpp"
 $33 = (($32) + 70|0); //@line 292 "hspwnd_obj.cpp"
 HEAP16[$33>>1] = $31; //@line 292 "hspwnd_obj.cpp"
 $34 = $5; //@line 293 "hspwnd_obj.cpp"
 $35 = $34&65535; //@line 293 "hspwnd_obj.cpp"
 $36 = $bset; //@line 293 "hspwnd_obj.cpp"
 $37 = (($36) + 72|0); //@line 293 "hspwnd_obj.cpp"
 HEAP16[$37>>1] = $35; //@line 293 "hspwnd_obj.cpp"
 $38 = $6; //@line 294 "hspwnd_obj.cpp"
 $39 = $38&65535; //@line 294 "hspwnd_obj.cpp"
 $40 = $bset; //@line 294 "hspwnd_obj.cpp"
 $41 = (($40) + 74|0); //@line 294 "hspwnd_obj.cpp"
 HEAP16[$41>>1] = $39; //@line 294 "hspwnd_obj.cpp"
 $42 = $7; //@line 295 "hspwnd_obj.cpp"
 $43 = $42&65535; //@line 295 "hspwnd_obj.cpp"
 $44 = $bset; //@line 295 "hspwnd_obj.cpp"
 $45 = (($44) + 76|0); //@line 295 "hspwnd_obj.cpp"
 HEAP16[$45>>1] = $43; //@line 295 "hspwnd_obj.cpp"
 $46 = $8; //@line 296 "hspwnd_obj.cpp"
 $47 = $46&65535; //@line 296 "hspwnd_obj.cpp"
 $48 = $bset; //@line 296 "hspwnd_obj.cpp"
 $49 = (($48) + 78|0); //@line 296 "hspwnd_obj.cpp"
 HEAP16[$49>>1] = $47; //@line 296 "hspwnd_obj.cpp"
 STACKTOP = sp;return; //@line 298 "hspwnd_obj.cpp"
}
function __ZN5Bmscr14DrawAllObjectsEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $info = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $this;
 $2 = $1;
 $3 = (($2) + 164|0); //@line 308 "hspwnd_obj.cpp"
 $4 = HEAP32[$3>>2]|0; //@line 308 "hspwnd_obj.cpp"
 $info = $4; //@line 308 "hspwnd_obj.cpp"
 $5 = $info; //@line 309 "hspwnd_obj.cpp"
 $6 = ($5|0)==(0|0); //@line 309 "hspwnd_obj.cpp"
 if ($6) {
  $0 = -1; //@line 309 "hspwnd_obj.cpp"
  $27 = $0; //@line 317 "hspwnd_obj.cpp"
  STACKTOP = sp;return ($27|0); //@line 317 "hspwnd_obj.cpp"
 }
 $i = 0; //@line 311 "hspwnd_obj.cpp"
 while(1) {
  $7 = $i; //@line 311 "hspwnd_obj.cpp"
  $8 = (($2) + 168|0); //@line 311 "hspwnd_obj.cpp"
  $9 = HEAP32[$8>>2]|0; //@line 311 "hspwnd_obj.cpp"
  $10 = ($7|0)<($9|0); //@line 311 "hspwnd_obj.cpp"
  if (!($10)) {
   break;
  }
  $11 = $info; //@line 312 "hspwnd_obj.cpp"
  $12 = HEAP16[$11>>1]|0; //@line 312 "hspwnd_obj.cpp"
  $13 = $12 << 16 >> 16; //@line 312 "hspwnd_obj.cpp"
  $14 = ($13|0)!=(0); //@line 312 "hspwnd_obj.cpp"
  if ($14) {
   $15 = $info; //@line 313 "hspwnd_obj.cpp"
   $16 = (($15) + 36|0); //@line 313 "hspwnd_obj.cpp"
   $17 = HEAP32[$16>>2]|0; //@line 313 "hspwnd_obj.cpp"
   $18 = ($17|0)!=(0|0); //@line 313 "hspwnd_obj.cpp"
   if ($18) {
    $19 = $info; //@line 313 "hspwnd_obj.cpp"
    $20 = (($19) + 36|0); //@line 313 "hspwnd_obj.cpp"
    $21 = HEAP32[$20>>2]|0; //@line 313 "hspwnd_obj.cpp"
    $22 = $info; //@line 313 "hspwnd_obj.cpp"
    FUNCTION_TABLE_vi[$21 & 255]($22); //@line 313 "hspwnd_obj.cpp"
   }
  }
  $23 = $info; //@line 315 "hspwnd_obj.cpp"
  $24 = (($23) + 52|0); //@line 315 "hspwnd_obj.cpp"
  $info = $24; //@line 315 "hspwnd_obj.cpp"
  $25 = $i; //@line 311 "hspwnd_obj.cpp"
  $26 = (($25) + 1)|0; //@line 311 "hspwnd_obj.cpp"
  $i = $26; //@line 311 "hspwnd_obj.cpp"
 }
 $0 = -1; //@line 317 "hspwnd_obj.cpp"
 $27 = $0; //@line 317 "hspwnd_obj.cpp"
 STACKTOP = sp;return ($27|0); //@line 317 "hspwnd_obj.cpp"
}
function __ZN5Bmscr16UpdateAllObjectsEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $focus = 0, $focustap = 0;
 var $i = 0, $info = 0, $msx = 0, $msy = 0, $tap = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $1 = $this;
 $2 = $1;
 $3 = (($2) + 164|0); //@line 329 "hspwnd_obj.cpp"
 $4 = HEAP32[$3>>2]|0; //@line 329 "hspwnd_obj.cpp"
 $info = $4; //@line 329 "hspwnd_obj.cpp"
 $5 = $info; //@line 330 "hspwnd_obj.cpp"
 $6 = ($5|0)==(0|0); //@line 330 "hspwnd_obj.cpp"
 if ($6) {
  $0 = -1; //@line 330 "hspwnd_obj.cpp"
  $137 = $0; //@line 403 "hspwnd_obj.cpp"
  STACKTOP = sp;return ($137|0); //@line 403 "hspwnd_obj.cpp"
 }
 $7 = (($2) + 176|0); //@line 332 "hspwnd_obj.cpp"
 $8 = HEAP16[$7>>1]|0; //@line 332 "hspwnd_obj.cpp"
 $9 = $8 << 16 >> 16; //@line 332 "hspwnd_obj.cpp"
 $msx = $9; //@line 332 "hspwnd_obj.cpp"
 $10 = (($2) + 176|0); //@line 333 "hspwnd_obj.cpp"
 $11 = (($10) + 2|0); //@line 333 "hspwnd_obj.cpp"
 $12 = HEAP16[$11>>1]|0; //@line 333 "hspwnd_obj.cpp"
 $13 = $12 << 16 >> 16; //@line 333 "hspwnd_obj.cpp"
 $msy = $13; //@line 333 "hspwnd_obj.cpp"
 $14 = (($2) + 286|0); //@line 335 "hspwnd_obj.cpp"
 $15 = HEAP16[$14>>1]|0; //@line 335 "hspwnd_obj.cpp"
 $16 = ($15<<16>>16)!=(0); //@line 335 "hspwnd_obj.cpp"
 if ($16) {
  $17 = (($2) + 284|0); //@line 336 "hspwnd_obj.cpp"
  $18 = HEAP16[$17>>1]|0; //@line 336 "hspwnd_obj.cpp"
  $19 = $18 << 16 >> 16; //@line 336 "hspwnd_obj.cpp"
  $20 = ($19|0)==(0); //@line 336 "hspwnd_obj.cpp"
  if ($20) {
   $21 = (($2) + 286|0); //@line 337 "hspwnd_obj.cpp"
   HEAP16[$21>>1] = 0; //@line 337 "hspwnd_obj.cpp"
  }
  $0 = -1; //@line 339 "hspwnd_obj.cpp"
  $137 = $0; //@line 403 "hspwnd_obj.cpp"
  STACKTOP = sp;return ($137|0); //@line 403 "hspwnd_obj.cpp"
 }
 $22 = (($2) + 288|0); //@line 342 "hspwnd_obj.cpp"
 $23 = HEAP32[$22>>2]|0; //@line 342 "hspwnd_obj.cpp"
 $24 = ($23|0)!=(0|0); //@line 342 "hspwnd_obj.cpp"
 if ($24) {
  $25 = (($2) + 288|0); //@line 346 "hspwnd_obj.cpp"
  $26 = HEAP32[$25>>2]|0; //@line 346 "hspwnd_obj.cpp"
  $info = $26; //@line 346 "hspwnd_obj.cpp"
  $tap = -1; //@line 347 "hspwnd_obj.cpp"
  $27 = $msy; //@line 348 "hspwnd_obj.cpp"
  $28 = $info; //@line 348 "hspwnd_obj.cpp"
  $29 = (($28) + 22|0); //@line 348 "hspwnd_obj.cpp"
  $30 = HEAP16[$29>>1]|0; //@line 348 "hspwnd_obj.cpp"
  $31 = $30 << 16 >> 16; //@line 348 "hspwnd_obj.cpp"
  $32 = (($27) - ($31))|0; //@line 348 "hspwnd_obj.cpp"
  $y = $32; //@line 348 "hspwnd_obj.cpp"
  $33 = $y; //@line 349 "hspwnd_obj.cpp"
  $34 = ($33|0)>=(0); //@line 349 "hspwnd_obj.cpp"
  if ($34) {
   $35 = $y; //@line 349 "hspwnd_obj.cpp"
   $36 = $info; //@line 349 "hspwnd_obj.cpp"
   $37 = (($36) + 26|0); //@line 349 "hspwnd_obj.cpp"
   $38 = HEAP16[$37>>1]|0; //@line 349 "hspwnd_obj.cpp"
   $39 = $38 << 16 >> 16; //@line 349 "hspwnd_obj.cpp"
   $40 = ($35|0)<($39|0); //@line 349 "hspwnd_obj.cpp"
   if ($40) {
    $41 = $msx; //@line 350 "hspwnd_obj.cpp"
    $42 = $info; //@line 350 "hspwnd_obj.cpp"
    $43 = (($42) + 20|0); //@line 350 "hspwnd_obj.cpp"
    $44 = HEAP16[$43>>1]|0; //@line 350 "hspwnd_obj.cpp"
    $45 = $44 << 16 >> 16; //@line 350 "hspwnd_obj.cpp"
    $46 = (($41) - ($45))|0; //@line 350 "hspwnd_obj.cpp"
    $x = $46; //@line 350 "hspwnd_obj.cpp"
    $47 = $x; //@line 351 "hspwnd_obj.cpp"
    $48 = ($47|0)>=(0); //@line 351 "hspwnd_obj.cpp"
    if ($48) {
     $49 = $x; //@line 351 "hspwnd_obj.cpp"
     $50 = $info; //@line 351 "hspwnd_obj.cpp"
     $51 = (($50) + 24|0); //@line 351 "hspwnd_obj.cpp"
     $52 = HEAP16[$51>>1]|0; //@line 351 "hspwnd_obj.cpp"
     $53 = $52 << 16 >> 16; //@line 351 "hspwnd_obj.cpp"
     $54 = ($49|0)<($53|0); //@line 351 "hspwnd_obj.cpp"
     if ($54) {
      $55 = (($2) + 284|0); //@line 352 "hspwnd_obj.cpp"
      $56 = HEAP16[$55>>1]|0; //@line 352 "hspwnd_obj.cpp"
      $57 = $56 << 16 >> 16; //@line 352 "hspwnd_obj.cpp"
      $tap = $57; //@line 352 "hspwnd_obj.cpp"
     }
    }
   }
  }
  $58 = $tap; //@line 355 "hspwnd_obj.cpp"
  $59 = $58&65535; //@line 355 "hspwnd_obj.cpp"
  $60 = $info; //@line 355 "hspwnd_obj.cpp"
  $61 = (($60) + 28|0); //@line 355 "hspwnd_obj.cpp"
  HEAP16[$61>>1] = $59; //@line 355 "hspwnd_obj.cpp"
  $62 = (($2) + 284|0); //@line 356 "hspwnd_obj.cpp"
  $63 = HEAP16[$62>>1]|0; //@line 356 "hspwnd_obj.cpp"
  $64 = $63 << 16 >> 16; //@line 356 "hspwnd_obj.cpp"
  $65 = ($64|0)==(0); //@line 356 "hspwnd_obj.cpp"
  if ($65) {
   $66 = (($2) + 288|0); //@line 357 "hspwnd_obj.cpp"
   HEAP32[$66>>2] = 0; //@line 357 "hspwnd_obj.cpp"
   $67 = $tap; //@line 358 "hspwnd_obj.cpp"
   $68 = ($67|0)>=(0); //@line 358 "hspwnd_obj.cpp"
   if ($68) {
    $69 = $info; //@line 359 "hspwnd_obj.cpp"
    $70 = (($69) + 40|0); //@line 359 "hspwnd_obj.cpp"
    $71 = HEAP32[$70>>2]|0; //@line 359 "hspwnd_obj.cpp"
    $72 = $info; //@line 359 "hspwnd_obj.cpp"
    $73 = $tap; //@line 359 "hspwnd_obj.cpp"
    FUNCTION_TABLE_vii[$71 & 255]($72,$73); //@line 359 "hspwnd_obj.cpp"
   }
  }
  $0 = -1; //@line 362 "hspwnd_obj.cpp"
  $137 = $0; //@line 403 "hspwnd_obj.cpp"
  STACKTOP = sp;return ($137|0); //@line 403 "hspwnd_obj.cpp"
 }
 $focus = 0; //@line 367 "hspwnd_obj.cpp"
 $focustap = 0; //@line 368 "hspwnd_obj.cpp"
 $i = 0; //@line 369 "hspwnd_obj.cpp"
 while(1) {
  $74 = $i; //@line 369 "hspwnd_obj.cpp"
  $75 = (($2) + 168|0); //@line 369 "hspwnd_obj.cpp"
  $76 = HEAP32[$75>>2]|0; //@line 369 "hspwnd_obj.cpp"
  $77 = ($74|0)<($76|0); //@line 369 "hspwnd_obj.cpp"
  if (!($77)) {
   break;
  }
  $78 = $info; //@line 370 "hspwnd_obj.cpp"
  $79 = HEAP16[$78>>1]|0; //@line 370 "hspwnd_obj.cpp"
  $80 = $79 << 16 >> 16; //@line 370 "hspwnd_obj.cpp"
  $81 = ($80|0)!=(0); //@line 370 "hspwnd_obj.cpp"
  if ($81) {
   $82 = $info; //@line 371 "hspwnd_obj.cpp"
   $83 = (($82) + 40|0); //@line 371 "hspwnd_obj.cpp"
   $84 = HEAP32[$83>>2]|0; //@line 371 "hspwnd_obj.cpp"
   $85 = ($84|0)!=(0|0); //@line 371 "hspwnd_obj.cpp"
   if ($85) {
    $tap = -1; //@line 372 "hspwnd_obj.cpp"
    $86 = $msy; //@line 373 "hspwnd_obj.cpp"
    $87 = $info; //@line 373 "hspwnd_obj.cpp"
    $88 = (($87) + 22|0); //@line 373 "hspwnd_obj.cpp"
    $89 = HEAP16[$88>>1]|0; //@line 373 "hspwnd_obj.cpp"
    $90 = $89 << 16 >> 16; //@line 373 "hspwnd_obj.cpp"
    $91 = (($86) - ($90))|0; //@line 373 "hspwnd_obj.cpp"
    $y = $91; //@line 373 "hspwnd_obj.cpp"
    $92 = $y; //@line 374 "hspwnd_obj.cpp"
    $93 = ($92|0)>=(0); //@line 374 "hspwnd_obj.cpp"
    if ($93) {
     $94 = $y; //@line 374 "hspwnd_obj.cpp"
     $95 = $info; //@line 374 "hspwnd_obj.cpp"
     $96 = (($95) + 26|0); //@line 374 "hspwnd_obj.cpp"
     $97 = HEAP16[$96>>1]|0; //@line 374 "hspwnd_obj.cpp"
     $98 = $97 << 16 >> 16; //@line 374 "hspwnd_obj.cpp"
     $99 = ($94|0)<($98|0); //@line 374 "hspwnd_obj.cpp"
     if ($99) {
      $100 = $msx; //@line 375 "hspwnd_obj.cpp"
      $101 = $info; //@line 375 "hspwnd_obj.cpp"
      $102 = (($101) + 20|0); //@line 375 "hspwnd_obj.cpp"
      $103 = HEAP16[$102>>1]|0; //@line 375 "hspwnd_obj.cpp"
      $104 = $103 << 16 >> 16; //@line 375 "hspwnd_obj.cpp"
      $105 = (($100) - ($104))|0; //@line 375 "hspwnd_obj.cpp"
      $x = $105; //@line 375 "hspwnd_obj.cpp"
      $106 = $x; //@line 376 "hspwnd_obj.cpp"
      $107 = ($106|0)>=(0); //@line 376 "hspwnd_obj.cpp"
      if ($107) {
       $108 = $x; //@line 376 "hspwnd_obj.cpp"
       $109 = $info; //@line 376 "hspwnd_obj.cpp"
       $110 = (($109) + 24|0); //@line 376 "hspwnd_obj.cpp"
       $111 = HEAP16[$110>>1]|0; //@line 376 "hspwnd_obj.cpp"
       $112 = $111 << 16 >> 16; //@line 376 "hspwnd_obj.cpp"
       $113 = ($108|0)<($112|0); //@line 376 "hspwnd_obj.cpp"
       if ($113) {
        $114 = (($2) + 284|0); //@line 377 "hspwnd_obj.cpp"
        $115 = HEAP16[$114>>1]|0; //@line 377 "hspwnd_obj.cpp"
        $116 = $115 << 16 >> 16; //@line 377 "hspwnd_obj.cpp"
        $tap = $116; //@line 377 "hspwnd_obj.cpp"
        $117 = $info; //@line 378 "hspwnd_obj.cpp"
        $focus = $117; //@line 378 "hspwnd_obj.cpp"
        $118 = $tap; //@line 379 "hspwnd_obj.cpp"
        $focustap = $118; //@line 379 "hspwnd_obj.cpp"
       }
      }
     }
    }
   }
  }
  $119 = $info; //@line 384 "hspwnd_obj.cpp"
  $120 = (($119) + 52|0); //@line 384 "hspwnd_obj.cpp"
  $info = $120; //@line 384 "hspwnd_obj.cpp"
  $121 = $i; //@line 369 "hspwnd_obj.cpp"
  $122 = (($121) + 1)|0; //@line 369 "hspwnd_obj.cpp"
  $i = $122; //@line 369 "hspwnd_obj.cpp"
 }
 $123 = (($2) + 284|0); //@line 392 "hspwnd_obj.cpp"
 $124 = HEAP16[$123>>1]|0; //@line 392 "hspwnd_obj.cpp"
 $125 = $124 << 16 >> 16; //@line 392 "hspwnd_obj.cpp"
 $126 = ($125|0)==(1); //@line 392 "hspwnd_obj.cpp"
 if ($126) {
  $127 = $focus; //@line 393 "hspwnd_obj.cpp"
  $128 = ($127|0)!=(0|0); //@line 393 "hspwnd_obj.cpp"
  if ($128) {
   $129 = (($2) + 286|0); //@line 394 "hspwnd_obj.cpp"
   HEAP16[$129>>1] = 0; //@line 394 "hspwnd_obj.cpp"
   $130 = $focus; //@line 395 "hspwnd_obj.cpp"
   $131 = (($2) + 288|0); //@line 395 "hspwnd_obj.cpp"
   HEAP32[$131>>2] = $130; //@line 395 "hspwnd_obj.cpp"
   $132 = $focustap; //@line 396 "hspwnd_obj.cpp"
   $133 = $132&65535; //@line 396 "hspwnd_obj.cpp"
   $134 = $focus; //@line 396 "hspwnd_obj.cpp"
   $135 = (($134) + 28|0); //@line 396 "hspwnd_obj.cpp"
   HEAP16[$135>>1] = $133; //@line 396 "hspwnd_obj.cpp"
  } else {
   $136 = (($2) + 286|0); //@line 398 "hspwnd_obj.cpp"
   HEAP16[$136>>1] = 1; //@line 398 "hspwnd_obj.cpp"
  }
 }
 $0 = -1; //@line 403 "hspwnd_obj.cpp"
 $137 = $0; //@line 403 "hspwnd_obj.cpp"
 STACKTOP = sp;return ($137|0); //@line 403 "hspwnd_obj.cpp"
}
function __Z9StackInitv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $i = 0, $stm = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 HEAP32[4000>>2] = 512; //@line 35 "../hsp3/stack.cpp"
 $0 = HEAP32[4000>>2]|0; //@line 36 "../hsp3/stack.cpp"
 $1 = ($0*72)|0; //@line 36 "../hsp3/stack.cpp"
 $2 = (_malloc($1)|0); //@line 36 "../hsp3/stack.cpp"
 HEAP32[4008>>2] = $2; //@line 36 "../hsp3/stack.cpp"
 $3 = HEAP32[4008>>2]|0; //@line 37 "../hsp3/stack.cpp"
 $4 = HEAP32[4000>>2]|0; //@line 37 "../hsp3/stack.cpp"
 $5 = (($3) + (($4*72)|0)|0); //@line 37 "../hsp3/stack.cpp"
 HEAP32[4024>>2] = $5; //@line 37 "../hsp3/stack.cpp"
 $6 = HEAP32[4008>>2]|0; //@line 38 "../hsp3/stack.cpp"
 HEAP32[4016>>2] = $6; //@line 38 "../hsp3/stack.cpp"
 $7 = HEAP32[4008>>2]|0; //@line 39 "../hsp3/stack.cpp"
 $stm = $7; //@line 39 "../hsp3/stack.cpp"
 $i = 0; //@line 40 "../hsp3/stack.cpp"
 while(1) {
  $8 = $i; //@line 40 "../hsp3/stack.cpp"
  $9 = HEAP32[4000>>2]|0; //@line 40 "../hsp3/stack.cpp"
  $10 = ($8|0)<($9|0); //@line 40 "../hsp3/stack.cpp"
  if (!($10)) {
   break;
  }
  $11 = $stm; //@line 41 "../hsp3/stack.cpp"
  HEAP16[$11>>1] = 4; //@line 41 "../hsp3/stack.cpp"
  $12 = $stm; //@line 42 "../hsp3/stack.cpp"
  $13 = (($12) + 2|0); //@line 42 "../hsp3/stack.cpp"
  HEAP16[$13>>1] = 0; //@line 42 "../hsp3/stack.cpp"
  $14 = $stm; //@line 43 "../hsp3/stack.cpp"
  $15 = (($14) + 8|0); //@line 43 "../hsp3/stack.cpp"
  $16 = $stm; //@line 43 "../hsp3/stack.cpp"
  $17 = (($16) + 4|0); //@line 43 "../hsp3/stack.cpp"
  HEAP32[$17>>2] = $15; //@line 43 "../hsp3/stack.cpp"
  $18 = $stm; //@line 44 "../hsp3/stack.cpp"
  $19 = (($18) + 72|0); //@line 44 "../hsp3/stack.cpp"
  $stm = $19; //@line 44 "../hsp3/stack.cpp"
  $20 = $i; //@line 40 "../hsp3/stack.cpp"
  $21 = (($20) + 1)|0; //@line 40 "../hsp3/stack.cpp"
  $i = $21; //@line 40 "../hsp3/stack.cpp"
 }
 STACKTOP = sp;return; //@line 46 "../hsp3/stack.cpp"
}
function __Z9StackTermv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __Z10StackResetv(); //@line 50 "../hsp3/stack.cpp"
 $0 = HEAP32[4008>>2]|0; //@line 51 "../hsp3/stack.cpp"
 _free($0); //@line 51 "../hsp3/stack.cpp"
 STACKTOP = sp;return; //@line 52 "../hsp3/stack.cpp"
}
function __Z10StackResetv() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 while(1) {
  $0 = HEAP32[4016>>2]|0; //@line 69 "../hsp3/stack.cpp"
  $1 = HEAP32[4008>>2]|0; //@line 69 "../hsp3/stack.cpp"
  $2 = ($0|0)==($1|0); //@line 69 "../hsp3/stack.cpp"
  if ($2) {
   break;
  }
  __Z8StackPopv(); //@line 70 "../hsp3/stack.cpp"
 }
 STACKTOP = sp;return; //@line 72 "../hsp3/stack.cpp"
}
function __Z9StackPushiPci($type,$data,$size) {
 $type = $type|0;
 $data = $data|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $stm = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $type;
 $1 = $data;
 $2 = $size;
 $3 = HEAP32[4016>>2]|0; //@line 78 "../hsp3/stack.cpp"
 $4 = HEAP32[4024>>2]|0; //@line 78 "../hsp3/stack.cpp"
 $5 = ($3>>>0)>=($4>>>0); //@line 78 "../hsp3/stack.cpp"
 if ($5) {
  $6 = (___cxa_allocate_exception(4)|0); //@line 78 "../hsp3/stack.cpp"
  HEAP32[$6>>2] = 29; //@line 78 "../hsp3/stack.cpp"
  ___cxa_throw(($6|0),(624|0),(0|0)); //@line 78 "../hsp3/stack.cpp"
  // unreachable; //@line 78 "../hsp3/stack.cpp"
 }
 $7 = HEAP32[4016>>2]|0; //@line 79 "../hsp3/stack.cpp"
 $stm = $7; //@line 79 "../hsp3/stack.cpp"
 $8 = $0; //@line 80 "../hsp3/stack.cpp"
 $9 = $8&65535; //@line 80 "../hsp3/stack.cpp"
 $10 = $stm; //@line 80 "../hsp3/stack.cpp"
 HEAP16[$10>>1] = $9; //@line 80 "../hsp3/stack.cpp"
 $11 = $0; //@line 81 "../hsp3/stack.cpp"
 if ((($11|0) == 4) | (($11|0) == 1)) {
  $12 = $1; //@line 85 "../hsp3/stack.cpp"
  $13 = HEAP32[$12>>2]|0; //@line 85 "../hsp3/stack.cpp"
  $14 = $stm; //@line 85 "../hsp3/stack.cpp"
  $15 = (($14) + 8|0); //@line 85 "../hsp3/stack.cpp"
  HEAP32[$15>>2] = $13; //@line 85 "../hsp3/stack.cpp"
  $16 = HEAP32[4016>>2]|0; //@line 87 "../hsp3/stack.cpp"
  $17 = (($16) + 72|0); //@line 87 "../hsp3/stack.cpp"
  HEAP32[4016>>2] = $17; //@line 87 "../hsp3/stack.cpp"
  STACKTOP = sp;return; //@line 102 "../hsp3/stack.cpp"
 } else if ((($11|0) == 3)) {
  $18 = $stm; //@line 92 "../hsp3/stack.cpp"
  $19 = (($18) + 8|0); //@line 92 "../hsp3/stack.cpp"
  $20 = $1; //@line 92 "../hsp3/stack.cpp"
  ;HEAP8[$19+0>>0]=HEAP8[$20+0>>0]|0;HEAP8[$19+1>>0]=HEAP8[$20+1>>0]|0;HEAP8[$19+2>>0]=HEAP8[$20+2>>0]|0;HEAP8[$19+3>>0]=HEAP8[$20+3>>0]|0;HEAP8[$19+4>>0]=HEAP8[$20+4>>0]|0;HEAP8[$19+5>>0]=HEAP8[$20+5>>0]|0;HEAP8[$19+6>>0]=HEAP8[$20+6>>0]|0;HEAP8[$19+7>>0]=HEAP8[$20+7>>0]|0; //@line 92 "../hsp3/stack.cpp"
  $21 = HEAP32[4016>>2]|0; //@line 95 "../hsp3/stack.cpp"
  $22 = (($21) + 72|0); //@line 95 "../hsp3/stack.cpp"
  HEAP32[4016>>2] = $22; //@line 95 "../hsp3/stack.cpp"
  STACKTOP = sp;return; //@line 102 "../hsp3/stack.cpp"
 } else {
  $23 = $stm; //@line 100 "../hsp3/stack.cpp"
  $24 = $2; //@line 100 "../hsp3/stack.cpp"
  __ZL10StackAllocP7STMDATAi($23,$24); //@line 100 "../hsp3/stack.cpp"
  $25 = $stm; //@line 101 "../hsp3/stack.cpp"
  $26 = (($25) + 4|0); //@line 101 "../hsp3/stack.cpp"
  $27 = HEAP32[$26>>2]|0; //@line 101 "../hsp3/stack.cpp"
  $28 = $1; //@line 101 "../hsp3/stack.cpp"
  $29 = $2; //@line 101 "../hsp3/stack.cpp"
  _memcpy(($27|0),($28|0),($29|0))|0; //@line 101 "../hsp3/stack.cpp"
  $30 = HEAP32[4016>>2]|0; //@line 102 "../hsp3/stack.cpp"
  $31 = (($30) + 72|0); //@line 102 "../hsp3/stack.cpp"
  HEAP32[4016>>2] = $31; //@line 102 "../hsp3/stack.cpp"
  STACKTOP = sp;return; //@line 102 "../hsp3/stack.cpp"
 }
}
function __ZL10StackAllocP7STMDATAi($stm,$size) {
 $stm = $stm|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $stm;
 $1 = $size;
 $2 = $1; //@line 57 "../hsp3/stack.cpp"
 $3 = ($2|0)<=(64); //@line 57 "../hsp3/stack.cpp"
 if ($3) {
  STACKTOP = sp;return; //@line 63 "../hsp3/stack.cpp"
 } else {
  $4 = $0; //@line 62 "../hsp3/stack.cpp"
  $5 = (($4) + 2|0); //@line 62 "../hsp3/stack.cpp"
  HEAP16[$5>>1] = 1; //@line 62 "../hsp3/stack.cpp"
  $6 = $1; //@line 63 "../hsp3/stack.cpp"
  $7 = (_malloc($6)|0); //@line 63 "../hsp3/stack.cpp"
  $8 = $0; //@line 63 "../hsp3/stack.cpp"
  $9 = (($8) + 4|0); //@line 63 "../hsp3/stack.cpp"
  HEAP32[$9>>2] = $7; //@line 63 "../hsp3/stack.cpp"
  STACKTOP = sp;return; //@line 63 "../hsp3/stack.cpp"
 }
}
function __Z9StackPushiPc($type,$str) {
 $type = $type|0;
 $str = $str|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $type;
 $1 = $str;
 $2 = $0; //@line 107 "../hsp3/stack.cpp"
 $3 = $1; //@line 107 "../hsp3/stack.cpp"
 $4 = $1; //@line 107 "../hsp3/stack.cpp"
 $5 = (_strlen(($4|0))|0); //@line 107 "../hsp3/stack.cpp"
 $6 = (($5) + 1)|0; //@line 107 "../hsp3/stack.cpp"
 __Z9StackPushiPci($2,$3,$6); //@line 107 "../hsp3/stack.cpp"
 STACKTOP = sp;return; //@line 108 "../hsp3/stack.cpp"
}
function __Z13StackPushSizeii($type,$size) {
 $type = $type|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $stm = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $type;
 $1 = $size;
 $2 = HEAP32[4016>>2]|0; //@line 113 "../hsp3/stack.cpp"
 $3 = HEAP32[4024>>2]|0; //@line 113 "../hsp3/stack.cpp"
 $4 = ($2>>>0)>=($3>>>0); //@line 113 "../hsp3/stack.cpp"
 if ($4) {
  $5 = (___cxa_allocate_exception(4)|0); //@line 113 "../hsp3/stack.cpp"
  HEAP32[$5>>2] = 29; //@line 113 "../hsp3/stack.cpp"
  ___cxa_throw(($5|0),(624|0),(0|0)); //@line 113 "../hsp3/stack.cpp"
  // unreachable; //@line 113 "../hsp3/stack.cpp"
 } else {
  $6 = HEAP32[4016>>2]|0; //@line 114 "../hsp3/stack.cpp"
  $stm = $6; //@line 114 "../hsp3/stack.cpp"
  $7 = $0; //@line 115 "../hsp3/stack.cpp"
  $8 = $7&65535; //@line 115 "../hsp3/stack.cpp"
  $9 = $stm; //@line 115 "../hsp3/stack.cpp"
  HEAP16[$9>>1] = $8; //@line 115 "../hsp3/stack.cpp"
  $10 = $stm; //@line 116 "../hsp3/stack.cpp"
  $11 = $1; //@line 116 "../hsp3/stack.cpp"
  __ZL10StackAllocP7STMDATAi($10,$11); //@line 116 "../hsp3/stack.cpp"
  $12 = HEAP32[4016>>2]|0; //@line 117 "../hsp3/stack.cpp"
  $13 = (($12) + 72|0); //@line 117 "../hsp3/stack.cpp"
  HEAP32[4016>>2] = $13; //@line 117 "../hsp3/stack.cpp"
  $14 = $stm; //@line 118 "../hsp3/stack.cpp"
  $15 = (($14) + 4|0); //@line 118 "../hsp3/stack.cpp"
  $16 = HEAP32[$15>>2]|0; //@line 118 "../hsp3/stack.cpp"
  STACKTOP = sp;return ($16|0); //@line 118 "../hsp3/stack.cpp"
 }
 return 0|0;
}
function __Z12StackPopFreev() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[4016>>2]|0; //@line 147 "../hsp3/stack.cpp"
 $1 = (($0) + 4|0); //@line 147 "../hsp3/stack.cpp"
 $2 = HEAP32[$1>>2]|0; //@line 147 "../hsp3/stack.cpp"
 _free($2); //@line 147 "../hsp3/stack.cpp"
 $3 = HEAP32[4016>>2]|0; //@line 148 "../hsp3/stack.cpp"
 $4 = (($3) + 2|0); //@line 148 "../hsp3/stack.cpp"
 HEAP16[$4>>1] = 0; //@line 148 "../hsp3/stack.cpp"
 $5 = HEAP32[4016>>2]|0; //@line 149 "../hsp3/stack.cpp"
 $6 = (($5) + 8|0); //@line 149 "../hsp3/stack.cpp"
 $7 = HEAP32[4016>>2]|0; //@line 149 "../hsp3/stack.cpp"
 $8 = (($7) + 4|0); //@line 149 "../hsp3/stack.cpp"
 HEAP32[$8>>2] = $6; //@line 149 "../hsp3/stack.cpp"
 STACKTOP = sp;return; //@line 150 "../hsp3/stack.cpp"
}
function __Z6sbInitv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[4032>>2] = 0; //@line 170 "../hsp3/strbuf.cpp"
 HEAP32[4040>>2] = 0; //@line 171 "../hsp3/strbuf.cpp"
 HEAP32[4048>>2] = 1024; //@line 172 "../hsp3/strbuf.cpp"
 __ZL15BlockPtrPreparev(); //@line 173 "../hsp3/strbuf.cpp"
 STACKTOP = sp;return; //@line 174 "../hsp3/strbuf.cpp"
}
function __ZL15BlockPtrPreparev() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0, $pend = 0, $sb = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = HEAP32[4032>>2]|0; //@line 54 "../hsp3/strbuf.cpp"
 $1 = ($0|0)==(0); //@line 54 "../hsp3/strbuf.cpp"
 if ($1) {
  $2 = (_malloc(8)|0); //@line 55 "../hsp3/strbuf.cpp"
  HEAP32[4056>>2] = $2; //@line 55 "../hsp3/strbuf.cpp"
 } else {
  $3 = HEAP32[4056>>2]|0; //@line 57 "../hsp3/strbuf.cpp"
  $4 = HEAP32[4032>>2]|0; //@line 57 "../hsp3/strbuf.cpp"
  $5 = (($4) + 1)|0; //@line 57 "../hsp3/strbuf.cpp"
  $6 = $5<<3; //@line 57 "../hsp3/strbuf.cpp"
  $7 = (_realloc($3,$6)|0); //@line 57 "../hsp3/strbuf.cpp"
  HEAP32[4056>>2] = $7; //@line 57 "../hsp3/strbuf.cpp"
 }
 $8 = HEAP32[4048>>2]|0; //@line 60 "../hsp3/strbuf.cpp"
 $9 = ($8*88)|0; //@line 60 "../hsp3/strbuf.cpp"
 $10 = (_malloc($9)|0); //@line 60 "../hsp3/strbuf.cpp"
 $sb = $10; //@line 60 "../hsp3/strbuf.cpp"
 $11 = $sb; //@line 61 "../hsp3/strbuf.cpp"
 $12 = ($11|0)==(0|0); //@line 61 "../hsp3/strbuf.cpp"
 if ($12) {
  $13 = (___cxa_allocate_exception(4)|0); //@line 61 "../hsp3/strbuf.cpp"
  HEAP32[$13>>2] = 26; //@line 61 "../hsp3/strbuf.cpp"
  ___cxa_throw(($13|0),(624|0),(0|0)); //@line 61 "../hsp3/strbuf.cpp"
  // unreachable; //@line 61 "../hsp3/strbuf.cpp"
 }
 $14 = $sb; //@line 62 "../hsp3/strbuf.cpp"
 $p = $14; //@line 62 "../hsp3/strbuf.cpp"
 $15 = $p; //@line 63 "../hsp3/strbuf.cpp"
 $16 = HEAP32[4048>>2]|0; //@line 63 "../hsp3/strbuf.cpp"
 $17 = (($15) + (($16*88)|0)|0); //@line 63 "../hsp3/strbuf.cpp"
 $pend = $17; //@line 63 "../hsp3/strbuf.cpp"
 $18 = $sb; //@line 64 "../hsp3/strbuf.cpp"
 $19 = HEAP32[4032>>2]|0; //@line 64 "../hsp3/strbuf.cpp"
 $20 = HEAP32[4056>>2]|0; //@line 64 "../hsp3/strbuf.cpp"
 $21 = (($20) + ($19<<3)|0); //@line 64 "../hsp3/strbuf.cpp"
 HEAP32[$21>>2] = $18; //@line 64 "../hsp3/strbuf.cpp"
 $22 = HEAP32[4048>>2]|0; //@line 65 "../hsp3/strbuf.cpp"
 $23 = HEAP32[4032>>2]|0; //@line 65 "../hsp3/strbuf.cpp"
 $24 = HEAP32[4056>>2]|0; //@line 65 "../hsp3/strbuf.cpp"
 $25 = (($24) + ($23<<3)|0); //@line 65 "../hsp3/strbuf.cpp"
 $26 = (($25) + 4|0); //@line 65 "../hsp3/strbuf.cpp"
 HEAP32[$26>>2] = $22; //@line 65 "../hsp3/strbuf.cpp"
 $27 = HEAP32[4032>>2]|0; //@line 66 "../hsp3/strbuf.cpp"
 $28 = (($27) + 1)|0; //@line 66 "../hsp3/strbuf.cpp"
 HEAP32[4032>>2] = $28; //@line 66 "../hsp3/strbuf.cpp"
 $29 = HEAP32[4048>>2]|0; //@line 67 "../hsp3/strbuf.cpp"
 $30 = (+($29|0)); //@line 67 "../hsp3/strbuf.cpp"
 $31 = $30 * 1.80000000000000004441; //@line 67 "../hsp3/strbuf.cpp"
 $32 = (~~(($31))); //@line 67 "../hsp3/strbuf.cpp"
 HEAP32[4048>>2] = $32; //@line 67 "../hsp3/strbuf.cpp"
 while(1) {
  $33 = $p; //@line 69 "../hsp3/strbuf.cpp"
  $34 = $pend; //@line 69 "../hsp3/strbuf.cpp"
  $35 = ($33>>>0)<($34>>>0); //@line 69 "../hsp3/strbuf.cpp"
  if (!($35)) {
   break;
  }
  $36 = $p; //@line 70 "../hsp3/strbuf.cpp"
  $37 = $p; //@line 70 "../hsp3/strbuf.cpp"
  $38 = (($37) + 4|0); //@line 70 "../hsp3/strbuf.cpp"
  HEAP32[$38>>2] = $36; //@line 70 "../hsp3/strbuf.cpp"
  $39 = $p; //@line 71 "../hsp3/strbuf.cpp"
  HEAP16[$39>>1] = 0; //@line 71 "../hsp3/strbuf.cpp"
  $40 = HEAP32[4040>>2]|0; //@line 72 "../hsp3/strbuf.cpp"
  $41 = $p; //@line 72 "../hsp3/strbuf.cpp"
  $42 = (($41) + 16|0); //@line 72 "../hsp3/strbuf.cpp"
  HEAP32[$42>>2] = $40; //@line 72 "../hsp3/strbuf.cpp"
  $43 = $p; //@line 73 "../hsp3/strbuf.cpp"
  HEAP32[4040>>2] = $43; //@line 73 "../hsp3/strbuf.cpp"
  $44 = $p; //@line 74 "../hsp3/strbuf.cpp"
  $45 = (($44) + 88|0); //@line 74 "../hsp3/strbuf.cpp"
  $p = $45; //@line 74 "../hsp3/strbuf.cpp"
 }
 STACKTOP = sp;return; //@line 76 "../hsp3/strbuf.cpp"
}
function __Z5sbByev() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $mem = 0, $p = 0, $pend = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $i = 0; //@line 180 "../hsp3/strbuf.cpp"
 while(1) {
  $0 = $i; //@line 180 "../hsp3/strbuf.cpp"
  $1 = HEAP32[4032>>2]|0; //@line 180 "../hsp3/strbuf.cpp"
  $2 = ($0|0)<($1|0); //@line 180 "../hsp3/strbuf.cpp"
  if (!($2)) {
   break;
  }
  $3 = $i; //@line 181 "../hsp3/strbuf.cpp"
  $4 = HEAP32[4056>>2]|0; //@line 181 "../hsp3/strbuf.cpp"
  $5 = (($4) + ($3<<3)|0); //@line 181 "../hsp3/strbuf.cpp"
  $6 = HEAP32[$5>>2]|0; //@line 181 "../hsp3/strbuf.cpp"
  $mem = $6; //@line 181 "../hsp3/strbuf.cpp"
  $7 = $mem; //@line 182 "../hsp3/strbuf.cpp"
  $p = $7; //@line 182 "../hsp3/strbuf.cpp"
  $8 = $p; //@line 183 "../hsp3/strbuf.cpp"
  $9 = $i; //@line 183 "../hsp3/strbuf.cpp"
  $10 = HEAP32[4056>>2]|0; //@line 183 "../hsp3/strbuf.cpp"
  $11 = (($10) + ($9<<3)|0); //@line 183 "../hsp3/strbuf.cpp"
  $12 = (($11) + 4|0); //@line 183 "../hsp3/strbuf.cpp"
  $13 = HEAP32[$12>>2]|0; //@line 183 "../hsp3/strbuf.cpp"
  $14 = (($8) + (($13*88)|0)|0); //@line 183 "../hsp3/strbuf.cpp"
  $pend = $14; //@line 183 "../hsp3/strbuf.cpp"
  while(1) {
   $15 = $p; //@line 184 "../hsp3/strbuf.cpp"
   $16 = $pend; //@line 184 "../hsp3/strbuf.cpp"
   $17 = ($15>>>0)<($16>>>0); //@line 184 "../hsp3/strbuf.cpp"
   if (!($17)) {
    break;
   }
   $18 = $p; //@line 185 "../hsp3/strbuf.cpp"
   __ZL10FreeExtPtrP6STRINF($18); //@line 185 "../hsp3/strbuf.cpp"
   $19 = $p; //@line 186 "../hsp3/strbuf.cpp"
   $20 = (($19) + 88|0); //@line 186 "../hsp3/strbuf.cpp"
   $p = $20; //@line 186 "../hsp3/strbuf.cpp"
  }
  $21 = $mem; //@line 188 "../hsp3/strbuf.cpp"
  _free($21); //@line 188 "../hsp3/strbuf.cpp"
  $22 = $i; //@line 180 "../hsp3/strbuf.cpp"
  $23 = (($22) + 1)|0; //@line 180 "../hsp3/strbuf.cpp"
  $i = $23; //@line 180 "../hsp3/strbuf.cpp"
 }
 $24 = HEAP32[4056>>2]|0; //@line 190 "../hsp3/strbuf.cpp"
 _free($24); //@line 190 "../hsp3/strbuf.cpp"
 STACKTOP = sp;return; //@line 191 "../hsp3/strbuf.cpp"
}
function __ZL10FreeExtPtrP6STRINF($inf) {
 $inf = $inf|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $inf;
 $1 = $0; //@line 120 "../hsp3/strbuf.cpp"
 $2 = HEAP16[$1>>1]|0; //@line 120 "../hsp3/strbuf.cpp"
 $3 = $2 << 16 >> 16; //@line 120 "../hsp3/strbuf.cpp"
 $4 = ($3|0)==(2); //@line 120 "../hsp3/strbuf.cpp"
 if (!($4)) {
  STACKTOP = sp;return; //@line 123 "../hsp3/strbuf.cpp"
 }
 $5 = $0; //@line 121 "../hsp3/strbuf.cpp"
 $6 = (($5) + 16|0); //@line 121 "../hsp3/strbuf.cpp"
 $7 = HEAP32[$6>>2]|0; //@line 121 "../hsp3/strbuf.cpp"
 _free($7); //@line 121 "../hsp3/strbuf.cpp"
 STACKTOP = sp;return; //@line 123 "../hsp3/strbuf.cpp"
}
function __Z11sbGetSTRINFPc($ptr) {
 $ptr = $ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $ptr;
 $1 = $0; //@line 196 "../hsp3/strbuf.cpp"
 $2 = (($1) + -24|0); //@line 196 "../hsp3/strbuf.cpp"
 STACKTOP = sp;return ($2|0); //@line 196 "../hsp3/strbuf.cpp"
}
function __Z7sbAlloci($size) {
 $size = $size|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $sz = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $size;
 $1 = $0; //@line 203 "../hsp3/strbuf.cpp"
 $sz = $1; //@line 203 "../hsp3/strbuf.cpp"
 $2 = $0; //@line 203 "../hsp3/strbuf.cpp"
 $3 = ($2|0)<(64); //@line 203 "../hsp3/strbuf.cpp"
 if ($3) {
  $sz = 64; //@line 203 "../hsp3/strbuf.cpp"
 }
 $4 = $sz; //@line 204 "../hsp3/strbuf.cpp"
 $5 = (__ZL10BlockAlloci($4)|0); //@line 204 "../hsp3/strbuf.cpp"
 STACKTOP = sp;return ($5|0); //@line 204 "../hsp3/strbuf.cpp"
}
function __ZL10BlockAlloci($size) {
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $inf = 0, $p = 0, $st = 0, $st2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $size;
 $1 = (__ZL10BlockEntryv()|0); //@line 97 "../hsp3/strbuf.cpp"
 $st = $1; //@line 97 "../hsp3/strbuf.cpp"
 $2 = $st; //@line 98 "../hsp3/strbuf.cpp"
 $inf = $2; //@line 98 "../hsp3/strbuf.cpp"
 $3 = $0; //@line 99 "../hsp3/strbuf.cpp"
 $4 = ($3|0)<=(64); //@line 99 "../hsp3/strbuf.cpp"
 if ($4) {
  $5 = $inf; //@line 100 "../hsp3/strbuf.cpp"
  HEAP16[$5>>1] = 1; //@line 100 "../hsp3/strbuf.cpp"
  $6 = $inf; //@line 101 "../hsp3/strbuf.cpp"
  $7 = (($6) + 8|0); //@line 101 "../hsp3/strbuf.cpp"
  HEAP32[$7>>2] = 64; //@line 101 "../hsp3/strbuf.cpp"
  $8 = $st; //@line 102 "../hsp3/strbuf.cpp"
  $9 = (($8) + 24|0); //@line 102 "../hsp3/strbuf.cpp"
  $p = $9; //@line 102 "../hsp3/strbuf.cpp"
  $10 = $p; //@line 103 "../hsp3/strbuf.cpp"
  $11 = $inf; //@line 103 "../hsp3/strbuf.cpp"
  $12 = (($11) + 12|0); //@line 103 "../hsp3/strbuf.cpp"
  HEAP32[$12>>2] = $10; //@line 103 "../hsp3/strbuf.cpp"
  $30 = $p; //@line 113 "../hsp3/strbuf.cpp"
  HEAP32[$30>>2] = 0; //@line 113 "../hsp3/strbuf.cpp"
  $31 = $p; //@line 115 "../hsp3/strbuf.cpp"
  STACKTOP = sp;return ($31|0); //@line 115 "../hsp3/strbuf.cpp"
 } else {
  $13 = $inf; //@line 105 "../hsp3/strbuf.cpp"
  HEAP16[$13>>1] = 2; //@line 105 "../hsp3/strbuf.cpp"
  $14 = $0; //@line 106 "../hsp3/strbuf.cpp"
  $15 = $inf; //@line 106 "../hsp3/strbuf.cpp"
  $16 = (($15) + 8|0); //@line 106 "../hsp3/strbuf.cpp"
  HEAP32[$16>>2] = $14; //@line 106 "../hsp3/strbuf.cpp"
  $17 = $0; //@line 107 "../hsp3/strbuf.cpp"
  $18 = (($17) + 24)|0; //@line 107 "../hsp3/strbuf.cpp"
  $19 = (_malloc($18)|0); //@line 107 "../hsp3/strbuf.cpp"
  $st2 = $19; //@line 107 "../hsp3/strbuf.cpp"
  $20 = $st2; //@line 108 "../hsp3/strbuf.cpp"
  $21 = (($20) + 24|0); //@line 108 "../hsp3/strbuf.cpp"
  $p = $21; //@line 108 "../hsp3/strbuf.cpp"
  $22 = $st2; //@line 109 "../hsp3/strbuf.cpp"
  $23 = $inf; //@line 109 "../hsp3/strbuf.cpp"
  $24 = (($23) + 16|0); //@line 109 "../hsp3/strbuf.cpp"
  HEAP32[$24>>2] = $22; //@line 109 "../hsp3/strbuf.cpp"
  $25 = $p; //@line 110 "../hsp3/strbuf.cpp"
  $26 = $inf; //@line 110 "../hsp3/strbuf.cpp"
  $27 = (($26) + 12|0); //@line 110 "../hsp3/strbuf.cpp"
  HEAP32[$27>>2] = $25; //@line 110 "../hsp3/strbuf.cpp"
  $28 = $st2; //@line 111 "../hsp3/strbuf.cpp"
  $29 = $inf; //@line 111 "../hsp3/strbuf.cpp"
  ;HEAP32[$28+0>>2]=HEAP32[$29+0>>2]|0;HEAP32[$28+4>>2]=HEAP32[$29+4>>2]|0;HEAP32[$28+8>>2]=HEAP32[$29+8>>2]|0;HEAP32[$28+12>>2]=HEAP32[$29+12>>2]|0;HEAP32[$28+16>>2]=HEAP32[$29+16>>2]|0;HEAP32[$28+20>>2]=HEAP32[$29+20>>2]|0; //@line 111 "../hsp3/strbuf.cpp"
  $30 = $p; //@line 113 "../hsp3/strbuf.cpp"
  HEAP32[$30>>2] = 0; //@line 113 "../hsp3/strbuf.cpp"
  $31 = $p; //@line 115 "../hsp3/strbuf.cpp"
  STACKTOP = sp;return ($31|0); //@line 115 "../hsp3/strbuf.cpp"
 }
 return 0|0;
}
function __Z12sbAllocCleari($size) {
 $size = $size|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $size;
 $1 = $0; //@line 211 "../hsp3/strbuf.cpp"
 $2 = (__Z7sbAlloci($1)|0); //@line 211 "../hsp3/strbuf.cpp"
 $p = $2; //@line 211 "../hsp3/strbuf.cpp"
 $3 = $p; //@line 212 "../hsp3/strbuf.cpp"
 $4 = $0; //@line 212 "../hsp3/strbuf.cpp"
 _memset(($3|0),0,($4|0))|0; //@line 212 "../hsp3/strbuf.cpp"
 $5 = $p; //@line 213 "../hsp3/strbuf.cpp"
 STACKTOP = sp;return ($5|0); //@line 213 "../hsp3/strbuf.cpp"
}
function __Z6sbFreePv($ptr) {
 $ptr = $ptr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $inf = 0, $p = 0, $st = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $ptr;
 $1 = $0; //@line 222 "../hsp3/strbuf.cpp"
 $p = $1; //@line 222 "../hsp3/strbuf.cpp"
 $2 = $p; //@line 223 "../hsp3/strbuf.cpp"
 $3 = (($2) + -24|0); //@line 223 "../hsp3/strbuf.cpp"
 $st = $3; //@line 223 "../hsp3/strbuf.cpp"
 $4 = $st; //@line 224 "../hsp3/strbuf.cpp"
 $5 = (($4) + 4|0); //@line 224 "../hsp3/strbuf.cpp"
 $6 = HEAP32[$5>>2]|0; //@line 224 "../hsp3/strbuf.cpp"
 $inf = $6; //@line 224 "../hsp3/strbuf.cpp"
 $7 = $p; //@line 225 "../hsp3/strbuf.cpp"
 $8 = $inf; //@line 225 "../hsp3/strbuf.cpp"
 $9 = (($8) + 12|0); //@line 225 "../hsp3/strbuf.cpp"
 $10 = HEAP32[$9>>2]|0; //@line 225 "../hsp3/strbuf.cpp"
 $11 = ($7|0)!=($10|0); //@line 225 "../hsp3/strbuf.cpp"
 if ($11) {
  STACKTOP = sp;return; //@line 226 "../hsp3/strbuf.cpp"
 } else {
  $12 = $inf; //@line 226 "../hsp3/strbuf.cpp"
  __ZL9BlockFreeP6STRINF($12); //@line 226 "../hsp3/strbuf.cpp"
  STACKTOP = sp;return; //@line 226 "../hsp3/strbuf.cpp"
 }
}
function __ZL9BlockFreeP6STRINF($inf) {
 $inf = $inf|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $inf;
 $1 = $0; //@line 127 "../hsp3/strbuf.cpp"
 __ZL10FreeExtPtrP6STRINF($1); //@line 127 "../hsp3/strbuf.cpp"
 $2 = HEAP32[4040>>2]|0; //@line 128 "../hsp3/strbuf.cpp"
 $3 = $0; //@line 128 "../hsp3/strbuf.cpp"
 $4 = (($3) + 16|0); //@line 128 "../hsp3/strbuf.cpp"
 HEAP32[$4>>2] = $2; //@line 128 "../hsp3/strbuf.cpp"
 $5 = $0; //@line 129 "../hsp3/strbuf.cpp"
 HEAP32[4040>>2] = $5; //@line 129 "../hsp3/strbuf.cpp"
 $6 = $0; //@line 130 "../hsp3/strbuf.cpp"
 HEAP16[$6>>1] = 0; //@line 130 "../hsp3/strbuf.cpp"
 STACKTOP = sp;return; //@line 131 "../hsp3/strbuf.cpp"
}
function __Z8sbExpandPci($ptr,$size) {
 $ptr = $ptr|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $st = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $ptr;
 $1 = $size;
 $2 = $0; //@line 233 "../hsp3/strbuf.cpp"
 $3 = (($2) + -24|0); //@line 233 "../hsp3/strbuf.cpp"
 $st = $3; //@line 233 "../hsp3/strbuf.cpp"
 $4 = $st; //@line 234 "../hsp3/strbuf.cpp"
 $5 = $1; //@line 234 "../hsp3/strbuf.cpp"
 $6 = (__ZL12BlockReallocP6STRBUFi($4,$5)|0); //@line 234 "../hsp3/strbuf.cpp"
 STACKTOP = sp;return ($6|0); //@line 234 "../hsp3/strbuf.cpp"
}
function __ZL12BlockReallocP6STRBUFi($st,$size) {
 $st = $st|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $inf = 0, $newst = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = $st;
 $2 = $size;
 $3 = $1; //@line 138 "../hsp3/strbuf.cpp"
 $4 = (($3) + 4|0); //@line 138 "../hsp3/strbuf.cpp"
 $5 = HEAP32[$4>>2]|0; //@line 138 "../hsp3/strbuf.cpp"
 $inf = $5; //@line 138 "../hsp3/strbuf.cpp"
 $6 = $2; //@line 139 "../hsp3/strbuf.cpp"
 $7 = $inf; //@line 139 "../hsp3/strbuf.cpp"
 $8 = (($7) + 8|0); //@line 139 "../hsp3/strbuf.cpp"
 $9 = HEAP32[$8>>2]|0; //@line 139 "../hsp3/strbuf.cpp"
 $10 = ($6|0)<=($9|0); //@line 139 "../hsp3/strbuf.cpp"
 if ($10) {
  $11 = $inf; //@line 139 "../hsp3/strbuf.cpp"
  $12 = (($11) + 12|0); //@line 139 "../hsp3/strbuf.cpp"
  $13 = HEAP32[$12>>2]|0; //@line 139 "../hsp3/strbuf.cpp"
  $0 = $13; //@line 139 "../hsp3/strbuf.cpp"
  $40 = $0; //@line 152 "../hsp3/strbuf.cpp"
  STACKTOP = sp;return ($40|0); //@line 152 "../hsp3/strbuf.cpp"
 } else {
  $14 = $2; //@line 141 "../hsp3/strbuf.cpp"
  $15 = (($14) + 24)|0; //@line 141 "../hsp3/strbuf.cpp"
  $16 = (_malloc($15)|0); //@line 141 "../hsp3/strbuf.cpp"
  $newst = $16; //@line 141 "../hsp3/strbuf.cpp"
  $17 = $newst; //@line 142 "../hsp3/strbuf.cpp"
  $18 = (($17) + 24|0); //@line 142 "../hsp3/strbuf.cpp"
  $p = $18; //@line 142 "../hsp3/strbuf.cpp"
  $19 = $p; //@line 143 "../hsp3/strbuf.cpp"
  $20 = $inf; //@line 143 "../hsp3/strbuf.cpp"
  $21 = (($20) + 12|0); //@line 143 "../hsp3/strbuf.cpp"
  $22 = HEAP32[$21>>2]|0; //@line 143 "../hsp3/strbuf.cpp"
  $23 = $inf; //@line 143 "../hsp3/strbuf.cpp"
  $24 = (($23) + 8|0); //@line 143 "../hsp3/strbuf.cpp"
  $25 = HEAP32[$24>>2]|0; //@line 143 "../hsp3/strbuf.cpp"
  _memcpy(($19|0),($22|0),($25|0))|0; //@line 143 "../hsp3/strbuf.cpp"
  $26 = $inf; //@line 144 "../hsp3/strbuf.cpp"
  __ZL10FreeExtPtrP6STRINF($26); //@line 144 "../hsp3/strbuf.cpp"
  $27 = $2; //@line 145 "../hsp3/strbuf.cpp"
  $28 = $inf; //@line 145 "../hsp3/strbuf.cpp"
  $29 = (($28) + 8|0); //@line 145 "../hsp3/strbuf.cpp"
  HEAP32[$29>>2] = $27; //@line 145 "../hsp3/strbuf.cpp"
  $30 = $inf; //@line 146 "../hsp3/strbuf.cpp"
  HEAP16[$30>>1] = 2; //@line 146 "../hsp3/strbuf.cpp"
  $31 = $p; //@line 147 "../hsp3/strbuf.cpp"
  $32 = $inf; //@line 147 "../hsp3/strbuf.cpp"
  $33 = (($32) + 12|0); //@line 147 "../hsp3/strbuf.cpp"
  HEAP32[$33>>2] = $31; //@line 147 "../hsp3/strbuf.cpp"
  $34 = $newst; //@line 148 "../hsp3/strbuf.cpp"
  $35 = $inf; //@line 148 "../hsp3/strbuf.cpp"
  $36 = (($35) + 16|0); //@line 148 "../hsp3/strbuf.cpp"
  HEAP32[$36>>2] = $34; //@line 148 "../hsp3/strbuf.cpp"
  $37 = $newst; //@line 150 "../hsp3/strbuf.cpp"
  $38 = $inf; //@line 150 "../hsp3/strbuf.cpp"
  ;HEAP32[$37+0>>2]=HEAP32[$38+0>>2]|0;HEAP32[$37+4>>2]=HEAP32[$38+4>>2]|0;HEAP32[$37+8>>2]=HEAP32[$38+8>>2]|0;HEAP32[$37+12>>2]=HEAP32[$38+12>>2]|0;HEAP32[$37+16>>2]=HEAP32[$38+16>>2]|0;HEAP32[$37+20>>2]=HEAP32[$38+20>>2]|0; //@line 150 "../hsp3/strbuf.cpp"
  $39 = $p; //@line 151 "../hsp3/strbuf.cpp"
  $0 = $39; //@line 151 "../hsp3/strbuf.cpp"
  $40 = $0; //@line 152 "../hsp3/strbuf.cpp"
  STACKTOP = sp;return ($40|0); //@line 152 "../hsp3/strbuf.cpp"
 }
 return 0|0;
}
function __Z6sbCopyPPcS_i($pptr,$data,$size) {
 $pptr = $pptr|0;
 $data = $data|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0, $ptr = 0, $st = 0, $sz = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $pptr;
 $1 = $data;
 $2 = $size;
 $3 = $0; //@line 244 "../hsp3/strbuf.cpp"
 $4 = HEAP32[$3>>2]|0; //@line 244 "../hsp3/strbuf.cpp"
 $ptr = $4; //@line 244 "../hsp3/strbuf.cpp"
 $5 = $ptr; //@line 245 "../hsp3/strbuf.cpp"
 $6 = (($5) + -24|0); //@line 245 "../hsp3/strbuf.cpp"
 $st = $6; //@line 245 "../hsp3/strbuf.cpp"
 $7 = $st; //@line 246 "../hsp3/strbuf.cpp"
 $8 = (($7) + 8|0); //@line 246 "../hsp3/strbuf.cpp"
 $9 = HEAP32[$8>>2]|0; //@line 246 "../hsp3/strbuf.cpp"
 $sz = $9; //@line 246 "../hsp3/strbuf.cpp"
 $10 = $st; //@line 247 "../hsp3/strbuf.cpp"
 $11 = (($10) + 12|0); //@line 247 "../hsp3/strbuf.cpp"
 $12 = HEAP32[$11>>2]|0; //@line 247 "../hsp3/strbuf.cpp"
 $p = $12; //@line 247 "../hsp3/strbuf.cpp"
 $13 = $2; //@line 248 "../hsp3/strbuf.cpp"
 $14 = $sz; //@line 248 "../hsp3/strbuf.cpp"
 $15 = ($13|0)>($14|0); //@line 248 "../hsp3/strbuf.cpp"
 if (!($15)) {
  $21 = $p; //@line 249 "../hsp3/strbuf.cpp"
  $22 = $1; //@line 249 "../hsp3/strbuf.cpp"
  $23 = $2; //@line 249 "../hsp3/strbuf.cpp"
  _memcpy(($21|0),($22|0),($23|0))|0; //@line 249 "../hsp3/strbuf.cpp"
  STACKTOP = sp;return; //@line 250 "../hsp3/strbuf.cpp"
 }
 $16 = $st; //@line 248 "../hsp3/strbuf.cpp"
 $17 = $2; //@line 248 "../hsp3/strbuf.cpp"
 $18 = (__ZL12BlockReallocP6STRBUFi($16,$17)|0); //@line 248 "../hsp3/strbuf.cpp"
 $p = $18; //@line 248 "../hsp3/strbuf.cpp"
 $19 = $p; //@line 248 "../hsp3/strbuf.cpp"
 $20 = $0; //@line 248 "../hsp3/strbuf.cpp"
 HEAP32[$20>>2] = $19; //@line 248 "../hsp3/strbuf.cpp"
 $21 = $p; //@line 249 "../hsp3/strbuf.cpp"
 $22 = $1; //@line 249 "../hsp3/strbuf.cpp"
 $23 = $2; //@line 249 "../hsp3/strbuf.cpp"
 _memcpy(($21|0),($22|0),($23|0))|0; //@line 249 "../hsp3/strbuf.cpp"
 STACKTOP = sp;return; //@line 250 "../hsp3/strbuf.cpp"
}
function __Z5sbAddPPcS_ii($pptr,$data,$size,$mode) {
 $pptr = $pptr|0;
 $data = $data|0;
 $size = $size|0;
 $mode = $mode|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $newsize = 0;
 var $p = 0, $ptr = 0, $st = 0, $sz = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = $pptr;
 $1 = $data;
 $2 = $size;
 $3 = $mode;
 $4 = $0; //@line 260 "../hsp3/strbuf.cpp"
 $5 = HEAP32[$4>>2]|0; //@line 260 "../hsp3/strbuf.cpp"
 $ptr = $5; //@line 260 "../hsp3/strbuf.cpp"
 $6 = $ptr; //@line 261 "../hsp3/strbuf.cpp"
 $7 = (($6) + -24|0); //@line 261 "../hsp3/strbuf.cpp"
 $st = $7; //@line 261 "../hsp3/strbuf.cpp"
 $8 = $st; //@line 262 "../hsp3/strbuf.cpp"
 $9 = (($8) + 12|0); //@line 262 "../hsp3/strbuf.cpp"
 $10 = HEAP32[$9>>2]|0; //@line 262 "../hsp3/strbuf.cpp"
 $p = $10; //@line 262 "../hsp3/strbuf.cpp"
 $11 = $3; //@line 263 "../hsp3/strbuf.cpp"
 $12 = ($11|0)!=(0); //@line 263 "../hsp3/strbuf.cpp"
 if ($12) {
  $13 = $p; //@line 264 "../hsp3/strbuf.cpp"
  $14 = (_strlen(($13|0))|0); //@line 264 "../hsp3/strbuf.cpp"
  $sz = $14; //@line 264 "../hsp3/strbuf.cpp"
 } else {
  $15 = $st; //@line 266 "../hsp3/strbuf.cpp"
  $16 = (($15) + 8|0); //@line 266 "../hsp3/strbuf.cpp"
  $17 = HEAP32[$16>>2]|0; //@line 266 "../hsp3/strbuf.cpp"
  $sz = $17; //@line 266 "../hsp3/strbuf.cpp"
 }
 $18 = $sz; //@line 268 "../hsp3/strbuf.cpp"
 $19 = $2; //@line 268 "../hsp3/strbuf.cpp"
 $20 = (($18) + ($19))|0; //@line 268 "../hsp3/strbuf.cpp"
 $newsize = $20; //@line 268 "../hsp3/strbuf.cpp"
 $21 = $newsize; //@line 269 "../hsp3/strbuf.cpp"
 $22 = $st; //@line 269 "../hsp3/strbuf.cpp"
 $23 = (($22) + 8|0); //@line 269 "../hsp3/strbuf.cpp"
 $24 = HEAP32[$23>>2]|0; //@line 269 "../hsp3/strbuf.cpp"
 $25 = ($21|0)>($24|0); //@line 269 "../hsp3/strbuf.cpp"
 if (!($25)) {
  $34 = $p; //@line 275 "../hsp3/strbuf.cpp"
  $35 = $sz; //@line 275 "../hsp3/strbuf.cpp"
  $36 = (($34) + ($35)|0); //@line 275 "../hsp3/strbuf.cpp"
  $37 = $1; //@line 275 "../hsp3/strbuf.cpp"
  $38 = $2; //@line 275 "../hsp3/strbuf.cpp"
  _memcpy(($36|0),($37|0),($38|0))|0; //@line 275 "../hsp3/strbuf.cpp"
  STACKTOP = sp;return; //@line 276 "../hsp3/strbuf.cpp"
 }
 $26 = $newsize; //@line 270 "../hsp3/strbuf.cpp"
 $27 = (($26) + 4095)|0; //@line 270 "../hsp3/strbuf.cpp"
 $28 = $27 & -4096; //@line 270 "../hsp3/strbuf.cpp"
 $newsize = $28; //@line 270 "../hsp3/strbuf.cpp"
 $29 = $st; //@line 272 "../hsp3/strbuf.cpp"
 $30 = $newsize; //@line 272 "../hsp3/strbuf.cpp"
 $31 = (__ZL12BlockReallocP6STRBUFi($29,$30)|0); //@line 272 "../hsp3/strbuf.cpp"
 $p = $31; //@line 272 "../hsp3/strbuf.cpp"
 $32 = $p; //@line 273 "../hsp3/strbuf.cpp"
 $33 = $0; //@line 273 "../hsp3/strbuf.cpp"
 HEAP32[$33>>2] = $32; //@line 273 "../hsp3/strbuf.cpp"
 $34 = $p; //@line 275 "../hsp3/strbuf.cpp"
 $35 = $sz; //@line 275 "../hsp3/strbuf.cpp"
 $36 = (($34) + ($35)|0); //@line 275 "../hsp3/strbuf.cpp"
 $37 = $1; //@line 275 "../hsp3/strbuf.cpp"
 $38 = $2; //@line 275 "../hsp3/strbuf.cpp"
 _memcpy(($36|0),($37|0),($38|0))|0; //@line 275 "../hsp3/strbuf.cpp"
 STACKTOP = sp;return; //@line 276 "../hsp3/strbuf.cpp"
}
function __Z9sbStrCopyPPcS_($ptr,$str) {
 $ptr = $ptr|0;
 $str = $str|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $ptr;
 $1 = $str;
 $2 = $0; //@line 281 "../hsp3/strbuf.cpp"
 $3 = $1; //@line 281 "../hsp3/strbuf.cpp"
 $4 = $1; //@line 281 "../hsp3/strbuf.cpp"
 $5 = (_strlen(($4|0))|0); //@line 281 "../hsp3/strbuf.cpp"
 $6 = (($5) + 1)|0; //@line 281 "../hsp3/strbuf.cpp"
 __Z6sbCopyPPcS_i($2,$3,$6); //@line 281 "../hsp3/strbuf.cpp"
 STACKTOP = sp;return; //@line 282 "../hsp3/strbuf.cpp"
}
function __Z8sbStrAddPPcS_($ptr,$str) {
 $ptr = $ptr|0;
 $str = $str|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $ptr;
 $1 = $str;
 $2 = $0; //@line 287 "../hsp3/strbuf.cpp"
 $3 = $1; //@line 287 "../hsp3/strbuf.cpp"
 $4 = $1; //@line 287 "../hsp3/strbuf.cpp"
 $5 = (_strlen(($4|0))|0); //@line 287 "../hsp3/strbuf.cpp"
 $6 = (($5) + 1)|0; //@line 287 "../hsp3/strbuf.cpp"
 __Z5sbAddPPcS_ii($2,$3,$6,1); //@line 287 "../hsp3/strbuf.cpp"
 STACKTOP = sp;return; //@line 288 "../hsp3/strbuf.cpp"
}
function __Z11sbGetOptionPc($ptr) {
 $ptr = $ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $st = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $ptr;
 $1 = $0; //@line 294 "../hsp3/strbuf.cpp"
 $2 = (($1) + -24|0); //@line 294 "../hsp3/strbuf.cpp"
 $st = $2; //@line 294 "../hsp3/strbuf.cpp"
 $3 = $st; //@line 295 "../hsp3/strbuf.cpp"
 $4 = (($3) + 20|0); //@line 295 "../hsp3/strbuf.cpp"
 $5 = HEAP32[$4>>2]|0; //@line 295 "../hsp3/strbuf.cpp"
 STACKTOP = sp;return ($5|0); //@line 295 "../hsp3/strbuf.cpp"
}
function __Z11sbSetOptionPcPv($ptr,$option) {
 $ptr = $ptr|0;
 $option = $option|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $inf = 0, $st = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $ptr;
 $1 = $option;
 $2 = $0; //@line 303 "../hsp3/strbuf.cpp"
 $3 = (($2) + -24|0); //@line 303 "../hsp3/strbuf.cpp"
 $st = $3; //@line 303 "../hsp3/strbuf.cpp"
 $4 = $1; //@line 304 "../hsp3/strbuf.cpp"
 $5 = $st; //@line 304 "../hsp3/strbuf.cpp"
 $6 = (($5) + 20|0); //@line 304 "../hsp3/strbuf.cpp"
 HEAP32[$6>>2] = $4; //@line 304 "../hsp3/strbuf.cpp"
 $7 = $st; //@line 305 "../hsp3/strbuf.cpp"
 $8 = (($7) + 4|0); //@line 305 "../hsp3/strbuf.cpp"
 $9 = HEAP32[$8>>2]|0; //@line 305 "../hsp3/strbuf.cpp"
 $inf = $9; //@line 305 "../hsp3/strbuf.cpp"
 $10 = $1; //@line 306 "../hsp3/strbuf.cpp"
 $11 = $inf; //@line 306 "../hsp3/strbuf.cpp"
 $12 = (($11) + 20|0); //@line 306 "../hsp3/strbuf.cpp"
 HEAP32[$12>>2] = $10; //@line 306 "../hsp3/strbuf.cpp"
 STACKTOP = sp;return; //@line 307 "../hsp3/strbuf.cpp"
}
function __ZL10BlockEntryv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $buf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = HEAP32[4040>>2]|0; //@line 83 "../hsp3/strbuf.cpp"
 $1 = ($0|0)==(0|0); //@line 83 "../hsp3/strbuf.cpp"
 if ($1) {
  __ZL15BlockPtrPreparev(); //@line 84 "../hsp3/strbuf.cpp"
 }
 $2 = HEAP32[4040>>2]|0; //@line 86 "../hsp3/strbuf.cpp"
 $buf = $2; //@line 86 "../hsp3/strbuf.cpp"
 $3 = HEAP32[4040>>2]|0; //@line 87 "../hsp3/strbuf.cpp"
 $4 = (($3) + 16|0); //@line 87 "../hsp3/strbuf.cpp"
 $5 = HEAP32[$4>>2]|0; //@line 87 "../hsp3/strbuf.cpp"
 HEAP32[4040>>2] = $5; //@line 87 "../hsp3/strbuf.cpp"
 $6 = $buf; //@line 88 "../hsp3/strbuf.cpp"
 STACKTOP = sp;return ($6|0); //@line 88 "../hsp3/strbuf.cpp"
}
function __ZN8CStrNoteC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 HEAP32[$1>>2] = 0; //@line 16 "../hsp3/strnote.cpp"
 $2 = (($1) + 17|0); //@line 17 "../hsp3/strnote.cpp"
 HEAP8[$2>>0] = 0; //@line 17 "../hsp3/strnote.cpp"
 STACKTOP = sp;return; //@line 18 "../hsp3/strnote.cpp"
}
function __ZN8CStrNoteD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 STACKTOP = sp;return; //@line 23 "../hsp3/strnote.cpp"
}
function __ZN8CStrNote6SelectEPc($this,$str) {
 $this = $this|0;
 $str = $str|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $str;
 $2 = $0;
 $3 = $1; //@line 28 "../hsp3/strnote.cpp"
 HEAP32[$2>>2] = $3; //@line 28 "../hsp3/strnote.cpp"
 STACKTOP = sp;return; //@line 29 "../hsp3/strnote.cpp"
}
function __ZN8CStrNote7GetSizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0; //@line 34 "../hsp3/strnote.cpp"
 $3 = (_strlen(($2|0))|0); //@line 34 "../hsp3/strnote.cpp"
 STACKTOP = sp;return ($3|0); //@line 34 "../hsp3/strnote.cpp"
}
function __ZN8CStrNote5nngetEPci($this,$nbase,$line) {
 $this = $this|0;
 $nbase = $nbase|0;
 $line = $line|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $a1 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = $this;
 $2 = $nbase;
 $3 = $line;
 $4 = $1;
 $a = 0; //@line 46 "../hsp3/strnote.cpp"
 $5 = (($4) + 4|0); //@line 47 "../hsp3/strnote.cpp"
 HEAP32[$5>>2] = 0; //@line 47 "../hsp3/strnote.cpp"
 $6 = $2; //@line 48 "../hsp3/strnote.cpp"
 $7 = (($4) + 8|0); //@line 48 "../hsp3/strnote.cpp"
 HEAP32[$7>>2] = $6; //@line 48 "../hsp3/strnote.cpp"
 $8 = $3; //@line 49 "../hsp3/strnote.cpp"
 $9 = ($8|0)<(0); //@line 49 "../hsp3/strnote.cpp"
 if ($9) {
  $10 = $2; //@line 50 "../hsp3/strnote.cpp"
  $11 = (_strlen(($10|0))|0); //@line 50 "../hsp3/strnote.cpp"
  $i = $11; //@line 50 "../hsp3/strnote.cpp"
  $12 = $i; //@line 50 "../hsp3/strnote.cpp"
  $13 = ($12|0)==(0); //@line 50 "../hsp3/strnote.cpp"
  if ($13) {
   $0 = 0; //@line 50 "../hsp3/strnote.cpp"
   $69 = $0; //@line 71 "../hsp3/strnote.cpp"
   STACKTOP = sp;return ($69|0); //@line 71 "../hsp3/strnote.cpp"
  }
  $14 = $i; //@line 51 "../hsp3/strnote.cpp"
  $15 = (($4) + 8|0); //@line 51 "../hsp3/strnote.cpp"
  $16 = HEAP32[$15>>2]|0; //@line 51 "../hsp3/strnote.cpp"
  $17 = (($16) + ($14)|0); //@line 51 "../hsp3/strnote.cpp"
  HEAP32[$15>>2] = $17; //@line 51 "../hsp3/strnote.cpp"
  $18 = (($4) + 8|0); //@line 51 "../hsp3/strnote.cpp"
  $19 = HEAP32[$18>>2]|0; //@line 51 "../hsp3/strnote.cpp"
  $20 = (($19) + -1|0); //@line 51 "../hsp3/strnote.cpp"
  $21 = HEAP8[$20>>0]|0; //@line 51 "../hsp3/strnote.cpp"
  $a1 = $21; //@line 51 "../hsp3/strnote.cpp"
  $22 = $a1; //@line 52 "../hsp3/strnote.cpp"
  $23 = $22 << 24 >> 24; //@line 52 "../hsp3/strnote.cpp"
  $24 = ($23|0)==(10); //@line 52 "../hsp3/strnote.cpp"
  if ($24) {
   label = 6;
  } else {
   $25 = $a1; //@line 52 "../hsp3/strnote.cpp"
   $26 = $25 << 24 >> 24; //@line 52 "../hsp3/strnote.cpp"
   $27 = ($26|0)==(13); //@line 52 "../hsp3/strnote.cpp"
   if ($27) {
    label = 6;
   }
  }
  if ((label|0) == 6) {
   $28 = (($4) + 4|0); //@line 52 "../hsp3/strnote.cpp"
   $29 = HEAP32[$28>>2]|0; //@line 52 "../hsp3/strnote.cpp"
   $30 = (($29) + 1)|0; //@line 52 "../hsp3/strnote.cpp"
   HEAP32[$28>>2] = $30; //@line 52 "../hsp3/strnote.cpp"
  }
  $0 = 0; //@line 53 "../hsp3/strnote.cpp"
  $69 = $0; //@line 71 "../hsp3/strnote.cpp"
  STACKTOP = sp;return ($69|0); //@line 71 "../hsp3/strnote.cpp"
 }
 $31 = $3; //@line 55 "../hsp3/strnote.cpp"
 $32 = ($31|0)!=(0); //@line 55 "../hsp3/strnote.cpp"
 if ($32) {
  while(1) {
   $33 = (($4) + 8|0); //@line 57 "../hsp3/strnote.cpp"
   $34 = HEAP32[$33>>2]|0; //@line 57 "../hsp3/strnote.cpp"
   $35 = HEAP8[$34>>0]|0; //@line 57 "../hsp3/strnote.cpp"
   $a1 = $35; //@line 57 "../hsp3/strnote.cpp"
   $36 = $a1; //@line 57 "../hsp3/strnote.cpp"
   $37 = $36 << 24 >> 24; //@line 57 "../hsp3/strnote.cpp"
   $38 = ($37|0)==(0); //@line 57 "../hsp3/strnote.cpp"
   if ($38) {
    label = 11;
    break;
   }
   $39 = (($4) + 8|0); //@line 58 "../hsp3/strnote.cpp"
   $40 = HEAP32[$39>>2]|0; //@line 58 "../hsp3/strnote.cpp"
   $41 = (($40) + 1|0); //@line 58 "../hsp3/strnote.cpp"
   HEAP32[$39>>2] = $41; //@line 58 "../hsp3/strnote.cpp"
   $42 = $a1; //@line 60 "../hsp3/strnote.cpp"
   $43 = $42 << 24 >> 24; //@line 60 "../hsp3/strnote.cpp"
   $44 = ($43|0)==(10); //@line 60 "../hsp3/strnote.cpp"
   if ($44) {
    $45 = $a; //@line 61 "../hsp3/strnote.cpp"
    $46 = (($45) + 1)|0; //@line 61 "../hsp3/strnote.cpp"
    $a = $46; //@line 61 "../hsp3/strnote.cpp"
    $47 = $a; //@line 61 "../hsp3/strnote.cpp"
    $48 = $3; //@line 61 "../hsp3/strnote.cpp"
    $49 = ($47|0)==($48|0); //@line 61 "../hsp3/strnote.cpp"
    if ($49) {
     label = 14;
     break;
    }
   }
   $50 = $a1; //@line 64 "../hsp3/strnote.cpp"
   $51 = $50 << 24 >> 24; //@line 64 "../hsp3/strnote.cpp"
   $52 = ($51|0)==(13); //@line 64 "../hsp3/strnote.cpp"
   if ($52) {
    $53 = (($4) + 8|0); //@line 65 "../hsp3/strnote.cpp"
    $54 = HEAP32[$53>>2]|0; //@line 65 "../hsp3/strnote.cpp"
    $55 = HEAP8[$54>>0]|0; //@line 65 "../hsp3/strnote.cpp"
    $56 = $55 << 24 >> 24; //@line 65 "../hsp3/strnote.cpp"
    $57 = ($56|0)==(10); //@line 65 "../hsp3/strnote.cpp"
    if ($57) {
     $58 = (($4) + 8|0); //@line 65 "../hsp3/strnote.cpp"
     $59 = HEAP32[$58>>2]|0; //@line 65 "../hsp3/strnote.cpp"
     $60 = (($59) + 1|0); //@line 65 "../hsp3/strnote.cpp"
     HEAP32[$58>>2] = $60; //@line 65 "../hsp3/strnote.cpp"
    }
    $61 = $a; //@line 66 "../hsp3/strnote.cpp"
    $62 = (($61) + 1)|0; //@line 66 "../hsp3/strnote.cpp"
    $a = $62; //@line 66 "../hsp3/strnote.cpp"
    $63 = $a; //@line 66 "../hsp3/strnote.cpp"
    $64 = $3; //@line 66 "../hsp3/strnote.cpp"
    $65 = ($63|0)==($64|0); //@line 66 "../hsp3/strnote.cpp"
    if ($65) {
     label = 20;
     break;
    }
   }
  }
  if ((label|0) == 11) {
   $0 = 1; //@line 57 "../hsp3/strnote.cpp"
   $69 = $0; //@line 71 "../hsp3/strnote.cpp"
   STACKTOP = sp;return ($69|0); //@line 71 "../hsp3/strnote.cpp"
  }
  else if ((label|0) == 14) {
  }
  else if ((label|0) == 20) {
  }
 }
 $66 = (($4) + 4|0); //@line 70 "../hsp3/strnote.cpp"
 $67 = HEAP32[$66>>2]|0; //@line 70 "../hsp3/strnote.cpp"
 $68 = (($67) + 1)|0; //@line 70 "../hsp3/strnote.cpp"
 HEAP32[$66>>2] = $68; //@line 70 "../hsp3/strnote.cpp"
 $0 = 0; //@line 71 "../hsp3/strnote.cpp"
 $69 = $0; //@line 71 "../hsp3/strnote.cpp"
 STACKTOP = sp;return ($69|0); //@line 71 "../hsp3/strnote.cpp"
}
function __ZN8CStrNote13GetLineDirectEi($this,$line) {
 $this = $this|0;
 $line = $line|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $line;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0; //@line 130 "../hsp3/strnote.cpp"
 $4 = $1; //@line 130 "../hsp3/strnote.cpp"
 $5 = (__ZN8CStrNote5nngetEPci($2,$3,$4)|0); //@line 130 "../hsp3/strnote.cpp"
 $6 = ($5|0)!=(0); //@line 130 "../hsp3/strnote.cpp"
 if ($6) {
  $7 = (($2) + 17|0); //@line 130 "../hsp3/strnote.cpp"
  $8 = (($2) + 8|0); //@line 130 "../hsp3/strnote.cpp"
  HEAP32[$8>>2] = $7; //@line 130 "../hsp3/strnote.cpp"
 }
 $9 = (($2) + 8|0); //@line 131 "../hsp3/strnote.cpp"
 $10 = HEAP32[$9>>2]|0; //@line 131 "../hsp3/strnote.cpp"
 $11 = (($2) + 12|0); //@line 131 "../hsp3/strnote.cpp"
 HEAP32[$11>>2] = $10; //@line 131 "../hsp3/strnote.cpp"
 while(1) {
  $12 = (($2) + 12|0); //@line 133 "../hsp3/strnote.cpp"
  $13 = HEAP32[$12>>2]|0; //@line 133 "../hsp3/strnote.cpp"
  $14 = HEAP8[$13>>0]|0; //@line 133 "../hsp3/strnote.cpp"
  $a1 = $14; //@line 133 "../hsp3/strnote.cpp"
  $15 = $a1; //@line 134 "../hsp3/strnote.cpp"
  $16 = $15 << 24 >> 24; //@line 134 "../hsp3/strnote.cpp"
  $17 = ($16|0)==(0); //@line 134 "../hsp3/strnote.cpp"
  if ($17) {
   label = 6;
   break;
  }
  $18 = $a1; //@line 134 "../hsp3/strnote.cpp"
  $19 = $18 << 24 >> 24; //@line 134 "../hsp3/strnote.cpp"
  $20 = ($19|0)==(13); //@line 134 "../hsp3/strnote.cpp"
  if ($20) {
   label = 6;
   break;
  }
  $21 = $a1; //@line 136 "../hsp3/strnote.cpp"
  $22 = $21 << 24 >> 24; //@line 136 "../hsp3/strnote.cpp"
  $23 = ($22|0)==(10); //@line 136 "../hsp3/strnote.cpp"
  if ($23) {
   label = 8;
   break;
  }
  $24 = (($2) + 12|0); //@line 138 "../hsp3/strnote.cpp"
  $25 = HEAP32[$24>>2]|0; //@line 138 "../hsp3/strnote.cpp"
  $26 = (($25) + 1|0); //@line 138 "../hsp3/strnote.cpp"
  HEAP32[$24>>2] = $26; //@line 138 "../hsp3/strnote.cpp"
 }
 if ((label|0) == 6) {
 }
 else if ((label|0) == 8) {
 }
 $27 = $a1; //@line 140 "../hsp3/strnote.cpp"
 $28 = (($2) + 16|0); //@line 140 "../hsp3/strnote.cpp"
 HEAP8[$28>>0] = $27; //@line 140 "../hsp3/strnote.cpp"
 $29 = (($2) + 12|0); //@line 141 "../hsp3/strnote.cpp"
 $30 = HEAP32[$29>>2]|0; //@line 141 "../hsp3/strnote.cpp"
 HEAP8[$30>>0] = 0; //@line 141 "../hsp3/strnote.cpp"
 $31 = (($2) + 8|0); //@line 142 "../hsp3/strnote.cpp"
 $32 = HEAP32[$31>>2]|0; //@line 142 "../hsp3/strnote.cpp"
 STACKTOP = sp;return ($32|0); //@line 142 "../hsp3/strnote.cpp"
}
function __ZN8CStrNote16ResumeLineDirectEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 16|0); //@line 150 "../hsp3/strnote.cpp"
 $3 = HEAP8[$2>>0]|0; //@line 150 "../hsp3/strnote.cpp"
 $4 = (($1) + 12|0); //@line 150 "../hsp3/strnote.cpp"
 $5 = HEAP32[$4>>2]|0; //@line 150 "../hsp3/strnote.cpp"
 HEAP8[$5>>0] = $3; //@line 150 "../hsp3/strnote.cpp"
 STACKTOP = sp;return; //@line 151 "../hsp3/strnote.cpp"
}
function __ZN8CStrNote10GetMaxLineEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $a1 = 0, $b = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 $a = 1; //@line 158 "../hsp3/strnote.cpp"
 $b = 0; //@line 158 "../hsp3/strnote.cpp"
 $2 = HEAP32[$1>>2]|0; //@line 159 "../hsp3/strnote.cpp"
 $3 = (($1) + 8|0); //@line 159 "../hsp3/strnote.cpp"
 HEAP32[$3>>2] = $2; //@line 159 "../hsp3/strnote.cpp"
 while(1) {
  $4 = (($1) + 8|0); //@line 161 "../hsp3/strnote.cpp"
  $5 = HEAP32[$4>>2]|0; //@line 161 "../hsp3/strnote.cpp"
  $6 = (($5) + 1|0); //@line 161 "../hsp3/strnote.cpp"
  HEAP32[$4>>2] = $6; //@line 161 "../hsp3/strnote.cpp"
  $7 = HEAP8[$5>>0]|0; //@line 161 "../hsp3/strnote.cpp"
  $a1 = $7; //@line 161 "../hsp3/strnote.cpp"
  $8 = $a1; //@line 161 "../hsp3/strnote.cpp"
  $9 = $8 << 24 >> 24; //@line 161 "../hsp3/strnote.cpp"
  $10 = ($9|0)==(0); //@line 161 "../hsp3/strnote.cpp"
  if ($10) {
   break;
  }
  $11 = $a1; //@line 163 "../hsp3/strnote.cpp"
  $12 = $11 << 24 >> 24; //@line 163 "../hsp3/strnote.cpp"
  $13 = ($12|0)==(13); //@line 163 "../hsp3/strnote.cpp"
  if ($13) {
   label = 6;
  } else {
   $14 = $a1; //@line 163 "../hsp3/strnote.cpp"
   $15 = $14 << 24 >> 24; //@line 163 "../hsp3/strnote.cpp"
   $16 = ($15|0)==(10); //@line 163 "../hsp3/strnote.cpp"
   if ($16) {
    label = 6;
   } else {
    $19 = $b; //@line 170 "../hsp3/strnote.cpp"
    $20 = (($19) + 1)|0; //@line 170 "../hsp3/strnote.cpp"
    $b = $20; //@line 170 "../hsp3/strnote.cpp"
   }
  }
  if ((label|0) == 6) {
   label = 0;
   $17 = $a; //@line 168 "../hsp3/strnote.cpp"
   $18 = (($17) + 1)|0; //@line 168 "../hsp3/strnote.cpp"
   $a = $18; //@line 168 "../hsp3/strnote.cpp"
   $b = 0; //@line 168 "../hsp3/strnote.cpp"
  }
 }
 $21 = $b; //@line 172 "../hsp3/strnote.cpp"
 $22 = ($21|0)==(0); //@line 172 "../hsp3/strnote.cpp"
 if (!($22)) {
  $25 = $a; //@line 173 "../hsp3/strnote.cpp"
  STACKTOP = sp;return ($25|0); //@line 173 "../hsp3/strnote.cpp"
 }
 $23 = $a; //@line 172 "../hsp3/strnote.cpp"
 $24 = (($23) + -1)|0; //@line 172 "../hsp3/strnote.cpp"
 $a = $24; //@line 172 "../hsp3/strnote.cpp"
 $25 = $a; //@line 173 "../hsp3/strnote.cpp"
 STACKTOP = sp;return ($25|0); //@line 173 "../hsp3/strnote.cpp"
}
function __ZN8CStrNote7PutLineEPcii($this,$nstr2,$line,$ovr) {
 $this = $this|0;
 $nstr2 = $nstr2|0;
 $line = $line|0;
 $ovr = $ovr|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a = 0, $a1 = 0;
 var $la = 0, $ln = 0, $lw = 0, $nstr = 0, $p1 = 0, $p2 = 0, $pp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $1 = $this;
 $2 = $nstr2;
 $3 = $line;
 $4 = $ovr;
 $5 = $1;
 $a = 0; //@line 188 "../hsp3/strnote.cpp"
 $6 = HEAP32[$5>>2]|0; //@line 194 "../hsp3/strnote.cpp"
 $7 = $3; //@line 194 "../hsp3/strnote.cpp"
 $8 = (__ZN8CStrNote5nngetEPci($5,$6,$7)|0); //@line 194 "../hsp3/strnote.cpp"
 $9 = ($8|0)!=(0); //@line 194 "../hsp3/strnote.cpp"
 if ($9) {
  $0 = 1; //@line 194 "../hsp3/strnote.cpp"
  $117 = $0; //@line 240 "../hsp3/strnote.cpp"
  STACKTOP = sp;return ($117|0); //@line 240 "../hsp3/strnote.cpp"
 }
 $10 = (($5) + 4|0); //@line 195 "../hsp3/strnote.cpp"
 $11 = HEAP32[$10>>2]|0; //@line 195 "../hsp3/strnote.cpp"
 $12 = ($11|0)==(0); //@line 195 "../hsp3/strnote.cpp"
 if ($12) {
  $13 = (($5) + 8|0); //@line 196 "../hsp3/strnote.cpp"
  $14 = HEAP32[$13>>2]|0; //@line 196 "../hsp3/strnote.cpp"
  $15 = HEAP32[$5>>2]|0; //@line 196 "../hsp3/strnote.cpp"
  $16 = ($14|0)!=($15|0); //@line 196 "../hsp3/strnote.cpp"
  if ($16) {
   $17 = HEAP32[$5>>2]|0; //@line 197 "../hsp3/strnote.cpp"
   (_strcat(($17|0),(4064|0))|0); //@line 197 "../hsp3/strnote.cpp"
   $18 = (($5) + 8|0); //@line 197 "../hsp3/strnote.cpp"
   $19 = HEAP32[$18>>2]|0; //@line 197 "../hsp3/strnote.cpp"
   $20 = (($19) + 2|0); //@line 197 "../hsp3/strnote.cpp"
   HEAP32[$18>>2] = $20; //@line 197 "../hsp3/strnote.cpp"
  }
 }
 $21 = $2; //@line 200 "../hsp3/strnote.cpp"
 $nstr = $21; //@line 200 "../hsp3/strnote.cpp"
 $22 = $nstr; //@line 201 "../hsp3/strnote.cpp"
 $23 = ($22|0)==(0|0); //@line 201 "../hsp3/strnote.cpp"
 if ($23) {
  $nstr = 4072; //@line 201 "../hsp3/strnote.cpp"
 }
 $24 = $nstr; //@line 203 "../hsp3/strnote.cpp"
 $pp = $24; //@line 203 "../hsp3/strnote.cpp"
 $25 = $2; //@line 204 "../hsp3/strnote.cpp"
 $26 = ($25|0)!=(0|0); //@line 204 "../hsp3/strnote.cpp"
 if ($26) {
  $27 = $nstr; //@line 204 "../hsp3/strnote.cpp"
  (_strcat(($27|0),(4064|0))|0); //@line 204 "../hsp3/strnote.cpp"
 }
 $28 = $nstr; //@line 205 "../hsp3/strnote.cpp"
 $29 = (_strlen(($28|0))|0); //@line 205 "../hsp3/strnote.cpp"
 $ln = $29; //@line 205 "../hsp3/strnote.cpp"
 $30 = HEAP32[$5>>2]|0; //@line 206 "../hsp3/strnote.cpp"
 $31 = (_strlen(($30|0))|0); //@line 206 "../hsp3/strnote.cpp"
 $la = $31; //@line 206 "../hsp3/strnote.cpp"
 $32 = $la; //@line 207 "../hsp3/strnote.cpp"
 $33 = (($5) + 8|0); //@line 207 "../hsp3/strnote.cpp"
 $34 = HEAP32[$33>>2]|0; //@line 207 "../hsp3/strnote.cpp"
 $35 = HEAP32[$5>>2]|0; //@line 207 "../hsp3/strnote.cpp"
 $36 = $34; //@line 207 "../hsp3/strnote.cpp"
 $37 = $35; //@line 207 "../hsp3/strnote.cpp"
 $38 = (($36) - ($37))|0; //@line 207 "../hsp3/strnote.cpp"
 $39 = (($32) - ($38))|0; //@line 207 "../hsp3/strnote.cpp"
 $40 = (($39) + 1)|0; //@line 207 "../hsp3/strnote.cpp"
 $lw = $40; //@line 207 "../hsp3/strnote.cpp"
 $41 = $4; //@line 209 "../hsp3/strnote.cpp"
 $42 = ($41|0)!=(0); //@line 209 "../hsp3/strnote.cpp"
 if ($42) {
  $43 = (($5) + 8|0); //@line 210 "../hsp3/strnote.cpp"
  $44 = HEAP32[$43>>2]|0; //@line 210 "../hsp3/strnote.cpp"
  $p1 = $44; //@line 210 "../hsp3/strnote.cpp"
  $a = 0; //@line 210 "../hsp3/strnote.cpp"
  while(1) {
   $45 = $p1; //@line 212 "../hsp3/strnote.cpp"
   $46 = (($45) + 1|0); //@line 212 "../hsp3/strnote.cpp"
   $p1 = $46; //@line 212 "../hsp3/strnote.cpp"
   $47 = HEAP8[$45>>0]|0; //@line 212 "../hsp3/strnote.cpp"
   $a1 = $47; //@line 212 "../hsp3/strnote.cpp"
   $48 = $a1; //@line 212 "../hsp3/strnote.cpp"
   $49 = $48 << 24 >> 24; //@line 212 "../hsp3/strnote.cpp"
   $50 = ($49|0)==(0); //@line 212 "../hsp3/strnote.cpp"
   if ($50) {
    label = 14;
    break;
   }
   $51 = $a; //@line 213 "../hsp3/strnote.cpp"
   $52 = (($51) + 1)|0; //@line 213 "../hsp3/strnote.cpp"
   $a = $52; //@line 213 "../hsp3/strnote.cpp"
   $53 = $a1; //@line 215 "../hsp3/strnote.cpp"
   $54 = $53 << 24 >> 24; //@line 215 "../hsp3/strnote.cpp"
   $55 = ($54|0)==(13); //@line 215 "../hsp3/strnote.cpp"
   if ($55) {
    label = 17;
    break;
   }
   $56 = $a1; //@line 215 "../hsp3/strnote.cpp"
   $57 = $56 << 24 >> 24; //@line 215 "../hsp3/strnote.cpp"
   $58 = ($57|0)==(10); //@line 215 "../hsp3/strnote.cpp"
   if ($58) {
    label = 17;
    break;
   }
  }
  if ((label|0) == 14) {
  }
  else if ((label|0) == 17) {
  }
  $59 = $ln; //@line 223 "../hsp3/strnote.cpp"
  $60 = $a; //@line 223 "../hsp3/strnote.cpp"
  $61 = (($59) - ($60))|0; //@line 223 "../hsp3/strnote.cpp"
  $ln = $61; //@line 223 "../hsp3/strnote.cpp"
  $62 = $lw; //@line 224 "../hsp3/strnote.cpp"
  $63 = $a; //@line 224 "../hsp3/strnote.cpp"
  $64 = (($62) - ($63))|0; //@line 224 "../hsp3/strnote.cpp"
  $lw = $64; //@line 224 "../hsp3/strnote.cpp"
  $65 = $lw; //@line 224 "../hsp3/strnote.cpp"
  $66 = ($65|0)<(1); //@line 224 "../hsp3/strnote.cpp"
  if ($66) {
   $lw = 1; //@line 224 "../hsp3/strnote.cpp"
  }
 }
 $67 = $ln; //@line 227 "../hsp3/strnote.cpp"
 $68 = ($67|0)>=(0); //@line 227 "../hsp3/strnote.cpp"
 if ($68) {
  $69 = HEAP32[$5>>2]|0; //@line 228 "../hsp3/strnote.cpp"
  $70 = $la; //@line 228 "../hsp3/strnote.cpp"
  $71 = (($69) + ($70)|0); //@line 228 "../hsp3/strnote.cpp"
  $72 = $ln; //@line 228 "../hsp3/strnote.cpp"
  $73 = (($71) + ($72)|0); //@line 228 "../hsp3/strnote.cpp"
  $p1 = $73; //@line 228 "../hsp3/strnote.cpp"
  $74 = HEAP32[$5>>2]|0; //@line 228 "../hsp3/strnote.cpp"
  $75 = $la; //@line 228 "../hsp3/strnote.cpp"
  $76 = (($74) + ($75)|0); //@line 228 "../hsp3/strnote.cpp"
  $p2 = $76; //@line 228 "../hsp3/strnote.cpp"
  $a = 0; //@line 229 "../hsp3/strnote.cpp"
  while(1) {
   $77 = $a; //@line 229 "../hsp3/strnote.cpp"
   $78 = $lw; //@line 229 "../hsp3/strnote.cpp"
   $79 = ($77|0)<($78|0); //@line 229 "../hsp3/strnote.cpp"
   if (!($79)) {
    break;
   }
   $80 = $p2; //@line 229 "../hsp3/strnote.cpp"
   $81 = (($80) + -1|0); //@line 229 "../hsp3/strnote.cpp"
   $p2 = $81; //@line 229 "../hsp3/strnote.cpp"
   $82 = HEAP8[$80>>0]|0; //@line 229 "../hsp3/strnote.cpp"
   $83 = $p1; //@line 229 "../hsp3/strnote.cpp"
   $84 = (($83) + -1|0); //@line 229 "../hsp3/strnote.cpp"
   $p1 = $84; //@line 229 "../hsp3/strnote.cpp"
   HEAP8[$83>>0] = $82; //@line 229 "../hsp3/strnote.cpp"
   $85 = $a; //@line 229 "../hsp3/strnote.cpp"
   $86 = (($85) + 1)|0; //@line 229 "../hsp3/strnote.cpp"
   $a = $86; //@line 229 "../hsp3/strnote.cpp"
  }
 } else {
  $87 = (($5) + 8|0); //@line 232 "../hsp3/strnote.cpp"
  $88 = HEAP32[$87>>2]|0; //@line 232 "../hsp3/strnote.cpp"
  $89 = $a; //@line 232 "../hsp3/strnote.cpp"
  $90 = (($88) + ($89)|0); //@line 232 "../hsp3/strnote.cpp"
  $91 = $ln; //@line 232 "../hsp3/strnote.cpp"
  $92 = (($90) + ($91)|0); //@line 232 "../hsp3/strnote.cpp"
  $p1 = $92; //@line 232 "../hsp3/strnote.cpp"
  $93 = (($5) + 8|0); //@line 232 "../hsp3/strnote.cpp"
  $94 = HEAP32[$93>>2]|0; //@line 232 "../hsp3/strnote.cpp"
  $95 = $a; //@line 232 "../hsp3/strnote.cpp"
  $96 = (($94) + ($95)|0); //@line 232 "../hsp3/strnote.cpp"
  $p2 = $96; //@line 232 "../hsp3/strnote.cpp"
  $a = 0; //@line 233 "../hsp3/strnote.cpp"
  while(1) {
   $97 = $a; //@line 233 "../hsp3/strnote.cpp"
   $98 = $lw; //@line 233 "../hsp3/strnote.cpp"
   $99 = ($97|0)<($98|0); //@line 233 "../hsp3/strnote.cpp"
   if (!($99)) {
    break;
   }
   $100 = $p2; //@line 233 "../hsp3/strnote.cpp"
   $101 = (($100) + 1|0); //@line 233 "../hsp3/strnote.cpp"
   $p2 = $101; //@line 233 "../hsp3/strnote.cpp"
   $102 = HEAP8[$100>>0]|0; //@line 233 "../hsp3/strnote.cpp"
   $103 = $p1; //@line 233 "../hsp3/strnote.cpp"
   $104 = (($103) + 1|0); //@line 233 "../hsp3/strnote.cpp"
   $p1 = $104; //@line 233 "../hsp3/strnote.cpp"
   HEAP8[$103>>0] = $102; //@line 233 "../hsp3/strnote.cpp"
   $105 = $a; //@line 233 "../hsp3/strnote.cpp"
   $106 = (($105) + 1)|0; //@line 233 "../hsp3/strnote.cpp"
   $a = $106; //@line 233 "../hsp3/strnote.cpp"
  }
 }
 while(1) {
  $107 = $pp; //@line 237 "../hsp3/strnote.cpp"
  $108 = (($107) + 1|0); //@line 237 "../hsp3/strnote.cpp"
  $pp = $108; //@line 237 "../hsp3/strnote.cpp"
  $109 = HEAP8[$107>>0]|0; //@line 237 "../hsp3/strnote.cpp"
  $a1 = $109; //@line 237 "../hsp3/strnote.cpp"
  $110 = $a1; //@line 237 "../hsp3/strnote.cpp"
  $111 = $110 << 24 >> 24; //@line 237 "../hsp3/strnote.cpp"
  $112 = ($111|0)==(0); //@line 237 "../hsp3/strnote.cpp"
  if ($112) {
   break;
  }
  $113 = $a1; //@line 238 "../hsp3/strnote.cpp"
  $114 = (($5) + 8|0); //@line 238 "../hsp3/strnote.cpp"
  $115 = HEAP32[$114>>2]|0; //@line 238 "../hsp3/strnote.cpp"
  $116 = (($115) + 1|0); //@line 238 "../hsp3/strnote.cpp"
  HEAP32[$114>>2] = $116; //@line 238 "../hsp3/strnote.cpp"
  HEAP8[$115>>0] = $113; //@line 238 "../hsp3/strnote.cpp"
 }
 $0 = 0; //@line 240 "../hsp3/strnote.cpp"
 $117 = $0; //@line 240 "../hsp3/strnote.cpp"
 STACKTOP = sp;return ($117|0); //@line 240 "../hsp3/strnote.cpp"
}
function _SetSysReq($reqid,$val) {
 $reqid = $reqid|0;
 $val = $val|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $reqid;
 $1 = $val;
 $2 = $0; //@line 19 "sysreq.cpp"
 $3 = ($2|0)<(0); //@line 19 "sysreq.cpp"
 if (!($3)) {
  $4 = $0; //@line 19 "sysreq.cpp"
  $5 = ($4|0)>=(47); //@line 19 "sysreq.cpp"
  if (!($5)) {
   $6 = $1; //@line 20 "sysreq.cpp"
   $7 = $0; //@line 20 "sysreq.cpp"
   $8 = (4080 + ($7<<2)|0); //@line 20 "sysreq.cpp"
   HEAP32[$8>>2] = $6; //@line 20 "sysreq.cpp"
   $9 = $1; //@line 21 "sysreq.cpp"
   $10 = (+($9|0)); //@line 21 "sysreq.cpp"
   $11 = $0; //@line 21 "sysreq.cpp"
   $12 = (4272 + ($11<<2)|0); //@line 21 "sysreq.cpp"
   HEAPF32[$12>>2] = $10; //@line 21 "sysreq.cpp"
   STACKTOP = sp;return; //@line 21 "sysreq.cpp"
  }
 }
 STACKTOP = sp;return; //@line 21 "sysreq.cpp"
}
function _GetSysReq($reqid) {
 $reqid = $reqid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $reqid;
 $2 = $1; //@line 27 "sysreq.cpp"
 if ((($2|0) == 34)) {
  $3 = (_hgio_gettick()|0); //@line 29 "sysreq.cpp"
  $0 = $3; //@line 29 "sysreq.cpp"
 } else {
  $4 = $1; //@line 33 "sysreq.cpp"
  $5 = (4080 + ($4<<2)|0); //@line 33 "sysreq.cpp"
  $6 = HEAP32[$5>>2]|0; //@line 33 "sysreq.cpp"
  $0 = $6; //@line 33 "sysreq.cpp"
 }
 $7 = $0; //@line 34 "sysreq.cpp"
 STACKTOP = sp;return ($7|0); //@line 34 "sysreq.cpp"
}
function _InitSysReq() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $i = 0; //@line 68 "sysreq.cpp"
 while(1) {
  $0 = $i; //@line 68 "sysreq.cpp"
  $1 = ($0|0)<(47); //@line 68 "sysreq.cpp"
  if (!($1)) {
   break;
  }
  $2 = $i; //@line 69 "sysreq.cpp"
  $3 = (4080 + ($2<<2)|0); //@line 69 "sysreq.cpp"
  HEAP32[$3>>2] = 0; //@line 69 "sysreq.cpp"
  $4 = $i; //@line 70 "sysreq.cpp"
  $5 = (4272 + ($4<<2)|0); //@line 70 "sysreq.cpp"
  HEAPF32[$5>>2] = 0.0; //@line 70 "sysreq.cpp"
  $6 = $i; //@line 68 "sysreq.cpp"
  $7 = (($6) + 1)|0; //@line 68 "sysreq.cpp"
  $i = $7; //@line 68 "sysreq.cpp"
 }
 HEAP32[((4080 + 4|0))>>2] = 128; //@line 72 "sysreq.cpp"
 HEAP32[((4080 + 8|0))>>2] = 1024; //@line 73 "sysreq.cpp"
 HEAP32[((4080 + 12|0))>>2] = 128; //@line 74 "sysreq.cpp"
 HEAP32[((4080 + 16|0))>>2] = 4096; //@line 75 "sysreq.cpp"
 HEAP32[((4080 + 48|0))>>2] = 1048576; //@line 76 "sysreq.cpp"
 HEAP32[((4080 + 52|0))>>2] = 256; //@line 77 "sysreq.cpp"
 HEAP32[((4080 + 64|0))>>2] = 16; //@line 78 "sysreq.cpp"
 HEAP32[((4080 + 104|0))>>2] = 16; //@line 79 "sysreq.cpp"
 HEAP32[((4080 + 112|0))>>2] = 1024; //@line 80 "sysreq.cpp"
 HEAP32[((4080 + 72|0))>>2] = 1; //@line 82 "sysreq.cpp"
 HEAP32[((4080 + 116|0))>>2] = 1; //@line 83 "sysreq.cpp"
 HEAP32[((4080 + 76|0))>>2] = 2; //@line 84 "sysreq.cpp"
 HEAP32[((4080 + 152|0))>>2] = 128; //@line 86 "sysreq.cpp"
 _SetSysReq(46,64); //@line 88 "sysreq.cpp"
 HEAP32[((4080 + 140|0))>>2] = 3; //@line 97 "sysreq.cpp"
 HEAP8[4464>>0] = 0; //@line 100 "sysreq.cpp"
 STACKTOP = sp;return; //@line 101 "sysreq.cpp"
}
function _GetTex($id) {
 $id = $id|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $id;
 $1 = $0; //@line 76 "emscripten/hgtex.cpp"
 $2 = (4976 + (($1*72)|0)|0); //@line 76 "emscripten/hgtex.cpp"
 STACKTOP = sp;return ($2|0); //@line 76 "emscripten/hgtex.cpp"
}
function _DeleteTexInf($t) {
 $t = $t|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $t;
 $1 = $0; //@line 84 "emscripten/hgtex.cpp"
 $2 = HEAP16[$1>>1]|0; //@line 84 "emscripten/hgtex.cpp"
 $3 = $2 << 16 >> 16; //@line 84 "emscripten/hgtex.cpp"
 $4 = ($3|0)==(0); //@line 84 "emscripten/hgtex.cpp"
 if ($4) {
  STACKTOP = sp;return; //@line 91 "emscripten/hgtex.cpp"
 }
 $5 = $0; //@line 85 "emscripten/hgtex.cpp"
 $6 = (($5) + 12|0); //@line 85 "emscripten/hgtex.cpp"
 _glDeleteTextures(1,($6|0)); //@line 85 "emscripten/hgtex.cpp"
 $7 = $0; //@line 86 "emscripten/hgtex.cpp"
 $8 = (($7) + 28|0); //@line 86 "emscripten/hgtex.cpp"
 $9 = HEAP32[$8>>2]|0; //@line 86 "emscripten/hgtex.cpp"
 $10 = ($9|0)!=(0|0); //@line 86 "emscripten/hgtex.cpp"
 if ($10) {
  $11 = $0; //@line 87 "emscripten/hgtex.cpp"
  $12 = (($11) + 28|0); //@line 87 "emscripten/hgtex.cpp"
  $13 = HEAP32[$12>>2]|0; //@line 87 "emscripten/hgtex.cpp"
  _free($13); //@line 87 "emscripten/hgtex.cpp"
  $14 = $0; //@line 88 "emscripten/hgtex.cpp"
  $15 = (($14) + 28|0); //@line 88 "emscripten/hgtex.cpp"
  HEAP32[$15>>2] = 0; //@line 88 "emscripten/hgtex.cpp"
 }
 $16 = $0; //@line 91 "emscripten/hgtex.cpp"
 HEAP16[$16>>1] = 0; //@line 91 "emscripten/hgtex.cpp"
 STACKTOP = sp;return; //@line 91 "emscripten/hgtex.cpp"
}
function _DeleteTex($id) {
 $id = $id|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $id;
 $1 = $0; //@line 99 "emscripten/hgtex.cpp"
 $2 = (_GetTex($1)|0); //@line 99 "emscripten/hgtex.cpp"
 _DeleteTexInf($2); //@line 99 "emscripten/hgtex.cpp"
 STACKTOP = sp;return; //@line 100 "emscripten/hgtex.cpp"
}
function _TexReset() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[23408>>2] = -1; //@line 107 "emscripten/hgtex.cpp"
 STACKTOP = sp;return; //@line 108 "emscripten/hgtex.cpp"
}
function _TexInit() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $i = 0; //@line 116 "emscripten/hgtex.cpp"
 while(1) {
  $0 = $i; //@line 116 "emscripten/hgtex.cpp"
  $1 = ($0|0)<(256); //@line 116 "emscripten/hgtex.cpp"
  if (!($1)) {
   break;
  }
  $2 = $i; //@line 117 "emscripten/hgtex.cpp"
  $3 = (4976 + (($2*72)|0)|0); //@line 117 "emscripten/hgtex.cpp"
  HEAP16[$3>>1] = 0; //@line 117 "emscripten/hgtex.cpp"
  $4 = $i; //@line 116 "emscripten/hgtex.cpp"
  $5 = (($4) + 1)|0; //@line 116 "emscripten/hgtex.cpp"
  $i = $5; //@line 116 "emscripten/hgtex.cpp"
 }
 HEAP32[23416>>2] = 0; //@line 119 "emscripten/hgtex.cpp"
 _TexReset(); //@line 120 "emscripten/hgtex.cpp"
 STACKTOP = sp;return; //@line 121 "emscripten/hgtex.cpp"
}
function _ChangeTex($id) {
 $id = $id|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $id;
 $1 = $0; //@line 139 "emscripten/hgtex.cpp"
 $2 = ($1|0)<(0); //@line 139 "emscripten/hgtex.cpp"
 if ($2) {
  HEAP32[23408>>2] = -1; //@line 140 "emscripten/hgtex.cpp"
  _glBindTexture(3553,0); //@line 141 "emscripten/hgtex.cpp"
  _glDisable(3553); //@line 143 "emscripten/hgtex.cpp"
  STACKTOP = sp;return; //@line 150 "emscripten/hgtex.cpp"
 } else {
  $3 = $0; //@line 147 "emscripten/hgtex.cpp"
  HEAP32[23408>>2] = $3; //@line 147 "emscripten/hgtex.cpp"
  $4 = $0; //@line 148 "emscripten/hgtex.cpp"
  _glBindTexture(3553,($4|0)); //@line 148 "emscripten/hgtex.cpp"
  _glEnable(3553); //@line 150 "emscripten/hgtex.cpp"
  STACKTOP = sp;return; //@line 150 "emscripten/hgtex.cpp"
 }
}
function _RegistTexMem($ptr,$size) {
 $ptr = $ptr|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $comp = 0, $id = 0, $p = 0, $p2 = 0, $pImg = 0, $pImg2 = 0, $sx = 0, $sy = 0, $texid = 0, $tsx = 0, $tsy = 0, $vararg_buffer = 0, $vararg_buffer5 = 0, $vararg_ptr1 = 0;
 var $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer = sp;
 $id = sp + 68|0;
 $tsx = sp + 60|0;
 $tsy = sp + 84|0;
 $comp = sp + 40|0;
 $1 = $ptr;
 $2 = $size;
 $3 = $1; //@line 220 "emscripten/hgtex.cpp"
 $4 = $2; //@line 220 "emscripten/hgtex.cpp"
 $5 = (_stbi_load_from_memory($3,$4,$tsx,$tsy,$comp,4)|0); //@line 220 "emscripten/hgtex.cpp"
 $pImg = $5; //@line 220 "emscripten/hgtex.cpp"
 HEAP32[$id>>2] = -1; //@line 222 "emscripten/hgtex.cpp"
 $6 = $pImg; //@line 223 "emscripten/hgtex.cpp"
 $7 = ($6|0)!=(0|0); //@line 223 "emscripten/hgtex.cpp"
 if (!($7)) {
  __Z6AlertfPKcz(23448,$vararg_buffer5); //@line 261 "emscripten/hgtex.cpp"
  $0 = -1; //@line 262 "emscripten/hgtex.cpp"
  $65 = $0; //@line 263 "emscripten/hgtex.cpp"
  STACKTOP = sp;return ($65|0); //@line 263 "emscripten/hgtex.cpp"
 }
 $8 = HEAP32[$tsx>>2]|0; //@line 224 "emscripten/hgtex.cpp"
 $9 = (__ZL5Get2Ni($8)|0); //@line 224 "emscripten/hgtex.cpp"
 $sx = $9; //@line 224 "emscripten/hgtex.cpp"
 $10 = HEAP32[$tsy>>2]|0; //@line 225 "emscripten/hgtex.cpp"
 $11 = (__ZL5Get2Ni($10)|0); //@line 225 "emscripten/hgtex.cpp"
 $sy = $11; //@line 225 "emscripten/hgtex.cpp"
 $12 = $sx; //@line 226 "emscripten/hgtex.cpp"
 $13 = HEAP32[$tsx>>2]|0; //@line 226 "emscripten/hgtex.cpp"
 $14 = ($12|0)!=($13|0); //@line 226 "emscripten/hgtex.cpp"
 if ($14) {
  label = 4;
 } else {
  $15 = $sy; //@line 226 "emscripten/hgtex.cpp"
  $16 = HEAP32[$tsy>>2]|0; //@line 226 "emscripten/hgtex.cpp"
  $17 = ($15|0)!=($16|0); //@line 226 "emscripten/hgtex.cpp"
  if ($17) {
   label = 4;
  }
 }
 if ((label|0) == 4) {
  $18 = $sx; //@line 231 "emscripten/hgtex.cpp"
  $19 = $sy; //@line 231 "emscripten/hgtex.cpp"
  $20 = Math_imul($18, $19)|0; //@line 231 "emscripten/hgtex.cpp"
  $21 = $20<<2; //@line 231 "emscripten/hgtex.cpp"
  $22 = (__Z7mem_inii($21)|0); //@line 231 "emscripten/hgtex.cpp"
  $pImg2 = $22; //@line 231 "emscripten/hgtex.cpp"
  $23 = $pImg; //@line 232 "emscripten/hgtex.cpp"
  $p = $23; //@line 232 "emscripten/hgtex.cpp"
  $24 = $pImg2; //@line 233 "emscripten/hgtex.cpp"
  $p2 = $24; //@line 233 "emscripten/hgtex.cpp"
  $y = 0; //@line 234 "emscripten/hgtex.cpp"
  while(1) {
   $25 = $y; //@line 234 "emscripten/hgtex.cpp"
   $26 = HEAP32[$tsy>>2]|0; //@line 234 "emscripten/hgtex.cpp"
   $27 = ($25|0)<($26|0); //@line 234 "emscripten/hgtex.cpp"
   if (!($27)) {
    break;
   }
   $28 = $p2; //@line 245 "emscripten/hgtex.cpp"
   $29 = $p; //@line 245 "emscripten/hgtex.cpp"
   $30 = HEAP32[$tsx>>2]|0; //@line 245 "emscripten/hgtex.cpp"
   $31 = $30<<2; //@line 245 "emscripten/hgtex.cpp"
   _memcpy(($28|0),($29|0),($31|0))|0; //@line 245 "emscripten/hgtex.cpp"
   $32 = HEAP32[$tsx>>2]|0; //@line 246 "emscripten/hgtex.cpp"
   $33 = $32<<2; //@line 246 "emscripten/hgtex.cpp"
   $34 = $p; //@line 246 "emscripten/hgtex.cpp"
   $35 = (($34) + ($33)|0); //@line 246 "emscripten/hgtex.cpp"
   $p = $35; //@line 246 "emscripten/hgtex.cpp"
   $36 = $sx; //@line 247 "emscripten/hgtex.cpp"
   $37 = $36<<2; //@line 247 "emscripten/hgtex.cpp"
   $38 = $p2; //@line 247 "emscripten/hgtex.cpp"
   $39 = (($38) + ($37)|0); //@line 247 "emscripten/hgtex.cpp"
   $p2 = $39; //@line 247 "emscripten/hgtex.cpp"
   $40 = $y; //@line 234 "emscripten/hgtex.cpp"
   $41 = (($40) + 1)|0; //@line 234 "emscripten/hgtex.cpp"
   $y = $41; //@line 234 "emscripten/hgtex.cpp"
  }
  $42 = $pImg; //@line 250 "emscripten/hgtex.cpp"
  __Z7mem_byePv($42); //@line 250 "emscripten/hgtex.cpp"
  $43 = $pImg2; //@line 251 "emscripten/hgtex.cpp"
  $pImg = $43; //@line 251 "emscripten/hgtex.cpp"
 }
 _glGenTextures(1,($id|0)); //@line 253 "emscripten/hgtex.cpp"
 $44 = HEAP32[$id>>2]|0; //@line 254 "emscripten/hgtex.cpp"
 _glBindTexture(3553,($44|0)); //@line 254 "emscripten/hgtex.cpp"
 $45 = $sx; //@line 255 "emscripten/hgtex.cpp"
 $46 = $sy; //@line 255 "emscripten/hgtex.cpp"
 $47 = $pImg; //@line 255 "emscripten/hgtex.cpp"
 _glTexImage2D(3553,0,6408,($45|0),($46|0),0,6408,5121,($47|0)); //@line 255 "emscripten/hgtex.cpp"
 $48 = $pImg; //@line 256 "emscripten/hgtex.cpp"
 __Z7mem_byePv($48); //@line 256 "emscripten/hgtex.cpp"
 $49 = $sx; //@line 257 "emscripten/hgtex.cpp"
 $50 = $49&65535; //@line 257 "emscripten/hgtex.cpp"
 $51 = $sy; //@line 257 "emscripten/hgtex.cpp"
 $52 = $51&65535; //@line 257 "emscripten/hgtex.cpp"
 $53 = HEAP32[$tsx>>2]|0; //@line 257 "emscripten/hgtex.cpp"
 $54 = $53&65535; //@line 257 "emscripten/hgtex.cpp"
 $55 = HEAP32[$tsy>>2]|0; //@line 257 "emscripten/hgtex.cpp"
 $56 = $55&65535; //@line 257 "emscripten/hgtex.cpp"
 $57 = HEAP32[$id>>2]|0; //@line 257 "emscripten/hgtex.cpp"
 $58 = (__ZL6SetTexissssssj(-1,1,0,$50,$52,$54,$56,$57)|0); //@line 257 "emscripten/hgtex.cpp"
 $texid = $58; //@line 257 "emscripten/hgtex.cpp"
 $59 = $texid; //@line 258 "emscripten/hgtex.cpp"
 $60 = $sx; //@line 258 "emscripten/hgtex.cpp"
 $61 = $sy; //@line 258 "emscripten/hgtex.cpp"
 $62 = HEAP32[$tsx>>2]|0; //@line 258 "emscripten/hgtex.cpp"
 $63 = HEAP32[$tsy>>2]|0; //@line 258 "emscripten/hgtex.cpp"
 HEAP32[$vararg_buffer>>2] = $59; //@line 258 "emscripten/hgtex.cpp"
 $vararg_ptr1 = (($vararg_buffer) + 4|0); //@line 258 "emscripten/hgtex.cpp"
 HEAP32[$vararg_ptr1>>2] = $60; //@line 258 "emscripten/hgtex.cpp"
 $vararg_ptr2 = (($vararg_buffer) + 8|0); //@line 258 "emscripten/hgtex.cpp"
 HEAP32[$vararg_ptr2>>2] = $61; //@line 258 "emscripten/hgtex.cpp"
 $vararg_ptr3 = (($vararg_buffer) + 12|0); //@line 258 "emscripten/hgtex.cpp"
 HEAP32[$vararg_ptr3>>2] = $62; //@line 258 "emscripten/hgtex.cpp"
 $vararg_ptr4 = (($vararg_buffer) + 16|0); //@line 258 "emscripten/hgtex.cpp"
 HEAP32[$vararg_ptr4>>2] = $63; //@line 258 "emscripten/hgtex.cpp"
 __Z6AlertfPKcz(23424,$vararg_buffer); //@line 258 "emscripten/hgtex.cpp"
 $64 = $texid; //@line 259 "emscripten/hgtex.cpp"
 $0 = $64; //@line 259 "emscripten/hgtex.cpp"
 $65 = $0; //@line 263 "emscripten/hgtex.cpp"
 STACKTOP = sp;return ($65|0); //@line 263 "emscripten/hgtex.cpp"
}
function __ZL5Get2Ni($val) {
 $val = $val|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $res = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $val;
 $res = 1; //@line 200 "emscripten/hgtex.cpp"
 while(1) {
  $1 = $res; //@line 202 "emscripten/hgtex.cpp"
  $2 = $0; //@line 202 "emscripten/hgtex.cpp"
  $3 = ($1|0)>=($2|0); //@line 202 "emscripten/hgtex.cpp"
  if ($3) {
   break;
  }
  $4 = $res; //@line 203 "emscripten/hgtex.cpp"
  $5 = $4 << 1; //@line 203 "emscripten/hgtex.cpp"
  $res = $5; //@line 203 "emscripten/hgtex.cpp"
 }
 $6 = $res; //@line 205 "emscripten/hgtex.cpp"
 STACKTOP = sp;return ($6|0); //@line 205 "emscripten/hgtex.cpp"
}
function __ZL6SetTexissssssj($sel,$mode,$opt,$sx,$sy,$width,$height,$texid) {
 $sel = $sel|0;
 $mode = $mode|0;
 $opt = $opt|0;
 $sx = $sx|0;
 $sy = $sy|0;
 $width = $width|0;
 $height = $height|0;
 $texid = $texid|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0.0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $myid = 0, $t = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = $sel;
 $2 = $mode;
 $3 = $opt;
 $4 = $sx;
 $5 = $sy;
 $6 = $width;
 $7 = $height;
 $8 = $texid;
 $9 = $1; //@line 174 "emscripten/hgtex.cpp"
 $myid = $9; //@line 174 "emscripten/hgtex.cpp"
 $10 = $1; //@line 175 "emscripten/hgtex.cpp"
 $11 = ($10|0)>=(0); //@line 175 "emscripten/hgtex.cpp"
 do {
  if ($11) {
   $12 = $1; //@line 176 "emscripten/hgtex.cpp"
   $13 = (_GetTex($12)|0); //@line 176 "emscripten/hgtex.cpp"
   $t = $13; //@line 176 "emscripten/hgtex.cpp"
  } else {
   $14 = (__ZL10GetNextTexv()|0); //@line 178 "emscripten/hgtex.cpp"
   $myid = $14; //@line 178 "emscripten/hgtex.cpp"
   $15 = $myid; //@line 179 "emscripten/hgtex.cpp"
   $16 = ($15|0)<(0); //@line 179 "emscripten/hgtex.cpp"
   if (!($16)) {
    $18 = $myid; //@line 180 "emscripten/hgtex.cpp"
    $19 = (_GetTex($18)|0); //@line 180 "emscripten/hgtex.cpp"
    $t = $19; //@line 180 "emscripten/hgtex.cpp"
    break;
   }
   $17 = $myid; //@line 179 "emscripten/hgtex.cpp"
   $0 = $17; //@line 179 "emscripten/hgtex.cpp"
   $57 = $0; //@line 195 "emscripten/hgtex.cpp"
   STACKTOP = sp;return ($57|0); //@line 195 "emscripten/hgtex.cpp"
  }
 } while(0);
 $20 = $2; //@line 182 "emscripten/hgtex.cpp"
 $21 = $t; //@line 182 "emscripten/hgtex.cpp"
 HEAP16[$21>>1] = $20; //@line 182 "emscripten/hgtex.cpp"
 $22 = $3; //@line 183 "emscripten/hgtex.cpp"
 $23 = $t; //@line 183 "emscripten/hgtex.cpp"
 $24 = (($23) + 2|0); //@line 183 "emscripten/hgtex.cpp"
 HEAP16[$24>>1] = $22; //@line 183 "emscripten/hgtex.cpp"
 $25 = $4; //@line 184 "emscripten/hgtex.cpp"
 $26 = $t; //@line 184 "emscripten/hgtex.cpp"
 $27 = (($26) + 4|0); //@line 184 "emscripten/hgtex.cpp"
 HEAP16[$27>>1] = $25; //@line 184 "emscripten/hgtex.cpp"
 $28 = $5; //@line 185 "emscripten/hgtex.cpp"
 $29 = $t; //@line 185 "emscripten/hgtex.cpp"
 $30 = (($29) + 6|0); //@line 185 "emscripten/hgtex.cpp"
 HEAP16[$30>>1] = $28; //@line 185 "emscripten/hgtex.cpp"
 $31 = $6; //@line 186 "emscripten/hgtex.cpp"
 $32 = $t; //@line 186 "emscripten/hgtex.cpp"
 $33 = (($32) + 8|0); //@line 186 "emscripten/hgtex.cpp"
 HEAP16[$33>>1] = $31; //@line 186 "emscripten/hgtex.cpp"
 $34 = $7; //@line 187 "emscripten/hgtex.cpp"
 $35 = $t; //@line 187 "emscripten/hgtex.cpp"
 $36 = (($35) + 10|0); //@line 187 "emscripten/hgtex.cpp"
 HEAP16[$36>>1] = $34; //@line 187 "emscripten/hgtex.cpp"
 $37 = $4; //@line 188 "emscripten/hgtex.cpp"
 $38 = (+($37<<16>>16)); //@line 188 "emscripten/hgtex.cpp"
 $39 = 1.0 / $38; //@line 188 "emscripten/hgtex.cpp"
 $40 = $t; //@line 188 "emscripten/hgtex.cpp"
 $41 = (($40) + 16|0); //@line 188 "emscripten/hgtex.cpp"
 HEAPF32[$41>>2] = $39; //@line 188 "emscripten/hgtex.cpp"
 $42 = $5; //@line 189 "emscripten/hgtex.cpp"
 $43 = (+($42<<16>>16)); //@line 189 "emscripten/hgtex.cpp"
 $44 = 1.0 / $43; //@line 189 "emscripten/hgtex.cpp"
 $45 = $t; //@line 189 "emscripten/hgtex.cpp"
 $46 = (($45) + 20|0); //@line 189 "emscripten/hgtex.cpp"
 HEAPF32[$46>>2] = $44; //@line 189 "emscripten/hgtex.cpp"
 $47 = $8; //@line 190 "emscripten/hgtex.cpp"
 $48 = $t; //@line 190 "emscripten/hgtex.cpp"
 $49 = (($48) + 12|0); //@line 190 "emscripten/hgtex.cpp"
 HEAP32[$49>>2] = $47; //@line 190 "emscripten/hgtex.cpp"
 $50 = $t; //@line 191 "emscripten/hgtex.cpp"
 $51 = (($50) + 24|0); //@line 191 "emscripten/hgtex.cpp"
 HEAP16[$51>>1] = 0; //@line 191 "emscripten/hgtex.cpp"
 $52 = $t; //@line 192 "emscripten/hgtex.cpp"
 $53 = (($52) + 26|0); //@line 192 "emscripten/hgtex.cpp"
 HEAP16[$53>>1] = 8; //@line 192 "emscripten/hgtex.cpp"
 $54 = $t; //@line 193 "emscripten/hgtex.cpp"
 $55 = (($54) + 28|0); //@line 193 "emscripten/hgtex.cpp"
 HEAP32[$55>>2] = 0; //@line 193 "emscripten/hgtex.cpp"
 $56 = $myid; //@line 194 "emscripten/hgtex.cpp"
 $0 = $56; //@line 194 "emscripten/hgtex.cpp"
 $57 = $0; //@line 195 "emscripten/hgtex.cpp"
 STACKTOP = sp;return ($57|0); //@line 195 "emscripten/hgtex.cpp"
}
function _RegistTex($fname) {
 $fname = $fname|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $id = 0, $len = 0, $ptr = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = $fname;
 $2 = $1; //@line 275 "emscripten/hgtex.cpp"
 $3 = (__Z9dpm_existPc($2)|0); //@line 275 "emscripten/hgtex.cpp"
 $len = $3; //@line 275 "emscripten/hgtex.cpp"
 $4 = $len; //@line 277 "emscripten/hgtex.cpp"
 $5 = ($4|0)<(0); //@line 277 "emscripten/hgtex.cpp"
 if ($5) {
  $0 = -1; //@line 277 "emscripten/hgtex.cpp"
  $16 = $0; //@line 283 "emscripten/hgtex.cpp"
  STACKTOP = sp;return ($16|0); //@line 283 "emscripten/hgtex.cpp"
 } else {
  $6 = $len; //@line 278 "emscripten/hgtex.cpp"
  $7 = (__Z7mem_inii($6)|0); //@line 278 "emscripten/hgtex.cpp"
  $ptr = $7; //@line 278 "emscripten/hgtex.cpp"
  $8 = $1; //@line 279 "emscripten/hgtex.cpp"
  $9 = $ptr; //@line 279 "emscripten/hgtex.cpp"
  $10 = $len; //@line 279 "emscripten/hgtex.cpp"
  (__Z8dpm_readPcPvii($8,$9,$10,0)|0); //@line 279 "emscripten/hgtex.cpp"
  $11 = $ptr; //@line 280 "emscripten/hgtex.cpp"
  $12 = $len; //@line 280 "emscripten/hgtex.cpp"
  $13 = (_RegistTexMem($11,$12)|0); //@line 280 "emscripten/hgtex.cpp"
  $id = $13; //@line 280 "emscripten/hgtex.cpp"
  $14 = $ptr; //@line 281 "emscripten/hgtex.cpp"
  __Z7mem_byePv($14); //@line 281 "emscripten/hgtex.cpp"
  $15 = $id; //@line 282 "emscripten/hgtex.cpp"
  $0 = $15; //@line 282 "emscripten/hgtex.cpp"
  $16 = $0; //@line 283 "emscripten/hgtex.cpp"
  STACKTOP = sp;return ($16|0); //@line 283 "emscripten/hgtex.cpp"
 }
 return 0|0;
}
function _MakeEmptyTex($width,$height) {
 $width = $width|0;
 $height = $height|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $id = 0, $sx = 0, $sy = 0, $texid = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer = sp;
 $id = sp + 16|0;
 $0 = $width;
 $1 = $height;
 $2 = $0; //@line 295 "emscripten/hgtex.cpp"
 $3 = (__ZL5Get2Ni($2)|0); //@line 295 "emscripten/hgtex.cpp"
 $sx = $3; //@line 295 "emscripten/hgtex.cpp"
 $4 = $1; //@line 296 "emscripten/hgtex.cpp"
 $5 = (__ZL5Get2Ni($4)|0); //@line 296 "emscripten/hgtex.cpp"
 $sy = $5; //@line 296 "emscripten/hgtex.cpp"
 _glGenTextures(1,($id|0)); //@line 298 "emscripten/hgtex.cpp"
 $6 = HEAP32[$id>>2]|0; //@line 299 "emscripten/hgtex.cpp"
 _glBindTexture(3553,($6|0)); //@line 299 "emscripten/hgtex.cpp"
 $7 = $sx; //@line 301 "emscripten/hgtex.cpp"
 $8 = $sy; //@line 301 "emscripten/hgtex.cpp"
 _glTexImage2D(3553,0,6406,($7|0),($8|0),0,6406,5121,(0|0)); //@line 301 "emscripten/hgtex.cpp"
 $9 = $sx; //@line 302 "emscripten/hgtex.cpp"
 $10 = $9&65535; //@line 302 "emscripten/hgtex.cpp"
 $11 = $sy; //@line 302 "emscripten/hgtex.cpp"
 $12 = $11&65535; //@line 302 "emscripten/hgtex.cpp"
 $13 = $0; //@line 302 "emscripten/hgtex.cpp"
 $14 = $13&65535; //@line 302 "emscripten/hgtex.cpp"
 $15 = $1; //@line 302 "emscripten/hgtex.cpp"
 $16 = $15&65535; //@line 302 "emscripten/hgtex.cpp"
 $17 = HEAP32[$id>>2]|0; //@line 302 "emscripten/hgtex.cpp"
 $18 = (__ZL6SetTexissssssj(-1,2,0,$10,$12,$14,$16,$17)|0); //@line 302 "emscripten/hgtex.cpp"
 $texid = $18; //@line 302 "emscripten/hgtex.cpp"
 $19 = $texid; //@line 303 "emscripten/hgtex.cpp"
 $20 = $sx; //@line 303 "emscripten/hgtex.cpp"
 $21 = $sy; //@line 303 "emscripten/hgtex.cpp"
 HEAP32[$vararg_buffer>>2] = $19; //@line 303 "emscripten/hgtex.cpp"
 $vararg_ptr1 = (($vararg_buffer) + 4|0); //@line 303 "emscripten/hgtex.cpp"
 HEAP32[$vararg_ptr1>>2] = $20; //@line 303 "emscripten/hgtex.cpp"
 $vararg_ptr2 = (($vararg_buffer) + 8|0); //@line 303 "emscripten/hgtex.cpp"
 HEAP32[$vararg_ptr2>>2] = $21; //@line 303 "emscripten/hgtex.cpp"
 __Z6AlertfPKcz(23464,$vararg_buffer); //@line 303 "emscripten/hgtex.cpp"
 $22 = $texid; //@line 304 "emscripten/hgtex.cpp"
 STACKTOP = sp;return ($22|0); //@line 304 "emscripten/hgtex.cpp"
}
function _TexProc() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $i = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $t = 4976; //@line 376 "emscripten/hgtex.cpp"
 HEAP32[23416>>2] = 0; //@line 377 "emscripten/hgtex.cpp"
 $i = 0; //@line 378 "emscripten/hgtex.cpp"
 while(1) {
  $0 = $i; //@line 378 "emscripten/hgtex.cpp"
  $1 = ($0|0)<(256); //@line 378 "emscripten/hgtex.cpp"
  if (!($1)) {
   break;
  }
  $2 = $t; //@line 379 "emscripten/hgtex.cpp"
  $3 = HEAP16[$2>>1]|0; //@line 379 "emscripten/hgtex.cpp"
  $4 = $3 << 16 >> 16; //@line 379 "emscripten/hgtex.cpp"
  $5 = ($4|0)==(2); //@line 379 "emscripten/hgtex.cpp"
  if ($5) {
   $6 = $t; //@line 380 "emscripten/hgtex.cpp"
   $7 = (($6) + 26|0); //@line 380 "emscripten/hgtex.cpp"
   $8 = HEAP16[$7>>1]|0; //@line 380 "emscripten/hgtex.cpp"
   $9 = $8 << 16 >> 16; //@line 380 "emscripten/hgtex.cpp"
   $10 = ($9|0)>(0); //@line 380 "emscripten/hgtex.cpp"
   if ($10) {
    $11 = $t; //@line 381 "emscripten/hgtex.cpp"
    $12 = (($11) + 26|0); //@line 381 "emscripten/hgtex.cpp"
    $13 = HEAP16[$12>>1]|0; //@line 381 "emscripten/hgtex.cpp"
    $14 = (($13) + -1)<<16>>16; //@line 381 "emscripten/hgtex.cpp"
    HEAP16[$12>>1] = $14; //@line 381 "emscripten/hgtex.cpp"
    $15 = HEAP32[23416>>2]|0; //@line 382 "emscripten/hgtex.cpp"
    $16 = (($15) + 1)|0; //@line 382 "emscripten/hgtex.cpp"
    HEAP32[23416>>2] = $16; //@line 382 "emscripten/hgtex.cpp"
   } else {
    $17 = $t; //@line 384 "emscripten/hgtex.cpp"
    _DeleteTexInf($17); //@line 384 "emscripten/hgtex.cpp"
   }
  }
  $18 = $t; //@line 387 "emscripten/hgtex.cpp"
  $19 = (($18) + 72|0); //@line 387 "emscripten/hgtex.cpp"
  $t = $19; //@line 387 "emscripten/hgtex.cpp"
  $20 = $i; //@line 378 "emscripten/hgtex.cpp"
  $21 = (($20) + 1)|0; //@line 378 "emscripten/hgtex.cpp"
  $i = $21; //@line 378 "emscripten/hgtex.cpp"
 }
 STACKTOP = sp;return; //@line 389 "emscripten/hgtex.cpp"
}
function _GetCacheMesTextureID($msg,$font_size,$font_style) {
 $msg = $msg|0;
 $font_size = $font_size|0;
 $font_style = $font_style|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $id = 0, $mycache = 0, $mylen = 0, $t = 0, $texid = 0, $tsx = 0, $tsy = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $mylen = sp;
 $1 = $msg;
 $2 = $font_size;
 $3 = $font_style;
 $4 = $1; //@line 478 "emscripten/hgtex.cpp"
 $5 = (__ZL8str2hashPcPi($4,$mylen)|0); //@line 478 "emscripten/hgtex.cpp"
 $mycache = $5; //@line 478 "emscripten/hgtex.cpp"
 $6 = HEAP32[$mylen>>2]|0; //@line 479 "emscripten/hgtex.cpp"
 $7 = ($6|0)<=(0); //@line 479 "emscripten/hgtex.cpp"
 if ($7) {
  $0 = -1; //@line 479 "emscripten/hgtex.cpp"
  $72 = $0; //@line 579 "emscripten/hgtex.cpp"
  STACKTOP = sp;return ($72|0); //@line 579 "emscripten/hgtex.cpp"
 }
 $8 = $1; //@line 481 "emscripten/hgtex.cpp"
 $9 = $mycache; //@line 481 "emscripten/hgtex.cpp"
 $10 = $2; //@line 481 "emscripten/hgtex.cpp"
 $11 = $3; //@line 481 "emscripten/hgtex.cpp"
 $12 = (__ZL8getCachePcsii($8,$9,$10,$11)|0); //@line 481 "emscripten/hgtex.cpp"
 $texid = $12; //@line 481 "emscripten/hgtex.cpp"
 $13 = $texid; //@line 482 "emscripten/hgtex.cpp"
 $14 = ($13|0)>=(0); //@line 482 "emscripten/hgtex.cpp"
 if ($14) {
  $15 = $texid; //@line 483 "emscripten/hgtex.cpp"
  $0 = $15; //@line 483 "emscripten/hgtex.cpp"
  $72 = $0; //@line 579 "emscripten/hgtex.cpp"
  STACKTOP = sp;return ($72|0); //@line 579 "emscripten/hgtex.cpp"
 }
 $16 = $1; //@line 486 "emscripten/hgtex.cpp"
 $17 = $2; //@line 486 "emscripten/hgtex.cpp"
 (_emscripten_asm_const_int((23488|0),($16|0),($17|0))|0); //@line 486 "emscripten/hgtex.cpp"
 $18 = (_emscripten_asm_const_int((24000|0))|0); //@line 504 "emscripten/hgtex.cpp"
 $tsx = $18; //@line 504 "emscripten/hgtex.cpp"
 $19 = (_emscripten_asm_const_int((24080|0))|0); //@line 508 "emscripten/hgtex.cpp"
 $tsy = $19; //@line 508 "emscripten/hgtex.cpp"
 $20 = $tsx; //@line 517 "emscripten/hgtex.cpp"
 $21 = $tsy; //@line 517 "emscripten/hgtex.cpp"
 $22 = (_MakeEmptyTex($20,$21)|0); //@line 517 "emscripten/hgtex.cpp"
 $texid = $22; //@line 517 "emscripten/hgtex.cpp"
 $23 = $texid; //@line 518 "emscripten/hgtex.cpp"
 $24 = ($23|0)<(0); //@line 518 "emscripten/hgtex.cpp"
 if ($24) {
  $0 = -1; //@line 518 "emscripten/hgtex.cpp"
  $72 = $0; //@line 579 "emscripten/hgtex.cpp"
  STACKTOP = sp;return ($72|0); //@line 579 "emscripten/hgtex.cpp"
 }
 $25 = $texid; //@line 520 "emscripten/hgtex.cpp"
 $26 = (_GetTex($25)|0); //@line 520 "emscripten/hgtex.cpp"
 $t = $26; //@line 520 "emscripten/hgtex.cpp"
 $27 = $mycache; //@line 521 "emscripten/hgtex.cpp"
 $28 = $t; //@line 521 "emscripten/hgtex.cpp"
 $29 = (($28) + 24|0); //@line 521 "emscripten/hgtex.cpp"
 HEAP16[$29>>1] = $27; //@line 521 "emscripten/hgtex.cpp"
 $30 = $2; //@line 522 "emscripten/hgtex.cpp"
 $31 = $t; //@line 522 "emscripten/hgtex.cpp"
 $32 = (($31) + 32|0); //@line 522 "emscripten/hgtex.cpp"
 HEAP32[$32>>2] = $30; //@line 522 "emscripten/hgtex.cpp"
 $33 = $3; //@line 523 "emscripten/hgtex.cpp"
 $34 = $t; //@line 523 "emscripten/hgtex.cpp"
 $35 = (($34) + 36|0); //@line 523 "emscripten/hgtex.cpp"
 HEAP32[$35>>2] = $33; //@line 523 "emscripten/hgtex.cpp"
 $36 = HEAP32[23416>>2]|0; //@line 525 "emscripten/hgtex.cpp"
 $37 = (_GetSysReq(46)|0); //@line 525 "emscripten/hgtex.cpp"
 $38 = ($36|0)>=($37|0); //@line 525 "emscripten/hgtex.cpp"
 if ($38) {
  $39 = $t; //@line 526 "emscripten/hgtex.cpp"
  $40 = (($39) + 26|0); //@line 526 "emscripten/hgtex.cpp"
  HEAP16[$40>>1] = 0; //@line 526 "emscripten/hgtex.cpp"
  $41 = $t; //@line 527 "emscripten/hgtex.cpp"
  $42 = (($41) + 40|0); //@line 527 "emscripten/hgtex.cpp"
  HEAP8[$42>>0] = 0; //@line 527 "emscripten/hgtex.cpp"
 } else {
  $43 = HEAP32[$mylen>>2]|0; //@line 530 "emscripten/hgtex.cpp"
  $44 = ($43|0)>=(31); //@line 530 "emscripten/hgtex.cpp"
  if ($44) {
   $45 = HEAP32[$mylen>>2]|0; //@line 531 "emscripten/hgtex.cpp"
   $46 = (($45) + 1)|0; //@line 531 "emscripten/hgtex.cpp"
   $47 = (_malloc($46)|0); //@line 531 "emscripten/hgtex.cpp"
   $48 = $t; //@line 531 "emscripten/hgtex.cpp"
   $49 = (($48) + 28|0); //@line 531 "emscripten/hgtex.cpp"
   HEAP32[$49>>2] = $47; //@line 531 "emscripten/hgtex.cpp"
   $50 = $t; //@line 532 "emscripten/hgtex.cpp"
   $51 = (($50) + 28|0); //@line 532 "emscripten/hgtex.cpp"
   $52 = HEAP32[$51>>2]|0; //@line 532 "emscripten/hgtex.cpp"
   $53 = $1; //@line 532 "emscripten/hgtex.cpp"
   (_strcpy(($52|0),($53|0))|0); //@line 532 "emscripten/hgtex.cpp"
  } else {
   $54 = $t; //@line 534 "emscripten/hgtex.cpp"
   $55 = (($54) + 40|0); //@line 534 "emscripten/hgtex.cpp"
   $56 = $1; //@line 534 "emscripten/hgtex.cpp"
   (_strcpy(($55|0),($56|0))|0); //@line 534 "emscripten/hgtex.cpp"
  }
 }
 $57 = $t; //@line 538 "emscripten/hgtex.cpp"
 $58 = (($57) + 12|0); //@line 538 "emscripten/hgtex.cpp"
 $59 = HEAP32[$58>>2]|0; //@line 538 "emscripten/hgtex.cpp"
 $id = $59; //@line 538 "emscripten/hgtex.cpp"
 $60 = $id; //@line 540 "emscripten/hgtex.cpp"
 _glBindTexture(3553,($60|0)); //@line 540 "emscripten/hgtex.cpp"
 _glTexParameteri(3553,10240,9729); //@line 541 "emscripten/hgtex.cpp"
 _glTexParameteri(3553,10241,9729); //@line 542 "emscripten/hgtex.cpp"
 _glPixelStorei(3317,1); //@line 544 "emscripten/hgtex.cpp"
 $61 = $1; //@line 546 "emscripten/hgtex.cpp"
 $62 = $2; //@line 546 "emscripten/hgtex.cpp"
 $63 = $t; //@line 546 "emscripten/hgtex.cpp"
 $64 = (($63) + 4|0); //@line 546 "emscripten/hgtex.cpp"
 $65 = HEAP16[$64>>1]|0; //@line 546 "emscripten/hgtex.cpp"
 $66 = $65 << 16 >> 16; //@line 546 "emscripten/hgtex.cpp"
 $67 = $t; //@line 546 "emscripten/hgtex.cpp"
 $68 = (($67) + 6|0); //@line 546 "emscripten/hgtex.cpp"
 $69 = HEAP16[$68>>1]|0; //@line 546 "emscripten/hgtex.cpp"
 $70 = $69 << 16 >> 16; //@line 546 "emscripten/hgtex.cpp"
 (_emscripten_asm_const_int((24160|0),($61|0),($62|0),($66|0),($70|0))|0); //@line 546 "emscripten/hgtex.cpp"
 _glBindTexture(3553,0); //@line 574 "emscripten/hgtex.cpp"
 $71 = $texid; //@line 577 "emscripten/hgtex.cpp"
 $0 = $71; //@line 577 "emscripten/hgtex.cpp"
 $72 = $0; //@line 579 "emscripten/hgtex.cpp"
 STACKTOP = sp;return ($72|0); //@line 579 "emscripten/hgtex.cpp"
}
function __ZL8str2hashPcPi($msg,$out_len) {
 $msg = $msg|0;
 $out_len = $out_len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a1 = 0, $cache = 0, $len = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $msg;
 $1 = $out_len;
 $2 = $0; //@line 319 "emscripten/hgtex.cpp"
 $p = $2; //@line 319 "emscripten/hgtex.cpp"
 $len = 0; //@line 320 "emscripten/hgtex.cpp"
 $3 = $p; //@line 321 "emscripten/hgtex.cpp"
 $4 = HEAP8[$3>>0]|0; //@line 321 "emscripten/hgtex.cpp"
 $a1 = $4; //@line 321 "emscripten/hgtex.cpp"
 $5 = $a1; //@line 322 "emscripten/hgtex.cpp"
 $6 = $5&255; //@line 322 "emscripten/hgtex.cpp"
 $7 = $6 << 16 >> 16; //@line 322 "emscripten/hgtex.cpp"
 $8 = $7 << 8; //@line 322 "emscripten/hgtex.cpp"
 $9 = $8&65535; //@line 322 "emscripten/hgtex.cpp"
 $cache = $9; //@line 322 "emscripten/hgtex.cpp"
 while(1) {
  $10 = $a1; //@line 324 "emscripten/hgtex.cpp"
  $11 = $10&255; //@line 324 "emscripten/hgtex.cpp"
  $12 = ($11|0)==(0); //@line 324 "emscripten/hgtex.cpp"
  if ($12) {
   break;
  }
  $13 = $p; //@line 325 "emscripten/hgtex.cpp"
  $14 = (($13) + 1|0); //@line 325 "emscripten/hgtex.cpp"
  $p = $14; //@line 325 "emscripten/hgtex.cpp"
  $15 = HEAP8[$13>>0]|0; //@line 325 "emscripten/hgtex.cpp"
  $a1 = $15; //@line 325 "emscripten/hgtex.cpp"
  $16 = $len; //@line 326 "emscripten/hgtex.cpp"
  $17 = (($16) + 1)|0; //@line 326 "emscripten/hgtex.cpp"
  $len = $17; //@line 326 "emscripten/hgtex.cpp"
 }
 $18 = $len; //@line 328 "emscripten/hgtex.cpp"
 $19 = $1; //@line 328 "emscripten/hgtex.cpp"
 HEAP32[$19>>2] = $18; //@line 328 "emscripten/hgtex.cpp"
 $20 = $len; //@line 329 "emscripten/hgtex.cpp"
 $21 = ($20|0)>(0); //@line 329 "emscripten/hgtex.cpp"
 if (!($21)) {
  $32 = $cache; //@line 333 "emscripten/hgtex.cpp"
  STACKTOP = sp;return ($32|0); //@line 333 "emscripten/hgtex.cpp"
 }
 $22 = $p; //@line 330 "emscripten/hgtex.cpp"
 $23 = (($22) + -1|0); //@line 330 "emscripten/hgtex.cpp"
 $p = $23; //@line 330 "emscripten/hgtex.cpp"
 $24 = $p; //@line 331 "emscripten/hgtex.cpp"
 $25 = HEAP8[$24>>0]|0; //@line 331 "emscripten/hgtex.cpp"
 $26 = $25&255; //@line 331 "emscripten/hgtex.cpp"
 $27 = $26 << 16 >> 16; //@line 331 "emscripten/hgtex.cpp"
 $28 = $cache; //@line 331 "emscripten/hgtex.cpp"
 $29 = $28 << 16 >> 16; //@line 331 "emscripten/hgtex.cpp"
 $30 = (($29) + ($27))|0; //@line 331 "emscripten/hgtex.cpp"
 $31 = $30&65535; //@line 331 "emscripten/hgtex.cpp"
 $cache = $31; //@line 331 "emscripten/hgtex.cpp"
 $32 = $cache; //@line 333 "emscripten/hgtex.cpp"
 STACKTOP = sp;return ($32|0); //@line 333 "emscripten/hgtex.cpp"
}
function __ZL8getCachePcsii($msg,$mycache,$font_size,$font_style) {
 $msg = $msg|0;
 $mycache = $mycache|0;
 $font_size = $font_size|0;
 $font_style = $font_style|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = $msg;
 $2 = $mycache;
 $3 = $font_size;
 $4 = $font_style;
 $t = 4976; //@line 344 "emscripten/hgtex.cpp"
 $i = 0; //@line 345 "emscripten/hgtex.cpp"
 while(1) {
  $5 = $i; //@line 345 "emscripten/hgtex.cpp"
  $6 = ($5|0)<(256); //@line 345 "emscripten/hgtex.cpp"
  if (!($6)) {
   label = 19;
   break;
  }
  $7 = $t; //@line 346 "emscripten/hgtex.cpp"
  $8 = HEAP16[$7>>1]|0; //@line 346 "emscripten/hgtex.cpp"
  $9 = $8 << 16 >> 16; //@line 346 "emscripten/hgtex.cpp"
  $10 = ($9|0)==(2); //@line 346 "emscripten/hgtex.cpp"
  if ($10) {
   $11 = $t; //@line 347 "emscripten/hgtex.cpp"
   $12 = (($11) + 24|0); //@line 347 "emscripten/hgtex.cpp"
   $13 = HEAP16[$12>>1]|0; //@line 347 "emscripten/hgtex.cpp"
   $14 = $13 << 16 >> 16; //@line 347 "emscripten/hgtex.cpp"
   $15 = $2; //@line 347 "emscripten/hgtex.cpp"
   $16 = $15 << 16 >> 16; //@line 347 "emscripten/hgtex.cpp"
   $17 = ($14|0)==($16|0); //@line 347 "emscripten/hgtex.cpp"
   if ($17) {
    $18 = $t; //@line 348 "emscripten/hgtex.cpp"
    $19 = (($18) + 32|0); //@line 348 "emscripten/hgtex.cpp"
    $20 = HEAP32[$19>>2]|0; //@line 348 "emscripten/hgtex.cpp"
    $21 = $3; //@line 348 "emscripten/hgtex.cpp"
    $22 = ($20|0)==($21|0); //@line 348 "emscripten/hgtex.cpp"
    if ($22) {
     $23 = $t; //@line 348 "emscripten/hgtex.cpp"
     $24 = (($23) + 36|0); //@line 348 "emscripten/hgtex.cpp"
     $25 = HEAP32[$24>>2]|0; //@line 348 "emscripten/hgtex.cpp"
     $26 = $4; //@line 348 "emscripten/hgtex.cpp"
     $27 = ($25|0)==($26|0); //@line 348 "emscripten/hgtex.cpp"
     if ($27) {
      $28 = $t; //@line 349 "emscripten/hgtex.cpp"
      $29 = (($28) + 28|0); //@line 349 "emscripten/hgtex.cpp"
      $30 = HEAP32[$29>>2]|0; //@line 349 "emscripten/hgtex.cpp"
      $31 = ($30|0)!=(0|0); //@line 349 "emscripten/hgtex.cpp"
      if ($31) {
       $32 = $1; //@line 350 "emscripten/hgtex.cpp"
       $33 = $t; //@line 350 "emscripten/hgtex.cpp"
       $34 = (($33) + 28|0); //@line 350 "emscripten/hgtex.cpp"
       $35 = HEAP32[$34>>2]|0; //@line 350 "emscripten/hgtex.cpp"
       $36 = (_strcmp($32,$35)|0); //@line 350 "emscripten/hgtex.cpp"
       $37 = ($36|0)==(0); //@line 350 "emscripten/hgtex.cpp"
       if ($37) {
        label = 9;
        break;
       }
      } else {
       $41 = $1; //@line 355 "emscripten/hgtex.cpp"
       $42 = $t; //@line 355 "emscripten/hgtex.cpp"
       $43 = (($42) + 40|0); //@line 355 "emscripten/hgtex.cpp"
       $44 = (_strcmp($41,$43)|0); //@line 355 "emscripten/hgtex.cpp"
       $45 = ($44|0)==(0); //@line 355 "emscripten/hgtex.cpp"
       if ($45) {
        label = 12;
        break;
       }
      }
     }
    }
   }
  }
  $49 = $t; //@line 363 "emscripten/hgtex.cpp"
  $50 = (($49) + 72|0); //@line 363 "emscripten/hgtex.cpp"
  $t = $50; //@line 363 "emscripten/hgtex.cpp"
  $51 = $i; //@line 345 "emscripten/hgtex.cpp"
  $52 = (($51) + 1)|0; //@line 345 "emscripten/hgtex.cpp"
  $i = $52; //@line 345 "emscripten/hgtex.cpp"
 }
 if ((label|0) == 9) {
  $38 = $t; //@line 351 "emscripten/hgtex.cpp"
  $39 = (($38) + 26|0); //@line 351 "emscripten/hgtex.cpp"
  HEAP16[$39>>1] = 8; //@line 351 "emscripten/hgtex.cpp"
  $40 = $i; //@line 352 "emscripten/hgtex.cpp"
  $0 = $40; //@line 352 "emscripten/hgtex.cpp"
  $53 = $0; //@line 366 "emscripten/hgtex.cpp"
  STACKTOP = sp;return ($53|0); //@line 366 "emscripten/hgtex.cpp"
 }
 else if ((label|0) == 12) {
  $46 = $t; //@line 356 "emscripten/hgtex.cpp"
  $47 = (($46) + 26|0); //@line 356 "emscripten/hgtex.cpp"
  HEAP16[$47>>1] = 8; //@line 356 "emscripten/hgtex.cpp"
  $48 = $i; //@line 357 "emscripten/hgtex.cpp"
  $0 = $48; //@line 357 "emscripten/hgtex.cpp"
  $53 = $0; //@line 366 "emscripten/hgtex.cpp"
  STACKTOP = sp;return ($53|0); //@line 366 "emscripten/hgtex.cpp"
 }
 else if ((label|0) == 19) {
  $0 = -1; //@line 365 "emscripten/hgtex.cpp"
  $53 = $0; //@line 366 "emscripten/hgtex.cpp"
  STACKTOP = sp;return ($53|0); //@line 366 "emscripten/hgtex.cpp"
 }
 return 0|0;
}
function __ZL10GetNextTexv() {
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $sel = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $sel = -1; //@line 160 "emscripten/hgtex.cpp"
 $i = 0; //@line 161 "emscripten/hgtex.cpp"
 while(1) {
  $0 = $i; //@line 161 "emscripten/hgtex.cpp"
  $1 = ($0|0)<(256); //@line 161 "emscripten/hgtex.cpp"
  if (!($1)) {
   label = 7;
   break;
  }
  $2 = $i; //@line 162 "emscripten/hgtex.cpp"
  $3 = (4976 + (($2*72)|0)|0); //@line 162 "emscripten/hgtex.cpp"
  $4 = HEAP16[$3>>1]|0; //@line 162 "emscripten/hgtex.cpp"
  $5 = $4 << 16 >> 16; //@line 162 "emscripten/hgtex.cpp"
  $6 = ($5|0)==(0); //@line 162 "emscripten/hgtex.cpp"
  if ($6) {
   break;
  }
  $8 = $i; //@line 161 "emscripten/hgtex.cpp"
  $9 = (($8) + 1)|0; //@line 161 "emscripten/hgtex.cpp"
  $i = $9; //@line 161 "emscripten/hgtex.cpp"
 }
 if ((label|0) == 7) {
  $10 = $sel; //@line 164 "emscripten/hgtex.cpp"
  STACKTOP = sp;return ($10|0); //@line 164 "emscripten/hgtex.cpp"
 }
 $7 = $i; //@line 162 "emscripten/hgtex.cpp"
 $sel = $7; //@line 162 "emscripten/hgtex.cpp"
 $10 = $sel; //@line 164 "emscripten/hgtex.cpp"
 STACKTOP = sp;return ($10|0); //@line 164 "emscripten/hgtex.cpp"
}
function _hgio_init($mode,$sx,$sy,$hwnd) {
 $mode = $mode|0;
 $sx = $sx|0;
 $sy = $sy|0;
 $hwnd = $hwnd|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $vararg_buffer = 0, $vararg_ptr1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer = sp;
 $0 = $mode;
 $1 = $sx;
 $2 = $sy;
 $3 = $hwnd;
 _TexInit(); //@line 211 "emscripten/hgiox.cpp"
 $4 = $1; //@line 214 "emscripten/hgiox.cpp"
 HEAP32[24816>>2] = $4; //@line 214 "emscripten/hgiox.cpp"
 $5 = $2; //@line 215 "emscripten/hgiox.cpp"
 HEAP32[24824>>2] = $5; //@line 215 "emscripten/hgiox.cpp"
 $6 = $1; //@line 216 "emscripten/hgiox.cpp"
 HEAP32[24832>>2] = $6; //@line 216 "emscripten/hgiox.cpp"
 $7 = $2; //@line 217 "emscripten/hgiox.cpp"
 HEAP32[24840>>2] = $7; //@line 217 "emscripten/hgiox.cpp"
 HEAPF32[24848>>2] = 1.0; //@line 218 "emscripten/hgiox.cpp"
 HEAPF32[24856>>2] = 1.0; //@line 219 "emscripten/hgiox.cpp"
 HEAPF32[24864>>2] = 1.0; //@line 220 "emscripten/hgiox.cpp"
 HEAPF32[24872>>2] = 1.0; //@line 221 "emscripten/hgiox.cpp"
 HEAP32[24880>>2] = 0; //@line 222 "emscripten/hgiox.cpp"
 _hgio_setColor(0); //@line 225 "emscripten/hgiox.cpp"
 HEAP32[24888>>2] = -1; //@line 228 "emscripten/hgiox.cpp"
 HEAP32[24896>>2] = 0; //@line 229 "emscripten/hgiox.cpp"
 HEAP32[24904>>2] = 0; //@line 230 "emscripten/hgiox.cpp"
 HEAP32[24912>>2] = 9728; //@line 231 "emscripten/hgiox.cpp"
 HEAP32[24920>>2] = 0; //@line 232 "emscripten/hgiox.cpp"
 HEAP32[24928>>2] = 0; //@line 233 "emscripten/hgiox.cpp"
 $8 = $3; //@line 234 "emscripten/hgiox.cpp"
 HEAP32[24936>>2] = $8; //@line 234 "emscripten/hgiox.cpp"
 _hgio_touch(0,0,0); //@line 235 "emscripten/hgiox.cpp"
 _SetSysReq(10,0); //@line 239 "emscripten/hgiox.cpp"
 _SetSysReq(11,0); //@line 240 "emscripten/hgiox.cpp"
 _SetSysReq(31,1); //@line 241 "emscripten/hgiox.cpp"
 _SetSysReq(32,0); //@line 242 "emscripten/hgiox.cpp"
 $9 = $1; //@line 247 "emscripten/hgiox.cpp"
 $10 = $2; //@line 247 "emscripten/hgiox.cpp"
 HEAP32[$vararg_buffer>>2] = $9; //@line 247 "emscripten/hgiox.cpp"
 $vararg_ptr1 = (($vararg_buffer) + 4|0); //@line 247 "emscripten/hgiox.cpp"
 HEAP32[$vararg_ptr1>>2] = $10; //@line 247 "emscripten/hgiox.cpp"
 __Z6AlertfPKcz(24944,$vararg_buffer); //@line 247 "emscripten/hgiox.cpp"
 HEAP32[24968>>2] = 16; //@line 257 "emscripten/hgiox.cpp"
 HEAP32[24976>>2] = 16; //@line 258 "emscripten/hgiox.cpp"
 $i = 0; //@line 263 "emscripten/hgiox.cpp"
 while(1) {
  $11 = $i; //@line 263 "emscripten/hgiox.cpp"
  $12 = ($11|0)<(16); //@line 263 "emscripten/hgiox.cpp"
  if (!($12)) {
   break;
  }
  $13 = $i; //@line 264 "emscripten/hgiox.cpp"
  $14 = (24984 + ($13<<3)|0); //@line 264 "emscripten/hgiox.cpp"
  HEAPF64[$14>>3] = 0.0; //@line 264 "emscripten/hgiox.cpp"
  $15 = $i; //@line 263 "emscripten/hgiox.cpp"
  $16 = (($15) + 1)|0; //@line 263 "emscripten/hgiox.cpp"
  $i = $16; //@line 263 "emscripten/hgiox.cpp"
 }
 STACKTOP = sp;return; //@line 273 "emscripten/hgiox.cpp"
}
function _hgio_setColor($color) {
 $color = $color|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $color;
 $1 = $0; //@line 561 "emscripten/hgiox.cpp"
 $2 = $1 >> 16; //@line 561 "emscripten/hgiox.cpp"
 $3 = $2 & 255; //@line 561 "emscripten/hgiox.cpp"
 $4 = $3&255; //@line 561 "emscripten/hgiox.cpp"
 HEAP8[25208>>0] = $4; //@line 561 "emscripten/hgiox.cpp"
 $5 = $0; //@line 562 "emscripten/hgiox.cpp"
 $6 = $5 >> 8; //@line 562 "emscripten/hgiox.cpp"
 $7 = $6 & 255; //@line 562 "emscripten/hgiox.cpp"
 $8 = $7&255; //@line 562 "emscripten/hgiox.cpp"
 HEAP8[((25208 + 1|0))>>0] = $8; //@line 562 "emscripten/hgiox.cpp"
 $9 = $0; //@line 563 "emscripten/hgiox.cpp"
 $10 = $9 & 255; //@line 563 "emscripten/hgiox.cpp"
 $11 = $10&255; //@line 563 "emscripten/hgiox.cpp"
 HEAP8[((25208 + 2|0))>>0] = $11; //@line 563 "emscripten/hgiox.cpp"
 HEAP8[((25208 + 3|0))>>0] = -1; //@line 564 "emscripten/hgiox.cpp"
 STACKTOP = sp;return; //@line 565 "emscripten/hgiox.cpp"
}
function _hgio_touch($xx,$yy,$button) {
 $xx = $xx|0;
 $yy = $yy|0;
 $button = $button|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0;
 var $bm = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $xx;
 $1 = $yy;
 $2 = $button;
 $3 = $0; //@line 1469 "emscripten/hgiox.cpp"
 $4 = HEAP32[24896>>2]|0; //@line 1469 "emscripten/hgiox.cpp"
 $5 = (($3) - ($4))|0; //@line 1469 "emscripten/hgiox.cpp"
 $6 = (+($5|0)); //@line 1469 "emscripten/hgiox.cpp"
 $7 = +HEAPF32[24864>>2]; //@line 1469 "emscripten/hgiox.cpp"
 $8 = $6 * $7; //@line 1469 "emscripten/hgiox.cpp"
 $9 = (~~(($8))); //@line 1469 "emscripten/hgiox.cpp"
 HEAP32[25624>>2] = $9; //@line 1469 "emscripten/hgiox.cpp"
 $10 = $1; //@line 1470 "emscripten/hgiox.cpp"
 $11 = HEAP32[24904>>2]|0; //@line 1470 "emscripten/hgiox.cpp"
 $12 = (($10) - ($11))|0; //@line 1470 "emscripten/hgiox.cpp"
 $13 = (+($12|0)); //@line 1470 "emscripten/hgiox.cpp"
 $14 = +HEAPF32[24872>>2]; //@line 1470 "emscripten/hgiox.cpp"
 $15 = $13 * $14; //@line 1470 "emscripten/hgiox.cpp"
 $16 = (~~(($15))); //@line 1470 "emscripten/hgiox.cpp"
 HEAP32[25632>>2] = $16; //@line 1470 "emscripten/hgiox.cpp"
 $17 = $2; //@line 1471 "emscripten/hgiox.cpp"
 HEAP32[25216>>2] = $17; //@line 1471 "emscripten/hgiox.cpp"
 $18 = HEAP32[24928>>2]|0; //@line 1472 "emscripten/hgiox.cpp"
 $19 = ($18|0)!=(0|0); //@line 1472 "emscripten/hgiox.cpp"
 if (!($19)) {
  STACKTOP = sp;return; //@line 1480 "emscripten/hgiox.cpp"
 }
 $20 = HEAP32[25624>>2]|0; //@line 1473 "emscripten/hgiox.cpp"
 $21 = $20&65535; //@line 1473 "emscripten/hgiox.cpp"
 $22 = HEAP32[24928>>2]|0; //@line 1473 "emscripten/hgiox.cpp"
 $23 = (($22) + 176|0); //@line 1473 "emscripten/hgiox.cpp"
 HEAP16[$23>>1] = $21; //@line 1473 "emscripten/hgiox.cpp"
 $24 = HEAP32[25632>>2]|0; //@line 1474 "emscripten/hgiox.cpp"
 $25 = $24&65535; //@line 1474 "emscripten/hgiox.cpp"
 $26 = HEAP32[24928>>2]|0; //@line 1474 "emscripten/hgiox.cpp"
 $27 = (($26) + 176|0); //@line 1474 "emscripten/hgiox.cpp"
 $28 = (($27) + 2|0); //@line 1474 "emscripten/hgiox.cpp"
 HEAP16[$28>>1] = $25; //@line 1474 "emscripten/hgiox.cpp"
 $29 = $2; //@line 1475 "emscripten/hgiox.cpp"
 $30 = $29&65535; //@line 1475 "emscripten/hgiox.cpp"
 $31 = HEAP32[24928>>2]|0; //@line 1475 "emscripten/hgiox.cpp"
 $32 = (($31) + 284|0); //@line 1475 "emscripten/hgiox.cpp"
 HEAP16[$32>>1] = $30; //@line 1475 "emscripten/hgiox.cpp"
 $33 = HEAP32[24928>>2]|0; //@line 1476 "emscripten/hgiox.cpp"
 $bm = $33; //@line 1476 "emscripten/hgiox.cpp"
 $34 = $bm; //@line 1477 "emscripten/hgiox.cpp"
 (__ZN5Bmscr16UpdateAllObjectsEv($34)|0); //@line 1477 "emscripten/hgiox.cpp"
 $35 = $bm; //@line 1478 "emscripten/hgiox.cpp"
 $36 = HEAP32[25624>>2]|0; //@line 1478 "emscripten/hgiox.cpp"
 $37 = HEAP32[25632>>2]|0; //@line 1478 "emscripten/hgiox.cpp"
 $38 = $2; //@line 1478 "emscripten/hgiox.cpp"
 $39 = ($38|0)!=(0); //@line 1478 "emscripten/hgiox.cpp"
 __ZN5Bmscr18setMTouchByPointIdEiiib($35,0,$36,$37,$39); //@line 1478 "emscripten/hgiox.cpp"
 STACKTOP = sp;return; //@line 1480 "emscripten/hgiox.cpp"
}
function _hgio_size($sx,$sy) {
 $sx = $sx|0;
 $sy = $sy|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $sx;
 $1 = $sy;
 $2 = $0; //@line 278 "emscripten/hgiox.cpp"
 HEAP32[24832>>2] = $2; //@line 278 "emscripten/hgiox.cpp"
 $3 = $1; //@line 279 "emscripten/hgiox.cpp"
 HEAP32[24840>>2] = $3; //@line 279 "emscripten/hgiox.cpp"
 STACKTOP = sp;return; //@line 280 "emscripten/hgiox.cpp"
}
function _hgio_view($sx,$sy) {
 $sx = $sx|0;
 $sy = $sy|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $sx;
 $1 = $sy;
 $2 = $0; //@line 285 "emscripten/hgiox.cpp"
 HEAP32[24816>>2] = $2; //@line 285 "emscripten/hgiox.cpp"
 $3 = $1; //@line 286 "emscripten/hgiox.cpp"
 HEAP32[24824>>2] = $3; //@line 286 "emscripten/hgiox.cpp"
 STACKTOP = sp;return; //@line 288 "emscripten/hgiox.cpp"
}
function _hgio_autoscale($mode) {
 $mode = $mode|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0;
 var $27 = 0.0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $5 = 0.0;
 var $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, $adjx = 0.0, $adjy = 0.0, $m_mode = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $x = 0.0, $y = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer = sp;
 $0 = $mode;
 $1 = HEAP32[24832>>2]|0; //@line 304 "emscripten/hgiox.cpp"
 $2 = (+($1|0)); //@line 304 "emscripten/hgiox.cpp"
 $3 = HEAP32[24816>>2]|0; //@line 304 "emscripten/hgiox.cpp"
 $4 = (+($3|0)); //@line 304 "emscripten/hgiox.cpp"
 $5 = $2 / $4; //@line 304 "emscripten/hgiox.cpp"
 $adjx = $5; //@line 304 "emscripten/hgiox.cpp"
 $6 = HEAP32[24840>>2]|0; //@line 305 "emscripten/hgiox.cpp"
 $7 = (+($6|0)); //@line 305 "emscripten/hgiox.cpp"
 $8 = HEAP32[24824>>2]|0; //@line 305 "emscripten/hgiox.cpp"
 $9 = (+($8|0)); //@line 305 "emscripten/hgiox.cpp"
 $10 = $7 / $9; //@line 305 "emscripten/hgiox.cpp"
 $adjy = $10; //@line 305 "emscripten/hgiox.cpp"
 $11 = $0; //@line 307 "emscripten/hgiox.cpp"
 $m_mode = $11; //@line 307 "emscripten/hgiox.cpp"
 $12 = $0; //@line 308 "emscripten/hgiox.cpp"
 $13 = ($12|0)==(0); //@line 308 "emscripten/hgiox.cpp"
 if ($13) {
  $14 = HEAP32[24816>>2]|0; //@line 309 "emscripten/hgiox.cpp"
  $15 = (+($14|0)); //@line 309 "emscripten/hgiox.cpp"
  $16 = $adjy; //@line 309 "emscripten/hgiox.cpp"
  $17 = $15 * $16; //@line 309 "emscripten/hgiox.cpp"
  $x = $17; //@line 309 "emscripten/hgiox.cpp"
  $18 = HEAP32[24824>>2]|0; //@line 310 "emscripten/hgiox.cpp"
  $19 = (+($18|0)); //@line 310 "emscripten/hgiox.cpp"
  $20 = $adjx; //@line 310 "emscripten/hgiox.cpp"
  $21 = $19 * $20; //@line 310 "emscripten/hgiox.cpp"
  $y = $21; //@line 310 "emscripten/hgiox.cpp"
  $22 = $adjx; //@line 311 "emscripten/hgiox.cpp"
  $23 = $adjy; //@line 311 "emscripten/hgiox.cpp"
  $24 = $22 > $23; //@line 311 "emscripten/hgiox.cpp"
  if ($24) {
   $m_mode = 1; //@line 312 "emscripten/hgiox.cpp"
   $25 = $y; //@line 313 "emscripten/hgiox.cpp"
   $26 = HEAP32[24840>>2]|0; //@line 313 "emscripten/hgiox.cpp"
   $27 = (+($26|0)); //@line 313 "emscripten/hgiox.cpp"
   $28 = $25 > $27; //@line 313 "emscripten/hgiox.cpp"
   if ($28) {
    $m_mode = 2; //@line 313 "emscripten/hgiox.cpp"
   }
  } else {
   $m_mode = 2; //@line 315 "emscripten/hgiox.cpp"
   $29 = $x; //@line 316 "emscripten/hgiox.cpp"
   $30 = HEAP32[24832>>2]|0; //@line 316 "emscripten/hgiox.cpp"
   $31 = (+($30|0)); //@line 316 "emscripten/hgiox.cpp"
   $32 = $29 > $31; //@line 316 "emscripten/hgiox.cpp"
   if ($32) {
    $m_mode = 1; //@line 316 "emscripten/hgiox.cpp"
   }
  }
 }
 $33 = $m_mode; //@line 320 "emscripten/hgiox.cpp"
 if ((($33|0) == 2)) {
  $36 = $adjy; //@line 326 "emscripten/hgiox.cpp"
  HEAPF32[24848>>2] = $36; //@line 326 "emscripten/hgiox.cpp"
  $37 = $adjy; //@line 327 "emscripten/hgiox.cpp"
  HEAPF32[24856>>2] = $37; //@line 327 "emscripten/hgiox.cpp"
 } else if ((($33|0) == 1)) {
  $34 = $adjx; //@line 322 "emscripten/hgiox.cpp"
  HEAPF32[24848>>2] = $34; //@line 322 "emscripten/hgiox.cpp"
  $35 = $adjx; //@line 323 "emscripten/hgiox.cpp"
  HEAPF32[24856>>2] = $35; //@line 323 "emscripten/hgiox.cpp"
 } else {
  $38 = $adjx; //@line 330 "emscripten/hgiox.cpp"
  HEAPF32[24848>>2] = $38; //@line 330 "emscripten/hgiox.cpp"
  $39 = $adjy; //@line 331 "emscripten/hgiox.cpp"
  HEAPF32[24856>>2] = $39; //@line 331 "emscripten/hgiox.cpp"
 }
 $40 = +HEAPF32[24848>>2]; //@line 334 "emscripten/hgiox.cpp"
 $41 = $40; //@line 334 "emscripten/hgiox.cpp"
 $42 = +HEAPF32[24856>>2]; //@line 334 "emscripten/hgiox.cpp"
 $43 = $42; //@line 334 "emscripten/hgiox.cpp"
 HEAPF64[tempDoublePtr>>3]=$41;HEAP32[$vararg_buffer>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer+4>>2]=HEAP32[tempDoublePtr+4>>2]; //@line 334 "emscripten/hgiox.cpp"
 $vararg_ptr1 = (($vararg_buffer) + 8|0); //@line 334 "emscripten/hgiox.cpp"
 HEAPF64[tempDoublePtr>>3]=$43;HEAP32[$vararg_ptr1>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr1+4>>2]=HEAP32[tempDoublePtr+4>>2]; //@line 334 "emscripten/hgiox.cpp"
 __Z6AlertfPKcz(25112,$vararg_buffer); //@line 334 "emscripten/hgiox.cpp"
 STACKTOP = sp;return; //@line 335 "emscripten/hgiox.cpp"
}
function _hgio_reset() {
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $5 = 0.0, $6 = 0;
 var $7 = 0.0, $8 = 0.0, $9 = 0.0, $ox = 0.0, $oy = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 _glMatrixMode(5889); //@line 348 "emscripten/hgiox.cpp"
 _glLoadIdentity(); //@line 349 "emscripten/hgiox.cpp"
 $0 = +HEAPF32[24848>>2]; //@line 352 "emscripten/hgiox.cpp"
 $1 = 1.0 / $0; //@line 352 "emscripten/hgiox.cpp"
 HEAPF32[24864>>2] = $1; //@line 352 "emscripten/hgiox.cpp"
 $2 = +HEAPF32[24856>>2]; //@line 353 "emscripten/hgiox.cpp"
 $3 = 1.0 / $2; //@line 353 "emscripten/hgiox.cpp"
 HEAPF32[24872>>2] = $3; //@line 353 "emscripten/hgiox.cpp"
 $4 = HEAP32[24816>>2]|0; //@line 354 "emscripten/hgiox.cpp"
 $5 = (+($4|0)); //@line 354 "emscripten/hgiox.cpp"
 $ox = $5; //@line 354 "emscripten/hgiox.cpp"
 $6 = HEAP32[24824>>2]|0; //@line 355 "emscripten/hgiox.cpp"
 $7 = (+($6|0)); //@line 355 "emscripten/hgiox.cpp"
 $oy = $7; //@line 355 "emscripten/hgiox.cpp"
 $8 = $ox; //@line 356 "emscripten/hgiox.cpp"
 $9 = $8; //@line 356 "emscripten/hgiox.cpp"
 $10 = $oy; //@line 356 "emscripten/hgiox.cpp"
 $11 = -$10; //@line 356 "emscripten/hgiox.cpp"
 $12 = $11; //@line 356 "emscripten/hgiox.cpp"
 _glOrtho(0.0,(+$9),(+$12),0.0,-100.0,100.0); //@line 356 "emscripten/hgiox.cpp"
 $13 = HEAP32[24832>>2]|0; //@line 362 "emscripten/hgiox.cpp"
 $14 = (+($13|0)); //@line 362 "emscripten/hgiox.cpp"
 $15 = $ox; //@line 362 "emscripten/hgiox.cpp"
 $16 = +HEAPF32[24848>>2]; //@line 362 "emscripten/hgiox.cpp"
 $17 = $15 * $16; //@line 362 "emscripten/hgiox.cpp"
 $18 = $14 - $17; //@line 362 "emscripten/hgiox.cpp"
 $19 = $18 / 2.0; //@line 362 "emscripten/hgiox.cpp"
 $20 = (~~(($19))); //@line 362 "emscripten/hgiox.cpp"
 HEAP32[24896>>2] = $20; //@line 362 "emscripten/hgiox.cpp"
 $21 = HEAP32[24840>>2]|0; //@line 363 "emscripten/hgiox.cpp"
 $22 = (+($21|0)); //@line 363 "emscripten/hgiox.cpp"
 $23 = $oy; //@line 363 "emscripten/hgiox.cpp"
 $24 = +HEAPF32[24856>>2]; //@line 363 "emscripten/hgiox.cpp"
 $25 = $23 * $24; //@line 363 "emscripten/hgiox.cpp"
 $26 = $22 - $25; //@line 363 "emscripten/hgiox.cpp"
 $27 = $26 / 2.0; //@line 363 "emscripten/hgiox.cpp"
 $28 = (~~(($27))); //@line 363 "emscripten/hgiox.cpp"
 HEAP32[24904>>2] = $28; //@line 363 "emscripten/hgiox.cpp"
 $29 = HEAP32[24896>>2]|0; //@line 366 "emscripten/hgiox.cpp"
 $30 = (+($29|0)); //@line 366 "emscripten/hgiox.cpp"
 $31 = (~~(($30))); //@line 366 "emscripten/hgiox.cpp"
 $32 = HEAP32[24904>>2]|0; //@line 366 "emscripten/hgiox.cpp"
 $33 = (+($32|0)); //@line 366 "emscripten/hgiox.cpp"
 $34 = (~~(($33))); //@line 366 "emscripten/hgiox.cpp"
 $35 = $ox; //@line 366 "emscripten/hgiox.cpp"
 $36 = +HEAPF32[24848>>2]; //@line 366 "emscripten/hgiox.cpp"
 $37 = $35 * $36; //@line 366 "emscripten/hgiox.cpp"
 $38 = (~~(($37))); //@line 366 "emscripten/hgiox.cpp"
 $39 = $oy; //@line 366 "emscripten/hgiox.cpp"
 $40 = +HEAPF32[24856>>2]; //@line 366 "emscripten/hgiox.cpp"
 $41 = $39 * $40; //@line 366 "emscripten/hgiox.cpp"
 $42 = (~~(($41))); //@line 366 "emscripten/hgiox.cpp"
 _glViewport(($31|0),($34|0),($38|0),($42|0)); //@line 366 "emscripten/hgiox.cpp"
 _glMatrixMode(5888); //@line 371 "emscripten/hgiox.cpp"
 _glLoadIdentity(); //@line 372 "emscripten/hgiox.cpp"
 _glDisable(2896); //@line 374 "emscripten/hgiox.cpp"
 _glDisable(2884); //@line 375 "emscripten/hgiox.cpp"
 _glDisable(256); //@line 376 "emscripten/hgiox.cpp"
 _glDisable(2929); //@line 377 "emscripten/hgiox.cpp"
 _glVertexPointer(2,5126,0,(25128|0)); //@line 383 "emscripten/hgiox.cpp"
 _glEnableClientState(32884); //@line 384 "emscripten/hgiox.cpp"
 _glTexCoordPointer(2,5126,0,(25160|0)); //@line 387 "emscripten/hgiox.cpp"
 _glEnableClientState(32888); //@line 390 "emscripten/hgiox.cpp"
 _glDisable(3553); //@line 392 "emscripten/hgiox.cpp"
 _glEnable(3042); //@line 399 "emscripten/hgiox.cpp"
 _glBlendFunc(1,771); //@line 403 "emscripten/hgiox.cpp"
 _glEnable(2832); //@line 406 "emscripten/hgiox.cpp"
 _glTexParameteri(3553,10240,9728); //@line 411 "emscripten/hgiox.cpp"
 _glTexParameteri(3553,10241,9728); //@line 412 "emscripten/hgiox.cpp"
 _TexReset(); //@line 415 "emscripten/hgiox.cpp"
 _TexProc(); //@line 420 "emscripten/hgiox.cpp"
 STACKTOP = sp;return; //@line 424 "emscripten/hgiox.cpp"
}
function _hgio_render_end() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $res = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $res = 0; //@line 1843 "emscripten/hgiox.cpp"
 $1 = HEAP32[24920>>2]|0; //@line 1844 "emscripten/hgiox.cpp"
 $2 = ($1|0)==(0); //@line 1844 "emscripten/hgiox.cpp"
 if ($2) {
  $0 = 0; //@line 1844 "emscripten/hgiox.cpp"
 } else {
  _SDL_GL_SwapBuffers(); //@line 1864 "emscripten/hgiox.cpp"
  HEAP32[24920>>2] = 0; //@line 1867 "emscripten/hgiox.cpp"
  $3 = $res; //@line 1868 "emscripten/hgiox.cpp"
  $0 = $3; //@line 1868 "emscripten/hgiox.cpp"
 }
 $4 = $0; //@line 1869 "emscripten/hgiox.cpp"
 STACKTOP = sp;return ($4|0); //@line 1869 "emscripten/hgiox.cpp"
}
function _hgio_clear() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _glClear(16384); //@line 455 "emscripten/hgiox.cpp"
 STACKTOP = sp;return; //@line 456 "emscripten/hgiox.cpp"
}
function _hgio_setClear($rval,$gval,$bval) {
 $rval = $rval|0;
 $gval = $gval|0;
 $bval = $bval|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $rval;
 $1 = $gval;
 $2 = $bval;
 $3 = $0; //@line 461 "emscripten/hgiox.cpp"
 $4 = (+($3|0)); //@line 461 "emscripten/hgiox.cpp"
 $5 = 0.00390625 * $4; //@line 461 "emscripten/hgiox.cpp"
 $6 = $1; //@line 461 "emscripten/hgiox.cpp"
 $7 = (+($6|0)); //@line 461 "emscripten/hgiox.cpp"
 $8 = 0.00390625 * $7; //@line 461 "emscripten/hgiox.cpp"
 $9 = $2; //@line 461 "emscripten/hgiox.cpp"
 $10 = (+($9|0)); //@line 461 "emscripten/hgiox.cpp"
 $11 = 0.00390625 * $10; //@line 461 "emscripten/hgiox.cpp"
 _glClearColor((+$5),(+$8),(+$11),1.0); //@line 461 "emscripten/hgiox.cpp"
 STACKTOP = sp;return; //@line 462 "emscripten/hgiox.cpp"
}
function _hgio_setFilterMode($mode) {
 $mode = $mode|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $mode;
 $1 = $0; //@line 467 "emscripten/hgiox.cpp"
 if ((($1|0) == 0)) {
  HEAP32[24912>>2] = 9728; //@line 469 "emscripten/hgiox.cpp"
 } else {
  HEAP32[24912>>2] = 9729; //@line 472 "emscripten/hgiox.cpp"
 }
 STACKTOP = sp;return; //@line 475 "emscripten/hgiox.cpp"
}
function _hgio_setBlendMode($mode,$aval) {
 $mode = $mode|0;
 $aval = $aval|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $mode;
 $1 = $aval;
 $2 = $0; //@line 480 "emscripten/hgiox.cpp"
 if ((($2|0) == 1) | (($2|0) == 0)) {
  _glDisable(3042); //@line 483 "emscripten/hgiox.cpp"
 } else if ((($2|0) == 5)) {
  _glEnable(3042); //@line 486 "emscripten/hgiox.cpp"
  _glBlendFunc(770,1); //@line 490 "emscripten/hgiox.cpp"
 } else if ((($2|0) == 6)) {
  _glEnable(3042); //@line 493 "emscripten/hgiox.cpp"
  _glBlendFunc(770,1); //@line 497 "emscripten/hgiox.cpp"
 } else {
  _glEnable(3042); //@line 500 "emscripten/hgiox.cpp"
  _glBlendFunc(770,771); //@line 504 "emscripten/hgiox.cpp"
 }
 $3 = $0; //@line 508 "emscripten/hgiox.cpp"
 $4 = ($3|0)>=(3); //@line 508 "emscripten/hgiox.cpp"
 if ($4) {
  $5 = $1; //@line 509 "emscripten/hgiox.cpp"
  $6 = $5&255; //@line 509 "emscripten/hgiox.cpp"
  HEAP8[((25192 + 15|0))>>0] = $6; //@line 509 "emscripten/hgiox.cpp"
  HEAP8[((25192 + 11|0))>>0] = $6; //@line 509 "emscripten/hgiox.cpp"
  HEAP8[((25192 + 7|0))>>0] = $6; //@line 509 "emscripten/hgiox.cpp"
  HEAP8[((25192 + 3|0))>>0] = $6; //@line 509 "emscripten/hgiox.cpp"
  _glEnableClientState(32886); //@line 510 "emscripten/hgiox.cpp"
  _glColorPointer(4,5121,0,(25192|0)); //@line 511 "emscripten/hgiox.cpp"
 } else {
  _glDisableClientState(32886); //@line 513 "emscripten/hgiox.cpp"
 }
 $7 = HEAP32[24912>>2]|0; //@line 515 "emscripten/hgiox.cpp"
 _glTexParameteri(3553,10240,($7|0)); //@line 515 "emscripten/hgiox.cpp"
 $8 = HEAP32[24912>>2]|0; //@line 516 "emscripten/hgiox.cpp"
 _glTexParameteri(3553,10241,($8|0)); //@line 516 "emscripten/hgiox.cpp"
 STACKTOP = sp;return; //@line 517 "emscripten/hgiox.cpp"
}
function _hgio_setBlendModeFlat($mode) {
 $mode = $mode|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $mode;
 $1 = $0; //@line 522 "emscripten/hgiox.cpp"
 switch ($1|0) {
 case 4: case 3:  {
  _glEnable(3042); //@line 528 "emscripten/hgiox.cpp"
  _glBlendFunc(1,771); //@line 532 "emscripten/hgiox.cpp"
  break;
 }
 case 0:  {
  _glDisable(3042); //@line 524 "emscripten/hgiox.cpp"
  break;
 }
 case 6:  {
  _glEnable(3042); //@line 542 "emscripten/hgiox.cpp"
  _glBlendFunc(770,1); //@line 546 "emscripten/hgiox.cpp"
  break;
 }
 case 5:  {
  _glEnable(3042); //@line 535 "emscripten/hgiox.cpp"
  _glBlendFunc(770,1); //@line 539 "emscripten/hgiox.cpp"
  break;
 }
 default: {
  _glEnable(3042); //@line 549 "emscripten/hgiox.cpp"
  _glBlendFunc(1,771); //@line 553 "emscripten/hgiox.cpp"
 }
 }
 STACKTOP = sp;return; //@line 556 "emscripten/hgiox.cpp"
}
function _hgio_scale_point($xx,$yy,$x,$y) {
 $xx = $xx|0;
 $yy = $yy|0;
 $x = $x|0;
 $y = $y|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $xx;
 $1 = $yy;
 $2 = $x;
 $3 = $y;
 $4 = $0; //@line 589 "emscripten/hgiox.cpp"
 $5 = HEAP32[24896>>2]|0; //@line 589 "emscripten/hgiox.cpp"
 $6 = (($4) - ($5))|0; //@line 589 "emscripten/hgiox.cpp"
 $7 = (+($6|0)); //@line 589 "emscripten/hgiox.cpp"
 $8 = +HEAPF32[24864>>2]; //@line 589 "emscripten/hgiox.cpp"
 $9 = $7 * $8; //@line 589 "emscripten/hgiox.cpp"
 $10 = (~~(($9))); //@line 589 "emscripten/hgiox.cpp"
 $11 = $2; //@line 589 "emscripten/hgiox.cpp"
 HEAP32[$11>>2] = $10; //@line 589 "emscripten/hgiox.cpp"
 $12 = $1; //@line 590 "emscripten/hgiox.cpp"
 $13 = HEAP32[24904>>2]|0; //@line 590 "emscripten/hgiox.cpp"
 $14 = (($12) - ($13))|0; //@line 590 "emscripten/hgiox.cpp"
 $15 = (+($14|0)); //@line 590 "emscripten/hgiox.cpp"
 $16 = +HEAPF32[24872>>2]; //@line 590 "emscripten/hgiox.cpp"
 $17 = $15 * $16; //@line 590 "emscripten/hgiox.cpp"
 $18 = (~~(($17))); //@line 590 "emscripten/hgiox.cpp"
 $19 = $3; //@line 590 "emscripten/hgiox.cpp"
 HEAP32[$19>>2] = $18; //@line 590 "emscripten/hgiox.cpp"
 STACKTOP = sp;return; //@line 591 "emscripten/hgiox.cpp"
}
function _hgio_clsmode($mode,$color,$tex) {
 $mode = $mode|0;
 $color = $color|0;
 $tex = $tex|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $mode;
 $1 = $color;
 $2 = $tex;
 $3 = $0; //@line 597 "emscripten/hgiox.cpp"
 _SetSysReq(31,$3); //@line 597 "emscripten/hgiox.cpp"
 $4 = $1; //@line 598 "emscripten/hgiox.cpp"
 _SetSysReq(32,$4); //@line 598 "emscripten/hgiox.cpp"
 $5 = $2; //@line 599 "emscripten/hgiox.cpp"
 _SetSysReq(33,$5); //@line 599 "emscripten/hgiox.cpp"
 STACKTOP = sp;return; //@line 600 "emscripten/hgiox.cpp"
}
function _hgio_getWidth() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[24816>>2]|0; //@line 605 "emscripten/hgiox.cpp"
 STACKTOP = sp;return ($0|0); //@line 605 "emscripten/hgiox.cpp"
}
function _hgio_getHeight() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[24824>>2]|0; //@line 611 "emscripten/hgiox.cpp"
 STACKTOP = sp;return ($0|0); //@line 611 "emscripten/hgiox.cpp"
}
function _hgio_setfilter($type,$opt) {
 $type = $type|0;
 $opt = $opt|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $type;
 $1 = $opt;
 $2 = $0; //@line 617 "emscripten/hgiox.cpp"
 _hgio_setFilterMode($2); //@line 617 "emscripten/hgiox.cpp"
 STACKTOP = sp;return; //@line 618 "emscripten/hgiox.cpp"
}
function _hgio_title($str1) {
 $str1 = $str1|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $str1;
 STACKTOP = sp;return 0; //@line 623 "emscripten/hgiox.cpp"
}
function _hgio_stick($actsw) {
 $actsw = $actsw|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $ckey = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $actsw;
 $ckey = 0; //@line 629 "emscripten/hgiox.cpp"
 $1 = HEAP32[25216>>2]|0; //@line 630 "emscripten/hgiox.cpp"
 $2 = ($1|0)!=(0); //@line 630 "emscripten/hgiox.cpp"
 if ($2) {
  $3 = $ckey; //@line 630 "emscripten/hgiox.cpp"
  $4 = $3 | 256; //@line 630 "emscripten/hgiox.cpp"
  $ckey = $4; //@line 630 "emscripten/hgiox.cpp"
 }
 $5 = $ckey; //@line 631 "emscripten/hgiox.cpp"
 STACKTOP = sp;return ($5|0); //@line 631 "emscripten/hgiox.cpp"
}
function _hgio_font($fontname,$size,$style) {
 $fontname = $fontname|0;
 $size = $size|0;
 $style = $style|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $fontname;
 $1 = $size;
 $2 = $style;
 $3 = $1; //@line 637 "emscripten/hgiox.cpp"
 HEAP32[25224>>2] = $3; //@line 637 "emscripten/hgiox.cpp"
 $4 = $2; //@line 638 "emscripten/hgiox.cpp"
 HEAP32[25232>>2] = $4; //@line 638 "emscripten/hgiox.cpp"
 STACKTOP = sp;return 0; //@line 642 "emscripten/hgiox.cpp"
}
function _hgio_mes($bm,$str1) {
 $bm = $bm|0;
 $str1 = $str1|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $bm;
 $1 = $str1;
 $2 = $0; //@line 649 "emscripten/hgiox.cpp"
 $3 = (($2) + 68|0); //@line 649 "emscripten/hgiox.cpp"
 $4 = HEAP32[$3>>2]|0; //@line 649 "emscripten/hgiox.cpp"
 $5 = $0; //@line 649 "emscripten/hgiox.cpp"
 $6 = (($5) + 72|0); //@line 649 "emscripten/hgiox.cpp"
 $7 = HEAP32[$6>>2]|0; //@line 649 "emscripten/hgiox.cpp"
 $8 = $1; //@line 649 "emscripten/hgiox.cpp"
 $9 = $0; //@line 649 "emscripten/hgiox.cpp"
 $10 = (($9) + 104|0); //@line 649 "emscripten/hgiox.cpp"
 $11 = HEAP32[$10>>2]|0; //@line 649 "emscripten/hgiox.cpp"
 _hgio_putTexFont($4,$7,$8,$11); //@line 649 "emscripten/hgiox.cpp"
 $12 = HEAP32[25240>>2]|0; //@line 650 "emscripten/hgiox.cpp"
 $13 = $12&65535; //@line 650 "emscripten/hgiox.cpp"
 $14 = $0; //@line 650 "emscripten/hgiox.cpp"
 $15 = (($14) + 156|0); //@line 650 "emscripten/hgiox.cpp"
 HEAP16[$15>>1] = $13; //@line 650 "emscripten/hgiox.cpp"
 $16 = HEAP32[25248>>2]|0; //@line 651 "emscripten/hgiox.cpp"
 $17 = $16&65535; //@line 651 "emscripten/hgiox.cpp"
 $18 = $0; //@line 651 "emscripten/hgiox.cpp"
 $19 = (($18) + 158|0); //@line 651 "emscripten/hgiox.cpp"
 HEAP16[$19>>1] = $17; //@line 651 "emscripten/hgiox.cpp"
 STACKTOP = sp;return 0; //@line 657 "emscripten/hgiox.cpp"
}
function _hgio_putTexFont($x,$y,$msg,$color) {
 $x = $x|0;
 $y = $y|0;
 $msg = $msg|0;
 $color = $color|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $texid = 0, $tinf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $x;
 $1 = $y;
 $2 = $msg;
 $3 = $color;
 $4 = $2; //@line 1559 "emscripten/hgiox.cpp"
 $5 = HEAP32[25224>>2]|0; //@line 1559 "emscripten/hgiox.cpp"
 $6 = HEAP32[25232>>2]|0; //@line 1559 "emscripten/hgiox.cpp"
 $7 = (_GetCacheMesTextureID($4,$5,$6)|0); //@line 1559 "emscripten/hgiox.cpp"
 $texid = $7; //@line 1559 "emscripten/hgiox.cpp"
 $8 = $texid; //@line 1560 "emscripten/hgiox.cpp"
 $9 = ($8|0)>=(0); //@line 1560 "emscripten/hgiox.cpp"
 if (!($9)) {
  STACKTOP = sp;return; //@line 1589 "emscripten/hgiox.cpp"
 }
 $10 = $texid; //@line 1561 "emscripten/hgiox.cpp"
 $11 = (_GetTex($10)|0); //@line 1561 "emscripten/hgiox.cpp"
 $tinf = $11; //@line 1561 "emscripten/hgiox.cpp"
 $12 = $tinf; //@line 1562 "emscripten/hgiox.cpp"
 $13 = (($12) + 8|0); //@line 1562 "emscripten/hgiox.cpp"
 $14 = HEAP16[$13>>1]|0; //@line 1562 "emscripten/hgiox.cpp"
 $15 = $14 << 16 >> 16; //@line 1562 "emscripten/hgiox.cpp"
 HEAP32[25240>>2] = $15; //@line 1562 "emscripten/hgiox.cpp"
 $16 = $tinf; //@line 1563 "emscripten/hgiox.cpp"
 $17 = (($16) + 10|0); //@line 1563 "emscripten/hgiox.cpp"
 $18 = HEAP16[$17>>1]|0; //@line 1563 "emscripten/hgiox.cpp"
 $19 = $18 << 16 >> 16; //@line 1563 "emscripten/hgiox.cpp"
 HEAP32[25248>>2] = $19; //@line 1563 "emscripten/hgiox.cpp"
 $20 = $0; //@line 1564 "emscripten/hgiox.cpp"
 $21 = (+($20|0)); //@line 1564 "emscripten/hgiox.cpp"
 $22 = $1; //@line 1564 "emscripten/hgiox.cpp"
 $23 = (+($22|0)); //@line 1564 "emscripten/hgiox.cpp"
 $24 = HEAP32[25240>>2]|0; //@line 1564 "emscripten/hgiox.cpp"
 $25 = $24&65535; //@line 1564 "emscripten/hgiox.cpp"
 $26 = HEAP32[25248>>2]|0; //@line 1564 "emscripten/hgiox.cpp"
 $27 = $26&65535; //@line 1564 "emscripten/hgiox.cpp"
 $28 = $texid; //@line 1564 "emscripten/hgiox.cpp"
 $29 = $3; //@line 1564 "emscripten/hgiox.cpp"
 __Z10hgio_fcopyffssssii($21,$23,0,0,$25,$27,$28,$29); //@line 1564 "emscripten/hgiox.cpp"
 STACKTOP = sp;return; //@line 1589 "emscripten/hgiox.cpp"
}
function _hgio_texload($bm,$fname) {
 $bm = $bm|0;
 $fname = $fname|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $t = 0, $texid = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = $bm;
 $2 = $fname;
 $3 = $1; //@line 666 "emscripten/hgiox.cpp"
 _hgio_delscreen($3); //@line 666 "emscripten/hgiox.cpp"
 $4 = $2; //@line 668 "emscripten/hgiox.cpp"
 $5 = (_RegistTex($4)|0); //@line 668 "emscripten/hgiox.cpp"
 $texid = $5; //@line 668 "emscripten/hgiox.cpp"
 $6 = $texid; //@line 669 "emscripten/hgiox.cpp"
 $7 = ($6|0)<(0); //@line 669 "emscripten/hgiox.cpp"
 if ($7) {
  $0 = -1; //@line 669 "emscripten/hgiox.cpp"
  $30 = $0; //@line 679 "emscripten/hgiox.cpp"
  STACKTOP = sp;return ($30|0); //@line 679 "emscripten/hgiox.cpp"
 }
 $8 = $texid; //@line 671 "emscripten/hgiox.cpp"
 $9 = (_GetTex($8)|0); //@line 671 "emscripten/hgiox.cpp"
 $t = $9; //@line 671 "emscripten/hgiox.cpp"
 $10 = $t; //@line 672 "emscripten/hgiox.cpp"
 $11 = HEAP16[$10>>1]|0; //@line 672 "emscripten/hgiox.cpp"
 $12 = $11 << 16 >> 16; //@line 672 "emscripten/hgiox.cpp"
 $13 = ($12|0)==(0); //@line 672 "emscripten/hgiox.cpp"
 if ($13) {
  $0 = -1; //@line 672 "emscripten/hgiox.cpp"
  $30 = $0; //@line 679 "emscripten/hgiox.cpp"
  STACKTOP = sp;return ($30|0); //@line 679 "emscripten/hgiox.cpp"
 } else {
  $14 = $t; //@line 674 "emscripten/hgiox.cpp"
  $15 = (($14) + 8|0); //@line 674 "emscripten/hgiox.cpp"
  $16 = HEAP16[$15>>1]|0; //@line 674 "emscripten/hgiox.cpp"
  $17 = $16 << 16 >> 16; //@line 674 "emscripten/hgiox.cpp"
  $18 = $1; //@line 674 "emscripten/hgiox.cpp"
  $19 = (($18) + 4|0); //@line 674 "emscripten/hgiox.cpp"
  HEAP32[$19>>2] = $17; //@line 674 "emscripten/hgiox.cpp"
  $20 = $t; //@line 675 "emscripten/hgiox.cpp"
  $21 = (($20) + 10|0); //@line 675 "emscripten/hgiox.cpp"
  $22 = HEAP16[$21>>1]|0; //@line 675 "emscripten/hgiox.cpp"
  $23 = $22 << 16 >> 16; //@line 675 "emscripten/hgiox.cpp"
  $24 = $1; //@line 675 "emscripten/hgiox.cpp"
  $25 = (($24) + 8|0); //@line 675 "emscripten/hgiox.cpp"
  HEAP32[$25>>2] = $23; //@line 675 "emscripten/hgiox.cpp"
  $26 = $texid; //@line 676 "emscripten/hgiox.cpp"
  $27 = $1; //@line 676 "emscripten/hgiox.cpp"
  $28 = (($27) + 280|0); //@line 676 "emscripten/hgiox.cpp"
  HEAP32[$28>>2] = $26; //@line 676 "emscripten/hgiox.cpp"
  $29 = $texid; //@line 678 "emscripten/hgiox.cpp"
  $0 = $29; //@line 678 "emscripten/hgiox.cpp"
  $30 = $0; //@line 679 "emscripten/hgiox.cpp"
  STACKTOP = sp;return ($30|0); //@line 679 "emscripten/hgiox.cpp"
 }
 return 0|0;
}
function _hgio_delscreen($bm) {
 $bm = $bm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $bm;
 $1 = $0; //@line 1880 "emscripten/hgiox.cpp"
 $2 = HEAP32[$1>>2]|0; //@line 1880 "emscripten/hgiox.cpp"
 $3 = ($2|0)==(0); //@line 1880 "emscripten/hgiox.cpp"
 if ($3) {
  STACKTOP = sp;return; //@line 1884 "emscripten/hgiox.cpp"
 }
 $4 = $0; //@line 1881 "emscripten/hgiox.cpp"
 $5 = (($4) + 280|0); //@line 1881 "emscripten/hgiox.cpp"
 $6 = HEAP32[$5>>2]|0; //@line 1881 "emscripten/hgiox.cpp"
 $7 = ($6|0)!=(-1); //@line 1881 "emscripten/hgiox.cpp"
 if (!($7)) {
  STACKTOP = sp;return; //@line 1884 "emscripten/hgiox.cpp"
 }
 $8 = $0; //@line 1882 "emscripten/hgiox.cpp"
 $9 = (($8) + 280|0); //@line 1882 "emscripten/hgiox.cpp"
 $10 = HEAP32[$9>>2]|0; //@line 1882 "emscripten/hgiox.cpp"
 _DeleteTex($10); //@line 1882 "emscripten/hgiox.cpp"
 $11 = $0; //@line 1884 "emscripten/hgiox.cpp"
 $12 = (($11) + 280|0); //@line 1884 "emscripten/hgiox.cpp"
 HEAP32[$12>>2] = -1; //@line 1884 "emscripten/hgiox.cpp"
 STACKTOP = sp;return; //@line 1884 "emscripten/hgiox.cpp"
}
function _hgio_panelcolor($color,$aval) {
 $color = $color|0;
 $aval = $aval|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bval = 0, $gval = 0, $i = 0;
 var $rval = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $color;
 $1 = $aval;
 $2 = $0; //@line 687 "emscripten/hgiox.cpp"
 $3 = $2 >> 16; //@line 687 "emscripten/hgiox.cpp"
 $4 = $3 & 255; //@line 687 "emscripten/hgiox.cpp"
 $rval = $4; //@line 687 "emscripten/hgiox.cpp"
 $5 = $0; //@line 688 "emscripten/hgiox.cpp"
 $6 = $5 >> 8; //@line 688 "emscripten/hgiox.cpp"
 $7 = $6 & 255; //@line 688 "emscripten/hgiox.cpp"
 $gval = $7; //@line 688 "emscripten/hgiox.cpp"
 $8 = $0; //@line 689 "emscripten/hgiox.cpp"
 $9 = $8 & 255; //@line 689 "emscripten/hgiox.cpp"
 $bval = $9; //@line 689 "emscripten/hgiox.cpp"
 $i = 0; //@line 691 "emscripten/hgiox.cpp"
 while(1) {
  $10 = $i; //@line 691 "emscripten/hgiox.cpp"
  $11 = ($10|0)<(4); //@line 691 "emscripten/hgiox.cpp"
  if (!($11)) {
   break;
  }
  $12 = $rval; //@line 692 "emscripten/hgiox.cpp"
  $13 = $12&255; //@line 692 "emscripten/hgiox.cpp"
  $14 = $i; //@line 692 "emscripten/hgiox.cpp"
  $15 = $14<<2; //@line 692 "emscripten/hgiox.cpp"
  $16 = (25256 + ($15)|0); //@line 692 "emscripten/hgiox.cpp"
  HEAP8[$16>>0] = $13; //@line 692 "emscripten/hgiox.cpp"
  $17 = $gval; //@line 693 "emscripten/hgiox.cpp"
  $18 = $17&255; //@line 693 "emscripten/hgiox.cpp"
  $19 = $i; //@line 693 "emscripten/hgiox.cpp"
  $20 = $19<<2; //@line 693 "emscripten/hgiox.cpp"
  $21 = (($20) + 1)|0; //@line 693 "emscripten/hgiox.cpp"
  $22 = (25256 + ($21)|0); //@line 693 "emscripten/hgiox.cpp"
  HEAP8[$22>>0] = $18; //@line 693 "emscripten/hgiox.cpp"
  $23 = $bval; //@line 694 "emscripten/hgiox.cpp"
  $24 = $23&255; //@line 694 "emscripten/hgiox.cpp"
  $25 = $i; //@line 694 "emscripten/hgiox.cpp"
  $26 = $25<<2; //@line 694 "emscripten/hgiox.cpp"
  $27 = (($26) + 2)|0; //@line 694 "emscripten/hgiox.cpp"
  $28 = (25256 + ($27)|0); //@line 694 "emscripten/hgiox.cpp"
  HEAP8[$28>>0] = $24; //@line 694 "emscripten/hgiox.cpp"
  $29 = $1; //@line 695 "emscripten/hgiox.cpp"
  $30 = $29&255; //@line 695 "emscripten/hgiox.cpp"
  $31 = $i; //@line 695 "emscripten/hgiox.cpp"
  $32 = $31<<2; //@line 695 "emscripten/hgiox.cpp"
  $33 = (($32) + 3)|0; //@line 695 "emscripten/hgiox.cpp"
  $34 = (25256 + ($33)|0); //@line 695 "emscripten/hgiox.cpp"
  HEAP8[$34>>0] = $30; //@line 695 "emscripten/hgiox.cpp"
  $35 = $i; //@line 691 "emscripten/hgiox.cpp"
  $36 = (($35) + 1)|0; //@line 691 "emscripten/hgiox.cpp"
  $i = $36; //@line 691 "emscripten/hgiox.cpp"
 }
 _glEnableClientState(32886); //@line 697 "emscripten/hgiox.cpp"
 _glColorPointer(4,5121,0,(25256|0)); //@line 698 "emscripten/hgiox.cpp"
 STACKTOP = sp;return; //@line 699 "emscripten/hgiox.cpp"
}
function __Z22hgio_panelcolor_directiii($id,$color,$aval) {
 $id = $id|0;
 $color = $color|0;
 $aval = $aval|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bval = 0, $gval = 0, $rval = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $id;
 $1 = $color;
 $2 = $aval;
 $3 = $1; //@line 705 "emscripten/hgiox.cpp"
 $4 = $3 >> 16; //@line 705 "emscripten/hgiox.cpp"
 $5 = $4 & 255; //@line 705 "emscripten/hgiox.cpp"
 $rval = $5; //@line 705 "emscripten/hgiox.cpp"
 $6 = $1; //@line 706 "emscripten/hgiox.cpp"
 $7 = $6 >> 8; //@line 706 "emscripten/hgiox.cpp"
 $8 = $7 & 255; //@line 706 "emscripten/hgiox.cpp"
 $gval = $8; //@line 706 "emscripten/hgiox.cpp"
 $9 = $1; //@line 707 "emscripten/hgiox.cpp"
 $10 = $9 & 255; //@line 707 "emscripten/hgiox.cpp"
 $bval = $10; //@line 707 "emscripten/hgiox.cpp"
 $11 = $rval; //@line 709 "emscripten/hgiox.cpp"
 $12 = $11&255; //@line 709 "emscripten/hgiox.cpp"
 $13 = $0; //@line 709 "emscripten/hgiox.cpp"
 $14 = $13<<2; //@line 709 "emscripten/hgiox.cpp"
 $15 = (25256 + ($14)|0); //@line 709 "emscripten/hgiox.cpp"
 HEAP8[$15>>0] = $12; //@line 709 "emscripten/hgiox.cpp"
 $16 = $gval; //@line 710 "emscripten/hgiox.cpp"
 $17 = $16&255; //@line 710 "emscripten/hgiox.cpp"
 $18 = $0; //@line 710 "emscripten/hgiox.cpp"
 $19 = $18<<2; //@line 710 "emscripten/hgiox.cpp"
 $20 = (($19) + 1)|0; //@line 710 "emscripten/hgiox.cpp"
 $21 = (25256 + ($20)|0); //@line 710 "emscripten/hgiox.cpp"
 HEAP8[$21>>0] = $17; //@line 710 "emscripten/hgiox.cpp"
 $22 = $bval; //@line 711 "emscripten/hgiox.cpp"
 $23 = $22&255; //@line 711 "emscripten/hgiox.cpp"
 $24 = $0; //@line 711 "emscripten/hgiox.cpp"
 $25 = $24<<2; //@line 711 "emscripten/hgiox.cpp"
 $26 = (($25) + 2)|0; //@line 711 "emscripten/hgiox.cpp"
 $27 = (25256 + ($26)|0); //@line 711 "emscripten/hgiox.cpp"
 HEAP8[$27>>0] = $23; //@line 711 "emscripten/hgiox.cpp"
 $28 = $2; //@line 712 "emscripten/hgiox.cpp"
 $29 = $28&255; //@line 712 "emscripten/hgiox.cpp"
 $30 = $0; //@line 712 "emscripten/hgiox.cpp"
 $31 = $30<<2; //@line 712 "emscripten/hgiox.cpp"
 $32 = (($31) + 3)|0; //@line 712 "emscripten/hgiox.cpp"
 $33 = (25256 + ($32)|0); //@line 712 "emscripten/hgiox.cpp"
 HEAP8[$33>>0] = $29; //@line 712 "emscripten/hgiox.cpp"
 $34 = $0; //@line 714 "emscripten/hgiox.cpp"
 $35 = ($34|0)==(3); //@line 714 "emscripten/hgiox.cpp"
 if (!($35)) {
  STACKTOP = sp;return; //@line 718 "emscripten/hgiox.cpp"
 }
 _glEnableClientState(32886); //@line 715 "emscripten/hgiox.cpp"
 _glColorPointer(4,5121,0,(25256|0)); //@line 716 "emscripten/hgiox.cpp"
 STACKTOP = sp;return; //@line 718 "emscripten/hgiox.cpp"
}
function _hgio_boxfill($x,$y,$w,$h) {
 $x = +$x;
 $y = +$y;
 $w = +$w;
 $h = +$h;
 var $0 = 0.0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0.0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, $_colors = 0, $_vertexs = 0;
 var $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0;
 $_vertexs = sp + 16|0;
 $_colors = sp + 216|0;
 $0 = $x;
 $1 = $y;
 $2 = $w;
 $3 = $h;
 $4 = $0; //@line 780 "emscripten/hgiox.cpp"
 HEAPF32[$_vertexs>>2] = $4; //@line 780 "emscripten/hgiox.cpp"
 $5 = $1; //@line 780 "emscripten/hgiox.cpp"
 $6 = -$5; //@line 780 "emscripten/hgiox.cpp"
 $7 = (($_vertexs) + 4|0); //@line 780 "emscripten/hgiox.cpp"
 HEAPF32[$7>>2] = $6; //@line 780 "emscripten/hgiox.cpp"
 $8 = (($_vertexs) + 8|0); //@line 780 "emscripten/hgiox.cpp"
 HEAPF32[$8>>2] = 0.0; //@line 780 "emscripten/hgiox.cpp"
 $9 = $0; //@line 781 "emscripten/hgiox.cpp"
 $10 = (($_vertexs) + 12|0); //@line 781 "emscripten/hgiox.cpp"
 HEAPF32[$10>>2] = $9; //@line 781 "emscripten/hgiox.cpp"
 $11 = $1; //@line 781 "emscripten/hgiox.cpp"
 $12 = -$11; //@line 781 "emscripten/hgiox.cpp"
 $13 = $3; //@line 781 "emscripten/hgiox.cpp"
 $14 = $12 - $13; //@line 781 "emscripten/hgiox.cpp"
 $15 = (($_vertexs) + 16|0); //@line 781 "emscripten/hgiox.cpp"
 HEAPF32[$15>>2] = $14; //@line 781 "emscripten/hgiox.cpp"
 $16 = (($_vertexs) + 20|0); //@line 781 "emscripten/hgiox.cpp"
 HEAPF32[$16>>2] = 0.0; //@line 781 "emscripten/hgiox.cpp"
 $17 = $0; //@line 782 "emscripten/hgiox.cpp"
 $18 = $2; //@line 782 "emscripten/hgiox.cpp"
 $19 = $17 + $18; //@line 782 "emscripten/hgiox.cpp"
 $20 = (($_vertexs) + 24|0); //@line 782 "emscripten/hgiox.cpp"
 HEAPF32[$20>>2] = $19; //@line 782 "emscripten/hgiox.cpp"
 $21 = $1; //@line 782 "emscripten/hgiox.cpp"
 $22 = -$21; //@line 782 "emscripten/hgiox.cpp"
 $23 = (($_vertexs) + 28|0); //@line 782 "emscripten/hgiox.cpp"
 HEAPF32[$23>>2] = $22; //@line 782 "emscripten/hgiox.cpp"
 $24 = (($_vertexs) + 32|0); //@line 782 "emscripten/hgiox.cpp"
 HEAPF32[$24>>2] = 0.0; //@line 782 "emscripten/hgiox.cpp"
 $25 = $0; //@line 783 "emscripten/hgiox.cpp"
 $26 = $2; //@line 783 "emscripten/hgiox.cpp"
 $27 = $25 + $26; //@line 783 "emscripten/hgiox.cpp"
 $28 = (($_vertexs) + 36|0); //@line 783 "emscripten/hgiox.cpp"
 HEAPF32[$28>>2] = $27; //@line 783 "emscripten/hgiox.cpp"
 $29 = $1; //@line 783 "emscripten/hgiox.cpp"
 $30 = -$29; //@line 783 "emscripten/hgiox.cpp"
 $31 = $3; //@line 783 "emscripten/hgiox.cpp"
 $32 = $30 - $31; //@line 783 "emscripten/hgiox.cpp"
 $33 = (($_vertexs) + 40|0); //@line 783 "emscripten/hgiox.cpp"
 HEAPF32[$33>>2] = $32; //@line 783 "emscripten/hgiox.cpp"
 $34 = (($_vertexs) + 44|0); //@line 783 "emscripten/hgiox.cpp"
 HEAPF32[$34>>2] = 0.0; //@line 783 "emscripten/hgiox.cpp"
 $i = 0; //@line 786 "emscripten/hgiox.cpp"
 while(1) {
  $35 = $i; //@line 786 "emscripten/hgiox.cpp"
  $36 = ($35|0)<(4); //@line 786 "emscripten/hgiox.cpp"
  if (!($36)) {
   break;
  }
  $37 = HEAP8[25208>>0]|0; //@line 787 "emscripten/hgiox.cpp"
  $38 = $i; //@line 787 "emscripten/hgiox.cpp"
  $39 = $38<<2; //@line 787 "emscripten/hgiox.cpp"
  $40 = (($_colors) + ($39)|0); //@line 787 "emscripten/hgiox.cpp"
  HEAP8[$40>>0] = $37; //@line 787 "emscripten/hgiox.cpp"
  $41 = HEAP8[((25208 + 1|0))>>0]|0; //@line 788 "emscripten/hgiox.cpp"
  $42 = $i; //@line 788 "emscripten/hgiox.cpp"
  $43 = $42<<2; //@line 788 "emscripten/hgiox.cpp"
  $44 = (($43) + 1)|0; //@line 788 "emscripten/hgiox.cpp"
  $45 = (($_colors) + ($44)|0); //@line 788 "emscripten/hgiox.cpp"
  HEAP8[$45>>0] = $41; //@line 788 "emscripten/hgiox.cpp"
  $46 = HEAP8[((25208 + 2|0))>>0]|0; //@line 789 "emscripten/hgiox.cpp"
  $47 = $i; //@line 789 "emscripten/hgiox.cpp"
  $48 = $47<<2; //@line 789 "emscripten/hgiox.cpp"
  $49 = (($48) + 2)|0; //@line 789 "emscripten/hgiox.cpp"
  $50 = (($_colors) + ($49)|0); //@line 789 "emscripten/hgiox.cpp"
  HEAP8[$50>>0] = $46; //@line 789 "emscripten/hgiox.cpp"
  $51 = HEAP8[((25208 + 3|0))>>0]|0; //@line 790 "emscripten/hgiox.cpp"
  $52 = $i; //@line 790 "emscripten/hgiox.cpp"
  $53 = $52<<2; //@line 790 "emscripten/hgiox.cpp"
  $54 = (($53) + 3)|0; //@line 790 "emscripten/hgiox.cpp"
  $55 = (($_colors) + ($54)|0); //@line 790 "emscripten/hgiox.cpp"
  HEAP8[$55>>0] = $51; //@line 790 "emscripten/hgiox.cpp"
  $56 = $i; //@line 786 "emscripten/hgiox.cpp"
  $57 = (($56) + 1)|0; //@line 786 "emscripten/hgiox.cpp"
  $i = $57; //@line 786 "emscripten/hgiox.cpp"
 }
 _hgio_setBlendModeFlat(0); //@line 794 "emscripten/hgiox.cpp"
 _glEnableClientState(32886); //@line 796 "emscripten/hgiox.cpp"
 _glVertexPointer(3,5126,0,($_vertexs|0)); //@line 797 "emscripten/hgiox.cpp"
 _glColorPointer(4,5121,0,($_colors|0)); //@line 798 "emscripten/hgiox.cpp"
 _glDrawArrays(5,0,4); //@line 799 "emscripten/hgiox.cpp"
 STACKTOP = sp;return; //@line 800 "emscripten/hgiox.cpp"
}
function _hgio_circleLine($x,$y,$rx,$ry) {
 $x = +$x;
 $y = +$y;
 $rx = +$rx;
 $ry = +$ry;
 var $0 = 0.0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0.0, $9 = 0.0, $_colors = 0, $_vertexs = 0, $angle = 0.0, $i = 0, $i1 = 0;
 var $length = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4144|0;
 $_vertexs = sp + 24|0;
 $_colors = sp + 3112|0;
 $0 = $x;
 $1 = $y;
 $2 = $rx;
 $3 = $ry;
 $length = 20; //@line 807 "emscripten/hgiox.cpp"
 $i = 0; //@line 810 "emscripten/hgiox.cpp"
 while(1) {
  $4 = $i; //@line 810 "emscripten/hgiox.cpp"
  $5 = $length; //@line 810 "emscripten/hgiox.cpp"
  $6 = ($4|0)<($5|0); //@line 810 "emscripten/hgiox.cpp"
  if (!($6)) {
   break;
  }
  $7 = $i; //@line 811 "emscripten/hgiox.cpp"
  $8 = (+($7|0)); //@line 811 "emscripten/hgiox.cpp"
  $9 = 6.283185307179586232 * $8; //@line 811 "emscripten/hgiox.cpp"
  $10 = $length; //@line 811 "emscripten/hgiox.cpp"
  $11 = (+($10|0)); //@line 811 "emscripten/hgiox.cpp"
  $12 = $9 / $11; //@line 811 "emscripten/hgiox.cpp"
  $13 = $12; //@line 811 "emscripten/hgiox.cpp"
  $angle = $13; //@line 811 "emscripten/hgiox.cpp"
  $14 = $0; //@line 812 "emscripten/hgiox.cpp"
  $15 = $14; //@line 812 "emscripten/hgiox.cpp"
  $16 = $angle; //@line 812 "emscripten/hgiox.cpp"
  $17 = $16; //@line 812 "emscripten/hgiox.cpp"
  $18 = (+Math_cos((+$17))); //@line 812 "emscripten/hgiox.cpp"
  $19 = $2; //@line 812 "emscripten/hgiox.cpp"
  $20 = $19; //@line 812 "emscripten/hgiox.cpp"
  $21 = $18 * $20; //@line 812 "emscripten/hgiox.cpp"
  $22 = $15 + $21; //@line 812 "emscripten/hgiox.cpp"
  $23 = $22; //@line 812 "emscripten/hgiox.cpp"
  $24 = $i; //@line 812 "emscripten/hgiox.cpp"
  $25 = ($24*3)|0; //@line 812 "emscripten/hgiox.cpp"
  $26 = (($25) + 0)|0; //@line 812 "emscripten/hgiox.cpp"
  $27 = (($_vertexs) + ($26<<2)|0); //@line 812 "emscripten/hgiox.cpp"
  HEAPF32[$27>>2] = $23; //@line 812 "emscripten/hgiox.cpp"
  $28 = $1; //@line 813 "emscripten/hgiox.cpp"
  $29 = -$28; //@line 813 "emscripten/hgiox.cpp"
  $30 = $29; //@line 813 "emscripten/hgiox.cpp"
  $31 = $angle; //@line 813 "emscripten/hgiox.cpp"
  $32 = $31; //@line 813 "emscripten/hgiox.cpp"
  $33 = (+Math_sin((+$32))); //@line 813 "emscripten/hgiox.cpp"
  $34 = $3; //@line 813 "emscripten/hgiox.cpp"
  $35 = $34; //@line 813 "emscripten/hgiox.cpp"
  $36 = $33 * $35; //@line 813 "emscripten/hgiox.cpp"
  $37 = $30 + $36; //@line 813 "emscripten/hgiox.cpp"
  $38 = $37; //@line 813 "emscripten/hgiox.cpp"
  $39 = $i; //@line 813 "emscripten/hgiox.cpp"
  $40 = ($39*3)|0; //@line 813 "emscripten/hgiox.cpp"
  $41 = (($40) + 1)|0; //@line 813 "emscripten/hgiox.cpp"
  $42 = (($_vertexs) + ($41<<2)|0); //@line 813 "emscripten/hgiox.cpp"
  HEAPF32[$42>>2] = $38; //@line 813 "emscripten/hgiox.cpp"
  $43 = $i; //@line 814 "emscripten/hgiox.cpp"
  $44 = ($43*3)|0; //@line 814 "emscripten/hgiox.cpp"
  $45 = (($44) + 2)|0; //@line 814 "emscripten/hgiox.cpp"
  $46 = (($_vertexs) + ($45<<2)|0); //@line 814 "emscripten/hgiox.cpp"
  HEAPF32[$46>>2] = 0.0; //@line 814 "emscripten/hgiox.cpp"
  $47 = $i; //@line 810 "emscripten/hgiox.cpp"
  $48 = (($47) + 1)|0; //@line 810 "emscripten/hgiox.cpp"
  $i = $48; //@line 810 "emscripten/hgiox.cpp"
 }
 $i1 = 0; //@line 818 "emscripten/hgiox.cpp"
 while(1) {
  $49 = $i1; //@line 818 "emscripten/hgiox.cpp"
  $50 = $length; //@line 818 "emscripten/hgiox.cpp"
  $51 = ($49|0)<($50|0); //@line 818 "emscripten/hgiox.cpp"
  if (!($51)) {
   break;
  }
  $52 = HEAP8[25208>>0]|0; //@line 819 "emscripten/hgiox.cpp"
  $53 = $i1; //@line 819 "emscripten/hgiox.cpp"
  $54 = $53<<2; //@line 819 "emscripten/hgiox.cpp"
  $55 = (($_colors) + ($54)|0); //@line 819 "emscripten/hgiox.cpp"
  HEAP8[$55>>0] = $52; //@line 819 "emscripten/hgiox.cpp"
  $56 = HEAP8[((25208 + 1|0))>>0]|0; //@line 820 "emscripten/hgiox.cpp"
  $57 = $i1; //@line 820 "emscripten/hgiox.cpp"
  $58 = $57<<2; //@line 820 "emscripten/hgiox.cpp"
  $59 = (($58) + 1)|0; //@line 820 "emscripten/hgiox.cpp"
  $60 = (($_colors) + ($59)|0); //@line 820 "emscripten/hgiox.cpp"
  HEAP8[$60>>0] = $56; //@line 820 "emscripten/hgiox.cpp"
  $61 = HEAP8[((25208 + 2|0))>>0]|0; //@line 821 "emscripten/hgiox.cpp"
  $62 = $i1; //@line 821 "emscripten/hgiox.cpp"
  $63 = $62<<2; //@line 821 "emscripten/hgiox.cpp"
  $64 = (($63) + 2)|0; //@line 821 "emscripten/hgiox.cpp"
  $65 = (($_colors) + ($64)|0); //@line 821 "emscripten/hgiox.cpp"
  HEAP8[$65>>0] = $61; //@line 821 "emscripten/hgiox.cpp"
  $66 = HEAP8[((25208 + 3|0))>>0]|0; //@line 822 "emscripten/hgiox.cpp"
  $67 = $i1; //@line 822 "emscripten/hgiox.cpp"
  $68 = $67<<2; //@line 822 "emscripten/hgiox.cpp"
  $69 = (($68) + 3)|0; //@line 822 "emscripten/hgiox.cpp"
  $70 = (($_colors) + ($69)|0); //@line 822 "emscripten/hgiox.cpp"
  HEAP8[$70>>0] = $66; //@line 822 "emscripten/hgiox.cpp"
  $71 = $i1; //@line 818 "emscripten/hgiox.cpp"
  $72 = (($71) + 1)|0; //@line 818 "emscripten/hgiox.cpp"
  $i1 = $72; //@line 818 "emscripten/hgiox.cpp"
 }
 _hgio_setBlendModeFlat(0); //@line 826 "emscripten/hgiox.cpp"
 _glEnableClientState(32886); //@line 828 "emscripten/hgiox.cpp"
 _glVertexPointer(3,5126,0,($_vertexs|0)); //@line 829 "emscripten/hgiox.cpp"
 _glColorPointer(4,5121,0,($_colors|0)); //@line 830 "emscripten/hgiox.cpp"
 $73 = $length; //@line 831 "emscripten/hgiox.cpp"
 _glDrawArrays(2,0,($73|0)); //@line 831 "emscripten/hgiox.cpp"
 $74 = $length; //@line 832 "emscripten/hgiox.cpp"
 _glDrawArrays(0,0,($74|0)); //@line 832 "emscripten/hgiox.cpp"
 STACKTOP = sp;return; //@line 833 "emscripten/hgiox.cpp"
}
function _hgio_circleFill($x,$y,$rx,$ry) {
 $x = +$x;
 $y = +$y;
 $rx = +$rx;
 $ry = +$ry;
 var $0 = 0.0, $1 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0.0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0.0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0;
 var $_colors = 0, $_vertexs = 0, $angle = 0.0, $i = 0, $i1 = 0, $length = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4144|0;
 $_vertexs = sp + 24|0;
 $_colors = sp + 3112|0;
 $0 = $x;
 $1 = $y;
 $2 = $rx;
 $3 = $ry;
 $length = 22; //@line 840 "emscripten/hgiox.cpp"
 $4 = $0; //@line 843 "emscripten/hgiox.cpp"
 HEAPF32[$_vertexs>>2] = $4; //@line 843 "emscripten/hgiox.cpp"
 $5 = $1; //@line 844 "emscripten/hgiox.cpp"
 $6 = -$5; //@line 844 "emscripten/hgiox.cpp"
 $7 = (($_vertexs) + 4|0); //@line 844 "emscripten/hgiox.cpp"
 HEAPF32[$7>>2] = $6; //@line 844 "emscripten/hgiox.cpp"
 $8 = (($_vertexs) + 8|0); //@line 845 "emscripten/hgiox.cpp"
 HEAPF32[$8>>2] = 0.0; //@line 845 "emscripten/hgiox.cpp"
 $i = 1; //@line 846 "emscripten/hgiox.cpp"
 while(1) {
  $9 = $i; //@line 846 "emscripten/hgiox.cpp"
  $10 = $length; //@line 846 "emscripten/hgiox.cpp"
  $11 = ($9|0)<($10|0); //@line 846 "emscripten/hgiox.cpp"
  if (!($11)) {
   break;
  }
  $12 = $i; //@line 847 "emscripten/hgiox.cpp"
  $13 = (+($12|0)); //@line 847 "emscripten/hgiox.cpp"
  $14 = 6.283185307179586232 * $13; //@line 847 "emscripten/hgiox.cpp"
  $15 = $length; //@line 847 "emscripten/hgiox.cpp"
  $16 = (($15) - 2)|0; //@line 847 "emscripten/hgiox.cpp"
  $17 = (+($16|0)); //@line 847 "emscripten/hgiox.cpp"
  $18 = $14 / $17; //@line 847 "emscripten/hgiox.cpp"
  $19 = $18; //@line 847 "emscripten/hgiox.cpp"
  $angle = $19; //@line 847 "emscripten/hgiox.cpp"
  $20 = $0; //@line 848 "emscripten/hgiox.cpp"
  $21 = $20; //@line 848 "emscripten/hgiox.cpp"
  $22 = $angle; //@line 848 "emscripten/hgiox.cpp"
  $23 = $22; //@line 848 "emscripten/hgiox.cpp"
  $24 = (+Math_cos((+$23))); //@line 848 "emscripten/hgiox.cpp"
  $25 = $2; //@line 848 "emscripten/hgiox.cpp"
  $26 = $25; //@line 848 "emscripten/hgiox.cpp"
  $27 = $24 * $26; //@line 848 "emscripten/hgiox.cpp"
  $28 = $21 + $27; //@line 848 "emscripten/hgiox.cpp"
  $29 = $28; //@line 848 "emscripten/hgiox.cpp"
  $30 = $i; //@line 848 "emscripten/hgiox.cpp"
  $31 = ($30*3)|0; //@line 848 "emscripten/hgiox.cpp"
  $32 = (($31) + 0)|0; //@line 848 "emscripten/hgiox.cpp"
  $33 = (($_vertexs) + ($32<<2)|0); //@line 848 "emscripten/hgiox.cpp"
  HEAPF32[$33>>2] = $29; //@line 848 "emscripten/hgiox.cpp"
  $34 = $1; //@line 849 "emscripten/hgiox.cpp"
  $35 = -$34; //@line 849 "emscripten/hgiox.cpp"
  $36 = $35; //@line 849 "emscripten/hgiox.cpp"
  $37 = $angle; //@line 849 "emscripten/hgiox.cpp"
  $38 = $37; //@line 849 "emscripten/hgiox.cpp"
  $39 = (+Math_sin((+$38))); //@line 849 "emscripten/hgiox.cpp"
  $40 = $3; //@line 849 "emscripten/hgiox.cpp"
  $41 = $40; //@line 849 "emscripten/hgiox.cpp"
  $42 = $39 * $41; //@line 849 "emscripten/hgiox.cpp"
  $43 = $36 + $42; //@line 849 "emscripten/hgiox.cpp"
  $44 = $43; //@line 849 "emscripten/hgiox.cpp"
  $45 = $i; //@line 849 "emscripten/hgiox.cpp"
  $46 = ($45*3)|0; //@line 849 "emscripten/hgiox.cpp"
  $47 = (($46) + 1)|0; //@line 849 "emscripten/hgiox.cpp"
  $48 = (($_vertexs) + ($47<<2)|0); //@line 849 "emscripten/hgiox.cpp"
  HEAPF32[$48>>2] = $44; //@line 849 "emscripten/hgiox.cpp"
  $49 = $i; //@line 850 "emscripten/hgiox.cpp"
  $50 = ($49*3)|0; //@line 850 "emscripten/hgiox.cpp"
  $51 = (($50) + 2)|0; //@line 850 "emscripten/hgiox.cpp"
  $52 = (($_vertexs) + ($51<<2)|0); //@line 850 "emscripten/hgiox.cpp"
  HEAPF32[$52>>2] = 0.0; //@line 850 "emscripten/hgiox.cpp"
  $53 = $i; //@line 846 "emscripten/hgiox.cpp"
  $54 = (($53) + 1)|0; //@line 846 "emscripten/hgiox.cpp"
  $i = $54; //@line 846 "emscripten/hgiox.cpp"
 }
 $i1 = 0; //@line 854 "emscripten/hgiox.cpp"
 while(1) {
  $55 = $i1; //@line 854 "emscripten/hgiox.cpp"
  $56 = $length; //@line 854 "emscripten/hgiox.cpp"
  $57 = ($55|0)<($56|0); //@line 854 "emscripten/hgiox.cpp"
  if (!($57)) {
   break;
  }
  $58 = HEAP8[25208>>0]|0; //@line 855 "emscripten/hgiox.cpp"
  $59 = $i1; //@line 855 "emscripten/hgiox.cpp"
  $60 = $59<<2; //@line 855 "emscripten/hgiox.cpp"
  $61 = (($_colors) + ($60)|0); //@line 855 "emscripten/hgiox.cpp"
  HEAP8[$61>>0] = $58; //@line 855 "emscripten/hgiox.cpp"
  $62 = HEAP8[((25208 + 1|0))>>0]|0; //@line 856 "emscripten/hgiox.cpp"
  $63 = $i1; //@line 856 "emscripten/hgiox.cpp"
  $64 = $63<<2; //@line 856 "emscripten/hgiox.cpp"
  $65 = (($64) + 1)|0; //@line 856 "emscripten/hgiox.cpp"
  $66 = (($_colors) + ($65)|0); //@line 856 "emscripten/hgiox.cpp"
  HEAP8[$66>>0] = $62; //@line 856 "emscripten/hgiox.cpp"
  $67 = HEAP8[((25208 + 2|0))>>0]|0; //@line 857 "emscripten/hgiox.cpp"
  $68 = $i1; //@line 857 "emscripten/hgiox.cpp"
  $69 = $68<<2; //@line 857 "emscripten/hgiox.cpp"
  $70 = (($69) + 2)|0; //@line 857 "emscripten/hgiox.cpp"
  $71 = (($_colors) + ($70)|0); //@line 857 "emscripten/hgiox.cpp"
  HEAP8[$71>>0] = $67; //@line 857 "emscripten/hgiox.cpp"
  $72 = HEAP8[((25208 + 3|0))>>0]|0; //@line 858 "emscripten/hgiox.cpp"
  $73 = $i1; //@line 858 "emscripten/hgiox.cpp"
  $74 = $73<<2; //@line 858 "emscripten/hgiox.cpp"
  $75 = (($74) + 3)|0; //@line 858 "emscripten/hgiox.cpp"
  $76 = (($_colors) + ($75)|0); //@line 858 "emscripten/hgiox.cpp"
  HEAP8[$76>>0] = $72; //@line 858 "emscripten/hgiox.cpp"
  $77 = $i1; //@line 854 "emscripten/hgiox.cpp"
  $78 = (($77) + 1)|0; //@line 854 "emscripten/hgiox.cpp"
  $i1 = $78; //@line 854 "emscripten/hgiox.cpp"
 }
 _hgio_setBlendModeFlat(0); //@line 862 "emscripten/hgiox.cpp"
 _glEnableClientState(32886); //@line 864 "emscripten/hgiox.cpp"
 _glVertexPointer(3,5126,0,($_vertexs|0)); //@line 865 "emscripten/hgiox.cpp"
 _glColorPointer(4,5121,0,($_colors|0)); //@line 866 "emscripten/hgiox.cpp"
 $79 = $length; //@line 867 "emscripten/hgiox.cpp"
 _glDrawArrays(6,0,($79|0)); //@line 867 "emscripten/hgiox.cpp"
 STACKTOP = sp;return; //@line 868 "emscripten/hgiox.cpp"
}
function _hgio_line($bm,$x,$y) {
 $bm = $bm|0;
 $x = +$x;
 $y = +$y;
 var $0 = 0, $1 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $bm;
 $1 = $x;
 $2 = $y;
 $3 = $0; //@line 880 "emscripten/hgiox.cpp"
 $4 = ($3|0)==(0|0); //@line 880 "emscripten/hgiox.cpp"
 if ($4) {
  STACKTOP = sp;return; //@line 897 "emscripten/hgiox.cpp"
 }
 $5 = $0; //@line 881 "emscripten/hgiox.cpp"
 $6 = (($5) + 28|0); //@line 881 "emscripten/hgiox.cpp"
 $7 = HEAP32[$6>>2]|0; //@line 881 "emscripten/hgiox.cpp"
 $8 = ($7|0)!=(2); //@line 881 "emscripten/hgiox.cpp"
 if ($8) {
  $9 = (___cxa_allocate_exception(4)|0); //@line 881 "emscripten/hgiox.cpp"
  HEAP32[$9>>2] = 21; //@line 881 "emscripten/hgiox.cpp"
  ___cxa_throw(($9|0),(624|0),(0|0)); //@line 881 "emscripten/hgiox.cpp"
  // unreachable; //@line 881 "emscripten/hgiox.cpp"
 }
 $10 = $0; //@line 883 "emscripten/hgiox.cpp"
 $11 = (($10) + 104|0); //@line 883 "emscripten/hgiox.cpp"
 $12 = HEAP32[$11>>2]|0; //@line 883 "emscripten/hgiox.cpp"
 _hgio_setColor($12); //@line 883 "emscripten/hgiox.cpp"
 $i = 0; //@line 886 "emscripten/hgiox.cpp"
 while(1) {
  $13 = $i; //@line 886 "emscripten/hgiox.cpp"
  $14 = ($13|0)<(2); //@line 886 "emscripten/hgiox.cpp"
  if (!($14)) {
   break;
  }
  $15 = HEAP8[25208>>0]|0; //@line 887 "emscripten/hgiox.cpp"
  $16 = $i; //@line 887 "emscripten/hgiox.cpp"
  $17 = $16<<2; //@line 887 "emscripten/hgiox.cpp"
  $18 = (25272 + ($17)|0); //@line 887 "emscripten/hgiox.cpp"
  HEAP8[$18>>0] = $15; //@line 887 "emscripten/hgiox.cpp"
  $19 = HEAP8[((25208 + 1|0))>>0]|0; //@line 888 "emscripten/hgiox.cpp"
  $20 = $i; //@line 888 "emscripten/hgiox.cpp"
  $21 = $20<<2; //@line 888 "emscripten/hgiox.cpp"
  $22 = (($21) + 1)|0; //@line 888 "emscripten/hgiox.cpp"
  $23 = (25272 + ($22)|0); //@line 888 "emscripten/hgiox.cpp"
  HEAP8[$23>>0] = $19; //@line 888 "emscripten/hgiox.cpp"
  $24 = HEAP8[((25208 + 2|0))>>0]|0; //@line 889 "emscripten/hgiox.cpp"
  $25 = $i; //@line 889 "emscripten/hgiox.cpp"
  $26 = $25<<2; //@line 889 "emscripten/hgiox.cpp"
  $27 = (($26) + 2)|0; //@line 889 "emscripten/hgiox.cpp"
  $28 = (25272 + ($27)|0); //@line 889 "emscripten/hgiox.cpp"
  HEAP8[$28>>0] = $24; //@line 889 "emscripten/hgiox.cpp"
  $29 = HEAP8[((25208 + 3|0))>>0]|0; //@line 890 "emscripten/hgiox.cpp"
  $30 = $i; //@line 890 "emscripten/hgiox.cpp"
  $31 = $30<<2; //@line 890 "emscripten/hgiox.cpp"
  $32 = (($31) + 3)|0; //@line 890 "emscripten/hgiox.cpp"
  $33 = (25272 + ($32)|0); //@line 890 "emscripten/hgiox.cpp"
  HEAP8[$33>>0] = $29; //@line 890 "emscripten/hgiox.cpp"
  $34 = $i; //@line 886 "emscripten/hgiox.cpp"
  $35 = (($34) + 1)|0; //@line 886 "emscripten/hgiox.cpp"
  $i = $35; //@line 886 "emscripten/hgiox.cpp"
 }
 $36 = $1; //@line 893 "emscripten/hgiox.cpp"
 $37 = $36 + 0.375; //@line 893 "emscripten/hgiox.cpp"
 HEAPF32[25336>>2] = $37; //@line 893 "emscripten/hgiox.cpp"
 $38 = $2; //@line 894 "emscripten/hgiox.cpp"
 $39 = $38 + 0.375; //@line 894 "emscripten/hgiox.cpp"
 HEAPF32[25344>>2] = $39; //@line 894 "emscripten/hgiox.cpp"
 _hgio_setBlendModeFlat(0); //@line 896 "emscripten/hgiox.cpp"
 _ChangeTex(-1); //@line 897 "emscripten/hgiox.cpp"
 STACKTOP = sp;return; //@line 897 "emscripten/hgiox.cpp"
}
function _hgio_line2($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $x;
 $1 = $y;
 $2 = +HEAPF32[25336>>2]; //@line 910 "emscripten/hgiox.cpp"
 HEAPF32[25352>>2] = $2; //@line 910 "emscripten/hgiox.cpp"
 $3 = +HEAPF32[25344>>2]; //@line 910 "emscripten/hgiox.cpp"
 $4 = -$3; //@line 910 "emscripten/hgiox.cpp"
 HEAPF32[((25352 + 4|0))>>2] = $4; //@line 910 "emscripten/hgiox.cpp"
 HEAPF32[((25352 + 8|0))>>2] = 0.0; //@line 910 "emscripten/hgiox.cpp"
 $5 = $0; //@line 911 "emscripten/hgiox.cpp"
 $6 = $5 + 0.375; //@line 911 "emscripten/hgiox.cpp"
 HEAPF32[25336>>2] = $6; //@line 911 "emscripten/hgiox.cpp"
 $7 = $1; //@line 912 "emscripten/hgiox.cpp"
 $8 = $7 + 0.375; //@line 912 "emscripten/hgiox.cpp"
 HEAPF32[25344>>2] = $8; //@line 912 "emscripten/hgiox.cpp"
 $9 = +HEAPF32[25336>>2]; //@line 913 "emscripten/hgiox.cpp"
 HEAPF32[((25352 + 12|0))>>2] = $9; //@line 913 "emscripten/hgiox.cpp"
 $10 = +HEAPF32[25344>>2]; //@line 913 "emscripten/hgiox.cpp"
 $11 = -$10; //@line 913 "emscripten/hgiox.cpp"
 HEAPF32[((25352 + 16|0))>>2] = $11; //@line 913 "emscripten/hgiox.cpp"
 HEAPF32[((25352 + 20|0))>>2] = 0.0; //@line 913 "emscripten/hgiox.cpp"
 _glEnableClientState(32886); //@line 917 "emscripten/hgiox.cpp"
 _glVertexPointer(3,5126,0,(25352|0)); //@line 918 "emscripten/hgiox.cpp"
 _glColorPointer(4,5121,0,(25272|0)); //@line 919 "emscripten/hgiox.cpp"
 _glDrawArrays(3,0,2); //@line 920 "emscripten/hgiox.cpp"
 STACKTOP = sp;return; //@line 921 "emscripten/hgiox.cpp"
}
function _hgio_boxf($bm,$x1,$y1,$x2,$y2) {
 $bm = $bm|0;
 $x1 = +$x1;
 $y1 = +$y1;
 $x2 = +$x2;
 $y2 = +$y2;
 var $0 = 0, $1 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $bm;
 $1 = $x1;
 $2 = $y1;
 $3 = $x2;
 $4 = $y2;
 $5 = $0; //@line 928 "emscripten/hgiox.cpp"
 $6 = ($5|0)==(0|0); //@line 928 "emscripten/hgiox.cpp"
 if ($6) {
  STACKTOP = sp;return; //@line 933 "emscripten/hgiox.cpp"
 }
 $7 = $0; //@line 929 "emscripten/hgiox.cpp"
 $8 = (($7) + 28|0); //@line 929 "emscripten/hgiox.cpp"
 $9 = HEAP32[$8>>2]|0; //@line 929 "emscripten/hgiox.cpp"
 $10 = ($9|0)!=(2); //@line 929 "emscripten/hgiox.cpp"
 if ($10) {
  $11 = (___cxa_allocate_exception(4)|0); //@line 929 "emscripten/hgiox.cpp"
  HEAP32[$11>>2] = 21; //@line 929 "emscripten/hgiox.cpp"
  ___cxa_throw(($11|0),(624|0),(0|0)); //@line 929 "emscripten/hgiox.cpp"
  // unreachable; //@line 929 "emscripten/hgiox.cpp"
 }
 _ChangeTex(-1); //@line 931 "emscripten/hgiox.cpp"
 $12 = $0; //@line 932 "emscripten/hgiox.cpp"
 $13 = (($12) + 104|0); //@line 932 "emscripten/hgiox.cpp"
 $14 = HEAP32[$13>>2]|0; //@line 932 "emscripten/hgiox.cpp"
 _hgio_setColor($14); //@line 932 "emscripten/hgiox.cpp"
 $15 = $1; //@line 933 "emscripten/hgiox.cpp"
 $16 = $2; //@line 933 "emscripten/hgiox.cpp"
 $17 = $3; //@line 933 "emscripten/hgiox.cpp"
 $18 = $1; //@line 933 "emscripten/hgiox.cpp"
 $19 = $17 - $18; //@line 933 "emscripten/hgiox.cpp"
 $20 = $4; //@line 933 "emscripten/hgiox.cpp"
 $21 = $2; //@line 933 "emscripten/hgiox.cpp"
 $22 = $20 - $21; //@line 933 "emscripten/hgiox.cpp"
 _hgio_boxfill($15,$16,$19,$22); //@line 933 "emscripten/hgiox.cpp"
 STACKTOP = sp;return; //@line 933 "emscripten/hgiox.cpp"
}
function _hgio_circle($bm,$x1,$y1,$x2,$y2,$mode) {
 $bm = $bm|0;
 $x1 = +$x1;
 $y1 = +$y1;
 $x2 = +$x2;
 $y2 = +$y2;
 $mode = $mode|0;
 var $0 = 0, $1 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0;
 var $45 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $rx = 0.0, $ry = 0.0, $xx = 0.0, $yy = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = $bm;
 $1 = $x1;
 $2 = $y1;
 $3 = $x2;
 $4 = $y2;
 $5 = $mode;
 $6 = $0; //@line 942 "emscripten/hgiox.cpp"
 $7 = ($6|0)==(0|0); //@line 942 "emscripten/hgiox.cpp"
 if ($7) {
  STACKTOP = sp;return; //@line 955 "emscripten/hgiox.cpp"
 }
 $8 = $0; //@line 943 "emscripten/hgiox.cpp"
 $9 = (($8) + 28|0); //@line 943 "emscripten/hgiox.cpp"
 $10 = HEAP32[$9>>2]|0; //@line 943 "emscripten/hgiox.cpp"
 $11 = ($10|0)!=(2); //@line 943 "emscripten/hgiox.cpp"
 if ($11) {
  $12 = (___cxa_allocate_exception(4)|0); //@line 943 "emscripten/hgiox.cpp"
  HEAP32[$12>>2] = 21; //@line 943 "emscripten/hgiox.cpp"
  ___cxa_throw(($12|0),(624|0),(0|0)); //@line 943 "emscripten/hgiox.cpp"
  // unreachable; //@line 943 "emscripten/hgiox.cpp"
 }
 $13 = $3; //@line 945 "emscripten/hgiox.cpp"
 $14 = $1; //@line 945 "emscripten/hgiox.cpp"
 $15 = $13 - $14; //@line 945 "emscripten/hgiox.cpp"
 $16 = (~~(($15))); //@line 945 "emscripten/hgiox.cpp"
 $17 = (Math_abs(($16|0))|0); //@line 945 "emscripten/hgiox.cpp"
 $18 = (+($17|0)); //@line 945 "emscripten/hgiox.cpp"
 $19 = $18 * 0.5; //@line 945 "emscripten/hgiox.cpp"
 $rx = $19; //@line 945 "emscripten/hgiox.cpp"
 $20 = $4; //@line 946 "emscripten/hgiox.cpp"
 $21 = $2; //@line 946 "emscripten/hgiox.cpp"
 $22 = $20 - $21; //@line 946 "emscripten/hgiox.cpp"
 $23 = (~~(($22))); //@line 946 "emscripten/hgiox.cpp"
 $24 = (Math_abs(($23|0))|0); //@line 946 "emscripten/hgiox.cpp"
 $25 = (+($24|0)); //@line 946 "emscripten/hgiox.cpp"
 $26 = $25 * 0.5; //@line 946 "emscripten/hgiox.cpp"
 $ry = $26; //@line 946 "emscripten/hgiox.cpp"
 $27 = $1; //@line 947 "emscripten/hgiox.cpp"
 $28 = $rx; //@line 947 "emscripten/hgiox.cpp"
 $29 = $27 + $28; //@line 947 "emscripten/hgiox.cpp"
 $xx = $29; //@line 947 "emscripten/hgiox.cpp"
 $30 = $2; //@line 948 "emscripten/hgiox.cpp"
 $31 = $ry; //@line 948 "emscripten/hgiox.cpp"
 $32 = $30 + $31; //@line 948 "emscripten/hgiox.cpp"
 $yy = $32; //@line 948 "emscripten/hgiox.cpp"
 _ChangeTex(-1); //@line 950 "emscripten/hgiox.cpp"
 $33 = $0; //@line 951 "emscripten/hgiox.cpp"
 $34 = (($33) + 104|0); //@line 951 "emscripten/hgiox.cpp"
 $35 = HEAP32[$34>>2]|0; //@line 951 "emscripten/hgiox.cpp"
 _hgio_setColor($35); //@line 951 "emscripten/hgiox.cpp"
 $36 = $5; //@line 952 "emscripten/hgiox.cpp"
 $37 = ($36|0)!=(0); //@line 952 "emscripten/hgiox.cpp"
 if ($37) {
  $38 = $xx; //@line 953 "emscripten/hgiox.cpp"
  $39 = $yy; //@line 953 "emscripten/hgiox.cpp"
  $40 = $rx; //@line 953 "emscripten/hgiox.cpp"
  $41 = $ry; //@line 953 "emscripten/hgiox.cpp"
  _hgio_circleFill($38,$39,$40,$41); //@line 953 "emscripten/hgiox.cpp"
  STACKTOP = sp;return; //@line 955 "emscripten/hgiox.cpp"
 } else {
  $42 = $xx; //@line 955 "emscripten/hgiox.cpp"
  $43 = $yy; //@line 955 "emscripten/hgiox.cpp"
  $44 = $rx; //@line 955 "emscripten/hgiox.cpp"
  $45 = $ry; //@line 955 "emscripten/hgiox.cpp"
  _hgio_circleLine($42,$43,$44,$45); //@line 955 "emscripten/hgiox.cpp"
  STACKTOP = sp;return; //@line 955 "emscripten/hgiox.cpp"
 }
}
function _hgio_fillrot($bm,$x,$y,$sx,$sy,$ang) {
 $bm = $bm|0;
 $x = +$x;
 $y = +$y;
 $sx = +$sx;
 $sy = +$sy;
 $ang = +$ang;
 var $0 = 0, $1 = 0.0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0.0;
 var $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0;
 var $49 = 0, $5 = 0.0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0;
 var $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0, $83 = 0, $84 = 0.0;
 var $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0.0, $flp = 0, $ofsx = 0.0, $ofsy = 0.0, $x0 = 0.0;
 var $x1 = 0.0, $y0 = 0.0, $y1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $0 = $bm;
 $1 = $x;
 $2 = $y;
 $3 = $sx;
 $4 = $sy;
 $5 = $ang;
 $6 = $0; //@line 964 "emscripten/hgiox.cpp"
 $7 = ($6|0)==(0|0); //@line 964 "emscripten/hgiox.cpp"
 if ($7) {
  STACKTOP = sp;return; //@line 1005 "emscripten/hgiox.cpp"
 }
 $8 = $0; //@line 965 "emscripten/hgiox.cpp"
 $9 = (($8) + 28|0); //@line 965 "emscripten/hgiox.cpp"
 $10 = HEAP32[$9>>2]|0; //@line 965 "emscripten/hgiox.cpp"
 $11 = ($10|0)!=(2); //@line 965 "emscripten/hgiox.cpp"
 if ($11) {
  $12 = (___cxa_allocate_exception(4)|0); //@line 965 "emscripten/hgiox.cpp"
  HEAP32[$12>>2] = 21; //@line 965 "emscripten/hgiox.cpp"
  ___cxa_throw(($12|0),(624|0),(0|0)); //@line 965 "emscripten/hgiox.cpp"
  // unreachable; //@line 965 "emscripten/hgiox.cpp"
 }
 $13 = $3; //@line 971 "emscripten/hgiox.cpp"
 $ofsx = $13; //@line 971 "emscripten/hgiox.cpp"
 $14 = $4; //@line 972 "emscripten/hgiox.cpp"
 $ofsy = $14; //@line 972 "emscripten/hgiox.cpp"
 $15 = $5; //@line 973 "emscripten/hgiox.cpp"
 $16 = $15; //@line 973 "emscripten/hgiox.cpp"
 $17 = (+Math_sin((+$16))); //@line 973 "emscripten/hgiox.cpp"
 $18 = $17; //@line 973 "emscripten/hgiox.cpp"
 $19 = -$18; //@line 973 "emscripten/hgiox.cpp"
 $x0 = $19; //@line 973 "emscripten/hgiox.cpp"
 $20 = $5; //@line 974 "emscripten/hgiox.cpp"
 $21 = $20; //@line 974 "emscripten/hgiox.cpp"
 $22 = (+Math_cos((+$21))); //@line 974 "emscripten/hgiox.cpp"
 $23 = $22; //@line 974 "emscripten/hgiox.cpp"
 $y0 = $23; //@line 974 "emscripten/hgiox.cpp"
 $24 = $y0; //@line 975 "emscripten/hgiox.cpp"
 $25 = -$24; //@line 975 "emscripten/hgiox.cpp"
 $x1 = $25; //@line 975 "emscripten/hgiox.cpp"
 $26 = $x0; //@line 976 "emscripten/hgiox.cpp"
 $y1 = $26; //@line 976 "emscripten/hgiox.cpp"
 $27 = $ofsx; //@line 978 "emscripten/hgiox.cpp"
 $28 = $27 * -0.5; //@line 978 "emscripten/hgiox.cpp"
 $ofsx = $28; //@line 978 "emscripten/hgiox.cpp"
 $29 = $ofsy; //@line 979 "emscripten/hgiox.cpp"
 $30 = $29 * -0.5; //@line 979 "emscripten/hgiox.cpp"
 $ofsy = $30; //@line 979 "emscripten/hgiox.cpp"
 $31 = $ofsy; //@line 980 "emscripten/hgiox.cpp"
 $32 = $x0; //@line 980 "emscripten/hgiox.cpp"
 $33 = $32 * $31; //@line 980 "emscripten/hgiox.cpp"
 $x0 = $33; //@line 980 "emscripten/hgiox.cpp"
 $34 = $ofsy; //@line 981 "emscripten/hgiox.cpp"
 $35 = $y0; //@line 981 "emscripten/hgiox.cpp"
 $36 = $35 * $34; //@line 981 "emscripten/hgiox.cpp"
 $y0 = $36; //@line 981 "emscripten/hgiox.cpp"
 $37 = $ofsx; //@line 982 "emscripten/hgiox.cpp"
 $38 = $x1; //@line 982 "emscripten/hgiox.cpp"
 $39 = $38 * $37; //@line 982 "emscripten/hgiox.cpp"
 $x1 = $39; //@line 982 "emscripten/hgiox.cpp"
 $40 = $ofsx; //@line 983 "emscripten/hgiox.cpp"
 $41 = $y1; //@line 983 "emscripten/hgiox.cpp"
 $42 = $41 * $40; //@line 983 "emscripten/hgiox.cpp"
 $y1 = $42; //@line 983 "emscripten/hgiox.cpp"
 $flp = 25544; //@line 985 "emscripten/hgiox.cpp"
 $43 = $x0; //@line 987 "emscripten/hgiox.cpp"
 $44 = -$43; //@line 987 "emscripten/hgiox.cpp"
 $45 = $x1; //@line 987 "emscripten/hgiox.cpp"
 $46 = $44 - $45; //@line 987 "emscripten/hgiox.cpp"
 $47 = $1; //@line 987 "emscripten/hgiox.cpp"
 $48 = $46 + $47; //@line 987 "emscripten/hgiox.cpp"
 $49 = $flp; //@line 987 "emscripten/hgiox.cpp"
 $50 = (($49) + 4|0); //@line 987 "emscripten/hgiox.cpp"
 $flp = $50; //@line 987 "emscripten/hgiox.cpp"
 HEAPF32[$49>>2] = $48; //@line 987 "emscripten/hgiox.cpp"
 $51 = $y0; //@line 988 "emscripten/hgiox.cpp"
 $52 = -$51; //@line 988 "emscripten/hgiox.cpp"
 $53 = $y1; //@line 988 "emscripten/hgiox.cpp"
 $54 = $52 - $53; //@line 988 "emscripten/hgiox.cpp"
 $55 = $2; //@line 988 "emscripten/hgiox.cpp"
 $56 = $54 + $55; //@line 988 "emscripten/hgiox.cpp"
 $57 = -$56; //@line 988 "emscripten/hgiox.cpp"
 $58 = $flp; //@line 988 "emscripten/hgiox.cpp"
 $59 = (($58) + 4|0); //@line 988 "emscripten/hgiox.cpp"
 $flp = $59; //@line 988 "emscripten/hgiox.cpp"
 HEAPF32[$58>>2] = $57; //@line 988 "emscripten/hgiox.cpp"
 $60 = $x0; //@line 990 "emscripten/hgiox.cpp"
 $61 = -$60; //@line 990 "emscripten/hgiox.cpp"
 $62 = $x1; //@line 990 "emscripten/hgiox.cpp"
 $63 = $61 + $62; //@line 990 "emscripten/hgiox.cpp"
 $64 = $1; //@line 990 "emscripten/hgiox.cpp"
 $65 = $63 + $64; //@line 990 "emscripten/hgiox.cpp"
 $66 = $flp; //@line 990 "emscripten/hgiox.cpp"
 $67 = (($66) + 4|0); //@line 990 "emscripten/hgiox.cpp"
 $flp = $67; //@line 990 "emscripten/hgiox.cpp"
 HEAPF32[$66>>2] = $65; //@line 990 "emscripten/hgiox.cpp"
 $68 = $y0; //@line 991 "emscripten/hgiox.cpp"
 $69 = -$68; //@line 991 "emscripten/hgiox.cpp"
 $70 = $y1; //@line 991 "emscripten/hgiox.cpp"
 $71 = $69 + $70; //@line 991 "emscripten/hgiox.cpp"
 $72 = $2; //@line 991 "emscripten/hgiox.cpp"
 $73 = $71 + $72; //@line 991 "emscripten/hgiox.cpp"
 $74 = -$73; //@line 991 "emscripten/hgiox.cpp"
 $75 = $flp; //@line 991 "emscripten/hgiox.cpp"
 $76 = (($75) + 4|0); //@line 991 "emscripten/hgiox.cpp"
 $flp = $76; //@line 991 "emscripten/hgiox.cpp"
 HEAPF32[$75>>2] = $74; //@line 991 "emscripten/hgiox.cpp"
 $77 = $x0; //@line 993 "emscripten/hgiox.cpp"
 $78 = $x1; //@line 993 "emscripten/hgiox.cpp"
 $79 = $77 - $78; //@line 993 "emscripten/hgiox.cpp"
 $80 = $1; //@line 993 "emscripten/hgiox.cpp"
 $81 = $79 + $80; //@line 993 "emscripten/hgiox.cpp"
 $82 = $flp; //@line 993 "emscripten/hgiox.cpp"
 $83 = (($82) + 4|0); //@line 993 "emscripten/hgiox.cpp"
 $flp = $83; //@line 993 "emscripten/hgiox.cpp"
 HEAPF32[$82>>2] = $81; //@line 993 "emscripten/hgiox.cpp"
 $84 = $y0; //@line 994 "emscripten/hgiox.cpp"
 $85 = $y1; //@line 994 "emscripten/hgiox.cpp"
 $86 = $84 - $85; //@line 994 "emscripten/hgiox.cpp"
 $87 = $2; //@line 994 "emscripten/hgiox.cpp"
 $88 = $86 + $87; //@line 994 "emscripten/hgiox.cpp"
 $89 = -$88; //@line 994 "emscripten/hgiox.cpp"
 $90 = $flp; //@line 994 "emscripten/hgiox.cpp"
 $91 = (($90) + 4|0); //@line 994 "emscripten/hgiox.cpp"
 $flp = $91; //@line 994 "emscripten/hgiox.cpp"
 HEAPF32[$90>>2] = $89; //@line 994 "emscripten/hgiox.cpp"
 $92 = $x0; //@line 996 "emscripten/hgiox.cpp"
 $93 = $x1; //@line 996 "emscripten/hgiox.cpp"
 $94 = $92 + $93; //@line 996 "emscripten/hgiox.cpp"
 $95 = $1; //@line 996 "emscripten/hgiox.cpp"
 $96 = $94 + $95; //@line 996 "emscripten/hgiox.cpp"
 $97 = $flp; //@line 996 "emscripten/hgiox.cpp"
 $98 = (($97) + 4|0); //@line 996 "emscripten/hgiox.cpp"
 $flp = $98; //@line 996 "emscripten/hgiox.cpp"
 HEAPF32[$97>>2] = $96; //@line 996 "emscripten/hgiox.cpp"
 $99 = $y0; //@line 997 "emscripten/hgiox.cpp"
 $100 = $y1; //@line 997 "emscripten/hgiox.cpp"
 $101 = $99 + $100; //@line 997 "emscripten/hgiox.cpp"
 $102 = $2; //@line 997 "emscripten/hgiox.cpp"
 $103 = $101 + $102; //@line 997 "emscripten/hgiox.cpp"
 $104 = -$103; //@line 997 "emscripten/hgiox.cpp"
 $105 = $flp; //@line 997 "emscripten/hgiox.cpp"
 $106 = (($105) + 4|0); //@line 997 "emscripten/hgiox.cpp"
 $flp = $106; //@line 997 "emscripten/hgiox.cpp"
 HEAPF32[$105>>2] = $104; //@line 997 "emscripten/hgiox.cpp"
 _ChangeTex(-1); //@line 999 "emscripten/hgiox.cpp"
 _glVertexPointer(2,5126,0,(25544|0)); //@line 1001 "emscripten/hgiox.cpp"
 $107 = $0; //@line 1002 "emscripten/hgiox.cpp"
 $108 = (($107) + 104|0); //@line 1002 "emscripten/hgiox.cpp"
 $109 = HEAP32[$108>>2]|0; //@line 1002 "emscripten/hgiox.cpp"
 $110 = $0; //@line 1002 "emscripten/hgiox.cpp"
 $111 = (($110) + 144|0); //@line 1002 "emscripten/hgiox.cpp"
 $112 = HEAP32[$111>>2]|0; //@line 1002 "emscripten/hgiox.cpp"
 _hgio_panelcolor($109,$112); //@line 1002 "emscripten/hgiox.cpp"
 $113 = $0; //@line 1003 "emscripten/hgiox.cpp"
 $114 = (($113) + 100|0); //@line 1003 "emscripten/hgiox.cpp"
 $115 = HEAP32[$114>>2]|0; //@line 1003 "emscripten/hgiox.cpp"
 _hgio_setBlendModeFlat($115); //@line 1003 "emscripten/hgiox.cpp"
 _glDrawArrays(5,0,4); //@line 1005 "emscripten/hgiox.cpp"
 STACKTOP = sp;return; //@line 1005 "emscripten/hgiox.cpp"
}
function __Z10hgio_fcopyffssssii($distx,$disty,$xx,$yy,$srcsx,$srcsy,$texid,$color) {
 $distx = +$distx;
 $disty = +$disty;
 $xx = $xx|0;
 $yy = $yy|0;
 $srcsx = $srcsx|0;
 $srcsy = $srcsy|0;
 $texid = $texid|0;
 $color = $color|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0.0, $115 = 0;
 var $116 = 0, $117 = 0.0, $118 = 0, $119 = 0, $12 = 0, $120 = 0.0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0.0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0, $132 = 0.0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0.0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0.0;
 var $46 = 0, $47 = 0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0;
 var $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $flp = 0;
 var $ratex = 0.0, $ratey = 0.0, $tex = 0, $x1 = 0.0, $x2 = 0.0, $y1 = 0.0, $y2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $0 = $distx;
 $1 = $disty;
 $2 = $xx;
 $3 = $yy;
 $4 = $srcsx;
 $5 = $srcsy;
 $6 = $texid;
 $7 = $color;
 $8 = $6; //@line 1015 "emscripten/hgiox.cpp"
 $9 = (_GetTex($8)|0); //@line 1015 "emscripten/hgiox.cpp"
 $tex = $9; //@line 1015 "emscripten/hgiox.cpp"
 $10 = $tex; //@line 1016 "emscripten/hgiox.cpp"
 $11 = HEAP16[$10>>1]|0; //@line 1016 "emscripten/hgiox.cpp"
 $12 = $11 << 16 >> 16; //@line 1016 "emscripten/hgiox.cpp"
 $13 = ($12|0)==(0); //@line 1016 "emscripten/hgiox.cpp"
 if ($13) {
  STACKTOP = sp;return; //@line 1075 "emscripten/hgiox.cpp"
 }
 $flp = 25544; //@line 1022 "emscripten/hgiox.cpp"
 $14 = $0; //@line 1023 "emscripten/hgiox.cpp"
 $x1 = $14; //@line 1023 "emscripten/hgiox.cpp"
 $15 = $1; //@line 1024 "emscripten/hgiox.cpp"
 $16 = -$15; //@line 1024 "emscripten/hgiox.cpp"
 $y1 = $16; //@line 1024 "emscripten/hgiox.cpp"
 $17 = $x1; //@line 1025 "emscripten/hgiox.cpp"
 $18 = $4; //@line 1025 "emscripten/hgiox.cpp"
 $19 = $18 << 16 >> 16; //@line 1025 "emscripten/hgiox.cpp"
 $20 = (+($19|0)); //@line 1025 "emscripten/hgiox.cpp"
 $21 = $17 + $20; //@line 1025 "emscripten/hgiox.cpp"
 $x2 = $21; //@line 1025 "emscripten/hgiox.cpp"
 $22 = $y1; //@line 1026 "emscripten/hgiox.cpp"
 $23 = $5; //@line 1026 "emscripten/hgiox.cpp"
 $24 = $23 << 16 >> 16; //@line 1026 "emscripten/hgiox.cpp"
 $25 = (+($24|0)); //@line 1026 "emscripten/hgiox.cpp"
 $26 = $22 - $25; //@line 1026 "emscripten/hgiox.cpp"
 $y2 = $26; //@line 1026 "emscripten/hgiox.cpp"
 $27 = $x1; //@line 1028 "emscripten/hgiox.cpp"
 $28 = $flp; //@line 1028 "emscripten/hgiox.cpp"
 $29 = (($28) + 4|0); //@line 1028 "emscripten/hgiox.cpp"
 $flp = $29; //@line 1028 "emscripten/hgiox.cpp"
 HEAPF32[$28>>2] = $27; //@line 1028 "emscripten/hgiox.cpp"
 $30 = $y1; //@line 1029 "emscripten/hgiox.cpp"
 $31 = $flp; //@line 1029 "emscripten/hgiox.cpp"
 $32 = (($31) + 4|0); //@line 1029 "emscripten/hgiox.cpp"
 $flp = $32; //@line 1029 "emscripten/hgiox.cpp"
 HEAPF32[$31>>2] = $30; //@line 1029 "emscripten/hgiox.cpp"
 $33 = $x1; //@line 1030 "emscripten/hgiox.cpp"
 $34 = $flp; //@line 1030 "emscripten/hgiox.cpp"
 $35 = (($34) + 4|0); //@line 1030 "emscripten/hgiox.cpp"
 $flp = $35; //@line 1030 "emscripten/hgiox.cpp"
 HEAPF32[$34>>2] = $33; //@line 1030 "emscripten/hgiox.cpp"
 $36 = $y2; //@line 1031 "emscripten/hgiox.cpp"
 $37 = $flp; //@line 1031 "emscripten/hgiox.cpp"
 $38 = (($37) + 4|0); //@line 1031 "emscripten/hgiox.cpp"
 $flp = $38; //@line 1031 "emscripten/hgiox.cpp"
 HEAPF32[$37>>2] = $36; //@line 1031 "emscripten/hgiox.cpp"
 $39 = $x2; //@line 1032 "emscripten/hgiox.cpp"
 $40 = $flp; //@line 1032 "emscripten/hgiox.cpp"
 $41 = (($40) + 4|0); //@line 1032 "emscripten/hgiox.cpp"
 $flp = $41; //@line 1032 "emscripten/hgiox.cpp"
 HEAPF32[$40>>2] = $39; //@line 1032 "emscripten/hgiox.cpp"
 $42 = $y1; //@line 1033 "emscripten/hgiox.cpp"
 $43 = $flp; //@line 1033 "emscripten/hgiox.cpp"
 $44 = (($43) + 4|0); //@line 1033 "emscripten/hgiox.cpp"
 $flp = $44; //@line 1033 "emscripten/hgiox.cpp"
 HEAPF32[$43>>2] = $42; //@line 1033 "emscripten/hgiox.cpp"
 $45 = $x2; //@line 1034 "emscripten/hgiox.cpp"
 $46 = $flp; //@line 1034 "emscripten/hgiox.cpp"
 $47 = (($46) + 4|0); //@line 1034 "emscripten/hgiox.cpp"
 $flp = $47; //@line 1034 "emscripten/hgiox.cpp"
 HEAPF32[$46>>2] = $45; //@line 1034 "emscripten/hgiox.cpp"
 $48 = $y2; //@line 1035 "emscripten/hgiox.cpp"
 $49 = $flp; //@line 1035 "emscripten/hgiox.cpp"
 $50 = (($49) + 4|0); //@line 1035 "emscripten/hgiox.cpp"
 $flp = $50; //@line 1035 "emscripten/hgiox.cpp"
 HEAPF32[$49>>2] = $48; //@line 1035 "emscripten/hgiox.cpp"
 $51 = $tex; //@line 1039 "emscripten/hgiox.cpp"
 $52 = (($51) + 16|0); //@line 1039 "emscripten/hgiox.cpp"
 $53 = +HEAPF32[$52>>2]; //@line 1039 "emscripten/hgiox.cpp"
 $ratex = $53; //@line 1039 "emscripten/hgiox.cpp"
 $54 = $tex; //@line 1040 "emscripten/hgiox.cpp"
 $55 = (($54) + 20|0); //@line 1040 "emscripten/hgiox.cpp"
 $56 = +HEAPF32[$55>>2]; //@line 1040 "emscripten/hgiox.cpp"
 $ratey = $56; //@line 1040 "emscripten/hgiox.cpp"
 $flp = 25576; //@line 1042 "emscripten/hgiox.cpp"
 $57 = HEAP32[24880>>2]|0; //@line 1043 "emscripten/hgiox.cpp"
 $58 = ($57|0)!=(0); //@line 1043 "emscripten/hgiox.cpp"
 if ($58) {
  $59 = $2; //@line 1044 "emscripten/hgiox.cpp"
  $60 = (+($59<<16>>16)); //@line 1044 "emscripten/hgiox.cpp"
  $61 = $60 + 0.5; //@line 1044 "emscripten/hgiox.cpp"
  $62 = $ratex; //@line 1044 "emscripten/hgiox.cpp"
  $63 = $61 * $62; //@line 1044 "emscripten/hgiox.cpp"
  $x1 = $63; //@line 1044 "emscripten/hgiox.cpp"
  $64 = $3; //@line 1045 "emscripten/hgiox.cpp"
  $65 = (+($64<<16>>16)); //@line 1045 "emscripten/hgiox.cpp"
  $66 = $65 + 0.5; //@line 1045 "emscripten/hgiox.cpp"
  $67 = $ratey; //@line 1045 "emscripten/hgiox.cpp"
  $68 = $66 * $67; //@line 1045 "emscripten/hgiox.cpp"
  $y1 = $68; //@line 1045 "emscripten/hgiox.cpp"
  $69 = $2; //@line 1046 "emscripten/hgiox.cpp"
  $70 = $69 << 16 >> 16; //@line 1046 "emscripten/hgiox.cpp"
  $71 = $4; //@line 1046 "emscripten/hgiox.cpp"
  $72 = $71 << 16 >> 16; //@line 1046 "emscripten/hgiox.cpp"
  $73 = (($70) + ($72))|0; //@line 1046 "emscripten/hgiox.cpp"
  $74 = (+($73|0)); //@line 1046 "emscripten/hgiox.cpp"
  $75 = $74 - 0.5; //@line 1046 "emscripten/hgiox.cpp"
  $76 = $ratex; //@line 1046 "emscripten/hgiox.cpp"
  $77 = $75 * $76; //@line 1046 "emscripten/hgiox.cpp"
  $x2 = $77; //@line 1046 "emscripten/hgiox.cpp"
  $78 = $3; //@line 1047 "emscripten/hgiox.cpp"
  $79 = $78 << 16 >> 16; //@line 1047 "emscripten/hgiox.cpp"
  $80 = $5; //@line 1047 "emscripten/hgiox.cpp"
  $81 = $80 << 16 >> 16; //@line 1047 "emscripten/hgiox.cpp"
  $82 = (($79) + ($81))|0; //@line 1047 "emscripten/hgiox.cpp"
  $83 = (+($82|0)); //@line 1047 "emscripten/hgiox.cpp"
  $84 = $83 - 0.5; //@line 1047 "emscripten/hgiox.cpp"
  $85 = $ratey; //@line 1047 "emscripten/hgiox.cpp"
  $86 = $84 * $85; //@line 1047 "emscripten/hgiox.cpp"
  $y2 = $86; //@line 1047 "emscripten/hgiox.cpp"
 } else {
  $87 = $2; //@line 1049 "emscripten/hgiox.cpp"
  $88 = (+($87<<16>>16)); //@line 1049 "emscripten/hgiox.cpp"
  $89 = $ratex; //@line 1049 "emscripten/hgiox.cpp"
  $90 = $88 * $89; //@line 1049 "emscripten/hgiox.cpp"
  $x1 = $90; //@line 1049 "emscripten/hgiox.cpp"
  $91 = $3; //@line 1050 "emscripten/hgiox.cpp"
  $92 = (+($91<<16>>16)); //@line 1050 "emscripten/hgiox.cpp"
  $93 = $ratey; //@line 1050 "emscripten/hgiox.cpp"
  $94 = $92 * $93; //@line 1050 "emscripten/hgiox.cpp"
  $y1 = $94; //@line 1050 "emscripten/hgiox.cpp"
  $95 = $2; //@line 1051 "emscripten/hgiox.cpp"
  $96 = $95 << 16 >> 16; //@line 1051 "emscripten/hgiox.cpp"
  $97 = $4; //@line 1051 "emscripten/hgiox.cpp"
  $98 = $97 << 16 >> 16; //@line 1051 "emscripten/hgiox.cpp"
  $99 = (($96) + ($98))|0; //@line 1051 "emscripten/hgiox.cpp"
  $100 = (+($99|0)); //@line 1051 "emscripten/hgiox.cpp"
  $101 = $ratex; //@line 1051 "emscripten/hgiox.cpp"
  $102 = $100 * $101; //@line 1051 "emscripten/hgiox.cpp"
  $x2 = $102; //@line 1051 "emscripten/hgiox.cpp"
  $103 = $3; //@line 1052 "emscripten/hgiox.cpp"
  $104 = $103 << 16 >> 16; //@line 1052 "emscripten/hgiox.cpp"
  $105 = $5; //@line 1052 "emscripten/hgiox.cpp"
  $106 = $105 << 16 >> 16; //@line 1052 "emscripten/hgiox.cpp"
  $107 = (($104) + ($106))|0; //@line 1052 "emscripten/hgiox.cpp"
  $108 = (+($107|0)); //@line 1052 "emscripten/hgiox.cpp"
  $109 = $ratey; //@line 1052 "emscripten/hgiox.cpp"
  $110 = $108 * $109; //@line 1052 "emscripten/hgiox.cpp"
  $y2 = $110; //@line 1052 "emscripten/hgiox.cpp"
 }
 $111 = $x1; //@line 1055 "emscripten/hgiox.cpp"
 $112 = $flp; //@line 1055 "emscripten/hgiox.cpp"
 $113 = (($112) + 4|0); //@line 1055 "emscripten/hgiox.cpp"
 $flp = $113; //@line 1055 "emscripten/hgiox.cpp"
 HEAPF32[$112>>2] = $111; //@line 1055 "emscripten/hgiox.cpp"
 $114 = $y1; //@line 1056 "emscripten/hgiox.cpp"
 $115 = $flp; //@line 1056 "emscripten/hgiox.cpp"
 $116 = (($115) + 4|0); //@line 1056 "emscripten/hgiox.cpp"
 $flp = $116; //@line 1056 "emscripten/hgiox.cpp"
 HEAPF32[$115>>2] = $114; //@line 1056 "emscripten/hgiox.cpp"
 $117 = $x1; //@line 1057 "emscripten/hgiox.cpp"
 $118 = $flp; //@line 1057 "emscripten/hgiox.cpp"
 $119 = (($118) + 4|0); //@line 1057 "emscripten/hgiox.cpp"
 $flp = $119; //@line 1057 "emscripten/hgiox.cpp"
 HEAPF32[$118>>2] = $117; //@line 1057 "emscripten/hgiox.cpp"
 $120 = $y2; //@line 1058 "emscripten/hgiox.cpp"
 $121 = $flp; //@line 1058 "emscripten/hgiox.cpp"
 $122 = (($121) + 4|0); //@line 1058 "emscripten/hgiox.cpp"
 $flp = $122; //@line 1058 "emscripten/hgiox.cpp"
 HEAPF32[$121>>2] = $120; //@line 1058 "emscripten/hgiox.cpp"
 $123 = $x2; //@line 1059 "emscripten/hgiox.cpp"
 $124 = $flp; //@line 1059 "emscripten/hgiox.cpp"
 $125 = (($124) + 4|0); //@line 1059 "emscripten/hgiox.cpp"
 $flp = $125; //@line 1059 "emscripten/hgiox.cpp"
 HEAPF32[$124>>2] = $123; //@line 1059 "emscripten/hgiox.cpp"
 $126 = $y1; //@line 1060 "emscripten/hgiox.cpp"
 $127 = $flp; //@line 1060 "emscripten/hgiox.cpp"
 $128 = (($127) + 4|0); //@line 1060 "emscripten/hgiox.cpp"
 $flp = $128; //@line 1060 "emscripten/hgiox.cpp"
 HEAPF32[$127>>2] = $126; //@line 1060 "emscripten/hgiox.cpp"
 $129 = $x2; //@line 1061 "emscripten/hgiox.cpp"
 $130 = $flp; //@line 1061 "emscripten/hgiox.cpp"
 $131 = (($130) + 4|0); //@line 1061 "emscripten/hgiox.cpp"
 $flp = $131; //@line 1061 "emscripten/hgiox.cpp"
 HEAPF32[$130>>2] = $129; //@line 1061 "emscripten/hgiox.cpp"
 $132 = $y2; //@line 1062 "emscripten/hgiox.cpp"
 $133 = $flp; //@line 1062 "emscripten/hgiox.cpp"
 $134 = (($133) + 4|0); //@line 1062 "emscripten/hgiox.cpp"
 $flp = $134; //@line 1062 "emscripten/hgiox.cpp"
 HEAPF32[$133>>2] = $132; //@line 1062 "emscripten/hgiox.cpp"
 _glEnable(3553); //@line 1064 "emscripten/hgiox.cpp"
 $135 = $tex; //@line 1065 "emscripten/hgiox.cpp"
 $136 = (($135) + 12|0); //@line 1065 "emscripten/hgiox.cpp"
 $137 = HEAP32[$136>>2]|0; //@line 1065 "emscripten/hgiox.cpp"
 _ChangeTex($137); //@line 1065 "emscripten/hgiox.cpp"
 _glVertexPointer(2,5126,0,(25544|0)); //@line 1067 "emscripten/hgiox.cpp"
 _glTexCoordPointer(2,5126,0,(25576|0)); //@line 1068 "emscripten/hgiox.cpp"
 _hgio_setBlendMode(3,255); //@line 1070 "emscripten/hgiox.cpp"
 $138 = $7; //@line 1071 "emscripten/hgiox.cpp"
 _hgio_panelcolor($138,255); //@line 1071 "emscripten/hgiox.cpp"
 _glDrawArrays(5,0,4); //@line 1074 "emscripten/hgiox.cpp"
 _glDisable(3553); //@line 1075 "emscripten/hgiox.cpp"
 STACKTOP = sp;return; //@line 1075 "emscripten/hgiox.cpp"
}
function _hgio_copy($bm,$xx,$yy,$srcsx,$srcsy,$bmsrc,$s_psx,$s_psy) {
 $bm = $bm|0;
 $xx = $xx|0;
 $yy = $yy|0;
 $srcsx = $srcsx|0;
 $srcsy = $srcsy|0;
 $bmsrc = $bmsrc|0;
 $s_psx = +$s_psx;
 $s_psy = +$s_psy;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0, $115 = 0;
 var $116 = 0.0, $117 = 0, $118 = 0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0;
 var $134 = 0, $135 = 0.0, $136 = 0, $137 = 0, $138 = 0.0, $139 = 0, $14 = 0, $140 = 0, $141 = 0.0, $142 = 0, $143 = 0, $144 = 0.0, $145 = 0, $146 = 0, $147 = 0.0, $148 = 0, $149 = 0, $15 = 0, $150 = 0.0, $151 = 0;
 var $152 = 0, $153 = 0.0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0.0;
 var $59 = 0, $6 = 0.0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0, $7 = 0.0, $70 = 0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0;
 var $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0.0, $87 = 0, $88 = 0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0, $92 = 0.0, $93 = 0, $94 = 0;
 var $95 = 0.0, $96 = 0, $97 = 0, $98 = 0.0, $99 = 0, $flp = 0, $psx = 0.0, $psy = 0.0, $ratex = 0.0, $ratey = 0.0, $tex = 0, $tx0 = 0.0, $tx1 = 0.0, $ty0 = 0.0, $ty1 = 0.0, $x1 = 0.0, $x2 = 0.0, $y1 = 0.0, $y2 = 0.0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $0 = $bm;
 $1 = $xx;
 $2 = $yy;
 $3 = $srcsx;
 $4 = $srcsy;
 $5 = $bmsrc;
 $6 = $s_psx;
 $7 = $s_psy;
 $8 = $0; //@line 1085 "emscripten/hgiox.cpp"
 $9 = ($8|0)==(0|0); //@line 1085 "emscripten/hgiox.cpp"
 if ($9) {
  STACKTOP = sp;return; //@line 1161 "emscripten/hgiox.cpp"
 }
 $10 = $0; //@line 1086 "emscripten/hgiox.cpp"
 $11 = (($10) + 28|0); //@line 1086 "emscripten/hgiox.cpp"
 $12 = HEAP32[$11>>2]|0; //@line 1086 "emscripten/hgiox.cpp"
 $13 = ($12|0)!=(2); //@line 1086 "emscripten/hgiox.cpp"
 if ($13) {
  $14 = (___cxa_allocate_exception(4)|0); //@line 1086 "emscripten/hgiox.cpp"
  HEAP32[$14>>2] = 21; //@line 1086 "emscripten/hgiox.cpp"
  ___cxa_throw(($14|0),(624|0),(0|0)); //@line 1086 "emscripten/hgiox.cpp"
  // unreachable; //@line 1086 "emscripten/hgiox.cpp"
 }
 $15 = $5; //@line 1088 "emscripten/hgiox.cpp"
 $16 = (($15) + 280|0); //@line 1088 "emscripten/hgiox.cpp"
 $17 = HEAP32[$16>>2]|0; //@line 1088 "emscripten/hgiox.cpp"
 $18 = (_GetTex($17)|0); //@line 1088 "emscripten/hgiox.cpp"
 $tex = $18; //@line 1088 "emscripten/hgiox.cpp"
 $19 = $tex; //@line 1089 "emscripten/hgiox.cpp"
 $20 = HEAP16[$19>>1]|0; //@line 1089 "emscripten/hgiox.cpp"
 $21 = $20 << 16 >> 16; //@line 1089 "emscripten/hgiox.cpp"
 $22 = ($21|0)==(0); //@line 1089 "emscripten/hgiox.cpp"
 if ($22) {
  STACKTOP = sp;return; //@line 1161 "emscripten/hgiox.cpp"
 }
 $23 = $6; //@line 1095 "emscripten/hgiox.cpp"
 $24 = $23 < 0.0; //@line 1095 "emscripten/hgiox.cpp"
 if ($24) {
  $25 = $6; //@line 1096 "emscripten/hgiox.cpp"
  $26 = -$25; //@line 1096 "emscripten/hgiox.cpp"
  $psx = $26; //@line 1096 "emscripten/hgiox.cpp"
  $27 = $1; //@line 1097 "emscripten/hgiox.cpp"
  $28 = (+($27<<16>>16)); //@line 1097 "emscripten/hgiox.cpp"
  $tx1 = $28; //@line 1097 "emscripten/hgiox.cpp"
  $29 = $1; //@line 1098 "emscripten/hgiox.cpp"
  $30 = $29 << 16 >> 16; //@line 1098 "emscripten/hgiox.cpp"
  $31 = $3; //@line 1098 "emscripten/hgiox.cpp"
  $32 = $31 << 16 >> 16; //@line 1098 "emscripten/hgiox.cpp"
  $33 = (($30) + ($32))|0; //@line 1098 "emscripten/hgiox.cpp"
  $34 = (+($33|0)); //@line 1098 "emscripten/hgiox.cpp"
  $tx0 = $34; //@line 1098 "emscripten/hgiox.cpp"
 } else {
  $35 = $6; //@line 1100 "emscripten/hgiox.cpp"
  $psx = $35; //@line 1100 "emscripten/hgiox.cpp"
  $36 = $1; //@line 1101 "emscripten/hgiox.cpp"
  $37 = (+($36<<16>>16)); //@line 1101 "emscripten/hgiox.cpp"
  $tx0 = $37; //@line 1101 "emscripten/hgiox.cpp"
  $38 = $1; //@line 1102 "emscripten/hgiox.cpp"
  $39 = $38 << 16 >> 16; //@line 1102 "emscripten/hgiox.cpp"
  $40 = $3; //@line 1102 "emscripten/hgiox.cpp"
  $41 = $40 << 16 >> 16; //@line 1102 "emscripten/hgiox.cpp"
  $42 = (($39) + ($41))|0; //@line 1102 "emscripten/hgiox.cpp"
  $43 = (+($42|0)); //@line 1102 "emscripten/hgiox.cpp"
  $tx1 = $43; //@line 1102 "emscripten/hgiox.cpp"
 }
 $44 = $7; //@line 1104 "emscripten/hgiox.cpp"
 $45 = $44 < 0.0; //@line 1104 "emscripten/hgiox.cpp"
 if ($45) {
  $46 = $7; //@line 1105 "emscripten/hgiox.cpp"
  $47 = -$46; //@line 1105 "emscripten/hgiox.cpp"
  $psy = $47; //@line 1105 "emscripten/hgiox.cpp"
  $48 = $2; //@line 1106 "emscripten/hgiox.cpp"
  $49 = (+($48<<16>>16)); //@line 1106 "emscripten/hgiox.cpp"
  $ty1 = $49; //@line 1106 "emscripten/hgiox.cpp"
  $50 = $2; //@line 1107 "emscripten/hgiox.cpp"
  $51 = $50 << 16 >> 16; //@line 1107 "emscripten/hgiox.cpp"
  $52 = $4; //@line 1107 "emscripten/hgiox.cpp"
  $53 = $52 << 16 >> 16; //@line 1107 "emscripten/hgiox.cpp"
  $54 = (($51) + ($53))|0; //@line 1107 "emscripten/hgiox.cpp"
  $55 = (+($54|0)); //@line 1107 "emscripten/hgiox.cpp"
  $ty0 = $55; //@line 1107 "emscripten/hgiox.cpp"
 } else {
  $56 = $7; //@line 1109 "emscripten/hgiox.cpp"
  $psy = $56; //@line 1109 "emscripten/hgiox.cpp"
  $57 = $2; //@line 1110 "emscripten/hgiox.cpp"
  $58 = (+($57<<16>>16)); //@line 1110 "emscripten/hgiox.cpp"
  $ty0 = $58; //@line 1110 "emscripten/hgiox.cpp"
  $59 = $2; //@line 1111 "emscripten/hgiox.cpp"
  $60 = $59 << 16 >> 16; //@line 1111 "emscripten/hgiox.cpp"
  $61 = $4; //@line 1111 "emscripten/hgiox.cpp"
  $62 = $61 << 16 >> 16; //@line 1111 "emscripten/hgiox.cpp"
  $63 = (($60) + ($62))|0; //@line 1111 "emscripten/hgiox.cpp"
  $64 = (+($63|0)); //@line 1111 "emscripten/hgiox.cpp"
  $ty1 = $64; //@line 1111 "emscripten/hgiox.cpp"
 }
 $flp = 25544; //@line 1114 "emscripten/hgiox.cpp"
 $65 = $0; //@line 1115 "emscripten/hgiox.cpp"
 $66 = (($65) + 68|0); //@line 1115 "emscripten/hgiox.cpp"
 $67 = HEAP32[$66>>2]|0; //@line 1115 "emscripten/hgiox.cpp"
 $68 = (+($67|0)); //@line 1115 "emscripten/hgiox.cpp"
 $x1 = $68; //@line 1115 "emscripten/hgiox.cpp"
 $69 = $0; //@line 1116 "emscripten/hgiox.cpp"
 $70 = (($69) + 72|0); //@line 1116 "emscripten/hgiox.cpp"
 $71 = HEAP32[$70>>2]|0; //@line 1116 "emscripten/hgiox.cpp"
 $72 = (0 - ($71))|0; //@line 1116 "emscripten/hgiox.cpp"
 $73 = (+($72|0)); //@line 1116 "emscripten/hgiox.cpp"
 $y1 = $73; //@line 1116 "emscripten/hgiox.cpp"
 $74 = $x1; //@line 1117 "emscripten/hgiox.cpp"
 $75 = $psx; //@line 1117 "emscripten/hgiox.cpp"
 $76 = $74 + $75; //@line 1117 "emscripten/hgiox.cpp"
 $x2 = $76; //@line 1117 "emscripten/hgiox.cpp"
 $77 = $y1; //@line 1118 "emscripten/hgiox.cpp"
 $78 = $psy; //@line 1118 "emscripten/hgiox.cpp"
 $79 = $77 - $78; //@line 1118 "emscripten/hgiox.cpp"
 $y2 = $79; //@line 1118 "emscripten/hgiox.cpp"
 $80 = $x1; //@line 1120 "emscripten/hgiox.cpp"
 $81 = $flp; //@line 1120 "emscripten/hgiox.cpp"
 $82 = (($81) + 4|0); //@line 1120 "emscripten/hgiox.cpp"
 $flp = $82; //@line 1120 "emscripten/hgiox.cpp"
 HEAPF32[$81>>2] = $80; //@line 1120 "emscripten/hgiox.cpp"
 $83 = $y1; //@line 1121 "emscripten/hgiox.cpp"
 $84 = $flp; //@line 1121 "emscripten/hgiox.cpp"
 $85 = (($84) + 4|0); //@line 1121 "emscripten/hgiox.cpp"
 $flp = $85; //@line 1121 "emscripten/hgiox.cpp"
 HEAPF32[$84>>2] = $83; //@line 1121 "emscripten/hgiox.cpp"
 $86 = $x1; //@line 1122 "emscripten/hgiox.cpp"
 $87 = $flp; //@line 1122 "emscripten/hgiox.cpp"
 $88 = (($87) + 4|0); //@line 1122 "emscripten/hgiox.cpp"
 $flp = $88; //@line 1122 "emscripten/hgiox.cpp"
 HEAPF32[$87>>2] = $86; //@line 1122 "emscripten/hgiox.cpp"
 $89 = $y2; //@line 1123 "emscripten/hgiox.cpp"
 $90 = $flp; //@line 1123 "emscripten/hgiox.cpp"
 $91 = (($90) + 4|0); //@line 1123 "emscripten/hgiox.cpp"
 $flp = $91; //@line 1123 "emscripten/hgiox.cpp"
 HEAPF32[$90>>2] = $89; //@line 1123 "emscripten/hgiox.cpp"
 $92 = $x2; //@line 1124 "emscripten/hgiox.cpp"
 $93 = $flp; //@line 1124 "emscripten/hgiox.cpp"
 $94 = (($93) + 4|0); //@line 1124 "emscripten/hgiox.cpp"
 $flp = $94; //@line 1124 "emscripten/hgiox.cpp"
 HEAPF32[$93>>2] = $92; //@line 1124 "emscripten/hgiox.cpp"
 $95 = $y1; //@line 1125 "emscripten/hgiox.cpp"
 $96 = $flp; //@line 1125 "emscripten/hgiox.cpp"
 $97 = (($96) + 4|0); //@line 1125 "emscripten/hgiox.cpp"
 $flp = $97; //@line 1125 "emscripten/hgiox.cpp"
 HEAPF32[$96>>2] = $95; //@line 1125 "emscripten/hgiox.cpp"
 $98 = $x2; //@line 1126 "emscripten/hgiox.cpp"
 $99 = $flp; //@line 1126 "emscripten/hgiox.cpp"
 $100 = (($99) + 4|0); //@line 1126 "emscripten/hgiox.cpp"
 $flp = $100; //@line 1126 "emscripten/hgiox.cpp"
 HEAPF32[$99>>2] = $98; //@line 1126 "emscripten/hgiox.cpp"
 $101 = $y2; //@line 1127 "emscripten/hgiox.cpp"
 $102 = $flp; //@line 1127 "emscripten/hgiox.cpp"
 $103 = (($102) + 4|0); //@line 1127 "emscripten/hgiox.cpp"
 $flp = $103; //@line 1127 "emscripten/hgiox.cpp"
 HEAPF32[$102>>2] = $101; //@line 1127 "emscripten/hgiox.cpp"
 $104 = HEAP32[24880>>2]|0; //@line 1129 "emscripten/hgiox.cpp"
 $105 = ($104|0)!=(0); //@line 1129 "emscripten/hgiox.cpp"
 if ($105) {
  $106 = $tx0; //@line 1130 "emscripten/hgiox.cpp"
  $107 = $106 + 0.5; //@line 1130 "emscripten/hgiox.cpp"
  $tx0 = $107; //@line 1130 "emscripten/hgiox.cpp"
  $108 = $ty0; //@line 1131 "emscripten/hgiox.cpp"
  $109 = $108 + 0.5; //@line 1131 "emscripten/hgiox.cpp"
  $ty0 = $109; //@line 1131 "emscripten/hgiox.cpp"
  $110 = $tx1; //@line 1132 "emscripten/hgiox.cpp"
  $111 = $110 - 0.5; //@line 1132 "emscripten/hgiox.cpp"
  $tx1 = $111; //@line 1132 "emscripten/hgiox.cpp"
  $112 = $ty1; //@line 1133 "emscripten/hgiox.cpp"
  $113 = $112 - 0.5; //@line 1133 "emscripten/hgiox.cpp"
  $ty1 = $113; //@line 1133 "emscripten/hgiox.cpp"
 }
 $114 = $tex; //@line 1135 "emscripten/hgiox.cpp"
 $115 = (($114) + 16|0); //@line 1135 "emscripten/hgiox.cpp"
 $116 = +HEAPF32[$115>>2]; //@line 1135 "emscripten/hgiox.cpp"
 $ratex = $116; //@line 1135 "emscripten/hgiox.cpp"
 $117 = $tex; //@line 1136 "emscripten/hgiox.cpp"
 $118 = (($117) + 20|0); //@line 1136 "emscripten/hgiox.cpp"
 $119 = +HEAPF32[$118>>2]; //@line 1136 "emscripten/hgiox.cpp"
 $ratey = $119; //@line 1136 "emscripten/hgiox.cpp"
 $flp = 25576; //@line 1138 "emscripten/hgiox.cpp"
 $120 = $ratex; //@line 1140 "emscripten/hgiox.cpp"
 $121 = $tx0; //@line 1140 "emscripten/hgiox.cpp"
 $122 = $121 * $120; //@line 1140 "emscripten/hgiox.cpp"
 $tx0 = $122; //@line 1140 "emscripten/hgiox.cpp"
 $123 = $ratey; //@line 1141 "emscripten/hgiox.cpp"
 $124 = $ty0; //@line 1141 "emscripten/hgiox.cpp"
 $125 = $124 * $123; //@line 1141 "emscripten/hgiox.cpp"
 $ty0 = $125; //@line 1141 "emscripten/hgiox.cpp"
 $126 = $ratex; //@line 1142 "emscripten/hgiox.cpp"
 $127 = $tx1; //@line 1142 "emscripten/hgiox.cpp"
 $128 = $127 * $126; //@line 1142 "emscripten/hgiox.cpp"
 $tx1 = $128; //@line 1142 "emscripten/hgiox.cpp"
 $129 = $ratey; //@line 1143 "emscripten/hgiox.cpp"
 $130 = $ty1; //@line 1143 "emscripten/hgiox.cpp"
 $131 = $130 * $129; //@line 1143 "emscripten/hgiox.cpp"
 $ty1 = $131; //@line 1143 "emscripten/hgiox.cpp"
 $132 = $tx0; //@line 1145 "emscripten/hgiox.cpp"
 $133 = $flp; //@line 1145 "emscripten/hgiox.cpp"
 $134 = (($133) + 4|0); //@line 1145 "emscripten/hgiox.cpp"
 $flp = $134; //@line 1145 "emscripten/hgiox.cpp"
 HEAPF32[$133>>2] = $132; //@line 1145 "emscripten/hgiox.cpp"
 $135 = $ty0; //@line 1146 "emscripten/hgiox.cpp"
 $136 = $flp; //@line 1146 "emscripten/hgiox.cpp"
 $137 = (($136) + 4|0); //@line 1146 "emscripten/hgiox.cpp"
 $flp = $137; //@line 1146 "emscripten/hgiox.cpp"
 HEAPF32[$136>>2] = $135; //@line 1146 "emscripten/hgiox.cpp"
 $138 = $tx0; //@line 1147 "emscripten/hgiox.cpp"
 $139 = $flp; //@line 1147 "emscripten/hgiox.cpp"
 $140 = (($139) + 4|0); //@line 1147 "emscripten/hgiox.cpp"
 $flp = $140; //@line 1147 "emscripten/hgiox.cpp"
 HEAPF32[$139>>2] = $138; //@line 1147 "emscripten/hgiox.cpp"
 $141 = $ty1; //@line 1148 "emscripten/hgiox.cpp"
 $142 = $flp; //@line 1148 "emscripten/hgiox.cpp"
 $143 = (($142) + 4|0); //@line 1148 "emscripten/hgiox.cpp"
 $flp = $143; //@line 1148 "emscripten/hgiox.cpp"
 HEAPF32[$142>>2] = $141; //@line 1148 "emscripten/hgiox.cpp"
 $144 = $tx1; //@line 1149 "emscripten/hgiox.cpp"
 $145 = $flp; //@line 1149 "emscripten/hgiox.cpp"
 $146 = (($145) + 4|0); //@line 1149 "emscripten/hgiox.cpp"
 $flp = $146; //@line 1149 "emscripten/hgiox.cpp"
 HEAPF32[$145>>2] = $144; //@line 1149 "emscripten/hgiox.cpp"
 $147 = $ty0; //@line 1150 "emscripten/hgiox.cpp"
 $148 = $flp; //@line 1150 "emscripten/hgiox.cpp"
 $149 = (($148) + 4|0); //@line 1150 "emscripten/hgiox.cpp"
 $flp = $149; //@line 1150 "emscripten/hgiox.cpp"
 HEAPF32[$148>>2] = $147; //@line 1150 "emscripten/hgiox.cpp"
 $150 = $tx1; //@line 1151 "emscripten/hgiox.cpp"
 $151 = $flp; //@line 1151 "emscripten/hgiox.cpp"
 $152 = (($151) + 4|0); //@line 1151 "emscripten/hgiox.cpp"
 $flp = $152; //@line 1151 "emscripten/hgiox.cpp"
 HEAPF32[$151>>2] = $150; //@line 1151 "emscripten/hgiox.cpp"
 $153 = $ty1; //@line 1152 "emscripten/hgiox.cpp"
 $154 = $flp; //@line 1152 "emscripten/hgiox.cpp"
 $155 = (($154) + 4|0); //@line 1152 "emscripten/hgiox.cpp"
 $flp = $155; //@line 1152 "emscripten/hgiox.cpp"
 HEAPF32[$154>>2] = $153; //@line 1152 "emscripten/hgiox.cpp"
 $156 = $tex; //@line 1154 "emscripten/hgiox.cpp"
 $157 = (($156) + 12|0); //@line 1154 "emscripten/hgiox.cpp"
 $158 = HEAP32[$157>>2]|0; //@line 1154 "emscripten/hgiox.cpp"
 _ChangeTex($158); //@line 1154 "emscripten/hgiox.cpp"
 _glVertexPointer(2,5126,0,(25544|0)); //@line 1156 "emscripten/hgiox.cpp"
 _glTexCoordPointer(2,5126,0,(25576|0)); //@line 1157 "emscripten/hgiox.cpp"
 $159 = $0; //@line 1159 "emscripten/hgiox.cpp"
 $160 = (($159) + 100|0); //@line 1159 "emscripten/hgiox.cpp"
 $161 = HEAP32[$160>>2]|0; //@line 1159 "emscripten/hgiox.cpp"
 $162 = $0; //@line 1159 "emscripten/hgiox.cpp"
 $163 = (($162) + 144|0); //@line 1159 "emscripten/hgiox.cpp"
 $164 = HEAP32[$163>>2]|0; //@line 1159 "emscripten/hgiox.cpp"
 _hgio_setBlendMode($161,$164); //@line 1159 "emscripten/hgiox.cpp"
 _glDrawArrays(5,0,4); //@line 1161 "emscripten/hgiox.cpp"
 STACKTOP = sp;return; //@line 1161 "emscripten/hgiox.cpp"
}
function _hgio_copyrot($bm,$xx,$yy,$srcsx,$srcsy,$s_ofsx,$s_ofsy,$bmsrc,$psx,$psy,$ang) {
 $bm = $bm|0;
 $xx = $xx|0;
 $yy = $yy|0;
 $srcsx = $srcsx|0;
 $srcsy = $srcsy|0;
 $s_ofsx = +$s_ofsx;
 $s_ofsy = +$s_ofsy;
 $bmsrc = $bmsrc|0;
 $psx = +$psx;
 $psy = +$psy;
 $ang = +$ang;
 var $0 = 0, $1 = 0, $10 = 0.0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0, $113 = 0.0, $114 = 0.0, $115 = 0.0;
 var $116 = 0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0.0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0, $132 = 0.0, $133 = 0;
 var $134 = 0, $135 = 0.0, $136 = 0, $137 = 0, $138 = 0.0, $139 = 0, $14 = 0, $140 = 0, $141 = 0.0, $142 = 0, $143 = 0, $144 = 0.0, $145 = 0, $146 = 0, $147 = 0.0, $148 = 0.0, $149 = 0, $15 = 0, $150 = 0, $151 = 0.0;
 var $152 = 0.0, $153 = 0.0, $154 = 0.0, $155 = 0, $156 = 0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0, $163 = 0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0, $168 = 0, $169 = 0.0, $17 = 0;
 var $170 = 0.0, $171 = 0.0, $172 = 0.0, $173 = 0, $174 = 0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0, $182 = 0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0.0;
 var $189 = 0.0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0;
 var $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0;
 var $62 = 0.0, $63 = 0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0;
 var $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0, $89 = 0, $9 = 0.0, $90 = 0.0, $91 = 0, $92 = 0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $flp = 0, $mx0 = 0.0, $mx1 = 0.0, $my0 = 0.0, $my1 = 0.0, $ofsx = 0.0, $ofsy = 0.0, $sx = 0.0, $sy = 0.0, $tex = 0, $texpx = 0, $texpy = 0, $tx0 = 0.0, $tx1 = 0.0, $ty0 = 0.0, $ty1 = 0.0, $x = 0.0, $x0 = 0.0, $x1 = 0.0;
 var $y = 0.0, $y0 = 0.0, $y1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $0 = $bm;
 $1 = $xx;
 $2 = $yy;
 $3 = $srcsx;
 $4 = $srcsy;
 $5 = $s_ofsx;
 $6 = $s_ofsy;
 $7 = $bmsrc;
 $8 = $psx;
 $9 = $psy;
 $10 = $ang;
 $11 = $0; //@line 1171 "emscripten/hgiox.cpp"
 $12 = ($11|0)==(0|0); //@line 1171 "emscripten/hgiox.cpp"
 if ($12) {
  STACKTOP = sp;return; //@line 1268 "emscripten/hgiox.cpp"
 }
 $13 = $0; //@line 1172 "emscripten/hgiox.cpp"
 $14 = (($13) + 28|0); //@line 1172 "emscripten/hgiox.cpp"
 $15 = HEAP32[$14>>2]|0; //@line 1172 "emscripten/hgiox.cpp"
 $16 = ($15|0)!=(2); //@line 1172 "emscripten/hgiox.cpp"
 if ($16) {
  $17 = (___cxa_allocate_exception(4)|0); //@line 1172 "emscripten/hgiox.cpp"
  HEAP32[$17>>2] = 21; //@line 1172 "emscripten/hgiox.cpp"
  ___cxa_throw(($17|0),(624|0),(0|0)); //@line 1172 "emscripten/hgiox.cpp"
  // unreachable; //@line 1172 "emscripten/hgiox.cpp"
 }
 $18 = $7; //@line 1174 "emscripten/hgiox.cpp"
 $19 = (($18) + 280|0); //@line 1174 "emscripten/hgiox.cpp"
 $20 = HEAP32[$19>>2]|0; //@line 1174 "emscripten/hgiox.cpp"
 $21 = (_GetTex($20)|0); //@line 1174 "emscripten/hgiox.cpp"
 $tex = $21; //@line 1174 "emscripten/hgiox.cpp"
 $22 = $tex; //@line 1175 "emscripten/hgiox.cpp"
 $23 = HEAP16[$22>>1]|0; //@line 1175 "emscripten/hgiox.cpp"
 $24 = $23 << 16 >> 16; //@line 1175 "emscripten/hgiox.cpp"
 $25 = ($24|0)==(0); //@line 1175 "emscripten/hgiox.cpp"
 if ($25) {
  STACKTOP = sp;return; //@line 1268 "emscripten/hgiox.cpp"
 } else {
  $26 = $10; //@line 1186 "emscripten/hgiox.cpp"
  $27 = $26; //@line 1186 "emscripten/hgiox.cpp"
  $28 = (+Math_sin((+$27))); //@line 1186 "emscripten/hgiox.cpp"
  $29 = $28; //@line 1186 "emscripten/hgiox.cpp"
  $30 = -$29; //@line 1186 "emscripten/hgiox.cpp"
  $mx0 = $30; //@line 1186 "emscripten/hgiox.cpp"
  $31 = $10; //@line 1187 "emscripten/hgiox.cpp"
  $32 = $31; //@line 1187 "emscripten/hgiox.cpp"
  $33 = (+Math_cos((+$32))); //@line 1187 "emscripten/hgiox.cpp"
  $34 = $33; //@line 1187 "emscripten/hgiox.cpp"
  $my0 = $34; //@line 1187 "emscripten/hgiox.cpp"
  $35 = $my0; //@line 1188 "emscripten/hgiox.cpp"
  $36 = -$35; //@line 1188 "emscripten/hgiox.cpp"
  $mx1 = $36; //@line 1188 "emscripten/hgiox.cpp"
  $37 = $mx0; //@line 1189 "emscripten/hgiox.cpp"
  $my1 = $37; //@line 1189 "emscripten/hgiox.cpp"
  $38 = $5; //@line 1191 "emscripten/hgiox.cpp"
  $39 = -$38; //@line 1191 "emscripten/hgiox.cpp"
  $ofsx = $39; //@line 1191 "emscripten/hgiox.cpp"
  $40 = $6; //@line 1192 "emscripten/hgiox.cpp"
  $41 = -$40; //@line 1192 "emscripten/hgiox.cpp"
  $ofsy = $41; //@line 1192 "emscripten/hgiox.cpp"
  $42 = $mx0; //@line 1193 "emscripten/hgiox.cpp"
  $43 = $ofsy; //@line 1193 "emscripten/hgiox.cpp"
  $44 = $42 * $43; //@line 1193 "emscripten/hgiox.cpp"
  $x0 = $44; //@line 1193 "emscripten/hgiox.cpp"
  $45 = $my0; //@line 1194 "emscripten/hgiox.cpp"
  $46 = $ofsy; //@line 1194 "emscripten/hgiox.cpp"
  $47 = $45 * $46; //@line 1194 "emscripten/hgiox.cpp"
  $y0 = $47; //@line 1194 "emscripten/hgiox.cpp"
  $48 = $mx1; //@line 1195 "emscripten/hgiox.cpp"
  $49 = $ofsx; //@line 1195 "emscripten/hgiox.cpp"
  $50 = $48 * $49; //@line 1195 "emscripten/hgiox.cpp"
  $x1 = $50; //@line 1195 "emscripten/hgiox.cpp"
  $51 = $my1; //@line 1196 "emscripten/hgiox.cpp"
  $52 = $ofsx; //@line 1196 "emscripten/hgiox.cpp"
  $53 = $51 * $52; //@line 1196 "emscripten/hgiox.cpp"
  $y1 = $53; //@line 1196 "emscripten/hgiox.cpp"
  $54 = $0; //@line 1199 "emscripten/hgiox.cpp"
  $55 = (($54) + 68|0); //@line 1199 "emscripten/hgiox.cpp"
  $56 = HEAP32[$55>>2]|0; //@line 1199 "emscripten/hgiox.cpp"
  $57 = (+($56|0)); //@line 1199 "emscripten/hgiox.cpp"
  $58 = $x0; //@line 1199 "emscripten/hgiox.cpp"
  $59 = -$58; //@line 1199 "emscripten/hgiox.cpp"
  $60 = $x1; //@line 1199 "emscripten/hgiox.cpp"
  $61 = $59 + $60; //@line 1199 "emscripten/hgiox.cpp"
  $62 = $57 - $61; //@line 1199 "emscripten/hgiox.cpp"
  $x = $62; //@line 1199 "emscripten/hgiox.cpp"
  $63 = $0; //@line 1200 "emscripten/hgiox.cpp"
  $64 = (($63) + 72|0); //@line 1200 "emscripten/hgiox.cpp"
  $65 = HEAP32[$64>>2]|0; //@line 1200 "emscripten/hgiox.cpp"
  $66 = (+($65|0)); //@line 1200 "emscripten/hgiox.cpp"
  $67 = $y0; //@line 1200 "emscripten/hgiox.cpp"
  $68 = -$67; //@line 1200 "emscripten/hgiox.cpp"
  $69 = $y1; //@line 1200 "emscripten/hgiox.cpp"
  $70 = $68 + $69; //@line 1200 "emscripten/hgiox.cpp"
  $71 = $66 - $70; //@line 1200 "emscripten/hgiox.cpp"
  $y = $71; //@line 1200 "emscripten/hgiox.cpp"
  $72 = $8; //@line 1205 "emscripten/hgiox.cpp"
  $73 = -$72; //@line 1205 "emscripten/hgiox.cpp"
  $ofsx = $73; //@line 1205 "emscripten/hgiox.cpp"
  $74 = $9; //@line 1206 "emscripten/hgiox.cpp"
  $75 = -$74; //@line 1206 "emscripten/hgiox.cpp"
  $ofsy = $75; //@line 1206 "emscripten/hgiox.cpp"
  $76 = $mx0; //@line 1207 "emscripten/hgiox.cpp"
  $77 = $ofsy; //@line 1207 "emscripten/hgiox.cpp"
  $78 = $76 * $77; //@line 1207 "emscripten/hgiox.cpp"
  $x0 = $78; //@line 1207 "emscripten/hgiox.cpp"
  $79 = $my0; //@line 1208 "emscripten/hgiox.cpp"
  $80 = $ofsy; //@line 1208 "emscripten/hgiox.cpp"
  $81 = $79 * $80; //@line 1208 "emscripten/hgiox.cpp"
  $y0 = $81; //@line 1208 "emscripten/hgiox.cpp"
  $82 = $mx1; //@line 1209 "emscripten/hgiox.cpp"
  $83 = $ofsx; //@line 1209 "emscripten/hgiox.cpp"
  $84 = $82 * $83; //@line 1209 "emscripten/hgiox.cpp"
  $x1 = $84; //@line 1209 "emscripten/hgiox.cpp"
  $85 = $my1; //@line 1210 "emscripten/hgiox.cpp"
  $86 = $ofsx; //@line 1210 "emscripten/hgiox.cpp"
  $87 = $85 * $86; //@line 1210 "emscripten/hgiox.cpp"
  $y1 = $87; //@line 1210 "emscripten/hgiox.cpp"
  $88 = $tex; //@line 1214 "emscripten/hgiox.cpp"
  $89 = (($88) + 16|0); //@line 1214 "emscripten/hgiox.cpp"
  $90 = +HEAPF32[$89>>2]; //@line 1214 "emscripten/hgiox.cpp"
  $sx = $90; //@line 1214 "emscripten/hgiox.cpp"
  $91 = $tex; //@line 1215 "emscripten/hgiox.cpp"
  $92 = (($91) + 20|0); //@line 1215 "emscripten/hgiox.cpp"
  $93 = +HEAPF32[$92>>2]; //@line 1215 "emscripten/hgiox.cpp"
  $sy = $93; //@line 1215 "emscripten/hgiox.cpp"
  $94 = $1; //@line 1218 "emscripten/hgiox.cpp"
  $95 = $94 << 16 >> 16; //@line 1218 "emscripten/hgiox.cpp"
  $96 = $3; //@line 1218 "emscripten/hgiox.cpp"
  $97 = $96 << 16 >> 16; //@line 1218 "emscripten/hgiox.cpp"
  $98 = (($95) + ($97))|0; //@line 1218 "emscripten/hgiox.cpp"
  $texpx = $98; //@line 1218 "emscripten/hgiox.cpp"
  $99 = $2; //@line 1219 "emscripten/hgiox.cpp"
  $100 = $99 << 16 >> 16; //@line 1219 "emscripten/hgiox.cpp"
  $101 = $4; //@line 1219 "emscripten/hgiox.cpp"
  $102 = $101 << 16 >> 16; //@line 1219 "emscripten/hgiox.cpp"
  $103 = (($100) + ($102))|0; //@line 1219 "emscripten/hgiox.cpp"
  $texpy = $103; //@line 1219 "emscripten/hgiox.cpp"
  $104 = $1; //@line 1221 "emscripten/hgiox.cpp"
  $105 = (+($104<<16>>16)); //@line 1221 "emscripten/hgiox.cpp"
  $106 = $sx; //@line 1221 "emscripten/hgiox.cpp"
  $107 = $105 * $106; //@line 1221 "emscripten/hgiox.cpp"
  $tx0 = $107; //@line 1221 "emscripten/hgiox.cpp"
  $108 = $2; //@line 1222 "emscripten/hgiox.cpp"
  $109 = (+($108<<16>>16)); //@line 1222 "emscripten/hgiox.cpp"
  $110 = $sy; //@line 1222 "emscripten/hgiox.cpp"
  $111 = $109 * $110; //@line 1222 "emscripten/hgiox.cpp"
  $ty0 = $111; //@line 1222 "emscripten/hgiox.cpp"
  $112 = $texpx; //@line 1223 "emscripten/hgiox.cpp"
  $113 = (+($112|0)); //@line 1223 "emscripten/hgiox.cpp"
  $114 = $sx; //@line 1223 "emscripten/hgiox.cpp"
  $115 = $113 * $114; //@line 1223 "emscripten/hgiox.cpp"
  $tx1 = $115; //@line 1223 "emscripten/hgiox.cpp"
  $116 = $texpy; //@line 1224 "emscripten/hgiox.cpp"
  $117 = (+($116|0)); //@line 1224 "emscripten/hgiox.cpp"
  $118 = $sy; //@line 1224 "emscripten/hgiox.cpp"
  $119 = $117 * $118; //@line 1224 "emscripten/hgiox.cpp"
  $ty1 = $119; //@line 1224 "emscripten/hgiox.cpp"
  $flp = 25576; //@line 1226 "emscripten/hgiox.cpp"
  $120 = $tx0; //@line 1227 "emscripten/hgiox.cpp"
  $121 = $flp; //@line 1227 "emscripten/hgiox.cpp"
  $122 = (($121) + 4|0); //@line 1227 "emscripten/hgiox.cpp"
  $flp = $122; //@line 1227 "emscripten/hgiox.cpp"
  HEAPF32[$121>>2] = $120; //@line 1227 "emscripten/hgiox.cpp"
  $123 = $ty0; //@line 1228 "emscripten/hgiox.cpp"
  $124 = $flp; //@line 1228 "emscripten/hgiox.cpp"
  $125 = (($124) + 4|0); //@line 1228 "emscripten/hgiox.cpp"
  $flp = $125; //@line 1228 "emscripten/hgiox.cpp"
  HEAPF32[$124>>2] = $123; //@line 1228 "emscripten/hgiox.cpp"
  $126 = $tx0; //@line 1229 "emscripten/hgiox.cpp"
  $127 = $flp; //@line 1229 "emscripten/hgiox.cpp"
  $128 = (($127) + 4|0); //@line 1229 "emscripten/hgiox.cpp"
  $flp = $128; //@line 1229 "emscripten/hgiox.cpp"
  HEAPF32[$127>>2] = $126; //@line 1229 "emscripten/hgiox.cpp"
  $129 = $ty1; //@line 1230 "emscripten/hgiox.cpp"
  $130 = $flp; //@line 1230 "emscripten/hgiox.cpp"
  $131 = (($130) + 4|0); //@line 1230 "emscripten/hgiox.cpp"
  $flp = $131; //@line 1230 "emscripten/hgiox.cpp"
  HEAPF32[$130>>2] = $129; //@line 1230 "emscripten/hgiox.cpp"
  $132 = $tx1; //@line 1231 "emscripten/hgiox.cpp"
  $133 = $flp; //@line 1231 "emscripten/hgiox.cpp"
  $134 = (($133) + 4|0); //@line 1231 "emscripten/hgiox.cpp"
  $flp = $134; //@line 1231 "emscripten/hgiox.cpp"
  HEAPF32[$133>>2] = $132; //@line 1231 "emscripten/hgiox.cpp"
  $135 = $ty0; //@line 1232 "emscripten/hgiox.cpp"
  $136 = $flp; //@line 1232 "emscripten/hgiox.cpp"
  $137 = (($136) + 4|0); //@line 1232 "emscripten/hgiox.cpp"
  $flp = $137; //@line 1232 "emscripten/hgiox.cpp"
  HEAPF32[$136>>2] = $135; //@line 1232 "emscripten/hgiox.cpp"
  $138 = $tx1; //@line 1233 "emscripten/hgiox.cpp"
  $139 = $flp; //@line 1233 "emscripten/hgiox.cpp"
  $140 = (($139) + 4|0); //@line 1233 "emscripten/hgiox.cpp"
  $flp = $140; //@line 1233 "emscripten/hgiox.cpp"
  HEAPF32[$139>>2] = $138; //@line 1233 "emscripten/hgiox.cpp"
  $141 = $ty1; //@line 1234 "emscripten/hgiox.cpp"
  $142 = $flp; //@line 1234 "emscripten/hgiox.cpp"
  $143 = (($142) + 4|0); //@line 1234 "emscripten/hgiox.cpp"
  $flp = $143; //@line 1234 "emscripten/hgiox.cpp"
  HEAPF32[$142>>2] = $141; //@line 1234 "emscripten/hgiox.cpp"
  $flp = 25544; //@line 1238 "emscripten/hgiox.cpp"
  $144 = $x; //@line 1240 "emscripten/hgiox.cpp"
  $145 = $flp; //@line 1240 "emscripten/hgiox.cpp"
  $146 = (($145) + 4|0); //@line 1240 "emscripten/hgiox.cpp"
  $flp = $146; //@line 1240 "emscripten/hgiox.cpp"
  HEAPF32[$145>>2] = $144; //@line 1240 "emscripten/hgiox.cpp"
  $147 = $y; //@line 1241 "emscripten/hgiox.cpp"
  $148 = -$147; //@line 1241 "emscripten/hgiox.cpp"
  $149 = $flp; //@line 1241 "emscripten/hgiox.cpp"
  $150 = (($149) + 4|0); //@line 1241 "emscripten/hgiox.cpp"
  $flp = $150; //@line 1241 "emscripten/hgiox.cpp"
  HEAPF32[$149>>2] = $148; //@line 1241 "emscripten/hgiox.cpp"
  $151 = $x0; //@line 1245 "emscripten/hgiox.cpp"
  $152 = -$151; //@line 1245 "emscripten/hgiox.cpp"
  $153 = $x; //@line 1245 "emscripten/hgiox.cpp"
  $154 = $152 + $153; //@line 1245 "emscripten/hgiox.cpp"
  $155 = $flp; //@line 1245 "emscripten/hgiox.cpp"
  $156 = (($155) + 4|0); //@line 1245 "emscripten/hgiox.cpp"
  $flp = $156; //@line 1245 "emscripten/hgiox.cpp"
  HEAPF32[$155>>2] = $154; //@line 1245 "emscripten/hgiox.cpp"
  $157 = $y0; //@line 1246 "emscripten/hgiox.cpp"
  $158 = -$157; //@line 1246 "emscripten/hgiox.cpp"
  $159 = $y; //@line 1246 "emscripten/hgiox.cpp"
  $160 = $158 + $159; //@line 1246 "emscripten/hgiox.cpp"
  $161 = -$160; //@line 1246 "emscripten/hgiox.cpp"
  $162 = $flp; //@line 1246 "emscripten/hgiox.cpp"
  $163 = (($162) + 4|0); //@line 1246 "emscripten/hgiox.cpp"
  $flp = $163; //@line 1246 "emscripten/hgiox.cpp"
  HEAPF32[$162>>2] = $161; //@line 1246 "emscripten/hgiox.cpp"
  $164 = $x1; //@line 1250 "emscripten/hgiox.cpp"
  $165 = $x; //@line 1250 "emscripten/hgiox.cpp"
  $166 = $164 + $165; //@line 1250 "emscripten/hgiox.cpp"
  $167 = $flp; //@line 1250 "emscripten/hgiox.cpp"
  $168 = (($167) + 4|0); //@line 1250 "emscripten/hgiox.cpp"
  $flp = $168; //@line 1250 "emscripten/hgiox.cpp"
  HEAPF32[$167>>2] = $166; //@line 1250 "emscripten/hgiox.cpp"
  $169 = $y1; //@line 1251 "emscripten/hgiox.cpp"
  $170 = $y; //@line 1251 "emscripten/hgiox.cpp"
  $171 = $169 + $170; //@line 1251 "emscripten/hgiox.cpp"
  $172 = -$171; //@line 1251 "emscripten/hgiox.cpp"
  $173 = $flp; //@line 1251 "emscripten/hgiox.cpp"
  $174 = (($173) + 4|0); //@line 1251 "emscripten/hgiox.cpp"
  $flp = $174; //@line 1251 "emscripten/hgiox.cpp"
  HEAPF32[$173>>2] = $172; //@line 1251 "emscripten/hgiox.cpp"
  $175 = $x0; //@line 1255 "emscripten/hgiox.cpp"
  $176 = -$175; //@line 1255 "emscripten/hgiox.cpp"
  $177 = $x1; //@line 1255 "emscripten/hgiox.cpp"
  $178 = $176 + $177; //@line 1255 "emscripten/hgiox.cpp"
  $179 = $x; //@line 1255 "emscripten/hgiox.cpp"
  $180 = $178 + $179; //@line 1255 "emscripten/hgiox.cpp"
  $181 = $flp; //@line 1255 "emscripten/hgiox.cpp"
  $182 = (($181) + 4|0); //@line 1255 "emscripten/hgiox.cpp"
  $flp = $182; //@line 1255 "emscripten/hgiox.cpp"
  HEAPF32[$181>>2] = $180; //@line 1255 "emscripten/hgiox.cpp"
  $183 = $y0; //@line 1256 "emscripten/hgiox.cpp"
  $184 = -$183; //@line 1256 "emscripten/hgiox.cpp"
  $185 = $y1; //@line 1256 "emscripten/hgiox.cpp"
  $186 = $184 + $185; //@line 1256 "emscripten/hgiox.cpp"
  $187 = $y; //@line 1256 "emscripten/hgiox.cpp"
  $188 = $186 + $187; //@line 1256 "emscripten/hgiox.cpp"
  $189 = -$188; //@line 1256 "emscripten/hgiox.cpp"
  $190 = $flp; //@line 1256 "emscripten/hgiox.cpp"
  $191 = (($190) + 4|0); //@line 1256 "emscripten/hgiox.cpp"
  $flp = $191; //@line 1256 "emscripten/hgiox.cpp"
  HEAPF32[$190>>2] = $189; //@line 1256 "emscripten/hgiox.cpp"
  $192 = $tex; //@line 1260 "emscripten/hgiox.cpp"
  $193 = (($192) + 12|0); //@line 1260 "emscripten/hgiox.cpp"
  $194 = HEAP32[$193>>2]|0; //@line 1260 "emscripten/hgiox.cpp"
  _ChangeTex($194); //@line 1260 "emscripten/hgiox.cpp"
  _glVertexPointer(2,5126,0,(25544|0)); //@line 1263 "emscripten/hgiox.cpp"
  _glTexCoordPointer(2,5126,0,(25576|0)); //@line 1264 "emscripten/hgiox.cpp"
  $195 = $0; //@line 1266 "emscripten/hgiox.cpp"
  $196 = (($195) + 100|0); //@line 1266 "emscripten/hgiox.cpp"
  $197 = HEAP32[$196>>2]|0; //@line 1266 "emscripten/hgiox.cpp"
  $198 = $0; //@line 1266 "emscripten/hgiox.cpp"
  $199 = (($198) + 144|0); //@line 1266 "emscripten/hgiox.cpp"
  $200 = HEAP32[$199>>2]|0; //@line 1266 "emscripten/hgiox.cpp"
  _hgio_setBlendMode($197,$200); //@line 1266 "emscripten/hgiox.cpp"
  _glDrawArrays(5,0,4); //@line 1268 "emscripten/hgiox.cpp"
  STACKTOP = sp;return; //@line 1268 "emscripten/hgiox.cpp"
 }
}
function _hgio_square_tex($bm,$posx,$posy,$bmsrc,$uvx,$uvy) {
 $bm = $bm|0;
 $posx = $posx|0;
 $posy = $posy|0;
 $bmsrc = $bmsrc|0;
 $uvx = $uvx|0;
 $uvy = $uvy|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0.0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0.0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0;
 var $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0.0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0.0, $98 = 0, $99 = 0, $flp = 0, $sx = 0.0, $sy = 0.0, $tex = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = $bm;
 $1 = $posx;
 $2 = $posy;
 $3 = $bmsrc;
 $4 = $uvx;
 $5 = $uvy;
 $6 = $0; //@line 1276 "emscripten/hgiox.cpp"
 $7 = ($6|0)==(0|0); //@line 1276 "emscripten/hgiox.cpp"
 if ($7) {
  STACKTOP = sp;return; //@line 1316 "emscripten/hgiox.cpp"
 }
 $8 = $0; //@line 1277 "emscripten/hgiox.cpp"
 $9 = (($8) + 28|0); //@line 1277 "emscripten/hgiox.cpp"
 $10 = HEAP32[$9>>2]|0; //@line 1277 "emscripten/hgiox.cpp"
 $11 = ($10|0)!=(2); //@line 1277 "emscripten/hgiox.cpp"
 if ($11) {
  $12 = (___cxa_allocate_exception(4)|0); //@line 1277 "emscripten/hgiox.cpp"
  HEAP32[$12>>2] = 21; //@line 1277 "emscripten/hgiox.cpp"
  ___cxa_throw(($12|0),(624|0),(0|0)); //@line 1277 "emscripten/hgiox.cpp"
  // unreachable; //@line 1277 "emscripten/hgiox.cpp"
 }
 $13 = $3; //@line 1279 "emscripten/hgiox.cpp"
 $14 = (($13) + 280|0); //@line 1279 "emscripten/hgiox.cpp"
 $15 = HEAP32[$14>>2]|0; //@line 1279 "emscripten/hgiox.cpp"
 $16 = (_GetTex($15)|0); //@line 1279 "emscripten/hgiox.cpp"
 $tex = $16; //@line 1279 "emscripten/hgiox.cpp"
 $17 = $tex; //@line 1280 "emscripten/hgiox.cpp"
 $18 = HEAP16[$17>>1]|0; //@line 1280 "emscripten/hgiox.cpp"
 $19 = $18 << 16 >> 16; //@line 1280 "emscripten/hgiox.cpp"
 $20 = ($19|0)==(0); //@line 1280 "emscripten/hgiox.cpp"
 if ($20) {
  STACKTOP = sp;return; //@line 1316 "emscripten/hgiox.cpp"
 } else {
  $21 = $tex; //@line 1285 "emscripten/hgiox.cpp"
  $22 = (($21) + 16|0); //@line 1285 "emscripten/hgiox.cpp"
  $23 = +HEAPF32[$22>>2]; //@line 1285 "emscripten/hgiox.cpp"
  $sx = $23; //@line 1285 "emscripten/hgiox.cpp"
  $24 = $tex; //@line 1286 "emscripten/hgiox.cpp"
  $25 = (($24) + 20|0); //@line 1286 "emscripten/hgiox.cpp"
  $26 = +HEAPF32[$25>>2]; //@line 1286 "emscripten/hgiox.cpp"
  $sy = $26; //@line 1286 "emscripten/hgiox.cpp"
  $flp = 25576; //@line 1288 "emscripten/hgiox.cpp"
  $27 = $4; //@line 1289 "emscripten/hgiox.cpp"
  $28 = HEAP32[$27>>2]|0; //@line 1289 "emscripten/hgiox.cpp"
  $29 = (+($28|0)); //@line 1289 "emscripten/hgiox.cpp"
  $30 = $sx; //@line 1289 "emscripten/hgiox.cpp"
  $31 = $29 * $30; //@line 1289 "emscripten/hgiox.cpp"
  $32 = $flp; //@line 1289 "emscripten/hgiox.cpp"
  $33 = (($32) + 4|0); //@line 1289 "emscripten/hgiox.cpp"
  $flp = $33; //@line 1289 "emscripten/hgiox.cpp"
  HEAPF32[$32>>2] = $31; //@line 1289 "emscripten/hgiox.cpp"
  $34 = $5; //@line 1290 "emscripten/hgiox.cpp"
  $35 = HEAP32[$34>>2]|0; //@line 1290 "emscripten/hgiox.cpp"
  $36 = (+($35|0)); //@line 1290 "emscripten/hgiox.cpp"
  $37 = $sy; //@line 1290 "emscripten/hgiox.cpp"
  $38 = $36 * $37; //@line 1290 "emscripten/hgiox.cpp"
  $39 = $flp; //@line 1290 "emscripten/hgiox.cpp"
  $40 = (($39) + 4|0); //@line 1290 "emscripten/hgiox.cpp"
  $flp = $40; //@line 1290 "emscripten/hgiox.cpp"
  HEAPF32[$39>>2] = $38; //@line 1290 "emscripten/hgiox.cpp"
  $41 = $4; //@line 1291 "emscripten/hgiox.cpp"
  $42 = (($41) + 12|0); //@line 1291 "emscripten/hgiox.cpp"
  $43 = HEAP32[$42>>2]|0; //@line 1291 "emscripten/hgiox.cpp"
  $44 = (+($43|0)); //@line 1291 "emscripten/hgiox.cpp"
  $45 = $sx; //@line 1291 "emscripten/hgiox.cpp"
  $46 = $44 * $45; //@line 1291 "emscripten/hgiox.cpp"
  $47 = $flp; //@line 1291 "emscripten/hgiox.cpp"
  $48 = (($47) + 4|0); //@line 1291 "emscripten/hgiox.cpp"
  $flp = $48; //@line 1291 "emscripten/hgiox.cpp"
  HEAPF32[$47>>2] = $46; //@line 1291 "emscripten/hgiox.cpp"
  $49 = $5; //@line 1292 "emscripten/hgiox.cpp"
  $50 = (($49) + 12|0); //@line 1292 "emscripten/hgiox.cpp"
  $51 = HEAP32[$50>>2]|0; //@line 1292 "emscripten/hgiox.cpp"
  $52 = (+($51|0)); //@line 1292 "emscripten/hgiox.cpp"
  $53 = $sy; //@line 1292 "emscripten/hgiox.cpp"
  $54 = $52 * $53; //@line 1292 "emscripten/hgiox.cpp"
  $55 = $flp; //@line 1292 "emscripten/hgiox.cpp"
  $56 = (($55) + 4|0); //@line 1292 "emscripten/hgiox.cpp"
  $flp = $56; //@line 1292 "emscripten/hgiox.cpp"
  HEAPF32[$55>>2] = $54; //@line 1292 "emscripten/hgiox.cpp"
  $57 = $4; //@line 1293 "emscripten/hgiox.cpp"
  $58 = (($57) + 4|0); //@line 1293 "emscripten/hgiox.cpp"
  $59 = HEAP32[$58>>2]|0; //@line 1293 "emscripten/hgiox.cpp"
  $60 = (+($59|0)); //@line 1293 "emscripten/hgiox.cpp"
  $61 = $sx; //@line 1293 "emscripten/hgiox.cpp"
  $62 = $60 * $61; //@line 1293 "emscripten/hgiox.cpp"
  $63 = $flp; //@line 1293 "emscripten/hgiox.cpp"
  $64 = (($63) + 4|0); //@line 1293 "emscripten/hgiox.cpp"
  $flp = $64; //@line 1293 "emscripten/hgiox.cpp"
  HEAPF32[$63>>2] = $62; //@line 1293 "emscripten/hgiox.cpp"
  $65 = $5; //@line 1294 "emscripten/hgiox.cpp"
  $66 = (($65) + 4|0); //@line 1294 "emscripten/hgiox.cpp"
  $67 = HEAP32[$66>>2]|0; //@line 1294 "emscripten/hgiox.cpp"
  $68 = (+($67|0)); //@line 1294 "emscripten/hgiox.cpp"
  $69 = $sy; //@line 1294 "emscripten/hgiox.cpp"
  $70 = $68 * $69; //@line 1294 "emscripten/hgiox.cpp"
  $71 = $flp; //@line 1294 "emscripten/hgiox.cpp"
  $72 = (($71) + 4|0); //@line 1294 "emscripten/hgiox.cpp"
  $flp = $72; //@line 1294 "emscripten/hgiox.cpp"
  HEAPF32[$71>>2] = $70; //@line 1294 "emscripten/hgiox.cpp"
  $73 = $4; //@line 1295 "emscripten/hgiox.cpp"
  $74 = (($73) + 8|0); //@line 1295 "emscripten/hgiox.cpp"
  $75 = HEAP32[$74>>2]|0; //@line 1295 "emscripten/hgiox.cpp"
  $76 = (+($75|0)); //@line 1295 "emscripten/hgiox.cpp"
  $77 = $sx; //@line 1295 "emscripten/hgiox.cpp"
  $78 = $76 * $77; //@line 1295 "emscripten/hgiox.cpp"
  $79 = $flp; //@line 1295 "emscripten/hgiox.cpp"
  $80 = (($79) + 4|0); //@line 1295 "emscripten/hgiox.cpp"
  $flp = $80; //@line 1295 "emscripten/hgiox.cpp"
  HEAPF32[$79>>2] = $78; //@line 1295 "emscripten/hgiox.cpp"
  $81 = $5; //@line 1296 "emscripten/hgiox.cpp"
  $82 = (($81) + 8|0); //@line 1296 "emscripten/hgiox.cpp"
  $83 = HEAP32[$82>>2]|0; //@line 1296 "emscripten/hgiox.cpp"
  $84 = (+($83|0)); //@line 1296 "emscripten/hgiox.cpp"
  $85 = $sy; //@line 1296 "emscripten/hgiox.cpp"
  $86 = $84 * $85; //@line 1296 "emscripten/hgiox.cpp"
  $87 = $flp; //@line 1296 "emscripten/hgiox.cpp"
  $88 = (($87) + 4|0); //@line 1296 "emscripten/hgiox.cpp"
  $flp = $88; //@line 1296 "emscripten/hgiox.cpp"
  HEAPF32[$87>>2] = $86; //@line 1296 "emscripten/hgiox.cpp"
  $flp = 25544; //@line 1298 "emscripten/hgiox.cpp"
  $89 = $1; //@line 1299 "emscripten/hgiox.cpp"
  $90 = HEAP32[$89>>2]|0; //@line 1299 "emscripten/hgiox.cpp"
  $91 = (+($90|0)); //@line 1299 "emscripten/hgiox.cpp"
  $92 = $flp; //@line 1299 "emscripten/hgiox.cpp"
  $93 = (($92) + 4|0); //@line 1299 "emscripten/hgiox.cpp"
  $flp = $93; //@line 1299 "emscripten/hgiox.cpp"
  HEAPF32[$92>>2] = $91; //@line 1299 "emscripten/hgiox.cpp"
  $94 = $2; //@line 1300 "emscripten/hgiox.cpp"
  $95 = HEAP32[$94>>2]|0; //@line 1300 "emscripten/hgiox.cpp"
  $96 = (0 - ($95))|0; //@line 1300 "emscripten/hgiox.cpp"
  $97 = (+($96|0)); //@line 1300 "emscripten/hgiox.cpp"
  $98 = $flp; //@line 1300 "emscripten/hgiox.cpp"
  $99 = (($98) + 4|0); //@line 1300 "emscripten/hgiox.cpp"
  $flp = $99; //@line 1300 "emscripten/hgiox.cpp"
  HEAPF32[$98>>2] = $97; //@line 1300 "emscripten/hgiox.cpp"
  $100 = $1; //@line 1301 "emscripten/hgiox.cpp"
  $101 = (($100) + 12|0); //@line 1301 "emscripten/hgiox.cpp"
  $102 = HEAP32[$101>>2]|0; //@line 1301 "emscripten/hgiox.cpp"
  $103 = (+($102|0)); //@line 1301 "emscripten/hgiox.cpp"
  $104 = $flp; //@line 1301 "emscripten/hgiox.cpp"
  $105 = (($104) + 4|0); //@line 1301 "emscripten/hgiox.cpp"
  $flp = $105; //@line 1301 "emscripten/hgiox.cpp"
  HEAPF32[$104>>2] = $103; //@line 1301 "emscripten/hgiox.cpp"
  $106 = $2; //@line 1302 "emscripten/hgiox.cpp"
  $107 = (($106) + 12|0); //@line 1302 "emscripten/hgiox.cpp"
  $108 = HEAP32[$107>>2]|0; //@line 1302 "emscripten/hgiox.cpp"
  $109 = (0 - ($108))|0; //@line 1302 "emscripten/hgiox.cpp"
  $110 = (+($109|0)); //@line 1302 "emscripten/hgiox.cpp"
  $111 = $flp; //@line 1302 "emscripten/hgiox.cpp"
  $112 = (($111) + 4|0); //@line 1302 "emscripten/hgiox.cpp"
  $flp = $112; //@line 1302 "emscripten/hgiox.cpp"
  HEAPF32[$111>>2] = $110; //@line 1302 "emscripten/hgiox.cpp"
  $113 = $1; //@line 1303 "emscripten/hgiox.cpp"
  $114 = (($113) + 4|0); //@line 1303 "emscripten/hgiox.cpp"
  $115 = HEAP32[$114>>2]|0; //@line 1303 "emscripten/hgiox.cpp"
  $116 = (+($115|0)); //@line 1303 "emscripten/hgiox.cpp"
  $117 = $flp; //@line 1303 "emscripten/hgiox.cpp"
  $118 = (($117) + 4|0); //@line 1303 "emscripten/hgiox.cpp"
  $flp = $118; //@line 1303 "emscripten/hgiox.cpp"
  HEAPF32[$117>>2] = $116; //@line 1303 "emscripten/hgiox.cpp"
  $119 = $2; //@line 1304 "emscripten/hgiox.cpp"
  $120 = (($119) + 4|0); //@line 1304 "emscripten/hgiox.cpp"
  $121 = HEAP32[$120>>2]|0; //@line 1304 "emscripten/hgiox.cpp"
  $122 = (0 - ($121))|0; //@line 1304 "emscripten/hgiox.cpp"
  $123 = (+($122|0)); //@line 1304 "emscripten/hgiox.cpp"
  $124 = $flp; //@line 1304 "emscripten/hgiox.cpp"
  $125 = (($124) + 4|0); //@line 1304 "emscripten/hgiox.cpp"
  $flp = $125; //@line 1304 "emscripten/hgiox.cpp"
  HEAPF32[$124>>2] = $123; //@line 1304 "emscripten/hgiox.cpp"
  $126 = $1; //@line 1305 "emscripten/hgiox.cpp"
  $127 = (($126) + 8|0); //@line 1305 "emscripten/hgiox.cpp"
  $128 = HEAP32[$127>>2]|0; //@line 1305 "emscripten/hgiox.cpp"
  $129 = (+($128|0)); //@line 1305 "emscripten/hgiox.cpp"
  $130 = $flp; //@line 1305 "emscripten/hgiox.cpp"
  $131 = (($130) + 4|0); //@line 1305 "emscripten/hgiox.cpp"
  $flp = $131; //@line 1305 "emscripten/hgiox.cpp"
  HEAPF32[$130>>2] = $129; //@line 1305 "emscripten/hgiox.cpp"
  $132 = $2; //@line 1306 "emscripten/hgiox.cpp"
  $133 = (($132) + 8|0); //@line 1306 "emscripten/hgiox.cpp"
  $134 = HEAP32[$133>>2]|0; //@line 1306 "emscripten/hgiox.cpp"
  $135 = (0 - ($134))|0; //@line 1306 "emscripten/hgiox.cpp"
  $136 = (+($135|0)); //@line 1306 "emscripten/hgiox.cpp"
  $137 = $flp; //@line 1306 "emscripten/hgiox.cpp"
  $138 = (($137) + 4|0); //@line 1306 "emscripten/hgiox.cpp"
  $flp = $138; //@line 1306 "emscripten/hgiox.cpp"
  HEAPF32[$137>>2] = $136; //@line 1306 "emscripten/hgiox.cpp"
  $139 = $tex; //@line 1308 "emscripten/hgiox.cpp"
  $140 = (($139) + 12|0); //@line 1308 "emscripten/hgiox.cpp"
  $141 = HEAP32[$140>>2]|0; //@line 1308 "emscripten/hgiox.cpp"
  _ChangeTex($141); //@line 1308 "emscripten/hgiox.cpp"
  _glVertexPointer(2,5126,0,(25544|0)); //@line 1311 "emscripten/hgiox.cpp"
  _glTexCoordPointer(2,5126,0,(25576|0)); //@line 1312 "emscripten/hgiox.cpp"
  $142 = $0; //@line 1314 "emscripten/hgiox.cpp"
  $143 = (($142) + 100|0); //@line 1314 "emscripten/hgiox.cpp"
  $144 = HEAP32[$143>>2]|0; //@line 1314 "emscripten/hgiox.cpp"
  $145 = $0; //@line 1314 "emscripten/hgiox.cpp"
  $146 = (($145) + 144|0); //@line 1314 "emscripten/hgiox.cpp"
  $147 = HEAP32[$146>>2]|0; //@line 1314 "emscripten/hgiox.cpp"
  _hgio_setBlendMode($144,$147); //@line 1314 "emscripten/hgiox.cpp"
  _glDrawArrays(5,0,4); //@line 1316 "emscripten/hgiox.cpp"
  STACKTOP = sp;return; //@line 1316 "emscripten/hgiox.cpp"
 }
}
function _hgio_square($bm,$posx,$posy,$color) {
 $bm = $bm|0;
 $posx = $posx|0;
 $posy = $posy|0;
 $color = $color|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $arate = 0, $flp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $bm;
 $1 = $posx;
 $2 = $posy;
 $3 = $color;
 $4 = $0; //@line 1327 "emscripten/hgiox.cpp"
 $5 = ($4|0)==(0|0); //@line 1327 "emscripten/hgiox.cpp"
 if ($5) {
  STACKTOP = sp;return; //@line 1354 "emscripten/hgiox.cpp"
 }
 $6 = $0; //@line 1328 "emscripten/hgiox.cpp"
 $7 = (($6) + 28|0); //@line 1328 "emscripten/hgiox.cpp"
 $8 = HEAP32[$7>>2]|0; //@line 1328 "emscripten/hgiox.cpp"
 $9 = ($8|0)!=(2); //@line 1328 "emscripten/hgiox.cpp"
 if ($9) {
  $10 = (___cxa_allocate_exception(4)|0); //@line 1328 "emscripten/hgiox.cpp"
  HEAP32[$10>>2] = 21; //@line 1328 "emscripten/hgiox.cpp"
  ___cxa_throw(($10|0),(624|0),(0|0)); //@line 1328 "emscripten/hgiox.cpp"
  // unreachable; //@line 1328 "emscripten/hgiox.cpp"
 }
 $flp = 25544; //@line 1330 "emscripten/hgiox.cpp"
 $11 = $1; //@line 1332 "emscripten/hgiox.cpp"
 $12 = HEAP32[$11>>2]|0; //@line 1332 "emscripten/hgiox.cpp"
 $13 = (+($12|0)); //@line 1332 "emscripten/hgiox.cpp"
 $14 = $flp; //@line 1332 "emscripten/hgiox.cpp"
 $15 = (($14) + 4|0); //@line 1332 "emscripten/hgiox.cpp"
 $flp = $15; //@line 1332 "emscripten/hgiox.cpp"
 HEAPF32[$14>>2] = $13; //@line 1332 "emscripten/hgiox.cpp"
 $16 = $2; //@line 1333 "emscripten/hgiox.cpp"
 $17 = HEAP32[$16>>2]|0; //@line 1333 "emscripten/hgiox.cpp"
 $18 = (0 - ($17))|0; //@line 1333 "emscripten/hgiox.cpp"
 $19 = (+($18|0)); //@line 1333 "emscripten/hgiox.cpp"
 $20 = $flp; //@line 1333 "emscripten/hgiox.cpp"
 $21 = (($20) + 4|0); //@line 1333 "emscripten/hgiox.cpp"
 $flp = $21; //@line 1333 "emscripten/hgiox.cpp"
 HEAPF32[$20>>2] = $19; //@line 1333 "emscripten/hgiox.cpp"
 $22 = $1; //@line 1334 "emscripten/hgiox.cpp"
 $23 = (($22) + 12|0); //@line 1334 "emscripten/hgiox.cpp"
 $24 = HEAP32[$23>>2]|0; //@line 1334 "emscripten/hgiox.cpp"
 $25 = (+($24|0)); //@line 1334 "emscripten/hgiox.cpp"
 $26 = $flp; //@line 1334 "emscripten/hgiox.cpp"
 $27 = (($26) + 4|0); //@line 1334 "emscripten/hgiox.cpp"
 $flp = $27; //@line 1334 "emscripten/hgiox.cpp"
 HEAPF32[$26>>2] = $25; //@line 1334 "emscripten/hgiox.cpp"
 $28 = $2; //@line 1335 "emscripten/hgiox.cpp"
 $29 = (($28) + 12|0); //@line 1335 "emscripten/hgiox.cpp"
 $30 = HEAP32[$29>>2]|0; //@line 1335 "emscripten/hgiox.cpp"
 $31 = (0 - ($30))|0; //@line 1335 "emscripten/hgiox.cpp"
 $32 = (+($31|0)); //@line 1335 "emscripten/hgiox.cpp"
 $33 = $flp; //@line 1335 "emscripten/hgiox.cpp"
 $34 = (($33) + 4|0); //@line 1335 "emscripten/hgiox.cpp"
 $flp = $34; //@line 1335 "emscripten/hgiox.cpp"
 HEAPF32[$33>>2] = $32; //@line 1335 "emscripten/hgiox.cpp"
 $35 = $1; //@line 1336 "emscripten/hgiox.cpp"
 $36 = (($35) + 4|0); //@line 1336 "emscripten/hgiox.cpp"
 $37 = HEAP32[$36>>2]|0; //@line 1336 "emscripten/hgiox.cpp"
 $38 = (+($37|0)); //@line 1336 "emscripten/hgiox.cpp"
 $39 = $flp; //@line 1336 "emscripten/hgiox.cpp"
 $40 = (($39) + 4|0); //@line 1336 "emscripten/hgiox.cpp"
 $flp = $40; //@line 1336 "emscripten/hgiox.cpp"
 HEAPF32[$39>>2] = $38; //@line 1336 "emscripten/hgiox.cpp"
 $41 = $2; //@line 1337 "emscripten/hgiox.cpp"
 $42 = (($41) + 4|0); //@line 1337 "emscripten/hgiox.cpp"
 $43 = HEAP32[$42>>2]|0; //@line 1337 "emscripten/hgiox.cpp"
 $44 = (0 - ($43))|0; //@line 1337 "emscripten/hgiox.cpp"
 $45 = (+($44|0)); //@line 1337 "emscripten/hgiox.cpp"
 $46 = $flp; //@line 1337 "emscripten/hgiox.cpp"
 $47 = (($46) + 4|0); //@line 1337 "emscripten/hgiox.cpp"
 $flp = $47; //@line 1337 "emscripten/hgiox.cpp"
 HEAPF32[$46>>2] = $45; //@line 1337 "emscripten/hgiox.cpp"
 $48 = $1; //@line 1338 "emscripten/hgiox.cpp"
 $49 = (($48) + 8|0); //@line 1338 "emscripten/hgiox.cpp"
 $50 = HEAP32[$49>>2]|0; //@line 1338 "emscripten/hgiox.cpp"
 $51 = (+($50|0)); //@line 1338 "emscripten/hgiox.cpp"
 $52 = $flp; //@line 1338 "emscripten/hgiox.cpp"
 $53 = (($52) + 4|0); //@line 1338 "emscripten/hgiox.cpp"
 $flp = $53; //@line 1338 "emscripten/hgiox.cpp"
 HEAPF32[$52>>2] = $51; //@line 1338 "emscripten/hgiox.cpp"
 $54 = $2; //@line 1339 "emscripten/hgiox.cpp"
 $55 = (($54) + 8|0); //@line 1339 "emscripten/hgiox.cpp"
 $56 = HEAP32[$55>>2]|0; //@line 1339 "emscripten/hgiox.cpp"
 $57 = (0 - ($56))|0; //@line 1339 "emscripten/hgiox.cpp"
 $58 = (+($57|0)); //@line 1339 "emscripten/hgiox.cpp"
 $59 = $flp; //@line 1339 "emscripten/hgiox.cpp"
 $60 = (($59) + 4|0); //@line 1339 "emscripten/hgiox.cpp"
 $flp = $60; //@line 1339 "emscripten/hgiox.cpp"
 HEAPF32[$59>>2] = $58; //@line 1339 "emscripten/hgiox.cpp"
 _ChangeTex(-1); //@line 1341 "emscripten/hgiox.cpp"
 _glVertexPointer(2,5126,0,(25544|0)); //@line 1343 "emscripten/hgiox.cpp"
 $61 = $0; //@line 1344 "emscripten/hgiox.cpp"
 $62 = (($61) + 144|0); //@line 1344 "emscripten/hgiox.cpp"
 $63 = HEAP32[$62>>2]|0; //@line 1344 "emscripten/hgiox.cpp"
 $arate = $63; //@line 1344 "emscripten/hgiox.cpp"
 $64 = $0; //@line 1345 "emscripten/hgiox.cpp"
 $65 = (($64) + 100|0); //@line 1345 "emscripten/hgiox.cpp"
 $66 = HEAP32[$65>>2]|0; //@line 1345 "emscripten/hgiox.cpp"
 $67 = ($66|0)<(3); //@line 1345 "emscripten/hgiox.cpp"
 if ($67) {
  $arate = 255; //@line 1345 "emscripten/hgiox.cpp"
 }
 $68 = $3; //@line 1347 "emscripten/hgiox.cpp"
 $69 = HEAP32[$68>>2]|0; //@line 1347 "emscripten/hgiox.cpp"
 $70 = $arate; //@line 1347 "emscripten/hgiox.cpp"
 __Z22hgio_panelcolor_directiii(0,$69,$70); //@line 1347 "emscripten/hgiox.cpp"
 $71 = $3; //@line 1348 "emscripten/hgiox.cpp"
 $72 = (($71) + 12|0); //@line 1348 "emscripten/hgiox.cpp"
 $73 = HEAP32[$72>>2]|0; //@line 1348 "emscripten/hgiox.cpp"
 $74 = $arate; //@line 1348 "emscripten/hgiox.cpp"
 __Z22hgio_panelcolor_directiii(1,$73,$74); //@line 1348 "emscripten/hgiox.cpp"
 $75 = $3; //@line 1349 "emscripten/hgiox.cpp"
 $76 = (($75) + 4|0); //@line 1349 "emscripten/hgiox.cpp"
 $77 = HEAP32[$76>>2]|0; //@line 1349 "emscripten/hgiox.cpp"
 $78 = $arate; //@line 1349 "emscripten/hgiox.cpp"
 __Z22hgio_panelcolor_directiii(2,$77,$78); //@line 1349 "emscripten/hgiox.cpp"
 $79 = $3; //@line 1350 "emscripten/hgiox.cpp"
 $80 = (($79) + 8|0); //@line 1350 "emscripten/hgiox.cpp"
 $81 = HEAP32[$80>>2]|0; //@line 1350 "emscripten/hgiox.cpp"
 $82 = $arate; //@line 1350 "emscripten/hgiox.cpp"
 __Z22hgio_panelcolor_directiii(3,$81,$82); //@line 1350 "emscripten/hgiox.cpp"
 $83 = $0; //@line 1352 "emscripten/hgiox.cpp"
 $84 = (($83) + 100|0); //@line 1352 "emscripten/hgiox.cpp"
 $85 = HEAP32[$84>>2]|0; //@line 1352 "emscripten/hgiox.cpp"
 _hgio_setBlendModeFlat($85); //@line 1352 "emscripten/hgiox.cpp"
 _glDrawArrays(5,0,4); //@line 1354 "emscripten/hgiox.cpp"
 STACKTOP = sp;return; //@line 1354 "emscripten/hgiox.cpp"
}
function _hgio_gettick() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, $i = 0, $nsec = 0.0, $ts = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $ts = sp + 8|0;
 (_clock_gettime(0,($ts|0))|0); //@line 1390 "emscripten/hgiox.cpp"
 $0 = (($ts) + 4|0); //@line 1391 "emscripten/hgiox.cpp"
 $1 = HEAP32[$0>>2]|0; //@line 1391 "emscripten/hgiox.cpp"
 $2 = (+($1|0)); //@line 1391 "emscripten/hgiox.cpp"
 $3 = $2 * 0.00100000000000000002082; //@line 1391 "emscripten/hgiox.cpp"
 $4 = $3 * 0.00100000000000000002082; //@line 1391 "emscripten/hgiox.cpp"
 $nsec = $4; //@line 1391 "emscripten/hgiox.cpp"
 $5 = HEAP32[$ts>>2]|0; //@line 1392 "emscripten/hgiox.cpp"
 $6 = ($5*1000)|0; //@line 1392 "emscripten/hgiox.cpp"
 $7 = $nsec; //@line 1392 "emscripten/hgiox.cpp"
 $8 = (~~(($7))); //@line 1392 "emscripten/hgiox.cpp"
 $9 = (($6) + ($8))|0; //@line 1392 "emscripten/hgiox.cpp"
 $i = $9; //@line 1392 "emscripten/hgiox.cpp"
 $10 = HEAP8[25608>>0]|0; //@line 1393 "emscripten/hgiox.cpp"
 $11 = $10&1; //@line 1393 "emscripten/hgiox.cpp"
 if ($11) {
  $13 = $i; //@line 1398 "emscripten/hgiox.cpp"
  $14 = HEAP32[25616>>2]|0; //@line 1398 "emscripten/hgiox.cpp"
  $15 = (($13) - ($14))|0; //@line 1398 "emscripten/hgiox.cpp"
  STACKTOP = sp;return ($15|0); //@line 1398 "emscripten/hgiox.cpp"
 }
 HEAP8[25608>>0] = 1; //@line 1394 "emscripten/hgiox.cpp"
 $12 = $i; //@line 1395 "emscripten/hgiox.cpp"
 HEAP32[25616>>2] = $12; //@line 1395 "emscripten/hgiox.cpp"
 $13 = $i; //@line 1398 "emscripten/hgiox.cpp"
 $14 = HEAP32[25616>>2]|0; //@line 1398 "emscripten/hgiox.cpp"
 $15 = (($13) - ($14))|0; //@line 1398 "emscripten/hgiox.cpp"
 STACKTOP = sp;return ($15|0); //@line 1398 "emscripten/hgiox.cpp"
}
function _hgio_exec($msg,$option,$mode) {
 $msg = $msg|0;
 $option = $option|0;
 $mode = $mode|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $msg;
 $1 = $option;
 $2 = $mode;
 STACKTOP = sp;return 0; //@line 1410 "emscripten/hgiox.cpp"
}
function _hgio_dialog($mode,$str1,$str2) {
 $mode = $mode|0;
 $str1 = $str1|0;
 $str2 = $str2|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $mode;
 $1 = $str1;
 $2 = $str2;
 STACKTOP = sp;return 0; //@line 1422 "emscripten/hgiox.cpp"
}
function _hgio_sysinfo($p2,$res,$outbuf) {
 $p2 = $p2|0;
 $res = $res|0;
 $outbuf = $outbuf|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fl = 0, $p1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = $p2;
 $2 = $res;
 $3 = $outbuf;
 $fl = 2; //@line 1429 "emscripten/hgiox.cpp"
 $4 = $3; //@line 1430 "emscripten/hgiox.cpp"
 $p1 = $4; //@line 1430 "emscripten/hgiox.cpp"
 $5 = $p1; //@line 1431 "emscripten/hgiox.cpp"
 HEAP8[$5>>0] = 0; //@line 1431 "emscripten/hgiox.cpp"
 $6 = $1; //@line 1433 "emscripten/hgiox.cpp"
 if ((($6|0) == 1)) {
 } else if ((($6|0) == 0)) {
 } else if ((($6|0) == 2)) {
 } else {
  $0 = 0; //@line 1458 "emscripten/hgiox.cpp"
  $10 = $0; //@line 1462 "emscripten/hgiox.cpp"
  STACKTOP = sp;return ($10|0); //@line 1462 "emscripten/hgiox.cpp"
 }
 $7 = $fl; //@line 1460 "emscripten/hgiox.cpp"
 $8 = $2; //@line 1460 "emscripten/hgiox.cpp"
 HEAP32[$8>>2] = $7; //@line 1460 "emscripten/hgiox.cpp"
 $9 = $p1; //@line 1461 "emscripten/hgiox.cpp"
 $0 = $9; //@line 1461 "emscripten/hgiox.cpp"
 $10 = $0; //@line 1462 "emscripten/hgiox.cpp"
 STACKTOP = sp;return ($10|0); //@line 1462 "emscripten/hgiox.cpp"
}
function _hgio_render_start() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ccol = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = HEAP32[24920>>2]|0; //@line 1808 "emscripten/hgiox.cpp"
 $1 = ($0|0)!=(0); //@line 1808 "emscripten/hgiox.cpp"
 if ($1) {
  (_hgio_render_end()|0); //@line 1809 "emscripten/hgiox.cpp"
 }
 $2 = (_GetSysReq(31)|0); //@line 1825 "emscripten/hgiox.cpp"
 $3 = ($2|0)==(1); //@line 1825 "emscripten/hgiox.cpp"
 if (!($3)) {
  _hgio_reset(); //@line 1832 "emscripten/hgiox.cpp"
  HEAP32[24920>>2] = 1; //@line 1835 "emscripten/hgiox.cpp"
  STACKTOP = sp;return 0; //@line 1836 "emscripten/hgiox.cpp"
 }
 $4 = (_GetSysReq(32)|0); //@line 1826 "emscripten/hgiox.cpp"
 $ccol = $4; //@line 1826 "emscripten/hgiox.cpp"
 $5 = $ccol; //@line 1827 "emscripten/hgiox.cpp"
 $6 = $5 >> 16; //@line 1827 "emscripten/hgiox.cpp"
 $7 = $6 & 255; //@line 1827 "emscripten/hgiox.cpp"
 $8 = $ccol; //@line 1827 "emscripten/hgiox.cpp"
 $9 = $8 >> 8; //@line 1827 "emscripten/hgiox.cpp"
 $10 = $9 & 255; //@line 1827 "emscripten/hgiox.cpp"
 $11 = $ccol; //@line 1827 "emscripten/hgiox.cpp"
 $12 = $11 & 255; //@line 1827 "emscripten/hgiox.cpp"
 _hgio_setClear($7,$10,$12); //@line 1827 "emscripten/hgiox.cpp"
 _hgio_clear(); //@line 1828 "emscripten/hgiox.cpp"
 _hgio_reset(); //@line 1832 "emscripten/hgiox.cpp"
 HEAP32[24920>>2] = 1; //@line 1835 "emscripten/hgiox.cpp"
 STACKTOP = sp;return 0; //@line 1836 "emscripten/hgiox.cpp"
}
function _hgio_getinfo($type) {
 $type = $type|0;
 var $0 = 0.0, $1 = 0, $10 = 0.0, $11 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $type;
 $2 = $1; //@line 1789 "emscripten/hgiox.cpp"
 $3 = (($2) - 256)|0; //@line 1789 "emscripten/hgiox.cpp"
 $i = $3; //@line 1789 "emscripten/hgiox.cpp"
 $4 = $i; //@line 1790 "emscripten/hgiox.cpp"
 $5 = ($4|0)>=(0); //@line 1790 "emscripten/hgiox.cpp"
 if ($5) {
  $6 = $i; //@line 1790 "emscripten/hgiox.cpp"
  $7 = ($6|0)<(16); //@line 1790 "emscripten/hgiox.cpp"
  if ($7) {
   $8 = $i; //@line 1791 "emscripten/hgiox.cpp"
   $9 = (24984 + ($8<<3)|0); //@line 1791 "emscripten/hgiox.cpp"
   $10 = +HEAPF64[$9>>3]; //@line 1791 "emscripten/hgiox.cpp"
   $0 = $10; //@line 1791 "emscripten/hgiox.cpp"
   $11 = $0; //@line 1794 "emscripten/hgiox.cpp"
   STACKTOP = sp;return (+$11); //@line 1794 "emscripten/hgiox.cpp"
  }
 }
 $0 = 0.0; //@line 1793 "emscripten/hgiox.cpp"
 $11 = $0; //@line 1794 "emscripten/hgiox.cpp"
 STACKTOP = sp;return (+$11); //@line 1794 "emscripten/hgiox.cpp"
}
function _hgio_screen($bm) {
 $bm = $bm|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $bm;
 $1 = $0; //@line 1874 "emscripten/hgiox.cpp"
 HEAP32[24928>>2] = $1; //@line 1874 "emscripten/hgiox.cpp"
 STACKTOP = sp;return; //@line 1875 "emscripten/hgiox.cpp"
}
function _hgio_redraw($bm,$flag) {
 $bm = $bm|0;
 $flag = $flag|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $bm;
 $2 = $flag;
 $3 = $1; //@line 1891 "emscripten/hgiox.cpp"
 $4 = ($3|0)==(0|0); //@line 1891 "emscripten/hgiox.cpp"
 if ($4) {
  $0 = -1; //@line 1891 "emscripten/hgiox.cpp"
  $13 = $0; //@line 1899 "emscripten/hgiox.cpp"
  STACKTOP = sp;return ($13|0); //@line 1899 "emscripten/hgiox.cpp"
 }
 $5 = $1; //@line 1892 "emscripten/hgiox.cpp"
 $6 = (($5) + 28|0); //@line 1892 "emscripten/hgiox.cpp"
 $7 = HEAP32[$6>>2]|0; //@line 1892 "emscripten/hgiox.cpp"
 $8 = ($7|0)!=(2); //@line 1892 "emscripten/hgiox.cpp"
 if ($8) {
  $9 = (___cxa_allocate_exception(4)|0); //@line 1892 "emscripten/hgiox.cpp"
  HEAP32[$9>>2] = 21; //@line 1892 "emscripten/hgiox.cpp"
  ___cxa_throw(($9|0),(624|0),(0|0)); //@line 1892 "emscripten/hgiox.cpp"
  // unreachable; //@line 1892 "emscripten/hgiox.cpp"
 }
 $10 = $2; //@line 1894 "emscripten/hgiox.cpp"
 $11 = $10 & 1; //@line 1894 "emscripten/hgiox.cpp"
 $12 = ($11|0)!=(0); //@line 1894 "emscripten/hgiox.cpp"
 if ($12) {
  (_hgio_render_end()|0); //@line 1895 "emscripten/hgiox.cpp"
 } else {
  (_hgio_render_start()|0); //@line 1897 "emscripten/hgiox.cpp"
 }
 $0 = 0; //@line 1899 "emscripten/hgiox.cpp"
 $13 = $0; //@line 1899 "emscripten/hgiox.cpp"
 STACKTOP = sp;return ($13|0); //@line 1899 "emscripten/hgiox.cpp"
}
function _hgio_getstorage($fname) {
 $fname = $fname|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $fname;
 STACKTOP = sp;return (25640|0); //@line 1968 "emscripten/hgiox.cpp"
}
function __Z11handleEventv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $bm = 0, $event = 0, $m = 0, $m1 = 0, $m2 = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $event = sp;
 $x = sp + 52|0;
 $y = sp + 56|0;
 while(1) {
  $0 = (_SDL_PollEvent(($event|0))|0); //@line 58 "emscripten/hsp3dish.cpp"
  $1 = ($0|0)!=(0); //@line 58 "emscripten/hsp3dish.cpp"
  if (!($1)) {
   break;
  }
  $2 = HEAP32[$event>>2]|0; //@line 59 "emscripten/hsp3dish.cpp"
  if ((($2|0) == 1026)) {
   $m2 = $event; //@line 89 "emscripten/hsp3dish.cpp"
   $34 = $m2; //@line 91 "emscripten/hsp3dish.cpp"
   $35 = (($34) + 20|0); //@line 91 "emscripten/hsp3dish.cpp"
   $36 = HEAP32[$35>>2]|0; //@line 91 "emscripten/hsp3dish.cpp"
   $37 = $m2; //@line 91 "emscripten/hsp3dish.cpp"
   $38 = (($37) + 24|0); //@line 91 "emscripten/hsp3dish.cpp"
   $39 = HEAP32[$38>>2]|0; //@line 91 "emscripten/hsp3dish.cpp"
   _hgio_touch($36,$39,0); //@line 91 "emscripten/hsp3dish.cpp"
  } else if ((($2|0) == 1024)) {
   $3 = HEAP32[25648>>2]|0; //@line 63 "emscripten/hsp3dish.cpp"
   $4 = ($3|0)!=(0|0); //@line 63 "emscripten/hsp3dish.cpp"
   if ($4) {
    $m = $event; //@line 64 "emscripten/hsp3dish.cpp"
    $5 = $m; //@line 66 "emscripten/hsp3dish.cpp"
    $6 = (($5) + 20|0); //@line 66 "emscripten/hsp3dish.cpp"
    $7 = HEAP32[$6>>2]|0; //@line 66 "emscripten/hsp3dish.cpp"
    $8 = $m; //@line 66 "emscripten/hsp3dish.cpp"
    $9 = (($8) + 24|0); //@line 66 "emscripten/hsp3dish.cpp"
    $10 = HEAP32[$9>>2]|0; //@line 66 "emscripten/hsp3dish.cpp"
    _hgio_scale_point($7,$10,$x,$y); //@line 66 "emscripten/hsp3dish.cpp"
    $11 = HEAP32[25648>>2]|0; //@line 68 "emscripten/hsp3dish.cpp"
    $12 = (($11) + 72|0); //@line 68 "emscripten/hsp3dish.cpp"
    $13 = HEAP32[$12>>2]|0; //@line 68 "emscripten/hsp3dish.cpp"
    $14 = (FUNCTION_TABLE_ii[$13 & 255](0)|0); //@line 68 "emscripten/hsp3dish.cpp"
    $bm = $14; //@line 68 "emscripten/hsp3dish.cpp"
    $15 = HEAP32[$x>>2]|0; //@line 69 "emscripten/hsp3dish.cpp"
    $16 = $15&65535; //@line 69 "emscripten/hsp3dish.cpp"
    $17 = $bm; //@line 69 "emscripten/hsp3dish.cpp"
    $18 = (($17) + 176|0); //@line 69 "emscripten/hsp3dish.cpp"
    HEAP16[$18>>1] = $16; //@line 69 "emscripten/hsp3dish.cpp"
    $19 = HEAP32[$y>>2]|0; //@line 70 "emscripten/hsp3dish.cpp"
    $20 = $19&65535; //@line 70 "emscripten/hsp3dish.cpp"
    $21 = $bm; //@line 70 "emscripten/hsp3dish.cpp"
    $22 = (($21) + 176|0); //@line 70 "emscripten/hsp3dish.cpp"
    $23 = (($22) + 2|0); //@line 70 "emscripten/hsp3dish.cpp"
    HEAP16[$23>>1] = $20; //@line 70 "emscripten/hsp3dish.cpp"
    $24 = $bm; //@line 71 "emscripten/hsp3dish.cpp"
    (__ZN5Bmscr16UpdateAllObjectsEv($24)|0); //@line 71 "emscripten/hsp3dish.cpp"
    $25 = $bm; //@line 72 "emscripten/hsp3dish.cpp"
    $26 = HEAP32[$x>>2]|0; //@line 72 "emscripten/hsp3dish.cpp"
    $27 = HEAP32[$y>>2]|0; //@line 72 "emscripten/hsp3dish.cpp"
    __ZN5Bmscr18setMTouchByPointIdEiiib($25,-1,$26,$27,1); //@line 72 "emscripten/hsp3dish.cpp"
   }
  } else if ((($2|0) == 1025)) {
   $m1 = $event; //@line 82 "emscripten/hsp3dish.cpp"
   $28 = $m1; //@line 84 "emscripten/hsp3dish.cpp"
   $29 = (($28) + 20|0); //@line 84 "emscripten/hsp3dish.cpp"
   $30 = HEAP32[$29>>2]|0; //@line 84 "emscripten/hsp3dish.cpp"
   $31 = $m1; //@line 84 "emscripten/hsp3dish.cpp"
   $32 = (($31) + 24|0); //@line 84 "emscripten/hsp3dish.cpp"
   $33 = HEAP32[$32>>2]|0; //@line 84 "emscripten/hsp3dish.cpp"
   _hgio_touch($30,$33,1); //@line 84 "emscripten/hsp3dish.cpp"
  }
 }
 STACKTOP = sp;return; //@line 96 "emscripten/hsp3dish.cpp"
}
function __Z15hsp3dish_dialogPc($mes) {
 $mes = $mes|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = $mes;
 $1 = $0; //@line 136 "emscripten/hsp3dish.cpp"
 HEAP32[$vararg_buffer>>2] = $1; //@line 136 "emscripten/hsp3dish.cpp"
 (_printf((25656|0),($vararg_buffer|0))|0); //@line 136 "emscripten/hsp3dish.cpp"
 STACKTOP = sp;return; //@line 137 "emscripten/hsp3dish.cpp"
}
function __Z16hsp3dish_drawoffv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[25664>>2]|0; //@line 182 "emscripten/hsp3dish.cpp"
 $1 = ($0|0)!=(0); //@line 182 "emscripten/hsp3dish.cpp"
 if (!($1)) {
  STACKTOP = sp;return; //@line 186 "emscripten/hsp3dish.cpp"
 }
 (_hgio_render_end()|0); //@line 183 "emscripten/hsp3dish.cpp"
 HEAP32[25664>>2] = 0; //@line 184 "emscripten/hsp3dish.cpp"
 STACKTOP = sp;return; //@line 186 "emscripten/hsp3dish.cpp"
}
function __Z18hsp3dish_debugopenv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0; //@line 191 "emscripten/hsp3dish.cpp"
}
function __Z16hsp3dish_msgfuncP6HSPCTX($hspctx) {
 $hspctx = $hspctx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tick = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $hspctx;
 L1: while(1) {
  $1 = $0; //@line 231 "emscripten/hsp3dish.cpp"
  $2 = (($1) + 236|0); //@line 231 "emscripten/hsp3dish.cpp"
  $3 = HEAP32[$2>>2]|0; //@line 231 "emscripten/hsp3dish.cpp"
  $4 = ($3|0)==(9); //@line 231 "emscripten/hsp3dish.cpp"
  if ($4) {
   label = 3;
   break;
  }
  $7 = $0; //@line 236 "emscripten/hsp3dish.cpp"
  $8 = (($7) + 236|0); //@line 236 "emscripten/hsp3dish.cpp"
  $9 = HEAP32[$8>>2]|0; //@line 236 "emscripten/hsp3dish.cpp"
  switch ($9|0) {
  case 6:  {
   label = 11;
   break L1;
   break;
  }
  case 7:  {
   label = 12;
   break L1;
   break;
  }
  case 2:  {
   break L1;
   break;
  }
  case 3:  {
   label = 5;
   break L1;
   break;
  }
  case 8:  {
   break;
  }
  case 1:  {
   label = 6;
   break L1;
   break;
  }
  default: {
   label = 14;
   break L1;
  }
  }
  $23 = $0; //@line 272 "emscripten/hsp3dish.cpp"
  $24 = (($23) + 236|0); //@line 272 "emscripten/hsp3dish.cpp"
  HEAP32[$24>>2] = 3; //@line 272 "emscripten/hsp3dish.cpp"
  (__Z18hsp3dish_debugopenv()|0); //@line 274 "emscripten/hsp3dish.cpp"
 }
 if ((label|0) == 3) {
  $5 = $0; //@line 232 "emscripten/hsp3dish.cpp"
  $6 = (($5) + 236|0); //@line 232 "emscripten/hsp3dish.cpp"
  HEAP32[$6>>2] = 0; //@line 232 "emscripten/hsp3dish.cpp"
  STACKTOP = sp;return; //@line 279 "emscripten/hsp3dish.cpp"
 }
 else if ((label|0) == 5) {
  STACKTOP = sp;return; //@line 279 "emscripten/hsp3dish.cpp"
 }
 else if ((label|0) == 6) {
  $10 = (_hgio_gettick()|0); //@line 247 "emscripten/hsp3dish.cpp"
  $tick = $10; //@line 247 "emscripten/hsp3dish.cpp"
  $11 = $tick; //@line 248 "emscripten/hsp3dish.cpp"
  $12 = (__Z14code_exec_waiti($11)|0); //@line 248 "emscripten/hsp3dish.cpp"
  $13 = $0; //@line 248 "emscripten/hsp3dish.cpp"
  $14 = (($13) + 236|0); //@line 248 "emscripten/hsp3dish.cpp"
  HEAP32[$14>>2] = $12; //@line 248 "emscripten/hsp3dish.cpp"
 }
 else if ((label|0) == 11) {
  $21 = (___cxa_allocate_exception(4)|0); //@line 268 "emscripten/hsp3dish.cpp"
  HEAP32[$21>>2] = 10; //@line 268 "emscripten/hsp3dish.cpp"
  ___cxa_throw(($21|0),(624|0),(0|0)); //@line 268 "emscripten/hsp3dish.cpp"
  // unreachable; //@line 268 "emscripten/hsp3dish.cpp"
 }
 else if ((label|0) == 12) {
  $22 = (___cxa_allocate_exception(4)|0); //@line 270 "emscripten/hsp3dish.cpp"
  HEAP32[$22>>2] = 42; //@line 270 "emscripten/hsp3dish.cpp"
  ___cxa_throw(($22|0),(624|0),(0|0)); //@line 270 "emscripten/hsp3dish.cpp"
  // unreachable; //@line 270 "emscripten/hsp3dish.cpp"
 }
 else if ((label|0) == 14) {
  STACKTOP = sp;return; //@line 279 "emscripten/hsp3dish.cpp"
 }
 $15 = (_hgio_gettick()|0); //@line 250 "emscripten/hsp3dish.cpp"
 $tick = $15; //@line 250 "emscripten/hsp3dish.cpp"
 $16 = $tick; //@line 251 "emscripten/hsp3dish.cpp"
 $17 = (__Z15code_exec_awaiti($16)|0); //@line 251 "emscripten/hsp3dish.cpp"
 $18 = ($17|0)!=(0); //@line 251 "emscripten/hsp3dish.cpp"
 if ($18) {
 } else {
  $19 = HEAP32[25672>>2]|0; //@line 256 "emscripten/hsp3dish.cpp"
  $20 = (($19) + 236|0); //@line 256 "emscripten/hsp3dish.cpp"
  HEAP32[$20>>2] = 2; //@line 256 "emscripten/hsp3dish.cpp"
 }
 STACKTOP = sp;return; //@line 279 "emscripten/hsp3dish.cpp"
}
function __Z13hsp3dish_initPc($startfile) {
 $startfile = $startfile|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0, $106 = 0.0, $107 = 0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0, $112 = 0.0, $113 = 0, $114 = 0.0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0.0, $119 = 0, $12 = 0, $120 = 0.0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0.0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0, $87 = 0.0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0, $a = 0, $a1 = 0, $autoscale = 0, $devinfo = 0, $env_autoscale = 0, $env_sx = 0, $env_sy = 0;
 var $env_wx = 0, $env_wy = 0, $hsp_dec = 0, $hsp_sum = 0, $mode = 0, $orgexe = 0, $sx = 0.0, $sy = 0.0, $v = 0, $v1 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $vararg_buffer = sp;
 $1 = $startfile;
 _InitSysReq(); //@line 345 "emscripten/hsp3dish.cpp"
 $4 = (__Znwj(912)|0); //@line 349 "emscripten/hsp3dish.cpp"
 __THREW__ = 0;
 invoke_vi(177,($4|0)); //@line 349 "emscripten/hsp3dish.cpp"
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $11 = ___cxa_find_matching_catch(-1,-1)|0;
  $12 = tempRet0;
  $2 = $11; //@line 349 "emscripten/hsp3dish.cpp"
  $3 = $12; //@line 349 "emscripten/hsp3dish.cpp"
  __ZdlPv($4); //@line 349 "emscripten/hsp3dish.cpp"
  $131 = $2; //@line 349 "emscripten/hsp3dish.cpp"
  $132 = $3; //@line 349 "emscripten/hsp3dish.cpp"
  ___resumeException($131|0);
  // unreachable;
 }
 HEAP32[25680>>2] = $4; //@line 349 "emscripten/hsp3dish.cpp"
 $7 = $1; //@line 351 "emscripten/hsp3dish.cpp"
 $8 = ($7|0)!=(0|0); //@line 351 "emscripten/hsp3dish.cpp"
 if ($8) {
  $9 = HEAP32[25680>>2]|0; //@line 352 "emscripten/hsp3dish.cpp"
  $10 = $1; //@line 352 "emscripten/hsp3dish.cpp"
  __ZN4Hsp311SetFileNameEPc($9,$10); //@line 352 "emscripten/hsp3dish.cpp"
 }
 $mode = 0; //@line 357 "emscripten/hsp3dish.cpp"
 $orgexe = 0; //@line 358 "emscripten/hsp3dish.cpp"
 HEAP32[25688>>2] = 320; //@line 359 "emscripten/hsp3dish.cpp"
 HEAP32[25696>>2] = 480; //@line 360 "emscripten/hsp3dish.cpp"
 HEAP32[25704>>2] = 0; //@line 363 "emscripten/hsp3dish.cpp"
 HEAP32[25712>>2] = 0; //@line 364 "emscripten/hsp3dish.cpp"
 $a = 0; //@line 366 "emscripten/hsp3dish.cpp"
 while(1) {
  $13 = $a; //@line 366 "emscripten/hsp3dish.cpp"
  $14 = ($13|0)<(8); //@line 366 "emscripten/hsp3dish.cpp"
  if (!($14)) {
   break;
  }
  $15 = $a; //@line 367 "emscripten/hsp3dish.cpp"
  $16 = (25720 + ($15)|0); //@line 367 "emscripten/hsp3dish.cpp"
  $17 = HEAP8[$16>>0]|0; //@line 367 "emscripten/hsp3dish.cpp"
  $18 = $17 << 24 >> 24; //@line 367 "emscripten/hsp3dish.cpp"
  $19 = (($18) - 48)|0; //@line 367 "emscripten/hsp3dish.cpp"
  $20 = $19&255; //@line 367 "emscripten/hsp3dish.cpp"
  $a1 = $20; //@line 367 "emscripten/hsp3dish.cpp"
  $21 = $a1; //@line 367 "emscripten/hsp3dish.cpp"
  $22 = $21 << 24 >> 24; //@line 367 "emscripten/hsp3dish.cpp"
  $23 = $a; //@line 367 "emscripten/hsp3dish.cpp"
  $24 = (25760 + ($23)|0); //@line 367 "emscripten/hsp3dish.cpp"
  $25 = HEAP8[$24>>0]|0; //@line 367 "emscripten/hsp3dish.cpp"
  $26 = $25 << 24 >> 24; //@line 367 "emscripten/hsp3dish.cpp"
  $27 = ($22|0)==($26|0); //@line 367 "emscripten/hsp3dish.cpp"
  if ($27) {
   $28 = $orgexe; //@line 367 "emscripten/hsp3dish.cpp"
   $29 = (($28) + 1)|0; //@line 367 "emscripten/hsp3dish.cpp"
   $orgexe = $29; //@line 367 "emscripten/hsp3dish.cpp"
  }
  $30 = $a; //@line 366 "emscripten/hsp3dish.cpp"
  $31 = (($30) + 1)|0; //@line 366 "emscripten/hsp3dish.cpp"
  $a = $31; //@line 366 "emscripten/hsp3dish.cpp"
 }
 $32 = $orgexe; //@line 369 "emscripten/hsp3dish.cpp"
 $33 = ($32|0)==(0); //@line 369 "emscripten/hsp3dish.cpp"
 if ($33) {
  $34 = (_atoi(((25720 + 9|0)))|0); //@line 370 "emscripten/hsp3dish.cpp"
  $35 = (($34) + 65536)|0; //@line 370 "emscripten/hsp3dish.cpp"
  $mode = $35; //@line 370 "emscripten/hsp3dish.cpp"
  $36 = HEAP8[((25720 + 17|0))>>0]|0; //@line 371 "emscripten/hsp3dish.cpp"
  $a1 = $36; //@line 371 "emscripten/hsp3dish.cpp"
  $37 = $a1; //@line 372 "emscripten/hsp3dish.cpp"
  $38 = $37 << 24 >> 24; //@line 372 "emscripten/hsp3dish.cpp"
  $39 = ($38|0)==(115); //@line 372 "emscripten/hsp3dish.cpp"
  if ($39) {
   HEAP32[25712>>2] = 2; //@line 372 "emscripten/hsp3dish.cpp"
  }
  $40 = HEAP16[((25720 + 20|0))>>1]|0; //@line 373 "emscripten/hsp3dish.cpp"
  $41 = $40 << 16 >> 16; //@line 373 "emscripten/hsp3dish.cpp"
  HEAP32[25688>>2] = $41; //@line 373 "emscripten/hsp3dish.cpp"
  $42 = HEAP16[((25720 + 23|0))>>1]|0; //@line 374 "emscripten/hsp3dish.cpp"
  $43 = $42 << 16 >> 16; //@line 374 "emscripten/hsp3dish.cpp"
  HEAP32[25696>>2] = $43; //@line 374 "emscripten/hsp3dish.cpp"
  $44 = HEAP16[((25720 + 26|0))>>1]|0; //@line 375 "emscripten/hsp3dish.cpp"
  $45 = $44 << 16 >> 16; //@line 375 "emscripten/hsp3dish.cpp"
  HEAP32[25704>>2] = $45; //@line 375 "emscripten/hsp3dish.cpp"
  $46 = HEAP16[((25720 + 29|0))>>1]|0; //@line 376 "emscripten/hsp3dish.cpp"
  $47 = $46&65535; //@line 376 "emscripten/hsp3dish.cpp"
  $hsp_sum = $47; //@line 376 "emscripten/hsp3dish.cpp"
  $48 = HEAP32[((25720 + 32|0))>>2]|0; //@line 377 "emscripten/hsp3dish.cpp"
  $hsp_dec = $48; //@line 377 "emscripten/hsp3dish.cpp"
  $49 = HEAP32[25680>>2]|0; //@line 378 "emscripten/hsp3dish.cpp"
  $50 = $hsp_sum; //@line 378 "emscripten/hsp3dish.cpp"
  $51 = $hsp_dec; //@line 378 "emscripten/hsp3dish.cpp"
  __ZN4Hsp312SetPackValueEii($49,$50,$51); //@line 378 "emscripten/hsp3dish.cpp"
 }
 $52 = (_getenv((25768|0))|0); //@line 381 "emscripten/hsp3dish.cpp"
 $env_wx = $52; //@line 381 "emscripten/hsp3dish.cpp"
 $53 = $env_wx; //@line 382 "emscripten/hsp3dish.cpp"
 $54 = ($53|0)!=(0|0); //@line 382 "emscripten/hsp3dish.cpp"
 if ($54) {
  $55 = $env_wx; //@line 383 "emscripten/hsp3dish.cpp"
  $56 = (_atoi($55)|0); //@line 383 "emscripten/hsp3dish.cpp"
  $v = $56; //@line 383 "emscripten/hsp3dish.cpp"
  $57 = $v; //@line 384 "emscripten/hsp3dish.cpp"
  $58 = ($57|0)>(0); //@line 384 "emscripten/hsp3dish.cpp"
  if ($58) {
   $59 = $v; //@line 385 "emscripten/hsp3dish.cpp"
   HEAP32[25688>>2] = $59; //@line 385 "emscripten/hsp3dish.cpp"
  }
 }
 $60 = (_getenv((25776|0))|0); //@line 389 "emscripten/hsp3dish.cpp"
 $env_wy = $60; //@line 389 "emscripten/hsp3dish.cpp"
 $61 = $env_wy; //@line 390 "emscripten/hsp3dish.cpp"
 $62 = ($61|0)!=(0|0); //@line 390 "emscripten/hsp3dish.cpp"
 if ($62) {
  $63 = $env_wy; //@line 391 "emscripten/hsp3dish.cpp"
  $64 = (_atoi($63)|0); //@line 391 "emscripten/hsp3dish.cpp"
  $v1 = $64; //@line 391 "emscripten/hsp3dish.cpp"
  $65 = $v1; //@line 392 "emscripten/hsp3dish.cpp"
  $66 = ($65|0)>(0); //@line 392 "emscripten/hsp3dish.cpp"
  if ($66) {
   $67 = $v1; //@line 393 "emscripten/hsp3dish.cpp"
   HEAP32[25696>>2] = $67; //@line 393 "emscripten/hsp3dish.cpp"
  }
 }
 $sx = 0.0; //@line 397 "emscripten/hsp3dish.cpp"
 $sy = 0.0; //@line 397 "emscripten/hsp3dish.cpp"
 $68 = (_getenv((25784|0))|0); //@line 399 "emscripten/hsp3dish.cpp"
 $env_sx = $68; //@line 399 "emscripten/hsp3dish.cpp"
 $69 = $env_sx; //@line 400 "emscripten/hsp3dish.cpp"
 $70 = ($69|0)!=(0|0); //@line 400 "emscripten/hsp3dish.cpp"
 if ($70) {
  $71 = $env_sx; //@line 401 "emscripten/hsp3dish.cpp"
  $72 = (+_atof($71)); //@line 401 "emscripten/hsp3dish.cpp"
  $73 = $72; //@line 401 "emscripten/hsp3dish.cpp"
  $sx = $73; //@line 401 "emscripten/hsp3dish.cpp"
 }
 $74 = (_getenv((25792|0))|0); //@line 404 "emscripten/hsp3dish.cpp"
 $env_sy = $74; //@line 404 "emscripten/hsp3dish.cpp"
 $75 = $env_sy; //@line 405 "emscripten/hsp3dish.cpp"
 $76 = ($75|0)!=(0|0); //@line 405 "emscripten/hsp3dish.cpp"
 if ($76) {
  $77 = $env_sy; //@line 406 "emscripten/hsp3dish.cpp"
  $78 = (+_atof($77)); //@line 406 "emscripten/hsp3dish.cpp"
  $79 = $78; //@line 406 "emscripten/hsp3dish.cpp"
  $sy = $79; //@line 406 "emscripten/hsp3dish.cpp"
 }
 $80 = $sx; //@line 409 "emscripten/hsp3dish.cpp"
 $81 = $80 > 0.0; //@line 409 "emscripten/hsp3dish.cpp"
 if ($81) {
  $82 = $sy; //@line 409 "emscripten/hsp3dish.cpp"
  $83 = $82 > 0.0; //@line 409 "emscripten/hsp3dish.cpp"
  if ($83) {
  } else {
   label = 30;
  }
 } else {
  label = 30;
 }
 if ((label|0) == 30) {
  $84 = HEAP32[25688>>2]|0; //@line 412 "emscripten/hsp3dish.cpp"
  $85 = (+($84|0)); //@line 412 "emscripten/hsp3dish.cpp"
  $sx = $85; //@line 412 "emscripten/hsp3dish.cpp"
  $86 = HEAP32[25696>>2]|0; //@line 413 "emscripten/hsp3dish.cpp"
  $87 = (+($86|0)); //@line 413 "emscripten/hsp3dish.cpp"
  $sy = $87; //@line 413 "emscripten/hsp3dish.cpp"
 }
 $88 = (_getenv((25800|0))|0); //@line 416 "emscripten/hsp3dish.cpp"
 $env_autoscale = $88; //@line 416 "emscripten/hsp3dish.cpp"
 $autoscale = 0; //@line 417 "emscripten/hsp3dish.cpp"
 $89 = $env_autoscale; //@line 418 "emscripten/hsp3dish.cpp"
 $90 = ($89|0)!=(0|0); //@line 418 "emscripten/hsp3dish.cpp"
 if ($90) {
  $91 = $env_autoscale; //@line 419 "emscripten/hsp3dish.cpp"
  $92 = (_atoi($91)|0); //@line 419 "emscripten/hsp3dish.cpp"
  $autoscale = $92; //@line 419 "emscripten/hsp3dish.cpp"
 }
 $93 = $sx; //@line 422 "emscripten/hsp3dish.cpp"
 $94 = $93; //@line 422 "emscripten/hsp3dish.cpp"
 $95 = $sy; //@line 422 "emscripten/hsp3dish.cpp"
 $96 = $95; //@line 422 "emscripten/hsp3dish.cpp"
 HEAPF64[tempDoublePtr>>3]=$94;HEAP32[$vararg_buffer>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer+4>>2]=HEAP32[tempDoublePtr+4>>2]; //@line 422 "emscripten/hsp3dish.cpp"
 $vararg_ptr1 = (($vararg_buffer) + 8|0); //@line 422 "emscripten/hsp3dish.cpp"
 HEAPF64[tempDoublePtr>>3]=$96;HEAP32[$vararg_ptr1>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr1+4>>2]=HEAP32[tempDoublePtr+4>>2]; //@line 422 "emscripten/hsp3dish.cpp"
 (_printf((25816|0),($vararg_buffer|0))|0); //@line 422 "emscripten/hsp3dish.cpp"
 $97 = HEAP32[25680>>2]|0; //@line 424 "emscripten/hsp3dish.cpp"
 $98 = $mode; //@line 424 "emscripten/hsp3dish.cpp"
 $99 = (__ZN4Hsp35ResetEi($97,$98)|0); //@line 424 "emscripten/hsp3dish.cpp"
 $100 = ($99|0)!=(0); //@line 424 "emscripten/hsp3dish.cpp"
 if ($100) {
  __Z15hsp3dish_dialogPc(25832); //@line 425 "emscripten/hsp3dish.cpp"
  $0 = 1; //@line 426 "emscripten/hsp3dish.cpp"
  $130 = $0; //@line 466 "emscripten/hsp3dish.cpp"
  STACKTOP = sp;return ($130|0); //@line 466 "emscripten/hsp3dish.cpp"
 }
 $101 = HEAP32[25680>>2]|0; //@line 429 "emscripten/hsp3dish.cpp"
 HEAP32[25672>>2] = $101; //@line 429 "emscripten/hsp3dish.cpp"
 HEAP32[25664>>2] = 0; //@line 433 "emscripten/hsp3dish.cpp"
 $102 = HEAP32[25672>>2]|0; //@line 434 "emscripten/hsp3dish.cpp"
 $103 = (($102) + 852|0); //@line 434 "emscripten/hsp3dish.cpp"
 HEAP32[$103>>2] = 178; //@line 434 "emscripten/hsp3dish.cpp"
 $104 = $sx; //@line 438 "emscripten/hsp3dish.cpp"
 $105 = (~~(($104))); //@line 438 "emscripten/hsp3dish.cpp"
 $106 = $sy; //@line 438 "emscripten/hsp3dish.cpp"
 $107 = (~~(($106))); //@line 438 "emscripten/hsp3dish.cpp"
 __ZL19hsp3dish_initwindowP6engineiiPc(0,$105,$107,25848); //@line 438 "emscripten/hsp3dish.cpp"
 $108 = $sx; //@line 440 "emscripten/hsp3dish.cpp"
 $109 = HEAP32[25688>>2]|0; //@line 440 "emscripten/hsp3dish.cpp"
 $110 = (+($109|0)); //@line 440 "emscripten/hsp3dish.cpp"
 $111 = $108 != $110; //@line 440 "emscripten/hsp3dish.cpp"
 if ($111) {
  label = 37;
 } else {
  $112 = $sy; //@line 440 "emscripten/hsp3dish.cpp"
  $113 = HEAP32[25696>>2]|0; //@line 440 "emscripten/hsp3dish.cpp"
  $114 = (+($113|0)); //@line 440 "emscripten/hsp3dish.cpp"
  $115 = $112 != $114; //@line 440 "emscripten/hsp3dish.cpp"
  if ($115) {
   label = 37;
  }
 }
 if ((label|0) == 37) {
  $116 = HEAP32[25688>>2]|0; //@line 441 "emscripten/hsp3dish.cpp"
  $117 = HEAP32[25696>>2]|0; //@line 441 "emscripten/hsp3dish.cpp"
  _hgio_view($116,$117); //@line 441 "emscripten/hsp3dish.cpp"
  $118 = $sx; //@line 442 "emscripten/hsp3dish.cpp"
  $119 = (~~(($118))); //@line 442 "emscripten/hsp3dish.cpp"
  $120 = $sy; //@line 442 "emscripten/hsp3dish.cpp"
  $121 = (~~(($120))); //@line 442 "emscripten/hsp3dish.cpp"
  _hgio_size($119,$121); //@line 442 "emscripten/hsp3dish.cpp"
  $122 = $autoscale; //@line 443 "emscripten/hsp3dish.cpp"
  _hgio_autoscale($122); //@line 443 "emscripten/hsp3dish.cpp"
 }
 $123 = (__Z16code_gettypeinfoi(9)|0); //@line 451 "emscripten/hsp3dish.cpp"
 __Z19hsp3typeinit_extcmdP12HSP3TYPEINFO($123); //@line 451 "emscripten/hsp3dish.cpp"
 $124 = (__Z16code_gettypeinfoi(10)|0); //@line 452 "emscripten/hsp3dish.cpp"
 __Z20hsp3typeinit_extfuncP12HSP3TYPEINFO($124); //@line 452 "emscripten/hsp3dish.cpp"
 $125 = HEAP32[25672>>2]|0; //@line 459 "emscripten/hsp3dish.cpp"
 $126 = (($125) + 876|0); //@line 459 "emscripten/hsp3dish.cpp"
 $127 = HEAP32[$126>>2]|0; //@line 459 "emscripten/hsp3dish.cpp"
 HEAP32[25648>>2] = $127; //@line 459 "emscripten/hsp3dish.cpp"
 $128 = (__Z21hsp3extcmd_getdevinfov()|0); //@line 463 "emscripten/hsp3dish.cpp"
 $devinfo = $128; //@line 463 "emscripten/hsp3dish.cpp"
 $129 = $devinfo; //@line 464 "emscripten/hsp3dish.cpp"
 __ZL19hsp3dish_setdevinfoP11HSP3DEVINFO($129); //@line 464 "emscripten/hsp3dish.cpp"
 $0 = 0; //@line 466 "emscripten/hsp3dish.cpp"
 $130 = $0; //@line 466 "emscripten/hsp3dish.cpp"
 STACKTOP = sp;return ($130|0); //@line 466 "emscripten/hsp3dish.cpp"
}
function __ZL19hsp3dish_initwindowP6engineiiPc($engine,$sx,$sy,$windowtitle) {
 $engine = $engine|0;
 $sx = $sx|0;
 $sy = $sy|0;
 $windowtitle = $windowtitle|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $screen = 0;
 var $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer3 = sp;
 $vararg_buffer = sp + 8|0;
 $0 = $engine;
 $1 = $sx;
 $2 = $sy;
 $3 = $windowtitle;
 $4 = $1; //@line 100 "emscripten/hsp3dish.cpp"
 $5 = $2; //@line 100 "emscripten/hsp3dish.cpp"
 $6 = $3; //@line 100 "emscripten/hsp3dish.cpp"
 HEAP32[$vararg_buffer>>2] = $4; //@line 100 "emscripten/hsp3dish.cpp"
 $vararg_ptr1 = (($vararg_buffer) + 4|0); //@line 100 "emscripten/hsp3dish.cpp"
 HEAP32[$vararg_ptr1>>2] = $5; //@line 100 "emscripten/hsp3dish.cpp"
 $vararg_ptr2 = (($vararg_buffer) + 8|0); //@line 100 "emscripten/hsp3dish.cpp"
 HEAP32[$vararg_ptr2>>2] = $6; //@line 100 "emscripten/hsp3dish.cpp"
 (_printf((25992|0),($vararg_buffer|0))|0); //@line 100 "emscripten/hsp3dish.cpp"
 $7 = (_SDL_Init(32)|0); //@line 111 "emscripten/hsp3dish.cpp"
 $8 = ($7|0)!=(0); //@line 111 "emscripten/hsp3dish.cpp"
 if ($8) {
  $9 = (_SDL_GetError()|0); //@line 112 "emscripten/hsp3dish.cpp"
  HEAP32[$vararg_buffer3>>2] = $9; //@line 112 "emscripten/hsp3dish.cpp"
  (_printf((26008|0),($vararg_buffer3|0))|0); //@line 112 "emscripten/hsp3dish.cpp"
  STACKTOP = sp;return; //@line 126 "emscripten/hsp3dish.cpp"
 }
 (_SDL_GL_SetAttribute(5,1)|0); //@line 116 "emscripten/hsp3dish.cpp"
 $10 = $1; //@line 118 "emscripten/hsp3dish.cpp"
 $11 = $2; //@line 118 "emscripten/hsp3dish.cpp"
 $12 = (_SDL_SetVideoMode(($10|0),($11|0),16,67108864)|0); //@line 118 "emscripten/hsp3dish.cpp"
 $screen = $12; //@line 118 "emscripten/hsp3dish.cpp"
 $13 = $screen; //@line 119 "emscripten/hsp3dish.cpp"
 $14 = ($13|0)!=(0|0); //@line 119 "emscripten/hsp3dish.cpp"
 if ($14) {
  $16 = $1; //@line 125 "emscripten/hsp3dish.cpp"
  $17 = $2; //@line 125 "emscripten/hsp3dish.cpp"
  $18 = $0; //@line 125 "emscripten/hsp3dish.cpp"
  _hgio_init(0,$16,$17,$18); //@line 125 "emscripten/hsp3dish.cpp"
  _hgio_clsmode(1,16777215,0); //@line 126 "emscripten/hsp3dish.cpp"
  STACKTOP = sp;return; //@line 126 "emscripten/hsp3dish.cpp"
 } else {
  $15 = (_SDL_GetError()|0); //@line 120 "emscripten/hsp3dish.cpp"
  HEAP32[$vararg_buffer6>>2] = $15; //@line 120 "emscripten/hsp3dish.cpp"
  (_printf((26040|0),($vararg_buffer6|0))|0); //@line 120 "emscripten/hsp3dish.cpp"
  STACKTOP = sp;return; //@line 126 "emscripten/hsp3dish.cpp"
 }
}
function __ZL19hsp3dish_setdevinfoP11HSP3DEVINFO($devinfo) {
 $devinfo = $devinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $devinfo;
 $1 = $0; //@line 323 "emscripten/hsp3dish.cpp"
 HEAP32[25936>>2] = $1; //@line 323 "emscripten/hsp3dish.cpp"
 $2 = $0; //@line 324 "emscripten/hsp3dish.cpp"
 HEAP32[$2>>2] = 25944; //@line 324 "emscripten/hsp3dish.cpp"
 $3 = $0; //@line 325 "emscripten/hsp3dish.cpp"
 $4 = (($3) + 4|0); //@line 325 "emscripten/hsp3dish.cpp"
 HEAP32[$4>>2] = 25960; //@line 325 "emscripten/hsp3dish.cpp"
 $5 = $0; //@line 326 "emscripten/hsp3dish.cpp"
 $6 = (($5) + 8|0); //@line 326 "emscripten/hsp3dish.cpp"
 HEAP32[$6>>2] = 179; //@line 326 "emscripten/hsp3dish.cpp"
 $7 = $0; //@line 327 "emscripten/hsp3dish.cpp"
 $8 = (($7) + 12|0); //@line 327 "emscripten/hsp3dish.cpp"
 HEAP32[$8>>2] = 180; //@line 327 "emscripten/hsp3dish.cpp"
 $9 = $0; //@line 328 "emscripten/hsp3dish.cpp"
 $10 = (($9) + 20|0); //@line 328 "emscripten/hsp3dish.cpp"
 HEAP32[$10>>2] = 181; //@line 328 "emscripten/hsp3dish.cpp"
 $11 = $0; //@line 329 "emscripten/hsp3dish.cpp"
 $12 = (($11) + 16|0); //@line 329 "emscripten/hsp3dish.cpp"
 HEAP32[$12>>2] = 182; //@line 329 "emscripten/hsp3dish.cpp"
 STACKTOP = sp;return; //@line 330 "emscripten/hsp3dish.cpp"
}
function __Z14hsp3dish_errorv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, $errmsg = 0, $fname = 0, $ln = 0, $msg = 0, $vararg_buffer = 0, $vararg_buffer2 = 0;
 var $vararg_ptr1 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1072|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $errmsg = sp + 40|0;
 $0 = (__Z13code_geterrorv()|0); //@line 499 "emscripten/hsp3dish.cpp"
 $err = $0; //@line 499 "emscripten/hsp3dish.cpp"
 $1 = (__Z18code_getdebug_linev()|0); //@line 500 "emscripten/hsp3dish.cpp"
 $ln = $1; //@line 500 "emscripten/hsp3dish.cpp"
 $2 = $err; //@line 501 "emscripten/hsp3dish.cpp"
 $3 = (__Z13hspd_geterror8HSPERROR($2)|0); //@line 501 "emscripten/hsp3dish.cpp"
 $msg = $3; //@line 501 "emscripten/hsp3dish.cpp"
 $4 = (__Z18code_getdebug_namev()|0); //@line 502 "emscripten/hsp3dish.cpp"
 $fname = $4; //@line 502 "emscripten/hsp3dish.cpp"
 $5 = $ln; //@line 504 "emscripten/hsp3dish.cpp"
 $6 = ($5|0)<(0); //@line 504 "emscripten/hsp3dish.cpp"
 if ($6) {
  $7 = $err; //@line 505 "emscripten/hsp3dish.cpp"
  $8 = $msg; //@line 505 "emscripten/hsp3dish.cpp"
  HEAP32[$vararg_buffer>>2] = $7; //@line 505 "emscripten/hsp3dish.cpp"
  $vararg_ptr1 = (($vararg_buffer) + 4|0); //@line 505 "emscripten/hsp3dish.cpp"
  HEAP32[$vararg_ptr1>>2] = $8; //@line 505 "emscripten/hsp3dish.cpp"
  (_sprintf($errmsg,25864,$vararg_buffer)|0); //@line 505 "emscripten/hsp3dish.cpp"
  $fname = 0; //@line 506 "emscripten/hsp3dish.cpp"
  (__Z18hsp3dish_debugopenv()|0); //@line 510 "emscripten/hsp3dish.cpp"
  __Z15hsp3dish_dialogPc($errmsg); //@line 511 "emscripten/hsp3dish.cpp"
  STACKTOP = sp;return; //@line 512 "emscripten/hsp3dish.cpp"
 } else {
  $9 = $err; //@line 508 "emscripten/hsp3dish.cpp"
  $10 = $ln; //@line 508 "emscripten/hsp3dish.cpp"
  $11 = $fname; //@line 508 "emscripten/hsp3dish.cpp"
  $12 = $msg; //@line 508 "emscripten/hsp3dish.cpp"
  HEAP32[$vararg_buffer2>>2] = $9; //@line 508 "emscripten/hsp3dish.cpp"
  $vararg_ptr5 = (($vararg_buffer2) + 4|0); //@line 508 "emscripten/hsp3dish.cpp"
  HEAP32[$vararg_ptr5>>2] = $10; //@line 508 "emscripten/hsp3dish.cpp"
  $vararg_ptr6 = (($vararg_buffer2) + 8|0); //@line 508 "emscripten/hsp3dish.cpp"
  HEAP32[$vararg_ptr6>>2] = $11; //@line 508 "emscripten/hsp3dish.cpp"
  $vararg_ptr7 = (($vararg_buffer2) + 12|0); //@line 508 "emscripten/hsp3dish.cpp"
  HEAP32[$vararg_ptr7>>2] = $12; //@line 508 "emscripten/hsp3dish.cpp"
  (_sprintf($errmsg,25888,$vararg_buffer2)|0); //@line 508 "emscripten/hsp3dish.cpp"
  (__Z18hsp3dish_debugopenv()|0); //@line 510 "emscripten/hsp3dish.cpp"
  __Z15hsp3dish_dialogPc($errmsg); //@line 511 "emscripten/hsp3dish.cpp"
  STACKTOP = sp;return; //@line 512 "emscripten/hsp3dish.cpp"
 }
}
function __Z17hsp3dish_exec_onev() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $endcode = 0, $i = 0, $runmode = 0;
 var $stop = 0, $tick = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $2 = HEAP32[25672>>2]|0; //@line 523 "emscripten/hsp3dish.cpp"
 $3 = (($2) + 236|0); //@line 523 "emscripten/hsp3dish.cpp"
 $4 = HEAP32[$3>>2]|0; //@line 523 "emscripten/hsp3dish.cpp"
 if ((($4|0) == 1)) {
  $5 = (_hgio_gettick()|0); //@line 525 "emscripten/hsp3dish.cpp"
  $tick = $5; //@line 525 "emscripten/hsp3dish.cpp"
  $6 = $tick; //@line 526 "emscripten/hsp3dish.cpp"
  $7 = (__Z14code_exec_waiti($6)|0); //@line 526 "emscripten/hsp3dish.cpp"
  $8 = HEAP32[25672>>2]|0; //@line 526 "emscripten/hsp3dish.cpp"
  $9 = (($8) + 236|0); //@line 526 "emscripten/hsp3dish.cpp"
  HEAP32[$9>>2] = $7; //@line 526 "emscripten/hsp3dish.cpp"
  label = 3;
 } else if ((($4|0) == 2)) {
  label = 3;
 }
 do {
  if ((label|0) == 3) {
   $10 = (_hgio_gettick()|0); //@line 528 "emscripten/hsp3dish.cpp"
   $tick = $10; //@line 528 "emscripten/hsp3dish.cpp"
   $11 = $tick; //@line 529 "emscripten/hsp3dish.cpp"
   $12 = (__Z15code_exec_awaiti($11)|0); //@line 529 "emscripten/hsp3dish.cpp"
   $13 = ($12|0)!=(0); //@line 529 "emscripten/hsp3dish.cpp"
   if (!($13)) {
    break;
   }
   STACKTOP = sp;return; //@line 569 "emscripten/hsp3dish.cpp"
  }
 } while(0);
 __Z11handleEventv(); //@line 534 "emscripten/hsp3dish.cpp"
 $stop = 0; //@line 539 "emscripten/hsp3dish.cpp"
 $i = 0; //@line 540 "emscripten/hsp3dish.cpp"
 while(1) {
  $14 = $stop; //@line 540 "emscripten/hsp3dish.cpp"
  $15 = $14&1; //@line 540 "emscripten/hsp3dish.cpp"
  if ($15) {
   $36 = 0;
  } else {
   $16 = $i; //@line 540 "emscripten/hsp3dish.cpp"
   $17 = ($16|0)<(5000); //@line 540 "emscripten/hsp3dish.cpp"
   $36 = $17;
  }
  if (!($36)) {
   break;
  }
  $18 = (__Z16code_execcmd_oneRi(25928)|0); //@line 542 "emscripten/hsp3dish.cpp"
  $runmode = $18; //@line 542 "emscripten/hsp3dish.cpp"
  $19 = HEAP32[25672>>2]|0; //@line 543 "emscripten/hsp3dish.cpp"
  $20 = (($19) + 236|0); //@line 543 "emscripten/hsp3dish.cpp"
  $21 = HEAP32[$20>>2]|0; //@line 543 "emscripten/hsp3dish.cpp"
  if ((($21|0) == 0)) {
  } else if ((($21|0) == 2) | (($21|0) == 1)) {
   label = 12;
   break;
  }
  $22 = $i; //@line 540 "emscripten/hsp3dish.cpp"
  $23 = (($22) + 1)|0; //@line 540 "emscripten/hsp3dish.cpp"
  $i = $23; //@line 540 "emscripten/hsp3dish.cpp"
 }
 if ((label|0) == 12) {
  $stop = 1; //@line 549 "emscripten/hsp3dish.cpp"
  STACKTOP = sp;return; //@line 569 "emscripten/hsp3dish.cpp"
 }
 $24 = $runmode; //@line 555 "emscripten/hsp3dish.cpp"
 $25 = ($24|0)==(0); //@line 555 "emscripten/hsp3dish.cpp"
 if ($25) {
  STACKTOP = sp;return; //@line 569 "emscripten/hsp3dish.cpp"
 }
 $26 = $runmode; //@line 558 "emscripten/hsp3dish.cpp"
 $27 = ($26|0)==(5); //@line 558 "emscripten/hsp3dish.cpp"
 if (!($27)) {
  $33 = HEAP32[25672>>2]|0; //@line 567 "emscripten/hsp3dish.cpp"
  $34 = (($33) + 848|0); //@line 567 "emscripten/hsp3dish.cpp"
  $35 = HEAP32[$34>>2]|0; //@line 567 "emscripten/hsp3dish.cpp"
  $endcode = $35; //@line 567 "emscripten/hsp3dish.cpp"
  __ZL12hsp3dish_byev(); //@line 568 "emscripten/hsp3dish.cpp"
  _exit(0); //@line 569 "emscripten/hsp3dish.cpp"
  // unreachable; //@line 569 "emscripten/hsp3dish.cpp"
 }
 __THREW__ = 0;
 invoke_v(183); //@line 560 "emscripten/hsp3dish.cpp"
 $28 = __THREW__; __THREW__ = 0;
 $29 = $28&1;
 if (!($29)) {
  _exit(-1); //@line 564 "emscripten/hsp3dish.cpp"
  // unreachable; //@line 564 "emscripten/hsp3dish.cpp"
 }
 $30 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
 $31 = tempRet0;
 $0 = $30; //@line 560 "emscripten/hsp3dish.cpp"
 $1 = $31; //@line 560 "emscripten/hsp3dish.cpp"
 $32 = $0; //@line 561 "emscripten/hsp3dish.cpp"
 (___cxa_begin_catch(($32|0))|0); //@line 561 "emscripten/hsp3dish.cpp"
 ___cxa_end_catch(); //@line 563 "emscripten/hsp3dish.cpp"
 _exit(-1); //@line 564 "emscripten/hsp3dish.cpp"
 // unreachable; //@line 564 "emscripten/hsp3dish.cpp"
}
function __ZL12hsp3dish_byev() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 __Z16hsp3dish_drawoffv(); //@line 474 "emscripten/hsp3dish.cpp"
 _emscripten_cancel_main_loop(); //@line 478 "emscripten/hsp3dish.cpp"
 $2 = HEAP32[25680>>2]|0; //@line 482 "emscripten/hsp3dish.cpp"
 $3 = ($2|0)!=(0|0); //@line 482 "emscripten/hsp3dish.cpp"
 if (!($3)) {
  STACKTOP = sp;return; //@line 489 "emscripten/hsp3dish.cpp"
 }
 $4 = HEAP32[25680>>2]|0; //@line 482 "emscripten/hsp3dish.cpp"
 $5 = ($4|0)==(0|0); //@line 482 "emscripten/hsp3dish.cpp"
 do {
  if (!($5)) {
   __THREW__ = 0;
   invoke_vi(184,($4|0)); //@line 482 "emscripten/hsp3dish.cpp"
   $6 = __THREW__; __THREW__ = 0;
   $7 = $6&1;
   if (!($7)) {
    __ZdlPv($4); //@line 482 "emscripten/hsp3dish.cpp"
    break;
   }
   $8 = ___cxa_find_matching_catch(-1,-1)|0;
   $9 = tempRet0;
   $0 = $8; //@line 482 "emscripten/hsp3dish.cpp"
   $1 = $9; //@line 482 "emscripten/hsp3dish.cpp"
   __ZdlPv($4); //@line 482 "emscripten/hsp3dish.cpp"
   $10 = $0; //@line 482 "emscripten/hsp3dish.cpp"
   $11 = $1; //@line 482 "emscripten/hsp3dish.cpp"
   ___resumeException($10|0);
   // unreachable;
  }
 } while(0);
 HEAP32[25680>>2] = 0; //@line 482 "emscripten/hsp3dish.cpp"
 STACKTOP = sp;return; //@line 489 "emscripten/hsp3dish.cpp"
}
function __Z13hsp3dish_execv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = HEAP32[25672>>2]|0; //@line 576 "emscripten/hsp3dish.cpp"
 __Z16hsp3dish_msgfuncP6HSPCTX($1); //@line 576 "emscripten/hsp3dish.cpp"
 _emscripten_set_main_loop((185|0),60,1); //@line 580 "emscripten/hsp3dish.cpp"
 _llvm_trap(); //@line 580 "emscripten/hsp3dish.cpp"
 // unreachable; //@line 580 "emscripten/hsp3dish.cpp"
 return 0|0;
}
function __ZL15hsp3dish_devprmPcS_($name,$value) {
 $name = $name|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $name;
 $1 = $value;
 STACKTOP = sp;return -1; //@line 293 "emscripten/hsp3dish.cpp"
}
function __ZL19hsp3dish_devcontrolPciii($cmd,$p1,$p2,$p3) {
 $cmd = $cmd|0;
 $p1 = $p1|0;
 $p2 = $p2|0;
 $p3 = $p3|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cmd;
 $1 = $p1;
 $2 = $p2;
 $3 = $p3;
 STACKTOP = sp;return -1; //@line 298 "emscripten/hsp3dish.cpp"
}
function __ZL16hsp3dish_devinfoPc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $name;
 $2 = $1; //@line 311 "emscripten/hsp3dish.cpp"
 $3 = (_strcmp($2,25976)|0); //@line 311 "emscripten/hsp3dish.cpp"
 $4 = ($3|0)==(0); //@line 311 "emscripten/hsp3dish.cpp"
 do {
  if ($4) {
   $5 = HEAP32[25936>>2]|0; //@line 312 "emscripten/hsp3dish.cpp"
   $6 = HEAP32[$5>>2]|0; //@line 312 "emscripten/hsp3dish.cpp"
   $0 = $6; //@line 312 "emscripten/hsp3dish.cpp"
  } else {
   $7 = $1; //@line 314 "emscripten/hsp3dish.cpp"
   $8 = (_strcmp($7,25984)|0); //@line 314 "emscripten/hsp3dish.cpp"
   $9 = ($8|0)==(0); //@line 314 "emscripten/hsp3dish.cpp"
   if ($9) {
    $10 = HEAP32[25936>>2]|0; //@line 315 "emscripten/hsp3dish.cpp"
    $11 = (($10) + 4|0); //@line 315 "emscripten/hsp3dish.cpp"
    $12 = HEAP32[$11>>2]|0; //@line 315 "emscripten/hsp3dish.cpp"
    $0 = $12; //@line 315 "emscripten/hsp3dish.cpp"
    break;
   } else {
    $0 = 0; //@line 317 "emscripten/hsp3dish.cpp"
    break;
   }
  }
 } while(0);
 $13 = $0; //@line 318 "emscripten/hsp3dish.cpp"
 STACKTOP = sp;return ($13|0); //@line 318 "emscripten/hsp3dish.cpp"
}
function __ZL17hsp3dish_devinfoiPcPi($name,$size) {
 $name = $name|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $name;
 $1 = $size;
 HEAP32[25968>>2] = 0; //@line 303 "emscripten/hsp3dish.cpp"
 $2 = $1; //@line 304 "emscripten/hsp3dish.cpp"
 HEAP32[$2>>2] = -1; //@line 304 "emscripten/hsp3dish.cpp"
 STACKTOP = sp;return (0|0); //@line 305 "emscripten/hsp3dish.cpp"
}
function _main($argc,$argv) {
 $argc = $argc|0;
 $argv = $argv|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0, $res = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = 0;
 $1 = $argc;
 $2 = $argv;
 $3 = $1; //@line 20 "emscripten/main.cpp"
 $4 = ($3|0)>(1); //@line 20 "emscripten/main.cpp"
 if ($4) {
  $5 = $2; //@line 20 "emscripten/main.cpp"
  $6 = (($5) + 4|0); //@line 20 "emscripten/main.cpp"
  $7 = HEAP32[$6>>2]|0; //@line 20 "emscripten/main.cpp"
  $p = $7; //@line 20 "emscripten/main.cpp"
 } else {
  $p = 26072; //@line 20 "emscripten/main.cpp"
 }
 $8 = $p; //@line 22 "emscripten/main.cpp"
 $9 = (__Z13hsp3dish_initPc($8)|0); //@line 22 "emscripten/main.cpp"
 $res = $9; //@line 22 "emscripten/main.cpp"
 $10 = $res; //@line 23 "emscripten/main.cpp"
 $11 = ($10|0)==(0); //@line 23 "emscripten/main.cpp"
 if (!($11)) {
  $13 = $res; //@line 26 "emscripten/main.cpp"
  STACKTOP = sp;return ($13|0); //@line 26 "emscripten/main.cpp"
 }
 $12 = (__Z13hsp3dish_execv()|0); //@line 24 "emscripten/main.cpp"
 $res = $12; //@line 24 "emscripten/main.cpp"
 $13 = $res; //@line 26 "emscripten/main.cpp"
 STACKTOP = sp;return ($13|0); //@line 26 "emscripten/main.cpp"
}
function __ZN5MMManC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 HEAP32[$1>>2] = 0; //@line 50 "emscripten/mmman.cpp"
 $2 = (($1) + 4|0); //@line 52 "emscripten/mmman.cpp"
 HEAP32[$2>>2] = 0; //@line 52 "emscripten/mmman.cpp"
 $3 = (($1) + 8|0); //@line 53 "emscripten/mmman.cpp"
 HEAP8[$3>>0] = 0; //@line 53 "emscripten/mmman.cpp"
 (_Mix_Init(8)|0); //@line 55 "emscripten/mmman.cpp"
 (_Mix_ReserveChannels(16)|0); //@line 56 "emscripten/mmman.cpp"
 $4 = (_Mix_OpenAudio(0,0,0,0)|0); //@line 58 "emscripten/mmman.cpp"
 $ret = $4; //@line 58 "emscripten/mmman.cpp"
 $5 = $ret; //@line 59 "emscripten/mmman.cpp"
 $6 = ($5|0)==(0); //@line 59 "emscripten/mmman.cpp"
 if ($6) {
  $7 = $ret; //@line 61 "emscripten/mmman.cpp"
  $8 = ($7|0)==(0); //@line 61 "emscripten/mmman.cpp"
  $9 = (($1) + 8|0); //@line 61 "emscripten/mmman.cpp"
  $10 = $8&1; //@line 61 "emscripten/mmman.cpp"
  HEAP8[$9>>0] = $10; //@line 61 "emscripten/mmman.cpp"
  STACKTOP = sp;return; //@line 62 "emscripten/mmman.cpp"
 } else {
  ___assert_fail((26080|0),(26096|0),59,(26120|0)); //@line 59 "emscripten/mmman.cpp"
  // unreachable; //@line 59 "emscripten/mmman.cpp"
 }
}
function __ZN5MMManD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZN5MMMan12ClearAllBankEv($1); //@line 67 "emscripten/mmman.cpp"
 while(1) {
  $2 = (_Mix_Init(0)|0); //@line 69 "emscripten/mmman.cpp"
  $3 = ($2|0)!=(0); //@line 69 "emscripten/mmman.cpp"
  if (!($3)) {
   break;
  }
  _Mix_Quit(); //@line 70 "emscripten/mmman.cpp"
 }
 _Mix_CloseAudio(); //@line 71 "emscripten/mmman.cpp"
 STACKTOP = sp;return; //@line 72 "emscripten/mmman.cpp"
}
function __ZN5MMMan12ClearAllBankEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 4|0); //@line 149 "emscripten/mmman.cpp"
 $3 = HEAP32[$2>>2]|0; //@line 149 "emscripten/mmman.cpp"
 $4 = ($3|0)!=(0|0); //@line 149 "emscripten/mmman.cpp"
 if (!($4)) {
  STACKTOP = sp;return; //@line 158 "emscripten/mmman.cpp"
 }
 __ZN5MMMan4StopEv($1); //@line 150 "emscripten/mmman.cpp"
 $a = 0; //@line 151 "emscripten/mmman.cpp"
 while(1) {
  $5 = $a; //@line 151 "emscripten/mmman.cpp"
  $6 = HEAP32[$1>>2]|0; //@line 151 "emscripten/mmman.cpp"
  $7 = ($5|0)<($6|0); //@line 151 "emscripten/mmman.cpp"
  if (!($7)) {
   break;
  }
  $8 = $a; //@line 152 "emscripten/mmman.cpp"
  __ZN5MMMan10DeleteBankEi($1,$8); //@line 152 "emscripten/mmman.cpp"
  $9 = $a; //@line 151 "emscripten/mmman.cpp"
  $10 = (($9) + 1)|0; //@line 151 "emscripten/mmman.cpp"
  $a = $10; //@line 151 "emscripten/mmman.cpp"
 }
 $11 = (($1) + 4|0); //@line 154 "emscripten/mmman.cpp"
 $12 = HEAP32[$11>>2]|0; //@line 154 "emscripten/mmman.cpp"
 __Z6sbFreePv($12); //@line 154 "emscripten/mmman.cpp"
 $13 = (($1) + 4|0); //@line 155 "emscripten/mmman.cpp"
 HEAP32[$13>>2] = 0; //@line 155 "emscripten/mmman.cpp"
 HEAP32[$1>>2] = 0; //@line 156 "emscripten/mmman.cpp"
 STACKTOP = sp;return; //@line 158 "emscripten/mmman.cpp"
}
function __ZN5MMMan10DeleteBankEi($this,$bank) {
 $this = $this|0;
 $bank = $bank|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $lpSnd = 0, $m = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $bank;
 $2 = $0;
 $3 = $1; //@line 79 "emscripten/mmman.cpp"
 $4 = (($2) + 4|0); //@line 79 "emscripten/mmman.cpp"
 $5 = HEAP32[$4>>2]|0; //@line 79 "emscripten/mmman.cpp"
 $6 = (($5) + (($3*44)|0)|0); //@line 79 "emscripten/mmman.cpp"
 $m = $6; //@line 79 "emscripten/mmman.cpp"
 $7 = $m; //@line 80 "emscripten/mmman.cpp"
 $8 = HEAP32[$7>>2]|0; //@line 80 "emscripten/mmman.cpp"
 $9 = ($8|0)==(1); //@line 80 "emscripten/mmman.cpp"
 if ($9) {
  $10 = $m; //@line 81 "emscripten/mmman.cpp"
  __ZN5MMMan8StopBankEP3MMM($2,$10); //@line 81 "emscripten/mmman.cpp"
  $11 = $m; //@line 82 "emscripten/mmman.cpp"
  $12 = (($11) + 32|0); //@line 82 "emscripten/mmman.cpp"
  $13 = HEAP32[$12>>2]|0; //@line 82 "emscripten/mmman.cpp"
  _Mix_FreeChunk(($13|0)); //@line 82 "emscripten/mmman.cpp"
 }
 $14 = $1; //@line 84 "emscripten/mmman.cpp"
 $15 = (($2) + 4|0); //@line 84 "emscripten/mmman.cpp"
 $16 = HEAP32[$15>>2]|0; //@line 84 "emscripten/mmman.cpp"
 $17 = (($16) + (($14*44)|0)|0); //@line 84 "emscripten/mmman.cpp"
 $18 = (($17) + 16|0); //@line 84 "emscripten/mmman.cpp"
 $19 = HEAP32[$18>>2]|0; //@line 84 "emscripten/mmman.cpp"
 $lpSnd = $19; //@line 84 "emscripten/mmman.cpp"
 $20 = $lpSnd; //@line 85 "emscripten/mmman.cpp"
 $21 = ($20|0)!=(0|0); //@line 85 "emscripten/mmman.cpp"
 if ($21) {
  $22 = $lpSnd; //@line 86 "emscripten/mmman.cpp"
  _free($22); //@line 86 "emscripten/mmman.cpp"
 }
 $23 = $1; //@line 88 "emscripten/mmman.cpp"
 $24 = (($2) + 4|0); //@line 88 "emscripten/mmman.cpp"
 $25 = HEAP32[$24>>2]|0; //@line 88 "emscripten/mmman.cpp"
 $26 = (($25) + (($23*44)|0)|0); //@line 88 "emscripten/mmman.cpp"
 $27 = (($26) + 16|0); //@line 88 "emscripten/mmman.cpp"
 HEAP32[$27>>2] = 0; //@line 88 "emscripten/mmman.cpp"
 STACKTOP = sp;return; //@line 89 "emscripten/mmman.cpp"
}
function __ZN5MMMan8StopBankEP3MMM($this,$mmm) {
 $this = $this|0;
 $mmm = $mmm|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $mmm;
 $2 = $1; //@line 216 "emscripten/mmman.cpp"
 $3 = ($2|0)==(0|0); //@line 216 "emscripten/mmman.cpp"
 if ($3) {
  STACKTOP = sp;return; //@line 218 "emscripten/mmman.cpp"
 } else {
  $4 = $1; //@line 217 "emscripten/mmman.cpp"
  $5 = (($4) + 36|0); //@line 217 "emscripten/mmman.cpp"
  $6 = HEAP32[$5>>2]|0; //@line 217 "emscripten/mmman.cpp"
  (_Mix_HaltChannel(($6|0))|0); //@line 217 "emscripten/mmman.cpp"
  $7 = $1; //@line 218 "emscripten/mmman.cpp"
  $8 = (($7) + 40|0); //@line 218 "emscripten/mmman.cpp"
  HEAP32[$8>>2] = 0; //@line 218 "emscripten/mmman.cpp"
  STACKTOP = sp;return; //@line 218 "emscripten/mmman.cpp"
 }
}
function __ZN5MMMan9AllocBankEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ids = 0, $sz = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $this;
 $2 = $1;
 $3 = (($2) + 8|0); //@line 94 "emscripten/mmman.cpp"
 $4 = HEAP8[$3>>0]|0; //@line 94 "emscripten/mmman.cpp"
 $5 = $4&1; //@line 94 "emscripten/mmman.cpp"
 if (!($5)) {
  $0 = -1; //@line 94 "emscripten/mmman.cpp"
  $36 = $0; //@line 107 "emscripten/mmman.cpp"
  STACKTOP = sp;return ($36|0); //@line 107 "emscripten/mmman.cpp"
 }
 $6 = HEAP32[$2>>2]|0; //@line 96 "emscripten/mmman.cpp"
 $7 = (($6) + 1)|0; //@line 96 "emscripten/mmman.cpp"
 HEAP32[$2>>2] = $7; //@line 96 "emscripten/mmman.cpp"
 $ids = $6; //@line 96 "emscripten/mmman.cpp"
 $8 = HEAP32[$2>>2]|0; //@line 97 "emscripten/mmman.cpp"
 $9 = ($8*44)|0; //@line 97 "emscripten/mmman.cpp"
 $sz = $9; //@line 97 "emscripten/mmman.cpp"
 $10 = (($2) + 4|0); //@line 98 "emscripten/mmman.cpp"
 $11 = HEAP32[$10>>2]|0; //@line 98 "emscripten/mmman.cpp"
 $12 = ($11|0)==(0|0); //@line 98 "emscripten/mmman.cpp"
 if ($12) {
  $13 = $sz; //@line 99 "emscripten/mmman.cpp"
  $14 = (__Z7sbAlloci($13)|0); //@line 99 "emscripten/mmman.cpp"
  $15 = (($2) + 4|0); //@line 99 "emscripten/mmman.cpp"
  HEAP32[$15>>2] = $14; //@line 99 "emscripten/mmman.cpp"
 } else {
  $16 = (($2) + 4|0); //@line 101 "emscripten/mmman.cpp"
  $17 = HEAP32[$16>>2]|0; //@line 101 "emscripten/mmman.cpp"
  $18 = $sz; //@line 101 "emscripten/mmman.cpp"
  $19 = (__Z8sbExpandPci($17,$18)|0); //@line 101 "emscripten/mmman.cpp"
  $20 = (($2) + 4|0); //@line 101 "emscripten/mmman.cpp"
  HEAP32[$20>>2] = $19; //@line 101 "emscripten/mmman.cpp"
 }
 $21 = $ids; //@line 103 "emscripten/mmman.cpp"
 $22 = (($2) + 4|0); //@line 103 "emscripten/mmman.cpp"
 $23 = HEAP32[$22>>2]|0; //@line 103 "emscripten/mmman.cpp"
 $24 = (($23) + (($21*44)|0)|0); //@line 103 "emscripten/mmman.cpp"
 HEAP32[$24>>2] = 0; //@line 103 "emscripten/mmman.cpp"
 $25 = $ids; //@line 104 "emscripten/mmman.cpp"
 $26 = (($2) + 4|0); //@line 104 "emscripten/mmman.cpp"
 $27 = HEAP32[$26>>2]|0; //@line 104 "emscripten/mmman.cpp"
 $28 = (($27) + (($25*44)|0)|0); //@line 104 "emscripten/mmman.cpp"
 $29 = (($28) + 8|0); //@line 104 "emscripten/mmman.cpp"
 HEAP32[$29>>2] = -1; //@line 104 "emscripten/mmman.cpp"
 $30 = $ids; //@line 105 "emscripten/mmman.cpp"
 $31 = (($2) + 4|0); //@line 105 "emscripten/mmman.cpp"
 $32 = HEAP32[$31>>2]|0; //@line 105 "emscripten/mmman.cpp"
 $33 = (($32) + (($30*44)|0)|0); //@line 105 "emscripten/mmman.cpp"
 $34 = (($33) + 36|0); //@line 105 "emscripten/mmman.cpp"
 HEAP32[$34>>2] = -1; //@line 105 "emscripten/mmman.cpp"
 $35 = $ids; //@line 106 "emscripten/mmman.cpp"
 $0 = $35; //@line 106 "emscripten/mmman.cpp"
 $36 = $0; //@line 107 "emscripten/mmman.cpp"
 STACKTOP = sp;return ($36|0); //@line 107 "emscripten/mmman.cpp"
}
function __ZN5MMMan10SearchBankEi($this,$num) {
 $this = $this|0;
 $num = $num|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $this;
 $2 = $num;
 $3 = $1;
 $a = 0; //@line 112 "emscripten/mmman.cpp"
 while(1) {
  $4 = $a; //@line 112 "emscripten/mmman.cpp"
  $5 = HEAP32[$3>>2]|0; //@line 112 "emscripten/mmman.cpp"
  $6 = ($4|0)<($5|0); //@line 112 "emscripten/mmman.cpp"
  if (!($6)) {
   label = 7;
   break;
  }
  $7 = $a; //@line 113 "emscripten/mmman.cpp"
  $8 = (($3) + 4|0); //@line 113 "emscripten/mmman.cpp"
  $9 = HEAP32[$8>>2]|0; //@line 113 "emscripten/mmman.cpp"
  $10 = (($9) + (($7*44)|0)|0); //@line 113 "emscripten/mmman.cpp"
  $11 = (($10) + 8|0); //@line 113 "emscripten/mmman.cpp"
  $12 = HEAP32[$11>>2]|0; //@line 113 "emscripten/mmman.cpp"
  $13 = $2; //@line 113 "emscripten/mmman.cpp"
  $14 = ($12|0)==($13|0); //@line 113 "emscripten/mmman.cpp"
  if ($14) {
   label = 4;
   break;
  }
  $16 = $a; //@line 112 "emscripten/mmman.cpp"
  $17 = (($16) + 1)|0; //@line 112 "emscripten/mmman.cpp"
  $a = $17; //@line 112 "emscripten/mmman.cpp"
 }
 if ((label|0) == 4) {
  $15 = $a; //@line 113 "emscripten/mmman.cpp"
  $0 = $15; //@line 113 "emscripten/mmman.cpp"
  $18 = $0; //@line 116 "emscripten/mmman.cpp"
  STACKTOP = sp;return ($18|0); //@line 116 "emscripten/mmman.cpp"
 }
 else if ((label|0) == 7) {
  $0 = -1; //@line 115 "emscripten/mmman.cpp"
  $18 = $0; //@line 116 "emscripten/mmman.cpp"
  STACKTOP = sp;return ($18|0); //@line 116 "emscripten/mmman.cpp"
 }
 return 0|0;
}
function __ZN5MMMan7SetBankEiiiPvPc($this,$num,$flag,$opt,$mempt,$fname) {
 $this = $this|0;
 $num = $num|0;
 $flag = $flag|0;
 $opt = $opt|0;
 $mempt = $mempt|0;
 $fname = $fname|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $bank = 0, $m = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $1 = $this;
 $2 = $num;
 $3 = $flag;
 $4 = $opt;
 $5 = $mempt;
 $6 = $fname;
 $7 = $1;
 $8 = $2; //@line 124 "emscripten/mmman.cpp"
 $9 = (__ZN5MMMan10SearchBankEi($7,$8)|0); //@line 124 "emscripten/mmman.cpp"
 $bank = $9; //@line 124 "emscripten/mmman.cpp"
 $10 = $bank; //@line 125 "emscripten/mmman.cpp"
 $11 = ($10|0)<(0); //@line 125 "emscripten/mmman.cpp"
 if ($11) {
  $12 = (__ZN5MMMan9AllocBankEv($7)|0); //@line 126 "emscripten/mmman.cpp"
  $bank = $12; //@line 126 "emscripten/mmman.cpp"
 } else {
  $13 = $bank; //@line 128 "emscripten/mmman.cpp"
  __ZN5MMMan10DeleteBankEi($7,$13); //@line 128 "emscripten/mmman.cpp"
 }
 $14 = $bank; //@line 131 "emscripten/mmman.cpp"
 $15 = ($14|0)<(0); //@line 131 "emscripten/mmman.cpp"
 if ($15) {
  $0 = 0; //@line 131 "emscripten/mmman.cpp"
  $40 = $0; //@line 143 "emscripten/mmman.cpp"
  STACKTOP = sp;return ($40|0); //@line 143 "emscripten/mmman.cpp"
 } else {
  $16 = $bank; //@line 133 "emscripten/mmman.cpp"
  $17 = (($7) + 4|0); //@line 133 "emscripten/mmman.cpp"
  $18 = HEAP32[$17>>2]|0; //@line 133 "emscripten/mmman.cpp"
  $19 = (($18) + (($16*44)|0)|0); //@line 133 "emscripten/mmman.cpp"
  $m = $19; //@line 133 "emscripten/mmman.cpp"
  $20 = $3; //@line 134 "emscripten/mmman.cpp"
  $21 = $m; //@line 134 "emscripten/mmman.cpp"
  HEAP32[$21>>2] = $20; //@line 134 "emscripten/mmman.cpp"
  $22 = $4; //@line 135 "emscripten/mmman.cpp"
  $23 = $m; //@line 135 "emscripten/mmman.cpp"
  $24 = (($23) + 4|0); //@line 135 "emscripten/mmman.cpp"
  HEAP32[$24>>2] = $22; //@line 135 "emscripten/mmman.cpp"
  $25 = $2; //@line 136 "emscripten/mmman.cpp"
  $26 = $m; //@line 136 "emscripten/mmman.cpp"
  $27 = (($26) + 8|0); //@line 136 "emscripten/mmman.cpp"
  HEAP32[$27>>2] = $25; //@line 136 "emscripten/mmman.cpp"
  $28 = $5; //@line 137 "emscripten/mmman.cpp"
  $29 = $m; //@line 137 "emscripten/mmman.cpp"
  $30 = (($29) + 16|0); //@line 137 "emscripten/mmman.cpp"
  HEAP32[$30>>2] = $28; //@line 137 "emscripten/mmman.cpp"
  $31 = $m; //@line 138 "emscripten/mmman.cpp"
  $32 = (($31) + 20|0); //@line 138 "emscripten/mmman.cpp"
  HEAP32[$32>>2] = 0; //@line 138 "emscripten/mmman.cpp"
  $33 = $m; //@line 139 "emscripten/mmman.cpp"
  $34 = (($33) + 40|0); //@line 139 "emscripten/mmman.cpp"
  HEAP32[$34>>2] = 0; //@line 139 "emscripten/mmman.cpp"
  $35 = $m; //@line 140 "emscripten/mmman.cpp"
  $36 = (($35) + 24|0); //@line 140 "emscripten/mmman.cpp"
  HEAP32[$36>>2] = 0; //@line 140 "emscripten/mmman.cpp"
  $37 = $m; //@line 141 "emscripten/mmman.cpp"
  $38 = (($37) + 28|0); //@line 141 "emscripten/mmman.cpp"
  HEAP32[$38>>2] = 0; //@line 141 "emscripten/mmman.cpp"
  $39 = $m; //@line 142 "emscripten/mmman.cpp"
  $0 = $39; //@line 142 "emscripten/mmman.cpp"
  $40 = $0; //@line 143 "emscripten/mmman.cpp"
  STACKTOP = sp;return ($40|0); //@line 143 "emscripten/mmman.cpp"
 }
 return 0|0;
}
function __ZN5MMMan4StopEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $m = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 4|0); //@line 206 "emscripten/mmman.cpp"
 $3 = HEAP32[$2>>2]|0; //@line 206 "emscripten/mmman.cpp"
 $m = $3; //@line 206 "emscripten/mmman.cpp"
 $a = 0; //@line 207 "emscripten/mmman.cpp"
 while(1) {
  $4 = $a; //@line 207 "emscripten/mmman.cpp"
  $5 = HEAP32[$1>>2]|0; //@line 207 "emscripten/mmman.cpp"
  $6 = ($4|0)<($5|0); //@line 207 "emscripten/mmman.cpp"
  if (!($6)) {
   break;
  }
  $7 = $m; //@line 208 "emscripten/mmman.cpp"
  __ZN5MMMan8StopBankEP3MMM($1,$7); //@line 208 "emscripten/mmman.cpp"
  $8 = $m; //@line 209 "emscripten/mmman.cpp"
  $9 = (($8) + 44|0); //@line 209 "emscripten/mmman.cpp"
  $m = $9; //@line 209 "emscripten/mmman.cpp"
  $10 = $a; //@line 207 "emscripten/mmman.cpp"
  $11 = (($10) + 1)|0; //@line 207 "emscripten/mmman.cpp"
  $a = $11; //@line 207 "emscripten/mmman.cpp"
 }
 STACKTOP = sp;return; //@line 211 "emscripten/mmman.cpp"
}
function __ZN5MMMan5ResetEPv($this,$hwnd) {
 $this = $this|0;
 $hwnd = $hwnd|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $hwnd;
 $2 = $0;
 __ZN5MMMan12ClearAllBankEv($2); //@line 163 "emscripten/mmman.cpp"
 STACKTOP = sp;return; //@line 164 "emscripten/mmman.cpp"
}
function __ZN5MMMan8PlayBankEP3MMM($this,$mmm) {
 $this = $this|0;
 $mmm = $mmm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $loop = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $mmm;
 $2 = $1; //@line 244 "emscripten/mmman.cpp"
 $3 = ($2|0)==(0|0); //@line 244 "emscripten/mmman.cpp"
 if ($3) {
  STACKTOP = sp;return; //@line 248 "emscripten/mmman.cpp"
 }
 $4 = $1; //@line 245 "emscripten/mmman.cpp"
 $5 = (($4) + 4|0); //@line 245 "emscripten/mmman.cpp"
 $6 = HEAP32[$5>>2]|0; //@line 245 "emscripten/mmman.cpp"
 $7 = $6 & 1; //@line 245 "emscripten/mmman.cpp"
 $8 = ($7|0)!=(0); //@line 245 "emscripten/mmman.cpp"
 $9 = $8&1; //@line 245 "emscripten/mmman.cpp"
 $loop = $9; //@line 245 "emscripten/mmman.cpp"
 $10 = $1; //@line 246 "emscripten/mmman.cpp"
 $11 = (($10) + 36|0); //@line 246 "emscripten/mmman.cpp"
 $12 = HEAP32[$11>>2]|0; //@line 246 "emscripten/mmman.cpp"
 $13 = ($12|0)>=(0); //@line 246 "emscripten/mmman.cpp"
 if ($13) {
  $14 = $1; //@line 246 "emscripten/mmman.cpp"
  $15 = (($14) + 36|0); //@line 246 "emscripten/mmman.cpp"
  $16 = HEAP32[$15>>2]|0; //@line 246 "emscripten/mmman.cpp"
  (_Mix_HaltChannel(($16|0))|0); //@line 246 "emscripten/mmman.cpp"
 }
 $17 = $1; //@line 247 "emscripten/mmman.cpp"
 $18 = (($17) + 32|0); //@line 247 "emscripten/mmman.cpp"
 $19 = HEAP32[$18>>2]|0; //@line 247 "emscripten/mmman.cpp"
 $20 = $loop; //@line 247 "emscripten/mmman.cpp"
 $21 = $20&1; //@line 247 "emscripten/mmman.cpp"
 $22 = $21 ? -1 : 0; //@line 247 "emscripten/mmman.cpp"
 $23 = (_Mix_PlayChannelTimed(-1,($19|0),($22|0),-1)|0); //@line 247 "emscripten/mmman.cpp"
 $24 = $1; //@line 247 "emscripten/mmman.cpp"
 $25 = (($24) + 36|0); //@line 247 "emscripten/mmman.cpp"
 HEAP32[$25>>2] = $23; //@line 247 "emscripten/mmman.cpp"
 $26 = $1; //@line 248 "emscripten/mmman.cpp"
 $27 = (($26) + 40|0); //@line 248 "emscripten/mmman.cpp"
 HEAP32[$27>>2] = 0; //@line 248 "emscripten/mmman.cpp"
 STACKTOP = sp;return; //@line 248 "emscripten/mmman.cpp"
}
function __ZN5MMMan8BankLoadEP3MMMPc($this,$mmm,$fname) {
 $this = $this|0;
 $mmm = $mmm|0;
 $fname = $fname|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $this;
 $2 = $mmm;
 $3 = $fname;
 $4 = $2; //@line 254 "emscripten/mmman.cpp"
 $5 = ($4|0)==(0|0); //@line 254 "emscripten/mmman.cpp"
 if ($5) {
  $0 = -9; //@line 254 "emscripten/mmman.cpp"
  $13 = $0; //@line 257 "emscripten/mmman.cpp"
  STACKTOP = sp;return ($13|0); //@line 257 "emscripten/mmman.cpp"
 } else {
  $6 = $3; //@line 255 "emscripten/mmman.cpp"
  $7 = (_SDL_RWFromFile(($6|0),(26128|0))|0); //@line 255 "emscripten/mmman.cpp"
  $8 = (_Mix_LoadWAV_RW(($7|0),1)|0); //@line 255 "emscripten/mmman.cpp"
  $9 = $2; //@line 255 "emscripten/mmman.cpp"
  $10 = (($9) + 32|0); //@line 255 "emscripten/mmman.cpp"
  HEAP32[$10>>2] = $8; //@line 255 "emscripten/mmman.cpp"
  $11 = $2; //@line 256 "emscripten/mmman.cpp"
  $12 = (($11) + 36|0); //@line 256 "emscripten/mmman.cpp"
  HEAP32[$12>>2] = -1; //@line 256 "emscripten/mmman.cpp"
  $0 = 0; //@line 257 "emscripten/mmman.cpp"
  $13 = $0; //@line 257 "emscripten/mmman.cpp"
  STACKTOP = sp;return ($13|0); //@line 257 "emscripten/mmman.cpp"
 }
 return 0|0;
}
function __ZN5MMMan4LoadEPcii($this,$fname,$num,$opt) {
 $this = $this|0;
 $fname = $fname|0;
 $num = $num|0;
 $opt = $opt|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $flag = 0, $mmm = 0, $res = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $1 = $this;
 $2 = $fname;
 $3 = $num;
 $4 = $opt;
 $5 = $1;
 $flag = 1; //@line 269 "emscripten/mmman.cpp"
 $6 = $3; //@line 270 "emscripten/mmman.cpp"
 $7 = $flag; //@line 270 "emscripten/mmman.cpp"
 $8 = $4; //@line 270 "emscripten/mmman.cpp"
 $9 = $2; //@line 270 "emscripten/mmman.cpp"
 $10 = (__ZN5MMMan7SetBankEiiiPvPc($5,$6,$7,$8,0,$9)|0); //@line 270 "emscripten/mmman.cpp"
 $mmm = $10; //@line 270 "emscripten/mmman.cpp"
 $11 = $mmm; //@line 272 "emscripten/mmman.cpp"
 $12 = ($11|0)!=(0|0); //@line 272 "emscripten/mmman.cpp"
 do {
  if ($12) {
   $13 = $mmm; //@line 273 "emscripten/mmman.cpp"
   $14 = $2; //@line 273 "emscripten/mmman.cpp"
   $15 = (__ZN5MMMan8BankLoadEP3MMMPc($5,$13,$14)|0); //@line 273 "emscripten/mmman.cpp"
   $res = $15; //@line 273 "emscripten/mmman.cpp"
   $16 = $res; //@line 274 "emscripten/mmman.cpp"
   $17 = ($16|0)!=(0); //@line 274 "emscripten/mmman.cpp"
   if (!($17)) {
    break;
   }
   $18 = $mmm; //@line 275 "emscripten/mmman.cpp"
   HEAP32[$18>>2] = 0; //@line 275 "emscripten/mmman.cpp"
   $19 = $2; //@line 276 "emscripten/mmman.cpp"
   $20 = $3; //@line 276 "emscripten/mmman.cpp"
   $21 = $res; //@line 276 "emscripten/mmman.cpp"
   HEAP32[$vararg_buffer>>2] = $19; //@line 276 "emscripten/mmman.cpp"
   $vararg_ptr1 = (($vararg_buffer) + 4|0); //@line 276 "emscripten/mmman.cpp"
   HEAP32[$vararg_ptr1>>2] = $20; //@line 276 "emscripten/mmman.cpp"
   $vararg_ptr2 = (($vararg_buffer) + 8|0); //@line 276 "emscripten/mmman.cpp"
   HEAP32[$vararg_ptr2>>2] = $21; //@line 276 "emscripten/mmman.cpp"
   __Z6AlertfPKcz(26136,$vararg_buffer); //@line 276 "emscripten/mmman.cpp"
   $0 = -1; //@line 277 "emscripten/mmman.cpp"
   $24 = $0; //@line 282 "emscripten/mmman.cpp"
   STACKTOP = sp;return ($24|0); //@line 282 "emscripten/mmman.cpp"
  }
 } while(0);
 $22 = $2; //@line 281 "emscripten/mmman.cpp"
 $23 = $3; //@line 281 "emscripten/mmman.cpp"
 HEAP32[$vararg_buffer3>>2] = $22; //@line 281 "emscripten/mmman.cpp"
 $vararg_ptr6 = (($vararg_buffer3) + 4|0); //@line 281 "emscripten/mmman.cpp"
 HEAP32[$vararg_ptr6>>2] = $23; //@line 281 "emscripten/mmman.cpp"
 __Z6AlertfPKcz(26176,$vararg_buffer3); //@line 281 "emscripten/mmman.cpp"
 $0 = 0; //@line 282 "emscripten/mmman.cpp"
 $24 = $0; //@line 282 "emscripten/mmman.cpp"
 STACKTOP = sp;return ($24|0); //@line 282 "emscripten/mmman.cpp"
}
function __ZN5MMMan4PlayEi($this,$num) {
 $this = $this|0;
 $num = $num|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bank = 0, $m = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = $this;
 $2 = $num;
 $3 = $1;
 $4 = $2; //@line 292 "emscripten/mmman.cpp"
 $5 = (__ZN5MMMan10SearchBankEi($3,$4)|0); //@line 292 "emscripten/mmman.cpp"
 $bank = $5; //@line 292 "emscripten/mmman.cpp"
 $6 = $bank; //@line 293 "emscripten/mmman.cpp"
 $7 = ($6|0)<(0); //@line 293 "emscripten/mmman.cpp"
 if ($7) {
  $0 = 1; //@line 293 "emscripten/mmman.cpp"
  $16 = $0; //@line 296 "emscripten/mmman.cpp"
  STACKTOP = sp;return ($16|0); //@line 296 "emscripten/mmman.cpp"
 }
 $8 = $bank; //@line 294 "emscripten/mmman.cpp"
 $9 = (($3) + 4|0); //@line 294 "emscripten/mmman.cpp"
 $10 = HEAP32[$9>>2]|0; //@line 294 "emscripten/mmman.cpp"
 $11 = (($10) + (($8*44)|0)|0); //@line 294 "emscripten/mmman.cpp"
 $m = $11; //@line 294 "emscripten/mmman.cpp"
 $12 = $m; //@line 295 "emscripten/mmman.cpp"
 $13 = HEAP32[$12>>2]|0; //@line 295 "emscripten/mmman.cpp"
 $14 = ($13|0)==(1); //@line 295 "emscripten/mmman.cpp"
 if ($14) {
  $15 = $m; //@line 295 "emscripten/mmman.cpp"
  __ZN5MMMan8PlayBankEP3MMM($3,$15); //@line 295 "emscripten/mmman.cpp"
 }
 $0 = 0; //@line 296 "emscripten/mmman.cpp"
 $16 = $0; //@line 296 "emscripten/mmman.cpp"
 STACKTOP = sp;return ($16|0); //@line 296 "emscripten/mmman.cpp"
}
function __ZN5MMMan6SetVolEii($this,$num,$vol) {
 $this = $this|0;
 $num = $num|0;
 $vol = $vol|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bank = 0, $flg = 0, $maxvol = 0.0, $mmm = 0, $myvol = 0.0, $vol1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = $this;
 $1 = $num;
 $2 = $vol;
 $3 = $0;
 $4 = $1; //@line 322 "emscripten/mmman.cpp"
 $5 = (__ZN5MMMan10SearchBankEi($3,$4)|0); //@line 322 "emscripten/mmman.cpp"
 $bank = $5; //@line 322 "emscripten/mmman.cpp"
 $6 = $bank; //@line 323 "emscripten/mmman.cpp"
 $7 = ($6|0)<(0); //@line 323 "emscripten/mmman.cpp"
 if ($7) {
  STACKTOP = sp;return; //@line 342 "emscripten/mmman.cpp"
 }
 $8 = $bank; //@line 325 "emscripten/mmman.cpp"
 $9 = (($3) + 4|0); //@line 325 "emscripten/mmman.cpp"
 $10 = HEAP32[$9>>2]|0; //@line 325 "emscripten/mmman.cpp"
 $11 = (($10) + (($8*44)|0)|0); //@line 325 "emscripten/mmman.cpp"
 $mmm = $11; //@line 325 "emscripten/mmman.cpp"
 $12 = $2; //@line 326 "emscripten/mmman.cpp"
 $13 = $mmm; //@line 326 "emscripten/mmman.cpp"
 $14 = (($13) + 24|0); //@line 326 "emscripten/mmman.cpp"
 HEAP32[$14>>2] = $12; //@line 326 "emscripten/mmman.cpp"
 $15 = $mmm; //@line 327 "emscripten/mmman.cpp"
 $16 = (($15) + 24|0); //@line 327 "emscripten/mmman.cpp"
 $17 = HEAP32[$16>>2]|0; //@line 327 "emscripten/mmman.cpp"
 $18 = ($17|0)>(0); //@line 327 "emscripten/mmman.cpp"
 if ($18) {
  $19 = $mmm; //@line 327 "emscripten/mmman.cpp"
  $20 = (($19) + 24|0); //@line 327 "emscripten/mmman.cpp"
  HEAP32[$20>>2] = 0; //@line 327 "emscripten/mmman.cpp"
 }
 $21 = $mmm; //@line 328 "emscripten/mmman.cpp"
 $22 = (($21) + 24|0); //@line 328 "emscripten/mmman.cpp"
 $23 = HEAP32[$22>>2]|0; //@line 328 "emscripten/mmman.cpp"
 $24 = ($23|0)<(-1000); //@line 328 "emscripten/mmman.cpp"
 if ($24) {
  $25 = $mmm; //@line 328 "emscripten/mmman.cpp"
  $26 = (($25) + 24|0); //@line 328 "emscripten/mmman.cpp"
  HEAP32[$26>>2] = -1000; //@line 328 "emscripten/mmman.cpp"
 }
 $27 = $mmm; //@line 330 "emscripten/mmman.cpp"
 $28 = HEAP32[$27>>2]|0; //@line 330 "emscripten/mmman.cpp"
 $flg = $28; //@line 330 "emscripten/mmman.cpp"
 $29 = $flg; //@line 331 "emscripten/mmman.cpp"
 if (!((($29|0) == 1))) {
  STACKTOP = sp;return; //@line 342 "emscripten/mmman.cpp"
 }
 $maxvol = 1000.0; //@line 336 "emscripten/mmman.cpp"
 $30 = $mmm; //@line 337 "emscripten/mmman.cpp"
 $31 = (($30) + 24|0); //@line 337 "emscripten/mmman.cpp"
 $32 = HEAP32[$31>>2]|0; //@line 337 "emscripten/mmman.cpp"
 $33 = (($32) + 1000)|0; //@line 337 "emscripten/mmman.cpp"
 $34 = (+($33|0)); //@line 337 "emscripten/mmman.cpp"
 $myvol = $34; //@line 337 "emscripten/mmman.cpp"
 $35 = $myvol; //@line 338 "emscripten/mmman.cpp"
 $36 = $35 / 1000.0; //@line 338 "emscripten/mmman.cpp"
 $myvol = $36; //@line 338 "emscripten/mmman.cpp"
 $37 = $myvol; //@line 339 "emscripten/mmman.cpp"
 $38 = 128.0 * $37; //@line 339 "emscripten/mmman.cpp"
 $39 = (~~(($38))); //@line 339 "emscripten/mmman.cpp"
 $vol1 = $39; //@line 339 "emscripten/mmman.cpp"
 $40 = $mmm; //@line 340 "emscripten/mmman.cpp"
 $41 = (($40) + 36|0); //@line 340 "emscripten/mmman.cpp"
 $42 = HEAP32[$41>>2]|0; //@line 340 "emscripten/mmman.cpp"
 $43 = $vol1; //@line 340 "emscripten/mmman.cpp"
 (_Mix_Volume(($42|0),($43|0))|0); //@line 340 "emscripten/mmman.cpp"
 STACKTOP = sp;return; //@line 342 "emscripten/mmman.cpp"
}
function __ZN5MMMan6SetPanEii($this,$num,$pan) {
 $this = $this|0;
 $num = $num|0;
 $pan = $pan|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $num;
 $2 = $pan;
 STACKTOP = sp;return; //@line 350 "emscripten/mmman.cpp"
}
function __ZN5MMMan9GetStatusEii($this,$num,$infoid) {
 $this = $this|0;
 $num = $num|0;
 $infoid = $infoid|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bank = 0, $flg = 0, $mmm = 0, $res = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = $this;
 $2 = $num;
 $3 = $infoid;
 $4 = $1;
 $5 = $2; //@line 358 "emscripten/mmman.cpp"
 $6 = (__ZN5MMMan10SearchBankEi($4,$5)|0); //@line 358 "emscripten/mmman.cpp"
 $bank = $6; //@line 358 "emscripten/mmman.cpp"
 $7 = $bank; //@line 359 "emscripten/mmman.cpp"
 $8 = ($7|0)<(0); //@line 359 "emscripten/mmman.cpp"
 if ($8) {
  $0 = 0; //@line 359 "emscripten/mmman.cpp"
  $34 = $0; //@line 382 "emscripten/mmman.cpp"
  STACKTOP = sp;return ($34|0); //@line 382 "emscripten/mmman.cpp"
 }
 $9 = $bank; //@line 361 "emscripten/mmman.cpp"
 $10 = (($4) + 4|0); //@line 361 "emscripten/mmman.cpp"
 $11 = HEAP32[$10>>2]|0; //@line 361 "emscripten/mmman.cpp"
 $12 = (($11) + (($9*44)|0)|0); //@line 361 "emscripten/mmman.cpp"
 $mmm = $12; //@line 361 "emscripten/mmman.cpp"
 $13 = $mmm; //@line 362 "emscripten/mmman.cpp"
 $14 = HEAP32[$13>>2]|0; //@line 362 "emscripten/mmman.cpp"
 $15 = ($14|0)!=(1); //@line 362 "emscripten/mmman.cpp"
 if ($15) {
  $0 = 0; //@line 362 "emscripten/mmman.cpp"
  $34 = $0; //@line 382 "emscripten/mmman.cpp"
  STACKTOP = sp;return ($34|0); //@line 382 "emscripten/mmman.cpp"
 }
 $16 = $mmm; //@line 363 "emscripten/mmman.cpp"
 $17 = HEAP32[$16>>2]|0; //@line 363 "emscripten/mmman.cpp"
 $flg = $17; //@line 363 "emscripten/mmman.cpp"
 $res = 0; //@line 364 "emscripten/mmman.cpp"
 $18 = $3; //@line 365 "emscripten/mmman.cpp"
 if ((($18|0) == 0)) {
  $19 = $mmm; //@line 367 "emscripten/mmman.cpp"
  $20 = (($19) + 4|0); //@line 367 "emscripten/mmman.cpp"
  $21 = HEAP32[$20>>2]|0; //@line 367 "emscripten/mmman.cpp"
  $res = $21; //@line 367 "emscripten/mmman.cpp"
 } else if ((($18|0) == 1)) {
  $22 = $mmm; //@line 370 "emscripten/mmman.cpp"
  $23 = (($22) + 24|0); //@line 370 "emscripten/mmman.cpp"
  $24 = HEAP32[$23>>2]|0; //@line 370 "emscripten/mmman.cpp"
  $res = $24; //@line 370 "emscripten/mmman.cpp"
 } else if ((($18|0) == 16)) {
  $28 = $mmm; //@line 376 "emscripten/mmman.cpp"
  $29 = (($28) + 36|0); //@line 376 "emscripten/mmman.cpp"
  $30 = HEAP32[$29>>2]|0; //@line 376 "emscripten/mmman.cpp"
  $31 = (_Mix_Playing(($30|0))|0); //@line 376 "emscripten/mmman.cpp"
  $32 = ($31|0)!=(0); //@line 376 "emscripten/mmman.cpp"
  if ($32) {
   $res = 1; //@line 377 "emscripten/mmman.cpp"
  }
 } else if ((($18|0) == 2)) {
  $25 = $mmm; //@line 373 "emscripten/mmman.cpp"
  $26 = (($25) + 28|0); //@line 373 "emscripten/mmman.cpp"
  $27 = HEAP32[$26>>2]|0; //@line 373 "emscripten/mmman.cpp"
  $res = $27; //@line 373 "emscripten/mmman.cpp"
 }
 $33 = $res; //@line 381 "emscripten/mmman.cpp"
 $0 = $33; //@line 381 "emscripten/mmman.cpp"
 $34 = $0; //@line 382 "emscripten/mmman.cpp"
 STACKTOP = sp;return ($34|0); //@line 382 "emscripten/mmman.cpp"
}
function __ZN5MMMan8StopBankEi($this,$num) {
 $this = $this|0;
 $num = $num|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bank = 0, $m = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $num;
 $2 = $0;
 $3 = $1; //@line 391 "emscripten/mmman.cpp"
 $4 = ($3|0)<(0); //@line 391 "emscripten/mmman.cpp"
 if ($4) {
  __ZN5MMMan4StopEv($2); //@line 392 "emscripten/mmman.cpp"
  STACKTOP = sp;return; //@line 398 "emscripten/mmman.cpp"
 }
 $5 = $1; //@line 395 "emscripten/mmman.cpp"
 $6 = (__ZN5MMMan10SearchBankEi($2,$5)|0); //@line 395 "emscripten/mmman.cpp"
 $bank = $6; //@line 395 "emscripten/mmman.cpp"
 $7 = $bank; //@line 396 "emscripten/mmman.cpp"
 $8 = ($7|0)<(0); //@line 396 "emscripten/mmman.cpp"
 if ($8) {
  STACKTOP = sp;return; //@line 398 "emscripten/mmman.cpp"
 } else {
  $9 = $bank; //@line 397 "emscripten/mmman.cpp"
  $10 = (($2) + 4|0); //@line 397 "emscripten/mmman.cpp"
  $11 = HEAP32[$10>>2]|0; //@line 397 "emscripten/mmman.cpp"
  $12 = (($11) + (($9*44)|0)|0); //@line 397 "emscripten/mmman.cpp"
  $m = $12; //@line 397 "emscripten/mmman.cpp"
  $13 = $m; //@line 398 "emscripten/mmman.cpp"
  __ZN5MMMan8StopBankEP3MMM($2,$13); //@line 398 "emscripten/mmman.cpp"
  STACKTOP = sp;return; //@line 398 "emscripten/mmman.cpp"
 }
}
function __ZL1ePKc($str) {
 $str = $str|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $str;
 $1 = $0; //@line 174 "emscripten/stb_image.c"
 HEAP32[26208>>2] = $1; //@line 174 "emscripten/stb_image.c"
 STACKTOP = sp;return 0; //@line 175 "emscripten/stb_image.c"
}
function __ZL14stbi_load_mainP4stbiPiS1_S1_i($s,$x,$y,$comp,$req_comp) {
 $s = $s|0;
 $x = $x|0;
 $y = $y|0;
 $comp = $comp|0;
 $req_comp = $req_comp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $hdr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = $s;
 $2 = $x;
 $3 = $y;
 $4 = $comp;
 $5 = $req_comp;
 $6 = $1; //@line 205 "emscripten/stb_image.c"
 $7 = (__ZL14stbi_jpeg_testP4stbi($6)|0); //@line 205 "emscripten/stb_image.c"
 $8 = ($7|0)!=(0); //@line 205 "emscripten/stb_image.c"
 if ($8) {
  $9 = $1; //@line 205 "emscripten/stb_image.c"
  $10 = $2; //@line 205 "emscripten/stb_image.c"
  $11 = $3; //@line 205 "emscripten/stb_image.c"
  $12 = $4; //@line 205 "emscripten/stb_image.c"
  $13 = $5; //@line 205 "emscripten/stb_image.c"
  $14 = (__ZL14stbi_jpeg_loadP4stbiPiS1_S1_i($9,$10,$11,$12,$13)|0); //@line 205 "emscripten/stb_image.c"
  $0 = $14; //@line 205 "emscripten/stb_image.c"
  $94 = $0; //@line 223 "emscripten/stb_image.c"
  STACKTOP = sp;return ($94|0); //@line 223 "emscripten/stb_image.c"
 }
 $15 = $1; //@line 206 "emscripten/stb_image.c"
 $16 = (__ZL13stbi_png_testP4stbi($15)|0); //@line 206 "emscripten/stb_image.c"
 $17 = ($16|0)!=(0); //@line 206 "emscripten/stb_image.c"
 if ($17) {
  $18 = $1; //@line 206 "emscripten/stb_image.c"
  $19 = $2; //@line 206 "emscripten/stb_image.c"
  $20 = $3; //@line 206 "emscripten/stb_image.c"
  $21 = $4; //@line 206 "emscripten/stb_image.c"
  $22 = $5; //@line 206 "emscripten/stb_image.c"
  $23 = (__ZL13stbi_png_loadP4stbiPiS1_S1_i($18,$19,$20,$21,$22)|0); //@line 206 "emscripten/stb_image.c"
  $0 = $23; //@line 206 "emscripten/stb_image.c"
  $94 = $0; //@line 223 "emscripten/stb_image.c"
  STACKTOP = sp;return ($94|0); //@line 223 "emscripten/stb_image.c"
 }
 $24 = $1; //@line 207 "emscripten/stb_image.c"
 $25 = (__ZL13stbi_bmp_testP4stbi($24)|0); //@line 207 "emscripten/stb_image.c"
 $26 = ($25|0)!=(0); //@line 207 "emscripten/stb_image.c"
 if ($26) {
  $27 = $1; //@line 207 "emscripten/stb_image.c"
  $28 = $2; //@line 207 "emscripten/stb_image.c"
  $29 = $3; //@line 207 "emscripten/stb_image.c"
  $30 = $4; //@line 207 "emscripten/stb_image.c"
  $31 = $5; //@line 207 "emscripten/stb_image.c"
  $32 = (__ZL13stbi_bmp_loadP4stbiPiS1_S1_i($27,$28,$29,$30,$31)|0); //@line 207 "emscripten/stb_image.c"
  $0 = $32; //@line 207 "emscripten/stb_image.c"
  $94 = $0; //@line 223 "emscripten/stb_image.c"
  STACKTOP = sp;return ($94|0); //@line 223 "emscripten/stb_image.c"
 }
 $33 = $1; //@line 208 "emscripten/stb_image.c"
 $34 = (__ZL13stbi_gif_testP4stbi($33)|0); //@line 208 "emscripten/stb_image.c"
 $35 = ($34|0)!=(0); //@line 208 "emscripten/stb_image.c"
 if ($35) {
  $36 = $1; //@line 208 "emscripten/stb_image.c"
  $37 = $2; //@line 208 "emscripten/stb_image.c"
  $38 = $3; //@line 208 "emscripten/stb_image.c"
  $39 = $4; //@line 208 "emscripten/stb_image.c"
  $40 = $5; //@line 208 "emscripten/stb_image.c"
  $41 = (__ZL13stbi_gif_loadP4stbiPiS1_S1_i($36,$37,$38,$39,$40)|0); //@line 208 "emscripten/stb_image.c"
  $0 = $41; //@line 208 "emscripten/stb_image.c"
  $94 = $0; //@line 223 "emscripten/stb_image.c"
  STACKTOP = sp;return ($94|0); //@line 223 "emscripten/stb_image.c"
 }
 $42 = $1; //@line 209 "emscripten/stb_image.c"
 $43 = (__ZL13stbi_psd_testP4stbi($42)|0); //@line 209 "emscripten/stb_image.c"
 $44 = ($43|0)!=(0); //@line 209 "emscripten/stb_image.c"
 if ($44) {
  $45 = $1; //@line 209 "emscripten/stb_image.c"
  $46 = $2; //@line 209 "emscripten/stb_image.c"
  $47 = $3; //@line 209 "emscripten/stb_image.c"
  $48 = $4; //@line 209 "emscripten/stb_image.c"
  $49 = $5; //@line 209 "emscripten/stb_image.c"
  $50 = (__ZL13stbi_psd_loadP4stbiPiS1_S1_i($45,$46,$47,$48,$49)|0); //@line 209 "emscripten/stb_image.c"
  $0 = $50; //@line 209 "emscripten/stb_image.c"
  $94 = $0; //@line 223 "emscripten/stb_image.c"
  STACKTOP = sp;return ($94|0); //@line 223 "emscripten/stb_image.c"
 }
 $51 = $1; //@line 210 "emscripten/stb_image.c"
 $52 = (__ZL13stbi_pic_testP4stbi($51)|0); //@line 210 "emscripten/stb_image.c"
 $53 = ($52|0)!=(0); //@line 210 "emscripten/stb_image.c"
 if ($53) {
  $54 = $1; //@line 210 "emscripten/stb_image.c"
  $55 = $2; //@line 210 "emscripten/stb_image.c"
  $56 = $3; //@line 210 "emscripten/stb_image.c"
  $57 = $4; //@line 210 "emscripten/stb_image.c"
  $58 = $5; //@line 210 "emscripten/stb_image.c"
  $59 = (__ZL13stbi_pic_loadP4stbiPiS1_S1_i($54,$55,$56,$57,$58)|0); //@line 210 "emscripten/stb_image.c"
  $0 = $59; //@line 210 "emscripten/stb_image.c"
  $94 = $0; //@line 223 "emscripten/stb_image.c"
  STACKTOP = sp;return ($94|0); //@line 223 "emscripten/stb_image.c"
 }
 $60 = $1; //@line 213 "emscripten/stb_image.c"
 $61 = (__ZL13stbi_hdr_testP4stbi($60)|0); //@line 213 "emscripten/stb_image.c"
 $62 = ($61|0)!=(0); //@line 213 "emscripten/stb_image.c"
 if ($62) {
  $63 = $1; //@line 214 "emscripten/stb_image.c"
  $64 = $2; //@line 214 "emscripten/stb_image.c"
  $65 = $3; //@line 214 "emscripten/stb_image.c"
  $66 = $4; //@line 214 "emscripten/stb_image.c"
  $67 = $5; //@line 214 "emscripten/stb_image.c"
  $68 = (__ZL13stbi_hdr_loadP4stbiPiS1_S1_i($63,$64,$65,$66,$67)|0); //@line 214 "emscripten/stb_image.c"
  $hdr = $68; //@line 214 "emscripten/stb_image.c"
  $69 = $hdr; //@line 215 "emscripten/stb_image.c"
  $70 = $2; //@line 215 "emscripten/stb_image.c"
  $71 = HEAP32[$70>>2]|0; //@line 215 "emscripten/stb_image.c"
  $72 = $3; //@line 215 "emscripten/stb_image.c"
  $73 = HEAP32[$72>>2]|0; //@line 215 "emscripten/stb_image.c"
  $74 = $5; //@line 215 "emscripten/stb_image.c"
  $75 = ($74|0)!=(0); //@line 215 "emscripten/stb_image.c"
  if ($75) {
   $76 = $5; //@line 215 "emscripten/stb_image.c"
   $79 = $76;
  } else {
   $77 = $4; //@line 215 "emscripten/stb_image.c"
   $78 = HEAP32[$77>>2]|0; //@line 215 "emscripten/stb_image.c"
   $79 = $78;
  }
  $80 = (__ZL10hdr_to_ldrPfiii($69,$71,$73,$79)|0); //@line 215 "emscripten/stb_image.c"
  $0 = $80; //@line 215 "emscripten/stb_image.c"
  $94 = $0; //@line 223 "emscripten/stb_image.c"
  STACKTOP = sp;return ($94|0); //@line 223 "emscripten/stb_image.c"
 } else {
  $81 = $1; //@line 220 "emscripten/stb_image.c"
  $82 = (__ZL13stbi_tga_testP4stbi($81)|0); //@line 220 "emscripten/stb_image.c"
  $83 = ($82|0)!=(0); //@line 220 "emscripten/stb_image.c"
  if ($83) {
   $84 = $1; //@line 221 "emscripten/stb_image.c"
   $85 = $2; //@line 221 "emscripten/stb_image.c"
   $86 = $3; //@line 221 "emscripten/stb_image.c"
   $87 = $4; //@line 221 "emscripten/stb_image.c"
   $88 = $5; //@line 221 "emscripten/stb_image.c"
   $89 = (__ZL13stbi_tga_loadP4stbiPiS1_S1_i($84,$85,$86,$87,$88)|0); //@line 221 "emscripten/stb_image.c"
   $0 = $89; //@line 221 "emscripten/stb_image.c"
   $94 = $0; //@line 223 "emscripten/stb_image.c"
   STACKTOP = sp;return ($94|0); //@line 223 "emscripten/stb_image.c"
  } else {
   $90 = (__ZL1ePKc(26216)|0); //@line 222 "emscripten/stb_image.c"
   $91 = ($90|0)!=(0); //@line 222 "emscripten/stb_image.c"
   $92 = $91 ? 0 : 0; //@line 222 "emscripten/stb_image.c"
   $93 = $92; //@line 222 "emscripten/stb_image.c"
   $0 = $93; //@line 222 "emscripten/stb_image.c"
   $94 = $0; //@line 223 "emscripten/stb_image.c"
   STACKTOP = sp;return ($94|0); //@line 223 "emscripten/stb_image.c"
  }
 }
 return 0|0;
}
function _stbi_load_from_memory($buffer,$len,$x,$y,$comp,$req_comp) {
 $buffer = $buffer|0;
 $len = $len|0;
 $x = $x|0;
 $y = $y|0;
 $comp = $comp|0;
 $req_comp = $req_comp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0;
 $s = sp + 20|0;
 $0 = $buffer;
 $1 = $len;
 $2 = $x;
 $3 = $y;
 $4 = $comp;
 $5 = $req_comp;
 $6 = $0; //@line 247 "emscripten/stb_image.c"
 $7 = $1; //@line 247 "emscripten/stb_image.c"
 __ZL9start_memP4stbiPKhi($s,$6,$7); //@line 247 "emscripten/stb_image.c"
 $8 = $2; //@line 248 "emscripten/stb_image.c"
 $9 = $3; //@line 248 "emscripten/stb_image.c"
 $10 = $4; //@line 248 "emscripten/stb_image.c"
 $11 = $5; //@line 248 "emscripten/stb_image.c"
 $12 = (__ZL14stbi_load_mainP4stbiPiS1_S1_i($s,$8,$9,$10,$11)|0); //@line 248 "emscripten/stb_image.c"
 STACKTOP = sp;return ($12|0); //@line 248 "emscripten/stb_image.c"
}
function __ZL9start_memP4stbiPKhi($s,$buffer,$len) {
 $s = $s|0;
 $buffer = $buffer|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $s;
 $1 = $buffer;
 $2 = $len;
 $3 = $0; //@line 84 "emscripten/stb_image.c"
 $4 = (($3) + 16|0); //@line 84 "emscripten/stb_image.c"
 HEAP32[$4>>2] = 0; //@line 84 "emscripten/stb_image.c"
 $5 = $0; //@line 85 "emscripten/stb_image.c"
 $6 = (($5) + 32|0); //@line 85 "emscripten/stb_image.c"
 HEAP32[$6>>2] = 0; //@line 85 "emscripten/stb_image.c"
 $7 = $1; //@line 86 "emscripten/stb_image.c"
 $8 = $0; //@line 86 "emscripten/stb_image.c"
 $9 = (($8) + 176|0); //@line 86 "emscripten/stb_image.c"
 HEAP32[$9>>2] = $7; //@line 86 "emscripten/stb_image.c"
 $10 = $0; //@line 86 "emscripten/stb_image.c"
 $11 = (($10) + 168|0); //@line 86 "emscripten/stb_image.c"
 HEAP32[$11>>2] = $7; //@line 86 "emscripten/stb_image.c"
 $12 = $1; //@line 87 "emscripten/stb_image.c"
 $13 = $2; //@line 87 "emscripten/stb_image.c"
 $14 = (($12) + ($13)|0); //@line 87 "emscripten/stb_image.c"
 $15 = $0; //@line 87 "emscripten/stb_image.c"
 $16 = (($15) + 172|0); //@line 87 "emscripten/stb_image.c"
 HEAP32[$16>>2] = $14; //@line 87 "emscripten/stb_image.c"
 STACKTOP = sp;return; //@line 88 "emscripten/stb_image.c"
}
function __ZL13stbi_hdr_testP4stbi($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $r = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $s;
 $1 = $0; //@line 3879 "emscripten/stb_image.c"
 $2 = (__ZL8hdr_testP4stbi($1)|0); //@line 3879 "emscripten/stb_image.c"
 $r = $2; //@line 3879 "emscripten/stb_image.c"
 $3 = $0; //@line 3880 "emscripten/stb_image.c"
 __ZL11stbi_rewindP4stbi($3); //@line 3880 "emscripten/stb_image.c"
 $4 = $r; //@line 3881 "emscripten/stb_image.c"
 STACKTOP = sp;return ($4|0); //@line 3881 "emscripten/stb_image.c"
}
function __ZL13stbi_hdr_loadP4stbiPiS1_S1_i($s,$x,$y,$comp,$req_comp) {
 $s = $s|0;
 $x = $x|0;
 $y = $y|0;
 $comp = $comp|0;
 $req_comp = $req_comp|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $s;
 $1 = $x;
 $2 = $y;
 $3 = $comp;
 $4 = $req_comp;
 $5 = $0; //@line 4047 "emscripten/stb_image.c"
 $6 = $1; //@line 4047 "emscripten/stb_image.c"
 $7 = $2; //@line 4047 "emscripten/stb_image.c"
 $8 = $3; //@line 4047 "emscripten/stb_image.c"
 $9 = $4; //@line 4047 "emscripten/stb_image.c"
 $10 = (__ZL8hdr_loadP4stbiPiS1_S1_i($5,$6,$7,$8,$9)|0); //@line 4047 "emscripten/stb_image.c"
 STACKTOP = sp;return ($10|0); //@line 4047 "emscripten/stb_image.c"
}
function __ZL7do_zlibP4zbufPciii($a,$obuf,$olen,$exp,$parse_header) {
 $a = $a|0;
 $obuf = $obuf|0;
 $olen = $olen|0;
 $exp = $exp|0;
 $parse_header = $parse_header|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $a;
 $1 = $obuf;
 $2 = $olen;
 $3 = $exp;
 $4 = $parse_header;
 $5 = $1; //@line 1964 "emscripten/stb_image.c"
 $6 = $0; //@line 1964 "emscripten/stb_image.c"
 $7 = (($6) + 20|0); //@line 1964 "emscripten/stb_image.c"
 HEAP32[$7>>2] = $5; //@line 1964 "emscripten/stb_image.c"
 $8 = $1; //@line 1965 "emscripten/stb_image.c"
 $9 = $0; //@line 1965 "emscripten/stb_image.c"
 $10 = (($9) + 16|0); //@line 1965 "emscripten/stb_image.c"
 HEAP32[$10>>2] = $8; //@line 1965 "emscripten/stb_image.c"
 $11 = $1; //@line 1966 "emscripten/stb_image.c"
 $12 = $2; //@line 1966 "emscripten/stb_image.c"
 $13 = (($11) + ($12)|0); //@line 1966 "emscripten/stb_image.c"
 $14 = $0; //@line 1966 "emscripten/stb_image.c"
 $15 = (($14) + 24|0); //@line 1966 "emscripten/stb_image.c"
 HEAP32[$15>>2] = $13; //@line 1966 "emscripten/stb_image.c"
 $16 = $3; //@line 1967 "emscripten/stb_image.c"
 $17 = $0; //@line 1967 "emscripten/stb_image.c"
 $18 = (($17) + 28|0); //@line 1967 "emscripten/stb_image.c"
 HEAP32[$18>>2] = $16; //@line 1967 "emscripten/stb_image.c"
 $19 = $0; //@line 1969 "emscripten/stb_image.c"
 $20 = $4; //@line 1969 "emscripten/stb_image.c"
 $21 = (__ZL10parse_zlibP4zbufi($19,$20)|0); //@line 1969 "emscripten/stb_image.c"
 STACKTOP = sp;return ($21|0); //@line 1969 "emscripten/stb_image.c"
}
function __Z44stbi_zlib_decode_malloc_guesssize_headerflagPKciiPii($buffer,$len,$initial_size,$outlen,$parse_header) {
 $buffer = $buffer|0;
 $len = $len|0;
 $initial_size = $initial_size|0;
 $outlen = $outlen|0;
 $parse_header = $parse_header|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4112|0;
 $a = sp + 24|0;
 $1 = $buffer;
 $2 = $len;
 $3 = $initial_size;
 $4 = $outlen;
 $5 = $parse_header;
 $6 = $3; //@line 1996 "emscripten/stb_image.c"
 $7 = (_malloc($6)|0); //@line 1996 "emscripten/stb_image.c"
 $p = $7; //@line 1996 "emscripten/stb_image.c"
 $8 = $p; //@line 1997 "emscripten/stb_image.c"
 $9 = ($8|0)==(0|0); //@line 1997 "emscripten/stb_image.c"
 if ($9) {
  $0 = 0; //@line 1997 "emscripten/stb_image.c"
  $34 = $0; //@line 2007 "emscripten/stb_image.c"
  STACKTOP = sp;return ($34|0); //@line 2007 "emscripten/stb_image.c"
 }
 $10 = $1; //@line 1998 "emscripten/stb_image.c"
 HEAP32[$a>>2] = $10; //@line 1998 "emscripten/stb_image.c"
 $11 = $1; //@line 1999 "emscripten/stb_image.c"
 $12 = $2; //@line 1999 "emscripten/stb_image.c"
 $13 = (($11) + ($12)|0); //@line 1999 "emscripten/stb_image.c"
 $14 = (($a) + 4|0); //@line 1999 "emscripten/stb_image.c"
 HEAP32[$14>>2] = $13; //@line 1999 "emscripten/stb_image.c"
 $15 = $p; //@line 2000 "emscripten/stb_image.c"
 $16 = $3; //@line 2000 "emscripten/stb_image.c"
 $17 = $5; //@line 2000 "emscripten/stb_image.c"
 $18 = (__ZL7do_zlibP4zbufPciii($a,$15,$16,1,$17)|0); //@line 2000 "emscripten/stb_image.c"
 $19 = ($18|0)!=(0); //@line 2000 "emscripten/stb_image.c"
 if (!($19)) {
  $32 = (($a) + 20|0); //@line 2004 "emscripten/stb_image.c"
  $33 = HEAP32[$32>>2]|0; //@line 2004 "emscripten/stb_image.c"
  _free($33); //@line 2004 "emscripten/stb_image.c"
  $0 = 0; //@line 2005 "emscripten/stb_image.c"
  $34 = $0; //@line 2007 "emscripten/stb_image.c"
  STACKTOP = sp;return ($34|0); //@line 2007 "emscripten/stb_image.c"
 }
 $20 = $4; //@line 2001 "emscripten/stb_image.c"
 $21 = ($20|0)!=(0|0); //@line 2001 "emscripten/stb_image.c"
 if ($21) {
  $22 = (($a) + 16|0); //@line 2001 "emscripten/stb_image.c"
  $23 = HEAP32[$22>>2]|0; //@line 2001 "emscripten/stb_image.c"
  $24 = (($a) + 20|0); //@line 2001 "emscripten/stb_image.c"
  $25 = HEAP32[$24>>2]|0; //@line 2001 "emscripten/stb_image.c"
  $26 = $23; //@line 2001 "emscripten/stb_image.c"
  $27 = $25; //@line 2001 "emscripten/stb_image.c"
  $28 = (($26) - ($27))|0; //@line 2001 "emscripten/stb_image.c"
  $29 = $4; //@line 2001 "emscripten/stb_image.c"
  HEAP32[$29>>2] = $28; //@line 2001 "emscripten/stb_image.c"
 }
 $30 = (($a) + 20|0); //@line 2002 "emscripten/stb_image.c"
 $31 = HEAP32[$30>>2]|0; //@line 2002 "emscripten/stb_image.c"
 $0 = $31; //@line 2002 "emscripten/stb_image.c"
 $34 = $0; //@line 2007 "emscripten/stb_image.c"
 STACKTOP = sp;return ($34|0); //@line 2007 "emscripten/stb_image.c"
}
function __ZL5get8uP4stbi($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $s;
 $1 = $0; //@line 423 "emscripten/stb_image.c"
 $2 = (__ZL4get8P4stbi($1)|0); //@line 423 "emscripten/stb_image.c"
 $3 = $2&255; //@line 423 "emscripten/stb_image.c"
 STACKTOP = sp;return ($3|0); //@line 423 "emscripten/stb_image.c"
}
function __ZL11stbi_rewindP4stbi($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $s;
 $1 = $0; //@line 139 "emscripten/stb_image.c"
 $2 = (($1) + 176|0); //@line 139 "emscripten/stb_image.c"
 $3 = HEAP32[$2>>2]|0; //@line 139 "emscripten/stb_image.c"
 $4 = $0; //@line 139 "emscripten/stb_image.c"
 $5 = (($4) + 168|0); //@line 139 "emscripten/stb_image.c"
 HEAP32[$5>>2] = $3; //@line 139 "emscripten/stb_image.c"
 STACKTOP = sp;return; //@line 140 "emscripten/stb_image.c"
}
function __ZL4skipP4stbii($s,$n) {
 $s = $s|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $blen = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $s;
 $1 = $n;
 $2 = $0; //@line 428 "emscripten/stb_image.c"
 $3 = (($2) + 16|0); //@line 428 "emscripten/stb_image.c"
 $4 = HEAP32[$3>>2]|0; //@line 428 "emscripten/stb_image.c"
 $5 = ($4|0)!=(0|0); //@line 428 "emscripten/stb_image.c"
 do {
  if ($5) {
   $6 = $0; //@line 429 "emscripten/stb_image.c"
   $7 = (($6) + 172|0); //@line 429 "emscripten/stb_image.c"
   $8 = HEAP32[$7>>2]|0; //@line 429 "emscripten/stb_image.c"
   $9 = $0; //@line 429 "emscripten/stb_image.c"
   $10 = (($9) + 168|0); //@line 429 "emscripten/stb_image.c"
   $11 = HEAP32[$10>>2]|0; //@line 429 "emscripten/stb_image.c"
   $12 = $8; //@line 429 "emscripten/stb_image.c"
   $13 = $11; //@line 429 "emscripten/stb_image.c"
   $14 = (($12) - ($13))|0; //@line 429 "emscripten/stb_image.c"
   $blen = $14; //@line 429 "emscripten/stb_image.c"
   $15 = $blen; //@line 430 "emscripten/stb_image.c"
   $16 = $1; //@line 430 "emscripten/stb_image.c"
   $17 = ($15|0)<($16|0); //@line 430 "emscripten/stb_image.c"
   if (!($17)) {
    break;
   }
   $18 = $0; //@line 431 "emscripten/stb_image.c"
   $19 = (($18) + 172|0); //@line 431 "emscripten/stb_image.c"
   $20 = HEAP32[$19>>2]|0; //@line 431 "emscripten/stb_image.c"
   $21 = $0; //@line 431 "emscripten/stb_image.c"
   $22 = (($21) + 168|0); //@line 431 "emscripten/stb_image.c"
   HEAP32[$22>>2] = $20; //@line 431 "emscripten/stb_image.c"
   $23 = $0; //@line 432 "emscripten/stb_image.c"
   $24 = (($23) + 16|0); //@line 432 "emscripten/stb_image.c"
   $25 = (($24) + 4|0); //@line 432 "emscripten/stb_image.c"
   $26 = HEAP32[$25>>2]|0; //@line 432 "emscripten/stb_image.c"
   $27 = $0; //@line 432 "emscripten/stb_image.c"
   $28 = (($27) + 28|0); //@line 432 "emscripten/stb_image.c"
   $29 = HEAP32[$28>>2]|0; //@line 432 "emscripten/stb_image.c"
   $30 = $1; //@line 432 "emscripten/stb_image.c"
   $31 = $blen; //@line 432 "emscripten/stb_image.c"
   $32 = (($30) - ($31))|0; //@line 432 "emscripten/stb_image.c"
   FUNCTION_TABLE_vii[$26 & 255]($29,$32); //@line 432 "emscripten/stb_image.c"
   STACKTOP = sp;return; //@line 436 "emscripten/stb_image.c"
  }
 } while(0);
 $33 = $1; //@line 436 "emscripten/stb_image.c"
 $34 = $0; //@line 436 "emscripten/stb_image.c"
 $35 = (($34) + 168|0); //@line 436 "emscripten/stb_image.c"
 $36 = HEAP32[$35>>2]|0; //@line 436 "emscripten/stb_image.c"
 $37 = (($36) + ($33)|0); //@line 436 "emscripten/stb_image.c"
 HEAP32[$35>>2] = $37; //@line 436 "emscripten/stb_image.c"
 STACKTOP = sp;return; //@line 436 "emscripten/stb_image.c"
}
function __ZL7get16leP4stbi($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $z = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $s;
 $1 = $0; //@line 477 "emscripten/stb_image.c"
 $2 = (__ZL4get8P4stbi($1)|0); //@line 477 "emscripten/stb_image.c"
 $z = $2; //@line 477 "emscripten/stb_image.c"
 $3 = $z; //@line 478 "emscripten/stb_image.c"
 $4 = $0; //@line 478 "emscripten/stb_image.c"
 $5 = (__ZL4get8P4stbi($4)|0); //@line 478 "emscripten/stb_image.c"
 $6 = $5 << 8; //@line 478 "emscripten/stb_image.c"
 $7 = (($3) + ($6))|0; //@line 478 "emscripten/stb_image.c"
 STACKTOP = sp;return ($7|0); //@line 478 "emscripten/stb_image.c"
}
function __ZL4get8P4stbi($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $s;
 $2 = $1; //@line 400 "emscripten/stb_image.c"
 $3 = (($2) + 168|0); //@line 400 "emscripten/stb_image.c"
 $4 = HEAP32[$3>>2]|0; //@line 400 "emscripten/stb_image.c"
 $5 = $1; //@line 400 "emscripten/stb_image.c"
 $6 = (($5) + 172|0); //@line 400 "emscripten/stb_image.c"
 $7 = HEAP32[$6>>2]|0; //@line 400 "emscripten/stb_image.c"
 $8 = ($4>>>0)<($7>>>0); //@line 400 "emscripten/stb_image.c"
 if ($8) {
  $9 = $1; //@line 401 "emscripten/stb_image.c"
  $10 = (($9) + 168|0); //@line 401 "emscripten/stb_image.c"
  $11 = HEAP32[$10>>2]|0; //@line 401 "emscripten/stb_image.c"
  $12 = (($11) + 1|0); //@line 401 "emscripten/stb_image.c"
  HEAP32[$10>>2] = $12; //@line 401 "emscripten/stb_image.c"
  $13 = HEAP8[$11>>0]|0; //@line 401 "emscripten/stb_image.c"
  $14 = $13&255; //@line 401 "emscripten/stb_image.c"
  $0 = $14; //@line 401 "emscripten/stb_image.c"
  $26 = $0; //@line 407 "emscripten/stb_image.c"
  STACKTOP = sp;return ($26|0); //@line 407 "emscripten/stb_image.c"
 }
 $15 = $1; //@line 402 "emscripten/stb_image.c"
 $16 = (($15) + 32|0); //@line 402 "emscripten/stb_image.c"
 $17 = HEAP32[$16>>2]|0; //@line 402 "emscripten/stb_image.c"
 $18 = ($17|0)!=(0); //@line 402 "emscripten/stb_image.c"
 if ($18) {
  $19 = $1; //@line 403 "emscripten/stb_image.c"
  __ZL13refill_bufferP4stbi($19); //@line 403 "emscripten/stb_image.c"
  $20 = $1; //@line 404 "emscripten/stb_image.c"
  $21 = (($20) + 168|0); //@line 404 "emscripten/stb_image.c"
  $22 = HEAP32[$21>>2]|0; //@line 404 "emscripten/stb_image.c"
  $23 = (($22) + 1|0); //@line 404 "emscripten/stb_image.c"
  HEAP32[$21>>2] = $23; //@line 404 "emscripten/stb_image.c"
  $24 = HEAP8[$22>>0]|0; //@line 404 "emscripten/stb_image.c"
  $25 = $24&255; //@line 404 "emscripten/stb_image.c"
  $0 = $25; //@line 404 "emscripten/stb_image.c"
  $26 = $0; //@line 407 "emscripten/stb_image.c"
  STACKTOP = sp;return ($26|0); //@line 407 "emscripten/stb_image.c"
 } else {
  $0 = 0; //@line 406 "emscripten/stb_image.c"
  $26 = $0; //@line 407 "emscripten/stb_image.c"
  STACKTOP = sp;return ($26|0); //@line 407 "emscripten/stb_image.c"
 }
 return 0|0;
}
function __ZL13refill_bufferP4stbi($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $s;
 $1 = $0; //@line 386 "emscripten/stb_image.c"
 $2 = (($1) + 16|0); //@line 386 "emscripten/stb_image.c"
 $3 = HEAP32[$2>>2]|0; //@line 386 "emscripten/stb_image.c"
 $4 = $0; //@line 386 "emscripten/stb_image.c"
 $5 = (($4) + 28|0); //@line 386 "emscripten/stb_image.c"
 $6 = HEAP32[$5>>2]|0; //@line 386 "emscripten/stb_image.c"
 $7 = $0; //@line 386 "emscripten/stb_image.c"
 $8 = (($7) + 40|0); //@line 386 "emscripten/stb_image.c"
 $9 = $0; //@line 386 "emscripten/stb_image.c"
 $10 = (($9) + 36|0); //@line 386 "emscripten/stb_image.c"
 $11 = HEAP32[$10>>2]|0; //@line 386 "emscripten/stb_image.c"
 $12 = (FUNCTION_TABLE_iiii[$3 & 255]($6,$8,$11)|0); //@line 386 "emscripten/stb_image.c"
 $n = $12; //@line 386 "emscripten/stb_image.c"
 $13 = $n; //@line 387 "emscripten/stb_image.c"
 $14 = ($13|0)==(0); //@line 387 "emscripten/stb_image.c"
 if ($14) {
  $15 = $0; //@line 389 "emscripten/stb_image.c"
  $16 = (($15) + 32|0); //@line 389 "emscripten/stb_image.c"
  HEAP32[$16>>2] = 0; //@line 389 "emscripten/stb_image.c"
  $17 = $0; //@line 390 "emscripten/stb_image.c"
  $18 = (($17) + 172|0); //@line 390 "emscripten/stb_image.c"
  $19 = HEAP32[$18>>2]|0; //@line 390 "emscripten/stb_image.c"
  $20 = (($19) + -1|0); //@line 390 "emscripten/stb_image.c"
  $21 = $0; //@line 390 "emscripten/stb_image.c"
  $22 = (($21) + 168|0); //@line 390 "emscripten/stb_image.c"
  HEAP32[$22>>2] = $20; //@line 390 "emscripten/stb_image.c"
  $23 = $0; //@line 391 "emscripten/stb_image.c"
  $24 = (($23) + 168|0); //@line 391 "emscripten/stb_image.c"
  $25 = HEAP32[$24>>2]|0; //@line 391 "emscripten/stb_image.c"
  HEAP8[$25>>0] = 0; //@line 391 "emscripten/stb_image.c"
  STACKTOP = sp;return; //@line 396 "emscripten/stb_image.c"
 } else {
  $26 = $0; //@line 393 "emscripten/stb_image.c"
  $27 = (($26) + 40|0); //@line 393 "emscripten/stb_image.c"
  $28 = $0; //@line 393 "emscripten/stb_image.c"
  $29 = (($28) + 168|0); //@line 393 "emscripten/stb_image.c"
  HEAP32[$29>>2] = $27; //@line 393 "emscripten/stb_image.c"
  $30 = $0; //@line 394 "emscripten/stb_image.c"
  $31 = (($30) + 40|0); //@line 394 "emscripten/stb_image.c"
  $32 = $n; //@line 394 "emscripten/stb_image.c"
  $33 = (($31) + ($32)|0); //@line 394 "emscripten/stb_image.c"
  $34 = $0; //@line 394 "emscripten/stb_image.c"
  $35 = (($34) + 172|0); //@line 394 "emscripten/stb_image.c"
  HEAP32[$35>>2] = $33; //@line 394 "emscripten/stb_image.c"
  STACKTOP = sp;return; //@line 396 "emscripten/stb_image.c"
 }
}
function __ZL12hdr_gettokenP4stbiPc($z,$buffer) {
 $z = $z|0;
 $buffer = $buffer|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, $len = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $z;
 $1 = $buffer;
 $len = 0; //@line 3887 "emscripten/stb_image.c"
 $c = 0; //@line 3888 "emscripten/stb_image.c"
 $2 = $0; //@line 3890 "emscripten/stb_image.c"
 $3 = (__ZL4get8P4stbi($2)|0); //@line 3890 "emscripten/stb_image.c"
 $4 = $3&255; //@line 3890 "emscripten/stb_image.c"
 $c = $4; //@line 3890 "emscripten/stb_image.c"
 while(1) {
  $5 = $0; //@line 3892 "emscripten/stb_image.c"
  $6 = (__ZL6at_eofP4stbi($5)|0); //@line 3892 "emscripten/stb_image.c"
  $7 = ($6|0)!=(0); //@line 3892 "emscripten/stb_image.c"
  if ($7) {
   $31 = 0;
  } else {
   $8 = $c; //@line 3892 "emscripten/stb_image.c"
   $9 = $8 << 24 >> 24; //@line 3892 "emscripten/stb_image.c"
   $10 = ($9|0)!=(10); //@line 3892 "emscripten/stb_image.c"
   $31 = $10;
  }
  if (!($31)) {
   label = 13;
   break;
  }
  $11 = $c; //@line 3893 "emscripten/stb_image.c"
  $12 = $len; //@line 3893 "emscripten/stb_image.c"
  $13 = (($12) + 1)|0; //@line 3893 "emscripten/stb_image.c"
  $len = $13; //@line 3893 "emscripten/stb_image.c"
  $14 = $1; //@line 3893 "emscripten/stb_image.c"
  $15 = (($14) + ($12)|0); //@line 3893 "emscripten/stb_image.c"
  HEAP8[$15>>0] = $11; //@line 3893 "emscripten/stb_image.c"
  $16 = $len; //@line 3894 "emscripten/stb_image.c"
  $17 = ($16|0)==(1023); //@line 3894 "emscripten/stb_image.c"
  if ($17) {
   break;
  }
  $24 = $0; //@line 3900 "emscripten/stb_image.c"
  $25 = (__ZL4get8P4stbi($24)|0); //@line 3900 "emscripten/stb_image.c"
  $26 = $25&255; //@line 3900 "emscripten/stb_image.c"
  $c = $26; //@line 3900 "emscripten/stb_image.c"
 }
 if ((label|0) == 13) {
  $27 = $len; //@line 3903 "emscripten/stb_image.c"
  $28 = $1; //@line 3903 "emscripten/stb_image.c"
  $29 = (($28) + ($27)|0); //@line 3903 "emscripten/stb_image.c"
  HEAP8[$29>>0] = 0; //@line 3903 "emscripten/stb_image.c"
  $30 = $1; //@line 3904 "emscripten/stb_image.c"
  STACKTOP = sp;return ($30|0); //@line 3904 "emscripten/stb_image.c"
 }
 while(1) {
  $18 = $0; //@line 3896 "emscripten/stb_image.c"
  $19 = (__ZL6at_eofP4stbi($18)|0); //@line 3896 "emscripten/stb_image.c"
  $20 = ($19|0)!=(0); //@line 3896 "emscripten/stb_image.c"
  if ($20) {
   $32 = 0;
  } else {
   $21 = $0; //@line 3896 "emscripten/stb_image.c"
   $22 = (__ZL4get8P4stbi($21)|0); //@line 3896 "emscripten/stb_image.c"
   $23 = ($22|0)!=(10); //@line 3896 "emscripten/stb_image.c"
   $32 = $23;
  }
  if (!($32)) {
   break;
  }
 }
 $27 = $len; //@line 3903 "emscripten/stb_image.c"
 $28 = $1; //@line 3903 "emscripten/stb_image.c"
 $29 = (($28) + ($27)|0); //@line 3903 "emscripten/stb_image.c"
 HEAP8[$29>>0] = 0; //@line 3903 "emscripten/stb_image.c"
 $30 = $1; //@line 3904 "emscripten/stb_image.c"
 STACKTOP = sp;return ($30|0); //@line 3904 "emscripten/stb_image.c"
}
function __ZL6at_eofP4stbi($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $s;
 $2 = $1; //@line 411 "emscripten/stb_image.c"
 $3 = (($2) + 16|0); //@line 411 "emscripten/stb_image.c"
 $4 = HEAP32[$3>>2]|0; //@line 411 "emscripten/stb_image.c"
 $5 = ($4|0)!=(0|0); //@line 411 "emscripten/stb_image.c"
 do {
  if ($5) {
   $6 = $1; //@line 412 "emscripten/stb_image.c"
   $7 = (($6) + 16|0); //@line 412 "emscripten/stb_image.c"
   $8 = (($7) + 8|0); //@line 412 "emscripten/stb_image.c"
   $9 = HEAP32[$8>>2]|0; //@line 412 "emscripten/stb_image.c"
   $10 = $1; //@line 412 "emscripten/stb_image.c"
   $11 = (($10) + 28|0); //@line 412 "emscripten/stb_image.c"
   $12 = HEAP32[$11>>2]|0; //@line 412 "emscripten/stb_image.c"
   $13 = (FUNCTION_TABLE_ii[$9 & 255]($12)|0); //@line 412 "emscripten/stb_image.c"
   $14 = ($13|0)!=(0); //@line 412 "emscripten/stb_image.c"
   if (!($14)) {
    $0 = 0; //@line 412 "emscripten/stb_image.c"
    $27 = $0; //@line 419 "emscripten/stb_image.c"
    STACKTOP = sp;return ($27|0); //@line 419 "emscripten/stb_image.c"
   }
   $15 = $1; //@line 415 "emscripten/stb_image.c"
   $16 = (($15) + 32|0); //@line 415 "emscripten/stb_image.c"
   $17 = HEAP32[$16>>2]|0; //@line 415 "emscripten/stb_image.c"
   $18 = ($17|0)==(0); //@line 415 "emscripten/stb_image.c"
   if (!($18)) {
    break;
   }
   $0 = 1; //@line 415 "emscripten/stb_image.c"
   $27 = $0; //@line 419 "emscripten/stb_image.c"
   STACKTOP = sp;return ($27|0); //@line 419 "emscripten/stb_image.c"
  }
 } while(0);
 $19 = $1; //@line 418 "emscripten/stb_image.c"
 $20 = (($19) + 168|0); //@line 418 "emscripten/stb_image.c"
 $21 = HEAP32[$20>>2]|0; //@line 418 "emscripten/stb_image.c"
 $22 = $1; //@line 418 "emscripten/stb_image.c"
 $23 = (($22) + 172|0); //@line 418 "emscripten/stb_image.c"
 $24 = HEAP32[$23>>2]|0; //@line 418 "emscripten/stb_image.c"
 $25 = ($21>>>0)>=($24>>>0); //@line 418 "emscripten/stb_image.c"
 $26 = $25&1; //@line 418 "emscripten/stb_image.c"
 $0 = $26; //@line 418 "emscripten/stb_image.c"
 $27 = $0; //@line 419 "emscripten/stb_image.c"
 STACKTOP = sp;return ($27|0); //@line 419 "emscripten/stb_image.c"
}
function __ZL5get16P4stbi($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $z = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $s;
 $1 = $0; //@line 465 "emscripten/stb_image.c"
 $2 = (__ZL4get8P4stbi($1)|0); //@line 465 "emscripten/stb_image.c"
 $z = $2; //@line 465 "emscripten/stb_image.c"
 $3 = $z; //@line 466 "emscripten/stb_image.c"
 $4 = $3 << 8; //@line 466 "emscripten/stb_image.c"
 $5 = $0; //@line 466 "emscripten/stb_image.c"
 $6 = (__ZL4get8P4stbi($5)|0); //@line 466 "emscripten/stb_image.c"
 $7 = (($4) + ($6))|0; //@line 466 "emscripten/stb_image.c"
 STACKTOP = sp;return ($7|0); //@line 466 "emscripten/stb_image.c"
}
function __ZL5get32P4stbi($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $z = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $s;
 $1 = $0; //@line 471 "emscripten/stb_image.c"
 $2 = (__ZL5get16P4stbi($1)|0); //@line 471 "emscripten/stb_image.c"
 $z = $2; //@line 471 "emscripten/stb_image.c"
 $3 = $z; //@line 472 "emscripten/stb_image.c"
 $4 = $3 << 16; //@line 472 "emscripten/stb_image.c"
 $5 = $0; //@line 472 "emscripten/stb_image.c"
 $6 = (__ZL5get16P4stbi($5)|0); //@line 472 "emscripten/stb_image.c"
 $7 = (($4) + ($6))|0; //@line 472 "emscripten/stb_image.c"
 STACKTOP = sp;return ($7|0); //@line 472 "emscripten/stb_image.c"
}
function __ZL7get32leP4stbi($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $z = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $s;
 $1 = $0; //@line 483 "emscripten/stb_image.c"
 $2 = (__ZL7get16leP4stbi($1)|0); //@line 483 "emscripten/stb_image.c"
 $z = $2; //@line 483 "emscripten/stb_image.c"
 $3 = $z; //@line 484 "emscripten/stb_image.c"
 $4 = $0; //@line 484 "emscripten/stb_image.c"
 $5 = (__ZL7get16leP4stbi($4)|0); //@line 484 "emscripten/stb_image.c"
 $6 = $5 << 16; //@line 484 "emscripten/stb_image.c"
 $7 = (($3) + ($6))|0; //@line 484 "emscripten/stb_image.c"
 STACKTOP = sp;return ($7|0); //@line 484 "emscripten/stb_image.c"
}
function __ZL15stbi_gif_headerP4stbiP15stbi_gif_structPii($s,$g,$comp,$is_info) {
 $s = $s|0;
 $g = $g|0;
 $comp = $comp|0;
 $is_info = $is_info|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = $s;
 $2 = $g;
 $3 = $comp;
 $4 = $is_info;
 $5 = $1; //@line 3577 "emscripten/stb_image.c"
 $6 = (__ZL4get8P4stbi($5)|0); //@line 3577 "emscripten/stb_image.c"
 $7 = ($6|0)!=(71); //@line 3577 "emscripten/stb_image.c"
 if (!($7)) {
  $8 = $1; //@line 3577 "emscripten/stb_image.c"
  $9 = (__ZL4get8P4stbi($8)|0); //@line 3577 "emscripten/stb_image.c"
  $10 = ($9|0)!=(73); //@line 3577 "emscripten/stb_image.c"
  if (!($10)) {
   $11 = $1; //@line 3577 "emscripten/stb_image.c"
   $12 = (__ZL4get8P4stbi($11)|0); //@line 3577 "emscripten/stb_image.c"
   $13 = ($12|0)!=(70); //@line 3577 "emscripten/stb_image.c"
   if (!($13)) {
    $14 = $1; //@line 3577 "emscripten/stb_image.c"
    $15 = (__ZL4get8P4stbi($14)|0); //@line 3577 "emscripten/stb_image.c"
    $16 = ($15|0)!=(56); //@line 3577 "emscripten/stb_image.c"
    if (!($16)) {
     $18 = $1; //@line 3580 "emscripten/stb_image.c"
     $19 = (__ZL5get8uP4stbi($18)|0); //@line 3580 "emscripten/stb_image.c"
     $version = $19; //@line 3580 "emscripten/stb_image.c"
     $20 = $version; //@line 3581 "emscripten/stb_image.c"
     $21 = $20&255; //@line 3581 "emscripten/stb_image.c"
     $22 = ($21|0)!=(55); //@line 3581 "emscripten/stb_image.c"
     if ($22) {
      $23 = $version; //@line 3581 "emscripten/stb_image.c"
      $24 = $23&255; //@line 3581 "emscripten/stb_image.c"
      $25 = ($24|0)!=(57); //@line 3581 "emscripten/stb_image.c"
      if ($25) {
       $26 = (__ZL1ePKc(26336)|0); //@line 3581 "emscripten/stb_image.c"
       $0 = $26; //@line 3581 "emscripten/stb_image.c"
       $70 = $0; //@line 3600 "emscripten/stb_image.c"
       STACKTOP = sp;return ($70|0); //@line 3600 "emscripten/stb_image.c"
      }
     }
     $27 = $1; //@line 3582 "emscripten/stb_image.c"
     $28 = (__ZL4get8P4stbi($27)|0); //@line 3582 "emscripten/stb_image.c"
     $29 = ($28|0)!=(97); //@line 3582 "emscripten/stb_image.c"
     if ($29) {
      $30 = (__ZL1ePKc(26336)|0); //@line 3582 "emscripten/stb_image.c"
      $0 = $30; //@line 3582 "emscripten/stb_image.c"
      $70 = $0; //@line 3600 "emscripten/stb_image.c"
      STACKTOP = sp;return ($70|0); //@line 3600 "emscripten/stb_image.c"
     }
     HEAP32[26208>>2] = 26344; //@line 3584 "emscripten/stb_image.c"
     $31 = $1; //@line 3585 "emscripten/stb_image.c"
     $32 = (__ZL7get16leP4stbi($31)|0); //@line 3585 "emscripten/stb_image.c"
     $33 = $2; //@line 3585 "emscripten/stb_image.c"
     HEAP32[$33>>2] = $32; //@line 3585 "emscripten/stb_image.c"
     $34 = $1; //@line 3586 "emscripten/stb_image.c"
     $35 = (__ZL7get16leP4stbi($34)|0); //@line 3586 "emscripten/stb_image.c"
     $36 = $2; //@line 3586 "emscripten/stb_image.c"
     $37 = (($36) + 4|0); //@line 3586 "emscripten/stb_image.c"
     HEAP32[$37>>2] = $35; //@line 3586 "emscripten/stb_image.c"
     $38 = $1; //@line 3587 "emscripten/stb_image.c"
     $39 = (__ZL4get8P4stbi($38)|0); //@line 3587 "emscripten/stb_image.c"
     $40 = $2; //@line 3587 "emscripten/stb_image.c"
     $41 = (($40) + 12|0); //@line 3587 "emscripten/stb_image.c"
     HEAP32[$41>>2] = $39; //@line 3587 "emscripten/stb_image.c"
     $42 = $1; //@line 3588 "emscripten/stb_image.c"
     $43 = (__ZL4get8P4stbi($42)|0); //@line 3588 "emscripten/stb_image.c"
     $44 = $2; //@line 3588 "emscripten/stb_image.c"
     $45 = (($44) + 16|0); //@line 3588 "emscripten/stb_image.c"
     HEAP32[$45>>2] = $43; //@line 3588 "emscripten/stb_image.c"
     $46 = $1; //@line 3589 "emscripten/stb_image.c"
     $47 = (__ZL4get8P4stbi($46)|0); //@line 3589 "emscripten/stb_image.c"
     $48 = $2; //@line 3589 "emscripten/stb_image.c"
     $49 = (($48) + 20|0); //@line 3589 "emscripten/stb_image.c"
     HEAP32[$49>>2] = $47; //@line 3589 "emscripten/stb_image.c"
     $50 = $2; //@line 3590 "emscripten/stb_image.c"
     $51 = (($50) + 24|0); //@line 3590 "emscripten/stb_image.c"
     HEAP32[$51>>2] = -1; //@line 3590 "emscripten/stb_image.c"
     $52 = $3; //@line 3592 "emscripten/stb_image.c"
     $53 = ($52|0)!=(0|0); //@line 3592 "emscripten/stb_image.c"
     if ($53) {
      $54 = $3; //@line 3592 "emscripten/stb_image.c"
      HEAP32[$54>>2] = 4; //@line 3592 "emscripten/stb_image.c"
     }
     $55 = $4; //@line 3594 "emscripten/stb_image.c"
     $56 = ($55|0)!=(0); //@line 3594 "emscripten/stb_image.c"
     if ($56) {
      $0 = 1; //@line 3594 "emscripten/stb_image.c"
      $70 = $0; //@line 3600 "emscripten/stb_image.c"
      STACKTOP = sp;return ($70|0); //@line 3600 "emscripten/stb_image.c"
     }
     $57 = $2; //@line 3596 "emscripten/stb_image.c"
     $58 = (($57) + 12|0); //@line 3596 "emscripten/stb_image.c"
     $59 = HEAP32[$58>>2]|0; //@line 3596 "emscripten/stb_image.c"
     $60 = $59 & 128; //@line 3596 "emscripten/stb_image.c"
     $61 = ($60|0)!=(0); //@line 3596 "emscripten/stb_image.c"
     if ($61) {
      $62 = $1; //@line 3597 "emscripten/stb_image.c"
      $63 = $2; //@line 3597 "emscripten/stb_image.c"
      $64 = (($63) + 32|0); //@line 3597 "emscripten/stb_image.c"
      $65 = $2; //@line 3597 "emscripten/stb_image.c"
      $66 = (($65) + 12|0); //@line 3597 "emscripten/stb_image.c"
      $67 = HEAP32[$66>>2]|0; //@line 3597 "emscripten/stb_image.c"
      $68 = $67 & 7; //@line 3597 "emscripten/stb_image.c"
      $69 = 2 << $68; //@line 3597 "emscripten/stb_image.c"
      __ZL25stbi_gif_parse_colortableP4stbiPA4_hii($62,$64,$69,-1); //@line 3597 "emscripten/stb_image.c"
     }
     $0 = 1; //@line 3599 "emscripten/stb_image.c"
     $70 = $0; //@line 3600 "emscripten/stb_image.c"
     STACKTOP = sp;return ($70|0); //@line 3600 "emscripten/stb_image.c"
    }
   }
  }
 }
 $17 = (__ZL1ePKc(26336)|0); //@line 3578 "emscripten/stb_image.c"
 $0 = $17; //@line 3578 "emscripten/stb_image.c"
 $70 = $0; //@line 3600 "emscripten/stb_image.c"
 STACKTOP = sp;return ($70|0); //@line 3600 "emscripten/stb_image.c"
}
function __ZL25stbi_gif_parse_colortableP4stbiPA4_hii($s,$pal,$num_entries,$transp) {
 $s = $s|0;
 $pal = $pal|0;
 $num_entries = $num_entries|0;
 $transp = $transp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $s;
 $1 = $pal;
 $2 = $num_entries;
 $3 = $transp;
 $i = 0; //@line 3566 "emscripten/stb_image.c"
 while(1) {
  $4 = $i; //@line 3566 "emscripten/stb_image.c"
  $5 = $2; //@line 3566 "emscripten/stb_image.c"
  $6 = ($4|0)<($5|0); //@line 3566 "emscripten/stb_image.c"
  if (!($6)) {
   break;
  }
  $7 = $0; //@line 3567 "emscripten/stb_image.c"
  $8 = (__ZL5get8uP4stbi($7)|0); //@line 3567 "emscripten/stb_image.c"
  $9 = $i; //@line 3567 "emscripten/stb_image.c"
  $10 = $1; //@line 3567 "emscripten/stb_image.c"
  $11 = (($10) + ($9<<2)|0); //@line 3567 "emscripten/stb_image.c"
  $12 = (($11) + 2|0); //@line 3567 "emscripten/stb_image.c"
  HEAP8[$12>>0] = $8; //@line 3567 "emscripten/stb_image.c"
  $13 = $0; //@line 3568 "emscripten/stb_image.c"
  $14 = (__ZL5get8uP4stbi($13)|0); //@line 3568 "emscripten/stb_image.c"
  $15 = $i; //@line 3568 "emscripten/stb_image.c"
  $16 = $1; //@line 3568 "emscripten/stb_image.c"
  $17 = (($16) + ($15<<2)|0); //@line 3568 "emscripten/stb_image.c"
  $18 = (($17) + 1|0); //@line 3568 "emscripten/stb_image.c"
  HEAP8[$18>>0] = $14; //@line 3568 "emscripten/stb_image.c"
  $19 = $0; //@line 3569 "emscripten/stb_image.c"
  $20 = (__ZL5get8uP4stbi($19)|0); //@line 3569 "emscripten/stb_image.c"
  $21 = $i; //@line 3569 "emscripten/stb_image.c"
  $22 = $1; //@line 3569 "emscripten/stb_image.c"
  $23 = (($22) + ($21<<2)|0); //@line 3569 "emscripten/stb_image.c"
  HEAP8[$23>>0] = $20; //@line 3569 "emscripten/stb_image.c"
  $24 = $3; //@line 3570 "emscripten/stb_image.c"
  $25 = ($24|0)!=(0); //@line 3570 "emscripten/stb_image.c"
  $26 = $25 ? 0 : 255; //@line 3570 "emscripten/stb_image.c"
  $27 = $26&255; //@line 3570 "emscripten/stb_image.c"
  $28 = $i; //@line 3570 "emscripten/stb_image.c"
  $29 = $1; //@line 3570 "emscripten/stb_image.c"
  $30 = (($29) + ($28<<2)|0); //@line 3570 "emscripten/stb_image.c"
  $31 = (($30) + 3|0); //@line 3570 "emscripten/stb_image.c"
  HEAP8[$31>>0] = $27; //@line 3570 "emscripten/stb_image.c"
  $32 = $i; //@line 3566 "emscripten/stb_image.c"
  $33 = (($32) + 1)|0; //@line 3566 "emscripten/stb_image.c"
  $i = $33; //@line 3566 "emscripten/stb_image.c"
 }
 STACKTOP = sp;return; //@line 3572 "emscripten/stb_image.c"
}
function __ZL14parse_png_fileP3pngii($z,$scan,$req_comp) {
 $z = $z|0;
 $scan = $scan|0;
 $req_comp = $req_comp|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c = 0, $color = 0, $comp = 0, $depth = 0, $filter = 0, $first = 0, $has_trans = 0, $i = 0, $idata_limit = 0, $interlace = 0, $ioff = 0;
 var $iphone = 0, $k = 0, $p = 0, $pal_img_n = 0, $pal_len = 0, $palette = 0, $raw_len = 0, $s = 0, $tc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1120|0;
 $palette = sp + 88|0;
 $tc = sp + 1114|0;
 $c = sp + 16|0;
 $raw_len = sp + 48|0;
 $1 = $z;
 $2 = $scan;
 $3 = $req_comp;
 $pal_img_n = 0; //@line 2348 "emscripten/stb_image.c"
 $has_trans = 0; //@line 2349 "emscripten/stb_image.c"
 $ioff = 0; //@line 2350 "emscripten/stb_image.c"
 $idata_limit = 0; //@line 2350 "emscripten/stb_image.c"
 $pal_len = 0; //@line 2350 "emscripten/stb_image.c"
 $first = 1; //@line 2351 "emscripten/stb_image.c"
 $interlace = 0; //@line 2351 "emscripten/stb_image.c"
 $iphone = 0; //@line 2351 "emscripten/stb_image.c"
 $4 = $1; //@line 2352 "emscripten/stb_image.c"
 $5 = HEAP32[$4>>2]|0; //@line 2352 "emscripten/stb_image.c"
 $s = $5; //@line 2352 "emscripten/stb_image.c"
 $6 = $1; //@line 2354 "emscripten/stb_image.c"
 $7 = (($6) + 8|0); //@line 2354 "emscripten/stb_image.c"
 HEAP32[$7>>2] = 0; //@line 2354 "emscripten/stb_image.c"
 $8 = $1; //@line 2355 "emscripten/stb_image.c"
 $9 = (($8) + 4|0); //@line 2355 "emscripten/stb_image.c"
 HEAP32[$9>>2] = 0; //@line 2355 "emscripten/stb_image.c"
 $10 = $1; //@line 2356 "emscripten/stb_image.c"
 $11 = (($10) + 12|0); //@line 2356 "emscripten/stb_image.c"
 HEAP32[$11>>2] = 0; //@line 2356 "emscripten/stb_image.c"
 $12 = $s; //@line 2358 "emscripten/stb_image.c"
 $13 = (__ZL16check_png_headerP4stbi($12)|0); //@line 2358 "emscripten/stb_image.c"
 $14 = ($13|0)!=(0); //@line 2358 "emscripten/stb_image.c"
 if (!($14)) {
  $0 = 0; //@line 2358 "emscripten/stb_image.c"
  $408 = $0; //@line 2497 "emscripten/stb_image.c"
  STACKTOP = sp;return ($408|0); //@line 2497 "emscripten/stb_image.c"
 }
 $15 = $2; //@line 2360 "emscripten/stb_image.c"
 $16 = ($15|0)==(1); //@line 2360 "emscripten/stb_image.c"
 if ($16) {
  $0 = 1; //@line 2360 "emscripten/stb_image.c"
  $408 = $0; //@line 2497 "emscripten/stb_image.c"
  STACKTOP = sp;return ($408|0); //@line 2497 "emscripten/stb_image.c"
 }
 while(1) {
  $17 = $s; //@line 2363 "emscripten/stb_image.c"
  __ZL16get_chunk_headerP4stbi($c,$17); //@line 2363 "emscripten/stb_image.c"
  $18 = (($c) + 4|0); //@line 2364 "emscripten/stb_image.c"
  $19 = HEAP32[$18>>2]|0; //@line 2364 "emscripten/stb_image.c"
  if ((($19|0) == 1951551059)) {
   $162 = $first; //@line 2412 "emscripten/stb_image.c"
   $163 = ($162|0)!=(0); //@line 2412 "emscripten/stb_image.c"
   if ($163) {
    label = 56;
    break;
   }
   $165 = $1; //@line 2413 "emscripten/stb_image.c"
   $166 = (($165) + 4|0); //@line 2413 "emscripten/stb_image.c"
   $167 = HEAP32[$166>>2]|0; //@line 2413 "emscripten/stb_image.c"
   $168 = ($167|0)!=(0|0); //@line 2413 "emscripten/stb_image.c"
   if ($168) {
    label = 58;
    break;
   }
   $170 = $pal_img_n; //@line 2414 "emscripten/stb_image.c"
   $171 = ($170<<24>>24)!=(0); //@line 2414 "emscripten/stb_image.c"
   if ($171) {
    $172 = $2; //@line 2415 "emscripten/stb_image.c"
    $173 = ($172|0)==(2); //@line 2415 "emscripten/stb_image.c"
    if ($173) {
     label = 61;
     break;
    }
    $176 = $pal_len; //@line 2416 "emscripten/stb_image.c"
    $177 = ($176|0)==(0); //@line 2416 "emscripten/stb_image.c"
    if ($177) {
     label = 63;
     break;
    }
    $179 = HEAP32[$c>>2]|0; //@line 2417 "emscripten/stb_image.c"
    $180 = $pal_len; //@line 2417 "emscripten/stb_image.c"
    $181 = ($179>>>0)>($180>>>0); //@line 2417 "emscripten/stb_image.c"
    if ($181) {
     label = 65;
     break;
    }
    $pal_img_n = 4; //@line 2418 "emscripten/stb_image.c"
    $i = 0; //@line 2419 "emscripten/stb_image.c"
    while(1) {
     $183 = $i; //@line 2419 "emscripten/stb_image.c"
     $184 = HEAP32[$c>>2]|0; //@line 2419 "emscripten/stb_image.c"
     $185 = ($183>>>0)<($184>>>0); //@line 2419 "emscripten/stb_image.c"
     if (!($185)) {
      break;
     }
     $186 = $s; //@line 2420 "emscripten/stb_image.c"
     $187 = (__ZL5get8uP4stbi($186)|0); //@line 2420 "emscripten/stb_image.c"
     $188 = $i; //@line 2420 "emscripten/stb_image.c"
     $189 = $188<<2; //@line 2420 "emscripten/stb_image.c"
     $190 = (($189) + 3)|0; //@line 2420 "emscripten/stb_image.c"
     $191 = (($palette) + ($190)|0); //@line 2420 "emscripten/stb_image.c"
     HEAP8[$191>>0] = $187; //@line 2420 "emscripten/stb_image.c"
     $192 = $i; //@line 2419 "emscripten/stb_image.c"
     $193 = (($192) + 1)|0; //@line 2419 "emscripten/stb_image.c"
     $i = $193; //@line 2419 "emscripten/stb_image.c"
    }
   } else {
    $194 = $s; //@line 2422 "emscripten/stb_image.c"
    $195 = (($194) + 8|0); //@line 2422 "emscripten/stb_image.c"
    $196 = HEAP32[$195>>2]|0; //@line 2422 "emscripten/stb_image.c"
    $197 = $196 & 1; //@line 2422 "emscripten/stb_image.c"
    $198 = ($197|0)!=(0); //@line 2422 "emscripten/stb_image.c"
    if (!($198)) {
     label = 72;
     break;
    }
    $200 = HEAP32[$c>>2]|0; //@line 2423 "emscripten/stb_image.c"
    $201 = $s; //@line 2423 "emscripten/stb_image.c"
    $202 = (($201) + 8|0); //@line 2423 "emscripten/stb_image.c"
    $203 = HEAP32[$202>>2]|0; //@line 2423 "emscripten/stb_image.c"
    $204 = $203<<1; //@line 2423 "emscripten/stb_image.c"
    $205 = ($200|0)!=($204|0); //@line 2423 "emscripten/stb_image.c"
    if ($205) {
     label = 74;
     break;
    }
    $has_trans = 1; //@line 2424 "emscripten/stb_image.c"
    $k = 0; //@line 2425 "emscripten/stb_image.c"
    while(1) {
     $207 = $k; //@line 2425 "emscripten/stb_image.c"
     $208 = $s; //@line 2425 "emscripten/stb_image.c"
     $209 = (($208) + 8|0); //@line 2425 "emscripten/stb_image.c"
     $210 = HEAP32[$209>>2]|0; //@line 2425 "emscripten/stb_image.c"
     $211 = ($207|0)<($210|0); //@line 2425 "emscripten/stb_image.c"
     if (!($211)) {
      break;
     }
     $212 = $s; //@line 2426 "emscripten/stb_image.c"
     $213 = (__ZL5get16P4stbi($212)|0); //@line 2426 "emscripten/stb_image.c"
     $214 = $213&255; //@line 2426 "emscripten/stb_image.c"
     $215 = $k; //@line 2426 "emscripten/stb_image.c"
     $216 = (($tc) + ($215)|0); //@line 2426 "emscripten/stb_image.c"
     HEAP8[$216>>0] = $214; //@line 2426 "emscripten/stb_image.c"
     $217 = $k; //@line 2425 "emscripten/stb_image.c"
     $218 = (($217) + 1)|0; //@line 2425 "emscripten/stb_image.c"
     $k = $218; //@line 2425 "emscripten/stb_image.c"
    }
   }
  } else if ((($19|0) == 1229472850)) {
   $23 = $first; //@line 2371 "emscripten/stb_image.c"
   $24 = ($23|0)!=(0); //@line 2371 "emscripten/stb_image.c"
   if (!($24)) {
    label = 9;
    break;
   }
   $first = 0; //@line 2372 "emscripten/stb_image.c"
   $26 = HEAP32[$c>>2]|0; //@line 2373 "emscripten/stb_image.c"
   $27 = ($26|0)!=(13); //@line 2373 "emscripten/stb_image.c"
   if ($27) {
    label = 11;
    break;
   }
   $29 = $s; //@line 2374 "emscripten/stb_image.c"
   $30 = (__ZL5get32P4stbi($29)|0); //@line 2374 "emscripten/stb_image.c"
   $31 = $s; //@line 2374 "emscripten/stb_image.c"
   HEAP32[$31>>2] = $30; //@line 2374 "emscripten/stb_image.c"
   $32 = $s; //@line 2374 "emscripten/stb_image.c"
   $33 = HEAP32[$32>>2]|0; //@line 2374 "emscripten/stb_image.c"
   $34 = ($33>>>0)>(16777216); //@line 2374 "emscripten/stb_image.c"
   if ($34) {
    label = 13;
    break;
   }
   $36 = $s; //@line 2375 "emscripten/stb_image.c"
   $37 = (__ZL5get32P4stbi($36)|0); //@line 2375 "emscripten/stb_image.c"
   $38 = $s; //@line 2375 "emscripten/stb_image.c"
   $39 = (($38) + 4|0); //@line 2375 "emscripten/stb_image.c"
   HEAP32[$39>>2] = $37; //@line 2375 "emscripten/stb_image.c"
   $40 = $s; //@line 2375 "emscripten/stb_image.c"
   $41 = (($40) + 4|0); //@line 2375 "emscripten/stb_image.c"
   $42 = HEAP32[$41>>2]|0; //@line 2375 "emscripten/stb_image.c"
   $43 = ($42>>>0)>(16777216); //@line 2375 "emscripten/stb_image.c"
   if ($43) {
    label = 15;
    break;
   }
   $45 = $s; //@line 2376 "emscripten/stb_image.c"
   $46 = (__ZL4get8P4stbi($45)|0); //@line 2376 "emscripten/stb_image.c"
   $depth = $46; //@line 2376 "emscripten/stb_image.c"
   $47 = $depth; //@line 2376 "emscripten/stb_image.c"
   $48 = ($47|0)!=(8); //@line 2376 "emscripten/stb_image.c"
   if ($48) {
    label = 17;
    break;
   }
   $50 = $s; //@line 2377 "emscripten/stb_image.c"
   $51 = (__ZL4get8P4stbi($50)|0); //@line 2377 "emscripten/stb_image.c"
   $color = $51; //@line 2377 "emscripten/stb_image.c"
   $52 = $color; //@line 2377 "emscripten/stb_image.c"
   $53 = ($52|0)>(6); //@line 2377 "emscripten/stb_image.c"
   if ($53) {
    label = 19;
    break;
   }
   $55 = $color; //@line 2378 "emscripten/stb_image.c"
   $56 = ($55|0)==(3); //@line 2378 "emscripten/stb_image.c"
   if ($56) {
    $pal_img_n = 3; //@line 2378 "emscripten/stb_image.c"
   } else {
    $57 = $color; //@line 2378 "emscripten/stb_image.c"
    $58 = $57 & 1; //@line 2378 "emscripten/stb_image.c"
    $59 = ($58|0)!=(0); //@line 2378 "emscripten/stb_image.c"
    if ($59) {
     label = 23;
     break;
    }
   }
   $61 = $s; //@line 2379 "emscripten/stb_image.c"
   $62 = (__ZL4get8P4stbi($61)|0); //@line 2379 "emscripten/stb_image.c"
   $comp = $62; //@line 2379 "emscripten/stb_image.c"
   $63 = $comp; //@line 2379 "emscripten/stb_image.c"
   $64 = ($63|0)!=(0); //@line 2379 "emscripten/stb_image.c"
   if ($64) {
    label = 26;
    break;
   }
   $66 = $s; //@line 2380 "emscripten/stb_image.c"
   $67 = (__ZL4get8P4stbi($66)|0); //@line 2380 "emscripten/stb_image.c"
   $filter = $67; //@line 2380 "emscripten/stb_image.c"
   $68 = $filter; //@line 2380 "emscripten/stb_image.c"
   $69 = ($68|0)!=(0); //@line 2380 "emscripten/stb_image.c"
   if ($69) {
    label = 28;
    break;
   }
   $71 = $s; //@line 2381 "emscripten/stb_image.c"
   $72 = (__ZL4get8P4stbi($71)|0); //@line 2381 "emscripten/stb_image.c"
   $interlace = $72; //@line 2381 "emscripten/stb_image.c"
   $73 = $interlace; //@line 2381 "emscripten/stb_image.c"
   $74 = ($73|0)>(1); //@line 2381 "emscripten/stb_image.c"
   if ($74) {
    label = 30;
    break;
   }
   $76 = $s; //@line 2382 "emscripten/stb_image.c"
   $77 = HEAP32[$76>>2]|0; //@line 2382 "emscripten/stb_image.c"
   $78 = ($77|0)!=(0); //@line 2382 "emscripten/stb_image.c"
   if (!($78)) {
    label = 33;
    break;
   }
   $79 = $s; //@line 2382 "emscripten/stb_image.c"
   $80 = (($79) + 4|0); //@line 2382 "emscripten/stb_image.c"
   $81 = HEAP32[$80>>2]|0; //@line 2382 "emscripten/stb_image.c"
   $82 = ($81|0)!=(0); //@line 2382 "emscripten/stb_image.c"
   if (!($82)) {
    label = 33;
    break;
   }
   $84 = $pal_img_n; //@line 2383 "emscripten/stb_image.c"
   $85 = ($84<<24>>24)!=(0); //@line 2383 "emscripten/stb_image.c"
   if ($85) {
    $111 = $s; //@line 2390 "emscripten/stb_image.c"
    $112 = (($111) + 8|0); //@line 2390 "emscripten/stb_image.c"
    HEAP32[$112>>2] = 1; //@line 2390 "emscripten/stb_image.c"
    $113 = $s; //@line 2391 "emscripten/stb_image.c"
    $114 = HEAP32[$113>>2]|0; //@line 2391 "emscripten/stb_image.c"
    $115 = (1073741824 / ($114>>>0))&-1; //@line 2391 "emscripten/stb_image.c"
    $116 = (($115>>>0) / 4)&-1; //@line 2391 "emscripten/stb_image.c"
    $117 = $s; //@line 2391 "emscripten/stb_image.c"
    $118 = (($117) + 4|0); //@line 2391 "emscripten/stb_image.c"
    $119 = HEAP32[$118>>2]|0; //@line 2391 "emscripten/stb_image.c"
    $120 = ($116>>>0)<($119>>>0); //@line 2391 "emscripten/stb_image.c"
    if ($120) {
     label = 41;
     break;
    }
   } else {
    $86 = $color; //@line 2384 "emscripten/stb_image.c"
    $87 = $86 & 2; //@line 2384 "emscripten/stb_image.c"
    $88 = ($87|0)!=(0); //@line 2384 "emscripten/stb_image.c"
    $89 = $88 ? 3 : 1; //@line 2384 "emscripten/stb_image.c"
    $90 = $color; //@line 2384 "emscripten/stb_image.c"
    $91 = $90 & 4; //@line 2384 "emscripten/stb_image.c"
    $92 = ($91|0)!=(0); //@line 2384 "emscripten/stb_image.c"
    $93 = $92 ? 1 : 0; //@line 2384 "emscripten/stb_image.c"
    $94 = (($89) + ($93))|0; //@line 2384 "emscripten/stb_image.c"
    $95 = $s; //@line 2384 "emscripten/stb_image.c"
    $96 = (($95) + 8|0); //@line 2384 "emscripten/stb_image.c"
    HEAP32[$96>>2] = $94; //@line 2384 "emscripten/stb_image.c"
    $97 = $s; //@line 2385 "emscripten/stb_image.c"
    $98 = HEAP32[$97>>2]|0; //@line 2385 "emscripten/stb_image.c"
    $99 = (1073741824 / ($98>>>0))&-1; //@line 2385 "emscripten/stb_image.c"
    $100 = $s; //@line 2385 "emscripten/stb_image.c"
    $101 = (($100) + 8|0); //@line 2385 "emscripten/stb_image.c"
    $102 = HEAP32[$101>>2]|0; //@line 2385 "emscripten/stb_image.c"
    $103 = (($99>>>0) / ($102>>>0))&-1; //@line 2385 "emscripten/stb_image.c"
    $104 = $s; //@line 2385 "emscripten/stb_image.c"
    $105 = (($104) + 4|0); //@line 2385 "emscripten/stb_image.c"
    $106 = HEAP32[$105>>2]|0; //@line 2385 "emscripten/stb_image.c"
    $107 = ($103>>>0)<($106>>>0); //@line 2385 "emscripten/stb_image.c"
    if ($107) {
     label = 36;
     break;
    }
    $109 = $2; //@line 2386 "emscripten/stb_image.c"
    $110 = ($109|0)==(2); //@line 2386 "emscripten/stb_image.c"
    if ($110) {
     label = 38;
     break;
    }
   }
  } else if ((($19|0) == 1130840649)) {
   $20 = HEAP32[26272>>2]|0; //@line 2366 "emscripten/stb_image.c"
   $iphone = $20; //@line 2366 "emscripten/stb_image.c"
   $21 = $s; //@line 2367 "emscripten/stb_image.c"
   $22 = HEAP32[$c>>2]|0; //@line 2367 "emscripten/stb_image.c"
   __ZL4skipP4stbii($21,$22); //@line 2367 "emscripten/stb_image.c"
  } else if ((($19|0) == 1347179589)) {
   $122 = $first; //@line 2398 "emscripten/stb_image.c"
   $123 = ($122|0)!=(0); //@line 2398 "emscripten/stb_image.c"
   if ($123) {
    label = 45;
    break;
   }
   $125 = HEAP32[$c>>2]|0; //@line 2399 "emscripten/stb_image.c"
   $126 = ($125>>>0)>(768); //@line 2399 "emscripten/stb_image.c"
   if ($126) {
    label = 47;
    break;
   }
   $128 = HEAP32[$c>>2]|0; //@line 2400 "emscripten/stb_image.c"
   $129 = (($128>>>0) / 3)&-1; //@line 2400 "emscripten/stb_image.c"
   $pal_len = $129; //@line 2400 "emscripten/stb_image.c"
   $130 = $pal_len; //@line 2401 "emscripten/stb_image.c"
   $131 = ($130*3)|0; //@line 2401 "emscripten/stb_image.c"
   $132 = HEAP32[$c>>2]|0; //@line 2401 "emscripten/stb_image.c"
   $133 = ($131|0)!=($132|0); //@line 2401 "emscripten/stb_image.c"
   if ($133) {
    label = 49;
    break;
   }
   $i = 0; //@line 2402 "emscripten/stb_image.c"
   while(1) {
    $135 = $i; //@line 2402 "emscripten/stb_image.c"
    $136 = $pal_len; //@line 2402 "emscripten/stb_image.c"
    $137 = ($135>>>0)<($136>>>0); //@line 2402 "emscripten/stb_image.c"
    if (!($137)) {
     break;
    }
    $138 = $s; //@line 2403 "emscripten/stb_image.c"
    $139 = (__ZL5get8uP4stbi($138)|0); //@line 2403 "emscripten/stb_image.c"
    $140 = $i; //@line 2403 "emscripten/stb_image.c"
    $141 = $140<<2; //@line 2403 "emscripten/stb_image.c"
    $142 = (($141) + 0)|0; //@line 2403 "emscripten/stb_image.c"
    $143 = (($palette) + ($142)|0); //@line 2403 "emscripten/stb_image.c"
    HEAP8[$143>>0] = $139; //@line 2403 "emscripten/stb_image.c"
    $144 = $s; //@line 2404 "emscripten/stb_image.c"
    $145 = (__ZL5get8uP4stbi($144)|0); //@line 2404 "emscripten/stb_image.c"
    $146 = $i; //@line 2404 "emscripten/stb_image.c"
    $147 = $146<<2; //@line 2404 "emscripten/stb_image.c"
    $148 = (($147) + 1)|0; //@line 2404 "emscripten/stb_image.c"
    $149 = (($palette) + ($148)|0); //@line 2404 "emscripten/stb_image.c"
    HEAP8[$149>>0] = $145; //@line 2404 "emscripten/stb_image.c"
    $150 = $s; //@line 2405 "emscripten/stb_image.c"
    $151 = (__ZL5get8uP4stbi($150)|0); //@line 2405 "emscripten/stb_image.c"
    $152 = $i; //@line 2405 "emscripten/stb_image.c"
    $153 = $152<<2; //@line 2405 "emscripten/stb_image.c"
    $154 = (($153) + 2)|0; //@line 2405 "emscripten/stb_image.c"
    $155 = (($palette) + ($154)|0); //@line 2405 "emscripten/stb_image.c"
    HEAP8[$155>>0] = $151; //@line 2405 "emscripten/stb_image.c"
    $156 = $i; //@line 2406 "emscripten/stb_image.c"
    $157 = $156<<2; //@line 2406 "emscripten/stb_image.c"
    $158 = (($157) + 3)|0; //@line 2406 "emscripten/stb_image.c"
    $159 = (($palette) + ($158)|0); //@line 2406 "emscripten/stb_image.c"
    HEAP8[$159>>0] = -1; //@line 2406 "emscripten/stb_image.c"
    $160 = $i; //@line 2402 "emscripten/stb_image.c"
    $161 = (($160) + 1)|0; //@line 2402 "emscripten/stb_image.c"
    $i = $161; //@line 2402 "emscripten/stb_image.c"
   }
  } else if ((($19|0) == 1229278788)) {
   label = 103;
   break;
  } else if ((($19|0) == 1229209940)) {
   $219 = $first; //@line 2432 "emscripten/stb_image.c"
   $220 = ($219|0)!=(0); //@line 2432 "emscripten/stb_image.c"
   if ($220) {
    label = 82;
    break;
   }
   $222 = $pal_img_n; //@line 2433 "emscripten/stb_image.c"
   $223 = ($222<<24>>24)!=(0); //@line 2433 "emscripten/stb_image.c"
   if ($223) {
    $224 = $pal_len; //@line 2433 "emscripten/stb_image.c"
    $225 = ($224|0)!=(0); //@line 2433 "emscripten/stb_image.c"
    if (!($225)) {
     label = 85;
     break;
    }
   }
   $227 = $2; //@line 2434 "emscripten/stb_image.c"
   $228 = ($227|0)==(2); //@line 2434 "emscripten/stb_image.c"
   if ($228) {
    label = 87;
    break;
   }
   $233 = $ioff; //@line 2435 "emscripten/stb_image.c"
   $234 = HEAP32[$c>>2]|0; //@line 2435 "emscripten/stb_image.c"
   $235 = (($233) + ($234))|0; //@line 2435 "emscripten/stb_image.c"
   $236 = $idata_limit; //@line 2435 "emscripten/stb_image.c"
   $237 = ($235>>>0)>($236>>>0); //@line 2435 "emscripten/stb_image.c"
   if ($237) {
    $238 = $idata_limit; //@line 2437 "emscripten/stb_image.c"
    $239 = ($238|0)==(0); //@line 2437 "emscripten/stb_image.c"
    if ($239) {
     $240 = HEAP32[$c>>2]|0; //@line 2437 "emscripten/stb_image.c"
     $241 = ($240>>>0)>(4096); //@line 2437 "emscripten/stb_image.c"
     if ($241) {
      $242 = HEAP32[$c>>2]|0; //@line 2437 "emscripten/stb_image.c"
      $243 = $242;
     } else {
      $243 = 4096;
     }
     $idata_limit = $243; //@line 2437 "emscripten/stb_image.c"
    }
    while(1) {
     $244 = $ioff; //@line 2438 "emscripten/stb_image.c"
     $245 = HEAP32[$c>>2]|0; //@line 2438 "emscripten/stb_image.c"
     $246 = (($244) + ($245))|0; //@line 2438 "emscripten/stb_image.c"
     $247 = $idata_limit; //@line 2438 "emscripten/stb_image.c"
     $248 = ($246>>>0)>($247>>>0); //@line 2438 "emscripten/stb_image.c"
     if (!($248)) {
      break;
     }
     $249 = $idata_limit; //@line 2439 "emscripten/stb_image.c"
     $250 = $249<<1; //@line 2439 "emscripten/stb_image.c"
     $idata_limit = $250; //@line 2439 "emscripten/stb_image.c"
    }
    $251 = $1; //@line 2440 "emscripten/stb_image.c"
    $252 = (($251) + 4|0); //@line 2440 "emscripten/stb_image.c"
    $253 = HEAP32[$252>>2]|0; //@line 2440 "emscripten/stb_image.c"
    $254 = $idata_limit; //@line 2440 "emscripten/stb_image.c"
    $255 = (_realloc($253,$254)|0); //@line 2440 "emscripten/stb_image.c"
    $p = $255; //@line 2440 "emscripten/stb_image.c"
    $256 = $p; //@line 2440 "emscripten/stb_image.c"
    $257 = ($256|0)==(0|0); //@line 2440 "emscripten/stb_image.c"
    if ($257) {
     label = 98;
     break;
    }
    $259 = $p; //@line 2441 "emscripten/stb_image.c"
    $260 = $1; //@line 2441 "emscripten/stb_image.c"
    $261 = (($260) + 4|0); //@line 2441 "emscripten/stb_image.c"
    HEAP32[$261>>2] = $259; //@line 2441 "emscripten/stb_image.c"
   }
   $262 = $s; //@line 2443 "emscripten/stb_image.c"
   $263 = $1; //@line 2443 "emscripten/stb_image.c"
   $264 = (($263) + 4|0); //@line 2443 "emscripten/stb_image.c"
   $265 = HEAP32[$264>>2]|0; //@line 2443 "emscripten/stb_image.c"
   $266 = $ioff; //@line 2443 "emscripten/stb_image.c"
   $267 = (($265) + ($266)|0); //@line 2443 "emscripten/stb_image.c"
   $268 = HEAP32[$c>>2]|0; //@line 2443 "emscripten/stb_image.c"
   $269 = (__ZL4getnP4stbiPhi($262,$267,$268)|0); //@line 2443 "emscripten/stb_image.c"
   $270 = ($269|0)!=(0); //@line 2443 "emscripten/stb_image.c"
   if (!($270)) {
    label = 101;
    break;
   }
   $272 = HEAP32[$c>>2]|0; //@line 2444 "emscripten/stb_image.c"
   $273 = $ioff; //@line 2444 "emscripten/stb_image.c"
   $274 = (($273) + ($272))|0; //@line 2444 "emscripten/stb_image.c"
   $ioff = $274; //@line 2444 "emscripten/stb_image.c"
  } else {
   $381 = $first; //@line 2479 "emscripten/stb_image.c"
   $382 = ($381|0)!=(0); //@line 2479 "emscripten/stb_image.c"
   if ($382) {
    label = 134;
    break;
   }
   $384 = (($c) + 4|0); //@line 2480 "emscripten/stb_image.c"
   $385 = HEAP32[$384>>2]|0; //@line 2480 "emscripten/stb_image.c"
   $386 = $385 & 536870912; //@line 2480 "emscripten/stb_image.c"
   $387 = ($386|0)==(0); //@line 2480 "emscripten/stb_image.c"
   if ($387) {
    label = 136;
    break;
   }
   $405 = $s; //@line 2491 "emscripten/stb_image.c"
   $406 = HEAP32[$c>>2]|0; //@line 2491 "emscripten/stb_image.c"
   __ZL4skipP4stbii($405,$406); //@line 2491 "emscripten/stb_image.c"
  }
  $407 = $s; //@line 2495 "emscripten/stb_image.c"
  (__ZL5get32P4stbi($407)|0); //@line 2495 "emscripten/stb_image.c"
 }
 switch (label|0) {
  case 9: {
   $25 = (__ZL1ePKc(26352)|0); //@line 2371 "emscripten/stb_image.c"
   $0 = $25; //@line 2371 "emscripten/stb_image.c"
   $408 = $0; //@line 2497 "emscripten/stb_image.c"
   STACKTOP = sp;return ($408|0); //@line 2497 "emscripten/stb_image.c"
   break;
  }
  case 11: {
   $28 = (__ZL1ePKc(26368)|0); //@line 2373 "emscripten/stb_image.c"
   $0 = $28; //@line 2373 "emscripten/stb_image.c"
   $408 = $0; //@line 2497 "emscripten/stb_image.c"
   STACKTOP = sp;return ($408|0); //@line 2497 "emscripten/stb_image.c"
   break;
  }
  case 13: {
   $35 = (__ZL1ePKc(26384)|0); //@line 2374 "emscripten/stb_image.c"
   $0 = $35; //@line 2374 "emscripten/stb_image.c"
   $408 = $0; //@line 2497 "emscripten/stb_image.c"
   STACKTOP = sp;return ($408|0); //@line 2497 "emscripten/stb_image.c"
   break;
  }
  case 15: {
   $44 = (__ZL1ePKc(26384)|0); //@line 2375 "emscripten/stb_image.c"
   $0 = $44; //@line 2375 "emscripten/stb_image.c"
   $408 = $0; //@line 2497 "emscripten/stb_image.c"
   STACKTOP = sp;return ($408|0); //@line 2497 "emscripten/stb_image.c"
   break;
  }
  case 17: {
   $49 = (__ZL1ePKc(26400)|0); //@line 2376 "emscripten/stb_image.c"
   $0 = $49; //@line 2376 "emscripten/stb_image.c"
   $408 = $0; //@line 2497 "emscripten/stb_image.c"
   STACKTOP = sp;return ($408|0); //@line 2497 "emscripten/stb_image.c"
   break;
  }
  case 19: {
   $54 = (__ZL1ePKc(26416)|0); //@line 2377 "emscripten/stb_image.c"
   $0 = $54; //@line 2377 "emscripten/stb_image.c"
   $408 = $0; //@line 2497 "emscripten/stb_image.c"
   STACKTOP = sp;return ($408|0); //@line 2497 "emscripten/stb_image.c"
   break;
  }
  case 23: {
   $60 = (__ZL1ePKc(26416)|0); //@line 2378 "emscripten/stb_image.c"
   $0 = $60; //@line 2378 "emscripten/stb_image.c"
   $408 = $0; //@line 2497 "emscripten/stb_image.c"
   STACKTOP = sp;return ($408|0); //@line 2497 "emscripten/stb_image.c"
   break;
  }
  case 26: {
   $65 = (__ZL1ePKc(26432)|0); //@line 2379 "emscripten/stb_image.c"
   $0 = $65; //@line 2379 "emscripten/stb_image.c"
   $408 = $0; //@line 2497 "emscripten/stb_image.c"
   STACKTOP = sp;return ($408|0); //@line 2497 "emscripten/stb_image.c"
   break;
  }
  case 28: {
   $70 = (__ZL1ePKc(26448)|0); //@line 2380 "emscripten/stb_image.c"
   $0 = $70; //@line 2380 "emscripten/stb_image.c"
   $408 = $0; //@line 2497 "emscripten/stb_image.c"
   STACKTOP = sp;return ($408|0); //@line 2497 "emscripten/stb_image.c"
   break;
  }
  case 30: {
   $75 = (__ZL1ePKc(26472)|0); //@line 2381 "emscripten/stb_image.c"
   $0 = $75; //@line 2381 "emscripten/stb_image.c"
   $408 = $0; //@line 2497 "emscripten/stb_image.c"
   STACKTOP = sp;return ($408|0); //@line 2497 "emscripten/stb_image.c"
   break;
  }
  case 33: {
   $83 = (__ZL1ePKc(26496)|0); //@line 2382 "emscripten/stb_image.c"
   $0 = $83; //@line 2382 "emscripten/stb_image.c"
   $408 = $0; //@line 2497 "emscripten/stb_image.c"
   STACKTOP = sp;return ($408|0); //@line 2497 "emscripten/stb_image.c"
   break;
  }
  case 36: {
   $108 = (__ZL1ePKc(26384)|0); //@line 2385 "emscripten/stb_image.c"
   $0 = $108; //@line 2385 "emscripten/stb_image.c"
   $408 = $0; //@line 2497 "emscripten/stb_image.c"
   STACKTOP = sp;return ($408|0); //@line 2497 "emscripten/stb_image.c"
   break;
  }
  case 38: {
   $0 = 1; //@line 2386 "emscripten/stb_image.c"
   $408 = $0; //@line 2497 "emscripten/stb_image.c"
   STACKTOP = sp;return ($408|0); //@line 2497 "emscripten/stb_image.c"
   break;
  }
  case 41: {
   $121 = (__ZL1ePKc(26384)|0); //@line 2391 "emscripten/stb_image.c"
   $0 = $121; //@line 2391 "emscripten/stb_image.c"
   $408 = $0; //@line 2497 "emscripten/stb_image.c"
   STACKTOP = sp;return ($408|0); //@line 2497 "emscripten/stb_image.c"
   break;
  }
  case 45: {
   $124 = (__ZL1ePKc(26512)|0); //@line 2398 "emscripten/stb_image.c"
   $0 = $124; //@line 2398 "emscripten/stb_image.c"
   $408 = $0; //@line 2497 "emscripten/stb_image.c"
   STACKTOP = sp;return ($408|0); //@line 2497 "emscripten/stb_image.c"
   break;
  }
  case 47: {
   $127 = (__ZL1ePKc(26528)|0); //@line 2399 "emscripten/stb_image.c"
   $0 = $127; //@line 2399 "emscripten/stb_image.c"
   $408 = $0; //@line 2497 "emscripten/stb_image.c"
   STACKTOP = sp;return ($408|0); //@line 2497 "emscripten/stb_image.c"
   break;
  }
  case 49: {
   $134 = (__ZL1ePKc(26528)|0); //@line 2401 "emscripten/stb_image.c"
   $0 = $134; //@line 2401 "emscripten/stb_image.c"
   $408 = $0; //@line 2497 "emscripten/stb_image.c"
   STACKTOP = sp;return ($408|0); //@line 2497 "emscripten/stb_image.c"
   break;
  }
  case 56: {
   $164 = (__ZL1ePKc(26512)|0); //@line 2412 "emscripten/stb_image.c"
   $0 = $164; //@line 2412 "emscripten/stb_image.c"
   $408 = $0; //@line 2497 "emscripten/stb_image.c"
   STACKTOP = sp;return ($408|0); //@line 2497 "emscripten/stb_image.c"
   break;
  }
  case 58: {
   $169 = (__ZL1ePKc(26544)|0); //@line 2413 "emscripten/stb_image.c"
   $0 = $169; //@line 2413 "emscripten/stb_image.c"
   $408 = $0; //@line 2497 "emscripten/stb_image.c"
   STACKTOP = sp;return ($408|0); //@line 2497 "emscripten/stb_image.c"
   break;
  }
  case 61: {
   $174 = $s; //@line 2415 "emscripten/stb_image.c"
   $175 = (($174) + 8|0); //@line 2415 "emscripten/stb_image.c"
   HEAP32[$175>>2] = 4; //@line 2415 "emscripten/stb_image.c"
   $0 = 1; //@line 2415 "emscripten/stb_image.c"
   $408 = $0; //@line 2497 "emscripten/stb_image.c"
   STACKTOP = sp;return ($408|0); //@line 2497 "emscripten/stb_image.c"
   break;
  }
  case 63: {
   $178 = (__ZL1ePKc(26560)|0); //@line 2416 "emscripten/stb_image.c"
   $0 = $178; //@line 2416 "emscripten/stb_image.c"
   $408 = $0; //@line 2497 "emscripten/stb_image.c"
   STACKTOP = sp;return ($408|0); //@line 2497 "emscripten/stb_image.c"
   break;
  }
  case 65: {
   $182 = (__ZL1ePKc(26584)|0); //@line 2417 "emscripten/stb_image.c"
   $0 = $182; //@line 2417 "emscripten/stb_image.c"
   $408 = $0; //@line 2497 "emscripten/stb_image.c"
   STACKTOP = sp;return ($408|0); //@line 2497 "emscripten/stb_image.c"
   break;
  }
  case 72: {
   $199 = (__ZL1ePKc(26600)|0); //@line 2422 "emscripten/stb_image.c"
   $0 = $199; //@line 2422 "emscripten/stb_image.c"
   $408 = $0; //@line 2497 "emscripten/stb_image.c"
   STACKTOP = sp;return ($408|0); //@line 2497 "emscripten/stb_image.c"
   break;
  }
  case 74: {
   $206 = (__ZL1ePKc(26584)|0); //@line 2423 "emscripten/stb_image.c"
   $0 = $206; //@line 2423 "emscripten/stb_image.c"
   $408 = $0; //@line 2497 "emscripten/stb_image.c"
   STACKTOP = sp;return ($408|0); //@line 2497 "emscripten/stb_image.c"
   break;
  }
  case 82: {
   $221 = (__ZL1ePKc(26512)|0); //@line 2432 "emscripten/stb_image.c"
   $0 = $221; //@line 2432 "emscripten/stb_image.c"
   $408 = $0; //@line 2497 "emscripten/stb_image.c"
   STACKTOP = sp;return ($408|0); //@line 2497 "emscripten/stb_image.c"
   break;
  }
  case 85: {
   $226 = (__ZL1ePKc(26616)|0); //@line 2433 "emscripten/stb_image.c"
   $0 = $226; //@line 2433 "emscripten/stb_image.c"
   $408 = $0; //@line 2497 "emscripten/stb_image.c"
   STACKTOP = sp;return ($408|0); //@line 2497 "emscripten/stb_image.c"
   break;
  }
  case 87: {
   $229 = $pal_img_n; //@line 2434 "emscripten/stb_image.c"
   $230 = $229&255; //@line 2434 "emscripten/stb_image.c"
   $231 = $s; //@line 2434 "emscripten/stb_image.c"
   $232 = (($231) + 8|0); //@line 2434 "emscripten/stb_image.c"
   HEAP32[$232>>2] = $230; //@line 2434 "emscripten/stb_image.c"
   $0 = 1; //@line 2434 "emscripten/stb_image.c"
   $408 = $0; //@line 2497 "emscripten/stb_image.c"
   STACKTOP = sp;return ($408|0); //@line 2497 "emscripten/stb_image.c"
   break;
  }
  case 98: {
   $258 = (__ZL1ePKc(26624)|0); //@line 2440 "emscripten/stb_image.c"
   $0 = $258; //@line 2440 "emscripten/stb_image.c"
   $408 = $0; //@line 2497 "emscripten/stb_image.c"
   STACKTOP = sp;return ($408|0); //@line 2497 "emscripten/stb_image.c"
   break;
  }
  case 101: {
   $271 = (__ZL1ePKc(26640)|0); //@line 2443 "emscripten/stb_image.c"
   $0 = $271; //@line 2443 "emscripten/stb_image.c"
   $408 = $0; //@line 2497 "emscripten/stb_image.c"
   STACKTOP = sp;return ($408|0); //@line 2497 "emscripten/stb_image.c"
   break;
  }
  case 103: {
   $275 = $first; //@line 2450 "emscripten/stb_image.c"
   $276 = ($275|0)!=(0); //@line 2450 "emscripten/stb_image.c"
   if ($276) {
    $277 = (__ZL1ePKc(26512)|0); //@line 2450 "emscripten/stb_image.c"
    $0 = $277; //@line 2450 "emscripten/stb_image.c"
    $408 = $0; //@line 2497 "emscripten/stb_image.c"
    STACKTOP = sp;return ($408|0); //@line 2497 "emscripten/stb_image.c"
   }
   $278 = $2; //@line 2451 "emscripten/stb_image.c"
   $279 = ($278|0)!=(0); //@line 2451 "emscripten/stb_image.c"
   if ($279) {
    $0 = 1; //@line 2451 "emscripten/stb_image.c"
    $408 = $0; //@line 2497 "emscripten/stb_image.c"
    STACKTOP = sp;return ($408|0); //@line 2497 "emscripten/stb_image.c"
   }
   $280 = $1; //@line 2452 "emscripten/stb_image.c"
   $281 = (($280) + 4|0); //@line 2452 "emscripten/stb_image.c"
   $282 = HEAP32[$281>>2]|0; //@line 2452 "emscripten/stb_image.c"
   $283 = ($282|0)==(0|0); //@line 2452 "emscripten/stb_image.c"
   if ($283) {
    $284 = (__ZL1ePKc(26656)|0); //@line 2452 "emscripten/stb_image.c"
    $0 = $284; //@line 2452 "emscripten/stb_image.c"
    $408 = $0; //@line 2497 "emscripten/stb_image.c"
    STACKTOP = sp;return ($408|0); //@line 2497 "emscripten/stb_image.c"
   }
   $285 = $1; //@line 2453 "emscripten/stb_image.c"
   $286 = (($285) + 4|0); //@line 2453 "emscripten/stb_image.c"
   $287 = HEAP32[$286>>2]|0; //@line 2453 "emscripten/stb_image.c"
   $288 = $ioff; //@line 2453 "emscripten/stb_image.c"
   $289 = $iphone; //@line 2453 "emscripten/stb_image.c"
   $290 = ($289|0)!=(0); //@line 2453 "emscripten/stb_image.c"
   $291 = $290 ^ 1; //@line 2453 "emscripten/stb_image.c"
   $292 = $291&1; //@line 2453 "emscripten/stb_image.c"
   $293 = (__Z44stbi_zlib_decode_malloc_guesssize_headerflagPKciiPii($287,$288,16384,$raw_len,$292)|0); //@line 2453 "emscripten/stb_image.c"
   $294 = $1; //@line 2453 "emscripten/stb_image.c"
   $295 = (($294) + 8|0); //@line 2453 "emscripten/stb_image.c"
   HEAP32[$295>>2] = $293; //@line 2453 "emscripten/stb_image.c"
   $296 = $1; //@line 2454 "emscripten/stb_image.c"
   $297 = (($296) + 8|0); //@line 2454 "emscripten/stb_image.c"
   $298 = HEAP32[$297>>2]|0; //@line 2454 "emscripten/stb_image.c"
   $299 = ($298|0)==(0|0); //@line 2454 "emscripten/stb_image.c"
   if ($299) {
    $0 = 0; //@line 2454 "emscripten/stb_image.c"
    $408 = $0; //@line 2497 "emscripten/stb_image.c"
    STACKTOP = sp;return ($408|0); //@line 2497 "emscripten/stb_image.c"
   }
   $300 = $1; //@line 2455 "emscripten/stb_image.c"
   $301 = (($300) + 4|0); //@line 2455 "emscripten/stb_image.c"
   $302 = HEAP32[$301>>2]|0; //@line 2455 "emscripten/stb_image.c"
   _free($302); //@line 2455 "emscripten/stb_image.c"
   $303 = $1; //@line 2455 "emscripten/stb_image.c"
   $304 = (($303) + 4|0); //@line 2455 "emscripten/stb_image.c"
   HEAP32[$304>>2] = 0; //@line 2455 "emscripten/stb_image.c"
   $305 = $3; //@line 2456 "emscripten/stb_image.c"
   $306 = $s; //@line 2456 "emscripten/stb_image.c"
   $307 = (($306) + 8|0); //@line 2456 "emscripten/stb_image.c"
   $308 = HEAP32[$307>>2]|0; //@line 2456 "emscripten/stb_image.c"
   $309 = (($308) + 1)|0; //@line 2456 "emscripten/stb_image.c"
   $310 = ($305|0)==($309|0); //@line 2456 "emscripten/stb_image.c"
   if ($310) {
    $311 = $3; //@line 2456 "emscripten/stb_image.c"
    $312 = ($311|0)!=(3); //@line 2456 "emscripten/stb_image.c"
    if ($312) {
     $313 = $pal_img_n; //@line 2456 "emscripten/stb_image.c"
     $314 = ($313<<24>>24)!=(0); //@line 2456 "emscripten/stb_image.c"
     if ($314) {
      label = 114;
     } else {
      label = 115;
     }
    } else {
     label = 114;
    }
   } else {
    label = 114;
   }
   if ((label|0) == 114) {
    $315 = $has_trans; //@line 2456 "emscripten/stb_image.c"
    $316 = ($315<<24>>24)!=(0); //@line 2456 "emscripten/stb_image.c"
    if ($316) {
     label = 115;
    } else {
     $323 = $s; //@line 2459 "emscripten/stb_image.c"
     $324 = (($323) + 8|0); //@line 2459 "emscripten/stb_image.c"
     $325 = HEAP32[$324>>2]|0; //@line 2459 "emscripten/stb_image.c"
     $326 = $s; //@line 2459 "emscripten/stb_image.c"
     $327 = (($326) + 12|0); //@line 2459 "emscripten/stb_image.c"
     HEAP32[$327>>2] = $325; //@line 2459 "emscripten/stb_image.c"
    }
   }
   if ((label|0) == 115) {
    $317 = $s; //@line 2457 "emscripten/stb_image.c"
    $318 = (($317) + 8|0); //@line 2457 "emscripten/stb_image.c"
    $319 = HEAP32[$318>>2]|0; //@line 2457 "emscripten/stb_image.c"
    $320 = (($319) + 1)|0; //@line 2457 "emscripten/stb_image.c"
    $321 = $s; //@line 2457 "emscripten/stb_image.c"
    $322 = (($321) + 12|0); //@line 2457 "emscripten/stb_image.c"
    HEAP32[$322>>2] = $320; //@line 2457 "emscripten/stb_image.c"
   }
   $328 = $1; //@line 2460 "emscripten/stb_image.c"
   $329 = $1; //@line 2460 "emscripten/stb_image.c"
   $330 = (($329) + 8|0); //@line 2460 "emscripten/stb_image.c"
   $331 = HEAP32[$330>>2]|0; //@line 2460 "emscripten/stb_image.c"
   $332 = HEAP32[$raw_len>>2]|0; //@line 2460 "emscripten/stb_image.c"
   $333 = $s; //@line 2460 "emscripten/stb_image.c"
   $334 = (($333) + 12|0); //@line 2460 "emscripten/stb_image.c"
   $335 = HEAP32[$334>>2]|0; //@line 2460 "emscripten/stb_image.c"
   $336 = $interlace; //@line 2460 "emscripten/stb_image.c"
   $337 = (__ZL16create_png_imageP3pngPhjii($328,$331,$332,$335,$336)|0); //@line 2460 "emscripten/stb_image.c"
   $338 = ($337|0)!=(0); //@line 2460 "emscripten/stb_image.c"
   if (!($338)) {
    $0 = 0; //@line 2460 "emscripten/stb_image.c"
    $408 = $0; //@line 2497 "emscripten/stb_image.c"
    STACKTOP = sp;return ($408|0); //@line 2497 "emscripten/stb_image.c"
   }
   $339 = $has_trans; //@line 2461 "emscripten/stb_image.c"
   $340 = ($339<<24>>24)!=(0); //@line 2461 "emscripten/stb_image.c"
   do {
    if ($340) {
     $341 = $1; //@line 2462 "emscripten/stb_image.c"
     $342 = $s; //@line 2462 "emscripten/stb_image.c"
     $343 = (($342) + 12|0); //@line 2462 "emscripten/stb_image.c"
     $344 = HEAP32[$343>>2]|0; //@line 2462 "emscripten/stb_image.c"
     $345 = (__ZL20compute_transparencyP3pngPhi($341,$tc,$344)|0); //@line 2462 "emscripten/stb_image.c"
     $346 = ($345|0)!=(0); //@line 2462 "emscripten/stb_image.c"
     if ($346) {
      break;
     }
     $0 = 0; //@line 2462 "emscripten/stb_image.c"
     $408 = $0; //@line 2497 "emscripten/stb_image.c"
     STACKTOP = sp;return ($408|0); //@line 2497 "emscripten/stb_image.c"
    }
   } while(0);
   $347 = $iphone; //@line 2463 "emscripten/stb_image.c"
   $348 = ($347|0)!=(0); //@line 2463 "emscripten/stb_image.c"
   if ($348) {
    $349 = $s; //@line 2463 "emscripten/stb_image.c"
    $350 = (($349) + 12|0); //@line 2463 "emscripten/stb_image.c"
    $351 = HEAP32[$350>>2]|0; //@line 2463 "emscripten/stb_image.c"
    $352 = ($351|0)>(2); //@line 2463 "emscripten/stb_image.c"
    if ($352) {
     $353 = $1; //@line 2464 "emscripten/stb_image.c"
     __ZL14stbi_de_iphoneP3png($353); //@line 2464 "emscripten/stb_image.c"
    }
   }
   $354 = $pal_img_n; //@line 2465 "emscripten/stb_image.c"
   $355 = ($354<<24>>24)!=(0); //@line 2465 "emscripten/stb_image.c"
   do {
    if ($355) {
     $356 = $pal_img_n; //@line 2467 "emscripten/stb_image.c"
     $357 = $356&255; //@line 2467 "emscripten/stb_image.c"
     $358 = $s; //@line 2467 "emscripten/stb_image.c"
     $359 = (($358) + 8|0); //@line 2467 "emscripten/stb_image.c"
     HEAP32[$359>>2] = $357; //@line 2467 "emscripten/stb_image.c"
     $360 = $pal_img_n; //@line 2468 "emscripten/stb_image.c"
     $361 = $360&255; //@line 2468 "emscripten/stb_image.c"
     $362 = $s; //@line 2468 "emscripten/stb_image.c"
     $363 = (($362) + 12|0); //@line 2468 "emscripten/stb_image.c"
     HEAP32[$363>>2] = $361; //@line 2468 "emscripten/stb_image.c"
     $364 = $3; //@line 2469 "emscripten/stb_image.c"
     $365 = ($364|0)>=(3); //@line 2469 "emscripten/stb_image.c"
     if ($365) {
      $366 = $3; //@line 2469 "emscripten/stb_image.c"
      $367 = $s; //@line 2469 "emscripten/stb_image.c"
      $368 = (($367) + 12|0); //@line 2469 "emscripten/stb_image.c"
      HEAP32[$368>>2] = $366; //@line 2469 "emscripten/stb_image.c"
     }
     $369 = $1; //@line 2470 "emscripten/stb_image.c"
     $370 = $pal_len; //@line 2470 "emscripten/stb_image.c"
     $371 = $s; //@line 2470 "emscripten/stb_image.c"
     $372 = (($371) + 12|0); //@line 2470 "emscripten/stb_image.c"
     $373 = HEAP32[$372>>2]|0; //@line 2470 "emscripten/stb_image.c"
     $374 = (__ZL14expand_paletteP3pngPhii($369,$palette,$370,$373)|0); //@line 2470 "emscripten/stb_image.c"
     $375 = ($374|0)!=(0); //@line 2470 "emscripten/stb_image.c"
     if ($375) {
      break;
     }
     $0 = 0; //@line 2471 "emscripten/stb_image.c"
     $408 = $0; //@line 2497 "emscripten/stb_image.c"
     STACKTOP = sp;return ($408|0); //@line 2497 "emscripten/stb_image.c"
    }
   } while(0);
   $376 = $1; //@line 2473 "emscripten/stb_image.c"
   $377 = (($376) + 8|0); //@line 2473 "emscripten/stb_image.c"
   $378 = HEAP32[$377>>2]|0; //@line 2473 "emscripten/stb_image.c"
   _free($378); //@line 2473 "emscripten/stb_image.c"
   $379 = $1; //@line 2473 "emscripten/stb_image.c"
   $380 = (($379) + 8|0); //@line 2473 "emscripten/stb_image.c"
   HEAP32[$380>>2] = 0; //@line 2473 "emscripten/stb_image.c"
   $0 = 1; //@line 2474 "emscripten/stb_image.c"
   $408 = $0; //@line 2497 "emscripten/stb_image.c"
   STACKTOP = sp;return ($408|0); //@line 2497 "emscripten/stb_image.c"
   break;
  }
  case 134: {
   $383 = (__ZL1ePKc(26512)|0); //@line 2479 "emscripten/stb_image.c"
   $0 = $383; //@line 2479 "emscripten/stb_image.c"
   $408 = $0; //@line 2497 "emscripten/stb_image.c"
   STACKTOP = sp;return ($408|0); //@line 2497 "emscripten/stb_image.c"
   break;
  }
  case 136: {
   $388 = (($c) + 4|0); //@line 2484 "emscripten/stb_image.c"
   $389 = HEAP32[$388>>2]|0; //@line 2484 "emscripten/stb_image.c"
   $390 = $389 >>> 24; //@line 2484 "emscripten/stb_image.c"
   $391 = $390&255; //@line 2484 "emscripten/stb_image.c"
   HEAP8[26664>>0] = $391; //@line 2484 "emscripten/stb_image.c"
   $392 = (($c) + 4|0); //@line 2485 "emscripten/stb_image.c"
   $393 = HEAP32[$392>>2]|0; //@line 2485 "emscripten/stb_image.c"
   $394 = $393 >>> 16; //@line 2485 "emscripten/stb_image.c"
   $395 = $394&255; //@line 2485 "emscripten/stb_image.c"
   HEAP8[((26664 + 1|0))>>0] = $395; //@line 2485 "emscripten/stb_image.c"
   $396 = (($c) + 4|0); //@line 2486 "emscripten/stb_image.c"
   $397 = HEAP32[$396>>2]|0; //@line 2486 "emscripten/stb_image.c"
   $398 = $397 >>> 8; //@line 2486 "emscripten/stb_image.c"
   $399 = $398&255; //@line 2486 "emscripten/stb_image.c"
   HEAP8[((26664 + 2|0))>>0] = $399; //@line 2486 "emscripten/stb_image.c"
   $400 = (($c) + 4|0); //@line 2487 "emscripten/stb_image.c"
   $401 = HEAP32[$400>>2]|0; //@line 2487 "emscripten/stb_image.c"
   $402 = $401 >>> 0; //@line 2487 "emscripten/stb_image.c"
   $403 = $402&255; //@line 2487 "emscripten/stb_image.c"
   HEAP8[((26664 + 3|0))>>0] = $403; //@line 2487 "emscripten/stb_image.c"
   $404 = (__ZL1ePKc(26664)|0); //@line 2489 "emscripten/stb_image.c"
   $0 = $404; //@line 2489 "emscripten/stb_image.c"
   $408 = $0; //@line 2497 "emscripten/stb_image.c"
   STACKTOP = sp;return ($408|0); //@line 2497 "emscripten/stb_image.c"
   break;
  }
 }
 return 0|0;
}
function __ZL16check_png_headerP4stbi($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $s;
 $i = 0; //@line 2078 "emscripten/stb_image.c"
 while(1) {
  $2 = $i; //@line 2078 "emscripten/stb_image.c"
  $3 = ($2|0)<(8); //@line 2078 "emscripten/stb_image.c"
  if (!($3)) {
   label = 7;
   break;
  }
  $4 = $1; //@line 2079 "emscripten/stb_image.c"
  $5 = (__ZL5get8uP4stbi($4)|0); //@line 2079 "emscripten/stb_image.c"
  $6 = $5&255; //@line 2079 "emscripten/stb_image.c"
  $7 = $i; //@line 2079 "emscripten/stb_image.c"
  $8 = (27080 + ($7)|0); //@line 2079 "emscripten/stb_image.c"
  $9 = HEAP8[$8>>0]|0; //@line 2079 "emscripten/stb_image.c"
  $10 = $9&255; //@line 2079 "emscripten/stb_image.c"
  $11 = ($6|0)!=($10|0); //@line 2079 "emscripten/stb_image.c"
  if ($11) {
   label = 4;
   break;
  }
  $13 = $i; //@line 2078 "emscripten/stb_image.c"
  $14 = (($13) + 1)|0; //@line 2078 "emscripten/stb_image.c"
  $i = $14; //@line 2078 "emscripten/stb_image.c"
 }
 if ((label|0) == 4) {
  $12 = (__ZL1ePKc(27088)|0); //@line 2079 "emscripten/stb_image.c"
  $0 = $12; //@line 2079 "emscripten/stb_image.c"
  $15 = $0; //@line 2081 "emscripten/stb_image.c"
  STACKTOP = sp;return ($15|0); //@line 2081 "emscripten/stb_image.c"
 }
 else if ((label|0) == 7) {
  $0 = 1; //@line 2080 "emscripten/stb_image.c"
  $15 = $0; //@line 2081 "emscripten/stb_image.c"
  STACKTOP = sp;return ($15|0); //@line 2081 "emscripten/stb_image.c"
 }
 return 0|0;
}
function __ZL16get_chunk_headerP4stbi($agg$result,$s) {
 $agg$result = $agg$result|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $s;
 $1 = $0; //@line 2069 "emscripten/stb_image.c"
 $2 = (__ZL5get32P4stbi($1)|0); //@line 2069 "emscripten/stb_image.c"
 HEAP32[$agg$result>>2] = $2; //@line 2069 "emscripten/stb_image.c"
 $3 = $0; //@line 2070 "emscripten/stb_image.c"
 $4 = (__ZL5get32P4stbi($3)|0); //@line 2070 "emscripten/stb_image.c"
 $5 = (($agg$result) + 4|0); //@line 2070 "emscripten/stb_image.c"
 HEAP32[$5>>2] = $4; //@line 2070 "emscripten/stb_image.c"
 STACKTOP = sp;return; //@line 2071 "emscripten/stb_image.c"
}
function __ZL4getnP4stbiPhi($s,$buffer,$n) {
 $s = $s|0;
 $buffer = $buffer|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $blen = 0, $count = 0, $res = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = $s;
 $2 = $buffer;
 $3 = $n;
 $4 = $1; //@line 441 "emscripten/stb_image.c"
 $5 = (($4) + 16|0); //@line 441 "emscripten/stb_image.c"
 $6 = HEAP32[$5>>2]|0; //@line 441 "emscripten/stb_image.c"
 $7 = ($6|0)!=(0|0); //@line 441 "emscripten/stb_image.c"
 do {
  if ($7) {
   $8 = $1; //@line 442 "emscripten/stb_image.c"
   $9 = (($8) + 172|0); //@line 442 "emscripten/stb_image.c"
   $10 = HEAP32[$9>>2]|0; //@line 442 "emscripten/stb_image.c"
   $11 = $1; //@line 442 "emscripten/stb_image.c"
   $12 = (($11) + 168|0); //@line 442 "emscripten/stb_image.c"
   $13 = HEAP32[$12>>2]|0; //@line 442 "emscripten/stb_image.c"
   $14 = $10; //@line 442 "emscripten/stb_image.c"
   $15 = $13; //@line 442 "emscripten/stb_image.c"
   $16 = (($14) - ($15))|0; //@line 442 "emscripten/stb_image.c"
   $blen = $16; //@line 442 "emscripten/stb_image.c"
   $17 = $blen; //@line 443 "emscripten/stb_image.c"
   $18 = $3; //@line 443 "emscripten/stb_image.c"
   $19 = ($17|0)<($18|0); //@line 443 "emscripten/stb_image.c"
   if (!($19)) {
    break;
   }
   $20 = $2; //@line 446 "emscripten/stb_image.c"
   $21 = $1; //@line 446 "emscripten/stb_image.c"
   $22 = (($21) + 168|0); //@line 446 "emscripten/stb_image.c"
   $23 = HEAP32[$22>>2]|0; //@line 446 "emscripten/stb_image.c"
   $24 = $blen; //@line 446 "emscripten/stb_image.c"
   _memcpy(($20|0),($23|0),($24|0))|0; //@line 446 "emscripten/stb_image.c"
   $25 = $1; //@line 448 "emscripten/stb_image.c"
   $26 = (($25) + 16|0); //@line 448 "emscripten/stb_image.c"
   $27 = HEAP32[$26>>2]|0; //@line 448 "emscripten/stb_image.c"
   $28 = $1; //@line 448 "emscripten/stb_image.c"
   $29 = (($28) + 28|0); //@line 448 "emscripten/stb_image.c"
   $30 = HEAP32[$29>>2]|0; //@line 448 "emscripten/stb_image.c"
   $31 = $2; //@line 448 "emscripten/stb_image.c"
   $32 = $blen; //@line 448 "emscripten/stb_image.c"
   $33 = (($31) + ($32)|0); //@line 448 "emscripten/stb_image.c"
   $34 = $3; //@line 448 "emscripten/stb_image.c"
   $35 = $blen; //@line 448 "emscripten/stb_image.c"
   $36 = (($34) - ($35))|0; //@line 448 "emscripten/stb_image.c"
   $37 = (FUNCTION_TABLE_iiii[$27 & 255]($30,$33,$36)|0); //@line 448 "emscripten/stb_image.c"
   $count = $37; //@line 448 "emscripten/stb_image.c"
   $38 = $count; //@line 449 "emscripten/stb_image.c"
   $39 = $3; //@line 449 "emscripten/stb_image.c"
   $40 = $blen; //@line 449 "emscripten/stb_image.c"
   $41 = (($39) - ($40))|0; //@line 449 "emscripten/stb_image.c"
   $42 = ($38|0)==($41|0); //@line 449 "emscripten/stb_image.c"
   $43 = $42&1; //@line 449 "emscripten/stb_image.c"
   $res = $43; //@line 449 "emscripten/stb_image.c"
   $44 = $1; //@line 450 "emscripten/stb_image.c"
   $45 = (($44) + 172|0); //@line 450 "emscripten/stb_image.c"
   $46 = HEAP32[$45>>2]|0; //@line 450 "emscripten/stb_image.c"
   $47 = $1; //@line 450 "emscripten/stb_image.c"
   $48 = (($47) + 168|0); //@line 450 "emscripten/stb_image.c"
   HEAP32[$48>>2] = $46; //@line 450 "emscripten/stb_image.c"
   $49 = $res; //@line 451 "emscripten/stb_image.c"
   $0 = $49; //@line 451 "emscripten/stb_image.c"
   $69 = $0; //@line 461 "emscripten/stb_image.c"
   STACKTOP = sp;return ($69|0); //@line 461 "emscripten/stb_image.c"
  }
 } while(0);
 $50 = $1; //@line 455 "emscripten/stb_image.c"
 $51 = (($50) + 168|0); //@line 455 "emscripten/stb_image.c"
 $52 = HEAP32[$51>>2]|0; //@line 455 "emscripten/stb_image.c"
 $53 = $3; //@line 455 "emscripten/stb_image.c"
 $54 = (($52) + ($53)|0); //@line 455 "emscripten/stb_image.c"
 $55 = $1; //@line 455 "emscripten/stb_image.c"
 $56 = (($55) + 172|0); //@line 455 "emscripten/stb_image.c"
 $57 = HEAP32[$56>>2]|0; //@line 455 "emscripten/stb_image.c"
 $58 = ($54>>>0)<=($57>>>0); //@line 455 "emscripten/stb_image.c"
 if ($58) {
  $59 = $2; //@line 456 "emscripten/stb_image.c"
  $60 = $1; //@line 456 "emscripten/stb_image.c"
  $61 = (($60) + 168|0); //@line 456 "emscripten/stb_image.c"
  $62 = HEAP32[$61>>2]|0; //@line 456 "emscripten/stb_image.c"
  $63 = $3; //@line 456 "emscripten/stb_image.c"
  _memcpy(($59|0),($62|0),($63|0))|0; //@line 456 "emscripten/stb_image.c"
  $64 = $3; //@line 457 "emscripten/stb_image.c"
  $65 = $1; //@line 457 "emscripten/stb_image.c"
  $66 = (($65) + 168|0); //@line 457 "emscripten/stb_image.c"
  $67 = HEAP32[$66>>2]|0; //@line 457 "emscripten/stb_image.c"
  $68 = (($67) + ($64)|0); //@line 457 "emscripten/stb_image.c"
  HEAP32[$66>>2] = $68; //@line 457 "emscripten/stb_image.c"
  $0 = 1; //@line 458 "emscripten/stb_image.c"
  $69 = $0; //@line 461 "emscripten/stb_image.c"
  STACKTOP = sp;return ($69|0); //@line 461 "emscripten/stb_image.c"
 } else {
  $0 = 0; //@line 460 "emscripten/stb_image.c"
  $69 = $0; //@line 461 "emscripten/stb_image.c"
  STACKTOP = sp;return ($69|0); //@line 461 "emscripten/stb_image.c"
 }
 return 0|0;
}
function __ZL16create_png_imageP3pngPhjii($a,$raw,$raw_len,$out_n,$interlaced) {
 $a = $a|0;
 $raw = $raw|0;
 $raw_len = $raw_len|0;
 $out_n = $out_n|0;
 $interlaced = $interlaced|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $final = 0, $i = 0, $j = 0;
 var $p = 0, $save = 0, $x = 0, $xorig = 0, $xspc = 0, $y = 0, $yorig = 0, $yspc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0;
 $xorig = sp + 96|0;
 $yorig = sp + 68|0;
 $xspc = sp + 40|0;
 $yspc = sp + 12|0;
 $1 = $a;
 $2 = $raw;
 $3 = $raw_len;
 $4 = $out_n;
 $5 = $interlaced;
 $6 = $5; //@line 2194 "emscripten/stb_image.c"
 $7 = ($6|0)!=(0); //@line 2194 "emscripten/stb_image.c"
 if (!($7)) {
  $8 = $1; //@line 2195 "emscripten/stb_image.c"
  $9 = $2; //@line 2195 "emscripten/stb_image.c"
  $10 = $3; //@line 2195 "emscripten/stb_image.c"
  $11 = $4; //@line 2195 "emscripten/stb_image.c"
  $12 = $1; //@line 2195 "emscripten/stb_image.c"
  $13 = HEAP32[$12>>2]|0; //@line 2195 "emscripten/stb_image.c"
  $14 = HEAP32[$13>>2]|0; //@line 2195 "emscripten/stb_image.c"
  $15 = $1; //@line 2195 "emscripten/stb_image.c"
  $16 = HEAP32[$15>>2]|0; //@line 2195 "emscripten/stb_image.c"
  $17 = (($16) + 4|0); //@line 2195 "emscripten/stb_image.c"
  $18 = HEAP32[$17>>2]|0; //@line 2195 "emscripten/stb_image.c"
  $19 = (__ZL20create_png_image_rawP3pngPhjijj($8,$9,$10,$11,$14,$18)|0); //@line 2195 "emscripten/stb_image.c"
  $0 = $19; //@line 2195 "emscripten/stb_image.c"
  $156 = $0; //@line 2228 "emscripten/stb_image.c"
  STACKTOP = sp;return ($156|0); //@line 2228 "emscripten/stb_image.c"
 }
 $20 = HEAP32[26256>>2]|0; //@line 2196 "emscripten/stb_image.c"
 $save = $20; //@line 2196 "emscripten/stb_image.c"
 HEAP32[26256>>2] = 0; //@line 2197 "emscripten/stb_image.c"
 $21 = $1; //@line 2200 "emscripten/stb_image.c"
 $22 = HEAP32[$21>>2]|0; //@line 2200 "emscripten/stb_image.c"
 $23 = HEAP32[$22>>2]|0; //@line 2200 "emscripten/stb_image.c"
 $24 = $1; //@line 2200 "emscripten/stb_image.c"
 $25 = HEAP32[$24>>2]|0; //@line 2200 "emscripten/stb_image.c"
 $26 = (($25) + 4|0); //@line 2200 "emscripten/stb_image.c"
 $27 = HEAP32[$26>>2]|0; //@line 2200 "emscripten/stb_image.c"
 $28 = Math_imul($23, $27)|0; //@line 2200 "emscripten/stb_image.c"
 $29 = $4; //@line 2200 "emscripten/stb_image.c"
 $30 = Math_imul($28, $29)|0; //@line 2200 "emscripten/stb_image.c"
 $31 = (_malloc($30)|0); //@line 2200 "emscripten/stb_image.c"
 $final = $31; //@line 2200 "emscripten/stb_image.c"
 $p = 0; //@line 2201 "emscripten/stb_image.c"
 while(1) {
  $32 = $p; //@line 2201 "emscripten/stb_image.c"
  $33 = ($32|0)<(7); //@line 2201 "emscripten/stb_image.c"
  if (!($33)) {
   label = 20;
   break;
  }
  ;HEAP32[$xorig+0>>2]=HEAP32[26808+0>>2]|0;HEAP32[$xorig+4>>2]=HEAP32[26808+4>>2]|0;HEAP32[$xorig+8>>2]=HEAP32[26808+8>>2]|0;HEAP32[$xorig+12>>2]=HEAP32[26808+12>>2]|0;HEAP32[$xorig+16>>2]=HEAP32[26808+16>>2]|0;HEAP32[$xorig+20>>2]=HEAP32[26808+20>>2]|0;HEAP32[$xorig+24>>2]=HEAP32[26808+24>>2]|0; //@line 2202 "emscripten/stb_image.c"
  ;HEAP32[$yorig+0>>2]=HEAP32[26840+0>>2]|0;HEAP32[$yorig+4>>2]=HEAP32[26840+4>>2]|0;HEAP32[$yorig+8>>2]=HEAP32[26840+8>>2]|0;HEAP32[$yorig+12>>2]=HEAP32[26840+12>>2]|0;HEAP32[$yorig+16>>2]=HEAP32[26840+16>>2]|0;HEAP32[$yorig+20>>2]=HEAP32[26840+20>>2]|0;HEAP32[$yorig+24>>2]=HEAP32[26840+24>>2]|0; //@line 2203 "emscripten/stb_image.c"
  ;HEAP32[$xspc+0>>2]=HEAP32[26872+0>>2]|0;HEAP32[$xspc+4>>2]=HEAP32[26872+4>>2]|0;HEAP32[$xspc+8>>2]=HEAP32[26872+8>>2]|0;HEAP32[$xspc+12>>2]=HEAP32[26872+12>>2]|0;HEAP32[$xspc+16>>2]=HEAP32[26872+16>>2]|0;HEAP32[$xspc+20>>2]=HEAP32[26872+20>>2]|0;HEAP32[$xspc+24>>2]=HEAP32[26872+24>>2]|0; //@line 2204 "emscripten/stb_image.c"
  ;HEAP32[$yspc+0>>2]=HEAP32[26904+0>>2]|0;HEAP32[$yspc+4>>2]=HEAP32[26904+4>>2]|0;HEAP32[$yspc+8>>2]=HEAP32[26904+8>>2]|0;HEAP32[$yspc+12>>2]=HEAP32[26904+12>>2]|0;HEAP32[$yspc+16>>2]=HEAP32[26904+16>>2]|0;HEAP32[$yspc+20>>2]=HEAP32[26904+20>>2]|0;HEAP32[$yspc+24>>2]=HEAP32[26904+24>>2]|0; //@line 2205 "emscripten/stb_image.c"
  $34 = $1; //@line 2208 "emscripten/stb_image.c"
  $35 = HEAP32[$34>>2]|0; //@line 2208 "emscripten/stb_image.c"
  $36 = HEAP32[$35>>2]|0; //@line 2208 "emscripten/stb_image.c"
  $37 = $p; //@line 2208 "emscripten/stb_image.c"
  $38 = (($xorig) + ($37<<2)|0); //@line 2208 "emscripten/stb_image.c"
  $39 = HEAP32[$38>>2]|0; //@line 2208 "emscripten/stb_image.c"
  $40 = (($36) - ($39))|0; //@line 2208 "emscripten/stb_image.c"
  $41 = $p; //@line 2208 "emscripten/stb_image.c"
  $42 = (($xspc) + ($41<<2)|0); //@line 2208 "emscripten/stb_image.c"
  $43 = HEAP32[$42>>2]|0; //@line 2208 "emscripten/stb_image.c"
  $44 = (($40) + ($43))|0; //@line 2208 "emscripten/stb_image.c"
  $45 = (($44) - 1)|0; //@line 2208 "emscripten/stb_image.c"
  $46 = $p; //@line 2208 "emscripten/stb_image.c"
  $47 = (($xspc) + ($46<<2)|0); //@line 2208 "emscripten/stb_image.c"
  $48 = HEAP32[$47>>2]|0; //@line 2208 "emscripten/stb_image.c"
  $49 = (($45>>>0) / ($48>>>0))&-1; //@line 2208 "emscripten/stb_image.c"
  $x = $49; //@line 2208 "emscripten/stb_image.c"
  $50 = $1; //@line 2209 "emscripten/stb_image.c"
  $51 = HEAP32[$50>>2]|0; //@line 2209 "emscripten/stb_image.c"
  $52 = (($51) + 4|0); //@line 2209 "emscripten/stb_image.c"
  $53 = HEAP32[$52>>2]|0; //@line 2209 "emscripten/stb_image.c"
  $54 = $p; //@line 2209 "emscripten/stb_image.c"
  $55 = (($yorig) + ($54<<2)|0); //@line 2209 "emscripten/stb_image.c"
  $56 = HEAP32[$55>>2]|0; //@line 2209 "emscripten/stb_image.c"
  $57 = (($53) - ($56))|0; //@line 2209 "emscripten/stb_image.c"
  $58 = $p; //@line 2209 "emscripten/stb_image.c"
  $59 = (($yspc) + ($58<<2)|0); //@line 2209 "emscripten/stb_image.c"
  $60 = HEAP32[$59>>2]|0; //@line 2209 "emscripten/stb_image.c"
  $61 = (($57) + ($60))|0; //@line 2209 "emscripten/stb_image.c"
  $62 = (($61) - 1)|0; //@line 2209 "emscripten/stb_image.c"
  $63 = $p; //@line 2209 "emscripten/stb_image.c"
  $64 = (($yspc) + ($63<<2)|0); //@line 2209 "emscripten/stb_image.c"
  $65 = HEAP32[$64>>2]|0; //@line 2209 "emscripten/stb_image.c"
  $66 = (($62>>>0) / ($65>>>0))&-1; //@line 2209 "emscripten/stb_image.c"
  $y = $66; //@line 2209 "emscripten/stb_image.c"
  $67 = $x; //@line 2210 "emscripten/stb_image.c"
  $68 = ($67|0)!=(0); //@line 2210 "emscripten/stb_image.c"
  if ($68) {
   $69 = $y; //@line 2210 "emscripten/stb_image.c"
   $70 = ($69|0)!=(0); //@line 2210 "emscripten/stb_image.c"
   if ($70) {
    $71 = $1; //@line 2211 "emscripten/stb_image.c"
    $72 = $2; //@line 2211 "emscripten/stb_image.c"
    $73 = $3; //@line 2211 "emscripten/stb_image.c"
    $74 = $4; //@line 2211 "emscripten/stb_image.c"
    $75 = $x; //@line 2211 "emscripten/stb_image.c"
    $76 = $y; //@line 2211 "emscripten/stb_image.c"
    $77 = (__ZL20create_png_image_rawP3pngPhjijj($71,$72,$73,$74,$75,$76)|0); //@line 2211 "emscripten/stb_image.c"
    $78 = ($77|0)!=(0); //@line 2211 "emscripten/stb_image.c"
    if (!($78)) {
     label = 8;
     break;
    }
    $j = 0; //@line 2215 "emscripten/stb_image.c"
    while(1) {
     $80 = $j; //@line 2215 "emscripten/stb_image.c"
     $81 = $y; //@line 2215 "emscripten/stb_image.c"
     $82 = ($80|0)<($81|0); //@line 2215 "emscripten/stb_image.c"
     if (!($82)) {
      break;
     }
     $i = 0; //@line 2216 "emscripten/stb_image.c"
     while(1) {
      $83 = $i; //@line 2216 "emscripten/stb_image.c"
      $84 = $x; //@line 2216 "emscripten/stb_image.c"
      $85 = ($83|0)<($84|0); //@line 2216 "emscripten/stb_image.c"
      if (!($85)) {
       break;
      }
      $86 = $final; //@line 2217 "emscripten/stb_image.c"
      $87 = $j; //@line 2217 "emscripten/stb_image.c"
      $88 = $p; //@line 2217 "emscripten/stb_image.c"
      $89 = (($yspc) + ($88<<2)|0); //@line 2217 "emscripten/stb_image.c"
      $90 = HEAP32[$89>>2]|0; //@line 2217 "emscripten/stb_image.c"
      $91 = Math_imul($87, $90)|0; //@line 2217 "emscripten/stb_image.c"
      $92 = $p; //@line 2217 "emscripten/stb_image.c"
      $93 = (($yorig) + ($92<<2)|0); //@line 2217 "emscripten/stb_image.c"
      $94 = HEAP32[$93>>2]|0; //@line 2217 "emscripten/stb_image.c"
      $95 = (($91) + ($94))|0; //@line 2217 "emscripten/stb_image.c"
      $96 = $1; //@line 2217 "emscripten/stb_image.c"
      $97 = HEAP32[$96>>2]|0; //@line 2217 "emscripten/stb_image.c"
      $98 = HEAP32[$97>>2]|0; //@line 2217 "emscripten/stb_image.c"
      $99 = Math_imul($95, $98)|0; //@line 2217 "emscripten/stb_image.c"
      $100 = $4; //@line 2217 "emscripten/stb_image.c"
      $101 = Math_imul($99, $100)|0; //@line 2217 "emscripten/stb_image.c"
      $102 = (($86) + ($101)|0); //@line 2217 "emscripten/stb_image.c"
      $103 = $i; //@line 2217 "emscripten/stb_image.c"
      $104 = $p; //@line 2217 "emscripten/stb_image.c"
      $105 = (($xspc) + ($104<<2)|0); //@line 2217 "emscripten/stb_image.c"
      $106 = HEAP32[$105>>2]|0; //@line 2217 "emscripten/stb_image.c"
      $107 = Math_imul($103, $106)|0; //@line 2217 "emscripten/stb_image.c"
      $108 = $p; //@line 2217 "emscripten/stb_image.c"
      $109 = (($xorig) + ($108<<2)|0); //@line 2217 "emscripten/stb_image.c"
      $110 = HEAP32[$109>>2]|0; //@line 2217 "emscripten/stb_image.c"
      $111 = (($107) + ($110))|0; //@line 2217 "emscripten/stb_image.c"
      $112 = $4; //@line 2217 "emscripten/stb_image.c"
      $113 = Math_imul($111, $112)|0; //@line 2217 "emscripten/stb_image.c"
      $114 = (($102) + ($113)|0); //@line 2217 "emscripten/stb_image.c"
      $115 = $1; //@line 2217 "emscripten/stb_image.c"
      $116 = (($115) + 12|0); //@line 2217 "emscripten/stb_image.c"
      $117 = HEAP32[$116>>2]|0; //@line 2217 "emscripten/stb_image.c"
      $118 = $j; //@line 2217 "emscripten/stb_image.c"
      $119 = $x; //@line 2217 "emscripten/stb_image.c"
      $120 = Math_imul($118, $119)|0; //@line 2217 "emscripten/stb_image.c"
      $121 = $i; //@line 2217 "emscripten/stb_image.c"
      $122 = (($120) + ($121))|0; //@line 2217 "emscripten/stb_image.c"
      $123 = $4; //@line 2217 "emscripten/stb_image.c"
      $124 = Math_imul($122, $123)|0; //@line 2217 "emscripten/stb_image.c"
      $125 = (($117) + ($124)|0); //@line 2217 "emscripten/stb_image.c"
      $126 = $4; //@line 2217 "emscripten/stb_image.c"
      _memcpy(($114|0),($125|0),($126|0))|0; //@line 2217 "emscripten/stb_image.c"
      $127 = $i; //@line 2216 "emscripten/stb_image.c"
      $128 = (($127) + 1)|0; //@line 2216 "emscripten/stb_image.c"
      $i = $128; //@line 2216 "emscripten/stb_image.c"
     }
     $129 = $j; //@line 2215 "emscripten/stb_image.c"
     $130 = (($129) + 1)|0; //@line 2215 "emscripten/stb_image.c"
     $j = $130; //@line 2215 "emscripten/stb_image.c"
    }
    $131 = $1; //@line 2219 "emscripten/stb_image.c"
    $132 = (($131) + 12|0); //@line 2219 "emscripten/stb_image.c"
    $133 = HEAP32[$132>>2]|0; //@line 2219 "emscripten/stb_image.c"
    _free($133); //@line 2219 "emscripten/stb_image.c"
    $134 = $x; //@line 2220 "emscripten/stb_image.c"
    $135 = $4; //@line 2220 "emscripten/stb_image.c"
    $136 = Math_imul($134, $135)|0; //@line 2220 "emscripten/stb_image.c"
    $137 = (($136) + 1)|0; //@line 2220 "emscripten/stb_image.c"
    $138 = $y; //@line 2220 "emscripten/stb_image.c"
    $139 = Math_imul($137, $138)|0; //@line 2220 "emscripten/stb_image.c"
    $140 = $2; //@line 2220 "emscripten/stb_image.c"
    $141 = (($140) + ($139)|0); //@line 2220 "emscripten/stb_image.c"
    $2 = $141; //@line 2220 "emscripten/stb_image.c"
    $142 = $x; //@line 2221 "emscripten/stb_image.c"
    $143 = $4; //@line 2221 "emscripten/stb_image.c"
    $144 = Math_imul($142, $143)|0; //@line 2221 "emscripten/stb_image.c"
    $145 = (($144) + 1)|0; //@line 2221 "emscripten/stb_image.c"
    $146 = $y; //@line 2221 "emscripten/stb_image.c"
    $147 = Math_imul($145, $146)|0; //@line 2221 "emscripten/stb_image.c"
    $148 = $3; //@line 2221 "emscripten/stb_image.c"
    $149 = (($148) - ($147))|0; //@line 2221 "emscripten/stb_image.c"
    $3 = $149; //@line 2221 "emscripten/stb_image.c"
   }
  }
  $150 = $p; //@line 2201 "emscripten/stb_image.c"
  $151 = (($150) + 1)|0; //@line 2201 "emscripten/stb_image.c"
  $p = $151; //@line 2201 "emscripten/stb_image.c"
 }
 if ((label|0) == 8) {
  $79 = $final; //@line 2212 "emscripten/stb_image.c"
  _free($79); //@line 2212 "emscripten/stb_image.c"
  $0 = 0; //@line 2213 "emscripten/stb_image.c"
  $156 = $0; //@line 2228 "emscripten/stb_image.c"
  STACKTOP = sp;return ($156|0); //@line 2228 "emscripten/stb_image.c"
 }
 else if ((label|0) == 20) {
  $152 = $final; //@line 2224 "emscripten/stb_image.c"
  $153 = $1; //@line 2224 "emscripten/stb_image.c"
  $154 = (($153) + 12|0); //@line 2224 "emscripten/stb_image.c"
  HEAP32[$154>>2] = $152; //@line 2224 "emscripten/stb_image.c"
  $155 = $save; //@line 2226 "emscripten/stb_image.c"
  HEAP32[26256>>2] = $155; //@line 2226 "emscripten/stb_image.c"
  $0 = 1; //@line 2227 "emscripten/stb_image.c"
  $156 = $0; //@line 2228 "emscripten/stb_image.c"
  STACKTOP = sp;return ($156|0); //@line 2228 "emscripten/stb_image.c"
 }
 return 0|0;
}
function __ZL20compute_transparencyP3pngPhi($z,$tc,$out_n) {
 $z = $z|0;
 $tc = $tc|0;
 $out_n = $out_n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $i = 0, $p = 0, $pixel_count = 0, $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $z;
 $1 = $tc;
 $2 = $out_n;
 $3 = $0; //@line 2232 "emscripten/stb_image.c"
 $4 = HEAP32[$3>>2]|0; //@line 2232 "emscripten/stb_image.c"
 $s = $4; //@line 2232 "emscripten/stb_image.c"
 $5 = $s; //@line 2233 "emscripten/stb_image.c"
 $6 = HEAP32[$5>>2]|0; //@line 2233 "emscripten/stb_image.c"
 $7 = $s; //@line 2233 "emscripten/stb_image.c"
 $8 = (($7) + 4|0); //@line 2233 "emscripten/stb_image.c"
 $9 = HEAP32[$8>>2]|0; //@line 2233 "emscripten/stb_image.c"
 $10 = Math_imul($6, $9)|0; //@line 2233 "emscripten/stb_image.c"
 $pixel_count = $10; //@line 2233 "emscripten/stb_image.c"
 $11 = $0; //@line 2234 "emscripten/stb_image.c"
 $12 = (($11) + 12|0); //@line 2234 "emscripten/stb_image.c"
 $13 = HEAP32[$12>>2]|0; //@line 2234 "emscripten/stb_image.c"
 $p = $13; //@line 2234 "emscripten/stb_image.c"
 $14 = $2; //@line 2238 "emscripten/stb_image.c"
 $15 = ($14|0)==(2); //@line 2238 "emscripten/stb_image.c"
 if (!($15)) {
  $16 = $2; //@line 2238 "emscripten/stb_image.c"
  $17 = ($16|0)==(4); //@line 2238 "emscripten/stb_image.c"
  if (!($17)) {
   ___assert_fail((26752|0),(26712|0),2238,(26784|0)); //@line 2238 "emscripten/stb_image.c"
   // unreachable; //@line 2238 "emscripten/stb_image.c"
  }
 }
 $18 = $2; //@line 2240 "emscripten/stb_image.c"
 $19 = ($18|0)==(2); //@line 2240 "emscripten/stb_image.c"
 if ($19) {
  $i = 0; //@line 2241 "emscripten/stb_image.c"
  while(1) {
   $20 = $i; //@line 2241 "emscripten/stb_image.c"
   $21 = $pixel_count; //@line 2241 "emscripten/stb_image.c"
   $22 = ($20>>>0)<($21>>>0); //@line 2241 "emscripten/stb_image.c"
   if (!($22)) {
    break;
   }
   $23 = $p; //@line 2242 "emscripten/stb_image.c"
   $24 = HEAP8[$23>>0]|0; //@line 2242 "emscripten/stb_image.c"
   $25 = $24&255; //@line 2242 "emscripten/stb_image.c"
   $26 = $1; //@line 2242 "emscripten/stb_image.c"
   $27 = HEAP8[$26>>0]|0; //@line 2242 "emscripten/stb_image.c"
   $28 = $27&255; //@line 2242 "emscripten/stb_image.c"
   $29 = ($25|0)==($28|0); //@line 2242 "emscripten/stb_image.c"
   $30 = $29 ? 0 : 255; //@line 2242 "emscripten/stb_image.c"
   $31 = $30&255; //@line 2242 "emscripten/stb_image.c"
   $32 = $p; //@line 2242 "emscripten/stb_image.c"
   $33 = (($32) + 1|0); //@line 2242 "emscripten/stb_image.c"
   HEAP8[$33>>0] = $31; //@line 2242 "emscripten/stb_image.c"
   $34 = $p; //@line 2243 "emscripten/stb_image.c"
   $35 = (($34) + 2|0); //@line 2243 "emscripten/stb_image.c"
   $p = $35; //@line 2243 "emscripten/stb_image.c"
   $36 = $i; //@line 2241 "emscripten/stb_image.c"
   $37 = (($36) + 1)|0; //@line 2241 "emscripten/stb_image.c"
   $i = $37; //@line 2241 "emscripten/stb_image.c"
  }
  STACKTOP = sp;return 1; //@line 2252 "emscripten/stb_image.c"
 }
 $i = 0; //@line 2246 "emscripten/stb_image.c"
 while(1) {
  $38 = $i; //@line 2246 "emscripten/stb_image.c"
  $39 = $pixel_count; //@line 2246 "emscripten/stb_image.c"
  $40 = ($38>>>0)<($39>>>0); //@line 2246 "emscripten/stb_image.c"
  if (!($40)) {
   break;
  }
  $41 = $p; //@line 2247 "emscripten/stb_image.c"
  $42 = HEAP8[$41>>0]|0; //@line 2247 "emscripten/stb_image.c"
  $43 = $42&255; //@line 2247 "emscripten/stb_image.c"
  $44 = $1; //@line 2247 "emscripten/stb_image.c"
  $45 = HEAP8[$44>>0]|0; //@line 2247 "emscripten/stb_image.c"
  $46 = $45&255; //@line 2247 "emscripten/stb_image.c"
  $47 = ($43|0)==($46|0); //@line 2247 "emscripten/stb_image.c"
  if ($47) {
   $48 = $p; //@line 2247 "emscripten/stb_image.c"
   $49 = (($48) + 1|0); //@line 2247 "emscripten/stb_image.c"
   $50 = HEAP8[$49>>0]|0; //@line 2247 "emscripten/stb_image.c"
   $51 = $50&255; //@line 2247 "emscripten/stb_image.c"
   $52 = $1; //@line 2247 "emscripten/stb_image.c"
   $53 = (($52) + 1|0); //@line 2247 "emscripten/stb_image.c"
   $54 = HEAP8[$53>>0]|0; //@line 2247 "emscripten/stb_image.c"
   $55 = $54&255; //@line 2247 "emscripten/stb_image.c"
   $56 = ($51|0)==($55|0); //@line 2247 "emscripten/stb_image.c"
   if ($56) {
    $57 = $p; //@line 2247 "emscripten/stb_image.c"
    $58 = (($57) + 2|0); //@line 2247 "emscripten/stb_image.c"
    $59 = HEAP8[$58>>0]|0; //@line 2247 "emscripten/stb_image.c"
    $60 = $59&255; //@line 2247 "emscripten/stb_image.c"
    $61 = $1; //@line 2247 "emscripten/stb_image.c"
    $62 = (($61) + 2|0); //@line 2247 "emscripten/stb_image.c"
    $63 = HEAP8[$62>>0]|0; //@line 2247 "emscripten/stb_image.c"
    $64 = $63&255; //@line 2247 "emscripten/stb_image.c"
    $65 = ($60|0)==($64|0); //@line 2247 "emscripten/stb_image.c"
    if ($65) {
     $66 = $p; //@line 2248 "emscripten/stb_image.c"
     $67 = (($66) + 3|0); //@line 2248 "emscripten/stb_image.c"
     HEAP8[$67>>0] = 0; //@line 2248 "emscripten/stb_image.c"
    }
   }
  }
  $68 = $p; //@line 2249 "emscripten/stb_image.c"
  $69 = (($68) + 4|0); //@line 2249 "emscripten/stb_image.c"
  $p = $69; //@line 2249 "emscripten/stb_image.c"
  $70 = $i; //@line 2246 "emscripten/stb_image.c"
  $71 = (($70) + 1)|0; //@line 2246 "emscripten/stb_image.c"
  $i = $71; //@line 2246 "emscripten/stb_image.c"
 }
 STACKTOP = sp;return 1; //@line 2252 "emscripten/stb_image.c"
}
function __ZL14stbi_de_iphoneP3png($z) {
 $z = $z|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a = 0, $i = 0, $p = 0, $pixel_count = 0, $s = 0, $t = 0, $t1 = 0, $t2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $z;
 $1 = $0; //@line 2306 "emscripten/stb_image.c"
 $2 = HEAP32[$1>>2]|0; //@line 2306 "emscripten/stb_image.c"
 $s = $2; //@line 2306 "emscripten/stb_image.c"
 $3 = $s; //@line 2307 "emscripten/stb_image.c"
 $4 = HEAP32[$3>>2]|0; //@line 2307 "emscripten/stb_image.c"
 $5 = $s; //@line 2307 "emscripten/stb_image.c"
 $6 = (($5) + 4|0); //@line 2307 "emscripten/stb_image.c"
 $7 = HEAP32[$6>>2]|0; //@line 2307 "emscripten/stb_image.c"
 $8 = Math_imul($4, $7)|0; //@line 2307 "emscripten/stb_image.c"
 $pixel_count = $8; //@line 2307 "emscripten/stb_image.c"
 $9 = $0; //@line 2308 "emscripten/stb_image.c"
 $10 = (($9) + 12|0); //@line 2308 "emscripten/stb_image.c"
 $11 = HEAP32[$10>>2]|0; //@line 2308 "emscripten/stb_image.c"
 $p = $11; //@line 2308 "emscripten/stb_image.c"
 $12 = $s; //@line 2310 "emscripten/stb_image.c"
 $13 = (($12) + 12|0); //@line 2310 "emscripten/stb_image.c"
 $14 = HEAP32[$13>>2]|0; //@line 2310 "emscripten/stb_image.c"
 $15 = ($14|0)==(3); //@line 2310 "emscripten/stb_image.c"
 if ($15) {
  $i = 0; //@line 2311 "emscripten/stb_image.c"
  while(1) {
   $16 = $i; //@line 2311 "emscripten/stb_image.c"
   $17 = $pixel_count; //@line 2311 "emscripten/stb_image.c"
   $18 = ($16>>>0)<($17>>>0); //@line 2311 "emscripten/stb_image.c"
   if (!($18)) {
    break;
   }
   $19 = $p; //@line 2312 "emscripten/stb_image.c"
   $20 = HEAP8[$19>>0]|0; //@line 2312 "emscripten/stb_image.c"
   $t = $20; //@line 2312 "emscripten/stb_image.c"
   $21 = $p; //@line 2313 "emscripten/stb_image.c"
   $22 = (($21) + 2|0); //@line 2313 "emscripten/stb_image.c"
   $23 = HEAP8[$22>>0]|0; //@line 2313 "emscripten/stb_image.c"
   $24 = $p; //@line 2313 "emscripten/stb_image.c"
   HEAP8[$24>>0] = $23; //@line 2313 "emscripten/stb_image.c"
   $25 = $t; //@line 2314 "emscripten/stb_image.c"
   $26 = $p; //@line 2314 "emscripten/stb_image.c"
   $27 = (($26) + 2|0); //@line 2314 "emscripten/stb_image.c"
   HEAP8[$27>>0] = $25; //@line 2314 "emscripten/stb_image.c"
   $28 = $p; //@line 2315 "emscripten/stb_image.c"
   $29 = (($28) + 3|0); //@line 2315 "emscripten/stb_image.c"
   $p = $29; //@line 2315 "emscripten/stb_image.c"
   $30 = $i; //@line 2311 "emscripten/stb_image.c"
   $31 = (($30) + 1)|0; //@line 2311 "emscripten/stb_image.c"
   $i = $31; //@line 2311 "emscripten/stb_image.c"
  }
  STACKTOP = sp;return; //@line 2344 "emscripten/stb_image.c"
 }
 $32 = $s; //@line 2318 "emscripten/stb_image.c"
 $33 = (($32) + 12|0); //@line 2318 "emscripten/stb_image.c"
 $34 = HEAP32[$33>>2]|0; //@line 2318 "emscripten/stb_image.c"
 $35 = ($34|0)==(4); //@line 2318 "emscripten/stb_image.c"
 if (!($35)) {
  ___assert_fail((26688|0),(26712|0),2318,(26736|0)); //@line 2318 "emscripten/stb_image.c"
  // unreachable; //@line 2318 "emscripten/stb_image.c"
 }
 $36 = HEAP32[26264>>2]|0; //@line 2319 "emscripten/stb_image.c"
 $37 = ($36|0)!=(0); //@line 2319 "emscripten/stb_image.c"
 if ($37) {
  $i = 0; //@line 2321 "emscripten/stb_image.c"
  while(1) {
   $38 = $i; //@line 2321 "emscripten/stb_image.c"
   $39 = $pixel_count; //@line 2321 "emscripten/stb_image.c"
   $40 = ($38>>>0)<($39>>>0); //@line 2321 "emscripten/stb_image.c"
   if (!($40)) {
    break;
   }
   $41 = $p; //@line 2322 "emscripten/stb_image.c"
   $42 = (($41) + 3|0); //@line 2322 "emscripten/stb_image.c"
   $43 = HEAP8[$42>>0]|0; //@line 2322 "emscripten/stb_image.c"
   $a = $43; //@line 2322 "emscripten/stb_image.c"
   $44 = $p; //@line 2323 "emscripten/stb_image.c"
   $45 = HEAP8[$44>>0]|0; //@line 2323 "emscripten/stb_image.c"
   $t1 = $45; //@line 2323 "emscripten/stb_image.c"
   $46 = $a; //@line 2324 "emscripten/stb_image.c"
   $47 = ($46<<24>>24)!=(0); //@line 2324 "emscripten/stb_image.c"
   if ($47) {
    $48 = $p; //@line 2325 "emscripten/stb_image.c"
    $49 = (($48) + 2|0); //@line 2325 "emscripten/stb_image.c"
    $50 = HEAP8[$49>>0]|0; //@line 2325 "emscripten/stb_image.c"
    $51 = $50&255; //@line 2325 "emscripten/stb_image.c"
    $52 = ($51*255)|0; //@line 2325 "emscripten/stb_image.c"
    $53 = $a; //@line 2325 "emscripten/stb_image.c"
    $54 = $53&255; //@line 2325 "emscripten/stb_image.c"
    $55 = (($52|0) / ($54|0))&-1; //@line 2325 "emscripten/stb_image.c"
    $56 = $55&255; //@line 2325 "emscripten/stb_image.c"
    $57 = $p; //@line 2325 "emscripten/stb_image.c"
    HEAP8[$57>>0] = $56; //@line 2325 "emscripten/stb_image.c"
    $58 = $p; //@line 2326 "emscripten/stb_image.c"
    $59 = (($58) + 1|0); //@line 2326 "emscripten/stb_image.c"
    $60 = HEAP8[$59>>0]|0; //@line 2326 "emscripten/stb_image.c"
    $61 = $60&255; //@line 2326 "emscripten/stb_image.c"
    $62 = ($61*255)|0; //@line 2326 "emscripten/stb_image.c"
    $63 = $a; //@line 2326 "emscripten/stb_image.c"
    $64 = $63&255; //@line 2326 "emscripten/stb_image.c"
    $65 = (($62|0) / ($64|0))&-1; //@line 2326 "emscripten/stb_image.c"
    $66 = $65&255; //@line 2326 "emscripten/stb_image.c"
    $67 = $p; //@line 2326 "emscripten/stb_image.c"
    $68 = (($67) + 1|0); //@line 2326 "emscripten/stb_image.c"
    HEAP8[$68>>0] = $66; //@line 2326 "emscripten/stb_image.c"
    $69 = $t1; //@line 2327 "emscripten/stb_image.c"
    $70 = $69&255; //@line 2327 "emscripten/stb_image.c"
    $71 = ($70*255)|0; //@line 2327 "emscripten/stb_image.c"
    $72 = $a; //@line 2327 "emscripten/stb_image.c"
    $73 = $72&255; //@line 2327 "emscripten/stb_image.c"
    $74 = (($71|0) / ($73|0))&-1; //@line 2327 "emscripten/stb_image.c"
    $75 = $74&255; //@line 2327 "emscripten/stb_image.c"
    $76 = $p; //@line 2327 "emscripten/stb_image.c"
    $77 = (($76) + 2|0); //@line 2327 "emscripten/stb_image.c"
    HEAP8[$77>>0] = $75; //@line 2327 "emscripten/stb_image.c"
   } else {
    $78 = $p; //@line 2329 "emscripten/stb_image.c"
    $79 = (($78) + 2|0); //@line 2329 "emscripten/stb_image.c"
    $80 = HEAP8[$79>>0]|0; //@line 2329 "emscripten/stb_image.c"
    $81 = $p; //@line 2329 "emscripten/stb_image.c"
    HEAP8[$81>>0] = $80; //@line 2329 "emscripten/stb_image.c"
    $82 = $t1; //@line 2330 "emscripten/stb_image.c"
    $83 = $p; //@line 2330 "emscripten/stb_image.c"
    $84 = (($83) + 2|0); //@line 2330 "emscripten/stb_image.c"
    HEAP8[$84>>0] = $82; //@line 2330 "emscripten/stb_image.c"
   }
   $85 = $p; //@line 2332 "emscripten/stb_image.c"
   $86 = (($85) + 4|0); //@line 2332 "emscripten/stb_image.c"
   $p = $86; //@line 2332 "emscripten/stb_image.c"
   $87 = $i; //@line 2321 "emscripten/stb_image.c"
   $88 = (($87) + 1)|0; //@line 2321 "emscripten/stb_image.c"
   $i = $88; //@line 2321 "emscripten/stb_image.c"
  }
 } else {
  $i = 0; //@line 2336 "emscripten/stb_image.c"
  while(1) {
   $89 = $i; //@line 2336 "emscripten/stb_image.c"
   $90 = $pixel_count; //@line 2336 "emscripten/stb_image.c"
   $91 = ($89>>>0)<($90>>>0); //@line 2336 "emscripten/stb_image.c"
   if (!($91)) {
    break;
   }
   $92 = $p; //@line 2337 "emscripten/stb_image.c"
   $93 = HEAP8[$92>>0]|0; //@line 2337 "emscripten/stb_image.c"
   $t2 = $93; //@line 2337 "emscripten/stb_image.c"
   $94 = $p; //@line 2338 "emscripten/stb_image.c"
   $95 = (($94) + 2|0); //@line 2338 "emscripten/stb_image.c"
   $96 = HEAP8[$95>>0]|0; //@line 2338 "emscripten/stb_image.c"
   $97 = $p; //@line 2338 "emscripten/stb_image.c"
   HEAP8[$97>>0] = $96; //@line 2338 "emscripten/stb_image.c"
   $98 = $t2; //@line 2339 "emscripten/stb_image.c"
   $99 = $p; //@line 2339 "emscripten/stb_image.c"
   $100 = (($99) + 2|0); //@line 2339 "emscripten/stb_image.c"
   HEAP8[$100>>0] = $98; //@line 2339 "emscripten/stb_image.c"
   $101 = $p; //@line 2340 "emscripten/stb_image.c"
   $102 = (($101) + 4|0); //@line 2340 "emscripten/stb_image.c"
   $p = $102; //@line 2340 "emscripten/stb_image.c"
   $103 = $i; //@line 2336 "emscripten/stb_image.c"
   $104 = (($103) + 1)|0; //@line 2336 "emscripten/stb_image.c"
   $i = $104; //@line 2336 "emscripten/stb_image.c"
  }
 }
 STACKTOP = sp;return; //@line 2344 "emscripten/stb_image.c"
}
function __ZL14expand_paletteP3pngPhii($a,$palette,$len,$pal_img_n) {
 $a = $a|0;
 $palette = $palette|0;
 $len = $len|0;
 $pal_img_n = $pal_img_n|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $n = 0, $n1 = 0, $orig = 0, $p = 0, $pixel_count = 0, $temp_out = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $1 = $a;
 $2 = $palette;
 $3 = $len;
 $4 = $pal_img_n;
 $5 = $1; //@line 2257 "emscripten/stb_image.c"
 $6 = HEAP32[$5>>2]|0; //@line 2257 "emscripten/stb_image.c"
 $7 = HEAP32[$6>>2]|0; //@line 2257 "emscripten/stb_image.c"
 $8 = $1; //@line 2257 "emscripten/stb_image.c"
 $9 = HEAP32[$8>>2]|0; //@line 2257 "emscripten/stb_image.c"
 $10 = (($9) + 4|0); //@line 2257 "emscripten/stb_image.c"
 $11 = HEAP32[$10>>2]|0; //@line 2257 "emscripten/stb_image.c"
 $12 = Math_imul($7, $11)|0; //@line 2257 "emscripten/stb_image.c"
 $pixel_count = $12; //@line 2257 "emscripten/stb_image.c"
 $13 = $1; //@line 2258 "emscripten/stb_image.c"
 $14 = (($13) + 12|0); //@line 2258 "emscripten/stb_image.c"
 $15 = HEAP32[$14>>2]|0; //@line 2258 "emscripten/stb_image.c"
 $orig = $15; //@line 2258 "emscripten/stb_image.c"
 $16 = $pixel_count; //@line 2260 "emscripten/stb_image.c"
 $17 = $4; //@line 2260 "emscripten/stb_image.c"
 $18 = Math_imul($16, $17)|0; //@line 2260 "emscripten/stb_image.c"
 $19 = (_malloc($18)|0); //@line 2260 "emscripten/stb_image.c"
 $p = $19; //@line 2260 "emscripten/stb_image.c"
 $20 = $p; //@line 2261 "emscripten/stb_image.c"
 $21 = ($20|0)==(0|0); //@line 2261 "emscripten/stb_image.c"
 if ($21) {
  $22 = (__ZL1ePKc(26624)|0); //@line 2261 "emscripten/stb_image.c"
  $0 = $22; //@line 2261 "emscripten/stb_image.c"
  $103 = $0; //@line 2290 "emscripten/stb_image.c"
  STACKTOP = sp;return ($103|0); //@line 2290 "emscripten/stb_image.c"
 }
 $23 = $p; //@line 2264 "emscripten/stb_image.c"
 $temp_out = $23; //@line 2264 "emscripten/stb_image.c"
 $24 = $4; //@line 2266 "emscripten/stb_image.c"
 $25 = ($24|0)==(3); //@line 2266 "emscripten/stb_image.c"
 if ($25) {
  $i = 0; //@line 2267 "emscripten/stb_image.c"
  while(1) {
   $26 = $i; //@line 2267 "emscripten/stb_image.c"
   $27 = $pixel_count; //@line 2267 "emscripten/stb_image.c"
   $28 = ($26>>>0)<($27>>>0); //@line 2267 "emscripten/stb_image.c"
   if (!($28)) {
    break;
   }
   $29 = $i; //@line 2268 "emscripten/stb_image.c"
   $30 = $orig; //@line 2268 "emscripten/stb_image.c"
   $31 = (($30) + ($29)|0); //@line 2268 "emscripten/stb_image.c"
   $32 = HEAP8[$31>>0]|0; //@line 2268 "emscripten/stb_image.c"
   $33 = $32&255; //@line 2268 "emscripten/stb_image.c"
   $34 = $33<<2; //@line 2268 "emscripten/stb_image.c"
   $n = $34; //@line 2268 "emscripten/stb_image.c"
   $35 = $n; //@line 2269 "emscripten/stb_image.c"
   $36 = $2; //@line 2269 "emscripten/stb_image.c"
   $37 = (($36) + ($35)|0); //@line 2269 "emscripten/stb_image.c"
   $38 = HEAP8[$37>>0]|0; //@line 2269 "emscripten/stb_image.c"
   $39 = $p; //@line 2269 "emscripten/stb_image.c"
   HEAP8[$39>>0] = $38; //@line 2269 "emscripten/stb_image.c"
   $40 = $n; //@line 2270 "emscripten/stb_image.c"
   $41 = (($40) + 1)|0; //@line 2270 "emscripten/stb_image.c"
   $42 = $2; //@line 2270 "emscripten/stb_image.c"
   $43 = (($42) + ($41)|0); //@line 2270 "emscripten/stb_image.c"
   $44 = HEAP8[$43>>0]|0; //@line 2270 "emscripten/stb_image.c"
   $45 = $p; //@line 2270 "emscripten/stb_image.c"
   $46 = (($45) + 1|0); //@line 2270 "emscripten/stb_image.c"
   HEAP8[$46>>0] = $44; //@line 2270 "emscripten/stb_image.c"
   $47 = $n; //@line 2271 "emscripten/stb_image.c"
   $48 = (($47) + 2)|0; //@line 2271 "emscripten/stb_image.c"
   $49 = $2; //@line 2271 "emscripten/stb_image.c"
   $50 = (($49) + ($48)|0); //@line 2271 "emscripten/stb_image.c"
   $51 = HEAP8[$50>>0]|0; //@line 2271 "emscripten/stb_image.c"
   $52 = $p; //@line 2271 "emscripten/stb_image.c"
   $53 = (($52) + 2|0); //@line 2271 "emscripten/stb_image.c"
   HEAP8[$53>>0] = $51; //@line 2271 "emscripten/stb_image.c"
   $54 = $p; //@line 2272 "emscripten/stb_image.c"
   $55 = (($54) + 3|0); //@line 2272 "emscripten/stb_image.c"
   $p = $55; //@line 2272 "emscripten/stb_image.c"
   $56 = $i; //@line 2267 "emscripten/stb_image.c"
   $57 = (($56) + 1)|0; //@line 2267 "emscripten/stb_image.c"
   $i = $57; //@line 2267 "emscripten/stb_image.c"
  }
 } else {
  $i = 0; //@line 2275 "emscripten/stb_image.c"
  while(1) {
   $58 = $i; //@line 2275 "emscripten/stb_image.c"
   $59 = $pixel_count; //@line 2275 "emscripten/stb_image.c"
   $60 = ($58>>>0)<($59>>>0); //@line 2275 "emscripten/stb_image.c"
   if (!($60)) {
    break;
   }
   $61 = $i; //@line 2276 "emscripten/stb_image.c"
   $62 = $orig; //@line 2276 "emscripten/stb_image.c"
   $63 = (($62) + ($61)|0); //@line 2276 "emscripten/stb_image.c"
   $64 = HEAP8[$63>>0]|0; //@line 2276 "emscripten/stb_image.c"
   $65 = $64&255; //@line 2276 "emscripten/stb_image.c"
   $66 = $65<<2; //@line 2276 "emscripten/stb_image.c"
   $n1 = $66; //@line 2276 "emscripten/stb_image.c"
   $67 = $n1; //@line 2277 "emscripten/stb_image.c"
   $68 = $2; //@line 2277 "emscripten/stb_image.c"
   $69 = (($68) + ($67)|0); //@line 2277 "emscripten/stb_image.c"
   $70 = HEAP8[$69>>0]|0; //@line 2277 "emscripten/stb_image.c"
   $71 = $p; //@line 2277 "emscripten/stb_image.c"
   HEAP8[$71>>0] = $70; //@line 2277 "emscripten/stb_image.c"
   $72 = $n1; //@line 2278 "emscripten/stb_image.c"
   $73 = (($72) + 1)|0; //@line 2278 "emscripten/stb_image.c"
   $74 = $2; //@line 2278 "emscripten/stb_image.c"
   $75 = (($74) + ($73)|0); //@line 2278 "emscripten/stb_image.c"
   $76 = HEAP8[$75>>0]|0; //@line 2278 "emscripten/stb_image.c"
   $77 = $p; //@line 2278 "emscripten/stb_image.c"
   $78 = (($77) + 1|0); //@line 2278 "emscripten/stb_image.c"
   HEAP8[$78>>0] = $76; //@line 2278 "emscripten/stb_image.c"
   $79 = $n1; //@line 2279 "emscripten/stb_image.c"
   $80 = (($79) + 2)|0; //@line 2279 "emscripten/stb_image.c"
   $81 = $2; //@line 2279 "emscripten/stb_image.c"
   $82 = (($81) + ($80)|0); //@line 2279 "emscripten/stb_image.c"
   $83 = HEAP8[$82>>0]|0; //@line 2279 "emscripten/stb_image.c"
   $84 = $p; //@line 2279 "emscripten/stb_image.c"
   $85 = (($84) + 2|0); //@line 2279 "emscripten/stb_image.c"
   HEAP8[$85>>0] = $83; //@line 2279 "emscripten/stb_image.c"
   $86 = $n1; //@line 2280 "emscripten/stb_image.c"
   $87 = (($86) + 3)|0; //@line 2280 "emscripten/stb_image.c"
   $88 = $2; //@line 2280 "emscripten/stb_image.c"
   $89 = (($88) + ($87)|0); //@line 2280 "emscripten/stb_image.c"
   $90 = HEAP8[$89>>0]|0; //@line 2280 "emscripten/stb_image.c"
   $91 = $p; //@line 2280 "emscripten/stb_image.c"
   $92 = (($91) + 3|0); //@line 2280 "emscripten/stb_image.c"
   HEAP8[$92>>0] = $90; //@line 2280 "emscripten/stb_image.c"
   $93 = $p; //@line 2281 "emscripten/stb_image.c"
   $94 = (($93) + 4|0); //@line 2281 "emscripten/stb_image.c"
   $p = $94; //@line 2281 "emscripten/stb_image.c"
   $95 = $i; //@line 2275 "emscripten/stb_image.c"
   $96 = (($95) + 1)|0; //@line 2275 "emscripten/stb_image.c"
   $i = $96; //@line 2275 "emscripten/stb_image.c"
  }
 }
 $97 = $1; //@line 2284 "emscripten/stb_image.c"
 $98 = (($97) + 12|0); //@line 2284 "emscripten/stb_image.c"
 $99 = HEAP32[$98>>2]|0; //@line 2284 "emscripten/stb_image.c"
 _free($99); //@line 2284 "emscripten/stb_image.c"
 $100 = $temp_out; //@line 2285 "emscripten/stb_image.c"
 $101 = $1; //@line 2285 "emscripten/stb_image.c"
 $102 = (($101) + 12|0); //@line 2285 "emscripten/stb_image.c"
 HEAP32[$102>>2] = $100; //@line 2285 "emscripten/stb_image.c"
 $0 = 1; //@line 2289 "emscripten/stb_image.c"
 $103 = $0; //@line 2290 "emscripten/stb_image.c"
 STACKTOP = sp;return ($103|0); //@line 2290 "emscripten/stb_image.c"
}
function __ZL20create_png_image_rawP3pngPhjijj($a,$raw,$raw_len,$out_n,$x,$y) {
 $a = $a|0;
 $raw = $raw|0;
 $raw_len = $raw_len|0;
 $out_n = $out_n|0;
 $x = $x|0;
 $y = $y|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
 var $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0;
 var $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0;
 var $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cur = 0, $filter = 0, $i = 0, $img_n = 0, $j = 0, $k = 0, $prior = 0, $s = 0, $stride = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $1 = $a;
 $2 = $raw;
 $3 = $raw_len;
 $4 = $out_n;
 $5 = $x;
 $6 = $y;
 $7 = $1; //@line 2114 "emscripten/stb_image.c"
 $8 = HEAP32[$7>>2]|0; //@line 2114 "emscripten/stb_image.c"
 $s = $8; //@line 2114 "emscripten/stb_image.c"
 $9 = $5; //@line 2115 "emscripten/stb_image.c"
 $10 = $4; //@line 2115 "emscripten/stb_image.c"
 $11 = Math_imul($9, $10)|0; //@line 2115 "emscripten/stb_image.c"
 $stride = $11; //@line 2115 "emscripten/stb_image.c"
 $12 = $s; //@line 2117 "emscripten/stb_image.c"
 $13 = (($12) + 8|0); //@line 2117 "emscripten/stb_image.c"
 $14 = HEAP32[$13>>2]|0; //@line 2117 "emscripten/stb_image.c"
 $img_n = $14; //@line 2117 "emscripten/stb_image.c"
 $15 = $4; //@line 2118 "emscripten/stb_image.c"
 $16 = $s; //@line 2118 "emscripten/stb_image.c"
 $17 = (($16) + 8|0); //@line 2118 "emscripten/stb_image.c"
 $18 = HEAP32[$17>>2]|0; //@line 2118 "emscripten/stb_image.c"
 $19 = ($15|0)==($18|0); //@line 2118 "emscripten/stb_image.c"
 if (!($19)) {
  $20 = $4; //@line 2118 "emscripten/stb_image.c"
  $21 = $s; //@line 2118 "emscripten/stb_image.c"
  $22 = (($21) + 8|0); //@line 2118 "emscripten/stb_image.c"
  $23 = HEAP32[$22>>2]|0; //@line 2118 "emscripten/stb_image.c"
  $24 = (($23) + 1)|0; //@line 2118 "emscripten/stb_image.c"
  $25 = ($20|0)==($24|0); //@line 2118 "emscripten/stb_image.c"
  if (!($25)) {
   ___assert_fail((26936|0),(26712|0),2118,(26984|0)); //@line 2118 "emscripten/stb_image.c"
   // unreachable; //@line 2118 "emscripten/stb_image.c"
  }
 }
 $26 = HEAP32[26256>>2]|0; //@line 2119 "emscripten/stb_image.c"
 $27 = ($26|0)!=(0); //@line 2119 "emscripten/stb_image.c"
 if ($27) {
  $6 = 1; //@line 2119 "emscripten/stb_image.c"
 }
 $28 = $5; //@line 2120 "emscripten/stb_image.c"
 $29 = $6; //@line 2120 "emscripten/stb_image.c"
 $30 = Math_imul($28, $29)|0; //@line 2120 "emscripten/stb_image.c"
 $31 = $4; //@line 2120 "emscripten/stb_image.c"
 $32 = Math_imul($30, $31)|0; //@line 2120 "emscripten/stb_image.c"
 $33 = (_malloc($32)|0); //@line 2120 "emscripten/stb_image.c"
 $34 = $1; //@line 2120 "emscripten/stb_image.c"
 $35 = (($34) + 12|0); //@line 2120 "emscripten/stb_image.c"
 HEAP32[$35>>2] = $33; //@line 2120 "emscripten/stb_image.c"
 $36 = $1; //@line 2121 "emscripten/stb_image.c"
 $37 = (($36) + 12|0); //@line 2121 "emscripten/stb_image.c"
 $38 = HEAP32[$37>>2]|0; //@line 2121 "emscripten/stb_image.c"
 $39 = ($38|0)!=(0|0); //@line 2121 "emscripten/stb_image.c"
 if (!($39)) {
  $40 = (__ZL1ePKc(26624)|0); //@line 2121 "emscripten/stb_image.c"
  $0 = $40; //@line 2121 "emscripten/stb_image.c"
  $763 = $0; //@line 2187 "emscripten/stb_image.c"
  STACKTOP = sp;return ($763|0); //@line 2187 "emscripten/stb_image.c"
 }
 $41 = HEAP32[26256>>2]|0; //@line 2122 "emscripten/stb_image.c"
 $42 = ($41|0)!=(0); //@line 2122 "emscripten/stb_image.c"
 if (!($42)) {
  $43 = $s; //@line 2123 "emscripten/stb_image.c"
  $44 = HEAP32[$43>>2]|0; //@line 2123 "emscripten/stb_image.c"
  $45 = $5; //@line 2123 "emscripten/stb_image.c"
  $46 = ($44|0)==($45|0); //@line 2123 "emscripten/stb_image.c"
  do {
   if ($46) {
    $47 = $s; //@line 2123 "emscripten/stb_image.c"
    $48 = (($47) + 4|0); //@line 2123 "emscripten/stb_image.c"
    $49 = HEAP32[$48>>2]|0; //@line 2123 "emscripten/stb_image.c"
    $50 = $6; //@line 2123 "emscripten/stb_image.c"
    $51 = ($49|0)==($50|0); //@line 2123 "emscripten/stb_image.c"
    if ($51) {
     $52 = $3; //@line 2124 "emscripten/stb_image.c"
     $53 = $img_n; //@line 2124 "emscripten/stb_image.c"
     $54 = $5; //@line 2124 "emscripten/stb_image.c"
     $55 = Math_imul($53, $54)|0; //@line 2124 "emscripten/stb_image.c"
     $56 = (($55) + 1)|0; //@line 2124 "emscripten/stb_image.c"
     $57 = $6; //@line 2124 "emscripten/stb_image.c"
     $58 = Math_imul($56, $57)|0; //@line 2124 "emscripten/stb_image.c"
     $59 = ($52|0)!=($58|0); //@line 2124 "emscripten/stb_image.c"
     if (!($59)) {
      break;
     }
     $60 = (__ZL1ePKc(27008)|0); //@line 2124 "emscripten/stb_image.c"
     $0 = $60; //@line 2124 "emscripten/stb_image.c"
     $763 = $0; //@line 2187 "emscripten/stb_image.c"
     STACKTOP = sp;return ($763|0); //@line 2187 "emscripten/stb_image.c"
    } else {
     label = 14;
    }
   } else {
    label = 14;
   }
  } while(0);
  do {
   if ((label|0) == 14) {
    $61 = $3; //@line 2126 "emscripten/stb_image.c"
    $62 = $img_n; //@line 2126 "emscripten/stb_image.c"
    $63 = $5; //@line 2126 "emscripten/stb_image.c"
    $64 = Math_imul($62, $63)|0; //@line 2126 "emscripten/stb_image.c"
    $65 = (($64) + 1)|0; //@line 2126 "emscripten/stb_image.c"
    $66 = $6; //@line 2126 "emscripten/stb_image.c"
    $67 = Math_imul($65, $66)|0; //@line 2126 "emscripten/stb_image.c"
    $68 = ($61>>>0)<($67>>>0); //@line 2126 "emscripten/stb_image.c"
    if (!($68)) {
     break;
    }
    $69 = (__ZL1ePKc(27008)|0); //@line 2126 "emscripten/stb_image.c"
    $0 = $69; //@line 2126 "emscripten/stb_image.c"
    $763 = $0; //@line 2187 "emscripten/stb_image.c"
    STACKTOP = sp;return ($763|0); //@line 2187 "emscripten/stb_image.c"
   }
  } while(0);
 }
 $j = 0; //@line 2129 "emscripten/stb_image.c"
 while(1) {
  $70 = $j; //@line 2129 "emscripten/stb_image.c"
  $71 = $6; //@line 2129 "emscripten/stb_image.c"
  $72 = ($70>>>0)<($71>>>0); //@line 2129 "emscripten/stb_image.c"
  if (!($72)) {
   label = 173;
   break;
  }
  $73 = $1; //@line 2130 "emscripten/stb_image.c"
  $74 = (($73) + 12|0); //@line 2130 "emscripten/stb_image.c"
  $75 = HEAP32[$74>>2]|0; //@line 2130 "emscripten/stb_image.c"
  $76 = $stride; //@line 2130 "emscripten/stb_image.c"
  $77 = $j; //@line 2130 "emscripten/stb_image.c"
  $78 = Math_imul($76, $77)|0; //@line 2130 "emscripten/stb_image.c"
  $79 = (($75) + ($78)|0); //@line 2130 "emscripten/stb_image.c"
  $cur = $79; //@line 2130 "emscripten/stb_image.c"
  $80 = $cur; //@line 2131 "emscripten/stb_image.c"
  $81 = $stride; //@line 2131 "emscripten/stb_image.c"
  $82 = (0 - ($81))|0; //@line 2131 "emscripten/stb_image.c"
  $83 = (($80) + ($82)|0); //@line 2131 "emscripten/stb_image.c"
  $prior = $83; //@line 2131 "emscripten/stb_image.c"
  $84 = $2; //@line 2132 "emscripten/stb_image.c"
  $85 = (($84) + 1|0); //@line 2132 "emscripten/stb_image.c"
  $2 = $85; //@line 2132 "emscripten/stb_image.c"
  $86 = HEAP8[$84>>0]|0; //@line 2132 "emscripten/stb_image.c"
  $87 = $86&255; //@line 2132 "emscripten/stb_image.c"
  $filter = $87; //@line 2132 "emscripten/stb_image.c"
  $88 = $filter; //@line 2133 "emscripten/stb_image.c"
  $89 = ($88|0)>(4); //@line 2133 "emscripten/stb_image.c"
  if ($89) {
   label = 21;
   break;
  }
  $91 = $j; //@line 2135 "emscripten/stb_image.c"
  $92 = ($91|0)==(0); //@line 2135 "emscripten/stb_image.c"
  if ($92) {
   $93 = $filter; //@line 2135 "emscripten/stb_image.c"
   $94 = (27048 + ($93)|0); //@line 2135 "emscripten/stb_image.c"
   $95 = HEAP8[$94>>0]|0; //@line 2135 "emscripten/stb_image.c"
   $96 = $95&255; //@line 2135 "emscripten/stb_image.c"
   $filter = $96; //@line 2135 "emscripten/stb_image.c"
  }
  $k = 0; //@line 2137 "emscripten/stb_image.c"
  while(1) {
   $97 = $k; //@line 2137 "emscripten/stb_image.c"
   $98 = $img_n; //@line 2137 "emscripten/stb_image.c"
   $99 = ($97|0)<($98|0); //@line 2137 "emscripten/stb_image.c"
   if (!($99)) {
    break;
   }
   $100 = $filter; //@line 2138 "emscripten/stb_image.c"
   switch ($100|0) {
   case 6:  {
    $169 = $k; //@line 2145 "emscripten/stb_image.c"
    $170 = $2; //@line 2145 "emscripten/stb_image.c"
    $171 = (($170) + ($169)|0); //@line 2145 "emscripten/stb_image.c"
    $172 = HEAP8[$171>>0]|0; //@line 2145 "emscripten/stb_image.c"
    $173 = $k; //@line 2145 "emscripten/stb_image.c"
    $174 = $cur; //@line 2145 "emscripten/stb_image.c"
    $175 = (($174) + ($173)|0); //@line 2145 "emscripten/stb_image.c"
    HEAP8[$175>>0] = $172; //@line 2145 "emscripten/stb_image.c"
    break;
   }
   case 5:  {
    $162 = $k; //@line 2144 "emscripten/stb_image.c"
    $163 = $2; //@line 2144 "emscripten/stb_image.c"
    $164 = (($163) + ($162)|0); //@line 2144 "emscripten/stb_image.c"
    $165 = HEAP8[$164>>0]|0; //@line 2144 "emscripten/stb_image.c"
    $166 = $k; //@line 2144 "emscripten/stb_image.c"
    $167 = $cur; //@line 2144 "emscripten/stb_image.c"
    $168 = (($167) + ($166)|0); //@line 2144 "emscripten/stb_image.c"
    HEAP8[$168>>0] = $165; //@line 2144 "emscripten/stb_image.c"
    break;
   }
   case 4:  {
    $146 = $k; //@line 2143 "emscripten/stb_image.c"
    $147 = $2; //@line 2143 "emscripten/stb_image.c"
    $148 = (($147) + ($146)|0); //@line 2143 "emscripten/stb_image.c"
    $149 = HEAP8[$148>>0]|0; //@line 2143 "emscripten/stb_image.c"
    $150 = $149&255; //@line 2143 "emscripten/stb_image.c"
    $151 = $k; //@line 2143 "emscripten/stb_image.c"
    $152 = $prior; //@line 2143 "emscripten/stb_image.c"
    $153 = (($152) + ($151)|0); //@line 2143 "emscripten/stb_image.c"
    $154 = HEAP8[$153>>0]|0; //@line 2143 "emscripten/stb_image.c"
    $155 = $154&255; //@line 2143 "emscripten/stb_image.c"
    $156 = (__ZL5paethiii(0,$155,0)|0); //@line 2143 "emscripten/stb_image.c"
    $157 = (($150) + ($156))|0; //@line 2143 "emscripten/stb_image.c"
    $158 = $157&255; //@line 2143 "emscripten/stb_image.c"
    $159 = $k; //@line 2143 "emscripten/stb_image.c"
    $160 = $cur; //@line 2143 "emscripten/stb_image.c"
    $161 = (($160) + ($159)|0); //@line 2143 "emscripten/stb_image.c"
    HEAP8[$161>>0] = $158; //@line 2143 "emscripten/stb_image.c"
    break;
   }
   case 3:  {
    $130 = $k; //@line 2142 "emscripten/stb_image.c"
    $131 = $2; //@line 2142 "emscripten/stb_image.c"
    $132 = (($131) + ($130)|0); //@line 2142 "emscripten/stb_image.c"
    $133 = HEAP8[$132>>0]|0; //@line 2142 "emscripten/stb_image.c"
    $134 = $133&255; //@line 2142 "emscripten/stb_image.c"
    $135 = $k; //@line 2142 "emscripten/stb_image.c"
    $136 = $prior; //@line 2142 "emscripten/stb_image.c"
    $137 = (($136) + ($135)|0); //@line 2142 "emscripten/stb_image.c"
    $138 = HEAP8[$137>>0]|0; //@line 2142 "emscripten/stb_image.c"
    $139 = $138&255; //@line 2142 "emscripten/stb_image.c"
    $140 = $139 >> 1; //@line 2142 "emscripten/stb_image.c"
    $141 = (($134) + ($140))|0; //@line 2142 "emscripten/stb_image.c"
    $142 = $141&255; //@line 2142 "emscripten/stb_image.c"
    $143 = $k; //@line 2142 "emscripten/stb_image.c"
    $144 = $cur; //@line 2142 "emscripten/stb_image.c"
    $145 = (($144) + ($143)|0); //@line 2142 "emscripten/stb_image.c"
    HEAP8[$145>>0] = $142; //@line 2142 "emscripten/stb_image.c"
    break;
   }
   case 2:  {
    $115 = $k; //@line 2141 "emscripten/stb_image.c"
    $116 = $2; //@line 2141 "emscripten/stb_image.c"
    $117 = (($116) + ($115)|0); //@line 2141 "emscripten/stb_image.c"
    $118 = HEAP8[$117>>0]|0; //@line 2141 "emscripten/stb_image.c"
    $119 = $118&255; //@line 2141 "emscripten/stb_image.c"
    $120 = $k; //@line 2141 "emscripten/stb_image.c"
    $121 = $prior; //@line 2141 "emscripten/stb_image.c"
    $122 = (($121) + ($120)|0); //@line 2141 "emscripten/stb_image.c"
    $123 = HEAP8[$122>>0]|0; //@line 2141 "emscripten/stb_image.c"
    $124 = $123&255; //@line 2141 "emscripten/stb_image.c"
    $125 = (($119) + ($124))|0; //@line 2141 "emscripten/stb_image.c"
    $126 = $125&255; //@line 2141 "emscripten/stb_image.c"
    $127 = $k; //@line 2141 "emscripten/stb_image.c"
    $128 = $cur; //@line 2141 "emscripten/stb_image.c"
    $129 = (($128) + ($127)|0); //@line 2141 "emscripten/stb_image.c"
    HEAP8[$129>>0] = $126; //@line 2141 "emscripten/stb_image.c"
    break;
   }
   case 0:  {
    $101 = $k; //@line 2139 "emscripten/stb_image.c"
    $102 = $2; //@line 2139 "emscripten/stb_image.c"
    $103 = (($102) + ($101)|0); //@line 2139 "emscripten/stb_image.c"
    $104 = HEAP8[$103>>0]|0; //@line 2139 "emscripten/stb_image.c"
    $105 = $k; //@line 2139 "emscripten/stb_image.c"
    $106 = $cur; //@line 2139 "emscripten/stb_image.c"
    $107 = (($106) + ($105)|0); //@line 2139 "emscripten/stb_image.c"
    HEAP8[$107>>0] = $104; //@line 2139 "emscripten/stb_image.c"
    break;
   }
   case 1:  {
    $108 = $k; //@line 2140 "emscripten/stb_image.c"
    $109 = $2; //@line 2140 "emscripten/stb_image.c"
    $110 = (($109) + ($108)|0); //@line 2140 "emscripten/stb_image.c"
    $111 = HEAP8[$110>>0]|0; //@line 2140 "emscripten/stb_image.c"
    $112 = $k; //@line 2140 "emscripten/stb_image.c"
    $113 = $cur; //@line 2140 "emscripten/stb_image.c"
    $114 = (($113) + ($112)|0); //@line 2140 "emscripten/stb_image.c"
    HEAP8[$114>>0] = $111; //@line 2140 "emscripten/stb_image.c"
    break;
   }
   default: {
   }
   }
   $176 = $k; //@line 2137 "emscripten/stb_image.c"
   $177 = (($176) + 1)|0; //@line 2137 "emscripten/stb_image.c"
   $k = $177; //@line 2137 "emscripten/stb_image.c"
  }
  $178 = $img_n; //@line 2148 "emscripten/stb_image.c"
  $179 = $4; //@line 2148 "emscripten/stb_image.c"
  $180 = ($178|0)!=($179|0); //@line 2148 "emscripten/stb_image.c"
  if ($180) {
   $181 = $img_n; //@line 2148 "emscripten/stb_image.c"
   $182 = $cur; //@line 2148 "emscripten/stb_image.c"
   $183 = (($182) + ($181)|0); //@line 2148 "emscripten/stb_image.c"
   HEAP8[$183>>0] = -1; //@line 2148 "emscripten/stb_image.c"
  }
  $184 = $img_n; //@line 2149 "emscripten/stb_image.c"
  $185 = $2; //@line 2149 "emscripten/stb_image.c"
  $186 = (($185) + ($184)|0); //@line 2149 "emscripten/stb_image.c"
  $2 = $186; //@line 2149 "emscripten/stb_image.c"
  $187 = $4; //@line 2150 "emscripten/stb_image.c"
  $188 = $cur; //@line 2150 "emscripten/stb_image.c"
  $189 = (($188) + ($187)|0); //@line 2150 "emscripten/stb_image.c"
  $cur = $189; //@line 2150 "emscripten/stb_image.c"
  $190 = $4; //@line 2151 "emscripten/stb_image.c"
  $191 = $prior; //@line 2151 "emscripten/stb_image.c"
  $192 = (($191) + ($190)|0); //@line 2151 "emscripten/stb_image.c"
  $prior = $192; //@line 2151 "emscripten/stb_image.c"
  $193 = $img_n; //@line 2153 "emscripten/stb_image.c"
  $194 = $4; //@line 2153 "emscripten/stb_image.c"
  $195 = ($193|0)==($194|0); //@line 2153 "emscripten/stb_image.c"
  if ($195) {
   $196 = $filter; //@line 2158 "emscripten/stb_image.c"
   switch ($196|0) {
   case 6:  {
    $428 = $5; //@line 2165 "emscripten/stb_image.c"
    $429 = (($428) - 1)|0; //@line 2165 "emscripten/stb_image.c"
    $i = $429; //@line 2165 "emscripten/stb_image.c"
    while(1) {
     $430 = $i; //@line 2165 "emscripten/stb_image.c"
     $431 = ($430>>>0)>=(1); //@line 2165 "emscripten/stb_image.c"
     if (!($431)) {
      break;
     }
     $k = 0; //@line 2165 "emscripten/stb_image.c"
     while(1) {
      $432 = $k; //@line 2165 "emscripten/stb_image.c"
      $433 = $img_n; //@line 2165 "emscripten/stb_image.c"
      $434 = ($432|0)<($433|0); //@line 2165 "emscripten/stb_image.c"
      if (!($434)) {
       break;
      }
      $435 = $k; //@line 2165 "emscripten/stb_image.c"
      $436 = $2; //@line 2165 "emscripten/stb_image.c"
      $437 = (($436) + ($435)|0); //@line 2165 "emscripten/stb_image.c"
      $438 = HEAP8[$437>>0]|0; //@line 2165 "emscripten/stb_image.c"
      $439 = $438&255; //@line 2165 "emscripten/stb_image.c"
      $440 = $k; //@line 2165 "emscripten/stb_image.c"
      $441 = $img_n; //@line 2165 "emscripten/stb_image.c"
      $442 = (($440) - ($441))|0; //@line 2165 "emscripten/stb_image.c"
      $443 = $cur; //@line 2165 "emscripten/stb_image.c"
      $444 = (($443) + ($442)|0); //@line 2165 "emscripten/stb_image.c"
      $445 = HEAP8[$444>>0]|0; //@line 2165 "emscripten/stb_image.c"
      $446 = $445&255; //@line 2165 "emscripten/stb_image.c"
      $447 = (__ZL5paethiii($446,0,0)|0); //@line 2165 "emscripten/stb_image.c"
      $448 = (($439) + ($447))|0; //@line 2165 "emscripten/stb_image.c"
      $449 = $448&255; //@line 2165 "emscripten/stb_image.c"
      $450 = $k; //@line 2165 "emscripten/stb_image.c"
      $451 = $cur; //@line 2165 "emscripten/stb_image.c"
      $452 = (($451) + ($450)|0); //@line 2165 "emscripten/stb_image.c"
      HEAP8[$452>>0] = $449; //@line 2165 "emscripten/stb_image.c"
      $453 = $k; //@line 2165 "emscripten/stb_image.c"
      $454 = (($453) + 1)|0; //@line 2165 "emscripten/stb_image.c"
      $k = $454; //@line 2165 "emscripten/stb_image.c"
     }
     $455 = $i; //@line 2165 "emscripten/stb_image.c"
     $456 = (($455) + -1)|0; //@line 2165 "emscripten/stb_image.c"
     $i = $456; //@line 2165 "emscripten/stb_image.c"
     $457 = $img_n; //@line 2165 "emscripten/stb_image.c"
     $458 = $2; //@line 2165 "emscripten/stb_image.c"
     $459 = (($458) + ($457)|0); //@line 2165 "emscripten/stb_image.c"
     $2 = $459; //@line 2165 "emscripten/stb_image.c"
     $460 = $img_n; //@line 2165 "emscripten/stb_image.c"
     $461 = $cur; //@line 2165 "emscripten/stb_image.c"
     $462 = (($461) + ($460)|0); //@line 2165 "emscripten/stb_image.c"
     $cur = $462; //@line 2165 "emscripten/stb_image.c"
     $463 = $img_n; //@line 2165 "emscripten/stb_image.c"
     $464 = $prior; //@line 2165 "emscripten/stb_image.c"
     $465 = (($464) + ($463)|0); //@line 2165 "emscripten/stb_image.c"
     $prior = $465; //@line 2165 "emscripten/stb_image.c"
    }
    break;
   }
   case 3:  {
    $296 = $5; //@line 2162 "emscripten/stb_image.c"
    $297 = (($296) - 1)|0; //@line 2162 "emscripten/stb_image.c"
    $i = $297; //@line 2162 "emscripten/stb_image.c"
    while(1) {
     $298 = $i; //@line 2162 "emscripten/stb_image.c"
     $299 = ($298>>>0)>=(1); //@line 2162 "emscripten/stb_image.c"
     if (!($299)) {
      break;
     }
     $k = 0; //@line 2162 "emscripten/stb_image.c"
     while(1) {
      $300 = $k; //@line 2162 "emscripten/stb_image.c"
      $301 = $img_n; //@line 2162 "emscripten/stb_image.c"
      $302 = ($300|0)<($301|0); //@line 2162 "emscripten/stb_image.c"
      if (!($302)) {
       break;
      }
      $303 = $k; //@line 2162 "emscripten/stb_image.c"
      $304 = $2; //@line 2162 "emscripten/stb_image.c"
      $305 = (($304) + ($303)|0); //@line 2162 "emscripten/stb_image.c"
      $306 = HEAP8[$305>>0]|0; //@line 2162 "emscripten/stb_image.c"
      $307 = $306&255; //@line 2162 "emscripten/stb_image.c"
      $308 = $k; //@line 2162 "emscripten/stb_image.c"
      $309 = $prior; //@line 2162 "emscripten/stb_image.c"
      $310 = (($309) + ($308)|0); //@line 2162 "emscripten/stb_image.c"
      $311 = HEAP8[$310>>0]|0; //@line 2162 "emscripten/stb_image.c"
      $312 = $311&255; //@line 2162 "emscripten/stb_image.c"
      $313 = $k; //@line 2162 "emscripten/stb_image.c"
      $314 = $img_n; //@line 2162 "emscripten/stb_image.c"
      $315 = (($313) - ($314))|0; //@line 2162 "emscripten/stb_image.c"
      $316 = $cur; //@line 2162 "emscripten/stb_image.c"
      $317 = (($316) + ($315)|0); //@line 2162 "emscripten/stb_image.c"
      $318 = HEAP8[$317>>0]|0; //@line 2162 "emscripten/stb_image.c"
      $319 = $318&255; //@line 2162 "emscripten/stb_image.c"
      $320 = (($312) + ($319))|0; //@line 2162 "emscripten/stb_image.c"
      $321 = $320 >> 1; //@line 2162 "emscripten/stb_image.c"
      $322 = (($307) + ($321))|0; //@line 2162 "emscripten/stb_image.c"
      $323 = $322&255; //@line 2162 "emscripten/stb_image.c"
      $324 = $k; //@line 2162 "emscripten/stb_image.c"
      $325 = $cur; //@line 2162 "emscripten/stb_image.c"
      $326 = (($325) + ($324)|0); //@line 2162 "emscripten/stb_image.c"
      HEAP8[$326>>0] = $323; //@line 2162 "emscripten/stb_image.c"
      $327 = $k; //@line 2162 "emscripten/stb_image.c"
      $328 = (($327) + 1)|0; //@line 2162 "emscripten/stb_image.c"
      $k = $328; //@line 2162 "emscripten/stb_image.c"
     }
     $329 = $i; //@line 2162 "emscripten/stb_image.c"
     $330 = (($329) + -1)|0; //@line 2162 "emscripten/stb_image.c"
     $i = $330; //@line 2162 "emscripten/stb_image.c"
     $331 = $img_n; //@line 2162 "emscripten/stb_image.c"
     $332 = $2; //@line 2162 "emscripten/stb_image.c"
     $333 = (($332) + ($331)|0); //@line 2162 "emscripten/stb_image.c"
     $2 = $333; //@line 2162 "emscripten/stb_image.c"
     $334 = $img_n; //@line 2162 "emscripten/stb_image.c"
     $335 = $cur; //@line 2162 "emscripten/stb_image.c"
     $336 = (($335) + ($334)|0); //@line 2162 "emscripten/stb_image.c"
     $cur = $336; //@line 2162 "emscripten/stb_image.c"
     $337 = $img_n; //@line 2162 "emscripten/stb_image.c"
     $338 = $prior; //@line 2162 "emscripten/stb_image.c"
     $339 = (($338) + ($337)|0); //@line 2162 "emscripten/stb_image.c"
     $prior = $339; //@line 2162 "emscripten/stb_image.c"
    }
    break;
   }
   case 2:  {
    $261 = $5; //@line 2161 "emscripten/stb_image.c"
    $262 = (($261) - 1)|0; //@line 2161 "emscripten/stb_image.c"
    $i = $262; //@line 2161 "emscripten/stb_image.c"
    while(1) {
     $263 = $i; //@line 2161 "emscripten/stb_image.c"
     $264 = ($263>>>0)>=(1); //@line 2161 "emscripten/stb_image.c"
     if (!($264)) {
      break;
     }
     $k = 0; //@line 2161 "emscripten/stb_image.c"
     while(1) {
      $265 = $k; //@line 2161 "emscripten/stb_image.c"
      $266 = $img_n; //@line 2161 "emscripten/stb_image.c"
      $267 = ($265|0)<($266|0); //@line 2161 "emscripten/stb_image.c"
      if (!($267)) {
       break;
      }
      $268 = $k; //@line 2161 "emscripten/stb_image.c"
      $269 = $2; //@line 2161 "emscripten/stb_image.c"
      $270 = (($269) + ($268)|0); //@line 2161 "emscripten/stb_image.c"
      $271 = HEAP8[$270>>0]|0; //@line 2161 "emscripten/stb_image.c"
      $272 = $271&255; //@line 2161 "emscripten/stb_image.c"
      $273 = $k; //@line 2161 "emscripten/stb_image.c"
      $274 = $prior; //@line 2161 "emscripten/stb_image.c"
      $275 = (($274) + ($273)|0); //@line 2161 "emscripten/stb_image.c"
      $276 = HEAP8[$275>>0]|0; //@line 2161 "emscripten/stb_image.c"
      $277 = $276&255; //@line 2161 "emscripten/stb_image.c"
      $278 = (($272) + ($277))|0; //@line 2161 "emscripten/stb_image.c"
      $279 = $278&255; //@line 2161 "emscripten/stb_image.c"
      $280 = $k; //@line 2161 "emscripten/stb_image.c"
      $281 = $cur; //@line 2161 "emscripten/stb_image.c"
      $282 = (($281) + ($280)|0); //@line 2161 "emscripten/stb_image.c"
      HEAP8[$282>>0] = $279; //@line 2161 "emscripten/stb_image.c"
      $283 = $k; //@line 2161 "emscripten/stb_image.c"
      $284 = (($283) + 1)|0; //@line 2161 "emscripten/stb_image.c"
      $k = $284; //@line 2161 "emscripten/stb_image.c"
     }
     $285 = $i; //@line 2161 "emscripten/stb_image.c"
     $286 = (($285) + -1)|0; //@line 2161 "emscripten/stb_image.c"
     $i = $286; //@line 2161 "emscripten/stb_image.c"
     $287 = $img_n; //@line 2161 "emscripten/stb_image.c"
     $288 = $2; //@line 2161 "emscripten/stb_image.c"
     $289 = (($288) + ($287)|0); //@line 2161 "emscripten/stb_image.c"
     $2 = $289; //@line 2161 "emscripten/stb_image.c"
     $290 = $img_n; //@line 2161 "emscripten/stb_image.c"
     $291 = $cur; //@line 2161 "emscripten/stb_image.c"
     $292 = (($291) + ($290)|0); //@line 2161 "emscripten/stb_image.c"
     $cur = $292; //@line 2161 "emscripten/stb_image.c"
     $293 = $img_n; //@line 2161 "emscripten/stb_image.c"
     $294 = $prior; //@line 2161 "emscripten/stb_image.c"
     $295 = (($294) + ($293)|0); //@line 2161 "emscripten/stb_image.c"
     $prior = $295; //@line 2161 "emscripten/stb_image.c"
    }
    break;
   }
   case 4:  {
    $340 = $5; //@line 2163 "emscripten/stb_image.c"
    $341 = (($340) - 1)|0; //@line 2163 "emscripten/stb_image.c"
    $i = $341; //@line 2163 "emscripten/stb_image.c"
    while(1) {
     $342 = $i; //@line 2163 "emscripten/stb_image.c"
     $343 = ($342>>>0)>=(1); //@line 2163 "emscripten/stb_image.c"
     if (!($343)) {
      break;
     }
     $k = 0; //@line 2163 "emscripten/stb_image.c"
     while(1) {
      $344 = $k; //@line 2163 "emscripten/stb_image.c"
      $345 = $img_n; //@line 2163 "emscripten/stb_image.c"
      $346 = ($344|0)<($345|0); //@line 2163 "emscripten/stb_image.c"
      if (!($346)) {
       break;
      }
      $347 = $k; //@line 2163 "emscripten/stb_image.c"
      $348 = $2; //@line 2163 "emscripten/stb_image.c"
      $349 = (($348) + ($347)|0); //@line 2163 "emscripten/stb_image.c"
      $350 = HEAP8[$349>>0]|0; //@line 2163 "emscripten/stb_image.c"
      $351 = $350&255; //@line 2163 "emscripten/stb_image.c"
      $352 = $k; //@line 2163 "emscripten/stb_image.c"
      $353 = $img_n; //@line 2163 "emscripten/stb_image.c"
      $354 = (($352) - ($353))|0; //@line 2163 "emscripten/stb_image.c"
      $355 = $cur; //@line 2163 "emscripten/stb_image.c"
      $356 = (($355) + ($354)|0); //@line 2163 "emscripten/stb_image.c"
      $357 = HEAP8[$356>>0]|0; //@line 2163 "emscripten/stb_image.c"
      $358 = $357&255; //@line 2163 "emscripten/stb_image.c"
      $359 = $k; //@line 2163 "emscripten/stb_image.c"
      $360 = $prior; //@line 2163 "emscripten/stb_image.c"
      $361 = (($360) + ($359)|0); //@line 2163 "emscripten/stb_image.c"
      $362 = HEAP8[$361>>0]|0; //@line 2163 "emscripten/stb_image.c"
      $363 = $362&255; //@line 2163 "emscripten/stb_image.c"
      $364 = $k; //@line 2163 "emscripten/stb_image.c"
      $365 = $img_n; //@line 2163 "emscripten/stb_image.c"
      $366 = (($364) - ($365))|0; //@line 2163 "emscripten/stb_image.c"
      $367 = $prior; //@line 2163 "emscripten/stb_image.c"
      $368 = (($367) + ($366)|0); //@line 2163 "emscripten/stb_image.c"
      $369 = HEAP8[$368>>0]|0; //@line 2163 "emscripten/stb_image.c"
      $370 = $369&255; //@line 2163 "emscripten/stb_image.c"
      $371 = (__ZL5paethiii($358,$363,$370)|0); //@line 2163 "emscripten/stb_image.c"
      $372 = (($351) + ($371))|0; //@line 2163 "emscripten/stb_image.c"
      $373 = $372&255; //@line 2163 "emscripten/stb_image.c"
      $374 = $k; //@line 2163 "emscripten/stb_image.c"
      $375 = $cur; //@line 2163 "emscripten/stb_image.c"
      $376 = (($375) + ($374)|0); //@line 2163 "emscripten/stb_image.c"
      HEAP8[$376>>0] = $373; //@line 2163 "emscripten/stb_image.c"
      $377 = $k; //@line 2163 "emscripten/stb_image.c"
      $378 = (($377) + 1)|0; //@line 2163 "emscripten/stb_image.c"
      $k = $378; //@line 2163 "emscripten/stb_image.c"
     }
     $379 = $i; //@line 2163 "emscripten/stb_image.c"
     $380 = (($379) + -1)|0; //@line 2163 "emscripten/stb_image.c"
     $i = $380; //@line 2163 "emscripten/stb_image.c"
     $381 = $img_n; //@line 2163 "emscripten/stb_image.c"
     $382 = $2; //@line 2163 "emscripten/stb_image.c"
     $383 = (($382) + ($381)|0); //@line 2163 "emscripten/stb_image.c"
     $2 = $383; //@line 2163 "emscripten/stb_image.c"
     $384 = $img_n; //@line 2163 "emscripten/stb_image.c"
     $385 = $cur; //@line 2163 "emscripten/stb_image.c"
     $386 = (($385) + ($384)|0); //@line 2163 "emscripten/stb_image.c"
     $cur = $386; //@line 2163 "emscripten/stb_image.c"
     $387 = $img_n; //@line 2163 "emscripten/stb_image.c"
     $388 = $prior; //@line 2163 "emscripten/stb_image.c"
     $389 = (($388) + ($387)|0); //@line 2163 "emscripten/stb_image.c"
     $prior = $389; //@line 2163 "emscripten/stb_image.c"
    }
    break;
   }
   case 5:  {
    $390 = $5; //@line 2164 "emscripten/stb_image.c"
    $391 = (($390) - 1)|0; //@line 2164 "emscripten/stb_image.c"
    $i = $391; //@line 2164 "emscripten/stb_image.c"
    while(1) {
     $392 = $i; //@line 2164 "emscripten/stb_image.c"
     $393 = ($392>>>0)>=(1); //@line 2164 "emscripten/stb_image.c"
     if (!($393)) {
      break;
     }
     $k = 0; //@line 2164 "emscripten/stb_image.c"
     while(1) {
      $394 = $k; //@line 2164 "emscripten/stb_image.c"
      $395 = $img_n; //@line 2164 "emscripten/stb_image.c"
      $396 = ($394|0)<($395|0); //@line 2164 "emscripten/stb_image.c"
      if (!($396)) {
       break;
      }
      $397 = $k; //@line 2164 "emscripten/stb_image.c"
      $398 = $2; //@line 2164 "emscripten/stb_image.c"
      $399 = (($398) + ($397)|0); //@line 2164 "emscripten/stb_image.c"
      $400 = HEAP8[$399>>0]|0; //@line 2164 "emscripten/stb_image.c"
      $401 = $400&255; //@line 2164 "emscripten/stb_image.c"
      $402 = $k; //@line 2164 "emscripten/stb_image.c"
      $403 = $img_n; //@line 2164 "emscripten/stb_image.c"
      $404 = (($402) - ($403))|0; //@line 2164 "emscripten/stb_image.c"
      $405 = $cur; //@line 2164 "emscripten/stb_image.c"
      $406 = (($405) + ($404)|0); //@line 2164 "emscripten/stb_image.c"
      $407 = HEAP8[$406>>0]|0; //@line 2164 "emscripten/stb_image.c"
      $408 = $407&255; //@line 2164 "emscripten/stb_image.c"
      $409 = $408 >> 1; //@line 2164 "emscripten/stb_image.c"
      $410 = (($401) + ($409))|0; //@line 2164 "emscripten/stb_image.c"
      $411 = $410&255; //@line 2164 "emscripten/stb_image.c"
      $412 = $k; //@line 2164 "emscripten/stb_image.c"
      $413 = $cur; //@line 2164 "emscripten/stb_image.c"
      $414 = (($413) + ($412)|0); //@line 2164 "emscripten/stb_image.c"
      HEAP8[$414>>0] = $411; //@line 2164 "emscripten/stb_image.c"
      $415 = $k; //@line 2164 "emscripten/stb_image.c"
      $416 = (($415) + 1)|0; //@line 2164 "emscripten/stb_image.c"
      $k = $416; //@line 2164 "emscripten/stb_image.c"
     }
     $417 = $i; //@line 2164 "emscripten/stb_image.c"
     $418 = (($417) + -1)|0; //@line 2164 "emscripten/stb_image.c"
     $i = $418; //@line 2164 "emscripten/stb_image.c"
     $419 = $img_n; //@line 2164 "emscripten/stb_image.c"
     $420 = $2; //@line 2164 "emscripten/stb_image.c"
     $421 = (($420) + ($419)|0); //@line 2164 "emscripten/stb_image.c"
     $2 = $421; //@line 2164 "emscripten/stb_image.c"
     $422 = $img_n; //@line 2164 "emscripten/stb_image.c"
     $423 = $cur; //@line 2164 "emscripten/stb_image.c"
     $424 = (($423) + ($422)|0); //@line 2164 "emscripten/stb_image.c"
     $cur = $424; //@line 2164 "emscripten/stb_image.c"
     $425 = $img_n; //@line 2164 "emscripten/stb_image.c"
     $426 = $prior; //@line 2164 "emscripten/stb_image.c"
     $427 = (($426) + ($425)|0); //@line 2164 "emscripten/stb_image.c"
     $prior = $427; //@line 2164 "emscripten/stb_image.c"
    }
    break;
   }
   case 0:  {
    $197 = $5; //@line 2159 "emscripten/stb_image.c"
    $198 = (($197) - 1)|0; //@line 2159 "emscripten/stb_image.c"
    $i = $198; //@line 2159 "emscripten/stb_image.c"
    while(1) {
     $199 = $i; //@line 2159 "emscripten/stb_image.c"
     $200 = ($199>>>0)>=(1); //@line 2159 "emscripten/stb_image.c"
     if (!($200)) {
      break;
     }
     $k = 0; //@line 2159 "emscripten/stb_image.c"
     while(1) {
      $201 = $k; //@line 2159 "emscripten/stb_image.c"
      $202 = $img_n; //@line 2159 "emscripten/stb_image.c"
      $203 = ($201|0)<($202|0); //@line 2159 "emscripten/stb_image.c"
      if (!($203)) {
       break;
      }
      $204 = $k; //@line 2159 "emscripten/stb_image.c"
      $205 = $2; //@line 2159 "emscripten/stb_image.c"
      $206 = (($205) + ($204)|0); //@line 2159 "emscripten/stb_image.c"
      $207 = HEAP8[$206>>0]|0; //@line 2159 "emscripten/stb_image.c"
      $208 = $k; //@line 2159 "emscripten/stb_image.c"
      $209 = $cur; //@line 2159 "emscripten/stb_image.c"
      $210 = (($209) + ($208)|0); //@line 2159 "emscripten/stb_image.c"
      HEAP8[$210>>0] = $207; //@line 2159 "emscripten/stb_image.c"
      $211 = $k; //@line 2159 "emscripten/stb_image.c"
      $212 = (($211) + 1)|0; //@line 2159 "emscripten/stb_image.c"
      $k = $212; //@line 2159 "emscripten/stb_image.c"
     }
     $213 = $i; //@line 2159 "emscripten/stb_image.c"
     $214 = (($213) + -1)|0; //@line 2159 "emscripten/stb_image.c"
     $i = $214; //@line 2159 "emscripten/stb_image.c"
     $215 = $img_n; //@line 2159 "emscripten/stb_image.c"
     $216 = $2; //@line 2159 "emscripten/stb_image.c"
     $217 = (($216) + ($215)|0); //@line 2159 "emscripten/stb_image.c"
     $2 = $217; //@line 2159 "emscripten/stb_image.c"
     $218 = $img_n; //@line 2159 "emscripten/stb_image.c"
     $219 = $cur; //@line 2159 "emscripten/stb_image.c"
     $220 = (($219) + ($218)|0); //@line 2159 "emscripten/stb_image.c"
     $cur = $220; //@line 2159 "emscripten/stb_image.c"
     $221 = $img_n; //@line 2159 "emscripten/stb_image.c"
     $222 = $prior; //@line 2159 "emscripten/stb_image.c"
     $223 = (($222) + ($221)|0); //@line 2159 "emscripten/stb_image.c"
     $prior = $223; //@line 2159 "emscripten/stb_image.c"
    }
    break;
   }
   case 1:  {
    $224 = $5; //@line 2160 "emscripten/stb_image.c"
    $225 = (($224) - 1)|0; //@line 2160 "emscripten/stb_image.c"
    $i = $225; //@line 2160 "emscripten/stb_image.c"
    while(1) {
     $226 = $i; //@line 2160 "emscripten/stb_image.c"
     $227 = ($226>>>0)>=(1); //@line 2160 "emscripten/stb_image.c"
     if (!($227)) {
      break;
     }
     $k = 0; //@line 2160 "emscripten/stb_image.c"
     while(1) {
      $228 = $k; //@line 2160 "emscripten/stb_image.c"
      $229 = $img_n; //@line 2160 "emscripten/stb_image.c"
      $230 = ($228|0)<($229|0); //@line 2160 "emscripten/stb_image.c"
      if (!($230)) {
       break;
      }
      $231 = $k; //@line 2160 "emscripten/stb_image.c"
      $232 = $2; //@line 2160 "emscripten/stb_image.c"
      $233 = (($232) + ($231)|0); //@line 2160 "emscripten/stb_image.c"
      $234 = HEAP8[$233>>0]|0; //@line 2160 "emscripten/stb_image.c"
      $235 = $234&255; //@line 2160 "emscripten/stb_image.c"
      $236 = $k; //@line 2160 "emscripten/stb_image.c"
      $237 = $img_n; //@line 2160 "emscripten/stb_image.c"
      $238 = (($236) - ($237))|0; //@line 2160 "emscripten/stb_image.c"
      $239 = $cur; //@line 2160 "emscripten/stb_image.c"
      $240 = (($239) + ($238)|0); //@line 2160 "emscripten/stb_image.c"
      $241 = HEAP8[$240>>0]|0; //@line 2160 "emscripten/stb_image.c"
      $242 = $241&255; //@line 2160 "emscripten/stb_image.c"
      $243 = (($235) + ($242))|0; //@line 2160 "emscripten/stb_image.c"
      $244 = $243&255; //@line 2160 "emscripten/stb_image.c"
      $245 = $k; //@line 2160 "emscripten/stb_image.c"
      $246 = $cur; //@line 2160 "emscripten/stb_image.c"
      $247 = (($246) + ($245)|0); //@line 2160 "emscripten/stb_image.c"
      HEAP8[$247>>0] = $244; //@line 2160 "emscripten/stb_image.c"
      $248 = $k; //@line 2160 "emscripten/stb_image.c"
      $249 = (($248) + 1)|0; //@line 2160 "emscripten/stb_image.c"
      $k = $249; //@line 2160 "emscripten/stb_image.c"
     }
     $250 = $i; //@line 2160 "emscripten/stb_image.c"
     $251 = (($250) + -1)|0; //@line 2160 "emscripten/stb_image.c"
     $i = $251; //@line 2160 "emscripten/stb_image.c"
     $252 = $img_n; //@line 2160 "emscripten/stb_image.c"
     $253 = $2; //@line 2160 "emscripten/stb_image.c"
     $254 = (($253) + ($252)|0); //@line 2160 "emscripten/stb_image.c"
     $2 = $254; //@line 2160 "emscripten/stb_image.c"
     $255 = $img_n; //@line 2160 "emscripten/stb_image.c"
     $256 = $cur; //@line 2160 "emscripten/stb_image.c"
     $257 = (($256) + ($255)|0); //@line 2160 "emscripten/stb_image.c"
     $cur = $257; //@line 2160 "emscripten/stb_image.c"
     $258 = $img_n; //@line 2160 "emscripten/stb_image.c"
     $259 = $prior; //@line 2160 "emscripten/stb_image.c"
     $260 = (($259) + ($258)|0); //@line 2160 "emscripten/stb_image.c"
     $prior = $260; //@line 2160 "emscripten/stb_image.c"
    }
    break;
   }
   default: {
   }
   }
  } else {
   $466 = $img_n; //@line 2169 "emscripten/stb_image.c"
   $467 = (($466) + 1)|0; //@line 2169 "emscripten/stb_image.c"
   $468 = $4; //@line 2169 "emscripten/stb_image.c"
   $469 = ($467|0)==($468|0); //@line 2169 "emscripten/stb_image.c"
   if (!($469)) {
    label = 105;
    break;
   }
   $470 = $filter; //@line 2174 "emscripten/stb_image.c"
   switch ($470|0) {
   case 0:  {
    $471 = $5; //@line 2175 "emscripten/stb_image.c"
    $472 = (($471) - 1)|0; //@line 2175 "emscripten/stb_image.c"
    $i = $472; //@line 2175 "emscripten/stb_image.c"
    while(1) {
     $473 = $i; //@line 2175 "emscripten/stb_image.c"
     $474 = ($473>>>0)>=(1); //@line 2175 "emscripten/stb_image.c"
     if (!($474)) {
      break;
     }
     $k = 0; //@line 2175 "emscripten/stb_image.c"
     while(1) {
      $475 = $k; //@line 2175 "emscripten/stb_image.c"
      $476 = $img_n; //@line 2175 "emscripten/stb_image.c"
      $477 = ($475|0)<($476|0); //@line 2175 "emscripten/stb_image.c"
      if (!($477)) {
       break;
      }
      $478 = $k; //@line 2175 "emscripten/stb_image.c"
      $479 = $2; //@line 2175 "emscripten/stb_image.c"
      $480 = (($479) + ($478)|0); //@line 2175 "emscripten/stb_image.c"
      $481 = HEAP8[$480>>0]|0; //@line 2175 "emscripten/stb_image.c"
      $482 = $k; //@line 2175 "emscripten/stb_image.c"
      $483 = $cur; //@line 2175 "emscripten/stb_image.c"
      $484 = (($483) + ($482)|0); //@line 2175 "emscripten/stb_image.c"
      HEAP8[$484>>0] = $481; //@line 2175 "emscripten/stb_image.c"
      $485 = $k; //@line 2175 "emscripten/stb_image.c"
      $486 = (($485) + 1)|0; //@line 2175 "emscripten/stb_image.c"
      $k = $486; //@line 2175 "emscripten/stb_image.c"
     }
     $487 = $i; //@line 2175 "emscripten/stb_image.c"
     $488 = (($487) + -1)|0; //@line 2175 "emscripten/stb_image.c"
     $i = $488; //@line 2175 "emscripten/stb_image.c"
     $489 = $img_n; //@line 2175 "emscripten/stb_image.c"
     $490 = $cur; //@line 2175 "emscripten/stb_image.c"
     $491 = (($490) + ($489)|0); //@line 2175 "emscripten/stb_image.c"
     HEAP8[$491>>0] = -1; //@line 2175 "emscripten/stb_image.c"
     $492 = $img_n; //@line 2175 "emscripten/stb_image.c"
     $493 = $2; //@line 2175 "emscripten/stb_image.c"
     $494 = (($493) + ($492)|0); //@line 2175 "emscripten/stb_image.c"
     $2 = $494; //@line 2175 "emscripten/stb_image.c"
     $495 = $4; //@line 2175 "emscripten/stb_image.c"
     $496 = $cur; //@line 2175 "emscripten/stb_image.c"
     $497 = (($496) + ($495)|0); //@line 2175 "emscripten/stb_image.c"
     $cur = $497; //@line 2175 "emscripten/stb_image.c"
     $498 = $4; //@line 2175 "emscripten/stb_image.c"
     $499 = $prior; //@line 2175 "emscripten/stb_image.c"
     $500 = (($499) + ($498)|0); //@line 2175 "emscripten/stb_image.c"
     $prior = $500; //@line 2175 "emscripten/stb_image.c"
    }
    break;
   }
   case 3:  {
    $579 = $5; //@line 2178 "emscripten/stb_image.c"
    $580 = (($579) - 1)|0; //@line 2178 "emscripten/stb_image.c"
    $i = $580; //@line 2178 "emscripten/stb_image.c"
    while(1) {
     $581 = $i; //@line 2178 "emscripten/stb_image.c"
     $582 = ($581>>>0)>=(1); //@line 2178 "emscripten/stb_image.c"
     if (!($582)) {
      break;
     }
     $k = 0; //@line 2178 "emscripten/stb_image.c"
     while(1) {
      $583 = $k; //@line 2178 "emscripten/stb_image.c"
      $584 = $img_n; //@line 2178 "emscripten/stb_image.c"
      $585 = ($583|0)<($584|0); //@line 2178 "emscripten/stb_image.c"
      if (!($585)) {
       break;
      }
      $586 = $k; //@line 2178 "emscripten/stb_image.c"
      $587 = $2; //@line 2178 "emscripten/stb_image.c"
      $588 = (($587) + ($586)|0); //@line 2178 "emscripten/stb_image.c"
      $589 = HEAP8[$588>>0]|0; //@line 2178 "emscripten/stb_image.c"
      $590 = $589&255; //@line 2178 "emscripten/stb_image.c"
      $591 = $k; //@line 2178 "emscripten/stb_image.c"
      $592 = $prior; //@line 2178 "emscripten/stb_image.c"
      $593 = (($592) + ($591)|0); //@line 2178 "emscripten/stb_image.c"
      $594 = HEAP8[$593>>0]|0; //@line 2178 "emscripten/stb_image.c"
      $595 = $594&255; //@line 2178 "emscripten/stb_image.c"
      $596 = $k; //@line 2178 "emscripten/stb_image.c"
      $597 = $4; //@line 2178 "emscripten/stb_image.c"
      $598 = (($596) - ($597))|0; //@line 2178 "emscripten/stb_image.c"
      $599 = $cur; //@line 2178 "emscripten/stb_image.c"
      $600 = (($599) + ($598)|0); //@line 2178 "emscripten/stb_image.c"
      $601 = HEAP8[$600>>0]|0; //@line 2178 "emscripten/stb_image.c"
      $602 = $601&255; //@line 2178 "emscripten/stb_image.c"
      $603 = (($595) + ($602))|0; //@line 2178 "emscripten/stb_image.c"
      $604 = $603 >> 1; //@line 2178 "emscripten/stb_image.c"
      $605 = (($590) + ($604))|0; //@line 2178 "emscripten/stb_image.c"
      $606 = $605&255; //@line 2178 "emscripten/stb_image.c"
      $607 = $k; //@line 2178 "emscripten/stb_image.c"
      $608 = $cur; //@line 2178 "emscripten/stb_image.c"
      $609 = (($608) + ($607)|0); //@line 2178 "emscripten/stb_image.c"
      HEAP8[$609>>0] = $606; //@line 2178 "emscripten/stb_image.c"
      $610 = $k; //@line 2178 "emscripten/stb_image.c"
      $611 = (($610) + 1)|0; //@line 2178 "emscripten/stb_image.c"
      $k = $611; //@line 2178 "emscripten/stb_image.c"
     }
     $612 = $i; //@line 2178 "emscripten/stb_image.c"
     $613 = (($612) + -1)|0; //@line 2178 "emscripten/stb_image.c"
     $i = $613; //@line 2178 "emscripten/stb_image.c"
     $614 = $img_n; //@line 2178 "emscripten/stb_image.c"
     $615 = $cur; //@line 2178 "emscripten/stb_image.c"
     $616 = (($615) + ($614)|0); //@line 2178 "emscripten/stb_image.c"
     HEAP8[$616>>0] = -1; //@line 2178 "emscripten/stb_image.c"
     $617 = $img_n; //@line 2178 "emscripten/stb_image.c"
     $618 = $2; //@line 2178 "emscripten/stb_image.c"
     $619 = (($618) + ($617)|0); //@line 2178 "emscripten/stb_image.c"
     $2 = $619; //@line 2178 "emscripten/stb_image.c"
     $620 = $4; //@line 2178 "emscripten/stb_image.c"
     $621 = $cur; //@line 2178 "emscripten/stb_image.c"
     $622 = (($621) + ($620)|0); //@line 2178 "emscripten/stb_image.c"
     $cur = $622; //@line 2178 "emscripten/stb_image.c"
     $623 = $4; //@line 2178 "emscripten/stb_image.c"
     $624 = $prior; //@line 2178 "emscripten/stb_image.c"
     $625 = (($624) + ($623)|0); //@line 2178 "emscripten/stb_image.c"
     $prior = $625; //@line 2178 "emscripten/stb_image.c"
    }
    break;
   }
   case 1:  {
    $501 = $5; //@line 2176 "emscripten/stb_image.c"
    $502 = (($501) - 1)|0; //@line 2176 "emscripten/stb_image.c"
    $i = $502; //@line 2176 "emscripten/stb_image.c"
    while(1) {
     $503 = $i; //@line 2176 "emscripten/stb_image.c"
     $504 = ($503>>>0)>=(1); //@line 2176 "emscripten/stb_image.c"
     if (!($504)) {
      break;
     }
     $k = 0; //@line 2176 "emscripten/stb_image.c"
     while(1) {
      $505 = $k; //@line 2176 "emscripten/stb_image.c"
      $506 = $img_n; //@line 2176 "emscripten/stb_image.c"
      $507 = ($505|0)<($506|0); //@line 2176 "emscripten/stb_image.c"
      if (!($507)) {
       break;
      }
      $508 = $k; //@line 2176 "emscripten/stb_image.c"
      $509 = $2; //@line 2176 "emscripten/stb_image.c"
      $510 = (($509) + ($508)|0); //@line 2176 "emscripten/stb_image.c"
      $511 = HEAP8[$510>>0]|0; //@line 2176 "emscripten/stb_image.c"
      $512 = $511&255; //@line 2176 "emscripten/stb_image.c"
      $513 = $k; //@line 2176 "emscripten/stb_image.c"
      $514 = $4; //@line 2176 "emscripten/stb_image.c"
      $515 = (($513) - ($514))|0; //@line 2176 "emscripten/stb_image.c"
      $516 = $cur; //@line 2176 "emscripten/stb_image.c"
      $517 = (($516) + ($515)|0); //@line 2176 "emscripten/stb_image.c"
      $518 = HEAP8[$517>>0]|0; //@line 2176 "emscripten/stb_image.c"
      $519 = $518&255; //@line 2176 "emscripten/stb_image.c"
      $520 = (($512) + ($519))|0; //@line 2176 "emscripten/stb_image.c"
      $521 = $520&255; //@line 2176 "emscripten/stb_image.c"
      $522 = $k; //@line 2176 "emscripten/stb_image.c"
      $523 = $cur; //@line 2176 "emscripten/stb_image.c"
      $524 = (($523) + ($522)|0); //@line 2176 "emscripten/stb_image.c"
      HEAP8[$524>>0] = $521; //@line 2176 "emscripten/stb_image.c"
      $525 = $k; //@line 2176 "emscripten/stb_image.c"
      $526 = (($525) + 1)|0; //@line 2176 "emscripten/stb_image.c"
      $k = $526; //@line 2176 "emscripten/stb_image.c"
     }
     $527 = $i; //@line 2176 "emscripten/stb_image.c"
     $528 = (($527) + -1)|0; //@line 2176 "emscripten/stb_image.c"
     $i = $528; //@line 2176 "emscripten/stb_image.c"
     $529 = $img_n; //@line 2176 "emscripten/stb_image.c"
     $530 = $cur; //@line 2176 "emscripten/stb_image.c"
     $531 = (($530) + ($529)|0); //@line 2176 "emscripten/stb_image.c"
     HEAP8[$531>>0] = -1; //@line 2176 "emscripten/stb_image.c"
     $532 = $img_n; //@line 2176 "emscripten/stb_image.c"
     $533 = $2; //@line 2176 "emscripten/stb_image.c"
     $534 = (($533) + ($532)|0); //@line 2176 "emscripten/stb_image.c"
     $2 = $534; //@line 2176 "emscripten/stb_image.c"
     $535 = $4; //@line 2176 "emscripten/stb_image.c"
     $536 = $cur; //@line 2176 "emscripten/stb_image.c"
     $537 = (($536) + ($535)|0); //@line 2176 "emscripten/stb_image.c"
     $cur = $537; //@line 2176 "emscripten/stb_image.c"
     $538 = $4; //@line 2176 "emscripten/stb_image.c"
     $539 = $prior; //@line 2176 "emscripten/stb_image.c"
     $540 = (($539) + ($538)|0); //@line 2176 "emscripten/stb_image.c"
     $prior = $540; //@line 2176 "emscripten/stb_image.c"
    }
    break;
   }
   case 2:  {
    $541 = $5; //@line 2177 "emscripten/stb_image.c"
    $542 = (($541) - 1)|0; //@line 2177 "emscripten/stb_image.c"
    $i = $542; //@line 2177 "emscripten/stb_image.c"
    while(1) {
     $543 = $i; //@line 2177 "emscripten/stb_image.c"
     $544 = ($543>>>0)>=(1); //@line 2177 "emscripten/stb_image.c"
     if (!($544)) {
      break;
     }
     $k = 0; //@line 2177 "emscripten/stb_image.c"
     while(1) {
      $545 = $k; //@line 2177 "emscripten/stb_image.c"
      $546 = $img_n; //@line 2177 "emscripten/stb_image.c"
      $547 = ($545|0)<($546|0); //@line 2177 "emscripten/stb_image.c"
      if (!($547)) {
       break;
      }
      $548 = $k; //@line 2177 "emscripten/stb_image.c"
      $549 = $2; //@line 2177 "emscripten/stb_image.c"
      $550 = (($549) + ($548)|0); //@line 2177 "emscripten/stb_image.c"
      $551 = HEAP8[$550>>0]|0; //@line 2177 "emscripten/stb_image.c"
      $552 = $551&255; //@line 2177 "emscripten/stb_image.c"
      $553 = $k; //@line 2177 "emscripten/stb_image.c"
      $554 = $prior; //@line 2177 "emscripten/stb_image.c"
      $555 = (($554) + ($553)|0); //@line 2177 "emscripten/stb_image.c"
      $556 = HEAP8[$555>>0]|0; //@line 2177 "emscripten/stb_image.c"
      $557 = $556&255; //@line 2177 "emscripten/stb_image.c"
      $558 = (($552) + ($557))|0; //@line 2177 "emscripten/stb_image.c"
      $559 = $558&255; //@line 2177 "emscripten/stb_image.c"
      $560 = $k; //@line 2177 "emscripten/stb_image.c"
      $561 = $cur; //@line 2177 "emscripten/stb_image.c"
      $562 = (($561) + ($560)|0); //@line 2177 "emscripten/stb_image.c"
      HEAP8[$562>>0] = $559; //@line 2177 "emscripten/stb_image.c"
      $563 = $k; //@line 2177 "emscripten/stb_image.c"
      $564 = (($563) + 1)|0; //@line 2177 "emscripten/stb_image.c"
      $k = $564; //@line 2177 "emscripten/stb_image.c"
     }
     $565 = $i; //@line 2177 "emscripten/stb_image.c"
     $566 = (($565) + -1)|0; //@line 2177 "emscripten/stb_image.c"
     $i = $566; //@line 2177 "emscripten/stb_image.c"
     $567 = $img_n; //@line 2177 "emscripten/stb_image.c"
     $568 = $cur; //@line 2177 "emscripten/stb_image.c"
     $569 = (($568) + ($567)|0); //@line 2177 "emscripten/stb_image.c"
     HEAP8[$569>>0] = -1; //@line 2177 "emscripten/stb_image.c"
     $570 = $img_n; //@line 2177 "emscripten/stb_image.c"
     $571 = $2; //@line 2177 "emscripten/stb_image.c"
     $572 = (($571) + ($570)|0); //@line 2177 "emscripten/stb_image.c"
     $2 = $572; //@line 2177 "emscripten/stb_image.c"
     $573 = $4; //@line 2177 "emscripten/stb_image.c"
     $574 = $cur; //@line 2177 "emscripten/stb_image.c"
     $575 = (($574) + ($573)|0); //@line 2177 "emscripten/stb_image.c"
     $cur = $575; //@line 2177 "emscripten/stb_image.c"
     $576 = $4; //@line 2177 "emscripten/stb_image.c"
     $577 = $prior; //@line 2177 "emscripten/stb_image.c"
     $578 = (($577) + ($576)|0); //@line 2177 "emscripten/stb_image.c"
     $prior = $578; //@line 2177 "emscripten/stb_image.c"
    }
    break;
   }
   case 4:  {
    $626 = $5; //@line 2179 "emscripten/stb_image.c"
    $627 = (($626) - 1)|0; //@line 2179 "emscripten/stb_image.c"
    $i = $627; //@line 2179 "emscripten/stb_image.c"
    while(1) {
     $628 = $i; //@line 2179 "emscripten/stb_image.c"
     $629 = ($628>>>0)>=(1); //@line 2179 "emscripten/stb_image.c"
     if (!($629)) {
      break;
     }
     $k = 0; //@line 2179 "emscripten/stb_image.c"
     while(1) {
      $630 = $k; //@line 2179 "emscripten/stb_image.c"
      $631 = $img_n; //@line 2179 "emscripten/stb_image.c"
      $632 = ($630|0)<($631|0); //@line 2179 "emscripten/stb_image.c"
      if (!($632)) {
       break;
      }
      $633 = $k; //@line 2179 "emscripten/stb_image.c"
      $634 = $2; //@line 2179 "emscripten/stb_image.c"
      $635 = (($634) + ($633)|0); //@line 2179 "emscripten/stb_image.c"
      $636 = HEAP8[$635>>0]|0; //@line 2179 "emscripten/stb_image.c"
      $637 = $636&255; //@line 2179 "emscripten/stb_image.c"
      $638 = $k; //@line 2179 "emscripten/stb_image.c"
      $639 = $4; //@line 2179 "emscripten/stb_image.c"
      $640 = (($638) - ($639))|0; //@line 2179 "emscripten/stb_image.c"
      $641 = $cur; //@line 2179 "emscripten/stb_image.c"
      $642 = (($641) + ($640)|0); //@line 2179 "emscripten/stb_image.c"
      $643 = HEAP8[$642>>0]|0; //@line 2179 "emscripten/stb_image.c"
      $644 = $643&255; //@line 2179 "emscripten/stb_image.c"
      $645 = $k; //@line 2179 "emscripten/stb_image.c"
      $646 = $prior; //@line 2179 "emscripten/stb_image.c"
      $647 = (($646) + ($645)|0); //@line 2179 "emscripten/stb_image.c"
      $648 = HEAP8[$647>>0]|0; //@line 2179 "emscripten/stb_image.c"
      $649 = $648&255; //@line 2179 "emscripten/stb_image.c"
      $650 = $k; //@line 2179 "emscripten/stb_image.c"
      $651 = $4; //@line 2179 "emscripten/stb_image.c"
      $652 = (($650) - ($651))|0; //@line 2179 "emscripten/stb_image.c"
      $653 = $prior; //@line 2179 "emscripten/stb_image.c"
      $654 = (($653) + ($652)|0); //@line 2179 "emscripten/stb_image.c"
      $655 = HEAP8[$654>>0]|0; //@line 2179 "emscripten/stb_image.c"
      $656 = $655&255; //@line 2179 "emscripten/stb_image.c"
      $657 = (__ZL5paethiii($644,$649,$656)|0); //@line 2179 "emscripten/stb_image.c"
      $658 = (($637) + ($657))|0; //@line 2179 "emscripten/stb_image.c"
      $659 = $658&255; //@line 2179 "emscripten/stb_image.c"
      $660 = $k; //@line 2179 "emscripten/stb_image.c"
      $661 = $cur; //@line 2179 "emscripten/stb_image.c"
      $662 = (($661) + ($660)|0); //@line 2179 "emscripten/stb_image.c"
      HEAP8[$662>>0] = $659; //@line 2179 "emscripten/stb_image.c"
      $663 = $k; //@line 2179 "emscripten/stb_image.c"
      $664 = (($663) + 1)|0; //@line 2179 "emscripten/stb_image.c"
      $k = $664; //@line 2179 "emscripten/stb_image.c"
     }
     $665 = $i; //@line 2179 "emscripten/stb_image.c"
     $666 = (($665) + -1)|0; //@line 2179 "emscripten/stb_image.c"
     $i = $666; //@line 2179 "emscripten/stb_image.c"
     $667 = $img_n; //@line 2179 "emscripten/stb_image.c"
     $668 = $cur; //@line 2179 "emscripten/stb_image.c"
     $669 = (($668) + ($667)|0); //@line 2179 "emscripten/stb_image.c"
     HEAP8[$669>>0] = -1; //@line 2179 "emscripten/stb_image.c"
     $670 = $img_n; //@line 2179 "emscripten/stb_image.c"
     $671 = $2; //@line 2179 "emscripten/stb_image.c"
     $672 = (($671) + ($670)|0); //@line 2179 "emscripten/stb_image.c"
     $2 = $672; //@line 2179 "emscripten/stb_image.c"
     $673 = $4; //@line 2179 "emscripten/stb_image.c"
     $674 = $cur; //@line 2179 "emscripten/stb_image.c"
     $675 = (($674) + ($673)|0); //@line 2179 "emscripten/stb_image.c"
     $cur = $675; //@line 2179 "emscripten/stb_image.c"
     $676 = $4; //@line 2179 "emscripten/stb_image.c"
     $677 = $prior; //@line 2179 "emscripten/stb_image.c"
     $678 = (($677) + ($676)|0); //@line 2179 "emscripten/stb_image.c"
     $prior = $678; //@line 2179 "emscripten/stb_image.c"
    }
    break;
   }
   case 5:  {
    $679 = $5; //@line 2180 "emscripten/stb_image.c"
    $680 = (($679) - 1)|0; //@line 2180 "emscripten/stb_image.c"
    $i = $680; //@line 2180 "emscripten/stb_image.c"
    while(1) {
     $681 = $i; //@line 2180 "emscripten/stb_image.c"
     $682 = ($681>>>0)>=(1); //@line 2180 "emscripten/stb_image.c"
     if (!($682)) {
      break;
     }
     $k = 0; //@line 2180 "emscripten/stb_image.c"
     while(1) {
      $683 = $k; //@line 2180 "emscripten/stb_image.c"
      $684 = $img_n; //@line 2180 "emscripten/stb_image.c"
      $685 = ($683|0)<($684|0); //@line 2180 "emscripten/stb_image.c"
      if (!($685)) {
       break;
      }
      $686 = $k; //@line 2180 "emscripten/stb_image.c"
      $687 = $2; //@line 2180 "emscripten/stb_image.c"
      $688 = (($687) + ($686)|0); //@line 2180 "emscripten/stb_image.c"
      $689 = HEAP8[$688>>0]|0; //@line 2180 "emscripten/stb_image.c"
      $690 = $689&255; //@line 2180 "emscripten/stb_image.c"
      $691 = $k; //@line 2180 "emscripten/stb_image.c"
      $692 = $4; //@line 2180 "emscripten/stb_image.c"
      $693 = (($691) - ($692))|0; //@line 2180 "emscripten/stb_image.c"
      $694 = $cur; //@line 2180 "emscripten/stb_image.c"
      $695 = (($694) + ($693)|0); //@line 2180 "emscripten/stb_image.c"
      $696 = HEAP8[$695>>0]|0; //@line 2180 "emscripten/stb_image.c"
      $697 = $696&255; //@line 2180 "emscripten/stb_image.c"
      $698 = $697 >> 1; //@line 2180 "emscripten/stb_image.c"
      $699 = (($690) + ($698))|0; //@line 2180 "emscripten/stb_image.c"
      $700 = $699&255; //@line 2180 "emscripten/stb_image.c"
      $701 = $k; //@line 2180 "emscripten/stb_image.c"
      $702 = $cur; //@line 2180 "emscripten/stb_image.c"
      $703 = (($702) + ($701)|0); //@line 2180 "emscripten/stb_image.c"
      HEAP8[$703>>0] = $700; //@line 2180 "emscripten/stb_image.c"
      $704 = $k; //@line 2180 "emscripten/stb_image.c"
      $705 = (($704) + 1)|0; //@line 2180 "emscripten/stb_image.c"
      $k = $705; //@line 2180 "emscripten/stb_image.c"
     }
     $706 = $i; //@line 2180 "emscripten/stb_image.c"
     $707 = (($706) + -1)|0; //@line 2180 "emscripten/stb_image.c"
     $i = $707; //@line 2180 "emscripten/stb_image.c"
     $708 = $img_n; //@line 2180 "emscripten/stb_image.c"
     $709 = $cur; //@line 2180 "emscripten/stb_image.c"
     $710 = (($709) + ($708)|0); //@line 2180 "emscripten/stb_image.c"
     HEAP8[$710>>0] = -1; //@line 2180 "emscripten/stb_image.c"
     $711 = $img_n; //@line 2180 "emscripten/stb_image.c"
     $712 = $2; //@line 2180 "emscripten/stb_image.c"
     $713 = (($712) + ($711)|0); //@line 2180 "emscripten/stb_image.c"
     $2 = $713; //@line 2180 "emscripten/stb_image.c"
     $714 = $4; //@line 2180 "emscripten/stb_image.c"
     $715 = $cur; //@line 2180 "emscripten/stb_image.c"
     $716 = (($715) + ($714)|0); //@line 2180 "emscripten/stb_image.c"
     $cur = $716; //@line 2180 "emscripten/stb_image.c"
     $717 = $4; //@line 2180 "emscripten/stb_image.c"
     $718 = $prior; //@line 2180 "emscripten/stb_image.c"
     $719 = (($718) + ($717)|0); //@line 2180 "emscripten/stb_image.c"
     $prior = $719; //@line 2180 "emscripten/stb_image.c"
    }
    break;
   }
   case 6:  {
    $720 = $5; //@line 2181 "emscripten/stb_image.c"
    $721 = (($720) - 1)|0; //@line 2181 "emscripten/stb_image.c"
    $i = $721; //@line 2181 "emscripten/stb_image.c"
    while(1) {
     $722 = $i; //@line 2181 "emscripten/stb_image.c"
     $723 = ($722>>>0)>=(1); //@line 2181 "emscripten/stb_image.c"
     if (!($723)) {
      break;
     }
     $k = 0; //@line 2181 "emscripten/stb_image.c"
     while(1) {
      $724 = $k; //@line 2181 "emscripten/stb_image.c"
      $725 = $img_n; //@line 2181 "emscripten/stb_image.c"
      $726 = ($724|0)<($725|0); //@line 2181 "emscripten/stb_image.c"
      if (!($726)) {
       break;
      }
      $727 = $k; //@line 2181 "emscripten/stb_image.c"
      $728 = $2; //@line 2181 "emscripten/stb_image.c"
      $729 = (($728) + ($727)|0); //@line 2181 "emscripten/stb_image.c"
      $730 = HEAP8[$729>>0]|0; //@line 2181 "emscripten/stb_image.c"
      $731 = $730&255; //@line 2181 "emscripten/stb_image.c"
      $732 = $k; //@line 2181 "emscripten/stb_image.c"
      $733 = $4; //@line 2181 "emscripten/stb_image.c"
      $734 = (($732) - ($733))|0; //@line 2181 "emscripten/stb_image.c"
      $735 = $cur; //@line 2181 "emscripten/stb_image.c"
      $736 = (($735) + ($734)|0); //@line 2181 "emscripten/stb_image.c"
      $737 = HEAP8[$736>>0]|0; //@line 2181 "emscripten/stb_image.c"
      $738 = $737&255; //@line 2181 "emscripten/stb_image.c"
      $739 = (__ZL5paethiii($738,0,0)|0); //@line 2181 "emscripten/stb_image.c"
      $740 = (($731) + ($739))|0; //@line 2181 "emscripten/stb_image.c"
      $741 = $740&255; //@line 2181 "emscripten/stb_image.c"
      $742 = $k; //@line 2181 "emscripten/stb_image.c"
      $743 = $cur; //@line 2181 "emscripten/stb_image.c"
      $744 = (($743) + ($742)|0); //@line 2181 "emscripten/stb_image.c"
      HEAP8[$744>>0] = $741; //@line 2181 "emscripten/stb_image.c"
      $745 = $k; //@line 2181 "emscripten/stb_image.c"
      $746 = (($745) + 1)|0; //@line 2181 "emscripten/stb_image.c"
      $k = $746; //@line 2181 "emscripten/stb_image.c"
     }
     $747 = $i; //@line 2181 "emscripten/stb_image.c"
     $748 = (($747) + -1)|0; //@line 2181 "emscripten/stb_image.c"
     $i = $748; //@line 2181 "emscripten/stb_image.c"
     $749 = $img_n; //@line 2181 "emscripten/stb_image.c"
     $750 = $cur; //@line 2181 "emscripten/stb_image.c"
     $751 = (($750) + ($749)|0); //@line 2181 "emscripten/stb_image.c"
     HEAP8[$751>>0] = -1; //@line 2181 "emscripten/stb_image.c"
     $752 = $img_n; //@line 2181 "emscripten/stb_image.c"
     $753 = $2; //@line 2181 "emscripten/stb_image.c"
     $754 = (($753) + ($752)|0); //@line 2181 "emscripten/stb_image.c"
     $2 = $754; //@line 2181 "emscripten/stb_image.c"
     $755 = $4; //@line 2181 "emscripten/stb_image.c"
     $756 = $cur; //@line 2181 "emscripten/stb_image.c"
     $757 = (($756) + ($755)|0); //@line 2181 "emscripten/stb_image.c"
     $cur = $757; //@line 2181 "emscripten/stb_image.c"
     $758 = $4; //@line 2181 "emscripten/stb_image.c"
     $759 = $prior; //@line 2181 "emscripten/stb_image.c"
     $760 = (($759) + ($758)|0); //@line 2181 "emscripten/stb_image.c"
     $prior = $760; //@line 2181 "emscripten/stb_image.c"
    }
    break;
   }
   default: {
   }
   }
  }
  $761 = $j; //@line 2129 "emscripten/stb_image.c"
  $762 = (($761) + 1)|0; //@line 2129 "emscripten/stb_image.c"
  $j = $762; //@line 2129 "emscripten/stb_image.c"
 }
 if ((label|0) == 21) {
  $90 = (__ZL1ePKc(27032)|0); //@line 2133 "emscripten/stb_image.c"
  $0 = $90; //@line 2133 "emscripten/stb_image.c"
  $763 = $0; //@line 2187 "emscripten/stb_image.c"
  STACKTOP = sp;return ($763|0); //@line 2187 "emscripten/stb_image.c"
 }
 else if ((label|0) == 105) {
  ___assert_fail((27056|0),(26712|0),2169,(26984|0)); //@line 2169 "emscripten/stb_image.c"
  // unreachable; //@line 2169 "emscripten/stb_image.c"
 }
 else if ((label|0) == 173) {
  $0 = 1; //@line 2186 "emscripten/stb_image.c"
  $763 = $0; //@line 2187 "emscripten/stb_image.c"
  STACKTOP = sp;return ($763|0); //@line 2187 "emscripten/stb_image.c"
 }
 return 0|0;
}
function __ZL5paethiii($a,$b,$c) {
 $a = $a|0;
 $b = $b|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0, $pa = 0, $pb = 0, $pc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = $a;
 $2 = $b;
 $3 = $c;
 $4 = $1; //@line 2102 "emscripten/stb_image.c"
 $5 = $2; //@line 2102 "emscripten/stb_image.c"
 $6 = (($4) + ($5))|0; //@line 2102 "emscripten/stb_image.c"
 $7 = $3; //@line 2102 "emscripten/stb_image.c"
 $8 = (($6) - ($7))|0; //@line 2102 "emscripten/stb_image.c"
 $p = $8; //@line 2102 "emscripten/stb_image.c"
 $9 = $p; //@line 2103 "emscripten/stb_image.c"
 $10 = $1; //@line 2103 "emscripten/stb_image.c"
 $11 = (($9) - ($10))|0; //@line 2103 "emscripten/stb_image.c"
 $12 = (Math_abs(($11|0))|0); //@line 2103 "emscripten/stb_image.c"
 $pa = $12; //@line 2103 "emscripten/stb_image.c"
 $13 = $p; //@line 2104 "emscripten/stb_image.c"
 $14 = $2; //@line 2104 "emscripten/stb_image.c"
 $15 = (($13) - ($14))|0; //@line 2104 "emscripten/stb_image.c"
 $16 = (Math_abs(($15|0))|0); //@line 2104 "emscripten/stb_image.c"
 $pb = $16; //@line 2104 "emscripten/stb_image.c"
 $17 = $p; //@line 2105 "emscripten/stb_image.c"
 $18 = $3; //@line 2105 "emscripten/stb_image.c"
 $19 = (($17) - ($18))|0; //@line 2105 "emscripten/stb_image.c"
 $20 = (Math_abs(($19|0))|0); //@line 2105 "emscripten/stb_image.c"
 $pc = $20; //@line 2105 "emscripten/stb_image.c"
 $21 = $pa; //@line 2106 "emscripten/stb_image.c"
 $22 = $pb; //@line 2106 "emscripten/stb_image.c"
 $23 = ($21|0)<=($22|0); //@line 2106 "emscripten/stb_image.c"
 if ($23) {
  $24 = $pa; //@line 2106 "emscripten/stb_image.c"
  $25 = $pc; //@line 2106 "emscripten/stb_image.c"
  $26 = ($24|0)<=($25|0); //@line 2106 "emscripten/stb_image.c"
  if ($26) {
   $27 = $1; //@line 2106 "emscripten/stb_image.c"
   $0 = $27; //@line 2106 "emscripten/stb_image.c"
   $33 = $0; //@line 2109 "emscripten/stb_image.c"
   STACKTOP = sp;return ($33|0); //@line 2109 "emscripten/stb_image.c"
  }
 }
 $28 = $pb; //@line 2107 "emscripten/stb_image.c"
 $29 = $pc; //@line 2107 "emscripten/stb_image.c"
 $30 = ($28|0)<=($29|0); //@line 2107 "emscripten/stb_image.c"
 if ($30) {
  $31 = $2; //@line 2107 "emscripten/stb_image.c"
  $0 = $31; //@line 2107 "emscripten/stb_image.c"
  $33 = $0; //@line 2109 "emscripten/stb_image.c"
  STACKTOP = sp;return ($33|0); //@line 2109 "emscripten/stb_image.c"
 } else {
  $32 = $3; //@line 2108 "emscripten/stb_image.c"
  $0 = $32; //@line 2108 "emscripten/stb_image.c"
  $33 = $0; //@line 2109 "emscripten/stb_image.c"
  STACKTOP = sp;return ($33|0); //@line 2109 "emscripten/stb_image.c"
 }
 return 0|0;
}
function __ZL18decode_jpeg_headerP4jpegi($z,$scan) {
 $z = $z|0;
 $scan = $scan|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $m = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $z;
 $2 = $scan;
 $3 = $1; //@line 1272 "emscripten/stb_image.c"
 $4 = (($3) + 13956|0); //@line 1272 "emscripten/stb_image.c"
 HEAP8[$4>>0] = -1; //@line 1272 "emscripten/stb_image.c"
 $5 = $1; //@line 1273 "emscripten/stb_image.c"
 $6 = (__ZL10get_markerP4jpeg($5)|0); //@line 1273 "emscripten/stb_image.c"
 $7 = $6&255; //@line 1273 "emscripten/stb_image.c"
 $m = $7; //@line 1273 "emscripten/stb_image.c"
 $8 = $m; //@line 1274 "emscripten/stb_image.c"
 $9 = ($8|0)==(216); //@line 1274 "emscripten/stb_image.c"
 if (!($9)) {
  $10 = (__ZL1ePKc(27104)|0); //@line 1274 "emscripten/stb_image.c"
  $0 = $10; //@line 1274 "emscripten/stb_image.c"
  $43 = $0; //@line 1288 "emscripten/stb_image.c"
  STACKTOP = sp;return ($43|0); //@line 1288 "emscripten/stb_image.c"
 }
 $11 = $2; //@line 1275 "emscripten/stb_image.c"
 $12 = ($11|0)==(1); //@line 1275 "emscripten/stb_image.c"
 if ($12) {
  $0 = 1; //@line 1275 "emscripten/stb_image.c"
  $43 = $0; //@line 1288 "emscripten/stb_image.c"
  STACKTOP = sp;return ($43|0); //@line 1288 "emscripten/stb_image.c"
 }
 $13 = $1; //@line 1276 "emscripten/stb_image.c"
 $14 = (__ZL10get_markerP4jpeg($13)|0); //@line 1276 "emscripten/stb_image.c"
 $15 = $14&255; //@line 1276 "emscripten/stb_image.c"
 $m = $15; //@line 1276 "emscripten/stb_image.c"
 L9: while(1) {
  $16 = $m; //@line 1277 "emscripten/stb_image.c"
  $17 = ($16|0)==(192); //@line 1277 "emscripten/stb_image.c"
  if ($17) {
   $21 = 1;
  } else {
   $18 = $m; //@line 1277 "emscripten/stb_image.c"
   $19 = ($18|0)==(193); //@line 1277 "emscripten/stb_image.c"
   $21 = $19;
  }
  $20 = $21 ^ 1; //@line 1277 "emscripten/stb_image.c"
  if (!($20)) {
   label = 17;
   break;
  }
  $22 = $1; //@line 1278 "emscripten/stb_image.c"
  $23 = $m; //@line 1278 "emscripten/stb_image.c"
  $24 = (__ZL14process_markerP4jpegi($22,$23)|0); //@line 1278 "emscripten/stb_image.c"
  $25 = ($24|0)!=(0); //@line 1278 "emscripten/stb_image.c"
  if (!($25)) {
   label = 10;
   break;
  }
  $26 = $1; //@line 1279 "emscripten/stb_image.c"
  $27 = (__ZL10get_markerP4jpeg($26)|0); //@line 1279 "emscripten/stb_image.c"
  $28 = $27&255; //@line 1279 "emscripten/stb_image.c"
  $m = $28; //@line 1279 "emscripten/stb_image.c"
  while(1) {
   $29 = $m; //@line 1280 "emscripten/stb_image.c"
   $30 = ($29|0)==(255); //@line 1280 "emscripten/stb_image.c"
   if (!($30)) {
    break;
   }
   $31 = $1; //@line 1282 "emscripten/stb_image.c"
   $32 = HEAP32[$31>>2]|0; //@line 1282 "emscripten/stb_image.c"
   $33 = (__ZL6at_eofP4stbi($32)|0); //@line 1282 "emscripten/stb_image.c"
   $34 = ($33|0)!=(0); //@line 1282 "emscripten/stb_image.c"
   if ($34) {
    label = 14;
    break L9;
   }
   $36 = $1; //@line 1283 "emscripten/stb_image.c"
   $37 = (__ZL10get_markerP4jpeg($36)|0); //@line 1283 "emscripten/stb_image.c"
   $38 = $37&255; //@line 1283 "emscripten/stb_image.c"
   $m = $38; //@line 1283 "emscripten/stb_image.c"
  }
 }
 if ((label|0) == 10) {
  $0 = 0; //@line 1278 "emscripten/stb_image.c"
  $43 = $0; //@line 1288 "emscripten/stb_image.c"
  STACKTOP = sp;return ($43|0); //@line 1288 "emscripten/stb_image.c"
 }
 else if ((label|0) == 14) {
  $35 = (__ZL1ePKc(27112)|0); //@line 1282 "emscripten/stb_image.c"
  $0 = $35; //@line 1282 "emscripten/stb_image.c"
  $43 = $0; //@line 1288 "emscripten/stb_image.c"
  STACKTOP = sp;return ($43|0); //@line 1288 "emscripten/stb_image.c"
 }
 else if ((label|0) == 17) {
  $39 = $1; //@line 1286 "emscripten/stb_image.c"
  $40 = $2; //@line 1286 "emscripten/stb_image.c"
  $41 = (__ZL20process_frame_headerP4jpegi($39,$40)|0); //@line 1286 "emscripten/stb_image.c"
  $42 = ($41|0)!=(0); //@line 1286 "emscripten/stb_image.c"
  if ($42) {
   $0 = 1; //@line 1287 "emscripten/stb_image.c"
   $43 = $0; //@line 1288 "emscripten/stb_image.c"
   STACKTOP = sp;return ($43|0); //@line 1288 "emscripten/stb_image.c"
  } else {
   $0 = 0; //@line 1286 "emscripten/stb_image.c"
   $43 = $0; //@line 1288 "emscripten/stb_image.c"
   STACKTOP = sp;return ($43|0); //@line 1288 "emscripten/stb_image.c"
  }
 }
 return 0|0;
}
function __ZL10get_markerP4jpeg($j) {
 $j = $j|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $j;
 $2 = $1; //@line 998 "emscripten/stb_image.c"
 $3 = (($2) + 13956|0); //@line 998 "emscripten/stb_image.c"
 $4 = HEAP8[$3>>0]|0; //@line 998 "emscripten/stb_image.c"
 $5 = $4&255; //@line 998 "emscripten/stb_image.c"
 $6 = ($5|0)!=(255); //@line 998 "emscripten/stb_image.c"
 if ($6) {
  $7 = $1; //@line 998 "emscripten/stb_image.c"
  $8 = (($7) + 13956|0); //@line 998 "emscripten/stb_image.c"
  $9 = HEAP8[$8>>0]|0; //@line 998 "emscripten/stb_image.c"
  $x = $9; //@line 998 "emscripten/stb_image.c"
  $10 = $1; //@line 998 "emscripten/stb_image.c"
  $11 = (($10) + 13956|0); //@line 998 "emscripten/stb_image.c"
  HEAP8[$11>>0] = -1; //@line 998 "emscripten/stb_image.c"
  $12 = $x; //@line 998 "emscripten/stb_image.c"
  $0 = $12; //@line 998 "emscripten/stb_image.c"
  $26 = $0; //@line 1004 "emscripten/stb_image.c"
  STACKTOP = sp;return ($26|0); //@line 1004 "emscripten/stb_image.c"
 }
 $13 = $1; //@line 999 "emscripten/stb_image.c"
 $14 = HEAP32[$13>>2]|0; //@line 999 "emscripten/stb_image.c"
 $15 = (__ZL5get8uP4stbi($14)|0); //@line 999 "emscripten/stb_image.c"
 $x = $15; //@line 999 "emscripten/stb_image.c"
 $16 = $x; //@line 1000 "emscripten/stb_image.c"
 $17 = $16&255; //@line 1000 "emscripten/stb_image.c"
 $18 = ($17|0)!=(255); //@line 1000 "emscripten/stb_image.c"
 if ($18) {
  $0 = -1; //@line 1000 "emscripten/stb_image.c"
  $26 = $0; //@line 1004 "emscripten/stb_image.c"
  STACKTOP = sp;return ($26|0); //@line 1004 "emscripten/stb_image.c"
 }
 while(1) {
  $19 = $x; //@line 1001 "emscripten/stb_image.c"
  $20 = $19&255; //@line 1001 "emscripten/stb_image.c"
  $21 = ($20|0)==(255); //@line 1001 "emscripten/stb_image.c"
  if (!($21)) {
   break;
  }
  $22 = $1; //@line 1002 "emscripten/stb_image.c"
  $23 = HEAP32[$22>>2]|0; //@line 1002 "emscripten/stb_image.c"
  $24 = (__ZL5get8uP4stbi($23)|0); //@line 1002 "emscripten/stb_image.c"
  $x = $24; //@line 1002 "emscripten/stb_image.c"
 }
 $25 = $x; //@line 1003 "emscripten/stb_image.c"
 $0 = $25; //@line 1003 "emscripten/stb_image.c"
 $26 = $0; //@line 1004 "emscripten/stb_image.c"
 STACKTOP = sp;return ($26|0); //@line 1004 "emscripten/stb_image.c"
}
function __ZL14process_markerP4jpegi($z,$m) {
 $z = $z|0;
 $m = $m|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $L = 0, $i = 0, $i1 = 0, $m2 = 0, $p = 0, $q = 0, $q3 = 0, $sizes = 0, $t = 0, $tc = 0, $th = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $sizes = sp + 16|0;
 $1 = $z;
 $2 = $m;
 $3 = $2; //@line 1099 "emscripten/stb_image.c"
 switch ($3|0) {
 case 219:  {
  $16 = $1; //@line 1112 "emscripten/stb_image.c"
  $17 = HEAP32[$16>>2]|0; //@line 1112 "emscripten/stb_image.c"
  $18 = (__ZL5get16P4stbi($17)|0); //@line 1112 "emscripten/stb_image.c"
  $19 = (($18) - 2)|0; //@line 1112 "emscripten/stb_image.c"
  $L = $19; //@line 1112 "emscripten/stb_image.c"
  while(1) {
   $20 = $L; //@line 1113 "emscripten/stb_image.c"
   $21 = ($20|0)>(0); //@line 1113 "emscripten/stb_image.c"
   if (!($21)) {
    label = 18;
    break;
   }
   $22 = $1; //@line 1114 "emscripten/stb_image.c"
   $23 = HEAP32[$22>>2]|0; //@line 1114 "emscripten/stb_image.c"
   $24 = (__ZL4get8P4stbi($23)|0); //@line 1114 "emscripten/stb_image.c"
   $q = $24; //@line 1114 "emscripten/stb_image.c"
   $25 = $q; //@line 1115 "emscripten/stb_image.c"
   $26 = $25 >> 4; //@line 1115 "emscripten/stb_image.c"
   $p = $26; //@line 1115 "emscripten/stb_image.c"
   $27 = $q; //@line 1116 "emscripten/stb_image.c"
   $28 = $27 & 15; //@line 1116 "emscripten/stb_image.c"
   $t = $28; //@line 1116 "emscripten/stb_image.c"
   $29 = $p; //@line 1117 "emscripten/stb_image.c"
   $30 = ($29|0)!=(0); //@line 1117 "emscripten/stb_image.c"
   if ($30) {
    label = 10;
    break;
   }
   $32 = $t; //@line 1118 "emscripten/stb_image.c"
   $33 = ($32|0)>(3); //@line 1118 "emscripten/stb_image.c"
   if ($33) {
    label = 12;
    break;
   }
   $i = 0; //@line 1119 "emscripten/stb_image.c"
   while(1) {
    $35 = $i; //@line 1119 "emscripten/stb_image.c"
    $36 = ($35|0)<(64); //@line 1119 "emscripten/stb_image.c"
    if (!($36)) {
     break;
    }
    $37 = $1; //@line 1120 "emscripten/stb_image.c"
    $38 = HEAP32[$37>>2]|0; //@line 1120 "emscripten/stb_image.c"
    $39 = (__ZL5get8uP4stbi($38)|0); //@line 1120 "emscripten/stb_image.c"
    $40 = $i; //@line 1120 "emscripten/stb_image.c"
    $41 = (27344 + ($40)|0); //@line 1120 "emscripten/stb_image.c"
    $42 = HEAP8[$41>>0]|0; //@line 1120 "emscripten/stb_image.c"
    $43 = $42&255; //@line 1120 "emscripten/stb_image.c"
    $44 = $t; //@line 1120 "emscripten/stb_image.c"
    $45 = $1; //@line 1120 "emscripten/stb_image.c"
    $46 = (($45) + 13444|0); //@line 1120 "emscripten/stb_image.c"
    $47 = (($46) + ($44<<6)|0); //@line 1120 "emscripten/stb_image.c"
    $48 = (($47) + ($43)|0); //@line 1120 "emscripten/stb_image.c"
    HEAP8[$48>>0] = $39; //@line 1120 "emscripten/stb_image.c"
    $49 = $i; //@line 1119 "emscripten/stb_image.c"
    $50 = (($49) + 1)|0; //@line 1119 "emscripten/stb_image.c"
    $i = $50; //@line 1119 "emscripten/stb_image.c"
   }
   $51 = $L; //@line 1125 "emscripten/stb_image.c"
   $52 = (($51) - 65)|0; //@line 1125 "emscripten/stb_image.c"
   $L = $52; //@line 1125 "emscripten/stb_image.c"
  }
  if ((label|0) == 10) {
   $31 = (__ZL1ePKc(27312)|0); //@line 1117 "emscripten/stb_image.c"
   $0 = $31; //@line 1117 "emscripten/stb_image.c"
   $143 = $0; //@line 1162 "emscripten/stb_image.c"
   STACKTOP = sp;return ($143|0); //@line 1162 "emscripten/stb_image.c"
  }
  else if ((label|0) == 12) {
   $34 = (__ZL1ePKc(27328)|0); //@line 1118 "emscripten/stb_image.c"
   $0 = $34; //@line 1118 "emscripten/stb_image.c"
   $143 = $0; //@line 1162 "emscripten/stb_image.c"
   STACKTOP = sp;return ($143|0); //@line 1162 "emscripten/stb_image.c"
  }
  else if ((label|0) == 18) {
   $53 = $L; //@line 1127 "emscripten/stb_image.c"
   $54 = ($53|0)==(0); //@line 1127 "emscripten/stb_image.c"
   $55 = $54&1; //@line 1127 "emscripten/stb_image.c"
   $0 = $55; //@line 1127 "emscripten/stb_image.c"
   $143 = $0; //@line 1162 "emscripten/stb_image.c"
   STACKTOP = sp;return ($143|0); //@line 1162 "emscripten/stb_image.c"
  }
  break;
 }
 case 221:  {
  $6 = $1; //@line 1107 "emscripten/stb_image.c"
  $7 = HEAP32[$6>>2]|0; //@line 1107 "emscripten/stb_image.c"
  $8 = (__ZL5get16P4stbi($7)|0); //@line 1107 "emscripten/stb_image.c"
  $9 = ($8|0)!=(4); //@line 1107 "emscripten/stb_image.c"
  if ($9) {
   $10 = (__ZL1ePKc(27296)|0); //@line 1107 "emscripten/stb_image.c"
   $0 = $10; //@line 1107 "emscripten/stb_image.c"
   $143 = $0; //@line 1162 "emscripten/stb_image.c"
   STACKTOP = sp;return ($143|0); //@line 1162 "emscripten/stb_image.c"
  } else {
   $11 = $1; //@line 1108 "emscripten/stb_image.c"
   $12 = HEAP32[$11>>2]|0; //@line 1108 "emscripten/stb_image.c"
   $13 = (__ZL5get16P4stbi($12)|0); //@line 1108 "emscripten/stb_image.c"
   $14 = $1; //@line 1108 "emscripten/stb_image.c"
   $15 = (($14) + 13984|0); //@line 1108 "emscripten/stb_image.c"
   HEAP32[$15>>2] = $13; //@line 1108 "emscripten/stb_image.c"
   $0 = 1; //@line 1109 "emscripten/stb_image.c"
   $143 = $0; //@line 1162 "emscripten/stb_image.c"
   STACKTOP = sp;return ($143|0); //@line 1162 "emscripten/stb_image.c"
  }
  break;
 }
 case 194:  {
  $5 = (__ZL1ePKc(27272)|0); //@line 1104 "emscripten/stb_image.c"
  $0 = $5; //@line 1104 "emscripten/stb_image.c"
  $143 = $0; //@line 1162 "emscripten/stb_image.c"
  STACKTOP = sp;return ($143|0); //@line 1162 "emscripten/stb_image.c"
  break;
 }
 case 255:  {
  $4 = (__ZL1ePKc(27256)|0); //@line 1101 "emscripten/stb_image.c"
  $0 = $4; //@line 1101 "emscripten/stb_image.c"
  $143 = $0; //@line 1162 "emscripten/stb_image.c"
  STACKTOP = sp;return ($143|0); //@line 1162 "emscripten/stb_image.c"
  break;
 }
 case 196:  {
  $56 = $1; //@line 1130 "emscripten/stb_image.c"
  $57 = HEAP32[$56>>2]|0; //@line 1130 "emscripten/stb_image.c"
  $58 = (__ZL5get16P4stbi($57)|0); //@line 1130 "emscripten/stb_image.c"
  $59 = (($58) - 2)|0; //@line 1130 "emscripten/stb_image.c"
  $L = $59; //@line 1130 "emscripten/stb_image.c"
  while(1) {
   $60 = $L; //@line 1131 "emscripten/stb_image.c"
   $61 = ($60|0)>(0); //@line 1131 "emscripten/stb_image.c"
   if (!($61)) {
    label = 40;
    break;
   }
   $m2 = 0; //@line 1133 "emscripten/stb_image.c"
   $62 = $1; //@line 1134 "emscripten/stb_image.c"
   $63 = HEAP32[$62>>2]|0; //@line 1134 "emscripten/stb_image.c"
   $64 = (__ZL4get8P4stbi($63)|0); //@line 1134 "emscripten/stb_image.c"
   $q3 = $64; //@line 1134 "emscripten/stb_image.c"
   $65 = $q3; //@line 1135 "emscripten/stb_image.c"
   $66 = $65 >> 4; //@line 1135 "emscripten/stb_image.c"
   $tc = $66; //@line 1135 "emscripten/stb_image.c"
   $67 = $q3; //@line 1136 "emscripten/stb_image.c"
   $68 = $67 & 15; //@line 1136 "emscripten/stb_image.c"
   $th = $68; //@line 1136 "emscripten/stb_image.c"
   $69 = $tc; //@line 1137 "emscripten/stb_image.c"
   $70 = ($69|0)>(1); //@line 1137 "emscripten/stb_image.c"
   if ($70) {
    label = 23;
    break;
   }
   $71 = $th; //@line 1137 "emscripten/stb_image.c"
   $72 = ($71|0)>(3); //@line 1137 "emscripten/stb_image.c"
   if ($72) {
    label = 23;
    break;
   }
   $i1 = 0; //@line 1138 "emscripten/stb_image.c"
   while(1) {
    $74 = $i1; //@line 1138 "emscripten/stb_image.c"
    $75 = ($74|0)<(16); //@line 1138 "emscripten/stb_image.c"
    if (!($75)) {
     break;
    }
    $76 = $1; //@line 1139 "emscripten/stb_image.c"
    $77 = HEAP32[$76>>2]|0; //@line 1139 "emscripten/stb_image.c"
    $78 = (__ZL4get8P4stbi($77)|0); //@line 1139 "emscripten/stb_image.c"
    $79 = $i1; //@line 1139 "emscripten/stb_image.c"
    $80 = (($sizes) + ($79<<2)|0); //@line 1139 "emscripten/stb_image.c"
    HEAP32[$80>>2] = $78; //@line 1139 "emscripten/stb_image.c"
    $81 = $i1; //@line 1140 "emscripten/stb_image.c"
    $82 = (($sizes) + ($81<<2)|0); //@line 1140 "emscripten/stb_image.c"
    $83 = HEAP32[$82>>2]|0; //@line 1140 "emscripten/stb_image.c"
    $84 = $m2; //@line 1140 "emscripten/stb_image.c"
    $85 = (($84) + ($83))|0; //@line 1140 "emscripten/stb_image.c"
    $m2 = $85; //@line 1140 "emscripten/stb_image.c"
    $86 = $i1; //@line 1138 "emscripten/stb_image.c"
    $87 = (($86) + 1)|0; //@line 1138 "emscripten/stb_image.c"
    $i1 = $87; //@line 1138 "emscripten/stb_image.c"
   }
   $88 = $L; //@line 1142 "emscripten/stb_image.c"
   $89 = (($88) - 17)|0; //@line 1142 "emscripten/stb_image.c"
   $L = $89; //@line 1142 "emscripten/stb_image.c"
   $90 = $tc; //@line 1143 "emscripten/stb_image.c"
   $91 = ($90|0)==(0); //@line 1143 "emscripten/stb_image.c"
   if ($91) {
    $92 = $1; //@line 1144 "emscripten/stb_image.c"
    $93 = (($92) + 4|0); //@line 1144 "emscripten/stb_image.c"
    $94 = $th; //@line 1144 "emscripten/stb_image.c"
    $95 = (($93) + (($94*1680)|0)|0); //@line 1144 "emscripten/stb_image.c"
    $96 = (__ZL13build_huffmanP7huffmanPi($95,$sizes)|0); //@line 1144 "emscripten/stb_image.c"
    $97 = ($96|0)!=(0); //@line 1144 "emscripten/stb_image.c"
    if (!($97)) {
     label = 30;
     break;
    }
    $98 = $th; //@line 1145 "emscripten/stb_image.c"
    $99 = $1; //@line 1145 "emscripten/stb_image.c"
    $100 = (($99) + 4|0); //@line 1145 "emscripten/stb_image.c"
    $101 = (($100) + (($98*1680)|0)|0); //@line 1145 "emscripten/stb_image.c"
    $102 = (($101) + 1024|0); //@line 1145 "emscripten/stb_image.c"
    $v = $102; //@line 1145 "emscripten/stb_image.c"
   } else {
    $103 = $1; //@line 1147 "emscripten/stb_image.c"
    $104 = (($103) + 6724|0); //@line 1147 "emscripten/stb_image.c"
    $105 = $th; //@line 1147 "emscripten/stb_image.c"
    $106 = (($104) + (($105*1680)|0)|0); //@line 1147 "emscripten/stb_image.c"
    $107 = (__ZL13build_huffmanP7huffmanPi($106,$sizes)|0); //@line 1147 "emscripten/stb_image.c"
    $108 = ($107|0)!=(0); //@line 1147 "emscripten/stb_image.c"
    if (!($108)) {
     label = 33;
     break;
    }
    $109 = $th; //@line 1148 "emscripten/stb_image.c"
    $110 = $1; //@line 1148 "emscripten/stb_image.c"
    $111 = (($110) + 6724|0); //@line 1148 "emscripten/stb_image.c"
    $112 = (($111) + (($109*1680)|0)|0); //@line 1148 "emscripten/stb_image.c"
    $113 = (($112) + 1024|0); //@line 1148 "emscripten/stb_image.c"
    $v = $113; //@line 1148 "emscripten/stb_image.c"
   }
   $i1 = 0; //@line 1150 "emscripten/stb_image.c"
   while(1) {
    $114 = $i1; //@line 1150 "emscripten/stb_image.c"
    $115 = $m2; //@line 1150 "emscripten/stb_image.c"
    $116 = ($114|0)<($115|0); //@line 1150 "emscripten/stb_image.c"
    if (!($116)) {
     break;
    }
    $117 = $1; //@line 1151 "emscripten/stb_image.c"
    $118 = HEAP32[$117>>2]|0; //@line 1151 "emscripten/stb_image.c"
    $119 = (__ZL5get8uP4stbi($118)|0); //@line 1151 "emscripten/stb_image.c"
    $120 = $i1; //@line 1151 "emscripten/stb_image.c"
    $121 = $v; //@line 1151 "emscripten/stb_image.c"
    $122 = (($121) + ($120)|0); //@line 1151 "emscripten/stb_image.c"
    HEAP8[$122>>0] = $119; //@line 1151 "emscripten/stb_image.c"
    $123 = $i1; //@line 1150 "emscripten/stb_image.c"
    $124 = (($123) + 1)|0; //@line 1150 "emscripten/stb_image.c"
    $i1 = $124; //@line 1150 "emscripten/stb_image.c"
   }
   $125 = $m2; //@line 1152 "emscripten/stb_image.c"
   $126 = $L; //@line 1152 "emscripten/stb_image.c"
   $127 = (($126) - ($125))|0; //@line 1152 "emscripten/stb_image.c"
   $L = $127; //@line 1152 "emscripten/stb_image.c"
  }
  if ((label|0) == 23) {
   $73 = (__ZL1ePKc(27424)|0); //@line 1137 "emscripten/stb_image.c"
   $0 = $73; //@line 1137 "emscripten/stb_image.c"
   $143 = $0; //@line 1162 "emscripten/stb_image.c"
   STACKTOP = sp;return ($143|0); //@line 1162 "emscripten/stb_image.c"
  }
  else if ((label|0) == 30) {
   $0 = 0; //@line 1144 "emscripten/stb_image.c"
   $143 = $0; //@line 1162 "emscripten/stb_image.c"
   STACKTOP = sp;return ($143|0); //@line 1162 "emscripten/stb_image.c"
  }
  else if ((label|0) == 33) {
   $0 = 0; //@line 1147 "emscripten/stb_image.c"
   $143 = $0; //@line 1162 "emscripten/stb_image.c"
   STACKTOP = sp;return ($143|0); //@line 1162 "emscripten/stb_image.c"
  }
  else if ((label|0) == 40) {
   $128 = $L; //@line 1154 "emscripten/stb_image.c"
   $129 = ($128|0)==(0); //@line 1154 "emscripten/stb_image.c"
   $130 = $129&1; //@line 1154 "emscripten/stb_image.c"
   $0 = $130; //@line 1154 "emscripten/stb_image.c"
   $143 = $0; //@line 1162 "emscripten/stb_image.c"
   STACKTOP = sp;return ($143|0); //@line 1162 "emscripten/stb_image.c"
  }
  break;
 }
 default: {
  $131 = $2; //@line 1157 "emscripten/stb_image.c"
  $132 = ($131|0)>=(224); //@line 1157 "emscripten/stb_image.c"
  if ($132) {
   $133 = $2; //@line 1157 "emscripten/stb_image.c"
   $134 = ($133|0)<=(239); //@line 1157 "emscripten/stb_image.c"
   if (!($134)) {
    label = 43;
   }
  } else {
   label = 43;
  }
  if ((label|0) == 43) {
   $135 = $2; //@line 1157 "emscripten/stb_image.c"
   $136 = ($135|0)==(254); //@line 1157 "emscripten/stb_image.c"
   if (!($136)) {
    $0 = 0; //@line 1161 "emscripten/stb_image.c"
    $143 = $0; //@line 1162 "emscripten/stb_image.c"
    STACKTOP = sp;return ($143|0); //@line 1162 "emscripten/stb_image.c"
   }
  }
  $137 = $1; //@line 1158 "emscripten/stb_image.c"
  $138 = HEAP32[$137>>2]|0; //@line 1158 "emscripten/stb_image.c"
  $139 = $1; //@line 1158 "emscripten/stb_image.c"
  $140 = HEAP32[$139>>2]|0; //@line 1158 "emscripten/stb_image.c"
  $141 = (__ZL5get16P4stbi($140)|0); //@line 1158 "emscripten/stb_image.c"
  $142 = (($141) - 2)|0; //@line 1158 "emscripten/stb_image.c"
  __ZL4skipP4stbii($138,$142); //@line 1158 "emscripten/stb_image.c"
  $0 = 1; //@line 1159 "emscripten/stb_image.c"
  $143 = $0; //@line 1162 "emscripten/stb_image.c"
  STACKTOP = sp;return ($143|0); //@line 1162 "emscripten/stb_image.c"
 }
 }
 return 0|0;
}
function __ZL20process_frame_headerP4jpegi($z,$scan) {
 $z = $z|0;
 $scan = $scan|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $Lf = 0, $c = 0, $h_max = 0, $i = 0, $p = 0, $q = 0, $s = 0, $v_max = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $1 = $z;
 $2 = $scan;
 $3 = $1; //@line 1192 "emscripten/stb_image.c"
 $4 = HEAP32[$3>>2]|0; //@line 1192 "emscripten/stb_image.c"
 $s = $4; //@line 1192 "emscripten/stb_image.c"
 $h_max = 1; //@line 1193 "emscripten/stb_image.c"
 $v_max = 1; //@line 1193 "emscripten/stb_image.c"
 $5 = $s; //@line 1194 "emscripten/stb_image.c"
 $6 = (__ZL5get16P4stbi($5)|0); //@line 1194 "emscripten/stb_image.c"
 $Lf = $6; //@line 1194 "emscripten/stb_image.c"
 $7 = $Lf; //@line 1194 "emscripten/stb_image.c"
 $8 = ($7|0)<(11); //@line 1194 "emscripten/stb_image.c"
 if ($8) {
  $9 = (__ZL1ePKc(27120)|0); //@line 1194 "emscripten/stb_image.c"
  $0 = $9; //@line 1194 "emscripten/stb_image.c"
  $387 = $0; //@line 1260 "emscripten/stb_image.c"
  STACKTOP = sp;return ($387|0); //@line 1260 "emscripten/stb_image.c"
 }
 $10 = $s; //@line 1195 "emscripten/stb_image.c"
 $11 = (__ZL4get8P4stbi($10)|0); //@line 1195 "emscripten/stb_image.c"
 $p = $11; //@line 1195 "emscripten/stb_image.c"
 $12 = $p; //@line 1195 "emscripten/stb_image.c"
 $13 = ($12|0)!=(8); //@line 1195 "emscripten/stb_image.c"
 if ($13) {
  $14 = (__ZL1ePKc(27136)|0); //@line 1195 "emscripten/stb_image.c"
  $0 = $14; //@line 1195 "emscripten/stb_image.c"
  $387 = $0; //@line 1260 "emscripten/stb_image.c"
  STACKTOP = sp;return ($387|0); //@line 1260 "emscripten/stb_image.c"
 }
 $15 = $s; //@line 1196 "emscripten/stb_image.c"
 $16 = (__ZL5get16P4stbi($15)|0); //@line 1196 "emscripten/stb_image.c"
 $17 = $s; //@line 1196 "emscripten/stb_image.c"
 $18 = (($17) + 4|0); //@line 1196 "emscripten/stb_image.c"
 HEAP32[$18>>2] = $16; //@line 1196 "emscripten/stb_image.c"
 $19 = $s; //@line 1196 "emscripten/stb_image.c"
 $20 = (($19) + 4|0); //@line 1196 "emscripten/stb_image.c"
 $21 = HEAP32[$20>>2]|0; //@line 1196 "emscripten/stb_image.c"
 $22 = ($21|0)==(0); //@line 1196 "emscripten/stb_image.c"
 if ($22) {
  $23 = (__ZL1ePKc(27152)|0); //@line 1196 "emscripten/stb_image.c"
  $0 = $23; //@line 1196 "emscripten/stb_image.c"
  $387 = $0; //@line 1260 "emscripten/stb_image.c"
  STACKTOP = sp;return ($387|0); //@line 1260 "emscripten/stb_image.c"
 }
 $24 = $s; //@line 1197 "emscripten/stb_image.c"
 $25 = (__ZL5get16P4stbi($24)|0); //@line 1197 "emscripten/stb_image.c"
 $26 = $s; //@line 1197 "emscripten/stb_image.c"
 HEAP32[$26>>2] = $25; //@line 1197 "emscripten/stb_image.c"
 $27 = $s; //@line 1197 "emscripten/stb_image.c"
 $28 = HEAP32[$27>>2]|0; //@line 1197 "emscripten/stb_image.c"
 $29 = ($28|0)==(0); //@line 1197 "emscripten/stb_image.c"
 if ($29) {
  $30 = (__ZL1ePKc(27176)|0); //@line 1197 "emscripten/stb_image.c"
  $0 = $30; //@line 1197 "emscripten/stb_image.c"
  $387 = $0; //@line 1260 "emscripten/stb_image.c"
  STACKTOP = sp;return ($387|0); //@line 1260 "emscripten/stb_image.c"
 }
 $31 = $s; //@line 1198 "emscripten/stb_image.c"
 $32 = (__ZL4get8P4stbi($31)|0); //@line 1198 "emscripten/stb_image.c"
 $c = $32; //@line 1198 "emscripten/stb_image.c"
 $33 = $c; //@line 1199 "emscripten/stb_image.c"
 $34 = ($33|0)!=(3); //@line 1199 "emscripten/stb_image.c"
 if ($34) {
  $35 = $c; //@line 1199 "emscripten/stb_image.c"
  $36 = ($35|0)!=(1); //@line 1199 "emscripten/stb_image.c"
  if ($36) {
   $37 = (__ZL1ePKc(27184)|0); //@line 1199 "emscripten/stb_image.c"
   $0 = $37; //@line 1199 "emscripten/stb_image.c"
   $387 = $0; //@line 1260 "emscripten/stb_image.c"
   STACKTOP = sp;return ($387|0); //@line 1260 "emscripten/stb_image.c"
  }
 }
 $38 = $c; //@line 1200 "emscripten/stb_image.c"
 $39 = $s; //@line 1200 "emscripten/stb_image.c"
 $40 = (($39) + 8|0); //@line 1200 "emscripten/stb_image.c"
 HEAP32[$40>>2] = $38; //@line 1200 "emscripten/stb_image.c"
 $i = 0; //@line 1201 "emscripten/stb_image.c"
 while(1) {
  $41 = $i; //@line 1201 "emscripten/stb_image.c"
  $42 = $c; //@line 1201 "emscripten/stb_image.c"
  $43 = ($41|0)<($42|0); //@line 1201 "emscripten/stb_image.c"
  if (!($43)) {
   break;
  }
  $44 = $i; //@line 1202 "emscripten/stb_image.c"
  $45 = $1; //@line 1202 "emscripten/stb_image.c"
  $46 = (($45) + 13724|0); //@line 1202 "emscripten/stb_image.c"
  $47 = (($46) + (($44*56)|0)|0); //@line 1202 "emscripten/stb_image.c"
  $48 = (($47) + 44|0); //@line 1202 "emscripten/stb_image.c"
  HEAP32[$48>>2] = 0; //@line 1202 "emscripten/stb_image.c"
  $49 = $i; //@line 1203 "emscripten/stb_image.c"
  $50 = $1; //@line 1203 "emscripten/stb_image.c"
  $51 = (($50) + 13724|0); //@line 1203 "emscripten/stb_image.c"
  $52 = (($51) + (($49*56)|0)|0); //@line 1203 "emscripten/stb_image.c"
  $53 = (($52) + 52|0); //@line 1203 "emscripten/stb_image.c"
  HEAP32[$53>>2] = 0; //@line 1203 "emscripten/stb_image.c"
  $54 = $i; //@line 1201 "emscripten/stb_image.c"
  $55 = (($54) + 1)|0; //@line 1201 "emscripten/stb_image.c"
  $i = $55; //@line 1201 "emscripten/stb_image.c"
 }
 $56 = $Lf; //@line 1206 "emscripten/stb_image.c"
 $57 = $s; //@line 1206 "emscripten/stb_image.c"
 $58 = (($57) + 8|0); //@line 1206 "emscripten/stb_image.c"
 $59 = HEAP32[$58>>2]|0; //@line 1206 "emscripten/stb_image.c"
 $60 = ($59*3)|0; //@line 1206 "emscripten/stb_image.c"
 $61 = (8 + ($60))|0; //@line 1206 "emscripten/stb_image.c"
 $62 = ($56|0)!=($61|0); //@line 1206 "emscripten/stb_image.c"
 if ($62) {
  $63 = (__ZL1ePKc(27120)|0); //@line 1206 "emscripten/stb_image.c"
  $0 = $63; //@line 1206 "emscripten/stb_image.c"
  $387 = $0; //@line 1260 "emscripten/stb_image.c"
  STACKTOP = sp;return ($387|0); //@line 1260 "emscripten/stb_image.c"
 }
 $i = 0; //@line 1208 "emscripten/stb_image.c"
 while(1) {
  $64 = $i; //@line 1208 "emscripten/stb_image.c"
  $65 = $s; //@line 1208 "emscripten/stb_image.c"
  $66 = (($65) + 8|0); //@line 1208 "emscripten/stb_image.c"
  $67 = HEAP32[$66>>2]|0; //@line 1208 "emscripten/stb_image.c"
  $68 = ($64|0)<($67|0); //@line 1208 "emscripten/stb_image.c"
  if (!($68)) {
   label = 34;
   break;
  }
  $69 = $s; //@line 1209 "emscripten/stb_image.c"
  $70 = (__ZL4get8P4stbi($69)|0); //@line 1209 "emscripten/stb_image.c"
  $71 = $i; //@line 1209 "emscripten/stb_image.c"
  $72 = $1; //@line 1209 "emscripten/stb_image.c"
  $73 = (($72) + 13724|0); //@line 1209 "emscripten/stb_image.c"
  $74 = (($73) + (($71*56)|0)|0); //@line 1209 "emscripten/stb_image.c"
  HEAP32[$74>>2] = $70; //@line 1209 "emscripten/stb_image.c"
  $75 = $i; //@line 1210 "emscripten/stb_image.c"
  $76 = $1; //@line 1210 "emscripten/stb_image.c"
  $77 = (($76) + 13724|0); //@line 1210 "emscripten/stb_image.c"
  $78 = (($77) + (($75*56)|0)|0); //@line 1210 "emscripten/stb_image.c"
  $79 = HEAP32[$78>>2]|0; //@line 1210 "emscripten/stb_image.c"
  $80 = $i; //@line 1210 "emscripten/stb_image.c"
  $81 = (($80) + 1)|0; //@line 1210 "emscripten/stb_image.c"
  $82 = ($79|0)!=($81|0); //@line 1210 "emscripten/stb_image.c"
  if ($82) {
   $83 = $i; //@line 1211 "emscripten/stb_image.c"
   $84 = $1; //@line 1211 "emscripten/stb_image.c"
   $85 = (($84) + 13724|0); //@line 1211 "emscripten/stb_image.c"
   $86 = (($85) + (($83*56)|0)|0); //@line 1211 "emscripten/stb_image.c"
   $87 = HEAP32[$86>>2]|0; //@line 1211 "emscripten/stb_image.c"
   $88 = $i; //@line 1211 "emscripten/stb_image.c"
   $89 = ($87|0)!=($88|0); //@line 1211 "emscripten/stb_image.c"
   if ($89) {
    label = 22;
    break;
   }
  }
  $91 = $s; //@line 1213 "emscripten/stb_image.c"
  $92 = (__ZL4get8P4stbi($91)|0); //@line 1213 "emscripten/stb_image.c"
  $q = $92; //@line 1213 "emscripten/stb_image.c"
  $93 = $q; //@line 1214 "emscripten/stb_image.c"
  $94 = $93 >> 4; //@line 1214 "emscripten/stb_image.c"
  $95 = $i; //@line 1214 "emscripten/stb_image.c"
  $96 = $1; //@line 1214 "emscripten/stb_image.c"
  $97 = (($96) + 13724|0); //@line 1214 "emscripten/stb_image.c"
  $98 = (($97) + (($95*56)|0)|0); //@line 1214 "emscripten/stb_image.c"
  $99 = (($98) + 4|0); //@line 1214 "emscripten/stb_image.c"
  HEAP32[$99>>2] = $94; //@line 1214 "emscripten/stb_image.c"
  $100 = $i; //@line 1214 "emscripten/stb_image.c"
  $101 = $1; //@line 1214 "emscripten/stb_image.c"
  $102 = (($101) + 13724|0); //@line 1214 "emscripten/stb_image.c"
  $103 = (($102) + (($100*56)|0)|0); //@line 1214 "emscripten/stb_image.c"
  $104 = (($103) + 4|0); //@line 1214 "emscripten/stb_image.c"
  $105 = HEAP32[$104>>2]|0; //@line 1214 "emscripten/stb_image.c"
  $106 = ($105|0)!=(0); //@line 1214 "emscripten/stb_image.c"
  if (!($106)) {
   label = 26;
   break;
  }
  $107 = $i; //@line 1214 "emscripten/stb_image.c"
  $108 = $1; //@line 1214 "emscripten/stb_image.c"
  $109 = (($108) + 13724|0); //@line 1214 "emscripten/stb_image.c"
  $110 = (($109) + (($107*56)|0)|0); //@line 1214 "emscripten/stb_image.c"
  $111 = (($110) + 4|0); //@line 1214 "emscripten/stb_image.c"
  $112 = HEAP32[$111>>2]|0; //@line 1214 "emscripten/stb_image.c"
  $113 = ($112|0)>(4); //@line 1214 "emscripten/stb_image.c"
  if ($113) {
   label = 26;
   break;
  }
  $115 = $q; //@line 1215 "emscripten/stb_image.c"
  $116 = $115 & 15; //@line 1215 "emscripten/stb_image.c"
  $117 = $i; //@line 1215 "emscripten/stb_image.c"
  $118 = $1; //@line 1215 "emscripten/stb_image.c"
  $119 = (($118) + 13724|0); //@line 1215 "emscripten/stb_image.c"
  $120 = (($119) + (($117*56)|0)|0); //@line 1215 "emscripten/stb_image.c"
  $121 = (($120) + 8|0); //@line 1215 "emscripten/stb_image.c"
  HEAP32[$121>>2] = $116; //@line 1215 "emscripten/stb_image.c"
  $122 = $i; //@line 1215 "emscripten/stb_image.c"
  $123 = $1; //@line 1215 "emscripten/stb_image.c"
  $124 = (($123) + 13724|0); //@line 1215 "emscripten/stb_image.c"
  $125 = (($124) + (($122*56)|0)|0); //@line 1215 "emscripten/stb_image.c"
  $126 = (($125) + 8|0); //@line 1215 "emscripten/stb_image.c"
  $127 = HEAP32[$126>>2]|0; //@line 1215 "emscripten/stb_image.c"
  $128 = ($127|0)!=(0); //@line 1215 "emscripten/stb_image.c"
  if (!($128)) {
   label = 29;
   break;
  }
  $129 = $i; //@line 1215 "emscripten/stb_image.c"
  $130 = $1; //@line 1215 "emscripten/stb_image.c"
  $131 = (($130) + 13724|0); //@line 1215 "emscripten/stb_image.c"
  $132 = (($131) + (($129*56)|0)|0); //@line 1215 "emscripten/stb_image.c"
  $133 = (($132) + 8|0); //@line 1215 "emscripten/stb_image.c"
  $134 = HEAP32[$133>>2]|0; //@line 1215 "emscripten/stb_image.c"
  $135 = ($134|0)>(4); //@line 1215 "emscripten/stb_image.c"
  if ($135) {
   label = 29;
   break;
  }
  $137 = $s; //@line 1216 "emscripten/stb_image.c"
  $138 = (__ZL4get8P4stbi($137)|0); //@line 1216 "emscripten/stb_image.c"
  $139 = $i; //@line 1216 "emscripten/stb_image.c"
  $140 = $1; //@line 1216 "emscripten/stb_image.c"
  $141 = (($140) + 13724|0); //@line 1216 "emscripten/stb_image.c"
  $142 = (($141) + (($139*56)|0)|0); //@line 1216 "emscripten/stb_image.c"
  $143 = (($142) + 12|0); //@line 1216 "emscripten/stb_image.c"
  HEAP32[$143>>2] = $138; //@line 1216 "emscripten/stb_image.c"
  $144 = $i; //@line 1216 "emscripten/stb_image.c"
  $145 = $1; //@line 1216 "emscripten/stb_image.c"
  $146 = (($145) + 13724|0); //@line 1216 "emscripten/stb_image.c"
  $147 = (($146) + (($144*56)|0)|0); //@line 1216 "emscripten/stb_image.c"
  $148 = (($147) + 12|0); //@line 1216 "emscripten/stb_image.c"
  $149 = HEAP32[$148>>2]|0; //@line 1216 "emscripten/stb_image.c"
  $150 = ($149|0)>(3); //@line 1216 "emscripten/stb_image.c"
  if ($150) {
   label = 31;
   break;
  }
  $152 = $i; //@line 1208 "emscripten/stb_image.c"
  $153 = (($152) + 1)|0; //@line 1208 "emscripten/stb_image.c"
  $i = $153; //@line 1208 "emscripten/stb_image.c"
 }
 if ((label|0) == 22) {
  $90 = (__ZL1ePKc(27208)|0); //@line 1212 "emscripten/stb_image.c"
  $0 = $90; //@line 1212 "emscripten/stb_image.c"
  $387 = $0; //@line 1260 "emscripten/stb_image.c"
  STACKTOP = sp;return ($387|0); //@line 1260 "emscripten/stb_image.c"
 }
 else if ((label|0) == 26) {
  $114 = (__ZL1ePKc(27232)|0); //@line 1214 "emscripten/stb_image.c"
  $0 = $114; //@line 1214 "emscripten/stb_image.c"
  $387 = $0; //@line 1260 "emscripten/stb_image.c"
  STACKTOP = sp;return ($387|0); //@line 1260 "emscripten/stb_image.c"
 }
 else if ((label|0) == 29) {
  $136 = (__ZL1ePKc(27240)|0); //@line 1215 "emscripten/stb_image.c"
  $0 = $136; //@line 1215 "emscripten/stb_image.c"
  $387 = $0; //@line 1260 "emscripten/stb_image.c"
  STACKTOP = sp;return ($387|0); //@line 1260 "emscripten/stb_image.c"
 }
 else if ((label|0) == 31) {
  $151 = (__ZL1ePKc(27248)|0); //@line 1216 "emscripten/stb_image.c"
  $0 = $151; //@line 1216 "emscripten/stb_image.c"
  $387 = $0; //@line 1260 "emscripten/stb_image.c"
  STACKTOP = sp;return ($387|0); //@line 1260 "emscripten/stb_image.c"
 }
 else if ((label|0) == 34) {
  $154 = $2; //@line 1219 "emscripten/stb_image.c"
  $155 = ($154|0)!=(0); //@line 1219 "emscripten/stb_image.c"
  if ($155) {
   $0 = 1; //@line 1219 "emscripten/stb_image.c"
   $387 = $0; //@line 1260 "emscripten/stb_image.c"
   STACKTOP = sp;return ($387|0); //@line 1260 "emscripten/stb_image.c"
  }
  $156 = $s; //@line 1221 "emscripten/stb_image.c"
  $157 = HEAP32[$156>>2]|0; //@line 1221 "emscripten/stb_image.c"
  $158 = (1073741824 / ($157>>>0))&-1; //@line 1221 "emscripten/stb_image.c"
  $159 = $s; //@line 1221 "emscripten/stb_image.c"
  $160 = (($159) + 8|0); //@line 1221 "emscripten/stb_image.c"
  $161 = HEAP32[$160>>2]|0; //@line 1221 "emscripten/stb_image.c"
  $162 = (($158>>>0) / ($161>>>0))&-1; //@line 1221 "emscripten/stb_image.c"
  $163 = $s; //@line 1221 "emscripten/stb_image.c"
  $164 = (($163) + 4|0); //@line 1221 "emscripten/stb_image.c"
  $165 = HEAP32[$164>>2]|0; //@line 1221 "emscripten/stb_image.c"
  $166 = ($162>>>0)<($165>>>0); //@line 1221 "emscripten/stb_image.c"
  if ($166) {
   $167 = (__ZL1ePKc(26384)|0); //@line 1221 "emscripten/stb_image.c"
   $0 = $167; //@line 1221 "emscripten/stb_image.c"
   $387 = $0; //@line 1260 "emscripten/stb_image.c"
   STACKTOP = sp;return ($387|0); //@line 1260 "emscripten/stb_image.c"
  }
  $i = 0; //@line 1223 "emscripten/stb_image.c"
  while(1) {
   $168 = $i; //@line 1223 "emscripten/stb_image.c"
   $169 = $s; //@line 1223 "emscripten/stb_image.c"
   $170 = (($169) + 8|0); //@line 1223 "emscripten/stb_image.c"
   $171 = HEAP32[$170>>2]|0; //@line 1223 "emscripten/stb_image.c"
   $172 = ($168|0)<($171|0); //@line 1223 "emscripten/stb_image.c"
   if (!($172)) {
    break;
   }
   $173 = $i; //@line 1224 "emscripten/stb_image.c"
   $174 = $1; //@line 1224 "emscripten/stb_image.c"
   $175 = (($174) + 13724|0); //@line 1224 "emscripten/stb_image.c"
   $176 = (($175) + (($173*56)|0)|0); //@line 1224 "emscripten/stb_image.c"
   $177 = (($176) + 4|0); //@line 1224 "emscripten/stb_image.c"
   $178 = HEAP32[$177>>2]|0; //@line 1224 "emscripten/stb_image.c"
   $179 = $h_max; //@line 1224 "emscripten/stb_image.c"
   $180 = ($178|0)>($179|0); //@line 1224 "emscripten/stb_image.c"
   if ($180) {
    $181 = $i; //@line 1224 "emscripten/stb_image.c"
    $182 = $1; //@line 1224 "emscripten/stb_image.c"
    $183 = (($182) + 13724|0); //@line 1224 "emscripten/stb_image.c"
    $184 = (($183) + (($181*56)|0)|0); //@line 1224 "emscripten/stb_image.c"
    $185 = (($184) + 4|0); //@line 1224 "emscripten/stb_image.c"
    $186 = HEAP32[$185>>2]|0; //@line 1224 "emscripten/stb_image.c"
    $h_max = $186; //@line 1224 "emscripten/stb_image.c"
   }
   $187 = $i; //@line 1225 "emscripten/stb_image.c"
   $188 = $1; //@line 1225 "emscripten/stb_image.c"
   $189 = (($188) + 13724|0); //@line 1225 "emscripten/stb_image.c"
   $190 = (($189) + (($187*56)|0)|0); //@line 1225 "emscripten/stb_image.c"
   $191 = (($190) + 8|0); //@line 1225 "emscripten/stb_image.c"
   $192 = HEAP32[$191>>2]|0; //@line 1225 "emscripten/stb_image.c"
   $193 = $v_max; //@line 1225 "emscripten/stb_image.c"
   $194 = ($192|0)>($193|0); //@line 1225 "emscripten/stb_image.c"
   if ($194) {
    $195 = $i; //@line 1225 "emscripten/stb_image.c"
    $196 = $1; //@line 1225 "emscripten/stb_image.c"
    $197 = (($196) + 13724|0); //@line 1225 "emscripten/stb_image.c"
    $198 = (($197) + (($195*56)|0)|0); //@line 1225 "emscripten/stb_image.c"
    $199 = (($198) + 8|0); //@line 1225 "emscripten/stb_image.c"
    $200 = HEAP32[$199>>2]|0; //@line 1225 "emscripten/stb_image.c"
    $v_max = $200; //@line 1225 "emscripten/stb_image.c"
   }
   $201 = $i; //@line 1223 "emscripten/stb_image.c"
   $202 = (($201) + 1)|0; //@line 1223 "emscripten/stb_image.c"
   $i = $202; //@line 1223 "emscripten/stb_image.c"
  }
  $203 = $h_max; //@line 1229 "emscripten/stb_image.c"
  $204 = $1; //@line 1229 "emscripten/stb_image.c"
  $205 = (($204) + 13700|0); //@line 1229 "emscripten/stb_image.c"
  HEAP32[$205>>2] = $203; //@line 1229 "emscripten/stb_image.c"
  $206 = $v_max; //@line 1230 "emscripten/stb_image.c"
  $207 = $1; //@line 1230 "emscripten/stb_image.c"
  $208 = (($207) + 13704|0); //@line 1230 "emscripten/stb_image.c"
  HEAP32[$208>>2] = $206; //@line 1230 "emscripten/stb_image.c"
  $209 = $h_max; //@line 1231 "emscripten/stb_image.c"
  $210 = $209<<3; //@line 1231 "emscripten/stb_image.c"
  $211 = $1; //@line 1231 "emscripten/stb_image.c"
  $212 = (($211) + 13716|0); //@line 1231 "emscripten/stb_image.c"
  HEAP32[$212>>2] = $210; //@line 1231 "emscripten/stb_image.c"
  $213 = $v_max; //@line 1232 "emscripten/stb_image.c"
  $214 = $213<<3; //@line 1232 "emscripten/stb_image.c"
  $215 = $1; //@line 1232 "emscripten/stb_image.c"
  $216 = (($215) + 13720|0); //@line 1232 "emscripten/stb_image.c"
  HEAP32[$216>>2] = $214; //@line 1232 "emscripten/stb_image.c"
  $217 = $s; //@line 1233 "emscripten/stb_image.c"
  $218 = HEAP32[$217>>2]|0; //@line 1233 "emscripten/stb_image.c"
  $219 = $1; //@line 1233 "emscripten/stb_image.c"
  $220 = (($219) + 13716|0); //@line 1233 "emscripten/stb_image.c"
  $221 = HEAP32[$220>>2]|0; //@line 1233 "emscripten/stb_image.c"
  $222 = (($218) + ($221))|0; //@line 1233 "emscripten/stb_image.c"
  $223 = (($222) - 1)|0; //@line 1233 "emscripten/stb_image.c"
  $224 = $1; //@line 1233 "emscripten/stb_image.c"
  $225 = (($224) + 13716|0); //@line 1233 "emscripten/stb_image.c"
  $226 = HEAP32[$225>>2]|0; //@line 1233 "emscripten/stb_image.c"
  $227 = (($223>>>0) / ($226>>>0))&-1; //@line 1233 "emscripten/stb_image.c"
  $228 = $1; //@line 1233 "emscripten/stb_image.c"
  $229 = (($228) + 13708|0); //@line 1233 "emscripten/stb_image.c"
  HEAP32[$229>>2] = $227; //@line 1233 "emscripten/stb_image.c"
  $230 = $s; //@line 1234 "emscripten/stb_image.c"
  $231 = (($230) + 4|0); //@line 1234 "emscripten/stb_image.c"
  $232 = HEAP32[$231>>2]|0; //@line 1234 "emscripten/stb_image.c"
  $233 = $1; //@line 1234 "emscripten/stb_image.c"
  $234 = (($233) + 13720|0); //@line 1234 "emscripten/stb_image.c"
  $235 = HEAP32[$234>>2]|0; //@line 1234 "emscripten/stb_image.c"
  $236 = (($232) + ($235))|0; //@line 1234 "emscripten/stb_image.c"
  $237 = (($236) - 1)|0; //@line 1234 "emscripten/stb_image.c"
  $238 = $1; //@line 1234 "emscripten/stb_image.c"
  $239 = (($238) + 13720|0); //@line 1234 "emscripten/stb_image.c"
  $240 = HEAP32[$239>>2]|0; //@line 1234 "emscripten/stb_image.c"
  $241 = (($237>>>0) / ($240>>>0))&-1; //@line 1234 "emscripten/stb_image.c"
  $242 = $1; //@line 1234 "emscripten/stb_image.c"
  $243 = (($242) + 13712|0); //@line 1234 "emscripten/stb_image.c"
  HEAP32[$243>>2] = $241; //@line 1234 "emscripten/stb_image.c"
  $i = 0; //@line 1236 "emscripten/stb_image.c"
  while(1) {
   $244 = $i; //@line 1236 "emscripten/stb_image.c"
   $245 = $s; //@line 1236 "emscripten/stb_image.c"
   $246 = (($245) + 8|0); //@line 1236 "emscripten/stb_image.c"
   $247 = HEAP32[$246>>2]|0; //@line 1236 "emscripten/stb_image.c"
   $248 = ($244|0)<($247|0); //@line 1236 "emscripten/stb_image.c"
   if (!($248)) {
    label = 56;
    break;
   }
   $249 = $s; //@line 1238 "emscripten/stb_image.c"
   $250 = HEAP32[$249>>2]|0; //@line 1238 "emscripten/stb_image.c"
   $251 = $i; //@line 1238 "emscripten/stb_image.c"
   $252 = $1; //@line 1238 "emscripten/stb_image.c"
   $253 = (($252) + 13724|0); //@line 1238 "emscripten/stb_image.c"
   $254 = (($253) + (($251*56)|0)|0); //@line 1238 "emscripten/stb_image.c"
   $255 = (($254) + 4|0); //@line 1238 "emscripten/stb_image.c"
   $256 = HEAP32[$255>>2]|0; //@line 1238 "emscripten/stb_image.c"
   $257 = Math_imul($250, $256)|0; //@line 1238 "emscripten/stb_image.c"
   $258 = $h_max; //@line 1238 "emscripten/stb_image.c"
   $259 = (($257) + ($258))|0; //@line 1238 "emscripten/stb_image.c"
   $260 = (($259) - 1)|0; //@line 1238 "emscripten/stb_image.c"
   $261 = $h_max; //@line 1238 "emscripten/stb_image.c"
   $262 = (($260>>>0) / ($261>>>0))&-1; //@line 1238 "emscripten/stb_image.c"
   $263 = $i; //@line 1238 "emscripten/stb_image.c"
   $264 = $1; //@line 1238 "emscripten/stb_image.c"
   $265 = (($264) + 13724|0); //@line 1238 "emscripten/stb_image.c"
   $266 = (($265) + (($263*56)|0)|0); //@line 1238 "emscripten/stb_image.c"
   $267 = (($266) + 28|0); //@line 1238 "emscripten/stb_image.c"
   HEAP32[$267>>2] = $262; //@line 1238 "emscripten/stb_image.c"
   $268 = $s; //@line 1239 "emscripten/stb_image.c"
   $269 = (($268) + 4|0); //@line 1239 "emscripten/stb_image.c"
   $270 = HEAP32[$269>>2]|0; //@line 1239 "emscripten/stb_image.c"
   $271 = $i; //@line 1239 "emscripten/stb_image.c"
   $272 = $1; //@line 1239 "emscripten/stb_image.c"
   $273 = (($272) + 13724|0); //@line 1239 "emscripten/stb_image.c"
   $274 = (($273) + (($271*56)|0)|0); //@line 1239 "emscripten/stb_image.c"
   $275 = (($274) + 8|0); //@line 1239 "emscripten/stb_image.c"
   $276 = HEAP32[$275>>2]|0; //@line 1239 "emscripten/stb_image.c"
   $277 = Math_imul($270, $276)|0; //@line 1239 "emscripten/stb_image.c"
   $278 = $v_max; //@line 1239 "emscripten/stb_image.c"
   $279 = (($277) + ($278))|0; //@line 1239 "emscripten/stb_image.c"
   $280 = (($279) - 1)|0; //@line 1239 "emscripten/stb_image.c"
   $281 = $v_max; //@line 1239 "emscripten/stb_image.c"
   $282 = (($280>>>0) / ($281>>>0))&-1; //@line 1239 "emscripten/stb_image.c"
   $283 = $i; //@line 1239 "emscripten/stb_image.c"
   $284 = $1; //@line 1239 "emscripten/stb_image.c"
   $285 = (($284) + 13724|0); //@line 1239 "emscripten/stb_image.c"
   $286 = (($285) + (($283*56)|0)|0); //@line 1239 "emscripten/stb_image.c"
   $287 = (($286) + 32|0); //@line 1239 "emscripten/stb_image.c"
   HEAP32[$287>>2] = $282; //@line 1239 "emscripten/stb_image.c"
   $288 = $1; //@line 1244 "emscripten/stb_image.c"
   $289 = (($288) + 13708|0); //@line 1244 "emscripten/stb_image.c"
   $290 = HEAP32[$289>>2]|0; //@line 1244 "emscripten/stb_image.c"
   $291 = $i; //@line 1244 "emscripten/stb_image.c"
   $292 = $1; //@line 1244 "emscripten/stb_image.c"
   $293 = (($292) + 13724|0); //@line 1244 "emscripten/stb_image.c"
   $294 = (($293) + (($291*56)|0)|0); //@line 1244 "emscripten/stb_image.c"
   $295 = (($294) + 4|0); //@line 1244 "emscripten/stb_image.c"
   $296 = HEAP32[$295>>2]|0; //@line 1244 "emscripten/stb_image.c"
   $297 = Math_imul($290, $296)|0; //@line 1244 "emscripten/stb_image.c"
   $298 = $297<<3; //@line 1244 "emscripten/stb_image.c"
   $299 = $i; //@line 1244 "emscripten/stb_image.c"
   $300 = $1; //@line 1244 "emscripten/stb_image.c"
   $301 = (($300) + 13724|0); //@line 1244 "emscripten/stb_image.c"
   $302 = (($301) + (($299*56)|0)|0); //@line 1244 "emscripten/stb_image.c"
   $303 = (($302) + 36|0); //@line 1244 "emscripten/stb_image.c"
   HEAP32[$303>>2] = $298; //@line 1244 "emscripten/stb_image.c"
   $304 = $1; //@line 1245 "emscripten/stb_image.c"
   $305 = (($304) + 13712|0); //@line 1245 "emscripten/stb_image.c"
   $306 = HEAP32[$305>>2]|0; //@line 1245 "emscripten/stb_image.c"
   $307 = $i; //@line 1245 "emscripten/stb_image.c"
   $308 = $1; //@line 1245 "emscripten/stb_image.c"
   $309 = (($308) + 13724|0); //@line 1245 "emscripten/stb_image.c"
   $310 = (($309) + (($307*56)|0)|0); //@line 1245 "emscripten/stb_image.c"
   $311 = (($310) + 8|0); //@line 1245 "emscripten/stb_image.c"
   $312 = HEAP32[$311>>2]|0; //@line 1245 "emscripten/stb_image.c"
   $313 = Math_imul($306, $312)|0; //@line 1245 "emscripten/stb_image.c"
   $314 = $313<<3; //@line 1245 "emscripten/stb_image.c"
   $315 = $i; //@line 1245 "emscripten/stb_image.c"
   $316 = $1; //@line 1245 "emscripten/stb_image.c"
   $317 = (($316) + 13724|0); //@line 1245 "emscripten/stb_image.c"
   $318 = (($317) + (($315*56)|0)|0); //@line 1245 "emscripten/stb_image.c"
   $319 = (($318) + 40|0); //@line 1245 "emscripten/stb_image.c"
   HEAP32[$319>>2] = $314; //@line 1245 "emscripten/stb_image.c"
   $320 = $i; //@line 1246 "emscripten/stb_image.c"
   $321 = $1; //@line 1246 "emscripten/stb_image.c"
   $322 = (($321) + 13724|0); //@line 1246 "emscripten/stb_image.c"
   $323 = (($322) + (($320*56)|0)|0); //@line 1246 "emscripten/stb_image.c"
   $324 = (($323) + 36|0); //@line 1246 "emscripten/stb_image.c"
   $325 = HEAP32[$324>>2]|0; //@line 1246 "emscripten/stb_image.c"
   $326 = $i; //@line 1246 "emscripten/stb_image.c"
   $327 = $1; //@line 1246 "emscripten/stb_image.c"
   $328 = (($327) + 13724|0); //@line 1246 "emscripten/stb_image.c"
   $329 = (($328) + (($326*56)|0)|0); //@line 1246 "emscripten/stb_image.c"
   $330 = (($329) + 40|0); //@line 1246 "emscripten/stb_image.c"
   $331 = HEAP32[$330>>2]|0; //@line 1246 "emscripten/stb_image.c"
   $332 = Math_imul($325, $331)|0; //@line 1246 "emscripten/stb_image.c"
   $333 = (($332) + 15)|0; //@line 1246 "emscripten/stb_image.c"
   $334 = (_malloc($333)|0); //@line 1246 "emscripten/stb_image.c"
   $335 = $i; //@line 1246 "emscripten/stb_image.c"
   $336 = $1; //@line 1246 "emscripten/stb_image.c"
   $337 = (($336) + 13724|0); //@line 1246 "emscripten/stb_image.c"
   $338 = (($337) + (($335*56)|0)|0); //@line 1246 "emscripten/stb_image.c"
   $339 = (($338) + 48|0); //@line 1246 "emscripten/stb_image.c"
   HEAP32[$339>>2] = $334; //@line 1246 "emscripten/stb_image.c"
   $340 = $i; //@line 1247 "emscripten/stb_image.c"
   $341 = $1; //@line 1247 "emscripten/stb_image.c"
   $342 = (($341) + 13724|0); //@line 1247 "emscripten/stb_image.c"
   $343 = (($342) + (($340*56)|0)|0); //@line 1247 "emscripten/stb_image.c"
   $344 = (($343) + 48|0); //@line 1247 "emscripten/stb_image.c"
   $345 = HEAP32[$344>>2]|0; //@line 1247 "emscripten/stb_image.c"
   $346 = ($345|0)==(0|0); //@line 1247 "emscripten/stb_image.c"
   if ($346) {
    break;
   }
   $365 = $i; //@line 1255 "emscripten/stb_image.c"
   $366 = $1; //@line 1255 "emscripten/stb_image.c"
   $367 = (($366) + 13724|0); //@line 1255 "emscripten/stb_image.c"
   $368 = (($367) + (($365*56)|0)|0); //@line 1255 "emscripten/stb_image.c"
   $369 = (($368) + 48|0); //@line 1255 "emscripten/stb_image.c"
   $370 = HEAP32[$369>>2]|0; //@line 1255 "emscripten/stb_image.c"
   $371 = $370; //@line 1255 "emscripten/stb_image.c"
   $372 = (($371) + 15)|0; //@line 1255 "emscripten/stb_image.c"
   $373 = $372 & -16; //@line 1255 "emscripten/stb_image.c"
   $374 = $373; //@line 1255 "emscripten/stb_image.c"
   $375 = $i; //@line 1255 "emscripten/stb_image.c"
   $376 = $1; //@line 1255 "emscripten/stb_image.c"
   $377 = (($376) + 13724|0); //@line 1255 "emscripten/stb_image.c"
   $378 = (($377) + (($375*56)|0)|0); //@line 1255 "emscripten/stb_image.c"
   $379 = (($378) + 44|0); //@line 1255 "emscripten/stb_image.c"
   HEAP32[$379>>2] = $374; //@line 1255 "emscripten/stb_image.c"
   $380 = $i; //@line 1256 "emscripten/stb_image.c"
   $381 = $1; //@line 1256 "emscripten/stb_image.c"
   $382 = (($381) + 13724|0); //@line 1256 "emscripten/stb_image.c"
   $383 = (($382) + (($380*56)|0)|0); //@line 1256 "emscripten/stb_image.c"
   $384 = (($383) + 52|0); //@line 1256 "emscripten/stb_image.c"
   HEAP32[$384>>2] = 0; //@line 1256 "emscripten/stb_image.c"
   $385 = $i; //@line 1236 "emscripten/stb_image.c"
   $386 = (($385) + 1)|0; //@line 1236 "emscripten/stb_image.c"
   $i = $386; //@line 1236 "emscripten/stb_image.c"
  }
  if ((label|0) == 56) {
   $0 = 1; //@line 1259 "emscripten/stb_image.c"
   $387 = $0; //@line 1260 "emscripten/stb_image.c"
   STACKTOP = sp;return ($387|0); //@line 1260 "emscripten/stb_image.c"
  }
  $347 = $i; //@line 1248 "emscripten/stb_image.c"
  $348 = (($347) + -1)|0; //@line 1248 "emscripten/stb_image.c"
  $i = $348; //@line 1248 "emscripten/stb_image.c"
  while(1) {
   $349 = $i; //@line 1248 "emscripten/stb_image.c"
   $350 = ($349|0)>=(0); //@line 1248 "emscripten/stb_image.c"
   if (!($350)) {
    break;
   }
   $351 = $i; //@line 1249 "emscripten/stb_image.c"
   $352 = $1; //@line 1249 "emscripten/stb_image.c"
   $353 = (($352) + 13724|0); //@line 1249 "emscripten/stb_image.c"
   $354 = (($353) + (($351*56)|0)|0); //@line 1249 "emscripten/stb_image.c"
   $355 = (($354) + 48|0); //@line 1249 "emscripten/stb_image.c"
   $356 = HEAP32[$355>>2]|0; //@line 1249 "emscripten/stb_image.c"
   _free($356); //@line 1249 "emscripten/stb_image.c"
   $357 = $i; //@line 1250 "emscripten/stb_image.c"
   $358 = $1; //@line 1250 "emscripten/stb_image.c"
   $359 = (($358) + 13724|0); //@line 1250 "emscripten/stb_image.c"
   $360 = (($359) + (($357*56)|0)|0); //@line 1250 "emscripten/stb_image.c"
   $361 = (($360) + 44|0); //@line 1250 "emscripten/stb_image.c"
   HEAP32[$361>>2] = 0; //@line 1250 "emscripten/stb_image.c"
   $362 = $i; //@line 1248 "emscripten/stb_image.c"
   $363 = (($362) + -1)|0; //@line 1248 "emscripten/stb_image.c"
   $i = $363; //@line 1248 "emscripten/stb_image.c"
  }
  $364 = (__ZL1ePKc(26624)|0); //@line 1252 "emscripten/stb_image.c"
  $0 = $364; //@line 1252 "emscripten/stb_image.c"
  $387 = $0; //@line 1260 "emscripten/stb_image.c"
  STACKTOP = sp;return ($387|0); //@line 1260 "emscripten/stb_image.c"
 }
 return 0|0;
}
function __ZL13build_huffmanP7huffmanPi($h,$count) {
 $h = $h|0;
 $count = $count|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $c = 0, $code = 0, $i = 0, $j = 0, $k = 0, $m = 0, $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $1 = $h;
 $2 = $count;
 $k = 0; //@line 674 "emscripten/stb_image.c"
 $i = 0; //@line 676 "emscripten/stb_image.c"
 while(1) {
  $3 = $i; //@line 676 "emscripten/stb_image.c"
  $4 = ($3|0)<(16); //@line 676 "emscripten/stb_image.c"
  if (!($4)) {
   break;
  }
  $j = 0; //@line 677 "emscripten/stb_image.c"
  while(1) {
   $5 = $j; //@line 677 "emscripten/stb_image.c"
   $6 = $i; //@line 677 "emscripten/stb_image.c"
   $7 = $2; //@line 677 "emscripten/stb_image.c"
   $8 = (($7) + ($6<<2)|0); //@line 677 "emscripten/stb_image.c"
   $9 = HEAP32[$8>>2]|0; //@line 677 "emscripten/stb_image.c"
   $10 = ($5|0)<($9|0); //@line 677 "emscripten/stb_image.c"
   if (!($10)) {
    break;
   }
   $11 = $i; //@line 678 "emscripten/stb_image.c"
   $12 = (($11) + 1)|0; //@line 678 "emscripten/stb_image.c"
   $13 = $12&255; //@line 678 "emscripten/stb_image.c"
   $14 = $k; //@line 678 "emscripten/stb_image.c"
   $15 = (($14) + 1)|0; //@line 678 "emscripten/stb_image.c"
   $k = $15; //@line 678 "emscripten/stb_image.c"
   $16 = $1; //@line 678 "emscripten/stb_image.c"
   $17 = (($16) + 1280|0); //@line 678 "emscripten/stb_image.c"
   $18 = (($17) + ($14)|0); //@line 678 "emscripten/stb_image.c"
   HEAP8[$18>>0] = $13; //@line 678 "emscripten/stb_image.c"
   $19 = $j; //@line 677 "emscripten/stb_image.c"
   $20 = (($19) + 1)|0; //@line 677 "emscripten/stb_image.c"
   $j = $20; //@line 677 "emscripten/stb_image.c"
  }
  $21 = $i; //@line 676 "emscripten/stb_image.c"
  $22 = (($21) + 1)|0; //@line 676 "emscripten/stb_image.c"
  $i = $22; //@line 676 "emscripten/stb_image.c"
 }
 $23 = $k; //@line 679 "emscripten/stb_image.c"
 $24 = $1; //@line 679 "emscripten/stb_image.c"
 $25 = (($24) + 1280|0); //@line 679 "emscripten/stb_image.c"
 $26 = (($25) + ($23)|0); //@line 679 "emscripten/stb_image.c"
 HEAP8[$26>>0] = 0; //@line 679 "emscripten/stb_image.c"
 $code = 0; //@line 682 "emscripten/stb_image.c"
 $k = 0; //@line 683 "emscripten/stb_image.c"
 $j = 1; //@line 684 "emscripten/stb_image.c"
 while(1) {
  $27 = $j; //@line 684 "emscripten/stb_image.c"
  $28 = ($27|0)<=(16); //@line 684 "emscripten/stb_image.c"
  if (!($28)) {
   break;
  }
  $29 = $k; //@line 686 "emscripten/stb_image.c"
  $30 = $code; //@line 686 "emscripten/stb_image.c"
  $31 = (($29) - ($30))|0; //@line 686 "emscripten/stb_image.c"
  $32 = $j; //@line 686 "emscripten/stb_image.c"
  $33 = $1; //@line 686 "emscripten/stb_image.c"
  $34 = (($33) + 1612|0); //@line 686 "emscripten/stb_image.c"
  $35 = (($34) + ($32<<2)|0); //@line 686 "emscripten/stb_image.c"
  HEAP32[$35>>2] = $31; //@line 686 "emscripten/stb_image.c"
  $36 = $k; //@line 687 "emscripten/stb_image.c"
  $37 = $1; //@line 687 "emscripten/stb_image.c"
  $38 = (($37) + 1280|0); //@line 687 "emscripten/stb_image.c"
  $39 = (($38) + ($36)|0); //@line 687 "emscripten/stb_image.c"
  $40 = HEAP8[$39>>0]|0; //@line 687 "emscripten/stb_image.c"
  $41 = $40&255; //@line 687 "emscripten/stb_image.c"
  $42 = $j; //@line 687 "emscripten/stb_image.c"
  $43 = ($41|0)==($42|0); //@line 687 "emscripten/stb_image.c"
  if ($43) {
   while(1) {
    $44 = $k; //@line 688 "emscripten/stb_image.c"
    $45 = $1; //@line 688 "emscripten/stb_image.c"
    $46 = (($45) + 1280|0); //@line 688 "emscripten/stb_image.c"
    $47 = (($46) + ($44)|0); //@line 688 "emscripten/stb_image.c"
    $48 = HEAP8[$47>>0]|0; //@line 688 "emscripten/stb_image.c"
    $49 = $48&255; //@line 688 "emscripten/stb_image.c"
    $50 = $j; //@line 688 "emscripten/stb_image.c"
    $51 = ($49|0)==($50|0); //@line 688 "emscripten/stb_image.c"
    if (!($51)) {
     break;
    }
    $52 = $code; //@line 689 "emscripten/stb_image.c"
    $53 = (($52) + 1)|0; //@line 689 "emscripten/stb_image.c"
    $code = $53; //@line 689 "emscripten/stb_image.c"
    $54 = $52&65535; //@line 689 "emscripten/stb_image.c"
    $55 = $k; //@line 689 "emscripten/stb_image.c"
    $56 = (($55) + 1)|0; //@line 689 "emscripten/stb_image.c"
    $k = $56; //@line 689 "emscripten/stb_image.c"
    $57 = $1; //@line 689 "emscripten/stb_image.c"
    $58 = (($57) + 512|0); //@line 689 "emscripten/stb_image.c"
    $59 = (($58) + ($55<<1)|0); //@line 689 "emscripten/stb_image.c"
    HEAP16[$59>>1] = $54; //@line 689 "emscripten/stb_image.c"
   }
   $60 = $code; //@line 690 "emscripten/stb_image.c"
   $61 = (($60) - 1)|0; //@line 690 "emscripten/stb_image.c"
   $62 = $j; //@line 690 "emscripten/stb_image.c"
   $63 = 1 << $62; //@line 690 "emscripten/stb_image.c"
   $64 = ($61|0)>=($63|0); //@line 690 "emscripten/stb_image.c"
   if ($64) {
    label = 16;
    break;
   }
  }
  $66 = $code; //@line 693 "emscripten/stb_image.c"
  $67 = $j; //@line 693 "emscripten/stb_image.c"
  $68 = (16 - ($67))|0; //@line 693 "emscripten/stb_image.c"
  $69 = $66 << $68; //@line 693 "emscripten/stb_image.c"
  $70 = $j; //@line 693 "emscripten/stb_image.c"
  $71 = $1; //@line 693 "emscripten/stb_image.c"
  $72 = (($71) + 1540|0); //@line 693 "emscripten/stb_image.c"
  $73 = (($72) + ($70<<2)|0); //@line 693 "emscripten/stb_image.c"
  HEAP32[$73>>2] = $69; //@line 693 "emscripten/stb_image.c"
  $74 = $code; //@line 694 "emscripten/stb_image.c"
  $75 = $74 << 1; //@line 694 "emscripten/stb_image.c"
  $code = $75; //@line 694 "emscripten/stb_image.c"
  $76 = $j; //@line 684 "emscripten/stb_image.c"
  $77 = (($76) + 1)|0; //@line 684 "emscripten/stb_image.c"
  $j = $77; //@line 684 "emscripten/stb_image.c"
 }
 if ((label|0) == 16) {
  $65 = (__ZL1ePKc(27440)|0); //@line 690 "emscripten/stb_image.c"
  $0 = $65; //@line 690 "emscripten/stb_image.c"
  $120 = $0; //@line 711 "emscripten/stb_image.c"
  STACKTOP = sp;return ($120|0); //@line 711 "emscripten/stb_image.c"
 }
 $78 = $j; //@line 696 "emscripten/stb_image.c"
 $79 = $1; //@line 696 "emscripten/stb_image.c"
 $80 = (($79) + 1540|0); //@line 696 "emscripten/stb_image.c"
 $81 = (($80) + ($78<<2)|0); //@line 696 "emscripten/stb_image.c"
 HEAP32[$81>>2] = -1; //@line 696 "emscripten/stb_image.c"
 $82 = $1; //@line 699 "emscripten/stb_image.c"
 _memset(($82|0),-1,512)|0; //@line 699 "emscripten/stb_image.c"
 $i = 0; //@line 700 "emscripten/stb_image.c"
 while(1) {
  $83 = $i; //@line 700 "emscripten/stb_image.c"
  $84 = $k; //@line 700 "emscripten/stb_image.c"
  $85 = ($83|0)<($84|0); //@line 700 "emscripten/stb_image.c"
  if (!($85)) {
   break;
  }
  $86 = $i; //@line 701 "emscripten/stb_image.c"
  $87 = $1; //@line 701 "emscripten/stb_image.c"
  $88 = (($87) + 1280|0); //@line 701 "emscripten/stb_image.c"
  $89 = (($88) + ($86)|0); //@line 701 "emscripten/stb_image.c"
  $90 = HEAP8[$89>>0]|0; //@line 701 "emscripten/stb_image.c"
  $91 = $90&255; //@line 701 "emscripten/stb_image.c"
  $s = $91; //@line 701 "emscripten/stb_image.c"
  $92 = $s; //@line 702 "emscripten/stb_image.c"
  $93 = ($92|0)<=(9); //@line 702 "emscripten/stb_image.c"
  if ($93) {
   $94 = $i; //@line 703 "emscripten/stb_image.c"
   $95 = $1; //@line 703 "emscripten/stb_image.c"
   $96 = (($95) + 512|0); //@line 703 "emscripten/stb_image.c"
   $97 = (($96) + ($94<<1)|0); //@line 703 "emscripten/stb_image.c"
   $98 = HEAP16[$97>>1]|0; //@line 703 "emscripten/stb_image.c"
   $99 = $98&65535; //@line 703 "emscripten/stb_image.c"
   $100 = $s; //@line 703 "emscripten/stb_image.c"
   $101 = (9 - ($100))|0; //@line 703 "emscripten/stb_image.c"
   $102 = $99 << $101; //@line 703 "emscripten/stb_image.c"
   $c = $102; //@line 703 "emscripten/stb_image.c"
   $103 = $s; //@line 704 "emscripten/stb_image.c"
   $104 = (9 - ($103))|0; //@line 704 "emscripten/stb_image.c"
   $105 = 1 << $104; //@line 704 "emscripten/stb_image.c"
   $m = $105; //@line 704 "emscripten/stb_image.c"
   $j = 0; //@line 705 "emscripten/stb_image.c"
   while(1) {
    $106 = $j; //@line 705 "emscripten/stb_image.c"
    $107 = $m; //@line 705 "emscripten/stb_image.c"
    $108 = ($106|0)<($107|0); //@line 705 "emscripten/stb_image.c"
    if (!($108)) {
     break;
    }
    $109 = $i; //@line 706 "emscripten/stb_image.c"
    $110 = $109&255; //@line 706 "emscripten/stb_image.c"
    $111 = $c; //@line 706 "emscripten/stb_image.c"
    $112 = $j; //@line 706 "emscripten/stb_image.c"
    $113 = (($111) + ($112))|0; //@line 706 "emscripten/stb_image.c"
    $114 = $1; //@line 706 "emscripten/stb_image.c"
    $115 = (($114) + ($113)|0); //@line 706 "emscripten/stb_image.c"
    HEAP8[$115>>0] = $110; //@line 706 "emscripten/stb_image.c"
    $116 = $j; //@line 705 "emscripten/stb_image.c"
    $117 = (($116) + 1)|0; //@line 705 "emscripten/stb_image.c"
    $j = $117; //@line 705 "emscripten/stb_image.c"
   }
  }
  $118 = $i; //@line 700 "emscripten/stb_image.c"
  $119 = (($118) + 1)|0; //@line 700 "emscripten/stb_image.c"
  $i = $119; //@line 700 "emscripten/stb_image.c"
 }
 $0 = 1; //@line 710 "emscripten/stb_image.c"
 $120 = $0; //@line 711 "emscripten/stb_image.c"
 STACKTOP = sp;return ($120|0); //@line 711 "emscripten/stb_image.c"
}
function __ZL8hdr_loadP4stbiPiS1_S1_i($s,$x,$y,$comp,$req_comp) {
 $s = $s|0;
 $x = $x|0;
 $y = $y|0;
 $comp = $comp|0;
 $req_comp = $req_comp|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $buffer = 0, $c1 = 0, $c2 = 0, $count = 0, $hdr_data = 0, $height = 0, $i = 0, $j = 0, $k = 0, $len = 0, $rgbe = 0, $rgbe1 = 0, $scanline = 0, $token = 0, $valid = 0, $value = 0, $width = 0, $z = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1120|0;
 $buffer = sp + 88|0;
 $token = sp + 52|0;
 $rgbe = sp + 80|0;
 $rgbe1 = sp + 76|0;
 $1 = $s;
 $2 = $x;
 $3 = $y;
 $4 = $comp;
 $5 = $req_comp;
 $valid = 0; //@line 3938 "emscripten/stb_image.c"
 $6 = $1; //@line 3948 "emscripten/stb_image.c"
 $7 = (__ZL12hdr_gettokenP4stbiPc($6,$buffer)|0); //@line 3948 "emscripten/stb_image.c"
 $8 = (_strcmp($7,26280)|0); //@line 3948 "emscripten/stb_image.c"
 $9 = ($8|0)!=(0); //@line 3948 "emscripten/stb_image.c"
 if ($9) {
  $10 = (__ZL1ePKc(27464)|0); //@line 3949 "emscripten/stb_image.c"
  $11 = ($10|0)!=(0); //@line 3949 "emscripten/stb_image.c"
  $12 = $11 ? 0 : 0; //@line 3949 "emscripten/stb_image.c"
  $13 = $12; //@line 3949 "emscripten/stb_image.c"
  $0 = $13; //@line 3949 "emscripten/stb_image.c"
  $220 = $0; //@line 4043 "emscripten/stb_image.c"
  STACKTOP = sp;return ($220|0); //@line 4043 "emscripten/stb_image.c"
 }
 while(1) {
  $14 = $1; //@line 3953 "emscripten/stb_image.c"
  $15 = (__ZL12hdr_gettokenP4stbiPc($14,$buffer)|0); //@line 3953 "emscripten/stb_image.c"
  HEAP32[$token>>2] = $15; //@line 3953 "emscripten/stb_image.c"
  $16 = HEAP32[$token>>2]|0; //@line 3954 "emscripten/stb_image.c"
  $17 = HEAP8[$16>>0]|0; //@line 3954 "emscripten/stb_image.c"
  $18 = $17 << 24 >> 24; //@line 3954 "emscripten/stb_image.c"
  $19 = ($18|0)==(0); //@line 3954 "emscripten/stb_image.c"
  if ($19) {
   break;
  }
  $20 = HEAP32[$token>>2]|0; //@line 3955 "emscripten/stb_image.c"
  $21 = (_strcmp($20,26296)|0); //@line 3955 "emscripten/stb_image.c"
  $22 = ($21|0)==(0); //@line 3955 "emscripten/stb_image.c"
  if ($22) {
   $valid = 1; //@line 3955 "emscripten/stb_image.c"
  }
 }
 $23 = $valid; //@line 3958 "emscripten/stb_image.c"
 $24 = ($23|0)!=(0); //@line 3958 "emscripten/stb_image.c"
 if (!($24)) {
  $25 = (__ZL1ePKc(27472)|0); //@line 3958 "emscripten/stb_image.c"
  $26 = ($25|0)!=(0); //@line 3958 "emscripten/stb_image.c"
  $27 = $26 ? 0 : 0; //@line 3958 "emscripten/stb_image.c"
  $28 = $27; //@line 3958 "emscripten/stb_image.c"
  $0 = $28; //@line 3958 "emscripten/stb_image.c"
  $220 = $0; //@line 4043 "emscripten/stb_image.c"
  STACKTOP = sp;return ($220|0); //@line 4043 "emscripten/stb_image.c"
 }
 $29 = $1; //@line 3962 "emscripten/stb_image.c"
 $30 = (__ZL12hdr_gettokenP4stbiPc($29,$buffer)|0); //@line 3962 "emscripten/stb_image.c"
 HEAP32[$token>>2] = $30; //@line 3962 "emscripten/stb_image.c"
 $31 = HEAP32[$token>>2]|0; //@line 3963 "emscripten/stb_image.c"
 $32 = (_strncmp($31,26320,3)|0); //@line 3963 "emscripten/stb_image.c"
 $33 = ($32|0)!=(0); //@line 3963 "emscripten/stb_image.c"
 if ($33) {
  $34 = (__ZL1ePKc(27496)|0); //@line 3963 "emscripten/stb_image.c"
  $35 = ($34|0)!=(0); //@line 3963 "emscripten/stb_image.c"
  $36 = $35 ? 0 : 0; //@line 3963 "emscripten/stb_image.c"
  $37 = $36; //@line 3963 "emscripten/stb_image.c"
  $0 = $37; //@line 3963 "emscripten/stb_image.c"
  $220 = $0; //@line 4043 "emscripten/stb_image.c"
  STACKTOP = sp;return ($220|0); //@line 4043 "emscripten/stb_image.c"
 }
 $38 = HEAP32[$token>>2]|0; //@line 3964 "emscripten/stb_image.c"
 $39 = (($38) + 3|0); //@line 3964 "emscripten/stb_image.c"
 HEAP32[$token>>2] = $39; //@line 3964 "emscripten/stb_image.c"
 $40 = HEAP32[$token>>2]|0; //@line 3965 "emscripten/stb_image.c"
 $41 = (_strtol($40,$token,10)|0); //@line 3965 "emscripten/stb_image.c"
 $height = $41; //@line 3965 "emscripten/stb_image.c"
 while(1) {
  $42 = HEAP32[$token>>2]|0; //@line 3966 "emscripten/stb_image.c"
  $43 = HEAP8[$42>>0]|0; //@line 3966 "emscripten/stb_image.c"
  $44 = $43 << 24 >> 24; //@line 3966 "emscripten/stb_image.c"
  $45 = ($44|0)==(32); //@line 3966 "emscripten/stb_image.c"
  if (!($45)) {
   break;
  }
  $46 = HEAP32[$token>>2]|0; //@line 3966 "emscripten/stb_image.c"
  $47 = (($46) + 1|0); //@line 3966 "emscripten/stb_image.c"
  HEAP32[$token>>2] = $47; //@line 3966 "emscripten/stb_image.c"
 }
 $48 = HEAP32[$token>>2]|0; //@line 3967 "emscripten/stb_image.c"
 $49 = (_strncmp($48,26328,3)|0); //@line 3967 "emscripten/stb_image.c"
 $50 = ($49|0)!=(0); //@line 3967 "emscripten/stb_image.c"
 if ($50) {
  $51 = (__ZL1ePKc(27496)|0); //@line 3967 "emscripten/stb_image.c"
  $52 = ($51|0)!=(0); //@line 3967 "emscripten/stb_image.c"
  $53 = $52 ? 0 : 0; //@line 3967 "emscripten/stb_image.c"
  $54 = $53; //@line 3967 "emscripten/stb_image.c"
  $0 = $54; //@line 3967 "emscripten/stb_image.c"
  $220 = $0; //@line 4043 "emscripten/stb_image.c"
  STACKTOP = sp;return ($220|0); //@line 4043 "emscripten/stb_image.c"
 }
 $55 = HEAP32[$token>>2]|0; //@line 3968 "emscripten/stb_image.c"
 $56 = (($55) + 3|0); //@line 3968 "emscripten/stb_image.c"
 HEAP32[$token>>2] = $56; //@line 3968 "emscripten/stb_image.c"
 $57 = HEAP32[$token>>2]|0; //@line 3969 "emscripten/stb_image.c"
 $58 = (_strtol($57,0,10)|0); //@line 3969 "emscripten/stb_image.c"
 $width = $58; //@line 3969 "emscripten/stb_image.c"
 $59 = $width; //@line 3971 "emscripten/stb_image.c"
 $60 = $2; //@line 3971 "emscripten/stb_image.c"
 HEAP32[$60>>2] = $59; //@line 3971 "emscripten/stb_image.c"
 $61 = $height; //@line 3972 "emscripten/stb_image.c"
 $62 = $3; //@line 3972 "emscripten/stb_image.c"
 HEAP32[$62>>2] = $61; //@line 3972 "emscripten/stb_image.c"
 $63 = $4; //@line 3974 "emscripten/stb_image.c"
 HEAP32[$63>>2] = 3; //@line 3974 "emscripten/stb_image.c"
 $64 = $5; //@line 3975 "emscripten/stb_image.c"
 $65 = ($64|0)==(0); //@line 3975 "emscripten/stb_image.c"
 if ($65) {
  $5 = 3; //@line 3975 "emscripten/stb_image.c"
 }
 $66 = $height; //@line 3978 "emscripten/stb_image.c"
 $67 = $width; //@line 3978 "emscripten/stb_image.c"
 $68 = Math_imul($66, $67)|0; //@line 3978 "emscripten/stb_image.c"
 $69 = $5; //@line 3978 "emscripten/stb_image.c"
 $70 = Math_imul($68, $69)|0; //@line 3978 "emscripten/stb_image.c"
 $71 = $70<<2; //@line 3978 "emscripten/stb_image.c"
 $72 = (_malloc($71)|0); //@line 3978 "emscripten/stb_image.c"
 $hdr_data = $72; //@line 3978 "emscripten/stb_image.c"
 $73 = $width; //@line 3982 "emscripten/stb_image.c"
 $74 = ($73|0)<(8); //@line 3982 "emscripten/stb_image.c"
 do {
  if ($74) {
   label = 22;
  } else {
   $75 = $width; //@line 3982 "emscripten/stb_image.c"
   $76 = ($75|0)>=(32768); //@line 3982 "emscripten/stb_image.c"
   if ($76) {
    label = 22;
   } else {
    $scanline = 0; //@line 3994 "emscripten/stb_image.c"
    $j = 0; //@line 3996 "emscripten/stb_image.c"
    while(1) {
     $100 = $j; //@line 3996 "emscripten/stb_image.c"
     $101 = $height; //@line 3996 "emscripten/stb_image.c"
     $102 = ($100|0)<($101|0); //@line 3996 "emscripten/stb_image.c"
     if (!($102)) {
      label = 66;
      break;
     }
     $103 = $1; //@line 3997 "emscripten/stb_image.c"
     $104 = (__ZL4get8P4stbi($103)|0); //@line 3997 "emscripten/stb_image.c"
     $c1 = $104; //@line 3997 "emscripten/stb_image.c"
     $105 = $1; //@line 3998 "emscripten/stb_image.c"
     $106 = (__ZL4get8P4stbi($105)|0); //@line 3998 "emscripten/stb_image.c"
     $c2 = $106; //@line 3998 "emscripten/stb_image.c"
     $107 = $1; //@line 3999 "emscripten/stb_image.c"
     $108 = (__ZL4get8P4stbi($107)|0); //@line 3999 "emscripten/stb_image.c"
     $len = $108; //@line 3999 "emscripten/stb_image.c"
     $109 = $c1; //@line 4000 "emscripten/stb_image.c"
     $110 = ($109|0)!=(2); //@line 4000 "emscripten/stb_image.c"
     if ($110) {
      label = 37;
      break;
     }
     $111 = $c2; //@line 4000 "emscripten/stb_image.c"
     $112 = ($111|0)!=(2); //@line 4000 "emscripten/stb_image.c"
     if ($112) {
      label = 37;
      break;
     }
     $113 = $len; //@line 4000 "emscripten/stb_image.c"
     $114 = $113 & 128; //@line 4000 "emscripten/stb_image.c"
     $115 = ($114|0)!=(0); //@line 4000 "emscripten/stb_image.c"
     if ($115) {
      label = 37;
      break;
     }
     $130 = $len; //@line 4014 "emscripten/stb_image.c"
     $131 = $130 << 8; //@line 4014 "emscripten/stb_image.c"
     $len = $131; //@line 4014 "emscripten/stb_image.c"
     $132 = $1; //@line 4015 "emscripten/stb_image.c"
     $133 = (__ZL4get8P4stbi($132)|0); //@line 4015 "emscripten/stb_image.c"
     $134 = $len; //@line 4015 "emscripten/stb_image.c"
     $135 = $134 | $133; //@line 4015 "emscripten/stb_image.c"
     $len = $135; //@line 4015 "emscripten/stb_image.c"
     $136 = $len; //@line 4016 "emscripten/stb_image.c"
     $137 = $width; //@line 4016 "emscripten/stb_image.c"
     $138 = ($136|0)!=($137|0); //@line 4016 "emscripten/stb_image.c"
     if ($138) {
      label = 39;
      break;
     }
     $145 = $scanline; //@line 4017 "emscripten/stb_image.c"
     $146 = ($145|0)==(0|0); //@line 4017 "emscripten/stb_image.c"
     if ($146) {
      $147 = $width; //@line 4017 "emscripten/stb_image.c"
      $148 = $147<<2; //@line 4017 "emscripten/stb_image.c"
      $149 = (_malloc($148)|0); //@line 4017 "emscripten/stb_image.c"
      $scanline = $149; //@line 4017 "emscripten/stb_image.c"
     }
     $k = 0; //@line 4019 "emscripten/stb_image.c"
     while(1) {
      $150 = $k; //@line 4019 "emscripten/stb_image.c"
      $151 = ($150|0)<(4); //@line 4019 "emscripten/stb_image.c"
      if (!($151)) {
       break;
      }
      $i = 0; //@line 4020 "emscripten/stb_image.c"
      while(1) {
       $152 = $i; //@line 4021 "emscripten/stb_image.c"
       $153 = $width; //@line 4021 "emscripten/stb_image.c"
       $154 = ($152|0)<($153|0); //@line 4021 "emscripten/stb_image.c"
       if (!($154)) {
        break;
       }
       $155 = $1; //@line 4022 "emscripten/stb_image.c"
       $156 = (__ZL5get8uP4stbi($155)|0); //@line 4022 "emscripten/stb_image.c"
       $count = $156; //@line 4022 "emscripten/stb_image.c"
       $157 = $count; //@line 4023 "emscripten/stb_image.c"
       $158 = $157&255; //@line 4023 "emscripten/stb_image.c"
       $159 = ($158|0)>(128); //@line 4023 "emscripten/stb_image.c"
       if ($159) {
        $160 = $1; //@line 4025 "emscripten/stb_image.c"
        $161 = (__ZL5get8uP4stbi($160)|0); //@line 4025 "emscripten/stb_image.c"
        $value = $161; //@line 4025 "emscripten/stb_image.c"
        $162 = $count; //@line 4026 "emscripten/stb_image.c"
        $163 = $162&255; //@line 4026 "emscripten/stb_image.c"
        $164 = (($163) - 128)|0; //@line 4026 "emscripten/stb_image.c"
        $165 = $164&255; //@line 4026 "emscripten/stb_image.c"
        $count = $165; //@line 4026 "emscripten/stb_image.c"
        $z = 0; //@line 4027 "emscripten/stb_image.c"
        while(1) {
         $166 = $z; //@line 4027 "emscripten/stb_image.c"
         $167 = $count; //@line 4027 "emscripten/stb_image.c"
         $168 = $167&255; //@line 4027 "emscripten/stb_image.c"
         $169 = ($166|0)<($168|0); //@line 4027 "emscripten/stb_image.c"
         if (!($169)) {
          break;
         }
         $170 = $value; //@line 4028 "emscripten/stb_image.c"
         $171 = $i; //@line 4028 "emscripten/stb_image.c"
         $172 = (($171) + 1)|0; //@line 4028 "emscripten/stb_image.c"
         $i = $172; //@line 4028 "emscripten/stb_image.c"
         $173 = $171<<2; //@line 4028 "emscripten/stb_image.c"
         $174 = $k; //@line 4028 "emscripten/stb_image.c"
         $175 = (($173) + ($174))|0; //@line 4028 "emscripten/stb_image.c"
         $176 = $scanline; //@line 4028 "emscripten/stb_image.c"
         $177 = (($176) + ($175)|0); //@line 4028 "emscripten/stb_image.c"
         HEAP8[$177>>0] = $170; //@line 4028 "emscripten/stb_image.c"
         $178 = $z; //@line 4027 "emscripten/stb_image.c"
         $179 = (($178) + 1)|0; //@line 4027 "emscripten/stb_image.c"
         $z = $179; //@line 4027 "emscripten/stb_image.c"
        }
       } else {
        $z = 0; //@line 4031 "emscripten/stb_image.c"
        while(1) {
         $180 = $z; //@line 4031 "emscripten/stb_image.c"
         $181 = $count; //@line 4031 "emscripten/stb_image.c"
         $182 = $181&255; //@line 4031 "emscripten/stb_image.c"
         $183 = ($180|0)<($182|0); //@line 4031 "emscripten/stb_image.c"
         if (!($183)) {
          break;
         }
         $184 = $1; //@line 4032 "emscripten/stb_image.c"
         $185 = (__ZL5get8uP4stbi($184)|0); //@line 4032 "emscripten/stb_image.c"
         $186 = $i; //@line 4032 "emscripten/stb_image.c"
         $187 = (($186) + 1)|0; //@line 4032 "emscripten/stb_image.c"
         $i = $187; //@line 4032 "emscripten/stb_image.c"
         $188 = $186<<2; //@line 4032 "emscripten/stb_image.c"
         $189 = $k; //@line 4032 "emscripten/stb_image.c"
         $190 = (($188) + ($189))|0; //@line 4032 "emscripten/stb_image.c"
         $191 = $scanline; //@line 4032 "emscripten/stb_image.c"
         $192 = (($191) + ($190)|0); //@line 4032 "emscripten/stb_image.c"
         HEAP8[$192>>0] = $185; //@line 4032 "emscripten/stb_image.c"
         $193 = $z; //@line 4031 "emscripten/stb_image.c"
         $194 = (($193) + 1)|0; //@line 4031 "emscripten/stb_image.c"
         $z = $194; //@line 4031 "emscripten/stb_image.c"
        }
       }
      }
      $195 = $k; //@line 4019 "emscripten/stb_image.c"
      $196 = (($195) + 1)|0; //@line 4019 "emscripten/stb_image.c"
      $k = $196; //@line 4019 "emscripten/stb_image.c"
     }
     $i = 0; //@line 4036 "emscripten/stb_image.c"
     while(1) {
      $197 = $i; //@line 4036 "emscripten/stb_image.c"
      $198 = $width; //@line 4036 "emscripten/stb_image.c"
      $199 = ($197|0)<($198|0); //@line 4036 "emscripten/stb_image.c"
      if (!($199)) {
       break;
      }
      $200 = $hdr_data; //@line 4037 "emscripten/stb_image.c"
      $201 = $j; //@line 4037 "emscripten/stb_image.c"
      $202 = $width; //@line 4037 "emscripten/stb_image.c"
      $203 = Math_imul($201, $202)|0; //@line 4037 "emscripten/stb_image.c"
      $204 = $i; //@line 4037 "emscripten/stb_image.c"
      $205 = (($203) + ($204))|0; //@line 4037 "emscripten/stb_image.c"
      $206 = $5; //@line 4037 "emscripten/stb_image.c"
      $207 = Math_imul($205, $206)|0; //@line 4037 "emscripten/stb_image.c"
      $208 = (($200) + ($207<<2)|0); //@line 4037 "emscripten/stb_image.c"
      $209 = $scanline; //@line 4037 "emscripten/stb_image.c"
      $210 = $i; //@line 4037 "emscripten/stb_image.c"
      $211 = $210<<2; //@line 4037 "emscripten/stb_image.c"
      $212 = (($209) + ($211)|0); //@line 4037 "emscripten/stb_image.c"
      $213 = $5; //@line 4037 "emscripten/stb_image.c"
      __ZL11hdr_convertPfPhi($208,$212,$213); //@line 4037 "emscripten/stb_image.c"
      $214 = $i; //@line 4036 "emscripten/stb_image.c"
      $215 = (($214) + 1)|0; //@line 4036 "emscripten/stb_image.c"
      $i = $215; //@line 4036 "emscripten/stb_image.c"
     }
     $216 = $j; //@line 3996 "emscripten/stb_image.c"
     $217 = (($216) + 1)|0; //@line 3996 "emscripten/stb_image.c"
     $j = $217; //@line 3996 "emscripten/stb_image.c"
    }
    if ((label|0) == 37) {
     $116 = $c1; //@line 4004 "emscripten/stb_image.c"
     $117 = $116&255; //@line 4004 "emscripten/stb_image.c"
     HEAP8[$rgbe1>>0] = $117; //@line 4004 "emscripten/stb_image.c"
     $118 = $c2; //@line 4005 "emscripten/stb_image.c"
     $119 = $118&255; //@line 4005 "emscripten/stb_image.c"
     $120 = (($rgbe1) + 1|0); //@line 4005 "emscripten/stb_image.c"
     HEAP8[$120>>0] = $119; //@line 4005 "emscripten/stb_image.c"
     $121 = $len; //@line 4006 "emscripten/stb_image.c"
     $122 = $121&255; //@line 4006 "emscripten/stb_image.c"
     $123 = (($rgbe1) + 2|0); //@line 4006 "emscripten/stb_image.c"
     HEAP8[$123>>0] = $122; //@line 4006 "emscripten/stb_image.c"
     $124 = $1; //@line 4007 "emscripten/stb_image.c"
     $125 = (__ZL5get8uP4stbi($124)|0); //@line 4007 "emscripten/stb_image.c"
     $126 = (($rgbe1) + 3|0); //@line 4007 "emscripten/stb_image.c"
     HEAP8[$126>>0] = $125; //@line 4007 "emscripten/stb_image.c"
     $127 = $hdr_data; //@line 4008 "emscripten/stb_image.c"
     $128 = $5; //@line 4008 "emscripten/stb_image.c"
     __ZL11hdr_convertPfPhi($127,$rgbe1,$128); //@line 4008 "emscripten/stb_image.c"
     $i = 1; //@line 4009 "emscripten/stb_image.c"
     $j = 0; //@line 4010 "emscripten/stb_image.c"
     $129 = $scanline; //@line 4011 "emscripten/stb_image.c"
     _free($129); //@line 4011 "emscripten/stb_image.c"
     label = 27;
     break;
    }
    else if ((label|0) == 39) {
     $139 = $hdr_data; //@line 4016 "emscripten/stb_image.c"
     _free($139); //@line 4016 "emscripten/stb_image.c"
     $140 = $scanline; //@line 4016 "emscripten/stb_image.c"
     _free($140); //@line 4016 "emscripten/stb_image.c"
     $141 = (__ZL1ePKc(27520)|0); //@line 4016 "emscripten/stb_image.c"
     $142 = ($141|0)!=(0); //@line 4016 "emscripten/stb_image.c"
     $143 = $142 ? 0 : 0; //@line 4016 "emscripten/stb_image.c"
     $144 = $143; //@line 4016 "emscripten/stb_image.c"
     $0 = $144; //@line 4016 "emscripten/stb_image.c"
     $220 = $0; //@line 4043 "emscripten/stb_image.c"
     STACKTOP = sp;return ($220|0); //@line 4043 "emscripten/stb_image.c"
    }
    else if ((label|0) == 66) {
     $218 = $scanline; //@line 4039 "emscripten/stb_image.c"
     _free($218); //@line 4039 "emscripten/stb_image.c"
     label = 67;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 22) {
  $j = 0; //@line 3984 "emscripten/stb_image.c"
  label = 23;
 }
 L81: while(1) {
  do {
   if ((label|0) == 23) {
    label = 0;
    $77 = $j; //@line 3984 "emscripten/stb_image.c"
    $78 = $height; //@line 3984 "emscripten/stb_image.c"
    $79 = ($77|0)<($78|0); //@line 3984 "emscripten/stb_image.c"
    if ($79) {
     $i = 0; //@line 3985 "emscripten/stb_image.c"
     break;
    } else {
     label = 67;
     continue L81;
    }
   }
   else if ((label|0) == 27) {
    label = 0;
    $83 = $1; //@line 3988 "emscripten/stb_image.c"
    (__ZL4getnP4stbiPhi($83,$rgbe,4)|0); //@line 3988 "emscripten/stb_image.c"
    $84 = $hdr_data; //@line 3989 "emscripten/stb_image.c"
    $85 = $j; //@line 3989 "emscripten/stb_image.c"
    $86 = $width; //@line 3989 "emscripten/stb_image.c"
    $87 = Math_imul($85, $86)|0; //@line 3989 "emscripten/stb_image.c"
    $88 = $5; //@line 3989 "emscripten/stb_image.c"
    $89 = Math_imul($87, $88)|0; //@line 3989 "emscripten/stb_image.c"
    $90 = (($84) + ($89<<2)|0); //@line 3989 "emscripten/stb_image.c"
    $91 = $i; //@line 3989 "emscripten/stb_image.c"
    $92 = $5; //@line 3989 "emscripten/stb_image.c"
    $93 = Math_imul($91, $92)|0; //@line 3989 "emscripten/stb_image.c"
    $94 = (($90) + ($93<<2)|0); //@line 3989 "emscripten/stb_image.c"
    $95 = $5; //@line 3989 "emscripten/stb_image.c"
    __ZL11hdr_convertPfPhi($94,$rgbe,$95); //@line 3989 "emscripten/stb_image.c"
    $96 = $i; //@line 3985 "emscripten/stb_image.c"
    $97 = (($96) + 1)|0; //@line 3985 "emscripten/stb_image.c"
    $i = $97; //@line 3985 "emscripten/stb_image.c"
   }
   else if ((label|0) == 67) {
    label = 0;
    $219 = $hdr_data; //@line 4042 "emscripten/stb_image.c"
    $0 = $219; //@line 4042 "emscripten/stb_image.c"
    break L81;
   }
  } while(0);
  $80 = $i; //@line 3985 "emscripten/stb_image.c"
  $81 = $width; //@line 3985 "emscripten/stb_image.c"
  $82 = ($80|0)<($81|0); //@line 3985 "emscripten/stb_image.c"
  if ($82) {
   label = 27;
   continue;
  }
  $98 = $j; //@line 3984 "emscripten/stb_image.c"
  $99 = (($98) + 1)|0; //@line 3984 "emscripten/stb_image.c"
  $j = $99; //@line 3984 "emscripten/stb_image.c"
  label = 23;
 }
 $220 = $0; //@line 4043 "emscripten/stb_image.c"
 STACKTOP = sp;return ($220|0); //@line 4043 "emscripten/stb_image.c"
}
function __ZL11hdr_convertPfPhi($output,$input,$req_comp) {
 $output = $output|0;
 $input = $input|0;
 $req_comp = $req_comp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, $f1 = 0.0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $output;
 $1 = $input;
 $2 = $req_comp;
 $3 = $1; //@line 3909 "emscripten/stb_image.c"
 $4 = (($3) + 3|0); //@line 3909 "emscripten/stb_image.c"
 $5 = HEAP8[$4>>0]|0; //@line 3909 "emscripten/stb_image.c"
 $6 = $5&255; //@line 3909 "emscripten/stb_image.c"
 $7 = ($6|0)!=(0); //@line 3909 "emscripten/stb_image.c"
 if (!($7)) {
  $68 = $2; //@line 3923 "emscripten/stb_image.c"
  if ((($68|0) == 2)) {
   $76 = $0; //@line 3927 "emscripten/stb_image.c"
   $77 = (($76) + 4|0); //@line 3927 "emscripten/stb_image.c"
   HEAPF32[$77>>2] = 1.0; //@line 3927 "emscripten/stb_image.c"
   label = 14;
  } else if ((($68|0) == 4)) {
   $69 = $0; //@line 3924 "emscripten/stb_image.c"
   $70 = (($69) + 12|0); //@line 3924 "emscripten/stb_image.c"
   HEAPF32[$70>>2] = 1.0; //@line 3924 "emscripten/stb_image.c"
   label = 12;
  } else if ((($68|0) == 1)) {
   label = 14;
  } else if ((($68|0) == 3)) {
   label = 12;
  }
  if ((label|0) == 12) {
   $71 = $0; //@line 3925 "emscripten/stb_image.c"
   $72 = (($71) + 8|0); //@line 3925 "emscripten/stb_image.c"
   HEAPF32[$72>>2] = 0.0; //@line 3925 "emscripten/stb_image.c"
   $73 = $0; //@line 3925 "emscripten/stb_image.c"
   $74 = (($73) + 4|0); //@line 3925 "emscripten/stb_image.c"
   HEAPF32[$74>>2] = 0.0; //@line 3925 "emscripten/stb_image.c"
   $75 = $0; //@line 3925 "emscripten/stb_image.c"
   HEAPF32[$75>>2] = 0.0; //@line 3925 "emscripten/stb_image.c"
  }
  else if ((label|0) == 14) {
   $78 = $0; //@line 3928 "emscripten/stb_image.c"
   HEAPF32[$78>>2] = 0.0; //@line 3928 "emscripten/stb_image.c"
  }
  STACKTOP = sp;return; //@line 3932 "emscripten/stb_image.c"
 }
 $8 = $1; //@line 3912 "emscripten/stb_image.c"
 $9 = (($8) + 3|0); //@line 3912 "emscripten/stb_image.c"
 $10 = HEAP8[$9>>0]|0; //@line 3912 "emscripten/stb_image.c"
 $11 = $10&255; //@line 3912 "emscripten/stb_image.c"
 $12 = (($11) - 136)|0; //@line 3912 "emscripten/stb_image.c"
 $13 = (+_ldexp(1.0,$12)); //@line 3912 "emscripten/stb_image.c"
 $14 = $13; //@line 3912 "emscripten/stb_image.c"
 $f1 = $14; //@line 3912 "emscripten/stb_image.c"
 $15 = $2; //@line 3913 "emscripten/stb_image.c"
 $16 = ($15|0)<=(2); //@line 3913 "emscripten/stb_image.c"
 if ($16) {
  $17 = $1; //@line 3914 "emscripten/stb_image.c"
  $18 = HEAP8[$17>>0]|0; //@line 3914 "emscripten/stb_image.c"
  $19 = $18&255; //@line 3914 "emscripten/stb_image.c"
  $20 = $1; //@line 3914 "emscripten/stb_image.c"
  $21 = (($20) + 1|0); //@line 3914 "emscripten/stb_image.c"
  $22 = HEAP8[$21>>0]|0; //@line 3914 "emscripten/stb_image.c"
  $23 = $22&255; //@line 3914 "emscripten/stb_image.c"
  $24 = (($19) + ($23))|0; //@line 3914 "emscripten/stb_image.c"
  $25 = $1; //@line 3914 "emscripten/stb_image.c"
  $26 = (($25) + 2|0); //@line 3914 "emscripten/stb_image.c"
  $27 = HEAP8[$26>>0]|0; //@line 3914 "emscripten/stb_image.c"
  $28 = $27&255; //@line 3914 "emscripten/stb_image.c"
  $29 = (($24) + ($28))|0; //@line 3914 "emscripten/stb_image.c"
  $30 = (+($29|0)); //@line 3914 "emscripten/stb_image.c"
  $31 = $f1; //@line 3914 "emscripten/stb_image.c"
  $32 = $30 * $31; //@line 3914 "emscripten/stb_image.c"
  $33 = $32 / 3.0; //@line 3914 "emscripten/stb_image.c"
  $34 = $0; //@line 3914 "emscripten/stb_image.c"
  HEAPF32[$34>>2] = $33; //@line 3914 "emscripten/stb_image.c"
 } else {
  $35 = $1; //@line 3916 "emscripten/stb_image.c"
  $36 = HEAP8[$35>>0]|0; //@line 3916 "emscripten/stb_image.c"
  $37 = $36&255; //@line 3916 "emscripten/stb_image.c"
  $38 = (+($37|0)); //@line 3916 "emscripten/stb_image.c"
  $39 = $f1; //@line 3916 "emscripten/stb_image.c"
  $40 = $38 * $39; //@line 3916 "emscripten/stb_image.c"
  $41 = $0; //@line 3916 "emscripten/stb_image.c"
  HEAPF32[$41>>2] = $40; //@line 3916 "emscripten/stb_image.c"
  $42 = $1; //@line 3917 "emscripten/stb_image.c"
  $43 = (($42) + 1|0); //@line 3917 "emscripten/stb_image.c"
  $44 = HEAP8[$43>>0]|0; //@line 3917 "emscripten/stb_image.c"
  $45 = $44&255; //@line 3917 "emscripten/stb_image.c"
  $46 = (+($45|0)); //@line 3917 "emscripten/stb_image.c"
  $47 = $f1; //@line 3917 "emscripten/stb_image.c"
  $48 = $46 * $47; //@line 3917 "emscripten/stb_image.c"
  $49 = $0; //@line 3917 "emscripten/stb_image.c"
  $50 = (($49) + 4|0); //@line 3917 "emscripten/stb_image.c"
  HEAPF32[$50>>2] = $48; //@line 3917 "emscripten/stb_image.c"
  $51 = $1; //@line 3918 "emscripten/stb_image.c"
  $52 = (($51) + 2|0); //@line 3918 "emscripten/stb_image.c"
  $53 = HEAP8[$52>>0]|0; //@line 3918 "emscripten/stb_image.c"
  $54 = $53&255; //@line 3918 "emscripten/stb_image.c"
  $55 = (+($54|0)); //@line 3918 "emscripten/stb_image.c"
  $56 = $f1; //@line 3918 "emscripten/stb_image.c"
  $57 = $55 * $56; //@line 3918 "emscripten/stb_image.c"
  $58 = $0; //@line 3918 "emscripten/stb_image.c"
  $59 = (($58) + 8|0); //@line 3918 "emscripten/stb_image.c"
  HEAPF32[$59>>2] = $57; //@line 3918 "emscripten/stb_image.c"
 }
 $60 = $2; //@line 3920 "emscripten/stb_image.c"
 $61 = ($60|0)==(2); //@line 3920 "emscripten/stb_image.c"
 if ($61) {
  $62 = $0; //@line 3920 "emscripten/stb_image.c"
  $63 = (($62) + 4|0); //@line 3920 "emscripten/stb_image.c"
  HEAPF32[$63>>2] = 1.0; //@line 3920 "emscripten/stb_image.c"
 }
 $64 = $2; //@line 3921 "emscripten/stb_image.c"
 $65 = ($64|0)==(4); //@line 3921 "emscripten/stb_image.c"
 if ($65) {
  $66 = $0; //@line 3921 "emscripten/stb_image.c"
  $67 = (($66) + 12|0); //@line 3921 "emscripten/stb_image.c"
  HEAPF32[$67>>2] = 1.0; //@line 3921 "emscripten/stb_image.c"
 }
 STACKTOP = sp;return; //@line 3932 "emscripten/stb_image.c"
}
function __ZL8hdr_testP4stbi($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $signature = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $s;
 $signature = 27552; //@line 3869 "emscripten/stb_image.c"
 $i = 0; //@line 3871 "emscripten/stb_image.c"
 while(1) {
  $2 = $i; //@line 3871 "emscripten/stb_image.c"
  $3 = $signature; //@line 3871 "emscripten/stb_image.c"
  $4 = (($3) + ($2)|0); //@line 3871 "emscripten/stb_image.c"
  $5 = HEAP8[$4>>0]|0; //@line 3871 "emscripten/stb_image.c"
  $6 = ($5<<24>>24)!=(0); //@line 3871 "emscripten/stb_image.c"
  if (!($6)) {
   label = 7;
   break;
  }
  $7 = $1; //@line 3872 "emscripten/stb_image.c"
  $8 = (__ZL4get8P4stbi($7)|0); //@line 3872 "emscripten/stb_image.c"
  $9 = $i; //@line 3872 "emscripten/stb_image.c"
  $10 = $signature; //@line 3872 "emscripten/stb_image.c"
  $11 = (($10) + ($9)|0); //@line 3872 "emscripten/stb_image.c"
  $12 = HEAP8[$11>>0]|0; //@line 3872 "emscripten/stb_image.c"
  $13 = $12 << 24 >> 24; //@line 3872 "emscripten/stb_image.c"
  $14 = ($8|0)!=($13|0); //@line 3872 "emscripten/stb_image.c"
  if ($14) {
   label = 4;
   break;
  }
  $15 = $i; //@line 3871 "emscripten/stb_image.c"
  $16 = (($15) + 1)|0; //@line 3871 "emscripten/stb_image.c"
  $i = $16; //@line 3871 "emscripten/stb_image.c"
 }
 if ((label|0) == 4) {
  $0 = 0; //@line 3873 "emscripten/stb_image.c"
  $17 = $0; //@line 3874 "emscripten/stb_image.c"
  STACKTOP = sp;return ($17|0); //@line 3874 "emscripten/stb_image.c"
 }
 else if ((label|0) == 7) {
  $0 = 1; //@line 3874 "emscripten/stb_image.c"
  $17 = $0; //@line 3874 "emscripten/stb_image.c"
  STACKTOP = sp;return ($17|0); //@line 3874 "emscripten/stb_image.c"
 }
 return 0|0;
}
function __ZL10parse_zlibP4zbufi($a,$parse_header) {
 $a = $a|0;
 $parse_header = $parse_header|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $final = 0, $type = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = $a;
 $2 = $parse_header;
 $3 = $2; //@line 1934 "emscripten/stb_image.c"
 $4 = ($3|0)!=(0); //@line 1934 "emscripten/stb_image.c"
 do {
  if ($4) {
   $5 = $1; //@line 1935 "emscripten/stb_image.c"
   $6 = (__ZL17parse_zlib_headerP4zbuf($5)|0); //@line 1935 "emscripten/stb_image.c"
   $7 = ($6|0)!=(0); //@line 1935 "emscripten/stb_image.c"
   if ($7) {
    label = 5;
    break;
   } else {
    $0 = 0; //@line 1935 "emscripten/stb_image.c"
    break;
   }
  } else {
   label = 5;
  }
 } while(0);
 do {
  if ((label|0) == 5) {
   $8 = $1; //@line 1936 "emscripten/stb_image.c"
   $9 = (($8) + 8|0); //@line 1936 "emscripten/stb_image.c"
   HEAP32[$9>>2] = 0; //@line 1936 "emscripten/stb_image.c"
   $10 = $1; //@line 1937 "emscripten/stb_image.c"
   $11 = (($10) + 12|0); //@line 1937 "emscripten/stb_image.c"
   HEAP32[$11>>2] = 0; //@line 1937 "emscripten/stb_image.c"
   while(1) {
    $12 = $1; //@line 1939 "emscripten/stb_image.c"
    $13 = (__ZL8zreceiveP4zbufi($12,1)|0); //@line 1939 "emscripten/stb_image.c"
    $final = $13; //@line 1939 "emscripten/stb_image.c"
    $14 = $1; //@line 1940 "emscripten/stb_image.c"
    $15 = (__ZL8zreceiveP4zbufi($14,2)|0); //@line 1940 "emscripten/stb_image.c"
    $type = $15; //@line 1940 "emscripten/stb_image.c"
    $16 = $type; //@line 1941 "emscripten/stb_image.c"
    $17 = ($16|0)==(0); //@line 1941 "emscripten/stb_image.c"
    if ($17) {
     $18 = $1; //@line 1942 "emscripten/stb_image.c"
     $19 = (__ZL24parse_uncompressed_blockP4zbuf($18)|0); //@line 1942 "emscripten/stb_image.c"
     $20 = ($19|0)!=(0); //@line 1942 "emscripten/stb_image.c"
     if (!($20)) {
      label = 8;
      break;
     }
    } else {
     $21 = $type; //@line 1943 "emscripten/stb_image.c"
     $22 = ($21|0)==(3); //@line 1943 "emscripten/stb_image.c"
     if ($22) {
      label = 11;
      break;
     }
     $23 = $type; //@line 1946 "emscripten/stb_image.c"
     $24 = ($23|0)==(1); //@line 1946 "emscripten/stb_image.c"
     if ($24) {
      $25 = HEAP8[((27568 + 31|0))>>0]|0; //@line 1948 "emscripten/stb_image.c"
      $26 = ($25<<24>>24)!=(0); //@line 1948 "emscripten/stb_image.c"
      if (!($26)) {
       __ZL13init_defaultsv(); //@line 1948 "emscripten/stb_image.c"
      }
      $27 = $1; //@line 1949 "emscripten/stb_image.c"
      $28 = (($27) + 32|0); //@line 1949 "emscripten/stb_image.c"
      $29 = (__ZL14zbuild_huffmanP8zhuffmanPhi($28,27600,288)|0); //@line 1949 "emscripten/stb_image.c"
      $30 = ($29|0)!=(0); //@line 1949 "emscripten/stb_image.c"
      if (!($30)) {
       label = 16;
       break;
      }
      $31 = $1; //@line 1950 "emscripten/stb_image.c"
      $32 = (($31) + 2052|0); //@line 1950 "emscripten/stb_image.c"
      $33 = (__ZL14zbuild_huffmanP8zhuffmanPhi($32,27568,32)|0); //@line 1950 "emscripten/stb_image.c"
      $34 = ($33|0)!=(0); //@line 1950 "emscripten/stb_image.c"
      if (!($34)) {
       label = 18;
       break;
      }
     } else {
      $35 = $1; //@line 1952 "emscripten/stb_image.c"
      $36 = (__ZL21compute_huffman_codesP4zbuf($35)|0); //@line 1952 "emscripten/stb_image.c"
      $37 = ($36|0)!=(0); //@line 1952 "emscripten/stb_image.c"
      if (!($37)) {
       label = 21;
       break;
      }
     }
     $38 = $1; //@line 1954 "emscripten/stb_image.c"
     $39 = (__ZL19parse_huffman_blockP4zbuf($38)|0); //@line 1954 "emscripten/stb_image.c"
     $40 = ($39|0)!=(0); //@line 1954 "emscripten/stb_image.c"
     if (!($40)) {
      label = 24;
      break;
     }
    }
    $41 = HEAP32[26256>>2]|0; //@line 1956 "emscripten/stb_image.c"
    $42 = ($41|0)!=(0); //@line 1956 "emscripten/stb_image.c"
    if ($42) {
     $43 = $1; //@line 1956 "emscripten/stb_image.c"
     $44 = (($43) + 16|0); //@line 1956 "emscripten/stb_image.c"
     $45 = HEAP32[$44>>2]|0; //@line 1956 "emscripten/stb_image.c"
     $46 = $1; //@line 1956 "emscripten/stb_image.c"
     $47 = (($46) + 20|0); //@line 1956 "emscripten/stb_image.c"
     $48 = HEAP32[$47>>2]|0; //@line 1956 "emscripten/stb_image.c"
     $49 = $45; //@line 1956 "emscripten/stb_image.c"
     $50 = $48; //@line 1956 "emscripten/stb_image.c"
     $51 = (($49) - ($50))|0; //@line 1956 "emscripten/stb_image.c"
     $52 = ($51|0)>(65536); //@line 1956 "emscripten/stb_image.c"
     if ($52) {
      label = 29;
      break;
     }
    }
    $53 = $final; //@line 1958 "emscripten/stb_image.c"
    $54 = ($53|0)!=(0); //@line 1958 "emscripten/stb_image.c"
    $55 = $54 ^ 1; //@line 1958 "emscripten/stb_image.c"
    if (!($55)) {
     break;
    }
   }
   if ((label|0) == 8) {
    $0 = 0; //@line 1942 "emscripten/stb_image.c"
    break;
   }
   else if ((label|0) == 11) {
    $0 = 0; //@line 1944 "emscripten/stb_image.c"
    break;
   }
   else if ((label|0) == 16) {
    $0 = 0; //@line 1949 "emscripten/stb_image.c"
    break;
   }
   else if ((label|0) == 18) {
    $0 = 0; //@line 1950 "emscripten/stb_image.c"
    break;
   }
   else if ((label|0) == 21) {
    $0 = 0; //@line 1952 "emscripten/stb_image.c"
    break;
   }
   else if ((label|0) == 24) {
    $0 = 0; //@line 1954 "emscripten/stb_image.c"
    break;
   }
   else if ((label|0) == 29) {
   }
   $0 = 1; //@line 1959 "emscripten/stb_image.c"
  }
 } while(0);
 $56 = $0; //@line 1959 "emscripten/stb_image.c"
 STACKTOP = sp;return ($56|0); //@line 1959 "emscripten/stb_image.c"
}
function __ZL17parse_zlib_headerP4zbuf($a) {
 $a = $a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $cm = 0, $cmf = 0, $flg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = $a;
 $2 = $1; //@line 1906 "emscripten/stb_image.c"
 $3 = (__ZL5zget8P4zbuf($2)|0); //@line 1906 "emscripten/stb_image.c"
 $cmf = $3; //@line 1906 "emscripten/stb_image.c"
 $4 = $cmf; //@line 1907 "emscripten/stb_image.c"
 $5 = $4 & 15; //@line 1907 "emscripten/stb_image.c"
 $cm = $5; //@line 1907 "emscripten/stb_image.c"
 $6 = $1; //@line 1909 "emscripten/stb_image.c"
 $7 = (__ZL5zget8P4zbuf($6)|0); //@line 1909 "emscripten/stb_image.c"
 $flg = $7; //@line 1909 "emscripten/stb_image.c"
 $8 = $cmf; //@line 1910 "emscripten/stb_image.c"
 $9 = $8<<8; //@line 1910 "emscripten/stb_image.c"
 $10 = $flg; //@line 1910 "emscripten/stb_image.c"
 $11 = (($9) + ($10))|0; //@line 1910 "emscripten/stb_image.c"
 $12 = (($11|0) % 31)&-1; //@line 1910 "emscripten/stb_image.c"
 $13 = ($12|0)!=(0); //@line 1910 "emscripten/stb_image.c"
 do {
  if ($13) {
   $14 = (__ZL1ePKc(28816)|0); //@line 1910 "emscripten/stb_image.c"
   $0 = $14; //@line 1910 "emscripten/stb_image.c"
  } else {
   $15 = $flg; //@line 1911 "emscripten/stb_image.c"
   $16 = $15 & 32; //@line 1911 "emscripten/stb_image.c"
   $17 = ($16|0)!=(0); //@line 1911 "emscripten/stb_image.c"
   if ($17) {
    $18 = (__ZL1ePKc(28832)|0); //@line 1911 "emscripten/stb_image.c"
    $0 = $18; //@line 1911 "emscripten/stb_image.c"
    break;
   }
   $19 = $cm; //@line 1912 "emscripten/stb_image.c"
   $20 = ($19|0)!=(8); //@line 1912 "emscripten/stb_image.c"
   if ($20) {
    $21 = (__ZL1ePKc(28848)|0); //@line 1912 "emscripten/stb_image.c"
    $0 = $21; //@line 1912 "emscripten/stb_image.c"
    break;
   } else {
    $0 = 1; //@line 1914 "emscripten/stb_image.c"
    break;
   }
  }
 } while(0);
 $22 = $0; //@line 1915 "emscripten/stb_image.c"
 STACKTOP = sp;return ($22|0); //@line 1915 "emscripten/stb_image.c"
}
function __ZL8zreceiveP4zbufi($z,$n) {
 $z = $z|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $k = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $z;
 $1 = $n;
 $2 = $0; //@line 1736 "emscripten/stb_image.c"
 $3 = (($2) + 8|0); //@line 1736 "emscripten/stb_image.c"
 $4 = HEAP32[$3>>2]|0; //@line 1736 "emscripten/stb_image.c"
 $5 = $1; //@line 1736 "emscripten/stb_image.c"
 $6 = ($4|0)<($5|0); //@line 1736 "emscripten/stb_image.c"
 if ($6) {
  $7 = $0; //@line 1736 "emscripten/stb_image.c"
  __ZL9fill_bitsP4zbuf($7); //@line 1736 "emscripten/stb_image.c"
 }
 $8 = $0; //@line 1737 "emscripten/stb_image.c"
 $9 = (($8) + 12|0); //@line 1737 "emscripten/stb_image.c"
 $10 = HEAP32[$9>>2]|0; //@line 1737 "emscripten/stb_image.c"
 $11 = $1; //@line 1737 "emscripten/stb_image.c"
 $12 = 1 << $11; //@line 1737 "emscripten/stb_image.c"
 $13 = (($12) - 1)|0; //@line 1737 "emscripten/stb_image.c"
 $14 = $10 & $13; //@line 1737 "emscripten/stb_image.c"
 $k = $14; //@line 1737 "emscripten/stb_image.c"
 $15 = $1; //@line 1738 "emscripten/stb_image.c"
 $16 = $0; //@line 1738 "emscripten/stb_image.c"
 $17 = (($16) + 12|0); //@line 1738 "emscripten/stb_image.c"
 $18 = HEAP32[$17>>2]|0; //@line 1738 "emscripten/stb_image.c"
 $19 = $18 >>> $15; //@line 1738 "emscripten/stb_image.c"
 HEAP32[$17>>2] = $19; //@line 1738 "emscripten/stb_image.c"
 $20 = $1; //@line 1739 "emscripten/stb_image.c"
 $21 = $0; //@line 1739 "emscripten/stb_image.c"
 $22 = (($21) + 8|0); //@line 1739 "emscripten/stb_image.c"
 $23 = HEAP32[$22>>2]|0; //@line 1739 "emscripten/stb_image.c"
 $24 = (($23) - ($20))|0; //@line 1739 "emscripten/stb_image.c"
 HEAP32[$22>>2] = $24; //@line 1739 "emscripten/stb_image.c"
 $25 = $k; //@line 1740 "emscripten/stb_image.c"
 STACKTOP = sp;return ($25|0); //@line 1740 "emscripten/stb_image.c"
}
function __ZL24parse_uncompressed_blockP4zbuf($a) {
 $a = $a|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $header = 0, $k = 0, $len = 0, $nlen = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $header = sp + 20|0;
 $1 = $a;
 $2 = $1; //@line 1879 "emscripten/stb_image.c"
 $3 = (($2) + 8|0); //@line 1879 "emscripten/stb_image.c"
 $4 = HEAP32[$3>>2]|0; //@line 1879 "emscripten/stb_image.c"
 $5 = $4 & 7; //@line 1879 "emscripten/stb_image.c"
 $6 = ($5|0)!=(0); //@line 1879 "emscripten/stb_image.c"
 if ($6) {
  $7 = $1; //@line 1880 "emscripten/stb_image.c"
  $8 = $1; //@line 1880 "emscripten/stb_image.c"
  $9 = (($8) + 8|0); //@line 1880 "emscripten/stb_image.c"
  $10 = HEAP32[$9>>2]|0; //@line 1880 "emscripten/stb_image.c"
  $11 = $10 & 7; //@line 1880 "emscripten/stb_image.c"
  (__ZL8zreceiveP4zbufi($7,$11)|0); //@line 1880 "emscripten/stb_image.c"
 }
 $k = 0; //@line 1882 "emscripten/stb_image.c"
 while(1) {
  $12 = $1; //@line 1883 "emscripten/stb_image.c"
  $13 = (($12) + 8|0); //@line 1883 "emscripten/stb_image.c"
  $14 = HEAP32[$13>>2]|0; //@line 1883 "emscripten/stb_image.c"
  $15 = ($14|0)>(0); //@line 1883 "emscripten/stb_image.c"
  if (!($15)) {
   break;
  }
  $16 = $1; //@line 1884 "emscripten/stb_image.c"
  $17 = (($16) + 12|0); //@line 1884 "emscripten/stb_image.c"
  $18 = HEAP32[$17>>2]|0; //@line 1884 "emscripten/stb_image.c"
  $19 = $18 & 255; //@line 1884 "emscripten/stb_image.c"
  $20 = $19&255; //@line 1884 "emscripten/stb_image.c"
  $21 = $k; //@line 1884 "emscripten/stb_image.c"
  $22 = (($21) + 1)|0; //@line 1884 "emscripten/stb_image.c"
  $k = $22; //@line 1884 "emscripten/stb_image.c"
  $23 = (($header) + ($21)|0); //@line 1884 "emscripten/stb_image.c"
  HEAP8[$23>>0] = $20; //@line 1884 "emscripten/stb_image.c"
  $24 = $1; //@line 1885 "emscripten/stb_image.c"
  $25 = (($24) + 12|0); //@line 1885 "emscripten/stb_image.c"
  $26 = HEAP32[$25>>2]|0; //@line 1885 "emscripten/stb_image.c"
  $27 = $26 >>> 8; //@line 1885 "emscripten/stb_image.c"
  HEAP32[$25>>2] = $27; //@line 1885 "emscripten/stb_image.c"
  $28 = $1; //@line 1886 "emscripten/stb_image.c"
  $29 = (($28) + 8|0); //@line 1886 "emscripten/stb_image.c"
  $30 = HEAP32[$29>>2]|0; //@line 1886 "emscripten/stb_image.c"
  $31 = (($30) - 8)|0; //@line 1886 "emscripten/stb_image.c"
  HEAP32[$29>>2] = $31; //@line 1886 "emscripten/stb_image.c"
 }
 $32 = $1; //@line 1888 "emscripten/stb_image.c"
 $33 = (($32) + 8|0); //@line 1888 "emscripten/stb_image.c"
 $34 = HEAP32[$33>>2]|0; //@line 1888 "emscripten/stb_image.c"
 $35 = ($34|0)==(0); //@line 1888 "emscripten/stb_image.c"
 if (!($35)) {
  ___assert_fail((28720|0),(26712|0),1888,(28744|0)); //@line 1888 "emscripten/stb_image.c"
  // unreachable; //@line 1888 "emscripten/stb_image.c"
 }
 while(1) {
  $36 = $k; //@line 1890 "emscripten/stb_image.c"
  $37 = ($36|0)<(4); //@line 1890 "emscripten/stb_image.c"
  if (!($37)) {
   break;
  }
  $38 = $1; //@line 1891 "emscripten/stb_image.c"
  $39 = (__ZL5zget8P4zbuf($38)|0); //@line 1891 "emscripten/stb_image.c"
  $40 = $39&255; //@line 1891 "emscripten/stb_image.c"
  $41 = $k; //@line 1891 "emscripten/stb_image.c"
  $42 = (($41) + 1)|0; //@line 1891 "emscripten/stb_image.c"
  $k = $42; //@line 1891 "emscripten/stb_image.c"
  $43 = (($header) + ($41)|0); //@line 1891 "emscripten/stb_image.c"
  HEAP8[$43>>0] = $40; //@line 1891 "emscripten/stb_image.c"
 }
 $44 = (($header) + 1|0); //@line 1892 "emscripten/stb_image.c"
 $45 = HEAP8[$44>>0]|0; //@line 1892 "emscripten/stb_image.c"
 $46 = $45&255; //@line 1892 "emscripten/stb_image.c"
 $47 = $46<<8; //@line 1892 "emscripten/stb_image.c"
 $48 = HEAP8[$header>>0]|0; //@line 1892 "emscripten/stb_image.c"
 $49 = $48&255; //@line 1892 "emscripten/stb_image.c"
 $50 = (($47) + ($49))|0; //@line 1892 "emscripten/stb_image.c"
 $len = $50; //@line 1892 "emscripten/stb_image.c"
 $51 = (($header) + 3|0); //@line 1893 "emscripten/stb_image.c"
 $52 = HEAP8[$51>>0]|0; //@line 1893 "emscripten/stb_image.c"
 $53 = $52&255; //@line 1893 "emscripten/stb_image.c"
 $54 = $53<<8; //@line 1893 "emscripten/stb_image.c"
 $55 = (($header) + 2|0); //@line 1893 "emscripten/stb_image.c"
 $56 = HEAP8[$55>>0]|0; //@line 1893 "emscripten/stb_image.c"
 $57 = $56&255; //@line 1893 "emscripten/stb_image.c"
 $58 = (($54) + ($57))|0; //@line 1893 "emscripten/stb_image.c"
 $nlen = $58; //@line 1893 "emscripten/stb_image.c"
 $59 = $nlen; //@line 1894 "emscripten/stb_image.c"
 $60 = $len; //@line 1894 "emscripten/stb_image.c"
 $61 = $60 ^ 65535; //@line 1894 "emscripten/stb_image.c"
 $62 = ($59|0)!=($61|0); //@line 1894 "emscripten/stb_image.c"
 if ($62) {
  $63 = (__ZL1ePKc(28776)|0); //@line 1894 "emscripten/stb_image.c"
  $0 = $63; //@line 1894 "emscripten/stb_image.c"
  $101 = $0; //@line 1902 "emscripten/stb_image.c"
  STACKTOP = sp;return ($101|0); //@line 1902 "emscripten/stb_image.c"
 }
 $64 = $1; //@line 1895 "emscripten/stb_image.c"
 $65 = HEAP32[$64>>2]|0; //@line 1895 "emscripten/stb_image.c"
 $66 = $len; //@line 1895 "emscripten/stb_image.c"
 $67 = (($65) + ($66)|0); //@line 1895 "emscripten/stb_image.c"
 $68 = $1; //@line 1895 "emscripten/stb_image.c"
 $69 = (($68) + 4|0); //@line 1895 "emscripten/stb_image.c"
 $70 = HEAP32[$69>>2]|0; //@line 1895 "emscripten/stb_image.c"
 $71 = ($67>>>0)>($70>>>0); //@line 1895 "emscripten/stb_image.c"
 if ($71) {
  $72 = (__ZL1ePKc(28792)|0); //@line 1895 "emscripten/stb_image.c"
  $0 = $72; //@line 1895 "emscripten/stb_image.c"
  $101 = $0; //@line 1902 "emscripten/stb_image.c"
  STACKTOP = sp;return ($101|0); //@line 1902 "emscripten/stb_image.c"
 }
 $73 = $1; //@line 1896 "emscripten/stb_image.c"
 $74 = (($73) + 16|0); //@line 1896 "emscripten/stb_image.c"
 $75 = HEAP32[$74>>2]|0; //@line 1896 "emscripten/stb_image.c"
 $76 = $len; //@line 1896 "emscripten/stb_image.c"
 $77 = (($75) + ($76)|0); //@line 1896 "emscripten/stb_image.c"
 $78 = $1; //@line 1896 "emscripten/stb_image.c"
 $79 = (($78) + 24|0); //@line 1896 "emscripten/stb_image.c"
 $80 = HEAP32[$79>>2]|0; //@line 1896 "emscripten/stb_image.c"
 $81 = ($77>>>0)>($80>>>0); //@line 1896 "emscripten/stb_image.c"
 do {
  if ($81) {
   $82 = $1; //@line 1897 "emscripten/stb_image.c"
   $83 = $len; //@line 1897 "emscripten/stb_image.c"
   $84 = (__ZL6expandP4zbufi($82,$83)|0); //@line 1897 "emscripten/stb_image.c"
   $85 = ($84|0)!=(0); //@line 1897 "emscripten/stb_image.c"
   if ($85) {
    break;
   }
   $0 = 0; //@line 1897 "emscripten/stb_image.c"
   $101 = $0; //@line 1902 "emscripten/stb_image.c"
   STACKTOP = sp;return ($101|0); //@line 1902 "emscripten/stb_image.c"
  }
 } while(0);
 $86 = $1; //@line 1898 "emscripten/stb_image.c"
 $87 = (($86) + 16|0); //@line 1898 "emscripten/stb_image.c"
 $88 = HEAP32[$87>>2]|0; //@line 1898 "emscripten/stb_image.c"
 $89 = $1; //@line 1898 "emscripten/stb_image.c"
 $90 = HEAP32[$89>>2]|0; //@line 1898 "emscripten/stb_image.c"
 $91 = $len; //@line 1898 "emscripten/stb_image.c"
 _memcpy(($88|0),($90|0),($91|0))|0; //@line 1898 "emscripten/stb_image.c"
 $92 = $len; //@line 1899 "emscripten/stb_image.c"
 $93 = $1; //@line 1899 "emscripten/stb_image.c"
 $94 = HEAP32[$93>>2]|0; //@line 1899 "emscripten/stb_image.c"
 $95 = (($94) + ($92)|0); //@line 1899 "emscripten/stb_image.c"
 HEAP32[$93>>2] = $95; //@line 1899 "emscripten/stb_image.c"
 $96 = $len; //@line 1900 "emscripten/stb_image.c"
 $97 = $1; //@line 1900 "emscripten/stb_image.c"
 $98 = (($97) + 16|0); //@line 1900 "emscripten/stb_image.c"
 $99 = HEAP32[$98>>2]|0; //@line 1900 "emscripten/stb_image.c"
 $100 = (($99) + ($96)|0); //@line 1900 "emscripten/stb_image.c"
 HEAP32[$98>>2] = $100; //@line 1900 "emscripten/stb_image.c"
 $0 = 1; //@line 1901 "emscripten/stb_image.c"
 $101 = $0; //@line 1902 "emscripten/stb_image.c"
 STACKTOP = sp;return ($101|0); //@line 1902 "emscripten/stb_image.c"
}
function __ZL13init_defaultsv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $i = 0; //@line 1922 "emscripten/stb_image.c"
 while(1) {
  $0 = $i; //@line 1922 "emscripten/stb_image.c"
  $1 = ($0|0)<=(143); //@line 1922 "emscripten/stb_image.c"
  if (!($1)) {
   break;
  }
  $2 = $i; //@line 1922 "emscripten/stb_image.c"
  $3 = (27600 + ($2)|0); //@line 1922 "emscripten/stb_image.c"
  HEAP8[$3>>0] = 8; //@line 1922 "emscripten/stb_image.c"
  $4 = $i; //@line 1922 "emscripten/stb_image.c"
  $5 = (($4) + 1)|0; //@line 1922 "emscripten/stb_image.c"
  $i = $5; //@line 1922 "emscripten/stb_image.c"
 }
 while(1) {
  $6 = $i; //@line 1923 "emscripten/stb_image.c"
  $7 = ($6|0)<=(255); //@line 1923 "emscripten/stb_image.c"
  if (!($7)) {
   break;
  }
  $8 = $i; //@line 1923 "emscripten/stb_image.c"
  $9 = (27600 + ($8)|0); //@line 1923 "emscripten/stb_image.c"
  HEAP8[$9>>0] = 9; //@line 1923 "emscripten/stb_image.c"
  $10 = $i; //@line 1923 "emscripten/stb_image.c"
  $11 = (($10) + 1)|0; //@line 1923 "emscripten/stb_image.c"
  $i = $11; //@line 1923 "emscripten/stb_image.c"
 }
 while(1) {
  $12 = $i; //@line 1924 "emscripten/stb_image.c"
  $13 = ($12|0)<=(279); //@line 1924 "emscripten/stb_image.c"
  if (!($13)) {
   break;
  }
  $14 = $i; //@line 1924 "emscripten/stb_image.c"
  $15 = (27600 + ($14)|0); //@line 1924 "emscripten/stb_image.c"
  HEAP8[$15>>0] = 7; //@line 1924 "emscripten/stb_image.c"
  $16 = $i; //@line 1924 "emscripten/stb_image.c"
  $17 = (($16) + 1)|0; //@line 1924 "emscripten/stb_image.c"
  $i = $17; //@line 1924 "emscripten/stb_image.c"
 }
 while(1) {
  $18 = $i; //@line 1925 "emscripten/stb_image.c"
  $19 = ($18|0)<=(287); //@line 1925 "emscripten/stb_image.c"
  if (!($19)) {
   break;
  }
  $20 = $i; //@line 1925 "emscripten/stb_image.c"
  $21 = (27600 + ($20)|0); //@line 1925 "emscripten/stb_image.c"
  HEAP8[$21>>0] = 8; //@line 1925 "emscripten/stb_image.c"
  $22 = $i; //@line 1925 "emscripten/stb_image.c"
  $23 = (($22) + 1)|0; //@line 1925 "emscripten/stb_image.c"
  $i = $23; //@line 1925 "emscripten/stb_image.c"
 }
 $i = 0; //@line 1927 "emscripten/stb_image.c"
 while(1) {
  $24 = $i; //@line 1927 "emscripten/stb_image.c"
  $25 = ($24|0)<=(31); //@line 1927 "emscripten/stb_image.c"
  if (!($25)) {
   break;
  }
  $26 = $i; //@line 1927 "emscripten/stb_image.c"
  $27 = (27568 + ($26)|0); //@line 1927 "emscripten/stb_image.c"
  HEAP8[$27>>0] = 5; //@line 1927 "emscripten/stb_image.c"
  $28 = $i; //@line 1927 "emscripten/stb_image.c"
  $29 = (($28) + 1)|0; //@line 1927 "emscripten/stb_image.c"
  $i = $29; //@line 1927 "emscripten/stb_image.c"
 }
 STACKTOP = sp;return; //@line 1928 "emscripten/stb_image.c"
}
function __ZL14zbuild_huffmanP8zhuffmanPhi($z,$sizelist,$num) {
 $z = $z|0;
 $sizelist = $sizelist|0;
 $num = $num|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c = 0, $code = 0, $i = 0, $k = 0, $k1 = 0, $next_code = 0, $s = 0, $sizes = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0;
 $next_code = sp + 80|0;
 $sizes = sp + 8|0;
 $1 = $z;
 $2 = $sizelist;
 $3 = $num;
 $k = 0; //@line 1655 "emscripten/stb_image.c"
 dest=$sizes+0|0; stop=dest+68|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0)); //@line 1659 "emscripten/stb_image.c"
 $4 = $1; //@line 1660 "emscripten/stb_image.c"
 _memset(($4|0),-1,1024)|0; //@line 1660 "emscripten/stb_image.c"
 $i = 0; //@line 1661 "emscripten/stb_image.c"
 while(1) {
  $5 = $i; //@line 1661 "emscripten/stb_image.c"
  $6 = $3; //@line 1661 "emscripten/stb_image.c"
  $7 = ($5|0)<($6|0); //@line 1661 "emscripten/stb_image.c"
  if (!($7)) {
   break;
  }
  $8 = $i; //@line 1662 "emscripten/stb_image.c"
  $9 = $2; //@line 1662 "emscripten/stb_image.c"
  $10 = (($9) + ($8)|0); //@line 1662 "emscripten/stb_image.c"
  $11 = HEAP8[$10>>0]|0; //@line 1662 "emscripten/stb_image.c"
  $12 = $11&255; //@line 1662 "emscripten/stb_image.c"
  $13 = (($sizes) + ($12<<2)|0); //@line 1662 "emscripten/stb_image.c"
  $14 = HEAP32[$13>>2]|0; //@line 1662 "emscripten/stb_image.c"
  $15 = (($14) + 1)|0; //@line 1662 "emscripten/stb_image.c"
  HEAP32[$13>>2] = $15; //@line 1662 "emscripten/stb_image.c"
  $16 = $i; //@line 1661 "emscripten/stb_image.c"
  $17 = (($16) + 1)|0; //@line 1661 "emscripten/stb_image.c"
  $i = $17; //@line 1661 "emscripten/stb_image.c"
 }
 HEAP32[$sizes>>2] = 0; //@line 1663 "emscripten/stb_image.c"
 $i = 1; //@line 1664 "emscripten/stb_image.c"
 while(1) {
  $18 = $i; //@line 1664 "emscripten/stb_image.c"
  $19 = ($18|0)<(16); //@line 1664 "emscripten/stb_image.c"
  if (!($19)) {
   break;
  }
  $20 = $i; //@line 1665 "emscripten/stb_image.c"
  $21 = (($sizes) + ($20<<2)|0); //@line 1665 "emscripten/stb_image.c"
  $22 = HEAP32[$21>>2]|0; //@line 1665 "emscripten/stb_image.c"
  $23 = $i; //@line 1665 "emscripten/stb_image.c"
  $24 = 1 << $23; //@line 1665 "emscripten/stb_image.c"
  $25 = ($22|0)<=($24|0); //@line 1665 "emscripten/stb_image.c"
  if (!($25)) {
   label = 8;
   break;
  }
  $26 = $i; //@line 1664 "emscripten/stb_image.c"
  $27 = (($26) + 1)|0; //@line 1664 "emscripten/stb_image.c"
  $i = $27; //@line 1664 "emscripten/stb_image.c"
 }
 if ((label|0) == 8) {
  ___assert_fail((28680|0),(26712|0),1665,(28704|0)); //@line 1665 "emscripten/stb_image.c"
  // unreachable; //@line 1665 "emscripten/stb_image.c"
 }
 $code = 0; //@line 1666 "emscripten/stb_image.c"
 $i = 1; //@line 1667 "emscripten/stb_image.c"
 while(1) {
  $28 = $i; //@line 1667 "emscripten/stb_image.c"
  $29 = ($28|0)<(16); //@line 1667 "emscripten/stb_image.c"
  if (!($29)) {
   break;
  }
  $30 = $code; //@line 1668 "emscripten/stb_image.c"
  $31 = $i; //@line 1668 "emscripten/stb_image.c"
  $32 = (($next_code) + ($31<<2)|0); //@line 1668 "emscripten/stb_image.c"
  HEAP32[$32>>2] = $30; //@line 1668 "emscripten/stb_image.c"
  $33 = $code; //@line 1669 "emscripten/stb_image.c"
  $34 = $33&65535; //@line 1669 "emscripten/stb_image.c"
  $35 = $i; //@line 1669 "emscripten/stb_image.c"
  $36 = $1; //@line 1669 "emscripten/stb_image.c"
  $37 = (($36) + 1024|0); //@line 1669 "emscripten/stb_image.c"
  $38 = (($37) + ($35<<1)|0); //@line 1669 "emscripten/stb_image.c"
  HEAP16[$38>>1] = $34; //@line 1669 "emscripten/stb_image.c"
  $39 = $k; //@line 1670 "emscripten/stb_image.c"
  $40 = $39&65535; //@line 1670 "emscripten/stb_image.c"
  $41 = $i; //@line 1670 "emscripten/stb_image.c"
  $42 = $1; //@line 1670 "emscripten/stb_image.c"
  $43 = (($42) + 1124|0); //@line 1670 "emscripten/stb_image.c"
  $44 = (($43) + ($41<<1)|0); //@line 1670 "emscripten/stb_image.c"
  HEAP16[$44>>1] = $40; //@line 1670 "emscripten/stb_image.c"
  $45 = $code; //@line 1671 "emscripten/stb_image.c"
  $46 = $i; //@line 1671 "emscripten/stb_image.c"
  $47 = (($sizes) + ($46<<2)|0); //@line 1671 "emscripten/stb_image.c"
  $48 = HEAP32[$47>>2]|0; //@line 1671 "emscripten/stb_image.c"
  $49 = (($45) + ($48))|0; //@line 1671 "emscripten/stb_image.c"
  $code = $49; //@line 1671 "emscripten/stb_image.c"
  $50 = $i; //@line 1672 "emscripten/stb_image.c"
  $51 = (($sizes) + ($50<<2)|0); //@line 1672 "emscripten/stb_image.c"
  $52 = HEAP32[$51>>2]|0; //@line 1672 "emscripten/stb_image.c"
  $53 = ($52|0)!=(0); //@line 1672 "emscripten/stb_image.c"
  if ($53) {
   $54 = $code; //@line 1673 "emscripten/stb_image.c"
   $55 = (($54) - 1)|0; //@line 1673 "emscripten/stb_image.c"
   $56 = $i; //@line 1673 "emscripten/stb_image.c"
   $57 = 1 << $56; //@line 1673 "emscripten/stb_image.c"
   $58 = ($55|0)>=($57|0); //@line 1673 "emscripten/stb_image.c"
   if ($58) {
    label = 15;
    break;
   }
  }
  $60 = $code; //@line 1674 "emscripten/stb_image.c"
  $61 = $i; //@line 1674 "emscripten/stb_image.c"
  $62 = (16 - ($61))|0; //@line 1674 "emscripten/stb_image.c"
  $63 = $60 << $62; //@line 1674 "emscripten/stb_image.c"
  $64 = $i; //@line 1674 "emscripten/stb_image.c"
  $65 = $1; //@line 1674 "emscripten/stb_image.c"
  $66 = (($65) + 1056|0); //@line 1674 "emscripten/stb_image.c"
  $67 = (($66) + ($64<<2)|0); //@line 1674 "emscripten/stb_image.c"
  HEAP32[$67>>2] = $63; //@line 1674 "emscripten/stb_image.c"
  $68 = $code; //@line 1675 "emscripten/stb_image.c"
  $69 = $68 << 1; //@line 1675 "emscripten/stb_image.c"
  $code = $69; //@line 1675 "emscripten/stb_image.c"
  $70 = $i; //@line 1676 "emscripten/stb_image.c"
  $71 = (($sizes) + ($70<<2)|0); //@line 1676 "emscripten/stb_image.c"
  $72 = HEAP32[$71>>2]|0; //@line 1676 "emscripten/stb_image.c"
  $73 = $k; //@line 1676 "emscripten/stb_image.c"
  $74 = (($73) + ($72))|0; //@line 1676 "emscripten/stb_image.c"
  $k = $74; //@line 1676 "emscripten/stb_image.c"
  $75 = $i; //@line 1667 "emscripten/stb_image.c"
  $76 = (($75) + 1)|0; //@line 1667 "emscripten/stb_image.c"
  $i = $76; //@line 1667 "emscripten/stb_image.c"
 }
 if ((label|0) == 15) {
  $59 = (__ZL1ePKc(28664)|0); //@line 1673 "emscripten/stb_image.c"
  $0 = $59; //@line 1673 "emscripten/stb_image.c"
  $143 = $0; //@line 1696 "emscripten/stb_image.c"
  STACKTOP = sp;return ($143|0); //@line 1696 "emscripten/stb_image.c"
 }
 $77 = $1; //@line 1678 "emscripten/stb_image.c"
 $78 = (($77) + 1056|0); //@line 1678 "emscripten/stb_image.c"
 $79 = (($78) + 64|0); //@line 1678 "emscripten/stb_image.c"
 HEAP32[$79>>2] = 65536; //@line 1678 "emscripten/stb_image.c"
 $i = 0; //@line 1679 "emscripten/stb_image.c"
 while(1) {
  $80 = $i; //@line 1679 "emscripten/stb_image.c"
  $81 = $3; //@line 1679 "emscripten/stb_image.c"
  $82 = ($80|0)<($81|0); //@line 1679 "emscripten/stb_image.c"
  if (!($82)) {
   break;
  }
  $83 = $i; //@line 1680 "emscripten/stb_image.c"
  $84 = $2; //@line 1680 "emscripten/stb_image.c"
  $85 = (($84) + ($83)|0); //@line 1680 "emscripten/stb_image.c"
  $86 = HEAP8[$85>>0]|0; //@line 1680 "emscripten/stb_image.c"
  $87 = $86&255; //@line 1680 "emscripten/stb_image.c"
  $s = $87; //@line 1680 "emscripten/stb_image.c"
  $88 = $s; //@line 1681 "emscripten/stb_image.c"
  $89 = ($88|0)!=(0); //@line 1681 "emscripten/stb_image.c"
  if ($89) {
   $90 = $s; //@line 1682 "emscripten/stb_image.c"
   $91 = (($next_code) + ($90<<2)|0); //@line 1682 "emscripten/stb_image.c"
   $92 = HEAP32[$91>>2]|0; //@line 1682 "emscripten/stb_image.c"
   $93 = $s; //@line 1682 "emscripten/stb_image.c"
   $94 = $1; //@line 1682 "emscripten/stb_image.c"
   $95 = (($94) + 1024|0); //@line 1682 "emscripten/stb_image.c"
   $96 = (($95) + ($93<<1)|0); //@line 1682 "emscripten/stb_image.c"
   $97 = HEAP16[$96>>1]|0; //@line 1682 "emscripten/stb_image.c"
   $98 = $97&65535; //@line 1682 "emscripten/stb_image.c"
   $99 = (($92) - ($98))|0; //@line 1682 "emscripten/stb_image.c"
   $100 = $s; //@line 1682 "emscripten/stb_image.c"
   $101 = $1; //@line 1682 "emscripten/stb_image.c"
   $102 = (($101) + 1124|0); //@line 1682 "emscripten/stb_image.c"
   $103 = (($102) + ($100<<1)|0); //@line 1682 "emscripten/stb_image.c"
   $104 = HEAP16[$103>>1]|0; //@line 1682 "emscripten/stb_image.c"
   $105 = $104&65535; //@line 1682 "emscripten/stb_image.c"
   $106 = (($99) + ($105))|0; //@line 1682 "emscripten/stb_image.c"
   $c = $106; //@line 1682 "emscripten/stb_image.c"
   $107 = $s; //@line 1683 "emscripten/stb_image.c"
   $108 = $107&255; //@line 1683 "emscripten/stb_image.c"
   $109 = $c; //@line 1683 "emscripten/stb_image.c"
   $110 = $1; //@line 1683 "emscripten/stb_image.c"
   $111 = (($110) + 1156|0); //@line 1683 "emscripten/stb_image.c"
   $112 = (($111) + ($109)|0); //@line 1683 "emscripten/stb_image.c"
   HEAP8[$112>>0] = $108; //@line 1683 "emscripten/stb_image.c"
   $113 = $i; //@line 1684 "emscripten/stb_image.c"
   $114 = $113&65535; //@line 1684 "emscripten/stb_image.c"
   $115 = $c; //@line 1684 "emscripten/stb_image.c"
   $116 = $1; //@line 1684 "emscripten/stb_image.c"
   $117 = (($116) + 1444|0); //@line 1684 "emscripten/stb_image.c"
   $118 = (($117) + ($115<<1)|0); //@line 1684 "emscripten/stb_image.c"
   HEAP16[$118>>1] = $114; //@line 1684 "emscripten/stb_image.c"
   $119 = $s; //@line 1685 "emscripten/stb_image.c"
   $120 = ($119|0)<=(9); //@line 1685 "emscripten/stb_image.c"
   if ($120) {
    $121 = $s; //@line 1686 "emscripten/stb_image.c"
    $122 = (($next_code) + ($121<<2)|0); //@line 1686 "emscripten/stb_image.c"
    $123 = HEAP32[$122>>2]|0; //@line 1686 "emscripten/stb_image.c"
    $124 = $s; //@line 1686 "emscripten/stb_image.c"
    $125 = (__ZL11bit_reverseii($123,$124)|0); //@line 1686 "emscripten/stb_image.c"
    $k1 = $125; //@line 1686 "emscripten/stb_image.c"
    while(1) {
     $126 = $k1; //@line 1687 "emscripten/stb_image.c"
     $127 = ($126|0)<(512); //@line 1687 "emscripten/stb_image.c"
     if (!($127)) {
      break;
     }
     $128 = $c; //@line 1688 "emscripten/stb_image.c"
     $129 = $128&65535; //@line 1688 "emscripten/stb_image.c"
     $130 = $k1; //@line 1688 "emscripten/stb_image.c"
     $131 = $1; //@line 1688 "emscripten/stb_image.c"
     $132 = (($131) + ($130<<1)|0); //@line 1688 "emscripten/stb_image.c"
     HEAP16[$132>>1] = $129; //@line 1688 "emscripten/stb_image.c"
     $133 = $s; //@line 1689 "emscripten/stb_image.c"
     $134 = 1 << $133; //@line 1689 "emscripten/stb_image.c"
     $135 = $k1; //@line 1689 "emscripten/stb_image.c"
     $136 = (($135) + ($134))|0; //@line 1689 "emscripten/stb_image.c"
     $k1 = $136; //@line 1689 "emscripten/stb_image.c"
    }
   }
   $137 = $s; //@line 1692 "emscripten/stb_image.c"
   $138 = (($next_code) + ($137<<2)|0); //@line 1692 "emscripten/stb_image.c"
   $139 = HEAP32[$138>>2]|0; //@line 1692 "emscripten/stb_image.c"
   $140 = (($139) + 1)|0; //@line 1692 "emscripten/stb_image.c"
   HEAP32[$138>>2] = $140; //@line 1692 "emscripten/stb_image.c"
  }
  $141 = $i; //@line 1679 "emscripten/stb_image.c"
  $142 = (($141) + 1)|0; //@line 1679 "emscripten/stb_image.c"
  $i = $142; //@line 1679 "emscripten/stb_image.c"
 }
 $0 = 1; //@line 1695 "emscripten/stb_image.c"
 $143 = $0; //@line 1696 "emscripten/stb_image.c"
 STACKTOP = sp;return ($143|0); //@line 1696 "emscripten/stb_image.c"
}
function __ZL21compute_huffman_codesP4zbuf($a) {
 $a = $a|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $c = 0, $codelength_sizes = 0, $hclen = 0, $hdist = 0, $hlit = 0, $i = 0, $lencodes = 0, $n = 0, $s = 0, $z_codelength = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2544|0;
 $z_codelength = sp + 32|0;
 $lencodes = sp + 2056|0;
 $codelength_sizes = sp + 2511|0;
 $1 = $a;
 $2 = $1; //@line 1837 "emscripten/stb_image.c"
 $3 = (__ZL8zreceiveP4zbufi($2,5)|0); //@line 1837 "emscripten/stb_image.c"
 $4 = (($3) + 257)|0; //@line 1837 "emscripten/stb_image.c"
 $hlit = $4; //@line 1837 "emscripten/stb_image.c"
 $5 = $1; //@line 1838 "emscripten/stb_image.c"
 $6 = (__ZL8zreceiveP4zbufi($5,5)|0); //@line 1838 "emscripten/stb_image.c"
 $7 = (($6) + 1)|0; //@line 1838 "emscripten/stb_image.c"
 $hdist = $7; //@line 1838 "emscripten/stb_image.c"
 $8 = $1; //@line 1839 "emscripten/stb_image.c"
 $9 = (__ZL8zreceiveP4zbufi($8,4)|0); //@line 1839 "emscripten/stb_image.c"
 $10 = (($9) + 4)|0; //@line 1839 "emscripten/stb_image.c"
 $hclen = $10; //@line 1839 "emscripten/stb_image.c"
 dest=$codelength_sizes+0|0; stop=dest+19|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0)); //@line 1841 "emscripten/stb_image.c"
 $i = 0; //@line 1842 "emscripten/stb_image.c"
 while(1) {
  $11 = $i; //@line 1842 "emscripten/stb_image.c"
  $12 = $hclen; //@line 1842 "emscripten/stb_image.c"
  $13 = ($11|0)<($12|0); //@line 1842 "emscripten/stb_image.c"
  if (!($13)) {
   break;
  }
  $14 = $1; //@line 1843 "emscripten/stb_image.c"
  $15 = (__ZL8zreceiveP4zbufi($14,3)|0); //@line 1843 "emscripten/stb_image.c"
  $s = $15; //@line 1843 "emscripten/stb_image.c"
  $16 = $s; //@line 1844 "emscripten/stb_image.c"
  $17 = $16&255; //@line 1844 "emscripten/stb_image.c"
  $18 = $i; //@line 1844 "emscripten/stb_image.c"
  $19 = (28584 + ($18)|0); //@line 1844 "emscripten/stb_image.c"
  $20 = HEAP8[$19>>0]|0; //@line 1844 "emscripten/stb_image.c"
  $21 = $20&255; //@line 1844 "emscripten/stb_image.c"
  $22 = (($codelength_sizes) + ($21)|0); //@line 1844 "emscripten/stb_image.c"
  HEAP8[$22>>0] = $17; //@line 1844 "emscripten/stb_image.c"
  $23 = $i; //@line 1842 "emscripten/stb_image.c"
  $24 = (($23) + 1)|0; //@line 1842 "emscripten/stb_image.c"
  $i = $24; //@line 1842 "emscripten/stb_image.c"
 }
 $25 = (__ZL14zbuild_huffmanP8zhuffmanPhi($z_codelength,$codelength_sizes,19)|0); //@line 1846 "emscripten/stb_image.c"
 $26 = ($25|0)!=(0); //@line 1846 "emscripten/stb_image.c"
 if (!($26)) {
  $0 = 0; //@line 1846 "emscripten/stb_image.c"
  $102 = $0; //@line 1873 "emscripten/stb_image.c"
  STACKTOP = sp;return ($102|0); //@line 1873 "emscripten/stb_image.c"
 }
 $n = 0; //@line 1848 "emscripten/stb_image.c"
 while(1) {
  $27 = $n; //@line 1849 "emscripten/stb_image.c"
  $28 = $hlit; //@line 1849 "emscripten/stb_image.c"
  $29 = $hdist; //@line 1849 "emscripten/stb_image.c"
  $30 = (($28) + ($29))|0; //@line 1849 "emscripten/stb_image.c"
  $31 = ($27|0)<($30|0); //@line 1849 "emscripten/stb_image.c"
  if (!($31)) {
   label = 24;
   break;
  }
  $32 = $1; //@line 1850 "emscripten/stb_image.c"
  $33 = (__ZL15zhuffman_decodeP4zbufP8zhuffman($32,$z_codelength)|0); //@line 1850 "emscripten/stb_image.c"
  $c = $33; //@line 1850 "emscripten/stb_image.c"
  $34 = $c; //@line 1851 "emscripten/stb_image.c"
  $35 = ($34|0)>=(0); //@line 1851 "emscripten/stb_image.c"
  if (!($35)) {
   label = 11;
   break;
  }
  $36 = $c; //@line 1851 "emscripten/stb_image.c"
  $37 = ($36|0)<(19); //@line 1851 "emscripten/stb_image.c"
  if (!($37)) {
   label = 11;
   break;
  }
  $38 = $c; //@line 1852 "emscripten/stb_image.c"
  $39 = ($38|0)<(16); //@line 1852 "emscripten/stb_image.c"
  if ($39) {
   $40 = $c; //@line 1853 "emscripten/stb_image.c"
   $41 = $40&255; //@line 1853 "emscripten/stb_image.c"
   $42 = $n; //@line 1853 "emscripten/stb_image.c"
   $43 = (($42) + 1)|0; //@line 1853 "emscripten/stb_image.c"
   $n = $43; //@line 1853 "emscripten/stb_image.c"
   $44 = (($lencodes) + ($42)|0); //@line 1853 "emscripten/stb_image.c"
   HEAP8[$44>>0] = $41; //@line 1853 "emscripten/stb_image.c"
  } else {
   $45 = $c; //@line 1854 "emscripten/stb_image.c"
   $46 = ($45|0)==(16); //@line 1854 "emscripten/stb_image.c"
   if ($46) {
    $47 = $1; //@line 1855 "emscripten/stb_image.c"
    $48 = (__ZL8zreceiveP4zbufi($47,2)|0); //@line 1855 "emscripten/stb_image.c"
    $49 = (($48) + 3)|0; //@line 1855 "emscripten/stb_image.c"
    $c = $49; //@line 1855 "emscripten/stb_image.c"
    $50 = $n; //@line 1856 "emscripten/stb_image.c"
    $51 = (($lencodes) + ($50)|0); //@line 1856 "emscripten/stb_image.c"
    $52 = $n; //@line 1856 "emscripten/stb_image.c"
    $53 = (($52) - 1)|0; //@line 1856 "emscripten/stb_image.c"
    $54 = (($lencodes) + ($53)|0); //@line 1856 "emscripten/stb_image.c"
    $55 = HEAP8[$54>>0]|0; //@line 1856 "emscripten/stb_image.c"
    $56 = $55&255; //@line 1856 "emscripten/stb_image.c"
    $57 = $56&255; //@line 1856 "emscripten/stb_image.c"
    $58 = $c; //@line 1856 "emscripten/stb_image.c"
    _memset(($51|0),($57|0),($58|0))|0; //@line 1856 "emscripten/stb_image.c"
    $59 = $c; //@line 1857 "emscripten/stb_image.c"
    $60 = $n; //@line 1857 "emscripten/stb_image.c"
    $61 = (($60) + ($59))|0; //@line 1857 "emscripten/stb_image.c"
    $n = $61; //@line 1857 "emscripten/stb_image.c"
   } else {
    $62 = $c; //@line 1858 "emscripten/stb_image.c"
    $63 = ($62|0)==(17); //@line 1858 "emscripten/stb_image.c"
    if ($63) {
     $64 = $1; //@line 1859 "emscripten/stb_image.c"
     $65 = (__ZL8zreceiveP4zbufi($64,3)|0); //@line 1859 "emscripten/stb_image.c"
     $66 = (($65) + 3)|0; //@line 1859 "emscripten/stb_image.c"
     $c = $66; //@line 1859 "emscripten/stb_image.c"
     $67 = $n; //@line 1860 "emscripten/stb_image.c"
     $68 = (($lencodes) + ($67)|0); //@line 1860 "emscripten/stb_image.c"
     $69 = $c; //@line 1860 "emscripten/stb_image.c"
     _memset(($68|0),0,($69|0))|0; //@line 1860 "emscripten/stb_image.c"
     $70 = $c; //@line 1861 "emscripten/stb_image.c"
     $71 = $n; //@line 1861 "emscripten/stb_image.c"
     $72 = (($71) + ($70))|0; //@line 1861 "emscripten/stb_image.c"
     $n = $72; //@line 1861 "emscripten/stb_image.c"
    } else {
     $73 = $c; //@line 1863 "emscripten/stb_image.c"
     $74 = ($73|0)==(18); //@line 1863 "emscripten/stb_image.c"
     if (!($74)) {
      label = 19;
      break;
     }
     $75 = $1; //@line 1864 "emscripten/stb_image.c"
     $76 = (__ZL8zreceiveP4zbufi($75,7)|0); //@line 1864 "emscripten/stb_image.c"
     $77 = (($76) + 11)|0; //@line 1864 "emscripten/stb_image.c"
     $c = $77; //@line 1864 "emscripten/stb_image.c"
     $78 = $n; //@line 1865 "emscripten/stb_image.c"
     $79 = (($lencodes) + ($78)|0); //@line 1865 "emscripten/stb_image.c"
     $80 = $c; //@line 1865 "emscripten/stb_image.c"
     _memset(($79|0),0,($80|0))|0; //@line 1865 "emscripten/stb_image.c"
     $81 = $c; //@line 1866 "emscripten/stb_image.c"
     $82 = $n; //@line 1866 "emscripten/stb_image.c"
     $83 = (($82) + ($81))|0; //@line 1866 "emscripten/stb_image.c"
     $n = $83; //@line 1866 "emscripten/stb_image.c"
    }
   }
  }
 }
 if ((label|0) == 11) {
  ___assert_fail((28608|0),(26712|0),1851,(28632|0)); //@line 1851 "emscripten/stb_image.c"
  // unreachable; //@line 1851 "emscripten/stb_image.c"
 }
 else if ((label|0) == 19) {
  ___assert_fail((28656|0),(26712|0),1863,(28632|0)); //@line 1863 "emscripten/stb_image.c"
  // unreachable; //@line 1863 "emscripten/stb_image.c"
 }
 else if ((label|0) == 24) {
  $84 = $n; //@line 1869 "emscripten/stb_image.c"
  $85 = $hlit; //@line 1869 "emscripten/stb_image.c"
  $86 = $hdist; //@line 1869 "emscripten/stb_image.c"
  $87 = (($85) + ($86))|0; //@line 1869 "emscripten/stb_image.c"
  $88 = ($84|0)!=($87|0); //@line 1869 "emscripten/stb_image.c"
  if ($88) {
   $89 = (__ZL1ePKc(28664)|0); //@line 1869 "emscripten/stb_image.c"
   $0 = $89; //@line 1869 "emscripten/stb_image.c"
   $102 = $0; //@line 1873 "emscripten/stb_image.c"
   STACKTOP = sp;return ($102|0); //@line 1873 "emscripten/stb_image.c"
  }
  $90 = $1; //@line 1870 "emscripten/stb_image.c"
  $91 = (($90) + 32|0); //@line 1870 "emscripten/stb_image.c"
  $92 = $hlit; //@line 1870 "emscripten/stb_image.c"
  $93 = (__ZL14zbuild_huffmanP8zhuffmanPhi($91,$lencodes,$92)|0); //@line 1870 "emscripten/stb_image.c"
  $94 = ($93|0)!=(0); //@line 1870 "emscripten/stb_image.c"
  if (!($94)) {
   $0 = 0; //@line 1870 "emscripten/stb_image.c"
   $102 = $0; //@line 1873 "emscripten/stb_image.c"
   STACKTOP = sp;return ($102|0); //@line 1873 "emscripten/stb_image.c"
  }
  $95 = $1; //@line 1871 "emscripten/stb_image.c"
  $96 = (($95) + 2052|0); //@line 1871 "emscripten/stb_image.c"
  $97 = $hlit; //@line 1871 "emscripten/stb_image.c"
  $98 = (($lencodes) + ($97)|0); //@line 1871 "emscripten/stb_image.c"
  $99 = $hdist; //@line 1871 "emscripten/stb_image.c"
  $100 = (__ZL14zbuild_huffmanP8zhuffmanPhi($96,$98,$99)|0); //@line 1871 "emscripten/stb_image.c"
  $101 = ($100|0)!=(0); //@line 1871 "emscripten/stb_image.c"
  if ($101) {
   $0 = 1; //@line 1872 "emscripten/stb_image.c"
   $102 = $0; //@line 1873 "emscripten/stb_image.c"
   STACKTOP = sp;return ($102|0); //@line 1873 "emscripten/stb_image.c"
  } else {
   $0 = 0; //@line 1871 "emscripten/stb_image.c"
   $102 = $0; //@line 1873 "emscripten/stb_image.c"
   STACKTOP = sp;return ($102|0); //@line 1873 "emscripten/stb_image.c"
  }
 }
 return 0|0;
}
function __ZL19parse_huffman_blockP4zbuf($a) {
 $a = $a|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $dist = 0, $len = 0, $p = 0, $z = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = $a;
 while(1) {
  $2 = $1; //@line 1804 "emscripten/stb_image.c"
  $3 = $1; //@line 1804 "emscripten/stb_image.c"
  $4 = (($3) + 32|0); //@line 1804 "emscripten/stb_image.c"
  $5 = (__ZL15zhuffman_decodeP4zbufP8zhuffman($2,$4)|0); //@line 1804 "emscripten/stb_image.c"
  $z = $5; //@line 1804 "emscripten/stb_image.c"
  $6 = $z; //@line 1805 "emscripten/stb_image.c"
  $7 = ($6|0)<(256); //@line 1805 "emscripten/stb_image.c"
  if ($7) {
   $8 = $z; //@line 1806 "emscripten/stb_image.c"
   $9 = ($8|0)<(0); //@line 1806 "emscripten/stb_image.c"
   if ($9) {
    label = 4;
    break;
   }
   $11 = $1; //@line 1807 "emscripten/stb_image.c"
   $12 = (($11) + 16|0); //@line 1807 "emscripten/stb_image.c"
   $13 = HEAP32[$12>>2]|0; //@line 1807 "emscripten/stb_image.c"
   $14 = $1; //@line 1807 "emscripten/stb_image.c"
   $15 = (($14) + 24|0); //@line 1807 "emscripten/stb_image.c"
   $16 = HEAP32[$15>>2]|0; //@line 1807 "emscripten/stb_image.c"
   $17 = ($13>>>0)>=($16>>>0); //@line 1807 "emscripten/stb_image.c"
   if ($17) {
    $18 = $1; //@line 1807 "emscripten/stb_image.c"
    $19 = (__ZL6expandP4zbufi($18,1)|0); //@line 1807 "emscripten/stb_image.c"
    $20 = ($19|0)!=(0); //@line 1807 "emscripten/stb_image.c"
    if (!($20)) {
     label = 7;
     break;
    }
   }
   $21 = $z; //@line 1808 "emscripten/stb_image.c"
   $22 = $21&255; //@line 1808 "emscripten/stb_image.c"
   $23 = $1; //@line 1808 "emscripten/stb_image.c"
   $24 = (($23) + 16|0); //@line 1808 "emscripten/stb_image.c"
   $25 = HEAP32[$24>>2]|0; //@line 1808 "emscripten/stb_image.c"
   $26 = (($25) + 1|0); //@line 1808 "emscripten/stb_image.c"
   HEAP32[$24>>2] = $26; //@line 1808 "emscripten/stb_image.c"
   HEAP8[$25>>0] = $22; //@line 1808 "emscripten/stb_image.c"
  } else {
   $27 = $z; //@line 1812 "emscripten/stb_image.c"
   $28 = ($27|0)==(256); //@line 1812 "emscripten/stb_image.c"
   if ($28) {
    label = 11;
    break;
   }
   $29 = $z; //@line 1813 "emscripten/stb_image.c"
   $30 = (($29) - 257)|0; //@line 1813 "emscripten/stb_image.c"
   $z = $30; //@line 1813 "emscripten/stb_image.c"
   $31 = $z; //@line 1814 "emscripten/stb_image.c"
   $32 = (27912 + ($31<<2)|0); //@line 1814 "emscripten/stb_image.c"
   $33 = HEAP32[$32>>2]|0; //@line 1814 "emscripten/stb_image.c"
   $len = $33; //@line 1814 "emscripten/stb_image.c"
   $34 = $z; //@line 1815 "emscripten/stb_image.c"
   $35 = (28040 + ($34<<2)|0); //@line 1815 "emscripten/stb_image.c"
   $36 = HEAP32[$35>>2]|0; //@line 1815 "emscripten/stb_image.c"
   $37 = ($36|0)!=(0); //@line 1815 "emscripten/stb_image.c"
   if ($37) {
    $38 = $1; //@line 1815 "emscripten/stb_image.c"
    $39 = $z; //@line 1815 "emscripten/stb_image.c"
    $40 = (28040 + ($39<<2)|0); //@line 1815 "emscripten/stb_image.c"
    $41 = HEAP32[$40>>2]|0; //@line 1815 "emscripten/stb_image.c"
    $42 = (__ZL8zreceiveP4zbufi($38,$41)|0); //@line 1815 "emscripten/stb_image.c"
    $43 = $len; //@line 1815 "emscripten/stb_image.c"
    $44 = (($43) + ($42))|0; //@line 1815 "emscripten/stb_image.c"
    $len = $44; //@line 1815 "emscripten/stb_image.c"
   }
   $45 = $1; //@line 1816 "emscripten/stb_image.c"
   $46 = $1; //@line 1816 "emscripten/stb_image.c"
   $47 = (($46) + 2052|0); //@line 1816 "emscripten/stb_image.c"
   $48 = (__ZL15zhuffman_decodeP4zbufP8zhuffman($45,$47)|0); //@line 1816 "emscripten/stb_image.c"
   $z = $48; //@line 1816 "emscripten/stb_image.c"
   $49 = $z; //@line 1817 "emscripten/stb_image.c"
   $50 = ($49|0)<(0); //@line 1817 "emscripten/stb_image.c"
   if ($50) {
    label = 15;
    break;
   }
   $52 = $z; //@line 1818 "emscripten/stb_image.c"
   $53 = (28168 + ($52<<2)|0); //@line 1818 "emscripten/stb_image.c"
   $54 = HEAP32[$53>>2]|0; //@line 1818 "emscripten/stb_image.c"
   $dist = $54; //@line 1818 "emscripten/stb_image.c"
   $55 = $z; //@line 1819 "emscripten/stb_image.c"
   $56 = (28296 + ($55<<2)|0); //@line 1819 "emscripten/stb_image.c"
   $57 = HEAP32[$56>>2]|0; //@line 1819 "emscripten/stb_image.c"
   $58 = ($57|0)!=(0); //@line 1819 "emscripten/stb_image.c"
   if ($58) {
    $59 = $1; //@line 1819 "emscripten/stb_image.c"
    $60 = $z; //@line 1819 "emscripten/stb_image.c"
    $61 = (28296 + ($60<<2)|0); //@line 1819 "emscripten/stb_image.c"
    $62 = HEAP32[$61>>2]|0; //@line 1819 "emscripten/stb_image.c"
    $63 = (__ZL8zreceiveP4zbufi($59,$62)|0); //@line 1819 "emscripten/stb_image.c"
    $64 = $dist; //@line 1819 "emscripten/stb_image.c"
    $65 = (($64) + ($63))|0; //@line 1819 "emscripten/stb_image.c"
    $dist = $65; //@line 1819 "emscripten/stb_image.c"
   }
   $66 = $1; //@line 1820 "emscripten/stb_image.c"
   $67 = (($66) + 16|0); //@line 1820 "emscripten/stb_image.c"
   $68 = HEAP32[$67>>2]|0; //@line 1820 "emscripten/stb_image.c"
   $69 = $1; //@line 1820 "emscripten/stb_image.c"
   $70 = (($69) + 20|0); //@line 1820 "emscripten/stb_image.c"
   $71 = HEAP32[$70>>2]|0; //@line 1820 "emscripten/stb_image.c"
   $72 = $68; //@line 1820 "emscripten/stb_image.c"
   $73 = $71; //@line 1820 "emscripten/stb_image.c"
   $74 = (($72) - ($73))|0; //@line 1820 "emscripten/stb_image.c"
   $75 = $dist; //@line 1820 "emscripten/stb_image.c"
   $76 = ($74|0)<($75|0); //@line 1820 "emscripten/stb_image.c"
   if ($76) {
    label = 19;
    break;
   }
   $78 = $1; //@line 1821 "emscripten/stb_image.c"
   $79 = (($78) + 16|0); //@line 1821 "emscripten/stb_image.c"
   $80 = HEAP32[$79>>2]|0; //@line 1821 "emscripten/stb_image.c"
   $81 = $len; //@line 1821 "emscripten/stb_image.c"
   $82 = (($80) + ($81)|0); //@line 1821 "emscripten/stb_image.c"
   $83 = $1; //@line 1821 "emscripten/stb_image.c"
   $84 = (($83) + 24|0); //@line 1821 "emscripten/stb_image.c"
   $85 = HEAP32[$84>>2]|0; //@line 1821 "emscripten/stb_image.c"
   $86 = ($82>>>0)>($85>>>0); //@line 1821 "emscripten/stb_image.c"
   if ($86) {
    $87 = $1; //@line 1821 "emscripten/stb_image.c"
    $88 = $len; //@line 1821 "emscripten/stb_image.c"
    $89 = (__ZL6expandP4zbufi($87,$88)|0); //@line 1821 "emscripten/stb_image.c"
    $90 = ($89|0)!=(0); //@line 1821 "emscripten/stb_image.c"
    if (!($90)) {
     label = 22;
     break;
    }
   }
   $91 = $1; //@line 1822 "emscripten/stb_image.c"
   $92 = (($91) + 16|0); //@line 1822 "emscripten/stb_image.c"
   $93 = HEAP32[$92>>2]|0; //@line 1822 "emscripten/stb_image.c"
   $94 = $dist; //@line 1822 "emscripten/stb_image.c"
   $95 = (0 - ($94))|0; //@line 1822 "emscripten/stb_image.c"
   $96 = (($93) + ($95)|0); //@line 1822 "emscripten/stb_image.c"
   $p = $96; //@line 1822 "emscripten/stb_image.c"
   while(1) {
    $97 = $len; //@line 1823 "emscripten/stb_image.c"
    $98 = (($97) + -1)|0; //@line 1823 "emscripten/stb_image.c"
    $len = $98; //@line 1823 "emscripten/stb_image.c"
    $99 = ($97|0)!=(0); //@line 1823 "emscripten/stb_image.c"
    if (!($99)) {
     break;
    }
    $100 = $p; //@line 1824 "emscripten/stb_image.c"
    $101 = (($100) + 1|0); //@line 1824 "emscripten/stb_image.c"
    $p = $101; //@line 1824 "emscripten/stb_image.c"
    $102 = HEAP8[$100>>0]|0; //@line 1824 "emscripten/stb_image.c"
    $103 = $1; //@line 1824 "emscripten/stb_image.c"
    $104 = (($103) + 16|0); //@line 1824 "emscripten/stb_image.c"
    $105 = HEAP32[$104>>2]|0; //@line 1824 "emscripten/stb_image.c"
    $106 = (($105) + 1|0); //@line 1824 "emscripten/stb_image.c"
    HEAP32[$104>>2] = $106; //@line 1824 "emscripten/stb_image.c"
    HEAP8[$105>>0] = $102; //@line 1824 "emscripten/stb_image.c"
   }
  }
 }
 if ((label|0) == 4) {
  $10 = (__ZL1ePKc(27888)|0); //@line 1806 "emscripten/stb_image.c"
  $0 = $10; //@line 1806 "emscripten/stb_image.c"
  $107 = $0; //@line 1827 "emscripten/stb_image.c"
  STACKTOP = sp;return ($107|0); //@line 1827 "emscripten/stb_image.c"
 }
 else if ((label|0) == 7) {
  $0 = 0; //@line 1807 "emscripten/stb_image.c"
  $107 = $0; //@line 1827 "emscripten/stb_image.c"
  STACKTOP = sp;return ($107|0); //@line 1827 "emscripten/stb_image.c"
 }
 else if ((label|0) == 11) {
  $0 = 1; //@line 1812 "emscripten/stb_image.c"
  $107 = $0; //@line 1827 "emscripten/stb_image.c"
  STACKTOP = sp;return ($107|0); //@line 1827 "emscripten/stb_image.c"
 }
 else if ((label|0) == 15) {
  $51 = (__ZL1ePKc(27888)|0); //@line 1817 "emscripten/stb_image.c"
  $0 = $51; //@line 1817 "emscripten/stb_image.c"
  $107 = $0; //@line 1827 "emscripten/stb_image.c"
  STACKTOP = sp;return ($107|0); //@line 1827 "emscripten/stb_image.c"
 }
 else if ((label|0) == 19) {
  $77 = (__ZL1ePKc(28424)|0); //@line 1820 "emscripten/stb_image.c"
  $0 = $77; //@line 1820 "emscripten/stb_image.c"
  $107 = $0; //@line 1827 "emscripten/stb_image.c"
  STACKTOP = sp;return ($107|0); //@line 1827 "emscripten/stb_image.c"
 }
 else if ((label|0) == 22) {
  $0 = 0; //@line 1821 "emscripten/stb_image.c"
  $107 = $0; //@line 1827 "emscripten/stb_image.c"
  STACKTOP = sp;return ($107|0); //@line 1827 "emscripten/stb_image.c"
 }
 return 0|0;
}
function __ZL15zhuffman_decodeP4zbufP8zhuffman($a,$z) {
 $a = $a|0;
 $z = $z|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $b = 0, $k = 0;
 var $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = $a;
 $2 = $z;
 $3 = $1; //@line 1746 "emscripten/stb_image.c"
 $4 = (($3) + 8|0); //@line 1746 "emscripten/stb_image.c"
 $5 = HEAP32[$4>>2]|0; //@line 1746 "emscripten/stb_image.c"
 $6 = ($5|0)<(16); //@line 1746 "emscripten/stb_image.c"
 if ($6) {
  $7 = $1; //@line 1746 "emscripten/stb_image.c"
  __ZL9fill_bitsP4zbuf($7); //@line 1746 "emscripten/stb_image.c"
 }
 $8 = $1; //@line 1747 "emscripten/stb_image.c"
 $9 = (($8) + 12|0); //@line 1747 "emscripten/stb_image.c"
 $10 = HEAP32[$9>>2]|0; //@line 1747 "emscripten/stb_image.c"
 $11 = $10 & 511; //@line 1747 "emscripten/stb_image.c"
 $12 = $2; //@line 1747 "emscripten/stb_image.c"
 $13 = (($12) + ($11<<1)|0); //@line 1747 "emscripten/stb_image.c"
 $14 = HEAP16[$13>>1]|0; //@line 1747 "emscripten/stb_image.c"
 $15 = $14&65535; //@line 1747 "emscripten/stb_image.c"
 $b = $15; //@line 1747 "emscripten/stb_image.c"
 $16 = $b; //@line 1748 "emscripten/stb_image.c"
 $17 = ($16|0)<(65535); //@line 1748 "emscripten/stb_image.c"
 if ($17) {
  $18 = $b; //@line 1749 "emscripten/stb_image.c"
  $19 = $2; //@line 1749 "emscripten/stb_image.c"
  $20 = (($19) + 1156|0); //@line 1749 "emscripten/stb_image.c"
  $21 = (($20) + ($18)|0); //@line 1749 "emscripten/stb_image.c"
  $22 = HEAP8[$21>>0]|0; //@line 1749 "emscripten/stb_image.c"
  $23 = $22&255; //@line 1749 "emscripten/stb_image.c"
  $s = $23; //@line 1749 "emscripten/stb_image.c"
  $24 = $s; //@line 1750 "emscripten/stb_image.c"
  $25 = $1; //@line 1750 "emscripten/stb_image.c"
  $26 = (($25) + 12|0); //@line 1750 "emscripten/stb_image.c"
  $27 = HEAP32[$26>>2]|0; //@line 1750 "emscripten/stb_image.c"
  $28 = $27 >>> $24; //@line 1750 "emscripten/stb_image.c"
  HEAP32[$26>>2] = $28; //@line 1750 "emscripten/stb_image.c"
  $29 = $s; //@line 1751 "emscripten/stb_image.c"
  $30 = $1; //@line 1751 "emscripten/stb_image.c"
  $31 = (($30) + 8|0); //@line 1751 "emscripten/stb_image.c"
  $32 = HEAP32[$31>>2]|0; //@line 1751 "emscripten/stb_image.c"
  $33 = (($32) - ($29))|0; //@line 1751 "emscripten/stb_image.c"
  HEAP32[$31>>2] = $33; //@line 1751 "emscripten/stb_image.c"
  $34 = $b; //@line 1752 "emscripten/stb_image.c"
  $35 = $2; //@line 1752 "emscripten/stb_image.c"
  $36 = (($35) + 1444|0); //@line 1752 "emscripten/stb_image.c"
  $37 = (($36) + ($34<<1)|0); //@line 1752 "emscripten/stb_image.c"
  $38 = HEAP16[$37>>1]|0; //@line 1752 "emscripten/stb_image.c"
  $39 = $38&65535; //@line 1752 "emscripten/stb_image.c"
  $0 = $39; //@line 1752 "emscripten/stb_image.c"
  $97 = $0; //@line 1768 "emscripten/stb_image.c"
  STACKTOP = sp;return ($97|0); //@line 1768 "emscripten/stb_image.c"
 }
 $40 = $1; //@line 1757 "emscripten/stb_image.c"
 $41 = (($40) + 12|0); //@line 1757 "emscripten/stb_image.c"
 $42 = HEAP32[$41>>2]|0; //@line 1757 "emscripten/stb_image.c"
 $43 = (__ZL11bit_reverseii($42,16)|0); //@line 1757 "emscripten/stb_image.c"
 $k = $43; //@line 1757 "emscripten/stb_image.c"
 $s = 10; //@line 1758 "emscripten/stb_image.c"
 while(1) {
  $44 = $k; //@line 1759 "emscripten/stb_image.c"
  $45 = $s; //@line 1759 "emscripten/stb_image.c"
  $46 = $2; //@line 1759 "emscripten/stb_image.c"
  $47 = (($46) + 1056|0); //@line 1759 "emscripten/stb_image.c"
  $48 = (($47) + ($45<<2)|0); //@line 1759 "emscripten/stb_image.c"
  $49 = HEAP32[$48>>2]|0; //@line 1759 "emscripten/stb_image.c"
  $50 = ($44|0)<($49|0); //@line 1759 "emscripten/stb_image.c"
  if ($50) {
   break;
  }
  $51 = $s; //@line 1758 "emscripten/stb_image.c"
  $52 = (($51) + 1)|0; //@line 1758 "emscripten/stb_image.c"
  $s = $52; //@line 1758 "emscripten/stb_image.c"
 }
 $53 = $s; //@line 1761 "emscripten/stb_image.c"
 $54 = ($53|0)==(16); //@line 1761 "emscripten/stb_image.c"
 if ($54) {
  $0 = -1; //@line 1761 "emscripten/stb_image.c"
  $97 = $0; //@line 1768 "emscripten/stb_image.c"
  STACKTOP = sp;return ($97|0); //@line 1768 "emscripten/stb_image.c"
 }
 $55 = $k; //@line 1763 "emscripten/stb_image.c"
 $56 = $s; //@line 1763 "emscripten/stb_image.c"
 $57 = (16 - ($56))|0; //@line 1763 "emscripten/stb_image.c"
 $58 = $55 >> $57; //@line 1763 "emscripten/stb_image.c"
 $59 = $s; //@line 1763 "emscripten/stb_image.c"
 $60 = $2; //@line 1763 "emscripten/stb_image.c"
 $61 = (($60) + 1024|0); //@line 1763 "emscripten/stb_image.c"
 $62 = (($61) + ($59<<1)|0); //@line 1763 "emscripten/stb_image.c"
 $63 = HEAP16[$62>>1]|0; //@line 1763 "emscripten/stb_image.c"
 $64 = $63&65535; //@line 1763 "emscripten/stb_image.c"
 $65 = (($58) - ($64))|0; //@line 1763 "emscripten/stb_image.c"
 $66 = $s; //@line 1763 "emscripten/stb_image.c"
 $67 = $2; //@line 1763 "emscripten/stb_image.c"
 $68 = (($67) + 1124|0); //@line 1763 "emscripten/stb_image.c"
 $69 = (($68) + ($66<<1)|0); //@line 1763 "emscripten/stb_image.c"
 $70 = HEAP16[$69>>1]|0; //@line 1763 "emscripten/stb_image.c"
 $71 = $70&65535; //@line 1763 "emscripten/stb_image.c"
 $72 = (($65) + ($71))|0; //@line 1763 "emscripten/stb_image.c"
 $b = $72; //@line 1763 "emscripten/stb_image.c"
 $73 = $b; //@line 1764 "emscripten/stb_image.c"
 $74 = $2; //@line 1764 "emscripten/stb_image.c"
 $75 = (($74) + 1156|0); //@line 1764 "emscripten/stb_image.c"
 $76 = (($75) + ($73)|0); //@line 1764 "emscripten/stb_image.c"
 $77 = HEAP8[$76>>0]|0; //@line 1764 "emscripten/stb_image.c"
 $78 = $77&255; //@line 1764 "emscripten/stb_image.c"
 $79 = $s; //@line 1764 "emscripten/stb_image.c"
 $80 = ($78|0)==($79|0); //@line 1764 "emscripten/stb_image.c"
 if (!($80)) {
  ___assert_fail((28464|0),(26712|0),1764,(28480|0)); //@line 1764 "emscripten/stb_image.c"
  // unreachable; //@line 1764 "emscripten/stb_image.c"
 }
 $81 = $s; //@line 1765 "emscripten/stb_image.c"
 $82 = $1; //@line 1765 "emscripten/stb_image.c"
 $83 = (($82) + 12|0); //@line 1765 "emscripten/stb_image.c"
 $84 = HEAP32[$83>>2]|0; //@line 1765 "emscripten/stb_image.c"
 $85 = $84 >>> $81; //@line 1765 "emscripten/stb_image.c"
 HEAP32[$83>>2] = $85; //@line 1765 "emscripten/stb_image.c"
 $86 = $s; //@line 1766 "emscripten/stb_image.c"
 $87 = $1; //@line 1766 "emscripten/stb_image.c"
 $88 = (($87) + 8|0); //@line 1766 "emscripten/stb_image.c"
 $89 = HEAP32[$88>>2]|0; //@line 1766 "emscripten/stb_image.c"
 $90 = (($89) - ($86))|0; //@line 1766 "emscripten/stb_image.c"
 HEAP32[$88>>2] = $90; //@line 1766 "emscripten/stb_image.c"
 $91 = $b; //@line 1767 "emscripten/stb_image.c"
 $92 = $2; //@line 1767 "emscripten/stb_image.c"
 $93 = (($92) + 1444|0); //@line 1767 "emscripten/stb_image.c"
 $94 = (($93) + ($91<<1)|0); //@line 1767 "emscripten/stb_image.c"
 $95 = HEAP16[$94>>1]|0; //@line 1767 "emscripten/stb_image.c"
 $96 = $95&65535; //@line 1767 "emscripten/stb_image.c"
 $0 = $96; //@line 1767 "emscripten/stb_image.c"
 $97 = $0; //@line 1768 "emscripten/stb_image.c"
 STACKTOP = sp;return ($97|0); //@line 1768 "emscripten/stb_image.c"
}
function __ZL6expandP4zbufi($z,$n) {
 $z = $z|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cur = 0, $limit = 0, $q = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = $z;
 $2 = $n;
 $3 = $1; //@line 1774 "emscripten/stb_image.c"
 $4 = (($3) + 28|0); //@line 1774 "emscripten/stb_image.c"
 $5 = HEAP32[$4>>2]|0; //@line 1774 "emscripten/stb_image.c"
 $6 = ($5|0)!=(0); //@line 1774 "emscripten/stb_image.c"
 if (!($6)) {
  $7 = (__ZL1ePKc(28440)|0); //@line 1774 "emscripten/stb_image.c"
  $0 = $7; //@line 1774 "emscripten/stb_image.c"
  $54 = $0; //@line 1785 "emscripten/stb_image.c"
  STACKTOP = sp;return ($54|0); //@line 1785 "emscripten/stb_image.c"
 }
 $8 = $1; //@line 1775 "emscripten/stb_image.c"
 $9 = (($8) + 16|0); //@line 1775 "emscripten/stb_image.c"
 $10 = HEAP32[$9>>2]|0; //@line 1775 "emscripten/stb_image.c"
 $11 = $1; //@line 1775 "emscripten/stb_image.c"
 $12 = (($11) + 20|0); //@line 1775 "emscripten/stb_image.c"
 $13 = HEAP32[$12>>2]|0; //@line 1775 "emscripten/stb_image.c"
 $14 = $10; //@line 1775 "emscripten/stb_image.c"
 $15 = $13; //@line 1775 "emscripten/stb_image.c"
 $16 = (($14) - ($15))|0; //@line 1775 "emscripten/stb_image.c"
 $cur = $16; //@line 1775 "emscripten/stb_image.c"
 $17 = $1; //@line 1776 "emscripten/stb_image.c"
 $18 = (($17) + 24|0); //@line 1776 "emscripten/stb_image.c"
 $19 = HEAP32[$18>>2]|0; //@line 1776 "emscripten/stb_image.c"
 $20 = $1; //@line 1776 "emscripten/stb_image.c"
 $21 = (($20) + 20|0); //@line 1776 "emscripten/stb_image.c"
 $22 = HEAP32[$21>>2]|0; //@line 1776 "emscripten/stb_image.c"
 $23 = $19; //@line 1776 "emscripten/stb_image.c"
 $24 = $22; //@line 1776 "emscripten/stb_image.c"
 $25 = (($23) - ($24))|0; //@line 1776 "emscripten/stb_image.c"
 $limit = $25; //@line 1776 "emscripten/stb_image.c"
 while(1) {
  $26 = $cur; //@line 1777 "emscripten/stb_image.c"
  $27 = $2; //@line 1777 "emscripten/stb_image.c"
  $28 = (($26) + ($27))|0; //@line 1777 "emscripten/stb_image.c"
  $29 = $limit; //@line 1777 "emscripten/stb_image.c"
  $30 = ($28|0)>($29|0); //@line 1777 "emscripten/stb_image.c"
  if (!($30)) {
   break;
  }
  $31 = $limit; //@line 1778 "emscripten/stb_image.c"
  $32 = $31<<1; //@line 1778 "emscripten/stb_image.c"
  $limit = $32; //@line 1778 "emscripten/stb_image.c"
 }
 $33 = $1; //@line 1779 "emscripten/stb_image.c"
 $34 = (($33) + 20|0); //@line 1779 "emscripten/stb_image.c"
 $35 = HEAP32[$34>>2]|0; //@line 1779 "emscripten/stb_image.c"
 $36 = $limit; //@line 1779 "emscripten/stb_image.c"
 $37 = (_realloc($35,$36)|0); //@line 1779 "emscripten/stb_image.c"
 $q = $37; //@line 1779 "emscripten/stb_image.c"
 $38 = $q; //@line 1780 "emscripten/stb_image.c"
 $39 = ($38|0)==(0|0); //@line 1780 "emscripten/stb_image.c"
 if ($39) {
  $40 = (__ZL1ePKc(26624)|0); //@line 1780 "emscripten/stb_image.c"
  $0 = $40; //@line 1780 "emscripten/stb_image.c"
  $54 = $0; //@line 1785 "emscripten/stb_image.c"
  STACKTOP = sp;return ($54|0); //@line 1785 "emscripten/stb_image.c"
 } else {
  $41 = $q; //@line 1781 "emscripten/stb_image.c"
  $42 = $1; //@line 1781 "emscripten/stb_image.c"
  $43 = (($42) + 20|0); //@line 1781 "emscripten/stb_image.c"
  HEAP32[$43>>2] = $41; //@line 1781 "emscripten/stb_image.c"
  $44 = $q; //@line 1782 "emscripten/stb_image.c"
  $45 = $cur; //@line 1782 "emscripten/stb_image.c"
  $46 = (($44) + ($45)|0); //@line 1782 "emscripten/stb_image.c"
  $47 = $1; //@line 1782 "emscripten/stb_image.c"
  $48 = (($47) + 16|0); //@line 1782 "emscripten/stb_image.c"
  HEAP32[$48>>2] = $46; //@line 1782 "emscripten/stb_image.c"
  $49 = $q; //@line 1783 "emscripten/stb_image.c"
  $50 = $limit; //@line 1783 "emscripten/stb_image.c"
  $51 = (($49) + ($50)|0); //@line 1783 "emscripten/stb_image.c"
  $52 = $1; //@line 1783 "emscripten/stb_image.c"
  $53 = (($52) + 24|0); //@line 1783 "emscripten/stb_image.c"
  HEAP32[$53>>2] = $51; //@line 1783 "emscripten/stb_image.c"
  $0 = 1; //@line 1784 "emscripten/stb_image.c"
  $54 = $0; //@line 1785 "emscripten/stb_image.c"
  STACKTOP = sp;return ($54|0); //@line 1785 "emscripten/stb_image.c"
 }
 return 0|0;
}
function __ZL9fill_bitsP4zbuf($z) {
 $z = $z|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $z;
 while(1) {
  $1 = $0; //@line 1727 "emscripten/stb_image.c"
  $2 = (($1) + 12|0); //@line 1727 "emscripten/stb_image.c"
  $3 = HEAP32[$2>>2]|0; //@line 1727 "emscripten/stb_image.c"
  $4 = $0; //@line 1727 "emscripten/stb_image.c"
  $5 = (($4) + 8|0); //@line 1727 "emscripten/stb_image.c"
  $6 = HEAP32[$5>>2]|0; //@line 1727 "emscripten/stb_image.c"
  $7 = 1 << $6; //@line 1727 "emscripten/stb_image.c"
  $8 = ($3>>>0)<($7>>>0); //@line 1727 "emscripten/stb_image.c"
  if (!($8)) {
   label = 3;
   break;
  }
  $9 = $0; //@line 1728 "emscripten/stb_image.c"
  $10 = (__ZL5zget8P4zbuf($9)|0); //@line 1728 "emscripten/stb_image.c"
  $11 = $0; //@line 1728 "emscripten/stb_image.c"
  $12 = (($11) + 8|0); //@line 1728 "emscripten/stb_image.c"
  $13 = HEAP32[$12>>2]|0; //@line 1728 "emscripten/stb_image.c"
  $14 = $10 << $13; //@line 1728 "emscripten/stb_image.c"
  $15 = $0; //@line 1728 "emscripten/stb_image.c"
  $16 = (($15) + 12|0); //@line 1728 "emscripten/stb_image.c"
  $17 = HEAP32[$16>>2]|0; //@line 1728 "emscripten/stb_image.c"
  $18 = $17 | $14; //@line 1728 "emscripten/stb_image.c"
  HEAP32[$16>>2] = $18; //@line 1728 "emscripten/stb_image.c"
  $19 = $0; //@line 1729 "emscripten/stb_image.c"
  $20 = (($19) + 8|0); //@line 1729 "emscripten/stb_image.c"
  $21 = HEAP32[$20>>2]|0; //@line 1729 "emscripten/stb_image.c"
  $22 = (($21) + 8)|0; //@line 1729 "emscripten/stb_image.c"
  HEAP32[$20>>2] = $22; //@line 1729 "emscripten/stb_image.c"
  $23 = $0; //@line 1730 "emscripten/stb_image.c"
  $24 = (($23) + 8|0); //@line 1730 "emscripten/stb_image.c"
  $25 = HEAP32[$24>>2]|0; //@line 1730 "emscripten/stb_image.c"
  $26 = ($25|0)<=(24); //@line 1730 "emscripten/stb_image.c"
  if (!($26)) {
   label = 6;
   break;
  }
 }
 if ((label|0) == 3) {
  ___assert_fail((28528|0),(26712|0),1727,(28568|0)); //@line 1727 "emscripten/stb_image.c"
  // unreachable; //@line 1727 "emscripten/stb_image.c"
 }
 else if ((label|0) == 6) {
  STACKTOP = sp;return; //@line 1731 "emscripten/stb_image.c"
 }
}
function __ZL11bit_reverseii($v,$bits) {
 $v = $v|0;
 $bits = $bits|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $v;
 $1 = $bits;
 $2 = $1; //@line 1647 "emscripten/stb_image.c"
 $3 = ($2|0)<=(16); //@line 1647 "emscripten/stb_image.c"
 if ($3) {
  $4 = $0; //@line 1650 "emscripten/stb_image.c"
  $5 = (__ZL12bitreverse16i($4)|0); //@line 1650 "emscripten/stb_image.c"
  $6 = $1; //@line 1650 "emscripten/stb_image.c"
  $7 = (16 - ($6))|0; //@line 1650 "emscripten/stb_image.c"
  $8 = $5 >> $7; //@line 1650 "emscripten/stb_image.c"
  STACKTOP = sp;return ($8|0); //@line 1650 "emscripten/stb_image.c"
 } else {
  ___assert_fail((28496|0),(26712|0),1647,(28512|0)); //@line 1647 "emscripten/stb_image.c"
  // unreachable; //@line 1647 "emscripten/stb_image.c"
 }
 return 0|0;
}
function __ZL12bitreverse16i($n) {
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $n;
 $1 = $0; //@line 1638 "emscripten/stb_image.c"
 $2 = $1 & 43690; //@line 1638 "emscripten/stb_image.c"
 $3 = $2 >> 1; //@line 1638 "emscripten/stb_image.c"
 $4 = $0; //@line 1638 "emscripten/stb_image.c"
 $5 = $4 & 21845; //@line 1638 "emscripten/stb_image.c"
 $6 = $5 << 1; //@line 1638 "emscripten/stb_image.c"
 $7 = $3 | $6; //@line 1638 "emscripten/stb_image.c"
 $0 = $7; //@line 1638 "emscripten/stb_image.c"
 $8 = $0; //@line 1639 "emscripten/stb_image.c"
 $9 = $8 & 52428; //@line 1639 "emscripten/stb_image.c"
 $10 = $9 >> 2; //@line 1639 "emscripten/stb_image.c"
 $11 = $0; //@line 1639 "emscripten/stb_image.c"
 $12 = $11 & 13107; //@line 1639 "emscripten/stb_image.c"
 $13 = $12 << 2; //@line 1639 "emscripten/stb_image.c"
 $14 = $10 | $13; //@line 1639 "emscripten/stb_image.c"
 $0 = $14; //@line 1639 "emscripten/stb_image.c"
 $15 = $0; //@line 1640 "emscripten/stb_image.c"
 $16 = $15 & 61680; //@line 1640 "emscripten/stb_image.c"
 $17 = $16 >> 4; //@line 1640 "emscripten/stb_image.c"
 $18 = $0; //@line 1640 "emscripten/stb_image.c"
 $19 = $18 & 3855; //@line 1640 "emscripten/stb_image.c"
 $20 = $19 << 4; //@line 1640 "emscripten/stb_image.c"
 $21 = $17 | $20; //@line 1640 "emscripten/stb_image.c"
 $0 = $21; //@line 1640 "emscripten/stb_image.c"
 $22 = $0; //@line 1641 "emscripten/stb_image.c"
 $23 = $22 & 65280; //@line 1641 "emscripten/stb_image.c"
 $24 = $23 >> 8; //@line 1641 "emscripten/stb_image.c"
 $25 = $0; //@line 1641 "emscripten/stb_image.c"
 $26 = $25 & 255; //@line 1641 "emscripten/stb_image.c"
 $27 = $26 << 8; //@line 1641 "emscripten/stb_image.c"
 $28 = $24 | $27; //@line 1641 "emscripten/stb_image.c"
 $0 = $28; //@line 1641 "emscripten/stb_image.c"
 $29 = $0; //@line 1642 "emscripten/stb_image.c"
 STACKTOP = sp;return ($29|0); //@line 1642 "emscripten/stb_image.c"
}
function __ZL5zget8P4zbuf($z) {
 $z = $z|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $z;
 $2 = $1; //@line 1720 "emscripten/stb_image.c"
 $3 = HEAP32[$2>>2]|0; //@line 1720 "emscripten/stb_image.c"
 $4 = $1; //@line 1720 "emscripten/stb_image.c"
 $5 = (($4) + 4|0); //@line 1720 "emscripten/stb_image.c"
 $6 = HEAP32[$5>>2]|0; //@line 1720 "emscripten/stb_image.c"
 $7 = ($3>>>0)>=($6>>>0); //@line 1720 "emscripten/stb_image.c"
 if ($7) {
  $0 = 0; //@line 1720 "emscripten/stb_image.c"
  $13 = $0; //@line 1722 "emscripten/stb_image.c"
  STACKTOP = sp;return ($13|0); //@line 1722 "emscripten/stb_image.c"
 } else {
  $8 = $1; //@line 1721 "emscripten/stb_image.c"
  $9 = HEAP32[$8>>2]|0; //@line 1721 "emscripten/stb_image.c"
  $10 = (($9) + 1|0); //@line 1721 "emscripten/stb_image.c"
  HEAP32[$8>>2] = $10; //@line 1721 "emscripten/stb_image.c"
  $11 = HEAP8[$9>>0]|0; //@line 1721 "emscripten/stb_image.c"
  $12 = $11&255; //@line 1721 "emscripten/stb_image.c"
  $0 = $12; //@line 1721 "emscripten/stb_image.c"
  $13 = $0; //@line 1722 "emscripten/stb_image.c"
  STACKTOP = sp;return ($13|0); //@line 1722 "emscripten/stb_image.c"
 }
 return 0|0;
}
function __ZL14stbi_jpeg_testP4stbi($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $j = 0, $r = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 14016|0;
 $j = sp + 8|0;
 $0 = $s;
 $1 = $0; //@line 1588 "emscripten/stb_image.c"
 HEAP32[$j>>2] = $1; //@line 1588 "emscripten/stb_image.c"
 $2 = (__ZL18decode_jpeg_headerP4jpegi($j,1)|0); //@line 1589 "emscripten/stb_image.c"
 $r = $2; //@line 1589 "emscripten/stb_image.c"
 $3 = $0; //@line 1590 "emscripten/stb_image.c"
 __ZL11stbi_rewindP4stbi($3); //@line 1590 "emscripten/stb_image.c"
 $4 = $r; //@line 1591 "emscripten/stb_image.c"
 STACKTOP = sp;return ($4|0); //@line 1591 "emscripten/stb_image.c"
}
function __ZL14stbi_jpeg_loadP4stbiPiS1_S1_i($s,$x,$y,$comp,$req_comp) {
 $s = $s|0;
 $x = $x|0;
 $y = $y|0;
 $comp = $comp|0;
 $req_comp = $req_comp|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $j = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 14016|0;
 $j = sp + 16|0;
 $0 = $s;
 $1 = $x;
 $2 = $y;
 $3 = $comp;
 $4 = $req_comp;
 $5 = $0; //@line 1580 "emscripten/stb_image.c"
 HEAP32[$j>>2] = $5; //@line 1580 "emscripten/stb_image.c"
 $6 = $1; //@line 1581 "emscripten/stb_image.c"
 $7 = $2; //@line 1581 "emscripten/stb_image.c"
 $8 = $3; //@line 1581 "emscripten/stb_image.c"
 $9 = $4; //@line 1581 "emscripten/stb_image.c"
 $10 = (__ZL15load_jpeg_imageP4jpegPiS1_S1_i($j,$6,$7,$8,$9)|0); //@line 1581 "emscripten/stb_image.c"
 STACKTOP = sp;return ($10|0); //@line 1581 "emscripten/stb_image.c"
}
function __ZL13stbi_png_testP4stbi($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $r = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $s;
 $1 = $0; //@line 2532 "emscripten/stb_image.c"
 $2 = (__ZL16check_png_headerP4stbi($1)|0); //@line 2532 "emscripten/stb_image.c"
 $r = $2; //@line 2532 "emscripten/stb_image.c"
 $3 = $0; //@line 2533 "emscripten/stb_image.c"
 __ZL11stbi_rewindP4stbi($3); //@line 2533 "emscripten/stb_image.c"
 $4 = $r; //@line 2534 "emscripten/stb_image.c"
 STACKTOP = sp;return ($4|0); //@line 2534 "emscripten/stb_image.c"
}
function __ZL13stbi_png_loadP4stbiPiS1_S1_i($s,$x,$y,$comp,$req_comp) {
 $s = $s|0;
 $x = $x|0;
 $y = $y|0;
 $comp = $comp|0;
 $req_comp = $req_comp|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $p = sp + 16|0;
 $0 = $s;
 $1 = $x;
 $2 = $y;
 $3 = $comp;
 $4 = $req_comp;
 $5 = $0; //@line 2525 "emscripten/stb_image.c"
 HEAP32[$p>>2] = $5; //@line 2525 "emscripten/stb_image.c"
 $6 = $1; //@line 2526 "emscripten/stb_image.c"
 $7 = $2; //@line 2526 "emscripten/stb_image.c"
 $8 = $3; //@line 2526 "emscripten/stb_image.c"
 $9 = $4; //@line 2526 "emscripten/stb_image.c"
 $10 = (__ZL6do_pngP3pngPiS1_S1_i($p,$6,$7,$8,$9)|0); //@line 2526 "emscripten/stb_image.c"
 STACKTOP = sp;return ($10|0); //@line 2526 "emscripten/stb_image.c"
}
function __ZL13stbi_bmp_testP4stbi($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $r = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $s;
 $1 = $0; //@line 2574 "emscripten/stb_image.c"
 $2 = (__ZL8bmp_testP4stbi($1)|0); //@line 2574 "emscripten/stb_image.c"
 $r = $2; //@line 2574 "emscripten/stb_image.c"
 $3 = $0; //@line 2575 "emscripten/stb_image.c"
 __ZL11stbi_rewindP4stbi($3); //@line 2575 "emscripten/stb_image.c"
 $4 = $r; //@line 2576 "emscripten/stb_image.c"
 STACKTOP = sp;return ($4|0); //@line 2576 "emscripten/stb_image.c"
}
function __ZL13stbi_bmp_loadP4stbiPiS1_S1_i($s,$x,$y,$comp,$req_comp) {
 $s = $s|0;
 $x = $x|0;
 $y = $y|0;
 $comp = $comp|0;
 $req_comp = $req_comp|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $s;
 $1 = $x;
 $2 = $y;
 $3 = $comp;
 $4 = $req_comp;
 $5 = $0; //@line 2817 "emscripten/stb_image.c"
 $6 = $1; //@line 2817 "emscripten/stb_image.c"
 $7 = $2; //@line 2817 "emscripten/stb_image.c"
 $8 = $3; //@line 2817 "emscripten/stb_image.c"
 $9 = $4; //@line 2817 "emscripten/stb_image.c"
 $10 = (__ZL8bmp_loadP4stbiPiS1_S1_i($5,$6,$7,$8,$9)|0); //@line 2817 "emscripten/stb_image.c"
 STACKTOP = sp;return ($10|0); //@line 2817 "emscripten/stb_image.c"
}
function __ZL13stbi_gif_testP4stbi($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $r = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $s;
 $1 = $0; //@line 3558 "emscripten/stb_image.c"
 $2 = (__ZL8gif_testP4stbi($1)|0); //@line 3558 "emscripten/stb_image.c"
 $r = $2; //@line 3558 "emscripten/stb_image.c"
 $3 = $0; //@line 3559 "emscripten/stb_image.c"
 __ZL11stbi_rewindP4stbi($3); //@line 3559 "emscripten/stb_image.c"
 $4 = $r; //@line 3560 "emscripten/stb_image.c"
 STACKTOP = sp;return ($4|0); //@line 3560 "emscripten/stb_image.c"
}
function __ZL13stbi_gif_loadP4stbiPiS1_S1_i($s,$x,$y,$comp,$req_comp) {
 $s = $s|0;
 $x = $x|0;
 $y = $y|0;
 $comp = $comp|0;
 $req_comp = $req_comp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $g = 0;
 var $u = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 18544|0;
 $g = sp + 20|0;
 $0 = $s;
 $1 = $x;
 $2 = $y;
 $3 = $comp;
 $4 = $req_comp;
 $u = 0; //@line 3844 "emscripten/stb_image.c"
 _memset(($g|0),0,18508)|0; //@line 3845 "emscripten/stb_image.c"
 $5 = $0; //@line 3847 "emscripten/stb_image.c"
 $6 = $3; //@line 3847 "emscripten/stb_image.c"
 $7 = $4; //@line 3847 "emscripten/stb_image.c"
 $8 = (__ZL18stbi_gif_load_nextP4stbiP15stbi_gif_structPii($5,$g,$6,$7)|0); //@line 3847 "emscripten/stb_image.c"
 $u = $8; //@line 3847 "emscripten/stb_image.c"
 $9 = $u; //@line 3848 "emscripten/stb_image.c"
 $10 = ($9|0)==((1)|0); //@line 3848 "emscripten/stb_image.c"
 if ($10) {
  $u = 0; //@line 3848 "emscripten/stb_image.c"
 }
 $11 = $u; //@line 3849 "emscripten/stb_image.c"
 $12 = ($11|0)!=(0|0); //@line 3849 "emscripten/stb_image.c"
 if (!($12)) {
  $18 = $u; //@line 3854 "emscripten/stb_image.c"
  STACKTOP = sp;return ($18|0); //@line 3854 "emscripten/stb_image.c"
 }
 $13 = HEAP32[$g>>2]|0; //@line 3850 "emscripten/stb_image.c"
 $14 = $1; //@line 3850 "emscripten/stb_image.c"
 HEAP32[$14>>2] = $13; //@line 3850 "emscripten/stb_image.c"
 $15 = (($g) + 4|0); //@line 3851 "emscripten/stb_image.c"
 $16 = HEAP32[$15>>2]|0; //@line 3851 "emscripten/stb_image.c"
 $17 = $2; //@line 3851 "emscripten/stb_image.c"
 HEAP32[$17>>2] = $16; //@line 3851 "emscripten/stb_image.c"
 $18 = $u; //@line 3854 "emscripten/stb_image.c"
 STACKTOP = sp;return ($18|0); //@line 3854 "emscripten/stb_image.c"
}
function __ZL13stbi_psd_testP4stbi($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $r = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $s;
 $1 = $0; //@line 3136 "emscripten/stb_image.c"
 $2 = (__ZL8psd_testP4stbi($1)|0); //@line 3136 "emscripten/stb_image.c"
 $r = $2; //@line 3136 "emscripten/stb_image.c"
 $3 = $0; //@line 3137 "emscripten/stb_image.c"
 __ZL11stbi_rewindP4stbi($3); //@line 3137 "emscripten/stb_image.c"
 $4 = $r; //@line 3138 "emscripten/stb_image.c"
 STACKTOP = sp;return ($4|0); //@line 3138 "emscripten/stb_image.c"
}
function __ZL13stbi_psd_loadP4stbiPiS1_S1_i($s,$x,$y,$comp,$req_comp) {
 $s = $s|0;
 $x = $x|0;
 $y = $y|0;
 $comp = $comp|0;
 $req_comp = $req_comp|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $s;
 $1 = $x;
 $2 = $y;
 $3 = $comp;
 $4 = $req_comp;
 $5 = $0; //@line 3301 "emscripten/stb_image.c"
 $6 = $1; //@line 3301 "emscripten/stb_image.c"
 $7 = $2; //@line 3301 "emscripten/stb_image.c"
 $8 = $3; //@line 3301 "emscripten/stb_image.c"
 $9 = $4; //@line 3301 "emscripten/stb_image.c"
 $10 = (__ZL8psd_loadP4stbiPiS1_S1_i($5,$6,$7,$8,$9)|0); //@line 3301 "emscripten/stb_image.c"
 STACKTOP = sp;return ($10|0); //@line 3301 "emscripten/stb_image.c"
}
function __ZL13stbi_pic_testP4stbi($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $r = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $s;
 $1 = $0; //@line 3511 "emscripten/stb_image.c"
 $2 = (__ZL8pic_testP4stbi($1)|0); //@line 3511 "emscripten/stb_image.c"
 $r = $2; //@line 3511 "emscripten/stb_image.c"
 $3 = $0; //@line 3512 "emscripten/stb_image.c"
 __ZL11stbi_rewindP4stbi($3); //@line 3512 "emscripten/stb_image.c"
 $4 = $r; //@line 3513 "emscripten/stb_image.c"
 STACKTOP = sp;return ($4|0); //@line 3513 "emscripten/stb_image.c"
}
function __ZL13stbi_pic_loadP4stbiPiS1_S1_i($s,$x,$y,$comp,$req_comp) {
 $s = $s|0;
 $x = $x|0;
 $y = $y|0;
 $comp = $comp|0;
 $req_comp = $req_comp|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $s;
 $1 = $x;
 $2 = $y;
 $3 = $comp;
 $4 = $req_comp;
 $5 = $0; //@line 3518 "emscripten/stb_image.c"
 $6 = $1; //@line 3518 "emscripten/stb_image.c"
 $7 = $2; //@line 3518 "emscripten/stb_image.c"
 $8 = $3; //@line 3518 "emscripten/stb_image.c"
 $9 = $4; //@line 3518 "emscripten/stb_image.c"
 $10 = (__ZL8pic_loadP4stbiPiS1_S1_i($5,$6,$7,$8,$9)|0); //@line 3518 "emscripten/stb_image.c"
 STACKTOP = sp;return ($10|0); //@line 3518 "emscripten/stb_image.c"
}
function __ZL10hdr_to_ldrPfiii($data,$x,$y,$comp) {
 $data = $data|0;
 $x = $x|0;
 $y = $y|0;
 $comp = $comp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0;
 var $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0.0;
 var $81 = 0, $82 = 0.0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $i = 0, $k = 0, $n = 0;
 var $output = 0, $z = 0.0, $z1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $1 = $data;
 $2 = $x;
 $3 = $y;
 $4 = $comp;
 $5 = $2; //@line 569 "emscripten/stb_image.c"
 $6 = $3; //@line 569 "emscripten/stb_image.c"
 $7 = Math_imul($5, $6)|0; //@line 569 "emscripten/stb_image.c"
 $8 = $4; //@line 569 "emscripten/stb_image.c"
 $9 = Math_imul($7, $8)|0; //@line 569 "emscripten/stb_image.c"
 $10 = (_malloc($9)|0); //@line 569 "emscripten/stb_image.c"
 $output = $10; //@line 569 "emscripten/stb_image.c"
 $11 = $output; //@line 570 "emscripten/stb_image.c"
 $12 = ($11|0)==(0|0); //@line 570 "emscripten/stb_image.c"
 if ($12) {
  $13 = $1; //@line 570 "emscripten/stb_image.c"
  _free($13); //@line 570 "emscripten/stb_image.c"
  $14 = (__ZL1ePKc(26624)|0); //@line 570 "emscripten/stb_image.c"
  $15 = ($14|0)!=(0); //@line 570 "emscripten/stb_image.c"
  $16 = $15 ? 0 : 0; //@line 570 "emscripten/stb_image.c"
  $17 = $16; //@line 570 "emscripten/stb_image.c"
  $0 = $17; //@line 570 "emscripten/stb_image.c"
  $96 = $0; //@line 589 "emscripten/stb_image.c"
  STACKTOP = sp;return ($96|0); //@line 589 "emscripten/stb_image.c"
 }
 $18 = $4; //@line 572 "emscripten/stb_image.c"
 $19 = $18 & 1; //@line 572 "emscripten/stb_image.c"
 $20 = ($19|0)!=(0); //@line 572 "emscripten/stb_image.c"
 if ($20) {
  $21 = $4; //@line 572 "emscripten/stb_image.c"
  $n = $21; //@line 572 "emscripten/stb_image.c"
 } else {
  $22 = $4; //@line 572 "emscripten/stb_image.c"
  $23 = (($22) - 1)|0; //@line 572 "emscripten/stb_image.c"
  $n = $23; //@line 572 "emscripten/stb_image.c"
 }
 $i = 0; //@line 573 "emscripten/stb_image.c"
 while(1) {
  $24 = $i; //@line 573 "emscripten/stb_image.c"
  $25 = $2; //@line 573 "emscripten/stb_image.c"
  $26 = $3; //@line 573 "emscripten/stb_image.c"
  $27 = Math_imul($25, $26)|0; //@line 573 "emscripten/stb_image.c"
  $28 = ($24|0)<($27|0); //@line 573 "emscripten/stb_image.c"
  if (!($28)) {
   break;
  }
  $k = 0; //@line 574 "emscripten/stb_image.c"
  while(1) {
   $29 = $k; //@line 574 "emscripten/stb_image.c"
   $30 = $n; //@line 574 "emscripten/stb_image.c"
   $31 = ($29|0)<($30|0); //@line 574 "emscripten/stb_image.c"
   if (!($31)) {
    break;
   }
   $32 = $i; //@line 575 "emscripten/stb_image.c"
   $33 = $4; //@line 575 "emscripten/stb_image.c"
   $34 = Math_imul($32, $33)|0; //@line 575 "emscripten/stb_image.c"
   $35 = $k; //@line 575 "emscripten/stb_image.c"
   $36 = (($34) + ($35))|0; //@line 575 "emscripten/stb_image.c"
   $37 = $1; //@line 575 "emscripten/stb_image.c"
   $38 = (($37) + ($36<<2)|0); //@line 575 "emscripten/stb_image.c"
   $39 = +HEAPF32[$38>>2]; //@line 575 "emscripten/stb_image.c"
   $40 = +HEAPF32[26248>>2]; //@line 575 "emscripten/stb_image.c"
   $41 = $39 * $40; //@line 575 "emscripten/stb_image.c"
   $42 = $41; //@line 575 "emscripten/stb_image.c"
   $43 = +HEAPF32[26240>>2]; //@line 575 "emscripten/stb_image.c"
   $44 = $43; //@line 575 "emscripten/stb_image.c"
   $45 = (+Math_pow((+$42),(+$44))); //@line 575 "emscripten/stb_image.c"
   $46 = $45; //@line 575 "emscripten/stb_image.c"
   $47 = $46 * 255.0; //@line 575 "emscripten/stb_image.c"
   $48 = $47 + 0.5; //@line 575 "emscripten/stb_image.c"
   $z = $48; //@line 575 "emscripten/stb_image.c"
   $49 = $z; //@line 576 "emscripten/stb_image.c"
   $50 = $49 < 0.0; //@line 576 "emscripten/stb_image.c"
   if ($50) {
    $z = 0.0; //@line 576 "emscripten/stb_image.c"
   }
   $51 = $z; //@line 577 "emscripten/stb_image.c"
   $52 = $51 > 255.0; //@line 577 "emscripten/stb_image.c"
   if ($52) {
    $z = 255.0; //@line 577 "emscripten/stb_image.c"
   }
   $53 = $z; //@line 578 "emscripten/stb_image.c"
   $54 = (~~(($53))); //@line 578 "emscripten/stb_image.c"
   $55 = $54&255; //@line 578 "emscripten/stb_image.c"
   $56 = $i; //@line 578 "emscripten/stb_image.c"
   $57 = $4; //@line 578 "emscripten/stb_image.c"
   $58 = Math_imul($56, $57)|0; //@line 578 "emscripten/stb_image.c"
   $59 = $k; //@line 578 "emscripten/stb_image.c"
   $60 = (($58) + ($59))|0; //@line 578 "emscripten/stb_image.c"
   $61 = $output; //@line 578 "emscripten/stb_image.c"
   $62 = (($61) + ($60)|0); //@line 578 "emscripten/stb_image.c"
   HEAP8[$62>>0] = $55; //@line 578 "emscripten/stb_image.c"
   $63 = $k; //@line 574 "emscripten/stb_image.c"
   $64 = (($63) + 1)|0; //@line 574 "emscripten/stb_image.c"
   $k = $64; //@line 574 "emscripten/stb_image.c"
  }
  $65 = $k; //@line 580 "emscripten/stb_image.c"
  $66 = $4; //@line 580 "emscripten/stb_image.c"
  $67 = ($65|0)<($66|0); //@line 580 "emscripten/stb_image.c"
  if ($67) {
   $68 = $i; //@line 581 "emscripten/stb_image.c"
   $69 = $4; //@line 581 "emscripten/stb_image.c"
   $70 = Math_imul($68, $69)|0; //@line 581 "emscripten/stb_image.c"
   $71 = $k; //@line 581 "emscripten/stb_image.c"
   $72 = (($70) + ($71))|0; //@line 581 "emscripten/stb_image.c"
   $73 = $1; //@line 581 "emscripten/stb_image.c"
   $74 = (($73) + ($72<<2)|0); //@line 581 "emscripten/stb_image.c"
   $75 = +HEAPF32[$74>>2]; //@line 581 "emscripten/stb_image.c"
   $76 = $75 * 255.0; //@line 581 "emscripten/stb_image.c"
   $77 = $76 + 0.5; //@line 581 "emscripten/stb_image.c"
   $z1 = $77; //@line 581 "emscripten/stb_image.c"
   $78 = $z1; //@line 582 "emscripten/stb_image.c"
   $79 = $78 < 0.0; //@line 582 "emscripten/stb_image.c"
   if ($79) {
    $z1 = 0.0; //@line 582 "emscripten/stb_image.c"
   }
   $80 = $z1; //@line 583 "emscripten/stb_image.c"
   $81 = $80 > 255.0; //@line 583 "emscripten/stb_image.c"
   if ($81) {
    $z1 = 255.0; //@line 583 "emscripten/stb_image.c"
   }
   $82 = $z1; //@line 584 "emscripten/stb_image.c"
   $83 = (~~(($82))); //@line 584 "emscripten/stb_image.c"
   $84 = $83&255; //@line 584 "emscripten/stb_image.c"
   $85 = $i; //@line 584 "emscripten/stb_image.c"
   $86 = $4; //@line 584 "emscripten/stb_image.c"
   $87 = Math_imul($85, $86)|0; //@line 584 "emscripten/stb_image.c"
   $88 = $k; //@line 584 "emscripten/stb_image.c"
   $89 = (($87) + ($88))|0; //@line 584 "emscripten/stb_image.c"
   $90 = $output; //@line 584 "emscripten/stb_image.c"
   $91 = (($90) + ($89)|0); //@line 584 "emscripten/stb_image.c"
   HEAP8[$91>>0] = $84; //@line 584 "emscripten/stb_image.c"
  }
  $92 = $i; //@line 573 "emscripten/stb_image.c"
  $93 = (($92) + 1)|0; //@line 573 "emscripten/stb_image.c"
  $i = $93; //@line 573 "emscripten/stb_image.c"
 }
 $94 = $1; //@line 587 "emscripten/stb_image.c"
 _free($94); //@line 587 "emscripten/stb_image.c"
 $95 = $output; //@line 588 "emscripten/stb_image.c"
 $0 = $95; //@line 588 "emscripten/stb_image.c"
 $96 = $0; //@line 589 "emscripten/stb_image.c"
 STACKTOP = sp;return ($96|0); //@line 589 "emscripten/stb_image.c"
}
function __ZL13stbi_tga_testP4stbi($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $res = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $s;
 $1 = $0; //@line 2888 "emscripten/stb_image.c"
 $2 = (__ZL8tga_testP4stbi($1)|0); //@line 2888 "emscripten/stb_image.c"
 $res = $2; //@line 2888 "emscripten/stb_image.c"
 $3 = $0; //@line 2889 "emscripten/stb_image.c"
 __ZL11stbi_rewindP4stbi($3); //@line 2889 "emscripten/stb_image.c"
 $4 = $res; //@line 2890 "emscripten/stb_image.c"
 STACKTOP = sp;return ($4|0); //@line 2890 "emscripten/stb_image.c"
}
function __ZL13stbi_tga_loadP4stbiPiS1_S1_i($s,$x,$y,$comp,$req_comp) {
 $s = $s|0;
 $x = $x|0;
 $y = $y|0;
 $comp = $comp|0;
 $req_comp = $req_comp|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $s;
 $1 = $x;
 $2 = $y;
 $3 = $comp;
 $4 = $req_comp;
 $5 = $0; //@line 3121 "emscripten/stb_image.c"
 $6 = $1; //@line 3121 "emscripten/stb_image.c"
 $7 = $2; //@line 3121 "emscripten/stb_image.c"
 $8 = $3; //@line 3121 "emscripten/stb_image.c"
 $9 = $4; //@line 3121 "emscripten/stb_image.c"
 $10 = (__ZL8tga_loadP4stbiPiS1_S1_i($5,$6,$7,$8,$9)|0); //@line 3121 "emscripten/stb_image.c"
 STACKTOP = sp;return ($10|0); //@line 3121 "emscripten/stb_image.c"
}
function __ZL8tga_loadP4stbiPiS1_S1_i($s,$x,$y,$comp,$req_comp) {
 $s = $s|0;
 $x = $x|0;
 $y = $y|0;
 $comp = $comp|0;
 $req_comp = $req_comp|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $RLE_cmd = 0, $RLE_count = 0, $RLE_repeating = 0, $i = 0, $index1 = 0, $index2 = 0, $j = 0, $pal_idx = 0, $raw_data = 0, $read_next_pixel = 0, $temp = 0, $tga_bits_per_pixel = 0, $tga_data = 0, $tga_height = 0, $tga_image_type = 0, $tga_indexed = 0, $tga_inverted = 0;
 var $tga_is_RLE = 0, $tga_offset = 0, $tga_palette = 0, $tga_palette_bits = 0, $tga_palette_len = 0, $tga_palette_start = 0, $tga_width = 0, $tga_x_origin = 0, $tga_y_origin = 0, $trans_data = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0;
 $raw_data = sp + 128|0;
 $trans_data = sp + 124|0;
 $1 = $s;
 $2 = $x;
 $3 = $y;
 $4 = $comp;
 $5 = $req_comp;
 $6 = $1; //@line 2896 "emscripten/stb_image.c"
 $7 = (__ZL5get8uP4stbi($6)|0); //@line 2896 "emscripten/stb_image.c"
 $8 = $7&255; //@line 2896 "emscripten/stb_image.c"
 $tga_offset = $8; //@line 2896 "emscripten/stb_image.c"
 $9 = $1; //@line 2897 "emscripten/stb_image.c"
 $10 = (__ZL5get8uP4stbi($9)|0); //@line 2897 "emscripten/stb_image.c"
 $11 = $10&255; //@line 2897 "emscripten/stb_image.c"
 $tga_indexed = $11; //@line 2897 "emscripten/stb_image.c"
 $12 = $1; //@line 2898 "emscripten/stb_image.c"
 $13 = (__ZL5get8uP4stbi($12)|0); //@line 2898 "emscripten/stb_image.c"
 $14 = $13&255; //@line 2898 "emscripten/stb_image.c"
 $tga_image_type = $14; //@line 2898 "emscripten/stb_image.c"
 $tga_is_RLE = 0; //@line 2899 "emscripten/stb_image.c"
 $15 = $1; //@line 2900 "emscripten/stb_image.c"
 $16 = (__ZL7get16leP4stbi($15)|0); //@line 2900 "emscripten/stb_image.c"
 $tga_palette_start = $16; //@line 2900 "emscripten/stb_image.c"
 $17 = $1; //@line 2901 "emscripten/stb_image.c"
 $18 = (__ZL7get16leP4stbi($17)|0); //@line 2901 "emscripten/stb_image.c"
 $tga_palette_len = $18; //@line 2901 "emscripten/stb_image.c"
 $19 = $1; //@line 2902 "emscripten/stb_image.c"
 $20 = (__ZL5get8uP4stbi($19)|0); //@line 2902 "emscripten/stb_image.c"
 $21 = $20&255; //@line 2902 "emscripten/stb_image.c"
 $tga_palette_bits = $21; //@line 2902 "emscripten/stb_image.c"
 $22 = $1; //@line 2903 "emscripten/stb_image.c"
 $23 = (__ZL7get16leP4stbi($22)|0); //@line 2903 "emscripten/stb_image.c"
 $tga_x_origin = $23; //@line 2903 "emscripten/stb_image.c"
 $24 = $1; //@line 2904 "emscripten/stb_image.c"
 $25 = (__ZL7get16leP4stbi($24)|0); //@line 2904 "emscripten/stb_image.c"
 $tga_y_origin = $25; //@line 2904 "emscripten/stb_image.c"
 $26 = $1; //@line 2905 "emscripten/stb_image.c"
 $27 = (__ZL7get16leP4stbi($26)|0); //@line 2905 "emscripten/stb_image.c"
 $tga_width = $27; //@line 2905 "emscripten/stb_image.c"
 $28 = $1; //@line 2906 "emscripten/stb_image.c"
 $29 = (__ZL7get16leP4stbi($28)|0); //@line 2906 "emscripten/stb_image.c"
 $tga_height = $29; //@line 2906 "emscripten/stb_image.c"
 $30 = $1; //@line 2907 "emscripten/stb_image.c"
 $31 = (__ZL5get8uP4stbi($30)|0); //@line 2907 "emscripten/stb_image.c"
 $32 = $31&255; //@line 2907 "emscripten/stb_image.c"
 $tga_bits_per_pixel = $32; //@line 2907 "emscripten/stb_image.c"
 $33 = $1; //@line 2908 "emscripten/stb_image.c"
 $34 = (__ZL5get8uP4stbi($33)|0); //@line 2908 "emscripten/stb_image.c"
 $35 = $34&255; //@line 2908 "emscripten/stb_image.c"
 $tga_inverted = $35; //@line 2908 "emscripten/stb_image.c"
 $tga_palette = 0; //@line 2911 "emscripten/stb_image.c"
 $RLE_count = 0; //@line 2915 "emscripten/stb_image.c"
 $RLE_repeating = 0; //@line 2916 "emscripten/stb_image.c"
 $read_next_pixel = 1; //@line 2917 "emscripten/stb_image.c"
 $36 = $tga_image_type; //@line 2920 "emscripten/stb_image.c"
 $37 = ($36|0)>=(8); //@line 2920 "emscripten/stb_image.c"
 if ($37) {
  $38 = $tga_image_type; //@line 2922 "emscripten/stb_image.c"
  $39 = (($38) - 8)|0; //@line 2922 "emscripten/stb_image.c"
  $tga_image_type = $39; //@line 2922 "emscripten/stb_image.c"
  $tga_is_RLE = 1; //@line 2923 "emscripten/stb_image.c"
 }
 $40 = $tga_inverted; //@line 2926 "emscripten/stb_image.c"
 $41 = $40 >> 5; //@line 2926 "emscripten/stb_image.c"
 $42 = $41 & 1; //@line 2926 "emscripten/stb_image.c"
 $43 = (1 - ($42))|0; //@line 2926 "emscripten/stb_image.c"
 $tga_inverted = $43; //@line 2926 "emscripten/stb_image.c"
 $44 = $tga_width; //@line 2929 "emscripten/stb_image.c"
 $45 = ($44|0)<(1); //@line 2929 "emscripten/stb_image.c"
 do {
  if (!($45)) {
   $46 = $tga_height; //@line 2929 "emscripten/stb_image.c"
   $47 = ($46|0)<(1); //@line 2929 "emscripten/stb_image.c"
   if (!($47)) {
    $48 = $tga_image_type; //@line 2929 "emscripten/stb_image.c"
    $49 = ($48|0)<(1); //@line 2929 "emscripten/stb_image.c"
    if (!($49)) {
     $50 = $tga_image_type; //@line 2929 "emscripten/stb_image.c"
     $51 = ($50|0)>(3); //@line 2929 "emscripten/stb_image.c"
     if (!($51)) {
      $52 = $tga_bits_per_pixel; //@line 2929 "emscripten/stb_image.c"
      $53 = ($52|0)!=(8); //@line 2929 "emscripten/stb_image.c"
      if ($53) {
       $54 = $tga_bits_per_pixel; //@line 2929 "emscripten/stb_image.c"
       $55 = ($54|0)!=(16); //@line 2929 "emscripten/stb_image.c"
       if ($55) {
        $56 = $tga_bits_per_pixel; //@line 2929 "emscripten/stb_image.c"
        $57 = ($56|0)!=(24); //@line 2929 "emscripten/stb_image.c"
        if ($57) {
         $58 = $tga_bits_per_pixel; //@line 2929 "emscripten/stb_image.c"
         $59 = ($58|0)!=(32); //@line 2929 "emscripten/stb_image.c"
         if ($59) {
          break;
         }
        }
       }
      }
      $60 = $tga_indexed; //@line 2940 "emscripten/stb_image.c"
      $61 = ($60|0)!=(0); //@line 2940 "emscripten/stb_image.c"
      if ($61) {
       $62 = $tga_palette_bits; //@line 2942 "emscripten/stb_image.c"
       $tga_bits_per_pixel = $62; //@line 2942 "emscripten/stb_image.c"
      }
      $63 = $tga_width; //@line 2946 "emscripten/stb_image.c"
      $64 = $2; //@line 2946 "emscripten/stb_image.c"
      HEAP32[$64>>2] = $63; //@line 2946 "emscripten/stb_image.c"
      $65 = $tga_height; //@line 2947 "emscripten/stb_image.c"
      $66 = $3; //@line 2947 "emscripten/stb_image.c"
      HEAP32[$66>>2] = $65; //@line 2947 "emscripten/stb_image.c"
      $67 = $5; //@line 2948 "emscripten/stb_image.c"
      $68 = ($67|0)<(1); //@line 2948 "emscripten/stb_image.c"
      if ($68) {
       label = 16;
      } else {
       $69 = $5; //@line 2948 "emscripten/stb_image.c"
       $70 = ($69|0)>(4); //@line 2948 "emscripten/stb_image.c"
       if ($70) {
        label = 16;
       } else {
        $75 = $tga_bits_per_pixel; //@line 2956 "emscripten/stb_image.c"
        $76 = (($75|0) / 8)&-1; //@line 2956 "emscripten/stb_image.c"
        $77 = $4; //@line 2956 "emscripten/stb_image.c"
        HEAP32[$77>>2] = $76; //@line 2956 "emscripten/stb_image.c"
       }
      }
      if ((label|0) == 16) {
       $71 = $tga_bits_per_pixel; //@line 2951 "emscripten/stb_image.c"
       $72 = (($71|0) / 8)&-1; //@line 2951 "emscripten/stb_image.c"
       $5 = $72; //@line 2951 "emscripten/stb_image.c"
       $73 = $5; //@line 2952 "emscripten/stb_image.c"
       $74 = $4; //@line 2952 "emscripten/stb_image.c"
       HEAP32[$74>>2] = $73; //@line 2952 "emscripten/stb_image.c"
      }
      $78 = $tga_width; //@line 2958 "emscripten/stb_image.c"
      $79 = $tga_height; //@line 2958 "emscripten/stb_image.c"
      $80 = Math_imul($78, $79)|0; //@line 2958 "emscripten/stb_image.c"
      $81 = $5; //@line 2958 "emscripten/stb_image.c"
      $82 = Math_imul($80, $81)|0; //@line 2958 "emscripten/stb_image.c"
      $83 = (_malloc($82)|0); //@line 2958 "emscripten/stb_image.c"
      $tga_data = $83; //@line 2958 "emscripten/stb_image.c"
      $84 = $tga_data; //@line 2959 "emscripten/stb_image.c"
      $85 = ($84|0)!=(0|0); //@line 2959 "emscripten/stb_image.c"
      if (!($85)) {
       $86 = (__ZL1ePKc(26624)|0); //@line 2959 "emscripten/stb_image.c"
       $87 = ($86|0)!=(0); //@line 2959 "emscripten/stb_image.c"
       $88 = $87 ? 0 : 0; //@line 2959 "emscripten/stb_image.c"
       $89 = $88; //@line 2959 "emscripten/stb_image.c"
       $0 = $89; //@line 2959 "emscripten/stb_image.c"
       $362 = $0; //@line 3117 "emscripten/stb_image.c"
       STACKTOP = sp;return ($362|0); //@line 3117 "emscripten/stb_image.c"
      }
      $90 = $1; //@line 2962 "emscripten/stb_image.c"
      $91 = $tga_offset; //@line 2962 "emscripten/stb_image.c"
      __ZL4skipP4stbii($90,$91); //@line 2962 "emscripten/stb_image.c"
      $92 = $tga_indexed; //@line 2964 "emscripten/stb_image.c"
      $93 = ($92|0)!=(0); //@line 2964 "emscripten/stb_image.c"
      do {
       if ($93) {
        $94 = $1; //@line 2967 "emscripten/stb_image.c"
        $95 = $tga_palette_start; //@line 2967 "emscripten/stb_image.c"
        __ZL4skipP4stbii($94,$95); //@line 2967 "emscripten/stb_image.c"
        $96 = $tga_palette_len; //@line 2969 "emscripten/stb_image.c"
        $97 = $tga_palette_bits; //@line 2969 "emscripten/stb_image.c"
        $98 = Math_imul($96, $97)|0; //@line 2969 "emscripten/stb_image.c"
        $99 = (($98|0) / 8)&-1; //@line 2969 "emscripten/stb_image.c"
        $100 = (_malloc($99)|0); //@line 2969 "emscripten/stb_image.c"
        $tga_palette = $100; //@line 2969 "emscripten/stb_image.c"
        $101 = $tga_palette; //@line 2970 "emscripten/stb_image.c"
        $102 = ($101|0)!=(0|0); //@line 2970 "emscripten/stb_image.c"
        if (!($102)) {
         $103 = (__ZL1ePKc(26624)|0); //@line 2970 "emscripten/stb_image.c"
         $104 = ($103|0)!=(0); //@line 2970 "emscripten/stb_image.c"
         $105 = $104 ? 0 : 0; //@line 2970 "emscripten/stb_image.c"
         $106 = $105; //@line 2970 "emscripten/stb_image.c"
         $0 = $106; //@line 2970 "emscripten/stb_image.c"
         $362 = $0; //@line 3117 "emscripten/stb_image.c"
         STACKTOP = sp;return ($362|0); //@line 3117 "emscripten/stb_image.c"
        }
        $107 = $1; //@line 2971 "emscripten/stb_image.c"
        $108 = $tga_palette; //@line 2971 "emscripten/stb_image.c"
        $109 = $tga_palette_len; //@line 2971 "emscripten/stb_image.c"
        $110 = $tga_palette_bits; //@line 2971 "emscripten/stb_image.c"
        $111 = Math_imul($109, $110)|0; //@line 2971 "emscripten/stb_image.c"
        $112 = (($111|0) / 8)&-1; //@line 2971 "emscripten/stb_image.c"
        $113 = (__ZL4getnP4stbiPhi($107,$108,$112)|0); //@line 2971 "emscripten/stb_image.c"
        $114 = ($113|0)!=(0); //@line 2971 "emscripten/stb_image.c"
        if ($114) {
         break;
        }
        $115 = $tga_data; //@line 2972 "emscripten/stb_image.c"
        _free($115); //@line 2972 "emscripten/stb_image.c"
        $116 = $tga_palette; //@line 2973 "emscripten/stb_image.c"
        _free($116); //@line 2973 "emscripten/stb_image.c"
        $117 = (__ZL1ePKc(28864)|0); //@line 2974 "emscripten/stb_image.c"
        $118 = ($117|0)!=(0); //@line 2974 "emscripten/stb_image.c"
        $119 = $118 ? 0 : 0; //@line 2974 "emscripten/stb_image.c"
        $120 = $119; //@line 2974 "emscripten/stb_image.c"
        $0 = $120; //@line 2974 "emscripten/stb_image.c"
        $362 = $0; //@line 3117 "emscripten/stb_image.c"
        STACKTOP = sp;return ($362|0); //@line 3117 "emscripten/stb_image.c"
       }
      } while(0);
      $121 = (($trans_data) + 3|0); //@line 2978 "emscripten/stb_image.c"
      HEAP8[$121>>0] = 0; //@line 2978 "emscripten/stb_image.c"
      $122 = (($trans_data) + 2|0); //@line 2978 "emscripten/stb_image.c"
      HEAP8[$122>>0] = 0; //@line 2978 "emscripten/stb_image.c"
      $123 = (($trans_data) + 1|0); //@line 2978 "emscripten/stb_image.c"
      HEAP8[$123>>0] = 0; //@line 2978 "emscripten/stb_image.c"
      HEAP8[$trans_data>>0] = 0; //@line 2978 "emscripten/stb_image.c"
      $i = 0; //@line 2979 "emscripten/stb_image.c"
      while(1) {
       $124 = $i; //@line 2979 "emscripten/stb_image.c"
       $125 = $tga_width; //@line 2979 "emscripten/stb_image.c"
       $126 = $tga_height; //@line 2979 "emscripten/stb_image.c"
       $127 = Math_imul($125, $126)|0; //@line 2979 "emscripten/stb_image.c"
       $128 = ($124|0)<($127|0); //@line 2979 "emscripten/stb_image.c"
       if (!($128)) {
        break;
       }
       $129 = $tga_is_RLE; //@line 2982 "emscripten/stb_image.c"
       $130 = ($129|0)!=(0); //@line 2982 "emscripten/stb_image.c"
       if ($130) {
        $131 = $RLE_count; //@line 2984 "emscripten/stb_image.c"
        $132 = ($131|0)==(0); //@line 2984 "emscripten/stb_image.c"
        if ($132) {
         $133 = $1; //@line 2987 "emscripten/stb_image.c"
         $134 = (__ZL5get8uP4stbi($133)|0); //@line 2987 "emscripten/stb_image.c"
         $135 = $134&255; //@line 2987 "emscripten/stb_image.c"
         $RLE_cmd = $135; //@line 2987 "emscripten/stb_image.c"
         $136 = $RLE_cmd; //@line 2988 "emscripten/stb_image.c"
         $137 = $136 & 127; //@line 2988 "emscripten/stb_image.c"
         $138 = (1 + ($137))|0; //@line 2988 "emscripten/stb_image.c"
         $RLE_count = $138; //@line 2988 "emscripten/stb_image.c"
         $139 = $RLE_cmd; //@line 2989 "emscripten/stb_image.c"
         $140 = $139 >> 7; //@line 2989 "emscripten/stb_image.c"
         $RLE_repeating = $140; //@line 2989 "emscripten/stb_image.c"
         $read_next_pixel = 1; //@line 2990 "emscripten/stb_image.c"
        } else {
         $141 = $RLE_repeating; //@line 2991 "emscripten/stb_image.c"
         $142 = ($141|0)!=(0); //@line 2991 "emscripten/stb_image.c"
         if (!($142)) {
          $read_next_pixel = 1; //@line 2993 "emscripten/stb_image.c"
         }
        }
       } else {
        $read_next_pixel = 1; //@line 2997 "emscripten/stb_image.c"
       }
       $143 = $read_next_pixel; //@line 3000 "emscripten/stb_image.c"
       $144 = ($143|0)!=(0); //@line 3000 "emscripten/stb_image.c"
       if ($144) {
        $145 = $tga_indexed; //@line 3003 "emscripten/stb_image.c"
        $146 = ($145|0)!=(0); //@line 3003 "emscripten/stb_image.c"
        if ($146) {
         $147 = $1; //@line 3006 "emscripten/stb_image.c"
         $148 = (__ZL5get8uP4stbi($147)|0); //@line 3006 "emscripten/stb_image.c"
         $149 = $148&255; //@line 3006 "emscripten/stb_image.c"
         $pal_idx = $149; //@line 3006 "emscripten/stb_image.c"
         $150 = $pal_idx; //@line 3007 "emscripten/stb_image.c"
         $151 = $tga_palette_len; //@line 3007 "emscripten/stb_image.c"
         $152 = ($150|0)>=($151|0); //@line 3007 "emscripten/stb_image.c"
         if ($152) {
          $pal_idx = 0; //@line 3010 "emscripten/stb_image.c"
         }
         $153 = $tga_bits_per_pixel; //@line 3012 "emscripten/stb_image.c"
         $154 = (($153|0) / 8)&-1; //@line 3012 "emscripten/stb_image.c"
         $155 = $pal_idx; //@line 3012 "emscripten/stb_image.c"
         $156 = Math_imul($155, $154)|0; //@line 3012 "emscripten/stb_image.c"
         $pal_idx = $156; //@line 3012 "emscripten/stb_image.c"
         $j = 0; //@line 3013 "emscripten/stb_image.c"
         while(1) {
          $157 = $j; //@line 3013 "emscripten/stb_image.c"
          $158 = $157<<3; //@line 3013 "emscripten/stb_image.c"
          $159 = $tga_bits_per_pixel; //@line 3013 "emscripten/stb_image.c"
          $160 = ($158|0)<($159|0); //@line 3013 "emscripten/stb_image.c"
          if (!($160)) {
           break;
          }
          $161 = $pal_idx; //@line 3015 "emscripten/stb_image.c"
          $162 = $j; //@line 3015 "emscripten/stb_image.c"
          $163 = (($161) + ($162))|0; //@line 3015 "emscripten/stb_image.c"
          $164 = $tga_palette; //@line 3015 "emscripten/stb_image.c"
          $165 = (($164) + ($163)|0); //@line 3015 "emscripten/stb_image.c"
          $166 = HEAP8[$165>>0]|0; //@line 3015 "emscripten/stb_image.c"
          $167 = $j; //@line 3015 "emscripten/stb_image.c"
          $168 = (($raw_data) + ($167)|0); //@line 3015 "emscripten/stb_image.c"
          HEAP8[$168>>0] = $166; //@line 3015 "emscripten/stb_image.c"
          $169 = $j; //@line 3013 "emscripten/stb_image.c"
          $170 = (($169) + 1)|0; //@line 3013 "emscripten/stb_image.c"
          $j = $170; //@line 3013 "emscripten/stb_image.c"
         }
        } else {
         $j = 0; //@line 3020 "emscripten/stb_image.c"
         while(1) {
          $171 = $j; //@line 3020 "emscripten/stb_image.c"
          $172 = $171<<3; //@line 3020 "emscripten/stb_image.c"
          $173 = $tga_bits_per_pixel; //@line 3020 "emscripten/stb_image.c"
          $174 = ($172|0)<($173|0); //@line 3020 "emscripten/stb_image.c"
          if (!($174)) {
           break;
          }
          $175 = $1; //@line 3022 "emscripten/stb_image.c"
          $176 = (__ZL5get8uP4stbi($175)|0); //@line 3022 "emscripten/stb_image.c"
          $177 = $j; //@line 3022 "emscripten/stb_image.c"
          $178 = (($raw_data) + ($177)|0); //@line 3022 "emscripten/stb_image.c"
          HEAP8[$178>>0] = $176; //@line 3022 "emscripten/stb_image.c"
          $179 = $j; //@line 3020 "emscripten/stb_image.c"
          $180 = (($179) + 1)|0; //@line 3020 "emscripten/stb_image.c"
          $j = $180; //@line 3020 "emscripten/stb_image.c"
         }
        }
        $181 = $tga_bits_per_pixel; //@line 3026 "emscripten/stb_image.c"
        if ((($181|0) == 8)) {
         $182 = HEAP8[$raw_data>>0]|0; //@line 3030 "emscripten/stb_image.c"
         HEAP8[$trans_data>>0] = $182; //@line 3030 "emscripten/stb_image.c"
         $183 = HEAP8[$raw_data>>0]|0; //@line 3031 "emscripten/stb_image.c"
         $184 = (($trans_data) + 1|0); //@line 3031 "emscripten/stb_image.c"
         HEAP8[$184>>0] = $183; //@line 3031 "emscripten/stb_image.c"
         $185 = HEAP8[$raw_data>>0]|0; //@line 3032 "emscripten/stb_image.c"
         $186 = (($trans_data) + 2|0); //@line 3032 "emscripten/stb_image.c"
         HEAP8[$186>>0] = $185; //@line 3032 "emscripten/stb_image.c"
         $187 = (($trans_data) + 3|0); //@line 3033 "emscripten/stb_image.c"
         HEAP8[$187>>0] = -1; //@line 3033 "emscripten/stb_image.c"
        } else if ((($181|0) == 24)) {
         $196 = (($raw_data) + 2|0); //@line 3044 "emscripten/stb_image.c"
         $197 = HEAP8[$196>>0]|0; //@line 3044 "emscripten/stb_image.c"
         HEAP8[$trans_data>>0] = $197; //@line 3044 "emscripten/stb_image.c"
         $198 = (($raw_data) + 1|0); //@line 3045 "emscripten/stb_image.c"
         $199 = HEAP8[$198>>0]|0; //@line 3045 "emscripten/stb_image.c"
         $200 = (($trans_data) + 1|0); //@line 3045 "emscripten/stb_image.c"
         HEAP8[$200>>0] = $199; //@line 3045 "emscripten/stb_image.c"
         $201 = HEAP8[$raw_data>>0]|0; //@line 3046 "emscripten/stb_image.c"
         $202 = (($trans_data) + 2|0); //@line 3046 "emscripten/stb_image.c"
         HEAP8[$202>>0] = $201; //@line 3046 "emscripten/stb_image.c"
         $203 = (($trans_data) + 3|0); //@line 3047 "emscripten/stb_image.c"
         HEAP8[$203>>0] = -1; //@line 3047 "emscripten/stb_image.c"
        } else if ((($181|0) == 32)) {
         $204 = (($raw_data) + 2|0); //@line 3051 "emscripten/stb_image.c"
         $205 = HEAP8[$204>>0]|0; //@line 3051 "emscripten/stb_image.c"
         HEAP8[$trans_data>>0] = $205; //@line 3051 "emscripten/stb_image.c"
         $206 = (($raw_data) + 1|0); //@line 3052 "emscripten/stb_image.c"
         $207 = HEAP8[$206>>0]|0; //@line 3052 "emscripten/stb_image.c"
         $208 = (($trans_data) + 1|0); //@line 3052 "emscripten/stb_image.c"
         HEAP8[$208>>0] = $207; //@line 3052 "emscripten/stb_image.c"
         $209 = HEAP8[$raw_data>>0]|0; //@line 3053 "emscripten/stb_image.c"
         $210 = (($trans_data) + 2|0); //@line 3053 "emscripten/stb_image.c"
         HEAP8[$210>>0] = $209; //@line 3053 "emscripten/stb_image.c"
         $211 = (($raw_data) + 3|0); //@line 3054 "emscripten/stb_image.c"
         $212 = HEAP8[$211>>0]|0; //@line 3054 "emscripten/stb_image.c"
         $213 = (($trans_data) + 3|0); //@line 3054 "emscripten/stb_image.c"
         HEAP8[$213>>0] = $212; //@line 3054 "emscripten/stb_image.c"
        } else if ((($181|0) == 16)) {
         $188 = HEAP8[$raw_data>>0]|0; //@line 3037 "emscripten/stb_image.c"
         HEAP8[$trans_data>>0] = $188; //@line 3037 "emscripten/stb_image.c"
         $189 = HEAP8[$raw_data>>0]|0; //@line 3038 "emscripten/stb_image.c"
         $190 = (($trans_data) + 1|0); //@line 3038 "emscripten/stb_image.c"
         HEAP8[$190>>0] = $189; //@line 3038 "emscripten/stb_image.c"
         $191 = HEAP8[$raw_data>>0]|0; //@line 3039 "emscripten/stb_image.c"
         $192 = (($trans_data) + 2|0); //@line 3039 "emscripten/stb_image.c"
         HEAP8[$192>>0] = $191; //@line 3039 "emscripten/stb_image.c"
         $193 = (($raw_data) + 1|0); //@line 3040 "emscripten/stb_image.c"
         $194 = HEAP8[$193>>0]|0; //@line 3040 "emscripten/stb_image.c"
         $195 = (($trans_data) + 3|0); //@line 3040 "emscripten/stb_image.c"
         HEAP8[$195>>0] = $194; //@line 3040 "emscripten/stb_image.c"
        }
        $read_next_pixel = 0; //@line 3058 "emscripten/stb_image.c"
       }
       $214 = $5; //@line 3061 "emscripten/stb_image.c"
       if ((($214|0) == 3)) {
        $253 = HEAP8[$trans_data>>0]|0; //@line 3074 "emscripten/stb_image.c"
        $254 = $i; //@line 3074 "emscripten/stb_image.c"
        $255 = $5; //@line 3074 "emscripten/stb_image.c"
        $256 = Math_imul($254, $255)|0; //@line 3074 "emscripten/stb_image.c"
        $257 = (($256) + 0)|0; //@line 3074 "emscripten/stb_image.c"
        $258 = $tga_data; //@line 3074 "emscripten/stb_image.c"
        $259 = (($258) + ($257)|0); //@line 3074 "emscripten/stb_image.c"
        HEAP8[$259>>0] = $253; //@line 3074 "emscripten/stb_image.c"
        $260 = (($trans_data) + 1|0); //@line 3075 "emscripten/stb_image.c"
        $261 = HEAP8[$260>>0]|0; //@line 3075 "emscripten/stb_image.c"
        $262 = $i; //@line 3075 "emscripten/stb_image.c"
        $263 = $5; //@line 3075 "emscripten/stb_image.c"
        $264 = Math_imul($262, $263)|0; //@line 3075 "emscripten/stb_image.c"
        $265 = (($264) + 1)|0; //@line 3075 "emscripten/stb_image.c"
        $266 = $tga_data; //@line 3075 "emscripten/stb_image.c"
        $267 = (($266) + ($265)|0); //@line 3075 "emscripten/stb_image.c"
        HEAP8[$267>>0] = $261; //@line 3075 "emscripten/stb_image.c"
        $268 = (($trans_data) + 2|0); //@line 3076 "emscripten/stb_image.c"
        $269 = HEAP8[$268>>0]|0; //@line 3076 "emscripten/stb_image.c"
        $270 = $i; //@line 3076 "emscripten/stb_image.c"
        $271 = $5; //@line 3076 "emscripten/stb_image.c"
        $272 = Math_imul($270, $271)|0; //@line 3076 "emscripten/stb_image.c"
        $273 = (($272) + 2)|0; //@line 3076 "emscripten/stb_image.c"
        $274 = $tga_data; //@line 3076 "emscripten/stb_image.c"
        $275 = (($274) + ($273)|0); //@line 3076 "emscripten/stb_image.c"
        HEAP8[$275>>0] = $269; //@line 3076 "emscripten/stb_image.c"
       } else if ((($214|0) == 1)) {
        $215 = HEAP8[$trans_data>>0]|0; //@line 3065 "emscripten/stb_image.c"
        $216 = $215&255; //@line 3065 "emscripten/stb_image.c"
        $217 = (($trans_data) + 1|0); //@line 3065 "emscripten/stb_image.c"
        $218 = HEAP8[$217>>0]|0; //@line 3065 "emscripten/stb_image.c"
        $219 = $218&255; //@line 3065 "emscripten/stb_image.c"
        $220 = (($trans_data) + 2|0); //@line 3065 "emscripten/stb_image.c"
        $221 = HEAP8[$220>>0]|0; //@line 3065 "emscripten/stb_image.c"
        $222 = $221&255; //@line 3065 "emscripten/stb_image.c"
        $223 = (__ZL9compute_yiii($216,$219,$222)|0); //@line 3065 "emscripten/stb_image.c"
        $224 = $i; //@line 3065 "emscripten/stb_image.c"
        $225 = $5; //@line 3065 "emscripten/stb_image.c"
        $226 = Math_imul($224, $225)|0; //@line 3065 "emscripten/stb_image.c"
        $227 = (($226) + 0)|0; //@line 3065 "emscripten/stb_image.c"
        $228 = $tga_data; //@line 3065 "emscripten/stb_image.c"
        $229 = (($228) + ($227)|0); //@line 3065 "emscripten/stb_image.c"
        HEAP8[$229>>0] = $223; //@line 3065 "emscripten/stb_image.c"
       } else if ((($214|0) == 4)) {
        $276 = HEAP8[$trans_data>>0]|0; //@line 3080 "emscripten/stb_image.c"
        $277 = $i; //@line 3080 "emscripten/stb_image.c"
        $278 = $5; //@line 3080 "emscripten/stb_image.c"
        $279 = Math_imul($277, $278)|0; //@line 3080 "emscripten/stb_image.c"
        $280 = (($279) + 0)|0; //@line 3080 "emscripten/stb_image.c"
        $281 = $tga_data; //@line 3080 "emscripten/stb_image.c"
        $282 = (($281) + ($280)|0); //@line 3080 "emscripten/stb_image.c"
        HEAP8[$282>>0] = $276; //@line 3080 "emscripten/stb_image.c"
        $283 = (($trans_data) + 1|0); //@line 3081 "emscripten/stb_image.c"
        $284 = HEAP8[$283>>0]|0; //@line 3081 "emscripten/stb_image.c"
        $285 = $i; //@line 3081 "emscripten/stb_image.c"
        $286 = $5; //@line 3081 "emscripten/stb_image.c"
        $287 = Math_imul($285, $286)|0; //@line 3081 "emscripten/stb_image.c"
        $288 = (($287) + 1)|0; //@line 3081 "emscripten/stb_image.c"
        $289 = $tga_data; //@line 3081 "emscripten/stb_image.c"
        $290 = (($289) + ($288)|0); //@line 3081 "emscripten/stb_image.c"
        HEAP8[$290>>0] = $284; //@line 3081 "emscripten/stb_image.c"
        $291 = (($trans_data) + 2|0); //@line 3082 "emscripten/stb_image.c"
        $292 = HEAP8[$291>>0]|0; //@line 3082 "emscripten/stb_image.c"
        $293 = $i; //@line 3082 "emscripten/stb_image.c"
        $294 = $5; //@line 3082 "emscripten/stb_image.c"
        $295 = Math_imul($293, $294)|0; //@line 3082 "emscripten/stb_image.c"
        $296 = (($295) + 2)|0; //@line 3082 "emscripten/stb_image.c"
        $297 = $tga_data; //@line 3082 "emscripten/stb_image.c"
        $298 = (($297) + ($296)|0); //@line 3082 "emscripten/stb_image.c"
        HEAP8[$298>>0] = $292; //@line 3082 "emscripten/stb_image.c"
        $299 = (($trans_data) + 3|0); //@line 3083 "emscripten/stb_image.c"
        $300 = HEAP8[$299>>0]|0; //@line 3083 "emscripten/stb_image.c"
        $301 = $i; //@line 3083 "emscripten/stb_image.c"
        $302 = $5; //@line 3083 "emscripten/stb_image.c"
        $303 = Math_imul($301, $302)|0; //@line 3083 "emscripten/stb_image.c"
        $304 = (($303) + 3)|0; //@line 3083 "emscripten/stb_image.c"
        $305 = $tga_data; //@line 3083 "emscripten/stb_image.c"
        $306 = (($305) + ($304)|0); //@line 3083 "emscripten/stb_image.c"
        HEAP8[$306>>0] = $300; //@line 3083 "emscripten/stb_image.c"
       } else if ((($214|0) == 2)) {
        $230 = HEAP8[$trans_data>>0]|0; //@line 3069 "emscripten/stb_image.c"
        $231 = $230&255; //@line 3069 "emscripten/stb_image.c"
        $232 = (($trans_data) + 1|0); //@line 3069 "emscripten/stb_image.c"
        $233 = HEAP8[$232>>0]|0; //@line 3069 "emscripten/stb_image.c"
        $234 = $233&255; //@line 3069 "emscripten/stb_image.c"
        $235 = (($trans_data) + 2|0); //@line 3069 "emscripten/stb_image.c"
        $236 = HEAP8[$235>>0]|0; //@line 3069 "emscripten/stb_image.c"
        $237 = $236&255; //@line 3069 "emscripten/stb_image.c"
        $238 = (__ZL9compute_yiii($231,$234,$237)|0); //@line 3069 "emscripten/stb_image.c"
        $239 = $i; //@line 3069 "emscripten/stb_image.c"
        $240 = $5; //@line 3069 "emscripten/stb_image.c"
        $241 = Math_imul($239, $240)|0; //@line 3069 "emscripten/stb_image.c"
        $242 = (($241) + 0)|0; //@line 3069 "emscripten/stb_image.c"
        $243 = $tga_data; //@line 3069 "emscripten/stb_image.c"
        $244 = (($243) + ($242)|0); //@line 3069 "emscripten/stb_image.c"
        HEAP8[$244>>0] = $238; //@line 3069 "emscripten/stb_image.c"
        $245 = (($trans_data) + 3|0); //@line 3070 "emscripten/stb_image.c"
        $246 = HEAP8[$245>>0]|0; //@line 3070 "emscripten/stb_image.c"
        $247 = $i; //@line 3070 "emscripten/stb_image.c"
        $248 = $5; //@line 3070 "emscripten/stb_image.c"
        $249 = Math_imul($247, $248)|0; //@line 3070 "emscripten/stb_image.c"
        $250 = (($249) + 1)|0; //@line 3070 "emscripten/stb_image.c"
        $251 = $tga_data; //@line 3070 "emscripten/stb_image.c"
        $252 = (($251) + ($250)|0); //@line 3070 "emscripten/stb_image.c"
        HEAP8[$252>>0] = $246; //@line 3070 "emscripten/stb_image.c"
       }
       $307 = $RLE_count; //@line 3087 "emscripten/stb_image.c"
       $308 = (($307) + -1)|0; //@line 3087 "emscripten/stb_image.c"
       $RLE_count = $308; //@line 3087 "emscripten/stb_image.c"
       $309 = $i; //@line 2979 "emscripten/stb_image.c"
       $310 = (($309) + 1)|0; //@line 2979 "emscripten/stb_image.c"
       $i = $310; //@line 2979 "emscripten/stb_image.c"
      }
      $311 = $tga_inverted; //@line 3090 "emscripten/stb_image.c"
      $312 = ($311|0)!=(0); //@line 3090 "emscripten/stb_image.c"
      if ($312) {
       $j = 0; //@line 3092 "emscripten/stb_image.c"
       while(1) {
        $313 = $j; //@line 3092 "emscripten/stb_image.c"
        $314 = $313<<1; //@line 3092 "emscripten/stb_image.c"
        $315 = $tga_height; //@line 3092 "emscripten/stb_image.c"
        $316 = ($314|0)<($315|0); //@line 3092 "emscripten/stb_image.c"
        if (!($316)) {
         break;
        }
        $317 = $j; //@line 3094 "emscripten/stb_image.c"
        $318 = $tga_width; //@line 3094 "emscripten/stb_image.c"
        $319 = Math_imul($317, $318)|0; //@line 3094 "emscripten/stb_image.c"
        $320 = $5; //@line 3094 "emscripten/stb_image.c"
        $321 = Math_imul($319, $320)|0; //@line 3094 "emscripten/stb_image.c"
        $index1 = $321; //@line 3094 "emscripten/stb_image.c"
        $322 = $tga_height; //@line 3095 "emscripten/stb_image.c"
        $323 = (($322) - 1)|0; //@line 3095 "emscripten/stb_image.c"
        $324 = $j; //@line 3095 "emscripten/stb_image.c"
        $325 = (($323) - ($324))|0; //@line 3095 "emscripten/stb_image.c"
        $326 = $tga_width; //@line 3095 "emscripten/stb_image.c"
        $327 = Math_imul($325, $326)|0; //@line 3095 "emscripten/stb_image.c"
        $328 = $5; //@line 3095 "emscripten/stb_image.c"
        $329 = Math_imul($327, $328)|0; //@line 3095 "emscripten/stb_image.c"
        $index2 = $329; //@line 3095 "emscripten/stb_image.c"
        $330 = $tga_width; //@line 3096 "emscripten/stb_image.c"
        $331 = $5; //@line 3096 "emscripten/stb_image.c"
        $332 = Math_imul($330, $331)|0; //@line 3096 "emscripten/stb_image.c"
        $i = $332; //@line 3096 "emscripten/stb_image.c"
        while(1) {
         $333 = $i; //@line 3096 "emscripten/stb_image.c"
         $334 = ($333|0)>(0); //@line 3096 "emscripten/stb_image.c"
         if (!($334)) {
          break;
         }
         $335 = $index1; //@line 3098 "emscripten/stb_image.c"
         $336 = $tga_data; //@line 3098 "emscripten/stb_image.c"
         $337 = (($336) + ($335)|0); //@line 3098 "emscripten/stb_image.c"
         $338 = HEAP8[$337>>0]|0; //@line 3098 "emscripten/stb_image.c"
         $temp = $338; //@line 3098 "emscripten/stb_image.c"
         $339 = $index2; //@line 3099 "emscripten/stb_image.c"
         $340 = $tga_data; //@line 3099 "emscripten/stb_image.c"
         $341 = (($340) + ($339)|0); //@line 3099 "emscripten/stb_image.c"
         $342 = HEAP8[$341>>0]|0; //@line 3099 "emscripten/stb_image.c"
         $343 = $index1; //@line 3099 "emscripten/stb_image.c"
         $344 = $tga_data; //@line 3099 "emscripten/stb_image.c"
         $345 = (($344) + ($343)|0); //@line 3099 "emscripten/stb_image.c"
         HEAP8[$345>>0] = $342; //@line 3099 "emscripten/stb_image.c"
         $346 = $temp; //@line 3100 "emscripten/stb_image.c"
         $347 = $index2; //@line 3100 "emscripten/stb_image.c"
         $348 = $tga_data; //@line 3100 "emscripten/stb_image.c"
         $349 = (($348) + ($347)|0); //@line 3100 "emscripten/stb_image.c"
         HEAP8[$349>>0] = $346; //@line 3100 "emscripten/stb_image.c"
         $350 = $index1; //@line 3101 "emscripten/stb_image.c"
         $351 = (($350) + 1)|0; //@line 3101 "emscripten/stb_image.c"
         $index1 = $351; //@line 3101 "emscripten/stb_image.c"
         $352 = $index2; //@line 3102 "emscripten/stb_image.c"
         $353 = (($352) + 1)|0; //@line 3102 "emscripten/stb_image.c"
         $index2 = $353; //@line 3102 "emscripten/stb_image.c"
         $354 = $i; //@line 3096 "emscripten/stb_image.c"
         $355 = (($354) + -1)|0; //@line 3096 "emscripten/stb_image.c"
         $i = $355; //@line 3096 "emscripten/stb_image.c"
        }
        $356 = $j; //@line 3092 "emscripten/stb_image.c"
        $357 = (($356) + 1)|0; //@line 3092 "emscripten/stb_image.c"
        $j = $357; //@line 3092 "emscripten/stb_image.c"
       }
      }
      $358 = $tga_palette; //@line 3107 "emscripten/stb_image.c"
      $359 = ($358|0)!=(0|0); //@line 3107 "emscripten/stb_image.c"
      if ($359) {
       $360 = $tga_palette; //@line 3109 "emscripten/stb_image.c"
       _free($360); //@line 3109 "emscripten/stb_image.c"
      }
      $tga_y_origin = 0; //@line 3113 "emscripten/stb_image.c"
      $tga_x_origin = 0; //@line 3113 "emscripten/stb_image.c"
      $tga_palette_bits = 0; //@line 3113 "emscripten/stb_image.c"
      $tga_palette_len = 0; //@line 3113 "emscripten/stb_image.c"
      $tga_palette_start = 0; //@line 3113 "emscripten/stb_image.c"
      $361 = $tga_data; //@line 3116 "emscripten/stb_image.c"
      $0 = $361; //@line 3116 "emscripten/stb_image.c"
      $362 = $0; //@line 3117 "emscripten/stb_image.c"
      STACKTOP = sp;return ($362|0); //@line 3117 "emscripten/stb_image.c"
     }
    }
   }
  }
 } while(0);
 $0 = 0; //@line 2936 "emscripten/stb_image.c"
 $362 = $0; //@line 3117 "emscripten/stb_image.c"
 STACKTOP = sp;return ($362|0); //@line 3117 "emscripten/stb_image.c"
}
function __ZL9compute_yiii($r,$g,$b) {
 $r = $r|0;
 $g = $g|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $r;
 $1 = $g;
 $2 = $b;
 $3 = $0; //@line 500 "emscripten/stb_image.c"
 $4 = ($3*77)|0; //@line 500 "emscripten/stb_image.c"
 $5 = $1; //@line 500 "emscripten/stb_image.c"
 $6 = ($5*150)|0; //@line 500 "emscripten/stb_image.c"
 $7 = (($4) + ($6))|0; //@line 500 "emscripten/stb_image.c"
 $8 = $2; //@line 500 "emscripten/stb_image.c"
 $9 = ($8*29)|0; //@line 500 "emscripten/stb_image.c"
 $10 = (($7) + ($9))|0; //@line 500 "emscripten/stb_image.c"
 $11 = $10 >> 8; //@line 500 "emscripten/stb_image.c"
 $12 = $11&255; //@line 500 "emscripten/stb_image.c"
 STACKTOP = sp;return ($12|0); //@line 500 "emscripten/stb_image.c"
}
function __ZL8tga_testP4stbi($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sz = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $s;
 $2 = $1; //@line 2869 "emscripten/stb_image.c"
 (__ZL5get8uP4stbi($2)|0); //@line 2869 "emscripten/stb_image.c"
 $3 = $1; //@line 2870 "emscripten/stb_image.c"
 $4 = (__ZL5get8uP4stbi($3)|0); //@line 2870 "emscripten/stb_image.c"
 $5 = $4&255; //@line 2870 "emscripten/stb_image.c"
 $sz = $5; //@line 2870 "emscripten/stb_image.c"
 $6 = $sz; //@line 2871 "emscripten/stb_image.c"
 $7 = ($6|0)>(1); //@line 2871 "emscripten/stb_image.c"
 if ($7) {
  $0 = 0; //@line 2871 "emscripten/stb_image.c"
  $44 = $0; //@line 2883 "emscripten/stb_image.c"
  STACKTOP = sp;return ($44|0); //@line 2883 "emscripten/stb_image.c"
 }
 $8 = $1; //@line 2872 "emscripten/stb_image.c"
 $9 = (__ZL5get8uP4stbi($8)|0); //@line 2872 "emscripten/stb_image.c"
 $10 = $9&255; //@line 2872 "emscripten/stb_image.c"
 $sz = $10; //@line 2872 "emscripten/stb_image.c"
 $11 = $sz; //@line 2873 "emscripten/stb_image.c"
 $12 = ($11|0)!=(1); //@line 2873 "emscripten/stb_image.c"
 if ($12) {
  $13 = $sz; //@line 2873 "emscripten/stb_image.c"
  $14 = ($13|0)!=(2); //@line 2873 "emscripten/stb_image.c"
  if ($14) {
   $15 = $sz; //@line 2873 "emscripten/stb_image.c"
   $16 = ($15|0)!=(3); //@line 2873 "emscripten/stb_image.c"
   if ($16) {
    $17 = $sz; //@line 2873 "emscripten/stb_image.c"
    $18 = ($17|0)!=(9); //@line 2873 "emscripten/stb_image.c"
    if ($18) {
     $19 = $sz; //@line 2873 "emscripten/stb_image.c"
     $20 = ($19|0)!=(10); //@line 2873 "emscripten/stb_image.c"
     if ($20) {
      $21 = $sz; //@line 2873 "emscripten/stb_image.c"
      $22 = ($21|0)!=(11); //@line 2873 "emscripten/stb_image.c"
      if ($22) {
       $0 = 0; //@line 2873 "emscripten/stb_image.c"
       $44 = $0; //@line 2883 "emscripten/stb_image.c"
       STACKTOP = sp;return ($44|0); //@line 2883 "emscripten/stb_image.c"
      }
     }
    }
   }
  }
 }
 $23 = $1; //@line 2874 "emscripten/stb_image.c"
 (__ZL5get16P4stbi($23)|0); //@line 2874 "emscripten/stb_image.c"
 $24 = $1; //@line 2875 "emscripten/stb_image.c"
 (__ZL5get16P4stbi($24)|0); //@line 2875 "emscripten/stb_image.c"
 $25 = $1; //@line 2876 "emscripten/stb_image.c"
 (__ZL4get8P4stbi($25)|0); //@line 2876 "emscripten/stb_image.c"
 $26 = $1; //@line 2877 "emscripten/stb_image.c"
 (__ZL5get16P4stbi($26)|0); //@line 2877 "emscripten/stb_image.c"
 $27 = $1; //@line 2878 "emscripten/stb_image.c"
 (__ZL5get16P4stbi($27)|0); //@line 2878 "emscripten/stb_image.c"
 $28 = $1; //@line 2879 "emscripten/stb_image.c"
 $29 = (__ZL5get16P4stbi($28)|0); //@line 2879 "emscripten/stb_image.c"
 $30 = ($29|0)<(1); //@line 2879 "emscripten/stb_image.c"
 if ($30) {
  $0 = 0; //@line 2879 "emscripten/stb_image.c"
  $44 = $0; //@line 2883 "emscripten/stb_image.c"
  STACKTOP = sp;return ($44|0); //@line 2883 "emscripten/stb_image.c"
 }
 $31 = $1; //@line 2880 "emscripten/stb_image.c"
 $32 = (__ZL5get16P4stbi($31)|0); //@line 2880 "emscripten/stb_image.c"
 $33 = ($32|0)<(1); //@line 2880 "emscripten/stb_image.c"
 if ($33) {
  $0 = 0; //@line 2880 "emscripten/stb_image.c"
  $44 = $0; //@line 2883 "emscripten/stb_image.c"
  STACKTOP = sp;return ($44|0); //@line 2883 "emscripten/stb_image.c"
 }
 $34 = $1; //@line 2881 "emscripten/stb_image.c"
 $35 = (__ZL4get8P4stbi($34)|0); //@line 2881 "emscripten/stb_image.c"
 $sz = $35; //@line 2881 "emscripten/stb_image.c"
 $36 = $sz; //@line 2882 "emscripten/stb_image.c"
 $37 = ($36|0)!=(8); //@line 2882 "emscripten/stb_image.c"
 if ($37) {
  $38 = $sz; //@line 2882 "emscripten/stb_image.c"
  $39 = ($38|0)!=(16); //@line 2882 "emscripten/stb_image.c"
  if ($39) {
   $40 = $sz; //@line 2882 "emscripten/stb_image.c"
   $41 = ($40|0)!=(24); //@line 2882 "emscripten/stb_image.c"
   if ($41) {
    $42 = $sz; //@line 2882 "emscripten/stb_image.c"
    $43 = ($42|0)!=(32); //@line 2882 "emscripten/stb_image.c"
    if ($43) {
     $0 = 0; //@line 2882 "emscripten/stb_image.c"
     $44 = $0; //@line 2883 "emscripten/stb_image.c"
     STACKTOP = sp;return ($44|0); //@line 2883 "emscripten/stb_image.c"
    }
   }
  }
 }
 $0 = 1; //@line 2883 "emscripten/stb_image.c"
 $44 = $0; //@line 2883 "emscripten/stb_image.c"
 STACKTOP = sp;return ($44|0); //@line 2883 "emscripten/stb_image.c"
}
function __ZL8pic_loadP4stbiPiS1_S1_i($s,$px,$py,$comp,$req_comp) {
 $s = $s|0;
 $px = $px|0;
 $py = $py|0;
 $comp = $comp|0;
 $req_comp = $req_comp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $result = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $1 = $s;
 $2 = $px;
 $3 = $py;
 $4 = $comp;
 $5 = $req_comp;
 $i = 0; //@line 3481 "emscripten/stb_image.c"
 while(1) {
  $6 = $i; //@line 3481 "emscripten/stb_image.c"
  $7 = ($6|0)<(92); //@line 3481 "emscripten/stb_image.c"
  if (!($7)) {
   break;
  }
  $8 = $1; //@line 3482 "emscripten/stb_image.c"
  (__ZL4get8P4stbi($8)|0); //@line 3482 "emscripten/stb_image.c"
  $9 = $i; //@line 3481 "emscripten/stb_image.c"
  $10 = (($9) + 1)|0; //@line 3481 "emscripten/stb_image.c"
  $i = $10; //@line 3481 "emscripten/stb_image.c"
 }
 $11 = $1; //@line 3484 "emscripten/stb_image.c"
 $12 = (__ZL5get16P4stbi($11)|0); //@line 3484 "emscripten/stb_image.c"
 $x = $12; //@line 3484 "emscripten/stb_image.c"
 $13 = $1; //@line 3485 "emscripten/stb_image.c"
 $14 = (__ZL5get16P4stbi($13)|0); //@line 3485 "emscripten/stb_image.c"
 $y = $14; //@line 3485 "emscripten/stb_image.c"
 $15 = $1; //@line 3486 "emscripten/stb_image.c"
 $16 = (__ZL6at_eofP4stbi($15)|0); //@line 3486 "emscripten/stb_image.c"
 $17 = ($16|0)!=(0); //@line 3486 "emscripten/stb_image.c"
 if ($17) {
  $18 = (__ZL1ePKc(28880)|0); //@line 3486 "emscripten/stb_image.c"
  $19 = ($18|0)!=(0); //@line 3486 "emscripten/stb_image.c"
  $20 = $19 ? 0 : 0; //@line 3486 "emscripten/stb_image.c"
  $21 = $20; //@line 3486 "emscripten/stb_image.c"
  $0 = $21; //@line 3486 "emscripten/stb_image.c"
  $65 = $0; //@line 3507 "emscripten/stb_image.c"
  STACKTOP = sp;return ($65|0); //@line 3507 "emscripten/stb_image.c"
 }
 $22 = $x; //@line 3487 "emscripten/stb_image.c"
 $23 = (268435456 / ($22|0))&-1; //@line 3487 "emscripten/stb_image.c"
 $24 = $y; //@line 3487 "emscripten/stb_image.c"
 $25 = ($23|0)<($24|0); //@line 3487 "emscripten/stb_image.c"
 if ($25) {
  $26 = (__ZL1ePKc(26384)|0); //@line 3487 "emscripten/stb_image.c"
  $27 = ($26|0)!=(0); //@line 3487 "emscripten/stb_image.c"
  $28 = $27 ? 0 : 0; //@line 3487 "emscripten/stb_image.c"
  $29 = $28; //@line 3487 "emscripten/stb_image.c"
  $0 = $29; //@line 3487 "emscripten/stb_image.c"
  $65 = $0; //@line 3507 "emscripten/stb_image.c"
  STACKTOP = sp;return ($65|0); //@line 3507 "emscripten/stb_image.c"
 }
 $30 = $1; //@line 3489 "emscripten/stb_image.c"
 (__ZL5get32P4stbi($30)|0); //@line 3489 "emscripten/stb_image.c"
 $31 = $1; //@line 3490 "emscripten/stb_image.c"
 (__ZL5get16P4stbi($31)|0); //@line 3490 "emscripten/stb_image.c"
 $32 = $1; //@line 3491 "emscripten/stb_image.c"
 (__ZL5get16P4stbi($32)|0); //@line 3491 "emscripten/stb_image.c"
 $33 = $x; //@line 3494 "emscripten/stb_image.c"
 $34 = $y; //@line 3494 "emscripten/stb_image.c"
 $35 = Math_imul($33, $34)|0; //@line 3494 "emscripten/stb_image.c"
 $36 = $35<<2; //@line 3494 "emscripten/stb_image.c"
 $37 = (_malloc($36)|0); //@line 3494 "emscripten/stb_image.c"
 $result = $37; //@line 3494 "emscripten/stb_image.c"
 $38 = $result; //@line 3495 "emscripten/stb_image.c"
 $39 = $x; //@line 3495 "emscripten/stb_image.c"
 $40 = $y; //@line 3495 "emscripten/stb_image.c"
 $41 = Math_imul($39, $40)|0; //@line 3495 "emscripten/stb_image.c"
 $42 = $41<<2; //@line 3495 "emscripten/stb_image.c"
 _memset(($38|0),-1,($42|0))|0; //@line 3495 "emscripten/stb_image.c"
 $43 = $1; //@line 3497 "emscripten/stb_image.c"
 $44 = $x; //@line 3497 "emscripten/stb_image.c"
 $45 = $y; //@line 3497 "emscripten/stb_image.c"
 $46 = $4; //@line 3497 "emscripten/stb_image.c"
 $47 = $result; //@line 3497 "emscripten/stb_image.c"
 $48 = (__ZL9pic_load2P4stbiiiPiPh($43,$44,$45,$46,$47)|0); //@line 3497 "emscripten/stb_image.c"
 $49 = ($48|0)!=(0|0); //@line 3497 "emscripten/stb_image.c"
 if (!($49)) {
  $50 = $result; //@line 3498 "emscripten/stb_image.c"
  _free($50); //@line 3498 "emscripten/stb_image.c"
  $result = 0; //@line 3499 "emscripten/stb_image.c"
 }
 $51 = $x; //@line 3501 "emscripten/stb_image.c"
 $52 = $2; //@line 3501 "emscripten/stb_image.c"
 HEAP32[$52>>2] = $51; //@line 3501 "emscripten/stb_image.c"
 $53 = $y; //@line 3502 "emscripten/stb_image.c"
 $54 = $3; //@line 3502 "emscripten/stb_image.c"
 HEAP32[$54>>2] = $53; //@line 3502 "emscripten/stb_image.c"
 $55 = $5; //@line 3503 "emscripten/stb_image.c"
 $56 = ($55|0)==(0); //@line 3503 "emscripten/stb_image.c"
 if ($56) {
  $57 = $4; //@line 3503 "emscripten/stb_image.c"
  $58 = HEAP32[$57>>2]|0; //@line 3503 "emscripten/stb_image.c"
  $5 = $58; //@line 3503 "emscripten/stb_image.c"
 }
 $59 = $result; //@line 3504 "emscripten/stb_image.c"
 $60 = $5; //@line 3504 "emscripten/stb_image.c"
 $61 = $x; //@line 3504 "emscripten/stb_image.c"
 $62 = $y; //@line 3504 "emscripten/stb_image.c"
 $63 = (__ZL14convert_formatPhiijj($59,4,$60,$61,$62)|0); //@line 3504 "emscripten/stb_image.c"
 $result = $63; //@line 3504 "emscripten/stb_image.c"
 $64 = $result; //@line 3506 "emscripten/stb_image.c"
 $0 = $64; //@line 3506 "emscripten/stb_image.c"
 $65 = $0; //@line 3507 "emscripten/stb_image.c"
 STACKTOP = sp;return ($65|0); //@line 3507 "emscripten/stb_image.c"
}
function __ZL9pic_load2P4stbiiiPiPh($s,$width,$height,$comp,$result) {
 $s = $s|0;
 $width = $width|0;
 $height = $height|0;
 $comp = $comp|0;
 $result = $result|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $act_comp = 0, $chained = 0, $count = 0, $count3 = 0, $dest = 0, $i = 0;
 var $i4 = 0, $i6 = 0, $left = 0, $left2 = 0, $num_packets = 0, $packet = 0, $packet1 = 0, $packet_idx = 0, $packets = 0, $value = 0, $value5 = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $packets = sp + 94|0;
 $value = sp + 84|0;
 $value5 = sp + 88|0;
 $1 = $s;
 $2 = $width;
 $3 = $height;
 $4 = $comp;
 $5 = $result;
 $act_comp = 0; //@line 3367 "emscripten/stb_image.c"
 $num_packets = 0; //@line 3367 "emscripten/stb_image.c"
 while(1) {
  $6 = $num_packets; //@line 3375 "emscripten/stb_image.c"
  $7 = ($6|0)==(10); //@line 3375 "emscripten/stb_image.c"
  if ($7) {
   label = 3;
   break;
  }
  $12 = $num_packets; //@line 3378 "emscripten/stb_image.c"
  $13 = (($12) + 1)|0; //@line 3378 "emscripten/stb_image.c"
  $num_packets = $13; //@line 3378 "emscripten/stb_image.c"
  $14 = (($packets) + (($12*3)|0)|0); //@line 3378 "emscripten/stb_image.c"
  $packet = $14; //@line 3378 "emscripten/stb_image.c"
  $15 = $1; //@line 3380 "emscripten/stb_image.c"
  $16 = (__ZL4get8P4stbi($15)|0); //@line 3380 "emscripten/stb_image.c"
  $chained = $16; //@line 3380 "emscripten/stb_image.c"
  $17 = $1; //@line 3381 "emscripten/stb_image.c"
  $18 = (__ZL5get8uP4stbi($17)|0); //@line 3381 "emscripten/stb_image.c"
  $19 = $packet; //@line 3381 "emscripten/stb_image.c"
  HEAP8[$19>>0] = $18; //@line 3381 "emscripten/stb_image.c"
  $20 = $1; //@line 3382 "emscripten/stb_image.c"
  $21 = (__ZL5get8uP4stbi($20)|0); //@line 3382 "emscripten/stb_image.c"
  $22 = $packet; //@line 3382 "emscripten/stb_image.c"
  $23 = (($22) + 1|0); //@line 3382 "emscripten/stb_image.c"
  HEAP8[$23>>0] = $21; //@line 3382 "emscripten/stb_image.c"
  $24 = $1; //@line 3383 "emscripten/stb_image.c"
  $25 = (__ZL5get8uP4stbi($24)|0); //@line 3383 "emscripten/stb_image.c"
  $26 = $packet; //@line 3383 "emscripten/stb_image.c"
  $27 = (($26) + 2|0); //@line 3383 "emscripten/stb_image.c"
  HEAP8[$27>>0] = $25; //@line 3383 "emscripten/stb_image.c"
  $28 = $packet; //@line 3385 "emscripten/stb_image.c"
  $29 = (($28) + 2|0); //@line 3385 "emscripten/stb_image.c"
  $30 = HEAP8[$29>>0]|0; //@line 3385 "emscripten/stb_image.c"
  $31 = $30&255; //@line 3385 "emscripten/stb_image.c"
  $32 = $act_comp; //@line 3385 "emscripten/stb_image.c"
  $33 = $32 | $31; //@line 3385 "emscripten/stb_image.c"
  $act_comp = $33; //@line 3385 "emscripten/stb_image.c"
  $34 = $1; //@line 3387 "emscripten/stb_image.c"
  $35 = (__ZL6at_eofP4stbi($34)|0); //@line 3387 "emscripten/stb_image.c"
  $36 = ($35|0)!=(0); //@line 3387 "emscripten/stb_image.c"
  if ($36) {
   label = 5;
   break;
  }
  $41 = $packet; //@line 3388 "emscripten/stb_image.c"
  $42 = HEAP8[$41>>0]|0; //@line 3388 "emscripten/stb_image.c"
  $43 = $42&255; //@line 3388 "emscripten/stb_image.c"
  $44 = ($43|0)!=(8); //@line 3388 "emscripten/stb_image.c"
  if ($44) {
   label = 7;
   break;
  }
  $49 = $chained; //@line 3389 "emscripten/stb_image.c"
  $50 = ($49|0)!=(0); //@line 3389 "emscripten/stb_image.c"
  if (!($50)) {
   label = 10;
   break;
  }
 }
 if ((label|0) == 3) {
  $8 = (__ZL1ePKc(28952)|0); //@line 3376 "emscripten/stb_image.c"
  $9 = ($8|0)!=(0); //@line 3376 "emscripten/stb_image.c"
  $10 = $9 ? 0 : 0; //@line 3376 "emscripten/stb_image.c"
  $11 = $10; //@line 3376 "emscripten/stb_image.c"
  $0 = $11; //@line 3376 "emscripten/stb_image.c"
  $213 = $0; //@line 3474 "emscripten/stb_image.c"
  STACKTOP = sp;return ($213|0); //@line 3474 "emscripten/stb_image.c"
 }
 else if ((label|0) == 5) {
  $37 = (__ZL1ePKc(28880)|0); //@line 3387 "emscripten/stb_image.c"
  $38 = ($37|0)!=(0); //@line 3387 "emscripten/stb_image.c"
  $39 = $38 ? 0 : 0; //@line 3387 "emscripten/stb_image.c"
  $40 = $39; //@line 3387 "emscripten/stb_image.c"
  $0 = $40; //@line 3387 "emscripten/stb_image.c"
  $213 = $0; //@line 3474 "emscripten/stb_image.c"
  STACKTOP = sp;return ($213|0); //@line 3474 "emscripten/stb_image.c"
 }
 else if ((label|0) == 7) {
  $45 = (__ZL1ePKc(28952)|0); //@line 3388 "emscripten/stb_image.c"
  $46 = ($45|0)!=(0); //@line 3388 "emscripten/stb_image.c"
  $47 = $46 ? 0 : 0; //@line 3388 "emscripten/stb_image.c"
  $48 = $47; //@line 3388 "emscripten/stb_image.c"
  $0 = $48; //@line 3388 "emscripten/stb_image.c"
  $213 = $0; //@line 3474 "emscripten/stb_image.c"
  STACKTOP = sp;return ($213|0); //@line 3474 "emscripten/stb_image.c"
 }
 else if ((label|0) == 10) {
  $51 = $act_comp; //@line 3391 "emscripten/stb_image.c"
  $52 = $51 & 16; //@line 3391 "emscripten/stb_image.c"
  $53 = ($52|0)!=(0); //@line 3391 "emscripten/stb_image.c"
  $54 = $53 ? 4 : 3; //@line 3391 "emscripten/stb_image.c"
  $55 = $4; //@line 3391 "emscripten/stb_image.c"
  HEAP32[$55>>2] = $54; //@line 3391 "emscripten/stb_image.c"
  $y = 0; //@line 3393 "emscripten/stb_image.c"
  L9: while(1) {
   $56 = $y; //@line 3393 "emscripten/stb_image.c"
   $57 = $3; //@line 3393 "emscripten/stb_image.c"
   $58 = ($56|0)<($57|0); //@line 3393 "emscripten/stb_image.c"
   if (!($58)) {
    label = 69;
    break;
   }
   $packet_idx = 0; //@line 3396 "emscripten/stb_image.c"
   while(1) {
    $59 = $packet_idx; //@line 3396 "emscripten/stb_image.c"
    $60 = $num_packets; //@line 3396 "emscripten/stb_image.c"
    $61 = ($59|0)<($60|0); //@line 3396 "emscripten/stb_image.c"
    if (!($61)) {
     break;
    }
    $62 = $packet_idx; //@line 3397 "emscripten/stb_image.c"
    $63 = (($packets) + (($62*3)|0)|0); //@line 3397 "emscripten/stb_image.c"
    $packet1 = $63; //@line 3397 "emscripten/stb_image.c"
    $64 = $5; //@line 3398 "emscripten/stb_image.c"
    $65 = $y; //@line 3398 "emscripten/stb_image.c"
    $66 = $2; //@line 3398 "emscripten/stb_image.c"
    $67 = Math_imul($65, $66)|0; //@line 3398 "emscripten/stb_image.c"
    $68 = $67<<2; //@line 3398 "emscripten/stb_image.c"
    $69 = (($64) + ($68)|0); //@line 3398 "emscripten/stb_image.c"
    $dest = $69; //@line 3398 "emscripten/stb_image.c"
    $70 = $packet1; //@line 3400 "emscripten/stb_image.c"
    $71 = (($70) + 1|0); //@line 3400 "emscripten/stb_image.c"
    $72 = HEAP8[$71>>0]|0; //@line 3400 "emscripten/stb_image.c"
    $73 = $72&255; //@line 3400 "emscripten/stb_image.c"
    if ((($73|0) == 2)) {
     $135 = $2; //@line 3436 "emscripten/stb_image.c"
     $left2 = $135; //@line 3436 "emscripten/stb_image.c"
     while(1) {
      $136 = $left2; //@line 3437 "emscripten/stb_image.c"
      $137 = ($136|0)>(0); //@line 3437 "emscripten/stb_image.c"
      if (!($137)) {
       break;
      }
      $138 = $1; //@line 3438 "emscripten/stb_image.c"
      $139 = (__ZL4get8P4stbi($138)|0); //@line 3438 "emscripten/stb_image.c"
      $count3 = $139; //@line 3438 "emscripten/stb_image.c"
      $140 = $1; //@line 3439 "emscripten/stb_image.c"
      $141 = (__ZL6at_eofP4stbi($140)|0); //@line 3439 "emscripten/stb_image.c"
      $142 = ($141|0)!=(0); //@line 3439 "emscripten/stb_image.c"
      if ($142) {
       label = 40;
       break L9;
      }
      $147 = $count3; //@line 3441 "emscripten/stb_image.c"
      $148 = ($147|0)>=(128); //@line 3441 "emscripten/stb_image.c"
      if ($148) {
       $149 = $count3; //@line 3445 "emscripten/stb_image.c"
       $150 = ($149|0)==(128); //@line 3445 "emscripten/stb_image.c"
       if ($150) {
        $151 = $1; //@line 3446 "emscripten/stb_image.c"
        $152 = (__ZL5get16P4stbi($151)|0); //@line 3446 "emscripten/stb_image.c"
        $count3 = $152; //@line 3446 "emscripten/stb_image.c"
       } else {
        $153 = $count3; //@line 3448 "emscripten/stb_image.c"
        $154 = (($153) - 127)|0; //@line 3448 "emscripten/stb_image.c"
        $count3 = $154; //@line 3448 "emscripten/stb_image.c"
       }
       $155 = $count3; //@line 3449 "emscripten/stb_image.c"
       $156 = $left2; //@line 3449 "emscripten/stb_image.c"
       $157 = ($155|0)>($156|0); //@line 3449 "emscripten/stb_image.c"
       if ($157) {
        label = 46;
        break L9;
       }
       $162 = $1; //@line 3452 "emscripten/stb_image.c"
       $163 = $packet1; //@line 3452 "emscripten/stb_image.c"
       $164 = (($163) + 2|0); //@line 3452 "emscripten/stb_image.c"
       $165 = HEAP8[$164>>0]|0; //@line 3452 "emscripten/stb_image.c"
       $166 = $165&255; //@line 3452 "emscripten/stb_image.c"
       $167 = (__ZL11pic_readvalP4stbiiPh($162,$166,$value5)|0); //@line 3452 "emscripten/stb_image.c"
       $168 = ($167|0)!=(0|0); //@line 3452 "emscripten/stb_image.c"
       if (!($168)) {
        label = 48;
        break L9;
       }
       $i6 = 0; //@line 3455 "emscripten/stb_image.c"
       while(1) {
        $169 = $i6; //@line 3455 "emscripten/stb_image.c"
        $170 = $count3; //@line 3455 "emscripten/stb_image.c"
        $171 = ($169|0)<($170|0); //@line 3455 "emscripten/stb_image.c"
        if (!($171)) {
         break;
        }
        $172 = $packet1; //@line 3456 "emscripten/stb_image.c"
        $173 = (($172) + 2|0); //@line 3456 "emscripten/stb_image.c"
        $174 = HEAP8[$173>>0]|0; //@line 3456 "emscripten/stb_image.c"
        $175 = $174&255; //@line 3456 "emscripten/stb_image.c"
        $176 = $dest; //@line 3456 "emscripten/stb_image.c"
        __ZL11pic_copyvaliPhPKh($175,$176,$value5); //@line 3456 "emscripten/stb_image.c"
        $177 = $i6; //@line 3455 "emscripten/stb_image.c"
        $178 = (($177) + 1)|0; //@line 3455 "emscripten/stb_image.c"
        $i6 = $178; //@line 3455 "emscripten/stb_image.c"
        $179 = $dest; //@line 3455 "emscripten/stb_image.c"
        $180 = (($179) + 4|0); //@line 3455 "emscripten/stb_image.c"
        $dest = $180; //@line 3455 "emscripten/stb_image.c"
       }
      } else {
       $181 = $count3; //@line 3458 "emscripten/stb_image.c"
       $182 = (($181) + 1)|0; //@line 3458 "emscripten/stb_image.c"
       $count3 = $182; //@line 3458 "emscripten/stb_image.c"
       $183 = $count3; //@line 3459 "emscripten/stb_image.c"
       $184 = $left2; //@line 3459 "emscripten/stb_image.c"
       $185 = ($183|0)>($184|0); //@line 3459 "emscripten/stb_image.c"
       if ($185) {
        label = 55;
        break L9;
       }
       $i4 = 0; //@line 3461 "emscripten/stb_image.c"
       while(1) {
        $190 = $i4; //@line 3461 "emscripten/stb_image.c"
        $191 = $count3; //@line 3461 "emscripten/stb_image.c"
        $192 = ($190|0)<($191|0); //@line 3461 "emscripten/stb_image.c"
        if (!($192)) {
         break;
        }
        $193 = $1; //@line 3462 "emscripten/stb_image.c"
        $194 = $packet1; //@line 3462 "emscripten/stb_image.c"
        $195 = (($194) + 2|0); //@line 3462 "emscripten/stb_image.c"
        $196 = HEAP8[$195>>0]|0; //@line 3462 "emscripten/stb_image.c"
        $197 = $196&255; //@line 3462 "emscripten/stb_image.c"
        $198 = $dest; //@line 3462 "emscripten/stb_image.c"
        $199 = (__ZL11pic_readvalP4stbiiPh($193,$197,$198)|0); //@line 3462 "emscripten/stb_image.c"
        $200 = ($199|0)!=(0|0); //@line 3462 "emscripten/stb_image.c"
        if (!($200)) {
         label = 59;
         break L9;
        }
        $201 = $i4; //@line 3461 "emscripten/stb_image.c"
        $202 = (($201) + 1)|0; //@line 3461 "emscripten/stb_image.c"
        $i4 = $202; //@line 3461 "emscripten/stb_image.c"
        $203 = $dest; //@line 3461 "emscripten/stb_image.c"
        $204 = (($203) + 4|0); //@line 3461 "emscripten/stb_image.c"
        $dest = $204; //@line 3461 "emscripten/stb_image.c"
       }
      }
      $205 = $count3; //@line 3465 "emscripten/stb_image.c"
      $206 = $left2; //@line 3465 "emscripten/stb_image.c"
      $207 = (($206) - ($205))|0; //@line 3465 "emscripten/stb_image.c"
      $left2 = $207; //@line 3465 "emscripten/stb_image.c"
     }
    } else if ((($73|0) == 0)) {
     $x = 0; //@line 3407 "emscripten/stb_image.c"
     while(1) {
      $78 = $x; //@line 3407 "emscripten/stb_image.c"
      $79 = $2; //@line 3407 "emscripten/stb_image.c"
      $80 = ($78|0)<($79|0); //@line 3407 "emscripten/stb_image.c"
      if (!($80)) {
       break;
      }
      $81 = $1; //@line 3408 "emscripten/stb_image.c"
      $82 = $packet1; //@line 3408 "emscripten/stb_image.c"
      $83 = (($82) + 2|0); //@line 3408 "emscripten/stb_image.c"
      $84 = HEAP8[$83>>0]|0; //@line 3408 "emscripten/stb_image.c"
      $85 = $84&255; //@line 3408 "emscripten/stb_image.c"
      $86 = $dest; //@line 3408 "emscripten/stb_image.c"
      $87 = (__ZL11pic_readvalP4stbiiPh($81,$85,$86)|0); //@line 3408 "emscripten/stb_image.c"
      $88 = ($87|0)!=(0|0); //@line 3408 "emscripten/stb_image.c"
      if (!($88)) {
       label = 19;
       break L9;
      }
      $89 = $x; //@line 3407 "emscripten/stb_image.c"
      $90 = (($89) + 1)|0; //@line 3407 "emscripten/stb_image.c"
      $x = $90; //@line 3407 "emscripten/stb_image.c"
      $91 = $dest; //@line 3407 "emscripten/stb_image.c"
      $92 = (($91) + 4|0); //@line 3407 "emscripten/stb_image.c"
      $dest = $92; //@line 3407 "emscripten/stb_image.c"
     }
    } else if ((($73|0) == 1)) {
     $93 = $2; //@line 3415 "emscripten/stb_image.c"
     $left = $93; //@line 3415 "emscripten/stb_image.c"
     while(1) {
      $94 = $left; //@line 3417 "emscripten/stb_image.c"
      $95 = ($94|0)>(0); //@line 3417 "emscripten/stb_image.c"
      if (!($95)) {
       break;
      }
      $96 = $1; //@line 3420 "emscripten/stb_image.c"
      $97 = (__ZL5get8uP4stbi($96)|0); //@line 3420 "emscripten/stb_image.c"
      $count = $97; //@line 3420 "emscripten/stb_image.c"
      $98 = $1; //@line 3421 "emscripten/stb_image.c"
      $99 = (__ZL6at_eofP4stbi($98)|0); //@line 3421 "emscripten/stb_image.c"
      $100 = ($99|0)!=(0); //@line 3421 "emscripten/stb_image.c"
      if ($100) {
       label = 26;
       break L9;
      }
      $105 = $count; //@line 3423 "emscripten/stb_image.c"
      $106 = $105&255; //@line 3423 "emscripten/stb_image.c"
      $107 = $left; //@line 3423 "emscripten/stb_image.c"
      $108 = ($106|0)>($107|0); //@line 3423 "emscripten/stb_image.c"
      if ($108) {
       $109 = $left; //@line 3424 "emscripten/stb_image.c"
       $110 = $109&255; //@line 3424 "emscripten/stb_image.c"
       $count = $110; //@line 3424 "emscripten/stb_image.c"
      }
      $111 = $1; //@line 3426 "emscripten/stb_image.c"
      $112 = $packet1; //@line 3426 "emscripten/stb_image.c"
      $113 = (($112) + 2|0); //@line 3426 "emscripten/stb_image.c"
      $114 = HEAP8[$113>>0]|0; //@line 3426 "emscripten/stb_image.c"
      $115 = $114&255; //@line 3426 "emscripten/stb_image.c"
      $116 = (__ZL11pic_readvalP4stbiiPh($111,$115,$value)|0); //@line 3426 "emscripten/stb_image.c"
      $117 = ($116|0)!=(0|0); //@line 3426 "emscripten/stb_image.c"
      if (!($117)) {
       label = 30;
       break L9;
      }
      $i = 0; //@line 3428 "emscripten/stb_image.c"
      while(1) {
       $118 = $i; //@line 3428 "emscripten/stb_image.c"
       $119 = $count; //@line 3428 "emscripten/stb_image.c"
       $120 = $119&255; //@line 3428 "emscripten/stb_image.c"
       $121 = ($118|0)<($120|0); //@line 3428 "emscripten/stb_image.c"
       if (!($121)) {
        break;
       }
       $122 = $packet1; //@line 3429 "emscripten/stb_image.c"
       $123 = (($122) + 2|0); //@line 3429 "emscripten/stb_image.c"
       $124 = HEAP8[$123>>0]|0; //@line 3429 "emscripten/stb_image.c"
       $125 = $124&255; //@line 3429 "emscripten/stb_image.c"
       $126 = $dest; //@line 3429 "emscripten/stb_image.c"
       __ZL11pic_copyvaliPhPKh($125,$126,$value); //@line 3429 "emscripten/stb_image.c"
       $127 = $i; //@line 3428 "emscripten/stb_image.c"
       $128 = (($127) + 1)|0; //@line 3428 "emscripten/stb_image.c"
       $i = $128; //@line 3428 "emscripten/stb_image.c"
       $129 = $dest; //@line 3428 "emscripten/stb_image.c"
       $130 = (($129) + 4|0); //@line 3428 "emscripten/stb_image.c"
       $dest = $130; //@line 3428 "emscripten/stb_image.c"
      }
      $131 = $count; //@line 3430 "emscripten/stb_image.c"
      $132 = $131&255; //@line 3430 "emscripten/stb_image.c"
      $133 = $left; //@line 3430 "emscripten/stb_image.c"
      $134 = (($133) - ($132))|0; //@line 3430 "emscripten/stb_image.c"
      $left = $134; //@line 3430 "emscripten/stb_image.c"
     }
    } else {
     label = 15;
     break L9;
    }
    $208 = $packet_idx; //@line 3396 "emscripten/stb_image.c"
    $209 = (($208) + 1)|0; //@line 3396 "emscripten/stb_image.c"
    $packet_idx = $209; //@line 3396 "emscripten/stb_image.c"
   }
   $210 = $y; //@line 3393 "emscripten/stb_image.c"
   $211 = (($210) + 1)|0; //@line 3393 "emscripten/stb_image.c"
   $y = $211; //@line 3393 "emscripten/stb_image.c"
  }
  switch (label|0) {
   case 15: {
    $74 = (__ZL1ePKc(28952)|0); //@line 3402 "emscripten/stb_image.c"
    $75 = ($74|0)!=(0); //@line 3402 "emscripten/stb_image.c"
    $76 = $75 ? 0 : 0; //@line 3402 "emscripten/stb_image.c"
    $77 = $76; //@line 3402 "emscripten/stb_image.c"
    $0 = $77; //@line 3402 "emscripten/stb_image.c"
    $213 = $0; //@line 3474 "emscripten/stb_image.c"
    STACKTOP = sp;return ($213|0); //@line 3474 "emscripten/stb_image.c"
    break;
   }
   case 19: {
    $0 = 0; //@line 3409 "emscripten/stb_image.c"
    $213 = $0; //@line 3474 "emscripten/stb_image.c"
    STACKTOP = sp;return ($213|0); //@line 3474 "emscripten/stb_image.c"
    break;
   }
   case 26: {
    $101 = (__ZL1ePKc(28880)|0); //@line 3421 "emscripten/stb_image.c"
    $102 = ($101|0)!=(0); //@line 3421 "emscripten/stb_image.c"
    $103 = $102 ? 0 : 0; //@line 3421 "emscripten/stb_image.c"
    $104 = $103; //@line 3421 "emscripten/stb_image.c"
    $0 = $104; //@line 3421 "emscripten/stb_image.c"
    $213 = $0; //@line 3474 "emscripten/stb_image.c"
    STACKTOP = sp;return ($213|0); //@line 3474 "emscripten/stb_image.c"
    break;
   }
   case 30: {
    $0 = 0; //@line 3426 "emscripten/stb_image.c"
    $213 = $0; //@line 3474 "emscripten/stb_image.c"
    STACKTOP = sp;return ($213|0); //@line 3474 "emscripten/stb_image.c"
    break;
   }
   case 40: {
    $143 = (__ZL1ePKc(28880)|0); //@line 3439 "emscripten/stb_image.c"
    $144 = ($143|0)!=(0); //@line 3439 "emscripten/stb_image.c"
    $145 = $144 ? 0 : 0; //@line 3439 "emscripten/stb_image.c"
    $146 = $145; //@line 3439 "emscripten/stb_image.c"
    $0 = $146; //@line 3439 "emscripten/stb_image.c"
    $213 = $0; //@line 3474 "emscripten/stb_image.c"
    STACKTOP = sp;return ($213|0); //@line 3474 "emscripten/stb_image.c"
    break;
   }
   case 46: {
    $158 = (__ZL1ePKc(28880)|0); //@line 3450 "emscripten/stb_image.c"
    $159 = ($158|0)!=(0); //@line 3450 "emscripten/stb_image.c"
    $160 = $159 ? 0 : 0; //@line 3450 "emscripten/stb_image.c"
    $161 = $160; //@line 3450 "emscripten/stb_image.c"
    $0 = $161; //@line 3450 "emscripten/stb_image.c"
    $213 = $0; //@line 3474 "emscripten/stb_image.c"
    STACKTOP = sp;return ($213|0); //@line 3474 "emscripten/stb_image.c"
    break;
   }
   case 48: {
    $0 = 0; //@line 3453 "emscripten/stb_image.c"
    $213 = $0; //@line 3474 "emscripten/stb_image.c"
    STACKTOP = sp;return ($213|0); //@line 3474 "emscripten/stb_image.c"
    break;
   }
   case 55: {
    $186 = (__ZL1ePKc(28880)|0); //@line 3459 "emscripten/stb_image.c"
    $187 = ($186|0)!=(0); //@line 3459 "emscripten/stb_image.c"
    $188 = $187 ? 0 : 0; //@line 3459 "emscripten/stb_image.c"
    $189 = $188; //@line 3459 "emscripten/stb_image.c"
    $0 = $189; //@line 3459 "emscripten/stb_image.c"
    $213 = $0; //@line 3474 "emscripten/stb_image.c"
    STACKTOP = sp;return ($213|0); //@line 3474 "emscripten/stb_image.c"
    break;
   }
   case 59: {
    $0 = 0; //@line 3463 "emscripten/stb_image.c"
    $213 = $0; //@line 3474 "emscripten/stb_image.c"
    STACKTOP = sp;return ($213|0); //@line 3474 "emscripten/stb_image.c"
    break;
   }
   case 69: {
    $212 = $5; //@line 3473 "emscripten/stb_image.c"
    $0 = $212; //@line 3473 "emscripten/stb_image.c"
    $213 = $0; //@line 3474 "emscripten/stb_image.c"
    STACKTOP = sp;return ($213|0); //@line 3474 "emscripten/stb_image.c"
    break;
   }
  }
 }
 return 0|0;
}
function __ZL14convert_formatPhiijj($data,$img_n,$req_comp,$x,$y) {
 $data = $data|0;
 $img_n = $img_n|0;
 $req_comp = $req_comp|0;
 $x = $x|0;
 $y = $y|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $dest = 0, $good = 0, $i = 0, $j = 0, $src = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $1 = $data;
 $2 = $img_n;
 $3 = $req_comp;
 $4 = $x;
 $5 = $y;
 $6 = $3; //@line 508 "emscripten/stb_image.c"
 $7 = $2; //@line 508 "emscripten/stb_image.c"
 $8 = ($6|0)==($7|0); //@line 508 "emscripten/stb_image.c"
 if ($8) {
  $9 = $1; //@line 508 "emscripten/stb_image.c"
  $0 = $9; //@line 508 "emscripten/stb_image.c"
  $302 = $0; //@line 545 "emscripten/stb_image.c"
  STACKTOP = sp;return ($302|0); //@line 545 "emscripten/stb_image.c"
 }
 $10 = $3; //@line 509 "emscripten/stb_image.c"
 $11 = ($10|0)>=(1); //@line 509 "emscripten/stb_image.c"
 if (!($11)) {
  ___assert_fail((28896|0),(26712|0),509,(28928|0)); //@line 509 "emscripten/stb_image.c"
  // unreachable; //@line 509 "emscripten/stb_image.c"
 }
 $12 = $3; //@line 509 "emscripten/stb_image.c"
 $13 = ($12|0)<=(4); //@line 509 "emscripten/stb_image.c"
 if (!($13)) {
  ___assert_fail((28896|0),(26712|0),509,(28928|0)); //@line 509 "emscripten/stb_image.c"
  // unreachable; //@line 509 "emscripten/stb_image.c"
 }
 $14 = $3; //@line 511 "emscripten/stb_image.c"
 $15 = $4; //@line 511 "emscripten/stb_image.c"
 $16 = Math_imul($14, $15)|0; //@line 511 "emscripten/stb_image.c"
 $17 = $5; //@line 511 "emscripten/stb_image.c"
 $18 = Math_imul($16, $17)|0; //@line 511 "emscripten/stb_image.c"
 $19 = (_malloc($18)|0); //@line 511 "emscripten/stb_image.c"
 $good = $19; //@line 511 "emscripten/stb_image.c"
 $20 = $good; //@line 512 "emscripten/stb_image.c"
 $21 = ($20|0)==(0|0); //@line 512 "emscripten/stb_image.c"
 if ($21) {
  $22 = $1; //@line 513 "emscripten/stb_image.c"
  _free($22); //@line 513 "emscripten/stb_image.c"
  $23 = (__ZL1ePKc(26624)|0); //@line 514 "emscripten/stb_image.c"
  $24 = ($23|0)!=(0); //@line 514 "emscripten/stb_image.c"
  $25 = $24 ? 0 : 0; //@line 514 "emscripten/stb_image.c"
  $26 = $25; //@line 514 "emscripten/stb_image.c"
  $0 = $26; //@line 514 "emscripten/stb_image.c"
  $302 = $0; //@line 545 "emscripten/stb_image.c"
  STACKTOP = sp;return ($302|0); //@line 545 "emscripten/stb_image.c"
 }
 $j = 0; //@line 517 "emscripten/stb_image.c"
 L15: while(1) {
  $27 = $j; //@line 517 "emscripten/stb_image.c"
  $28 = $5; //@line 517 "emscripten/stb_image.c"
  $29 = ($27|0)<($28|0); //@line 517 "emscripten/stb_image.c"
  if (!($29)) {
   break;
  }
  $30 = $1; //@line 518 "emscripten/stb_image.c"
  $31 = $j; //@line 518 "emscripten/stb_image.c"
  $32 = $4; //@line 518 "emscripten/stb_image.c"
  $33 = Math_imul($31, $32)|0; //@line 518 "emscripten/stb_image.c"
  $34 = $2; //@line 518 "emscripten/stb_image.c"
  $35 = Math_imul($33, $34)|0; //@line 518 "emscripten/stb_image.c"
  $36 = (($30) + ($35)|0); //@line 518 "emscripten/stb_image.c"
  $src = $36; //@line 518 "emscripten/stb_image.c"
  $37 = $good; //@line 519 "emscripten/stb_image.c"
  $38 = $j; //@line 519 "emscripten/stb_image.c"
  $39 = $4; //@line 519 "emscripten/stb_image.c"
  $40 = Math_imul($38, $39)|0; //@line 519 "emscripten/stb_image.c"
  $41 = $3; //@line 519 "emscripten/stb_image.c"
  $42 = Math_imul($40, $41)|0; //@line 519 "emscripten/stb_image.c"
  $43 = (($37) + ($42)|0); //@line 519 "emscripten/stb_image.c"
  $dest = $43; //@line 519 "emscripten/stb_image.c"
  $44 = $2; //@line 525 "emscripten/stb_image.c"
  $45 = $44<<3; //@line 525 "emscripten/stb_image.c"
  $46 = $3; //@line 525 "emscripten/stb_image.c"
  $47 = (($45) + ($46))|0; //@line 525 "emscripten/stb_image.c"
  do {
   switch ($47|0) {
   case 11:  {
    $63 = $4; //@line 527 "emscripten/stb_image.c"
    $64 = (($63) - 1)|0; //@line 527 "emscripten/stb_image.c"
    $i = $64; //@line 527 "emscripten/stb_image.c"
    while(1) {
     $65 = $i; //@line 527 "emscripten/stb_image.c"
     $66 = ($65|0)>=(0); //@line 527 "emscripten/stb_image.c"
     if (!($66)) {
      break;
     }
     $67 = $src; //@line 527 "emscripten/stb_image.c"
     $68 = HEAP8[$67>>0]|0; //@line 527 "emscripten/stb_image.c"
     $69 = $dest; //@line 527 "emscripten/stb_image.c"
     $70 = (($69) + 2|0); //@line 527 "emscripten/stb_image.c"
     HEAP8[$70>>0] = $68; //@line 527 "emscripten/stb_image.c"
     $71 = $dest; //@line 527 "emscripten/stb_image.c"
     $72 = (($71) + 1|0); //@line 527 "emscripten/stb_image.c"
     HEAP8[$72>>0] = $68; //@line 527 "emscripten/stb_image.c"
     $73 = $dest; //@line 527 "emscripten/stb_image.c"
     HEAP8[$73>>0] = $68; //@line 527 "emscripten/stb_image.c"
     $74 = $i; //@line 527 "emscripten/stb_image.c"
     $75 = (($74) + -1)|0; //@line 527 "emscripten/stb_image.c"
     $i = $75; //@line 527 "emscripten/stb_image.c"
     $76 = $src; //@line 527 "emscripten/stb_image.c"
     $77 = (($76) + 1|0); //@line 527 "emscripten/stb_image.c"
     $src = $77; //@line 527 "emscripten/stb_image.c"
     $78 = $dest; //@line 527 "emscripten/stb_image.c"
     $79 = (($78) + 3|0); //@line 527 "emscripten/stb_image.c"
     $dest = $79; //@line 527 "emscripten/stb_image.c"
    }
    break;
   }
   case 28:  {
    $151 = $4; //@line 532 "emscripten/stb_image.c"
    $152 = (($151) - 1)|0; //@line 532 "emscripten/stb_image.c"
    $i = $152; //@line 532 "emscripten/stb_image.c"
    while(1) {
     $153 = $i; //@line 532 "emscripten/stb_image.c"
     $154 = ($153|0)>=(0); //@line 532 "emscripten/stb_image.c"
     if (!($154)) {
      break;
     }
     $155 = $src; //@line 532 "emscripten/stb_image.c"
     $156 = HEAP8[$155>>0]|0; //@line 532 "emscripten/stb_image.c"
     $157 = $dest; //@line 532 "emscripten/stb_image.c"
     HEAP8[$157>>0] = $156; //@line 532 "emscripten/stb_image.c"
     $158 = $src; //@line 532 "emscripten/stb_image.c"
     $159 = (($158) + 1|0); //@line 532 "emscripten/stb_image.c"
     $160 = HEAP8[$159>>0]|0; //@line 532 "emscripten/stb_image.c"
     $161 = $dest; //@line 532 "emscripten/stb_image.c"
     $162 = (($161) + 1|0); //@line 532 "emscripten/stb_image.c"
     HEAP8[$162>>0] = $160; //@line 532 "emscripten/stb_image.c"
     $163 = $src; //@line 532 "emscripten/stb_image.c"
     $164 = (($163) + 2|0); //@line 532 "emscripten/stb_image.c"
     $165 = HEAP8[$164>>0]|0; //@line 532 "emscripten/stb_image.c"
     $166 = $dest; //@line 532 "emscripten/stb_image.c"
     $167 = (($166) + 2|0); //@line 532 "emscripten/stb_image.c"
     HEAP8[$167>>0] = $165; //@line 532 "emscripten/stb_image.c"
     $168 = $dest; //@line 532 "emscripten/stb_image.c"
     $169 = (($168) + 3|0); //@line 532 "emscripten/stb_image.c"
     HEAP8[$169>>0] = -1; //@line 532 "emscripten/stb_image.c"
     $170 = $i; //@line 532 "emscripten/stb_image.c"
     $171 = (($170) + -1)|0; //@line 532 "emscripten/stb_image.c"
     $i = $171; //@line 532 "emscripten/stb_image.c"
     $172 = $src; //@line 532 "emscripten/stb_image.c"
     $173 = (($172) + 3|0); //@line 532 "emscripten/stb_image.c"
     $src = $173; //@line 532 "emscripten/stb_image.c"
     $174 = $dest; //@line 532 "emscripten/stb_image.c"
     $175 = (($174) + 4|0); //@line 532 "emscripten/stb_image.c"
     $dest = $175; //@line 532 "emscripten/stb_image.c"
    }
    break;
   }
   case 12:  {
    $80 = $4; //@line 528 "emscripten/stb_image.c"
    $81 = (($80) - 1)|0; //@line 528 "emscripten/stb_image.c"
    $i = $81; //@line 528 "emscripten/stb_image.c"
    while(1) {
     $82 = $i; //@line 528 "emscripten/stb_image.c"
     $83 = ($82|0)>=(0); //@line 528 "emscripten/stb_image.c"
     if (!($83)) {
      break;
     }
     $84 = $src; //@line 528 "emscripten/stb_image.c"
     $85 = HEAP8[$84>>0]|0; //@line 528 "emscripten/stb_image.c"
     $86 = $dest; //@line 528 "emscripten/stb_image.c"
     $87 = (($86) + 2|0); //@line 528 "emscripten/stb_image.c"
     HEAP8[$87>>0] = $85; //@line 528 "emscripten/stb_image.c"
     $88 = $dest; //@line 528 "emscripten/stb_image.c"
     $89 = (($88) + 1|0); //@line 528 "emscripten/stb_image.c"
     HEAP8[$89>>0] = $85; //@line 528 "emscripten/stb_image.c"
     $90 = $dest; //@line 528 "emscripten/stb_image.c"
     HEAP8[$90>>0] = $85; //@line 528 "emscripten/stb_image.c"
     $91 = $dest; //@line 528 "emscripten/stb_image.c"
     $92 = (($91) + 3|0); //@line 528 "emscripten/stb_image.c"
     HEAP8[$92>>0] = -1; //@line 528 "emscripten/stb_image.c"
     $93 = $i; //@line 528 "emscripten/stb_image.c"
     $94 = (($93) + -1)|0; //@line 528 "emscripten/stb_image.c"
     $i = $94; //@line 528 "emscripten/stb_image.c"
     $95 = $src; //@line 528 "emscripten/stb_image.c"
     $96 = (($95) + 1|0); //@line 528 "emscripten/stb_image.c"
     $src = $96; //@line 528 "emscripten/stb_image.c"
     $97 = $dest; //@line 528 "emscripten/stb_image.c"
     $98 = (($97) + 4|0); //@line 528 "emscripten/stb_image.c"
     $dest = $98; //@line 528 "emscripten/stb_image.c"
    }
    break;
   }
   case 25:  {
    $176 = $4; //@line 533 "emscripten/stb_image.c"
    $177 = (($176) - 1)|0; //@line 533 "emscripten/stb_image.c"
    $i = $177; //@line 533 "emscripten/stb_image.c"
    while(1) {
     $178 = $i; //@line 533 "emscripten/stb_image.c"
     $179 = ($178|0)>=(0); //@line 533 "emscripten/stb_image.c"
     if (!($179)) {
      break;
     }
     $180 = $src; //@line 533 "emscripten/stb_image.c"
     $181 = HEAP8[$180>>0]|0; //@line 533 "emscripten/stb_image.c"
     $182 = $181&255; //@line 533 "emscripten/stb_image.c"
     $183 = $src; //@line 533 "emscripten/stb_image.c"
     $184 = (($183) + 1|0); //@line 533 "emscripten/stb_image.c"
     $185 = HEAP8[$184>>0]|0; //@line 533 "emscripten/stb_image.c"
     $186 = $185&255; //@line 533 "emscripten/stb_image.c"
     $187 = $src; //@line 533 "emscripten/stb_image.c"
     $188 = (($187) + 2|0); //@line 533 "emscripten/stb_image.c"
     $189 = HEAP8[$188>>0]|0; //@line 533 "emscripten/stb_image.c"
     $190 = $189&255; //@line 533 "emscripten/stb_image.c"
     $191 = (__ZL9compute_yiii($182,$186,$190)|0); //@line 533 "emscripten/stb_image.c"
     $192 = $dest; //@line 533 "emscripten/stb_image.c"
     HEAP8[$192>>0] = $191; //@line 533 "emscripten/stb_image.c"
     $193 = $i; //@line 533 "emscripten/stb_image.c"
     $194 = (($193) + -1)|0; //@line 533 "emscripten/stb_image.c"
     $i = $194; //@line 533 "emscripten/stb_image.c"
     $195 = $src; //@line 533 "emscripten/stb_image.c"
     $196 = (($195) + 3|0); //@line 533 "emscripten/stb_image.c"
     $src = $196; //@line 533 "emscripten/stb_image.c"
     $197 = $dest; //@line 533 "emscripten/stb_image.c"
     $198 = (($197) + 1|0); //@line 533 "emscripten/stb_image.c"
     $dest = $198; //@line 533 "emscripten/stb_image.c"
    }
    break;
   }
   case 19:  {
    $112 = $4; //@line 530 "emscripten/stb_image.c"
    $113 = (($112) - 1)|0; //@line 530 "emscripten/stb_image.c"
    $i = $113; //@line 530 "emscripten/stb_image.c"
    while(1) {
     $114 = $i; //@line 530 "emscripten/stb_image.c"
     $115 = ($114|0)>=(0); //@line 530 "emscripten/stb_image.c"
     if (!($115)) {
      break;
     }
     $116 = $src; //@line 530 "emscripten/stb_image.c"
     $117 = HEAP8[$116>>0]|0; //@line 530 "emscripten/stb_image.c"
     $118 = $dest; //@line 530 "emscripten/stb_image.c"
     $119 = (($118) + 2|0); //@line 530 "emscripten/stb_image.c"
     HEAP8[$119>>0] = $117; //@line 530 "emscripten/stb_image.c"
     $120 = $dest; //@line 530 "emscripten/stb_image.c"
     $121 = (($120) + 1|0); //@line 530 "emscripten/stb_image.c"
     HEAP8[$121>>0] = $117; //@line 530 "emscripten/stb_image.c"
     $122 = $dest; //@line 530 "emscripten/stb_image.c"
     HEAP8[$122>>0] = $117; //@line 530 "emscripten/stb_image.c"
     $123 = $i; //@line 530 "emscripten/stb_image.c"
     $124 = (($123) + -1)|0; //@line 530 "emscripten/stb_image.c"
     $i = $124; //@line 530 "emscripten/stb_image.c"
     $125 = $src; //@line 530 "emscripten/stb_image.c"
     $126 = (($125) + 2|0); //@line 530 "emscripten/stb_image.c"
     $src = $126; //@line 530 "emscripten/stb_image.c"
     $127 = $dest; //@line 530 "emscripten/stb_image.c"
     $128 = (($127) + 3|0); //@line 530 "emscripten/stb_image.c"
     $dest = $128; //@line 530 "emscripten/stb_image.c"
    }
    break;
   }
   case 17:  {
    $99 = $4; //@line 529 "emscripten/stb_image.c"
    $100 = (($99) - 1)|0; //@line 529 "emscripten/stb_image.c"
    $i = $100; //@line 529 "emscripten/stb_image.c"
    while(1) {
     $101 = $i; //@line 529 "emscripten/stb_image.c"
     $102 = ($101|0)>=(0); //@line 529 "emscripten/stb_image.c"
     if (!($102)) {
      break;
     }
     $103 = $src; //@line 529 "emscripten/stb_image.c"
     $104 = HEAP8[$103>>0]|0; //@line 529 "emscripten/stb_image.c"
     $105 = $dest; //@line 529 "emscripten/stb_image.c"
     HEAP8[$105>>0] = $104; //@line 529 "emscripten/stb_image.c"
     $106 = $i; //@line 529 "emscripten/stb_image.c"
     $107 = (($106) + -1)|0; //@line 529 "emscripten/stb_image.c"
     $i = $107; //@line 529 "emscripten/stb_image.c"
     $108 = $src; //@line 529 "emscripten/stb_image.c"
     $109 = (($108) + 2|0); //@line 529 "emscripten/stb_image.c"
     $src = $109; //@line 529 "emscripten/stb_image.c"
     $110 = $dest; //@line 529 "emscripten/stb_image.c"
     $111 = (($110) + 1|0); //@line 529 "emscripten/stb_image.c"
     $dest = $111; //@line 529 "emscripten/stb_image.c"
    }
    break;
   }
   case 10:  {
    $48 = $4; //@line 526 "emscripten/stb_image.c"
    $49 = (($48) - 1)|0; //@line 526 "emscripten/stb_image.c"
    $i = $49; //@line 526 "emscripten/stb_image.c"
    while(1) {
     $50 = $i; //@line 526 "emscripten/stb_image.c"
     $51 = ($50|0)>=(0); //@line 526 "emscripten/stb_image.c"
     if (!($51)) {
      break;
     }
     $52 = $src; //@line 526 "emscripten/stb_image.c"
     $53 = HEAP8[$52>>0]|0; //@line 526 "emscripten/stb_image.c"
     $54 = $dest; //@line 526 "emscripten/stb_image.c"
     HEAP8[$54>>0] = $53; //@line 526 "emscripten/stb_image.c"
     $55 = $dest; //@line 526 "emscripten/stb_image.c"
     $56 = (($55) + 1|0); //@line 526 "emscripten/stb_image.c"
     HEAP8[$56>>0] = -1; //@line 526 "emscripten/stb_image.c"
     $57 = $i; //@line 526 "emscripten/stb_image.c"
     $58 = (($57) + -1)|0; //@line 526 "emscripten/stb_image.c"
     $i = $58; //@line 526 "emscripten/stb_image.c"
     $59 = $src; //@line 526 "emscripten/stb_image.c"
     $60 = (($59) + 1|0); //@line 526 "emscripten/stb_image.c"
     $src = $60; //@line 526 "emscripten/stb_image.c"
     $61 = $dest; //@line 526 "emscripten/stb_image.c"
     $62 = (($61) + 2|0); //@line 526 "emscripten/stb_image.c"
     $dest = $62; //@line 526 "emscripten/stb_image.c"
    }
    break;
   }
   case 20:  {
    $129 = $4; //@line 531 "emscripten/stb_image.c"
    $130 = (($129) - 1)|0; //@line 531 "emscripten/stb_image.c"
    $i = $130; //@line 531 "emscripten/stb_image.c"
    while(1) {
     $131 = $i; //@line 531 "emscripten/stb_image.c"
     $132 = ($131|0)>=(0); //@line 531 "emscripten/stb_image.c"
     if (!($132)) {
      break;
     }
     $133 = $src; //@line 531 "emscripten/stb_image.c"
     $134 = HEAP8[$133>>0]|0; //@line 531 "emscripten/stb_image.c"
     $135 = $dest; //@line 531 "emscripten/stb_image.c"
     $136 = (($135) + 2|0); //@line 531 "emscripten/stb_image.c"
     HEAP8[$136>>0] = $134; //@line 531 "emscripten/stb_image.c"
     $137 = $dest; //@line 531 "emscripten/stb_image.c"
     $138 = (($137) + 1|0); //@line 531 "emscripten/stb_image.c"
     HEAP8[$138>>0] = $134; //@line 531 "emscripten/stb_image.c"
     $139 = $dest; //@line 531 "emscripten/stb_image.c"
     HEAP8[$139>>0] = $134; //@line 531 "emscripten/stb_image.c"
     $140 = $src; //@line 531 "emscripten/stb_image.c"
     $141 = (($140) + 1|0); //@line 531 "emscripten/stb_image.c"
     $142 = HEAP8[$141>>0]|0; //@line 531 "emscripten/stb_image.c"
     $143 = $dest; //@line 531 "emscripten/stb_image.c"
     $144 = (($143) + 3|0); //@line 531 "emscripten/stb_image.c"
     HEAP8[$144>>0] = $142; //@line 531 "emscripten/stb_image.c"
     $145 = $i; //@line 531 "emscripten/stb_image.c"
     $146 = (($145) + -1)|0; //@line 531 "emscripten/stb_image.c"
     $i = $146; //@line 531 "emscripten/stb_image.c"
     $147 = $src; //@line 531 "emscripten/stb_image.c"
     $148 = (($147) + 2|0); //@line 531 "emscripten/stb_image.c"
     $src = $148; //@line 531 "emscripten/stb_image.c"
     $149 = $dest; //@line 531 "emscripten/stb_image.c"
     $150 = (($149) + 4|0); //@line 531 "emscripten/stb_image.c"
     $dest = $150; //@line 531 "emscripten/stb_image.c"
    }
    break;
   }
   case 35:  {
    $275 = $4; //@line 537 "emscripten/stb_image.c"
    $276 = (($275) - 1)|0; //@line 537 "emscripten/stb_image.c"
    $i = $276; //@line 537 "emscripten/stb_image.c"
    while(1) {
     $277 = $i; //@line 537 "emscripten/stb_image.c"
     $278 = ($277|0)>=(0); //@line 537 "emscripten/stb_image.c"
     if (!($278)) {
      break;
     }
     $279 = $src; //@line 537 "emscripten/stb_image.c"
     $280 = HEAP8[$279>>0]|0; //@line 537 "emscripten/stb_image.c"
     $281 = $dest; //@line 537 "emscripten/stb_image.c"
     HEAP8[$281>>0] = $280; //@line 537 "emscripten/stb_image.c"
     $282 = $src; //@line 537 "emscripten/stb_image.c"
     $283 = (($282) + 1|0); //@line 537 "emscripten/stb_image.c"
     $284 = HEAP8[$283>>0]|0; //@line 537 "emscripten/stb_image.c"
     $285 = $dest; //@line 537 "emscripten/stb_image.c"
     $286 = (($285) + 1|0); //@line 537 "emscripten/stb_image.c"
     HEAP8[$286>>0] = $284; //@line 537 "emscripten/stb_image.c"
     $287 = $src; //@line 537 "emscripten/stb_image.c"
     $288 = (($287) + 2|0); //@line 537 "emscripten/stb_image.c"
     $289 = HEAP8[$288>>0]|0; //@line 537 "emscripten/stb_image.c"
     $290 = $dest; //@line 537 "emscripten/stb_image.c"
     $291 = (($290) + 2|0); //@line 537 "emscripten/stb_image.c"
     HEAP8[$291>>0] = $289; //@line 537 "emscripten/stb_image.c"
     $292 = $i; //@line 537 "emscripten/stb_image.c"
     $293 = (($292) + -1)|0; //@line 537 "emscripten/stb_image.c"
     $i = $293; //@line 537 "emscripten/stb_image.c"
     $294 = $src; //@line 537 "emscripten/stb_image.c"
     $295 = (($294) + 4|0); //@line 537 "emscripten/stb_image.c"
     $src = $295; //@line 537 "emscripten/stb_image.c"
     $296 = $dest; //@line 537 "emscripten/stb_image.c"
     $297 = (($296) + 3|0); //@line 537 "emscripten/stb_image.c"
     $dest = $297; //@line 537 "emscripten/stb_image.c"
    }
    break;
   }
   case 34:  {
    $247 = $4; //@line 536 "emscripten/stb_image.c"
    $248 = (($247) - 1)|0; //@line 536 "emscripten/stb_image.c"
    $i = $248; //@line 536 "emscripten/stb_image.c"
    while(1) {
     $249 = $i; //@line 536 "emscripten/stb_image.c"
     $250 = ($249|0)>=(0); //@line 536 "emscripten/stb_image.c"
     if (!($250)) {
      break;
     }
     $251 = $src; //@line 536 "emscripten/stb_image.c"
     $252 = HEAP8[$251>>0]|0; //@line 536 "emscripten/stb_image.c"
     $253 = $252&255; //@line 536 "emscripten/stb_image.c"
     $254 = $src; //@line 536 "emscripten/stb_image.c"
     $255 = (($254) + 1|0); //@line 536 "emscripten/stb_image.c"
     $256 = HEAP8[$255>>0]|0; //@line 536 "emscripten/stb_image.c"
     $257 = $256&255; //@line 536 "emscripten/stb_image.c"
     $258 = $src; //@line 536 "emscripten/stb_image.c"
     $259 = (($258) + 2|0); //@line 536 "emscripten/stb_image.c"
     $260 = HEAP8[$259>>0]|0; //@line 536 "emscripten/stb_image.c"
     $261 = $260&255; //@line 536 "emscripten/stb_image.c"
     $262 = (__ZL9compute_yiii($253,$257,$261)|0); //@line 536 "emscripten/stb_image.c"
     $263 = $dest; //@line 536 "emscripten/stb_image.c"
     HEAP8[$263>>0] = $262; //@line 536 "emscripten/stb_image.c"
     $264 = $src; //@line 536 "emscripten/stb_image.c"
     $265 = (($264) + 3|0); //@line 536 "emscripten/stb_image.c"
     $266 = HEAP8[$265>>0]|0; //@line 536 "emscripten/stb_image.c"
     $267 = $dest; //@line 536 "emscripten/stb_image.c"
     $268 = (($267) + 1|0); //@line 536 "emscripten/stb_image.c"
     HEAP8[$268>>0] = $266; //@line 536 "emscripten/stb_image.c"
     $269 = $i; //@line 536 "emscripten/stb_image.c"
     $270 = (($269) + -1)|0; //@line 536 "emscripten/stb_image.c"
     $i = $270; //@line 536 "emscripten/stb_image.c"
     $271 = $src; //@line 536 "emscripten/stb_image.c"
     $272 = (($271) + 4|0); //@line 536 "emscripten/stb_image.c"
     $src = $272; //@line 536 "emscripten/stb_image.c"
     $273 = $dest; //@line 536 "emscripten/stb_image.c"
     $274 = (($273) + 2|0); //@line 536 "emscripten/stb_image.c"
     $dest = $274; //@line 536 "emscripten/stb_image.c"
    }
    break;
   }
   case 26:  {
    $199 = $4; //@line 534 "emscripten/stb_image.c"
    $200 = (($199) - 1)|0; //@line 534 "emscripten/stb_image.c"
    $i = $200; //@line 534 "emscripten/stb_image.c"
    while(1) {
     $201 = $i; //@line 534 "emscripten/stb_image.c"
     $202 = ($201|0)>=(0); //@line 534 "emscripten/stb_image.c"
     if (!($202)) {
      break;
     }
     $203 = $src; //@line 534 "emscripten/stb_image.c"
     $204 = HEAP8[$203>>0]|0; //@line 534 "emscripten/stb_image.c"
     $205 = $204&255; //@line 534 "emscripten/stb_image.c"
     $206 = $src; //@line 534 "emscripten/stb_image.c"
     $207 = (($206) + 1|0); //@line 534 "emscripten/stb_image.c"
     $208 = HEAP8[$207>>0]|0; //@line 534 "emscripten/stb_image.c"
     $209 = $208&255; //@line 534 "emscripten/stb_image.c"
     $210 = $src; //@line 534 "emscripten/stb_image.c"
     $211 = (($210) + 2|0); //@line 534 "emscripten/stb_image.c"
     $212 = HEAP8[$211>>0]|0; //@line 534 "emscripten/stb_image.c"
     $213 = $212&255; //@line 534 "emscripten/stb_image.c"
     $214 = (__ZL9compute_yiii($205,$209,$213)|0); //@line 534 "emscripten/stb_image.c"
     $215 = $dest; //@line 534 "emscripten/stb_image.c"
     HEAP8[$215>>0] = $214; //@line 534 "emscripten/stb_image.c"
     $216 = $dest; //@line 534 "emscripten/stb_image.c"
     $217 = (($216) + 1|0); //@line 534 "emscripten/stb_image.c"
     HEAP8[$217>>0] = -1; //@line 534 "emscripten/stb_image.c"
     $218 = $i; //@line 534 "emscripten/stb_image.c"
     $219 = (($218) + -1)|0; //@line 534 "emscripten/stb_image.c"
     $i = $219; //@line 534 "emscripten/stb_image.c"
     $220 = $src; //@line 534 "emscripten/stb_image.c"
     $221 = (($220) + 3|0); //@line 534 "emscripten/stb_image.c"
     $src = $221; //@line 534 "emscripten/stb_image.c"
     $222 = $dest; //@line 534 "emscripten/stb_image.c"
     $223 = (($222) + 2|0); //@line 534 "emscripten/stb_image.c"
     $dest = $223; //@line 534 "emscripten/stb_image.c"
    }
    break;
   }
   case 33:  {
    $224 = $4; //@line 535 "emscripten/stb_image.c"
    $225 = (($224) - 1)|0; //@line 535 "emscripten/stb_image.c"
    $i = $225; //@line 535 "emscripten/stb_image.c"
    while(1) {
     $226 = $i; //@line 535 "emscripten/stb_image.c"
     $227 = ($226|0)>=(0); //@line 535 "emscripten/stb_image.c"
     if (!($227)) {
      break;
     }
     $228 = $src; //@line 535 "emscripten/stb_image.c"
     $229 = HEAP8[$228>>0]|0; //@line 535 "emscripten/stb_image.c"
     $230 = $229&255; //@line 535 "emscripten/stb_image.c"
     $231 = $src; //@line 535 "emscripten/stb_image.c"
     $232 = (($231) + 1|0); //@line 535 "emscripten/stb_image.c"
     $233 = HEAP8[$232>>0]|0; //@line 535 "emscripten/stb_image.c"
     $234 = $233&255; //@line 535 "emscripten/stb_image.c"
     $235 = $src; //@line 535 "emscripten/stb_image.c"
     $236 = (($235) + 2|0); //@line 535 "emscripten/stb_image.c"
     $237 = HEAP8[$236>>0]|0; //@line 535 "emscripten/stb_image.c"
     $238 = $237&255; //@line 535 "emscripten/stb_image.c"
     $239 = (__ZL9compute_yiii($230,$234,$238)|0); //@line 535 "emscripten/stb_image.c"
     $240 = $dest; //@line 535 "emscripten/stb_image.c"
     HEAP8[$240>>0] = $239; //@line 535 "emscripten/stb_image.c"
     $241 = $i; //@line 535 "emscripten/stb_image.c"
     $242 = (($241) + -1)|0; //@line 535 "emscripten/stb_image.c"
     $i = $242; //@line 535 "emscripten/stb_image.c"
     $243 = $src; //@line 535 "emscripten/stb_image.c"
     $244 = (($243) + 4|0); //@line 535 "emscripten/stb_image.c"
     $src = $244; //@line 535 "emscripten/stb_image.c"
     $245 = $dest; //@line 535 "emscripten/stb_image.c"
     $246 = (($245) + 1|0); //@line 535 "emscripten/stb_image.c"
     $dest = $246; //@line 535 "emscripten/stb_image.c"
    }
    break;
   }
   default: {
    label = 71;
    break L15;
   }
   }
  } while(0);
  $298 = $j; //@line 517 "emscripten/stb_image.c"
  $299 = (($298) + 1)|0; //@line 517 "emscripten/stb_image.c"
  $j = $299; //@line 517 "emscripten/stb_image.c"
 }
 if ((label|0) == 71) {
  ___assert_fail((28944|0),(26712|0),538,(28928|0)); //@line 538 "emscripten/stb_image.c"
  // unreachable; //@line 538 "emscripten/stb_image.c"
 }
 $300 = $1; //@line 543 "emscripten/stb_image.c"
 _free($300); //@line 543 "emscripten/stb_image.c"
 $301 = $good; //@line 544 "emscripten/stb_image.c"
 $0 = $301; //@line 544 "emscripten/stb_image.c"
 $302 = $0; //@line 545 "emscripten/stb_image.c"
 STACKTOP = sp;return ($302|0); //@line 545 "emscripten/stb_image.c"
}
function __ZL11pic_readvalP4stbiiPh($s,$channel,$dest) {
 $s = $s|0;
 $channel = $channel|0;
 $dest = $dest|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $mask = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = $s;
 $2 = $channel;
 $3 = $dest;
 $mask = 128; //@line 3344 "emscripten/stb_image.c"
 $i = 0; //@line 3346 "emscripten/stb_image.c"
 while(1) {
  $4 = $i; //@line 3346 "emscripten/stb_image.c"
  $5 = ($4|0)<(4); //@line 3346 "emscripten/stb_image.c"
  if (!($5)) {
   label = 9;
   break;
  }
  $6 = $2; //@line 3347 "emscripten/stb_image.c"
  $7 = $mask; //@line 3347 "emscripten/stb_image.c"
  $8 = $6 & $7; //@line 3347 "emscripten/stb_image.c"
  $9 = ($8|0)!=(0); //@line 3347 "emscripten/stb_image.c"
  if ($9) {
   $10 = $1; //@line 3348 "emscripten/stb_image.c"
   $11 = (__ZL6at_eofP4stbi($10)|0); //@line 3348 "emscripten/stb_image.c"
   $12 = ($11|0)!=(0); //@line 3348 "emscripten/stb_image.c"
   if ($12) {
    label = 5;
    break;
   }
   $17 = $1; //@line 3349 "emscripten/stb_image.c"
   $18 = (__ZL5get8uP4stbi($17)|0); //@line 3349 "emscripten/stb_image.c"
   $19 = $i; //@line 3349 "emscripten/stb_image.c"
   $20 = $3; //@line 3349 "emscripten/stb_image.c"
   $21 = (($20) + ($19)|0); //@line 3349 "emscripten/stb_image.c"
   HEAP8[$21>>0] = $18; //@line 3349 "emscripten/stb_image.c"
  }
  $22 = $i; //@line 3346 "emscripten/stb_image.c"
  $23 = (($22) + 1)|0; //@line 3346 "emscripten/stb_image.c"
  $i = $23; //@line 3346 "emscripten/stb_image.c"
  $24 = $mask; //@line 3346 "emscripten/stb_image.c"
  $25 = $24 >> 1; //@line 3346 "emscripten/stb_image.c"
  $mask = $25; //@line 3346 "emscripten/stb_image.c"
 }
 if ((label|0) == 5) {
  $13 = (__ZL1ePKc(28880)|0); //@line 3348 "emscripten/stb_image.c"
  $14 = ($13|0)!=(0); //@line 3348 "emscripten/stb_image.c"
  $15 = $14 ? 0 : 0; //@line 3348 "emscripten/stb_image.c"
  $16 = $15; //@line 3348 "emscripten/stb_image.c"
  $0 = $16; //@line 3348 "emscripten/stb_image.c"
  $27 = $0; //@line 3354 "emscripten/stb_image.c"
  STACKTOP = sp;return ($27|0); //@line 3354 "emscripten/stb_image.c"
 }
 else if ((label|0) == 9) {
  $26 = $3; //@line 3353 "emscripten/stb_image.c"
  $0 = $26; //@line 3353 "emscripten/stb_image.c"
  $27 = $0; //@line 3354 "emscripten/stb_image.c"
  STACKTOP = sp;return ($27|0); //@line 3354 "emscripten/stb_image.c"
 }
 return 0|0;
}
function __ZL11pic_copyvaliPhPKh($channel,$dest,$src) {
 $channel = $channel|0;
 $dest = $dest|0;
 $src = $src|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $i = 0, $mask = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $channel;
 $1 = $dest;
 $2 = $src;
 $mask = 128; //@line 3358 "emscripten/stb_image.c"
 $i = 0; //@line 3360 "emscripten/stb_image.c"
 while(1) {
  $3 = $i; //@line 3360 "emscripten/stb_image.c"
  $4 = ($3|0)<(4); //@line 3360 "emscripten/stb_image.c"
  if (!($4)) {
   break;
  }
  $5 = $0; //@line 3361 "emscripten/stb_image.c"
  $6 = $mask; //@line 3361 "emscripten/stb_image.c"
  $7 = $5 & $6; //@line 3361 "emscripten/stb_image.c"
  $8 = ($7|0)!=(0); //@line 3361 "emscripten/stb_image.c"
  if ($8) {
   $9 = $i; //@line 3362 "emscripten/stb_image.c"
   $10 = $2; //@line 3362 "emscripten/stb_image.c"
   $11 = (($10) + ($9)|0); //@line 3362 "emscripten/stb_image.c"
   $12 = HEAP8[$11>>0]|0; //@line 3362 "emscripten/stb_image.c"
   $13 = $i; //@line 3362 "emscripten/stb_image.c"
   $14 = $1; //@line 3362 "emscripten/stb_image.c"
   $15 = (($14) + ($13)|0); //@line 3362 "emscripten/stb_image.c"
   HEAP8[$15>>0] = $12; //@line 3362 "emscripten/stb_image.c"
  }
  $16 = $i; //@line 3360 "emscripten/stb_image.c"
  $17 = (($16) + 1)|0; //@line 3360 "emscripten/stb_image.c"
  $i = $17; //@line 3360 "emscripten/stb_image.c"
  $18 = $mask; //@line 3360 "emscripten/stb_image.c"
  $19 = $18 >> 1; //@line 3360 "emscripten/stb_image.c"
  $mask = $19; //@line 3360 "emscripten/stb_image.c"
 }
 STACKTOP = sp;return; //@line 3363 "emscripten/stb_image.c"
}
function __ZL8pic_testP4stbi($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $s;
 $2 = $1; //@line 3325 "emscripten/stb_image.c"
 $3 = (__ZL7pic_is4P4stbiPKc($2,28968)|0); //@line 3325 "emscripten/stb_image.c"
 $4 = ($3|0)!=(0); //@line 3325 "emscripten/stb_image.c"
 do {
  if ($4) {
   $i = 0; //@line 3328 "emscripten/stb_image.c"
   while(1) {
    $5 = $i; //@line 3328 "emscripten/stb_image.c"
    $6 = ($5|0)<(84); //@line 3328 "emscripten/stb_image.c"
    if (!($6)) {
     break;
    }
    $7 = $1; //@line 3329 "emscripten/stb_image.c"
    (__ZL4get8P4stbi($7)|0); //@line 3329 "emscripten/stb_image.c"
    $8 = $i; //@line 3328 "emscripten/stb_image.c"
    $9 = (($8) + 1)|0; //@line 3328 "emscripten/stb_image.c"
    $i = $9; //@line 3328 "emscripten/stb_image.c"
   }
   $10 = $1; //@line 3331 "emscripten/stb_image.c"
   $11 = (__ZL7pic_is4P4stbiPKc($10,28976)|0); //@line 3331 "emscripten/stb_image.c"
   $12 = ($11|0)!=(0); //@line 3331 "emscripten/stb_image.c"
   if ($12) {
    $0 = 1; //@line 3334 "emscripten/stb_image.c"
    break;
   } else {
    $0 = 0; //@line 3332 "emscripten/stb_image.c"
    break;
   }
  } else {
   $0 = 0; //@line 3326 "emscripten/stb_image.c"
  }
 } while(0);
 $13 = $0; //@line 3334 "emscripten/stb_image.c"
 STACKTOP = sp;return ($13|0); //@line 3334 "emscripten/stb_image.c"
}
function __ZL7pic_is4P4stbiPKc($s,$str) {
 $s = $s|0;
 $str = $str|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $s;
 $2 = $str;
 $i = 0; //@line 3314 "emscripten/stb_image.c"
 while(1) {
  $3 = $i; //@line 3314 "emscripten/stb_image.c"
  $4 = ($3|0)<(4); //@line 3314 "emscripten/stb_image.c"
  if (!($4)) {
   label = 7;
   break;
  }
  $5 = $1; //@line 3315 "emscripten/stb_image.c"
  $6 = (__ZL4get8P4stbi($5)|0); //@line 3315 "emscripten/stb_image.c"
  $7 = $i; //@line 3315 "emscripten/stb_image.c"
  $8 = $2; //@line 3315 "emscripten/stb_image.c"
  $9 = (($8) + ($7)|0); //@line 3315 "emscripten/stb_image.c"
  $10 = HEAP8[$9>>0]|0; //@line 3315 "emscripten/stb_image.c"
  $11 = $10&255; //@line 3315 "emscripten/stb_image.c"
  $12 = ($6|0)!=($11|0); //@line 3315 "emscripten/stb_image.c"
  if ($12) {
   label = 4;
   break;
  }
  $13 = $i; //@line 3314 "emscripten/stb_image.c"
  $14 = (($13) + 1)|0; //@line 3314 "emscripten/stb_image.c"
  $i = $14; //@line 3314 "emscripten/stb_image.c"
 }
 if ((label|0) == 4) {
  $0 = 0; //@line 3316 "emscripten/stb_image.c"
  $15 = $0; //@line 3318 "emscripten/stb_image.c"
  STACKTOP = sp;return ($15|0); //@line 3318 "emscripten/stb_image.c"
 }
 else if ((label|0) == 7) {
  $0 = 1; //@line 3318 "emscripten/stb_image.c"
  $15 = $0; //@line 3318 "emscripten/stb_image.c"
  STACKTOP = sp;return ($15|0); //@line 3318 "emscripten/stb_image.c"
 }
 return 0|0;
}
function __ZL8psd_loadP4stbiPiS1_S1_i($s,$x,$y,$comp,$req_comp) {
 $s = $s|0;
 $x = $x|0;
 $y = $y|0;
 $comp = $comp|0;
 $req_comp = $req_comp|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $channel = 0, $channelCount = 0, $compression = 0, $count = 0, $h = 0, $i = 0, $len = 0, $out = 0, $p = 0, $p1 = 0, $pixelCount = 0, $val = 0, $w = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $1 = $s;
 $2 = $x;
 $3 = $y;
 $4 = $comp;
 $5 = $req_comp;
 $6 = $1; //@line 3150 "emscripten/stb_image.c"
 $7 = (__ZL5get32P4stbi($6)|0); //@line 3150 "emscripten/stb_image.c"
 $8 = ($7|0)!=(943870035); //@line 3150 "emscripten/stb_image.c"
 if ($8) {
  $9 = (__ZL1ePKc(28984)|0); //@line 3151 "emscripten/stb_image.c"
  $10 = ($9|0)!=(0); //@line 3151 "emscripten/stb_image.c"
  $11 = $10 ? 0 : 0; //@line 3151 "emscripten/stb_image.c"
  $12 = $11; //@line 3151 "emscripten/stb_image.c"
  $0 = $12; //@line 3151 "emscripten/stb_image.c"
  $204 = $0; //@line 3297 "emscripten/stb_image.c"
  STACKTOP = sp;return ($204|0); //@line 3297 "emscripten/stb_image.c"
 }
 $13 = $1; //@line 3154 "emscripten/stb_image.c"
 $14 = (__ZL5get16P4stbi($13)|0); //@line 3154 "emscripten/stb_image.c"
 $15 = ($14|0)!=(1); //@line 3154 "emscripten/stb_image.c"
 if ($15) {
  $16 = (__ZL1ePKc(28992)|0); //@line 3155 "emscripten/stb_image.c"
  $17 = ($16|0)!=(0); //@line 3155 "emscripten/stb_image.c"
  $18 = $17 ? 0 : 0; //@line 3155 "emscripten/stb_image.c"
  $19 = $18; //@line 3155 "emscripten/stb_image.c"
  $0 = $19; //@line 3155 "emscripten/stb_image.c"
  $204 = $0; //@line 3297 "emscripten/stb_image.c"
  STACKTOP = sp;return ($204|0); //@line 3297 "emscripten/stb_image.c"
 }
 $20 = $1; //@line 3158 "emscripten/stb_image.c"
 __ZL4skipP4stbii($20,6); //@line 3158 "emscripten/stb_image.c"
 $21 = $1; //@line 3161 "emscripten/stb_image.c"
 $22 = (__ZL5get16P4stbi($21)|0); //@line 3161 "emscripten/stb_image.c"
 $channelCount = $22; //@line 3161 "emscripten/stb_image.c"
 $23 = $channelCount; //@line 3162 "emscripten/stb_image.c"
 $24 = ($23|0)<(0); //@line 3162 "emscripten/stb_image.c"
 if (!($24)) {
  $25 = $channelCount; //@line 3162 "emscripten/stb_image.c"
  $26 = ($25|0)>(16); //@line 3162 "emscripten/stb_image.c"
  if (!($26)) {
   $31 = $1; //@line 3166 "emscripten/stb_image.c"
   $32 = (__ZL5get32P4stbi($31)|0); //@line 3166 "emscripten/stb_image.c"
   $h = $32; //@line 3166 "emscripten/stb_image.c"
   $33 = $1; //@line 3167 "emscripten/stb_image.c"
   $34 = (__ZL5get32P4stbi($33)|0); //@line 3167 "emscripten/stb_image.c"
   $w = $34; //@line 3167 "emscripten/stb_image.c"
   $35 = $1; //@line 3170 "emscripten/stb_image.c"
   $36 = (__ZL5get16P4stbi($35)|0); //@line 3170 "emscripten/stb_image.c"
   $37 = ($36|0)!=(8); //@line 3170 "emscripten/stb_image.c"
   if ($37) {
    $38 = (__ZL1ePKc(29032)|0); //@line 3171 "emscripten/stb_image.c"
    $39 = ($38|0)!=(0); //@line 3171 "emscripten/stb_image.c"
    $40 = $39 ? 0 : 0; //@line 3171 "emscripten/stb_image.c"
    $41 = $40; //@line 3171 "emscripten/stb_image.c"
    $0 = $41; //@line 3171 "emscripten/stb_image.c"
    $204 = $0; //@line 3297 "emscripten/stb_image.c"
    STACKTOP = sp;return ($204|0); //@line 3297 "emscripten/stb_image.c"
   }
   $42 = $1; //@line 3183 "emscripten/stb_image.c"
   $43 = (__ZL5get16P4stbi($42)|0); //@line 3183 "emscripten/stb_image.c"
   $44 = ($43|0)!=(3); //@line 3183 "emscripten/stb_image.c"
   if ($44) {
    $45 = (__ZL1ePKc(29056)|0); //@line 3184 "emscripten/stb_image.c"
    $46 = ($45|0)!=(0); //@line 3184 "emscripten/stb_image.c"
    $47 = $46 ? 0 : 0; //@line 3184 "emscripten/stb_image.c"
    $48 = $47; //@line 3184 "emscripten/stb_image.c"
    $0 = $48; //@line 3184 "emscripten/stb_image.c"
    $204 = $0; //@line 3297 "emscripten/stb_image.c"
    STACKTOP = sp;return ($204|0); //@line 3297 "emscripten/stb_image.c"
   }
   $49 = $1; //@line 3187 "emscripten/stb_image.c"
   $50 = $1; //@line 3187 "emscripten/stb_image.c"
   $51 = (__ZL5get32P4stbi($50)|0); //@line 3187 "emscripten/stb_image.c"
   __ZL4skipP4stbii($49,$51); //@line 3187 "emscripten/stb_image.c"
   $52 = $1; //@line 3190 "emscripten/stb_image.c"
   $53 = $1; //@line 3190 "emscripten/stb_image.c"
   $54 = (__ZL5get32P4stbi($53)|0); //@line 3190 "emscripten/stb_image.c"
   __ZL4skipP4stbii($52,$54); //@line 3190 "emscripten/stb_image.c"
   $55 = $1; //@line 3193 "emscripten/stb_image.c"
   $56 = $1; //@line 3193 "emscripten/stb_image.c"
   $57 = (__ZL5get32P4stbi($56)|0); //@line 3193 "emscripten/stb_image.c"
   __ZL4skipP4stbii($55,$57); //@line 3193 "emscripten/stb_image.c"
   $58 = $1; //@line 3199 "emscripten/stb_image.c"
   $59 = (__ZL5get16P4stbi($58)|0); //@line 3199 "emscripten/stb_image.c"
   $compression = $59; //@line 3199 "emscripten/stb_image.c"
   $60 = $compression; //@line 3200 "emscripten/stb_image.c"
   $61 = ($60|0)>(1); //@line 3200 "emscripten/stb_image.c"
   if ($61) {
    $62 = (__ZL1ePKc(28848)|0); //@line 3201 "emscripten/stb_image.c"
    $63 = ($62|0)!=(0); //@line 3201 "emscripten/stb_image.c"
    $64 = $63 ? 0 : 0; //@line 3201 "emscripten/stb_image.c"
    $65 = $64; //@line 3201 "emscripten/stb_image.c"
    $0 = $65; //@line 3201 "emscripten/stb_image.c"
    $204 = $0; //@line 3297 "emscripten/stb_image.c"
    STACKTOP = sp;return ($204|0); //@line 3297 "emscripten/stb_image.c"
   }
   $66 = $w; //@line 3204 "emscripten/stb_image.c"
   $67 = $66<<2; //@line 3204 "emscripten/stb_image.c"
   $68 = $h; //@line 3204 "emscripten/stb_image.c"
   $69 = Math_imul($67, $68)|0; //@line 3204 "emscripten/stb_image.c"
   $70 = (_malloc($69)|0); //@line 3204 "emscripten/stb_image.c"
   $out = $70; //@line 3204 "emscripten/stb_image.c"
   $71 = $out; //@line 3205 "emscripten/stb_image.c"
   $72 = ($71|0)!=(0|0); //@line 3205 "emscripten/stb_image.c"
   if (!($72)) {
    $73 = (__ZL1ePKc(26624)|0); //@line 3205 "emscripten/stb_image.c"
    $74 = ($73|0)!=(0); //@line 3205 "emscripten/stb_image.c"
    $75 = $74 ? 0 : 0; //@line 3205 "emscripten/stb_image.c"
    $76 = $75; //@line 3205 "emscripten/stb_image.c"
    $0 = $76; //@line 3205 "emscripten/stb_image.c"
    $204 = $0; //@line 3297 "emscripten/stb_image.c"
    STACKTOP = sp;return ($204|0); //@line 3297 "emscripten/stb_image.c"
   }
   $77 = $w; //@line 3206 "emscripten/stb_image.c"
   $78 = $h; //@line 3206 "emscripten/stb_image.c"
   $79 = Math_imul($77, $78)|0; //@line 3206 "emscripten/stb_image.c"
   $pixelCount = $79; //@line 3206 "emscripten/stb_image.c"
   $80 = $compression; //@line 3212 "emscripten/stb_image.c"
   $81 = ($80|0)!=(0); //@line 3212 "emscripten/stb_image.c"
   if ($81) {
    $82 = $1; //@line 3223 "emscripten/stb_image.c"
    $83 = $h; //@line 3223 "emscripten/stb_image.c"
    $84 = $channelCount; //@line 3223 "emscripten/stb_image.c"
    $85 = Math_imul($83, $84)|0; //@line 3223 "emscripten/stb_image.c"
    $86 = $85<<1; //@line 3223 "emscripten/stb_image.c"
    __ZL4skipP4stbii($82,$86); //@line 3223 "emscripten/stb_image.c"
    $channel = 0; //@line 3226 "emscripten/stb_image.c"
    while(1) {
     $87 = $channel; //@line 3226 "emscripten/stb_image.c"
     $88 = ($87|0)<(4); //@line 3226 "emscripten/stb_image.c"
     if (!($88)) {
      break;
     }
     $89 = $out; //@line 3229 "emscripten/stb_image.c"
     $90 = $channel; //@line 3229 "emscripten/stb_image.c"
     $91 = (($89) + ($90)|0); //@line 3229 "emscripten/stb_image.c"
     $p = $91; //@line 3229 "emscripten/stb_image.c"
     $92 = $channel; //@line 3230 "emscripten/stb_image.c"
     $93 = $channelCount; //@line 3230 "emscripten/stb_image.c"
     $94 = ($92|0)>=($93|0); //@line 3230 "emscripten/stb_image.c"
     if ($94) {
      $i = 0; //@line 3232 "emscripten/stb_image.c"
      while(1) {
       $95 = $i; //@line 3232 "emscripten/stb_image.c"
       $96 = $pixelCount; //@line 3232 "emscripten/stb_image.c"
       $97 = ($95|0)<($96|0); //@line 3232 "emscripten/stb_image.c"
       if (!($97)) {
        break;
       }
       $98 = $channel; //@line 3232 "emscripten/stb_image.c"
       $99 = ($98|0)==(3); //@line 3232 "emscripten/stb_image.c"
       $100 = $99 ? 255 : 0; //@line 3232 "emscripten/stb_image.c"
       $101 = $100&255; //@line 3232 "emscripten/stb_image.c"
       $102 = $p; //@line 3232 "emscripten/stb_image.c"
       HEAP8[$102>>0] = $101; //@line 3232 "emscripten/stb_image.c"
       $103 = $p; //@line 3232 "emscripten/stb_image.c"
       $104 = (($103) + 4|0); //@line 3232 "emscripten/stb_image.c"
       $p = $104; //@line 3232 "emscripten/stb_image.c"
       $105 = $i; //@line 3232 "emscripten/stb_image.c"
       $106 = (($105) + 1)|0; //@line 3232 "emscripten/stb_image.c"
       $i = $106; //@line 3232 "emscripten/stb_image.c"
      }
     } else {
      $count = 0; //@line 3235 "emscripten/stb_image.c"
      while(1) {
       $107 = $count; //@line 3236 "emscripten/stb_image.c"
       $108 = $pixelCount; //@line 3236 "emscripten/stb_image.c"
       $109 = ($107|0)<($108|0); //@line 3236 "emscripten/stb_image.c"
       if (!($109)) {
        break;
       }
       $110 = $1; //@line 3237 "emscripten/stb_image.c"
       $111 = (__ZL4get8P4stbi($110)|0); //@line 3237 "emscripten/stb_image.c"
       $len = $111; //@line 3237 "emscripten/stb_image.c"
       $112 = $len; //@line 3238 "emscripten/stb_image.c"
       $113 = ($112|0)==(128); //@line 3238 "emscripten/stb_image.c"
       if ($113) {
       } else {
        $114 = $len; //@line 3240 "emscripten/stb_image.c"
        $115 = ($114|0)<(128); //@line 3240 "emscripten/stb_image.c"
        if ($115) {
         $116 = $len; //@line 3242 "emscripten/stb_image.c"
         $117 = (($116) + 1)|0; //@line 3242 "emscripten/stb_image.c"
         $len = $117; //@line 3242 "emscripten/stb_image.c"
         $118 = $len; //@line 3243 "emscripten/stb_image.c"
         $119 = $count; //@line 3243 "emscripten/stb_image.c"
         $120 = (($119) + ($118))|0; //@line 3243 "emscripten/stb_image.c"
         $count = $120; //@line 3243 "emscripten/stb_image.c"
         while(1) {
          $121 = $len; //@line 3244 "emscripten/stb_image.c"
          $122 = ($121|0)!=(0); //@line 3244 "emscripten/stb_image.c"
          if (!($122)) {
           break;
          }
          $123 = $1; //@line 3245 "emscripten/stb_image.c"
          $124 = (__ZL5get8uP4stbi($123)|0); //@line 3245 "emscripten/stb_image.c"
          $125 = $p; //@line 3245 "emscripten/stb_image.c"
          HEAP8[$125>>0] = $124; //@line 3245 "emscripten/stb_image.c"
          $126 = $p; //@line 3246 "emscripten/stb_image.c"
          $127 = (($126) + 4|0); //@line 3246 "emscripten/stb_image.c"
          $p = $127; //@line 3246 "emscripten/stb_image.c"
          $128 = $len; //@line 3247 "emscripten/stb_image.c"
          $129 = (($128) + -1)|0; //@line 3247 "emscripten/stb_image.c"
          $len = $129; //@line 3247 "emscripten/stb_image.c"
         }
        } else {
         $130 = $len; //@line 3249 "emscripten/stb_image.c"
         $131 = ($130|0)>(128); //@line 3249 "emscripten/stb_image.c"
         if ($131) {
          $132 = $len; //@line 3253 "emscripten/stb_image.c"
          $133 = $132 ^ 255; //@line 3253 "emscripten/stb_image.c"
          $len = $133; //@line 3253 "emscripten/stb_image.c"
          $134 = $len; //@line 3254 "emscripten/stb_image.c"
          $135 = (($134) + 2)|0; //@line 3254 "emscripten/stb_image.c"
          $len = $135; //@line 3254 "emscripten/stb_image.c"
          $136 = $1; //@line 3255 "emscripten/stb_image.c"
          $137 = (__ZL5get8uP4stbi($136)|0); //@line 3255 "emscripten/stb_image.c"
          $val = $137; //@line 3255 "emscripten/stb_image.c"
          $138 = $len; //@line 3256 "emscripten/stb_image.c"
          $139 = $count; //@line 3256 "emscripten/stb_image.c"
          $140 = (($139) + ($138))|0; //@line 3256 "emscripten/stb_image.c"
          $count = $140; //@line 3256 "emscripten/stb_image.c"
          while(1) {
           $141 = $len; //@line 3257 "emscripten/stb_image.c"
           $142 = ($141|0)!=(0); //@line 3257 "emscripten/stb_image.c"
           if (!($142)) {
            break;
           }
           $143 = $val; //@line 3258 "emscripten/stb_image.c"
           $144 = $p; //@line 3258 "emscripten/stb_image.c"
           HEAP8[$144>>0] = $143; //@line 3258 "emscripten/stb_image.c"
           $145 = $p; //@line 3259 "emscripten/stb_image.c"
           $146 = (($145) + 4|0); //@line 3259 "emscripten/stb_image.c"
           $p = $146; //@line 3259 "emscripten/stb_image.c"
           $147 = $len; //@line 3260 "emscripten/stb_image.c"
           $148 = (($147) + -1)|0; //@line 3260 "emscripten/stb_image.c"
           $len = $148; //@line 3260 "emscripten/stb_image.c"
          }
         }
        }
       }
      }
     }
     $149 = $channel; //@line 3226 "emscripten/stb_image.c"
     $150 = (($149) + 1)|0; //@line 3226 "emscripten/stb_image.c"
     $channel = $150; //@line 3226 "emscripten/stb_image.c"
    }
   } else {
    $channel = 0; //@line 3272 "emscripten/stb_image.c"
    while(1) {
     $151 = $channel; //@line 3272 "emscripten/stb_image.c"
     $152 = ($151|0)<(4); //@line 3272 "emscripten/stb_image.c"
     if (!($152)) {
      break;
     }
     $153 = $out; //@line 3275 "emscripten/stb_image.c"
     $154 = $channel; //@line 3275 "emscripten/stb_image.c"
     $155 = (($153) + ($154)|0); //@line 3275 "emscripten/stb_image.c"
     $p1 = $155; //@line 3275 "emscripten/stb_image.c"
     $156 = $channel; //@line 3276 "emscripten/stb_image.c"
     $157 = $channelCount; //@line 3276 "emscripten/stb_image.c"
     $158 = ($156|0)>($157|0); //@line 3276 "emscripten/stb_image.c"
     if ($158) {
      $i = 0; //@line 3278 "emscripten/stb_image.c"
      while(1) {
       $159 = $i; //@line 3278 "emscripten/stb_image.c"
       $160 = $pixelCount; //@line 3278 "emscripten/stb_image.c"
       $161 = ($159|0)<($160|0); //@line 3278 "emscripten/stb_image.c"
       if (!($161)) {
        break;
       }
       $162 = $channel; //@line 3278 "emscripten/stb_image.c"
       $163 = ($162|0)==(3); //@line 3278 "emscripten/stb_image.c"
       $164 = $163 ? 255 : 0; //@line 3278 "emscripten/stb_image.c"
       $165 = $164&255; //@line 3278 "emscripten/stb_image.c"
       $166 = $p1; //@line 3278 "emscripten/stb_image.c"
       HEAP8[$166>>0] = $165; //@line 3278 "emscripten/stb_image.c"
       $167 = $p1; //@line 3278 "emscripten/stb_image.c"
       $168 = (($167) + 4|0); //@line 3278 "emscripten/stb_image.c"
       $p1 = $168; //@line 3278 "emscripten/stb_image.c"
       $169 = $i; //@line 3278 "emscripten/stb_image.c"
       $170 = (($169) + 1)|0; //@line 3278 "emscripten/stb_image.c"
       $i = $170; //@line 3278 "emscripten/stb_image.c"
      }
     } else {
      $i = 0; //@line 3281 "emscripten/stb_image.c"
      while(1) {
       $171 = $i; //@line 3281 "emscripten/stb_image.c"
       $172 = $pixelCount; //@line 3281 "emscripten/stb_image.c"
       $173 = ($171|0)<($172|0); //@line 3281 "emscripten/stb_image.c"
       if (!($173)) {
        break;
       }
       $174 = $1; //@line 3282 "emscripten/stb_image.c"
       $175 = (__ZL5get8uP4stbi($174)|0); //@line 3282 "emscripten/stb_image.c"
       $176 = $p1; //@line 3282 "emscripten/stb_image.c"
       HEAP8[$176>>0] = $175; //@line 3282 "emscripten/stb_image.c"
       $177 = $p1; //@line 3282 "emscripten/stb_image.c"
       $178 = (($177) + 4|0); //@line 3282 "emscripten/stb_image.c"
       $p1 = $178; //@line 3282 "emscripten/stb_image.c"
       $179 = $i; //@line 3281 "emscripten/stb_image.c"
       $180 = (($179) + 1)|0; //@line 3281 "emscripten/stb_image.c"
       $i = $180; //@line 3281 "emscripten/stb_image.c"
      }
     }
     $181 = $channel; //@line 3272 "emscripten/stb_image.c"
     $182 = (($181) + 1)|0; //@line 3272 "emscripten/stb_image.c"
     $channel = $182; //@line 3272 "emscripten/stb_image.c"
    }
   }
   $183 = $5; //@line 3287 "emscripten/stb_image.c"
   $184 = ($183|0)!=(0); //@line 3287 "emscripten/stb_image.c"
   do {
    if ($184) {
     $185 = $5; //@line 3287 "emscripten/stb_image.c"
     $186 = ($185|0)!=(4); //@line 3287 "emscripten/stb_image.c"
     if ($186) {
      $187 = $out; //@line 3288 "emscripten/stb_image.c"
      $188 = $5; //@line 3288 "emscripten/stb_image.c"
      $189 = $w; //@line 3288 "emscripten/stb_image.c"
      $190 = $h; //@line 3288 "emscripten/stb_image.c"
      $191 = (__ZL14convert_formatPhiijj($187,4,$188,$189,$190)|0); //@line 3288 "emscripten/stb_image.c"
      $out = $191; //@line 3288 "emscripten/stb_image.c"
      $192 = $out; //@line 3289 "emscripten/stb_image.c"
      $193 = ($192|0)==(0|0); //@line 3289 "emscripten/stb_image.c"
      if (!($193)) {
       break;
      }
      $194 = $out; //@line 3289 "emscripten/stb_image.c"
      $0 = $194; //@line 3289 "emscripten/stb_image.c"
      $204 = $0; //@line 3297 "emscripten/stb_image.c"
      STACKTOP = sp;return ($204|0); //@line 3297 "emscripten/stb_image.c"
     }
    }
   } while(0);
   $195 = $4; //@line 3292 "emscripten/stb_image.c"
   $196 = ($195|0)!=(0|0); //@line 3292 "emscripten/stb_image.c"
   if ($196) {
    $197 = $channelCount; //@line 3292 "emscripten/stb_image.c"
    $198 = $4; //@line 3292 "emscripten/stb_image.c"
    HEAP32[$198>>2] = $197; //@line 3292 "emscripten/stb_image.c"
   }
   $199 = $h; //@line 3293 "emscripten/stb_image.c"
   $200 = $3; //@line 3293 "emscripten/stb_image.c"
   HEAP32[$200>>2] = $199; //@line 3293 "emscripten/stb_image.c"
   $201 = $w; //@line 3294 "emscripten/stb_image.c"
   $202 = $2; //@line 3294 "emscripten/stb_image.c"
   HEAP32[$202>>2] = $201; //@line 3294 "emscripten/stb_image.c"
   $203 = $out; //@line 3296 "emscripten/stb_image.c"
   $0 = $203; //@line 3296 "emscripten/stb_image.c"
   $204 = $0; //@line 3297 "emscripten/stb_image.c"
   STACKTOP = sp;return ($204|0); //@line 3297 "emscripten/stb_image.c"
  }
 }
 $27 = (__ZL1ePKc(29008)|0); //@line 3163 "emscripten/stb_image.c"
 $28 = ($27|0)!=(0); //@line 3163 "emscripten/stb_image.c"
 $29 = $28 ? 0 : 0; //@line 3163 "emscripten/stb_image.c"
 $30 = $29; //@line 3163 "emscripten/stb_image.c"
 $0 = $30; //@line 3163 "emscripten/stb_image.c"
 $204 = $0; //@line 3297 "emscripten/stb_image.c"
 STACKTOP = sp;return ($204|0); //@line 3297 "emscripten/stb_image.c"
}
function __ZL8psd_testP4stbi($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $s;
 $2 = $1; //@line 3130 "emscripten/stb_image.c"
 $3 = (__ZL5get32P4stbi($2)|0); //@line 3130 "emscripten/stb_image.c"
 $4 = ($3|0)!=(943870035); //@line 3130 "emscripten/stb_image.c"
 if ($4) {
  $0 = 0; //@line 3130 "emscripten/stb_image.c"
 } else {
  $0 = 1; //@line 3131 "emscripten/stb_image.c"
 }
 $5 = $0; //@line 3131 "emscripten/stb_image.c"
 STACKTOP = sp;return ($5|0); //@line 3131 "emscripten/stb_image.c"
}
function __ZL18stbi_gif_load_nextP4stbiP15stbi_gif_structPii($s,$g,$comp,$req_comp) {
 $s = $s|0;
 $g = $g|0;
 $comp = $comp|0;
 $req_comp = $req_comp|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $h = 0, $i = 0, $len = 0;
 var $o = 0, $old_out = 0, $w = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $1 = $s;
 $2 = $g;
 $3 = $comp;
 $4 = $req_comp;
 $old_out = 0; //@line 3745 "emscripten/stb_image.c"
 $5 = $2; //@line 3747 "emscripten/stb_image.c"
 $6 = (($5) + 8|0); //@line 3747 "emscripten/stb_image.c"
 $7 = HEAP32[$6>>2]|0; //@line 3747 "emscripten/stb_image.c"
 $8 = ($7|0)==(0|0); //@line 3747 "emscripten/stb_image.c"
 do {
  if ($8) {
   $9 = $1; //@line 3748 "emscripten/stb_image.c"
   $10 = $2; //@line 3748 "emscripten/stb_image.c"
   $11 = $3; //@line 3748 "emscripten/stb_image.c"
   $12 = (__ZL15stbi_gif_headerP4stbiP15stbi_gif_structPii($9,$10,$11,0)|0); //@line 3748 "emscripten/stb_image.c"
   $13 = ($12|0)!=(0); //@line 3748 "emscripten/stb_image.c"
   if (!($13)) {
    $0 = 0; //@line 3748 "emscripten/stb_image.c"
    $276 = $0; //@line 3840 "emscripten/stb_image.c"
    STACKTOP = sp;return ($276|0); //@line 3840 "emscripten/stb_image.c"
   }
   $14 = $2; //@line 3749 "emscripten/stb_image.c"
   $15 = HEAP32[$14>>2]|0; //@line 3749 "emscripten/stb_image.c"
   $16 = $15<<2; //@line 3749 "emscripten/stb_image.c"
   $17 = $2; //@line 3749 "emscripten/stb_image.c"
   $18 = (($17) + 4|0); //@line 3749 "emscripten/stb_image.c"
   $19 = HEAP32[$18>>2]|0; //@line 3749 "emscripten/stb_image.c"
   $20 = Math_imul($16, $19)|0; //@line 3749 "emscripten/stb_image.c"
   $21 = (_malloc($20)|0); //@line 3749 "emscripten/stb_image.c"
   $22 = $2; //@line 3749 "emscripten/stb_image.c"
   $23 = (($22) + 8|0); //@line 3749 "emscripten/stb_image.c"
   HEAP32[$23>>2] = $21; //@line 3749 "emscripten/stb_image.c"
   $24 = $2; //@line 3750 "emscripten/stb_image.c"
   $25 = (($24) + 8|0); //@line 3750 "emscripten/stb_image.c"
   $26 = HEAP32[$25>>2]|0; //@line 3750 "emscripten/stb_image.c"
   $27 = ($26|0)==(0|0); //@line 3750 "emscripten/stb_image.c"
   if (!($27)) {
    $32 = $2; //@line 3751 "emscripten/stb_image.c"
    __ZL24stbi_fill_gif_backgroundP15stbi_gif_struct($32); //@line 3751 "emscripten/stb_image.c"
    break;
   }
   $28 = (__ZL1ePKc(26624)|0); //@line 3750 "emscripten/stb_image.c"
   $29 = ($28|0)!=(0); //@line 3750 "emscripten/stb_image.c"
   $30 = $29 ? 0 : 0; //@line 3750 "emscripten/stb_image.c"
   $31 = $30; //@line 3750 "emscripten/stb_image.c"
   $0 = $31; //@line 3750 "emscripten/stb_image.c"
   $276 = $0; //@line 3840 "emscripten/stb_image.c"
   STACKTOP = sp;return ($276|0); //@line 3840 "emscripten/stb_image.c"
  } else {
   $33 = $2; //@line 3754 "emscripten/stb_image.c"
   $34 = (($33) + 28|0); //@line 3754 "emscripten/stb_image.c"
   $35 = HEAP32[$34>>2]|0; //@line 3754 "emscripten/stb_image.c"
   $36 = $35 & 28; //@line 3754 "emscripten/stb_image.c"
   $37 = $36 >> 2; //@line 3754 "emscripten/stb_image.c"
   $38 = ($37|0)==(3); //@line 3754 "emscripten/stb_image.c"
   do {
    if ($38) {
     $39 = $2; //@line 3755 "emscripten/stb_image.c"
     $40 = (($39) + 8|0); //@line 3755 "emscripten/stb_image.c"
     $41 = HEAP32[$40>>2]|0; //@line 3755 "emscripten/stb_image.c"
     $old_out = $41; //@line 3755 "emscripten/stb_image.c"
     $42 = $2; //@line 3756 "emscripten/stb_image.c"
     $43 = HEAP32[$42>>2]|0; //@line 3756 "emscripten/stb_image.c"
     $44 = $43<<2; //@line 3756 "emscripten/stb_image.c"
     $45 = $2; //@line 3756 "emscripten/stb_image.c"
     $46 = (($45) + 4|0); //@line 3756 "emscripten/stb_image.c"
     $47 = HEAP32[$46>>2]|0; //@line 3756 "emscripten/stb_image.c"
     $48 = Math_imul($44, $47)|0; //@line 3756 "emscripten/stb_image.c"
     $49 = (_malloc($48)|0); //@line 3756 "emscripten/stb_image.c"
     $50 = $2; //@line 3756 "emscripten/stb_image.c"
     $51 = (($50) + 8|0); //@line 3756 "emscripten/stb_image.c"
     HEAP32[$51>>2] = $49; //@line 3756 "emscripten/stb_image.c"
     $52 = $2; //@line 3757 "emscripten/stb_image.c"
     $53 = (($52) + 8|0); //@line 3757 "emscripten/stb_image.c"
     $54 = HEAP32[$53>>2]|0; //@line 3757 "emscripten/stb_image.c"
     $55 = ($54|0)==(0|0); //@line 3757 "emscripten/stb_image.c"
     if (!($55)) {
      $60 = $2; //@line 3758 "emscripten/stb_image.c"
      $61 = (($60) + 8|0); //@line 3758 "emscripten/stb_image.c"
      $62 = HEAP32[$61>>2]|0; //@line 3758 "emscripten/stb_image.c"
      $63 = $old_out; //@line 3758 "emscripten/stb_image.c"
      $64 = $2; //@line 3758 "emscripten/stb_image.c"
      $65 = HEAP32[$64>>2]|0; //@line 3758 "emscripten/stb_image.c"
      $66 = $2; //@line 3758 "emscripten/stb_image.c"
      $67 = (($66) + 4|0); //@line 3758 "emscripten/stb_image.c"
      $68 = HEAP32[$67>>2]|0; //@line 3758 "emscripten/stb_image.c"
      $69 = Math_imul($65, $68)|0; //@line 3758 "emscripten/stb_image.c"
      $70 = $69<<2; //@line 3758 "emscripten/stb_image.c"
      _memcpy(($62|0),($63|0),($70|0))|0; //@line 3758 "emscripten/stb_image.c"
      break;
     }
     $56 = (__ZL1ePKc(26624)|0); //@line 3757 "emscripten/stb_image.c"
     $57 = ($56|0)!=(0); //@line 3757 "emscripten/stb_image.c"
     $58 = $57 ? 0 : 0; //@line 3757 "emscripten/stb_image.c"
     $59 = $58; //@line 3757 "emscripten/stb_image.c"
     $0 = $59; //@line 3757 "emscripten/stb_image.c"
     $276 = $0; //@line 3840 "emscripten/stb_image.c"
     STACKTOP = sp;return ($276|0); //@line 3840 "emscripten/stb_image.c"
    }
   } while(0);
  }
 } while(0);
 while(1) {
  $71 = $1; //@line 3763 "emscripten/stb_image.c"
  $72 = (__ZL4get8P4stbi($71)|0); //@line 3763 "emscripten/stb_image.c"
  if ((($72|0) == 44)) {
   label = 14;
   break;
  } else if ((($72|0) == 59)) {
   label = 51;
   break;
  } else if (!((($72|0) == 33))) {
   label = 52;
   break;
  }
  $249 = $1; //@line 3817 "emscripten/stb_image.c"
  $250 = (__ZL4get8P4stbi($249)|0); //@line 3817 "emscripten/stb_image.c"
  $251 = ($250|0)==(249); //@line 3817 "emscripten/stb_image.c"
  do {
   if ($251) {
    $252 = $1; //@line 3818 "emscripten/stb_image.c"
    $253 = (__ZL4get8P4stbi($252)|0); //@line 3818 "emscripten/stb_image.c"
    $len = $253; //@line 3818 "emscripten/stb_image.c"
    $254 = $len; //@line 3819 "emscripten/stb_image.c"
    $255 = ($254|0)==(4); //@line 3819 "emscripten/stb_image.c"
    if (!($255)) {
     $265 = $1; //@line 3824 "emscripten/stb_image.c"
     $266 = $len; //@line 3824 "emscripten/stb_image.c"
     __ZL4skipP4stbii($265,$266); //@line 3824 "emscripten/stb_image.c"
     break;
    }
    $256 = $1; //@line 3820 "emscripten/stb_image.c"
    $257 = (__ZL4get8P4stbi($256)|0); //@line 3820 "emscripten/stb_image.c"
    $258 = $2; //@line 3820 "emscripten/stb_image.c"
    $259 = (($258) + 28|0); //@line 3820 "emscripten/stb_image.c"
    HEAP32[$259>>2] = $257; //@line 3820 "emscripten/stb_image.c"
    $260 = $1; //@line 3821 "emscripten/stb_image.c"
    (__ZL7get16leP4stbi($260)|0); //@line 3821 "emscripten/stb_image.c"
    $261 = $1; //@line 3822 "emscripten/stb_image.c"
    $262 = (__ZL4get8P4stbi($261)|0); //@line 3822 "emscripten/stb_image.c"
    $263 = $2; //@line 3822 "emscripten/stb_image.c"
    $264 = (($263) + 24|0); //@line 3822 "emscripten/stb_image.c"
    HEAP32[$264>>2] = $262; //@line 3822 "emscripten/stb_image.c"
    label = 47;
   } else {
    label = 47;
   }
  } while(0);
  if ((label|0) == 47) {
   label = 0;
   while(1) {
    $267 = $1; //@line 3828 "emscripten/stb_image.c"
    $268 = (__ZL4get8P4stbi($267)|0); //@line 3828 "emscripten/stb_image.c"
    $len = $268; //@line 3828 "emscripten/stb_image.c"
    $269 = ($268|0)!=(0); //@line 3828 "emscripten/stb_image.c"
    if (!($269)) {
     break;
    }
    $270 = $1; //@line 3829 "emscripten/stb_image.c"
    $271 = $len; //@line 3829 "emscripten/stb_image.c"
    __ZL4skipP4stbii($270,$271); //@line 3829 "emscripten/stb_image.c"
   }
  }
 }
 if ((label|0) == 14) {
  $73 = $1; //@line 3769 "emscripten/stb_image.c"
  $74 = (__ZL7get16leP4stbi($73)|0); //@line 3769 "emscripten/stb_image.c"
  $x = $74; //@line 3769 "emscripten/stb_image.c"
  $75 = $1; //@line 3770 "emscripten/stb_image.c"
  $76 = (__ZL7get16leP4stbi($75)|0); //@line 3770 "emscripten/stb_image.c"
  $y = $76; //@line 3770 "emscripten/stb_image.c"
  $77 = $1; //@line 3771 "emscripten/stb_image.c"
  $78 = (__ZL7get16leP4stbi($77)|0); //@line 3771 "emscripten/stb_image.c"
  $w = $78; //@line 3771 "emscripten/stb_image.c"
  $79 = $1; //@line 3772 "emscripten/stb_image.c"
  $80 = (__ZL7get16leP4stbi($79)|0); //@line 3772 "emscripten/stb_image.c"
  $h = $80; //@line 3772 "emscripten/stb_image.c"
  $81 = $x; //@line 3773 "emscripten/stb_image.c"
  $82 = $w; //@line 3773 "emscripten/stb_image.c"
  $83 = (($81) + ($82))|0; //@line 3773 "emscripten/stb_image.c"
  $84 = $2; //@line 3773 "emscripten/stb_image.c"
  $85 = HEAP32[$84>>2]|0; //@line 3773 "emscripten/stb_image.c"
  $86 = ($83|0)>($85|0); //@line 3773 "emscripten/stb_image.c"
  if (!($86)) {
   $87 = $y; //@line 3773 "emscripten/stb_image.c"
   $88 = $h; //@line 3773 "emscripten/stb_image.c"
   $89 = (($87) + ($88))|0; //@line 3773 "emscripten/stb_image.c"
   $90 = $2; //@line 3773 "emscripten/stb_image.c"
   $91 = (($90) + 4|0); //@line 3773 "emscripten/stb_image.c"
   $92 = HEAP32[$91>>2]|0; //@line 3773 "emscripten/stb_image.c"
   $93 = ($89|0)>($92|0); //@line 3773 "emscripten/stb_image.c"
   if (!($93)) {
    $98 = $2; //@line 3776 "emscripten/stb_image.c"
    $99 = HEAP32[$98>>2]|0; //@line 3776 "emscripten/stb_image.c"
    $100 = $99<<2; //@line 3776 "emscripten/stb_image.c"
    $101 = $2; //@line 3776 "emscripten/stb_image.c"
    $102 = (($101) + 18504|0); //@line 3776 "emscripten/stb_image.c"
    HEAP32[$102>>2] = $100; //@line 3776 "emscripten/stb_image.c"
    $103 = $x; //@line 3777 "emscripten/stb_image.c"
    $104 = $103<<2; //@line 3777 "emscripten/stb_image.c"
    $105 = $2; //@line 3777 "emscripten/stb_image.c"
    $106 = (($105) + 18480|0); //@line 3777 "emscripten/stb_image.c"
    HEAP32[$106>>2] = $104; //@line 3777 "emscripten/stb_image.c"
    $107 = $y; //@line 3778 "emscripten/stb_image.c"
    $108 = $2; //@line 3778 "emscripten/stb_image.c"
    $109 = (($108) + 18504|0); //@line 3778 "emscripten/stb_image.c"
    $110 = HEAP32[$109>>2]|0; //@line 3778 "emscripten/stb_image.c"
    $111 = Math_imul($107, $110)|0; //@line 3778 "emscripten/stb_image.c"
    $112 = $2; //@line 3778 "emscripten/stb_image.c"
    $113 = (($112) + 18484|0); //@line 3778 "emscripten/stb_image.c"
    HEAP32[$113>>2] = $111; //@line 3778 "emscripten/stb_image.c"
    $114 = $2; //@line 3779 "emscripten/stb_image.c"
    $115 = (($114) + 18480|0); //@line 3779 "emscripten/stb_image.c"
    $116 = HEAP32[$115>>2]|0; //@line 3779 "emscripten/stb_image.c"
    $117 = $w; //@line 3779 "emscripten/stb_image.c"
    $118 = $117<<2; //@line 3779 "emscripten/stb_image.c"
    $119 = (($116) + ($118))|0; //@line 3779 "emscripten/stb_image.c"
    $120 = $2; //@line 3779 "emscripten/stb_image.c"
    $121 = (($120) + 18488|0); //@line 3779 "emscripten/stb_image.c"
    HEAP32[$121>>2] = $119; //@line 3779 "emscripten/stb_image.c"
    $122 = $2; //@line 3780 "emscripten/stb_image.c"
    $123 = (($122) + 18484|0); //@line 3780 "emscripten/stb_image.c"
    $124 = HEAP32[$123>>2]|0; //@line 3780 "emscripten/stb_image.c"
    $125 = $h; //@line 3780 "emscripten/stb_image.c"
    $126 = $2; //@line 3780 "emscripten/stb_image.c"
    $127 = (($126) + 18504|0); //@line 3780 "emscripten/stb_image.c"
    $128 = HEAP32[$127>>2]|0; //@line 3780 "emscripten/stb_image.c"
    $129 = Math_imul($125, $128)|0; //@line 3780 "emscripten/stb_image.c"
    $130 = (($124) + ($129))|0; //@line 3780 "emscripten/stb_image.c"
    $131 = $2; //@line 3780 "emscripten/stb_image.c"
    $132 = (($131) + 18492|0); //@line 3780 "emscripten/stb_image.c"
    HEAP32[$132>>2] = $130; //@line 3780 "emscripten/stb_image.c"
    $133 = $2; //@line 3781 "emscripten/stb_image.c"
    $134 = (($133) + 18480|0); //@line 3781 "emscripten/stb_image.c"
    $135 = HEAP32[$134>>2]|0; //@line 3781 "emscripten/stb_image.c"
    $136 = $2; //@line 3781 "emscripten/stb_image.c"
    $137 = (($136) + 18496|0); //@line 3781 "emscripten/stb_image.c"
    HEAP32[$137>>2] = $135; //@line 3781 "emscripten/stb_image.c"
    $138 = $2; //@line 3782 "emscripten/stb_image.c"
    $139 = (($138) + 18484|0); //@line 3782 "emscripten/stb_image.c"
    $140 = HEAP32[$139>>2]|0; //@line 3782 "emscripten/stb_image.c"
    $141 = $2; //@line 3782 "emscripten/stb_image.c"
    $142 = (($141) + 18500|0); //@line 3782 "emscripten/stb_image.c"
    HEAP32[$142>>2] = $140; //@line 3782 "emscripten/stb_image.c"
    $143 = $1; //@line 3784 "emscripten/stb_image.c"
    $144 = (__ZL4get8P4stbi($143)|0); //@line 3784 "emscripten/stb_image.c"
    $145 = $2; //@line 3784 "emscripten/stb_image.c"
    $146 = (($145) + 18476|0); //@line 3784 "emscripten/stb_image.c"
    HEAP32[$146>>2] = $144; //@line 3784 "emscripten/stb_image.c"
    $147 = $2; //@line 3786 "emscripten/stb_image.c"
    $148 = (($147) + 18476|0); //@line 3786 "emscripten/stb_image.c"
    $149 = HEAP32[$148>>2]|0; //@line 3786 "emscripten/stb_image.c"
    $150 = $149 & 64; //@line 3786 "emscripten/stb_image.c"
    $151 = ($150|0)!=(0); //@line 3786 "emscripten/stb_image.c"
    if ($151) {
     $152 = $2; //@line 3787 "emscripten/stb_image.c"
     $153 = (($152) + 18504|0); //@line 3787 "emscripten/stb_image.c"
     $154 = HEAP32[$153>>2]|0; //@line 3787 "emscripten/stb_image.c"
     $155 = $154<<3; //@line 3787 "emscripten/stb_image.c"
     $156 = $2; //@line 3787 "emscripten/stb_image.c"
     $157 = (($156) + 18472|0); //@line 3787 "emscripten/stb_image.c"
     HEAP32[$157>>2] = $155; //@line 3787 "emscripten/stb_image.c"
     $158 = $2; //@line 3788 "emscripten/stb_image.c"
     $159 = (($158) + 18468|0); //@line 3788 "emscripten/stb_image.c"
     HEAP32[$159>>2] = 3; //@line 3788 "emscripten/stb_image.c"
    } else {
     $160 = $2; //@line 3790 "emscripten/stb_image.c"
     $161 = (($160) + 18504|0); //@line 3790 "emscripten/stb_image.c"
     $162 = HEAP32[$161>>2]|0; //@line 3790 "emscripten/stb_image.c"
     $163 = $2; //@line 3790 "emscripten/stb_image.c"
     $164 = (($163) + 18472|0); //@line 3790 "emscripten/stb_image.c"
     HEAP32[$164>>2] = $162; //@line 3790 "emscripten/stb_image.c"
     $165 = $2; //@line 3791 "emscripten/stb_image.c"
     $166 = (($165) + 18468|0); //@line 3791 "emscripten/stb_image.c"
     HEAP32[$166>>2] = 0; //@line 3791 "emscripten/stb_image.c"
    }
    $167 = $2; //@line 3794 "emscripten/stb_image.c"
    $168 = (($167) + 18476|0); //@line 3794 "emscripten/stb_image.c"
    $169 = HEAP32[$168>>2]|0; //@line 3794 "emscripten/stb_image.c"
    $170 = $169 & 128; //@line 3794 "emscripten/stb_image.c"
    $171 = ($170|0)!=(0); //@line 3794 "emscripten/stb_image.c"
    if ($171) {
     $172 = $1; //@line 3795 "emscripten/stb_image.c"
     $173 = $2; //@line 3795 "emscripten/stb_image.c"
     $174 = (($173) + 1056|0); //@line 3795 "emscripten/stb_image.c"
     $175 = $2; //@line 3795 "emscripten/stb_image.c"
     $176 = (($175) + 18476|0); //@line 3795 "emscripten/stb_image.c"
     $177 = HEAP32[$176>>2]|0; //@line 3795 "emscripten/stb_image.c"
     $178 = $177 & 7; //@line 3795 "emscripten/stb_image.c"
     $179 = 2 << $178; //@line 3795 "emscripten/stb_image.c"
     $180 = $2; //@line 3795 "emscripten/stb_image.c"
     $181 = (($180) + 28|0); //@line 3795 "emscripten/stb_image.c"
     $182 = HEAP32[$181>>2]|0; //@line 3795 "emscripten/stb_image.c"
     $183 = $182 & 1; //@line 3795 "emscripten/stb_image.c"
     $184 = ($183|0)!=(0); //@line 3795 "emscripten/stb_image.c"
     if ($184) {
      $185 = $2; //@line 3795 "emscripten/stb_image.c"
      $186 = (($185) + 24|0); //@line 3795 "emscripten/stb_image.c"
      $187 = HEAP32[$186>>2]|0; //@line 3795 "emscripten/stb_image.c"
      $188 = $187;
     } else {
      $188 = -1;
     }
     __ZL25stbi_gif_parse_colortableP4stbiPA4_hii($172,$174,$179,$188); //@line 3795 "emscripten/stb_image.c"
     $189 = $2; //@line 3796 "emscripten/stb_image.c"
     $190 = (($189) + 1056|0); //@line 3796 "emscripten/stb_image.c"
     $191 = $2; //@line 3796 "emscripten/stb_image.c"
     $192 = (($191) + 18464|0); //@line 3796 "emscripten/stb_image.c"
     HEAP32[$192>>2] = $190; //@line 3796 "emscripten/stb_image.c"
    } else {
     $193 = $2; //@line 3797 "emscripten/stb_image.c"
     $194 = (($193) + 12|0); //@line 3797 "emscripten/stb_image.c"
     $195 = HEAP32[$194>>2]|0; //@line 3797 "emscripten/stb_image.c"
     $196 = $195 & 128; //@line 3797 "emscripten/stb_image.c"
     $197 = ($196|0)!=(0); //@line 3797 "emscripten/stb_image.c"
     if (!($197)) {
      $227 = (__ZL1ePKc(29104)|0); //@line 3804 "emscripten/stb_image.c"
      $228 = ($227|0)!=(0); //@line 3804 "emscripten/stb_image.c"
      $229 = $228 ? 0 : 0; //@line 3804 "emscripten/stb_image.c"
      $230 = $229; //@line 3804 "emscripten/stb_image.c"
      $0 = $230; //@line 3804 "emscripten/stb_image.c"
      $276 = $0; //@line 3840 "emscripten/stb_image.c"
      STACKTOP = sp;return ($276|0); //@line 3840 "emscripten/stb_image.c"
     }
     $i = 0; //@line 3798 "emscripten/stb_image.c"
     while(1) {
      $198 = $i; //@line 3798 "emscripten/stb_image.c"
      $199 = ($198|0)<(256); //@line 3798 "emscripten/stb_image.c"
      if (!($199)) {
       break;
      }
      $200 = $i; //@line 3799 "emscripten/stb_image.c"
      $201 = $2; //@line 3799 "emscripten/stb_image.c"
      $202 = (($201) + 32|0); //@line 3799 "emscripten/stb_image.c"
      $203 = (($202) + ($200<<2)|0); //@line 3799 "emscripten/stb_image.c"
      $204 = (($203) + 3|0); //@line 3799 "emscripten/stb_image.c"
      HEAP8[$204>>0] = -1; //@line 3799 "emscripten/stb_image.c"
      $205 = $i; //@line 3798 "emscripten/stb_image.c"
      $206 = (($205) + 1)|0; //@line 3798 "emscripten/stb_image.c"
      $i = $206; //@line 3798 "emscripten/stb_image.c"
     }
     $207 = $2; //@line 3800 "emscripten/stb_image.c"
     $208 = (($207) + 24|0); //@line 3800 "emscripten/stb_image.c"
     $209 = HEAP32[$208>>2]|0; //@line 3800 "emscripten/stb_image.c"
     $210 = ($209|0)>=(0); //@line 3800 "emscripten/stb_image.c"
     if ($210) {
      $211 = $2; //@line 3800 "emscripten/stb_image.c"
      $212 = (($211) + 28|0); //@line 3800 "emscripten/stb_image.c"
      $213 = HEAP32[$212>>2]|0; //@line 3800 "emscripten/stb_image.c"
      $214 = $213 & 1; //@line 3800 "emscripten/stb_image.c"
      $215 = ($214|0)!=(0); //@line 3800 "emscripten/stb_image.c"
      if ($215) {
       $216 = $2; //@line 3801 "emscripten/stb_image.c"
       $217 = (($216) + 24|0); //@line 3801 "emscripten/stb_image.c"
       $218 = HEAP32[$217>>2]|0; //@line 3801 "emscripten/stb_image.c"
       $219 = $2; //@line 3801 "emscripten/stb_image.c"
       $220 = (($219) + 32|0); //@line 3801 "emscripten/stb_image.c"
       $221 = (($220) + ($218<<2)|0); //@line 3801 "emscripten/stb_image.c"
       $222 = (($221) + 3|0); //@line 3801 "emscripten/stb_image.c"
       HEAP8[$222>>0] = 0; //@line 3801 "emscripten/stb_image.c"
      }
     }
     $223 = $2; //@line 3802 "emscripten/stb_image.c"
     $224 = (($223) + 32|0); //@line 3802 "emscripten/stb_image.c"
     $225 = $2; //@line 3802 "emscripten/stb_image.c"
     $226 = (($225) + 18464|0); //@line 3802 "emscripten/stb_image.c"
     HEAP32[$226>>2] = $224; //@line 3802 "emscripten/stb_image.c"
    }
    $231 = $1; //@line 3806 "emscripten/stb_image.c"
    $232 = $2; //@line 3806 "emscripten/stb_image.c"
    $233 = (__ZL23stbi_process_gif_rasterP4stbiP15stbi_gif_struct($231,$232)|0); //@line 3806 "emscripten/stb_image.c"
    $o = $233; //@line 3806 "emscripten/stb_image.c"
    $234 = $o; //@line 3807 "emscripten/stb_image.c"
    $235 = ($234|0)==(0|0); //@line 3807 "emscripten/stb_image.c"
    if ($235) {
     $0 = 0; //@line 3807 "emscripten/stb_image.c"
     $276 = $0; //@line 3840 "emscripten/stb_image.c"
     STACKTOP = sp;return ($276|0); //@line 3840 "emscripten/stb_image.c"
    }
    $236 = $4; //@line 3809 "emscripten/stb_image.c"
    $237 = ($236|0)!=(0); //@line 3809 "emscripten/stb_image.c"
    if ($237) {
     $238 = $4; //@line 3809 "emscripten/stb_image.c"
     $239 = ($238|0)!=(4); //@line 3809 "emscripten/stb_image.c"
     if ($239) {
      $240 = $o; //@line 3810 "emscripten/stb_image.c"
      $241 = $4; //@line 3810 "emscripten/stb_image.c"
      $242 = $2; //@line 3810 "emscripten/stb_image.c"
      $243 = HEAP32[$242>>2]|0; //@line 3810 "emscripten/stb_image.c"
      $244 = $2; //@line 3810 "emscripten/stb_image.c"
      $245 = (($244) + 4|0); //@line 3810 "emscripten/stb_image.c"
      $246 = HEAP32[$245>>2]|0; //@line 3810 "emscripten/stb_image.c"
      $247 = (__ZL14convert_formatPhiijj($240,4,$241,$243,$246)|0); //@line 3810 "emscripten/stb_image.c"
      $o = $247; //@line 3810 "emscripten/stb_image.c"
     }
    }
    $248 = $o; //@line 3811 "emscripten/stb_image.c"
    $0 = $248; //@line 3811 "emscripten/stb_image.c"
    $276 = $0; //@line 3840 "emscripten/stb_image.c"
    STACKTOP = sp;return ($276|0); //@line 3840 "emscripten/stb_image.c"
   }
  }
  $94 = (__ZL1ePKc(29080)|0); //@line 3774 "emscripten/stb_image.c"
  $95 = ($94|0)!=(0); //@line 3774 "emscripten/stb_image.c"
  $96 = $95 ? 0 : 0; //@line 3774 "emscripten/stb_image.c"
  $97 = $96; //@line 3774 "emscripten/stb_image.c"
  $0 = $97; //@line 3774 "emscripten/stb_image.c"
  $276 = $0; //@line 3840 "emscripten/stb_image.c"
  STACKTOP = sp;return ($276|0); //@line 3840 "emscripten/stb_image.c"
 }
 else if ((label|0) == 51) {
  $0 = (1); //@line 3834 "emscripten/stb_image.c"
  $276 = $0; //@line 3840 "emscripten/stb_image.c"
  STACKTOP = sp;return ($276|0); //@line 3840 "emscripten/stb_image.c"
 }
 else if ((label|0) == 52) {
  $272 = (__ZL1ePKc(29128)|0); //@line 3837 "emscripten/stb_image.c"
  $273 = ($272|0)!=(0); //@line 3837 "emscripten/stb_image.c"
  $274 = $273 ? 0 : 0; //@line 3837 "emscripten/stb_image.c"
  $275 = $274; //@line 3837 "emscripten/stb_image.c"
  $0 = $275; //@line 3837 "emscripten/stb_image.c"
  $276 = $0; //@line 3840 "emscripten/stb_image.c"
  STACKTOP = sp;return ($276|0); //@line 3840 "emscripten/stb_image.c"
 }
 return 0|0;
}
function __ZL24stbi_fill_gif_backgroundP15stbi_gif_struct($g) {
 $g = $g|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $c = 0, $i = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $g;
 $1 = $0; //@line 3730 "emscripten/stb_image.c"
 $2 = (($1) + 16|0); //@line 3730 "emscripten/stb_image.c"
 $3 = HEAP32[$2>>2]|0; //@line 3730 "emscripten/stb_image.c"
 $4 = $0; //@line 3730 "emscripten/stb_image.c"
 $5 = (($4) + 32|0); //@line 3730 "emscripten/stb_image.c"
 $6 = (($5) + ($3<<2)|0); //@line 3730 "emscripten/stb_image.c"
 $c = $6; //@line 3730 "emscripten/stb_image.c"
 $i = 0; //@line 3732 "emscripten/stb_image.c"
 while(1) {
  $7 = $i; //@line 3732 "emscripten/stb_image.c"
  $8 = $0; //@line 3732 "emscripten/stb_image.c"
  $9 = HEAP32[$8>>2]|0; //@line 3732 "emscripten/stb_image.c"
  $10 = $0; //@line 3732 "emscripten/stb_image.c"
  $11 = (($10) + 4|0); //@line 3732 "emscripten/stb_image.c"
  $12 = HEAP32[$11>>2]|0; //@line 3732 "emscripten/stb_image.c"
  $13 = Math_imul($9, $12)|0; //@line 3732 "emscripten/stb_image.c"
  $14 = $13<<2; //@line 3732 "emscripten/stb_image.c"
  $15 = ($7|0)<($14|0); //@line 3732 "emscripten/stb_image.c"
  if (!($15)) {
   break;
  }
  $16 = $i; //@line 3733 "emscripten/stb_image.c"
  $17 = $0; //@line 3733 "emscripten/stb_image.c"
  $18 = (($17) + 8|0); //@line 3733 "emscripten/stb_image.c"
  $19 = HEAP32[$18>>2]|0; //@line 3733 "emscripten/stb_image.c"
  $20 = (($19) + ($16)|0); //@line 3733 "emscripten/stb_image.c"
  $p = $20; //@line 3733 "emscripten/stb_image.c"
  $21 = $c; //@line 3734 "emscripten/stb_image.c"
  $22 = (($21) + 2|0); //@line 3734 "emscripten/stb_image.c"
  $23 = HEAP8[$22>>0]|0; //@line 3734 "emscripten/stb_image.c"
  $24 = $p; //@line 3734 "emscripten/stb_image.c"
  HEAP8[$24>>0] = $23; //@line 3734 "emscripten/stb_image.c"
  $25 = $c; //@line 3735 "emscripten/stb_image.c"
  $26 = (($25) + 1|0); //@line 3735 "emscripten/stb_image.c"
  $27 = HEAP8[$26>>0]|0; //@line 3735 "emscripten/stb_image.c"
  $28 = $p; //@line 3735 "emscripten/stb_image.c"
  $29 = (($28) + 1|0); //@line 3735 "emscripten/stb_image.c"
  HEAP8[$29>>0] = $27; //@line 3735 "emscripten/stb_image.c"
  $30 = $c; //@line 3736 "emscripten/stb_image.c"
  $31 = HEAP8[$30>>0]|0; //@line 3736 "emscripten/stb_image.c"
  $32 = $p; //@line 3736 "emscripten/stb_image.c"
  $33 = (($32) + 2|0); //@line 3736 "emscripten/stb_image.c"
  HEAP8[$33>>0] = $31; //@line 3736 "emscripten/stb_image.c"
  $34 = $c; //@line 3737 "emscripten/stb_image.c"
  $35 = (($34) + 3|0); //@line 3737 "emscripten/stb_image.c"
  $36 = HEAP8[$35>>0]|0; //@line 3737 "emscripten/stb_image.c"
  $37 = $p; //@line 3737 "emscripten/stb_image.c"
  $38 = (($37) + 3|0); //@line 3737 "emscripten/stb_image.c"
  HEAP8[$38>>0] = $36; //@line 3737 "emscripten/stb_image.c"
  $39 = $i; //@line 3732 "emscripten/stb_image.c"
  $40 = (($39) + 4)|0; //@line 3732 "emscripten/stb_image.c"
  $i = $40; //@line 3732 "emscripten/stb_image.c"
 }
 STACKTOP = sp;return; //@line 3739 "emscripten/stb_image.c"
}
function __ZL23stbi_process_gif_rasterP4stbiP15stbi_gif_struct($s,$g) {
 $s = $s|0;
 $g = $g|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $avail = 0, $bits = 0, $clear = 0, $code = 0, $code1 = 0, $codemask = 0, $codesize = 0, $first = 0, $len = 0, $lzw_cs = 0;
 var $oldcode = 0, $p = 0, $valid_bits = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $1 = $s;
 $2 = $g;
 $3 = $1; //@line 3656 "emscripten/stb_image.c"
 $4 = (__ZL5get8uP4stbi($3)|0); //@line 3656 "emscripten/stb_image.c"
 $lzw_cs = $4; //@line 3656 "emscripten/stb_image.c"
 $5 = $lzw_cs; //@line 3657 "emscripten/stb_image.c"
 $6 = $5&255; //@line 3657 "emscripten/stb_image.c"
 $7 = 1 << $6; //@line 3657 "emscripten/stb_image.c"
 $clear = $7; //@line 3657 "emscripten/stb_image.c"
 $first = 1; //@line 3658 "emscripten/stb_image.c"
 $8 = $lzw_cs; //@line 3659 "emscripten/stb_image.c"
 $9 = $8&255; //@line 3659 "emscripten/stb_image.c"
 $10 = (($9) + 1)|0; //@line 3659 "emscripten/stb_image.c"
 $codesize = $10; //@line 3659 "emscripten/stb_image.c"
 $11 = $codesize; //@line 3660 "emscripten/stb_image.c"
 $12 = 1 << $11; //@line 3660 "emscripten/stb_image.c"
 $13 = (($12) - 1)|0; //@line 3660 "emscripten/stb_image.c"
 $codemask = $13; //@line 3660 "emscripten/stb_image.c"
 $bits = 0; //@line 3661 "emscripten/stb_image.c"
 $valid_bits = 0; //@line 3662 "emscripten/stb_image.c"
 $code = 0; //@line 3663 "emscripten/stb_image.c"
 while(1) {
  $14 = $code; //@line 3663 "emscripten/stb_image.c"
  $15 = $clear; //@line 3663 "emscripten/stb_image.c"
  $16 = ($14|0)<($15|0); //@line 3663 "emscripten/stb_image.c"
  if (!($16)) {
   break;
  }
  $17 = $code; //@line 3664 "emscripten/stb_image.c"
  $18 = $2; //@line 3664 "emscripten/stb_image.c"
  $19 = (($18) + 2080|0); //@line 3664 "emscripten/stb_image.c"
  $20 = (($19) + ($17<<2)|0); //@line 3664 "emscripten/stb_image.c"
  HEAP16[$20>>1] = -1; //@line 3664 "emscripten/stb_image.c"
  $21 = $code; //@line 3665 "emscripten/stb_image.c"
  $22 = $21&255; //@line 3665 "emscripten/stb_image.c"
  $23 = $code; //@line 3665 "emscripten/stb_image.c"
  $24 = $2; //@line 3665 "emscripten/stb_image.c"
  $25 = (($24) + 2080|0); //@line 3665 "emscripten/stb_image.c"
  $26 = (($25) + ($23<<2)|0); //@line 3665 "emscripten/stb_image.c"
  $27 = (($26) + 2|0); //@line 3665 "emscripten/stb_image.c"
  HEAP8[$27>>0] = $22; //@line 3665 "emscripten/stb_image.c"
  $28 = $code; //@line 3666 "emscripten/stb_image.c"
  $29 = $28&255; //@line 3666 "emscripten/stb_image.c"
  $30 = $code; //@line 3666 "emscripten/stb_image.c"
  $31 = $2; //@line 3666 "emscripten/stb_image.c"
  $32 = (($31) + 2080|0); //@line 3666 "emscripten/stb_image.c"
  $33 = (($32) + ($30<<2)|0); //@line 3666 "emscripten/stb_image.c"
  $34 = (($33) + 3|0); //@line 3666 "emscripten/stb_image.c"
  HEAP8[$34>>0] = $29; //@line 3666 "emscripten/stb_image.c"
  $35 = $code; //@line 3663 "emscripten/stb_image.c"
  $36 = (($35) + 1)|0; //@line 3663 "emscripten/stb_image.c"
  $code = $36; //@line 3663 "emscripten/stb_image.c"
 }
 $37 = $clear; //@line 3670 "emscripten/stb_image.c"
 $38 = (($37) + 2)|0; //@line 3670 "emscripten/stb_image.c"
 $avail = $38; //@line 3670 "emscripten/stb_image.c"
 $oldcode = -1; //@line 3671 "emscripten/stb_image.c"
 $len = 0; //@line 3673 "emscripten/stb_image.c"
 while(1) {
  $39 = $valid_bits; //@line 3675 "emscripten/stb_image.c"
  $40 = $codesize; //@line 3675 "emscripten/stb_image.c"
  $41 = ($39|0)<($40|0); //@line 3675 "emscripten/stb_image.c"
  if ($41) {
   $42 = $len; //@line 3676 "emscripten/stb_image.c"
   $43 = ($42|0)==(0); //@line 3676 "emscripten/stb_image.c"
   if ($43) {
    $44 = $1; //@line 3677 "emscripten/stb_image.c"
    $45 = (__ZL4get8P4stbi($44)|0); //@line 3677 "emscripten/stb_image.c"
    $len = $45; //@line 3677 "emscripten/stb_image.c"
    $46 = $len; //@line 3678 "emscripten/stb_image.c"
    $47 = ($46|0)==(0); //@line 3678 "emscripten/stb_image.c"
    if ($47) {
     label = 9;
     break;
    }
   }
   $51 = $len; //@line 3681 "emscripten/stb_image.c"
   $52 = (($51) + -1)|0; //@line 3681 "emscripten/stb_image.c"
   $len = $52; //@line 3681 "emscripten/stb_image.c"
   $53 = $1; //@line 3682 "emscripten/stb_image.c"
   $54 = (__ZL4get8P4stbi($53)|0); //@line 3682 "emscripten/stb_image.c"
   $55 = $valid_bits; //@line 3682 "emscripten/stb_image.c"
   $56 = $54 << $55; //@line 3682 "emscripten/stb_image.c"
   $57 = $bits; //@line 3682 "emscripten/stb_image.c"
   $58 = $57 | $56; //@line 3682 "emscripten/stb_image.c"
   $bits = $58; //@line 3682 "emscripten/stb_image.c"
   $59 = $valid_bits; //@line 3683 "emscripten/stb_image.c"
   $60 = (($59) + 8)|0; //@line 3683 "emscripten/stb_image.c"
   $valid_bits = $60; //@line 3683 "emscripten/stb_image.c"
  } else {
   $61 = $bits; //@line 3685 "emscripten/stb_image.c"
   $62 = $codemask; //@line 3685 "emscripten/stb_image.c"
   $63 = $61 & $62; //@line 3685 "emscripten/stb_image.c"
   $code1 = $63; //@line 3685 "emscripten/stb_image.c"
   $64 = $codesize; //@line 3686 "emscripten/stb_image.c"
   $65 = $bits; //@line 3686 "emscripten/stb_image.c"
   $66 = $65 >> $64; //@line 3686 "emscripten/stb_image.c"
   $bits = $66; //@line 3686 "emscripten/stb_image.c"
   $67 = $codesize; //@line 3687 "emscripten/stb_image.c"
   $68 = $valid_bits; //@line 3687 "emscripten/stb_image.c"
   $69 = (($68) - ($67))|0; //@line 3687 "emscripten/stb_image.c"
   $valid_bits = $69; //@line 3687 "emscripten/stb_image.c"
   $70 = $code1; //@line 3689 "emscripten/stb_image.c"
   $71 = $clear; //@line 3689 "emscripten/stb_image.c"
   $72 = ($70|0)==($71|0); //@line 3689 "emscripten/stb_image.c"
   if ($72) {
    $73 = $lzw_cs; //@line 3690 "emscripten/stb_image.c"
    $74 = $73&255; //@line 3690 "emscripten/stb_image.c"
    $75 = (($74) + 1)|0; //@line 3690 "emscripten/stb_image.c"
    $codesize = $75; //@line 3690 "emscripten/stb_image.c"
    $76 = $codesize; //@line 3691 "emscripten/stb_image.c"
    $77 = 1 << $76; //@line 3691 "emscripten/stb_image.c"
    $78 = (($77) - 1)|0; //@line 3691 "emscripten/stb_image.c"
    $codemask = $78; //@line 3691 "emscripten/stb_image.c"
    $79 = $clear; //@line 3692 "emscripten/stb_image.c"
    $80 = (($79) + 2)|0; //@line 3692 "emscripten/stb_image.c"
    $avail = $80; //@line 3692 "emscripten/stb_image.c"
    $oldcode = -1; //@line 3693 "emscripten/stb_image.c"
    $first = 0; //@line 3694 "emscripten/stb_image.c"
   } else {
    $81 = $code1; //@line 3695 "emscripten/stb_image.c"
    $82 = $clear; //@line 3695 "emscripten/stb_image.c"
    $83 = (($82) + 1)|0; //@line 3695 "emscripten/stb_image.c"
    $84 = ($81|0)==($83|0); //@line 3695 "emscripten/stb_image.c"
    if ($84) {
     label = 15;
     break;
    }
    $95 = $code1; //@line 3700 "emscripten/stb_image.c"
    $96 = $avail; //@line 3700 "emscripten/stb_image.c"
    $97 = ($95|0)<=($96|0); //@line 3700 "emscripten/stb_image.c"
    if (!($97)) {
     label = 36;
     break;
    }
    $98 = $first; //@line 3701 "emscripten/stb_image.c"
    $99 = ($98|0)!=(0); //@line 3701 "emscripten/stb_image.c"
    if ($99) {
     label = 21;
     break;
    }
    $104 = $oldcode; //@line 3703 "emscripten/stb_image.c"
    $105 = ($104|0)>=(0); //@line 3703 "emscripten/stb_image.c"
    if ($105) {
     $106 = $avail; //@line 3704 "emscripten/stb_image.c"
     $107 = (($106) + 1)|0; //@line 3704 "emscripten/stb_image.c"
     $avail = $107; //@line 3704 "emscripten/stb_image.c"
     $108 = $2; //@line 3704 "emscripten/stb_image.c"
     $109 = (($108) + 2080|0); //@line 3704 "emscripten/stb_image.c"
     $110 = (($109) + ($106<<2)|0); //@line 3704 "emscripten/stb_image.c"
     $p = $110; //@line 3704 "emscripten/stb_image.c"
     $111 = $avail; //@line 3705 "emscripten/stb_image.c"
     $112 = ($111|0)>(4096); //@line 3705 "emscripten/stb_image.c"
     if ($112) {
      label = 24;
      break;
     }
     $117 = $oldcode; //@line 3706 "emscripten/stb_image.c"
     $118 = $117&65535; //@line 3706 "emscripten/stb_image.c"
     $119 = $p; //@line 3706 "emscripten/stb_image.c"
     HEAP16[$119>>1] = $118; //@line 3706 "emscripten/stb_image.c"
     $120 = $oldcode; //@line 3707 "emscripten/stb_image.c"
     $121 = $2; //@line 3707 "emscripten/stb_image.c"
     $122 = (($121) + 2080|0); //@line 3707 "emscripten/stb_image.c"
     $123 = (($122) + ($120<<2)|0); //@line 3707 "emscripten/stb_image.c"
     $124 = (($123) + 2|0); //@line 3707 "emscripten/stb_image.c"
     $125 = HEAP8[$124>>0]|0; //@line 3707 "emscripten/stb_image.c"
     $126 = $p; //@line 3707 "emscripten/stb_image.c"
     $127 = (($126) + 2|0); //@line 3707 "emscripten/stb_image.c"
     HEAP8[$127>>0] = $125; //@line 3707 "emscripten/stb_image.c"
     $128 = $code1; //@line 3708 "emscripten/stb_image.c"
     $129 = $avail; //@line 3708 "emscripten/stb_image.c"
     $130 = ($128|0)==($129|0); //@line 3708 "emscripten/stb_image.c"
     if ($130) {
      $131 = $p; //@line 3708 "emscripten/stb_image.c"
      $132 = (($131) + 2|0); //@line 3708 "emscripten/stb_image.c"
      $133 = HEAP8[$132>>0]|0; //@line 3708 "emscripten/stb_image.c"
      $142 = $133;
     } else {
      $134 = $code1; //@line 3708 "emscripten/stb_image.c"
      $135 = $2; //@line 3708 "emscripten/stb_image.c"
      $136 = (($135) + 2080|0); //@line 3708 "emscripten/stb_image.c"
      $137 = (($136) + ($134<<2)|0); //@line 3708 "emscripten/stb_image.c"
      $138 = (($137) + 2|0); //@line 3708 "emscripten/stb_image.c"
      $139 = HEAP8[$138>>0]|0; //@line 3708 "emscripten/stb_image.c"
      $142 = $139;
     }
     $140 = $p; //@line 3708 "emscripten/stb_image.c"
     $141 = (($140) + 3|0); //@line 3708 "emscripten/stb_image.c"
     HEAP8[$141>>0] = $142; //@line 3708 "emscripten/stb_image.c"
    } else {
     $143 = $code1; //@line 3709 "emscripten/stb_image.c"
     $144 = $avail; //@line 3709 "emscripten/stb_image.c"
     $145 = ($143|0)==($144|0); //@line 3709 "emscripten/stb_image.c"
     if ($145) {
      label = 30;
      break;
     }
    }
    $150 = $2; //@line 3712 "emscripten/stb_image.c"
    $151 = $code1; //@line 3712 "emscripten/stb_image.c"
    $152 = $151&65535; //@line 3712 "emscripten/stb_image.c"
    __ZL17stbi_out_gif_codeP15stbi_gif_structt($150,$152); //@line 3712 "emscripten/stb_image.c"
    $153 = $avail; //@line 3714 "emscripten/stb_image.c"
    $154 = $codemask; //@line 3714 "emscripten/stb_image.c"
    $155 = $153 & $154; //@line 3714 "emscripten/stb_image.c"
    $156 = ($155|0)==(0); //@line 3714 "emscripten/stb_image.c"
    if ($156) {
     $157 = $avail; //@line 3714 "emscripten/stb_image.c"
     $158 = ($157|0)<=(4095); //@line 3714 "emscripten/stb_image.c"
     if ($158) {
      $159 = $codesize; //@line 3715 "emscripten/stb_image.c"
      $160 = (($159) + 1)|0; //@line 3715 "emscripten/stb_image.c"
      $codesize = $160; //@line 3715 "emscripten/stb_image.c"
      $161 = $codesize; //@line 3716 "emscripten/stb_image.c"
      $162 = 1 << $161; //@line 3716 "emscripten/stb_image.c"
      $163 = (($162) - 1)|0; //@line 3716 "emscripten/stb_image.c"
      $codemask = $163; //@line 3716 "emscripten/stb_image.c"
     }
    }
    $164 = $code1; //@line 3719 "emscripten/stb_image.c"
    $oldcode = $164; //@line 3719 "emscripten/stb_image.c"
   }
  }
 }
 if ((label|0) == 9) {
  $48 = $2; //@line 3679 "emscripten/stb_image.c"
  $49 = (($48) + 8|0); //@line 3679 "emscripten/stb_image.c"
  $50 = HEAP32[$49>>2]|0; //@line 3679 "emscripten/stb_image.c"
  $0 = $50; //@line 3679 "emscripten/stb_image.c"
  $169 = $0; //@line 3725 "emscripten/stb_image.c"
  STACKTOP = sp;return ($169|0); //@line 3725 "emscripten/stb_image.c"
 }
 else if ((label|0) == 15) {
  $85 = $1; //@line 3696 "emscripten/stb_image.c"
  $86 = $len; //@line 3696 "emscripten/stb_image.c"
  __ZL4skipP4stbii($85,$86); //@line 3696 "emscripten/stb_image.c"
  while(1) {
   $87 = $1; //@line 3697 "emscripten/stb_image.c"
   $88 = (__ZL4get8P4stbi($87)|0); //@line 3697 "emscripten/stb_image.c"
   $len = $88; //@line 3697 "emscripten/stb_image.c"
   $89 = ($88|0)>(0); //@line 3697 "emscripten/stb_image.c"
   if (!($89)) {
    break;
   }
   $90 = $1; //@line 3698 "emscripten/stb_image.c"
   $91 = $len; //@line 3698 "emscripten/stb_image.c"
   __ZL4skipP4stbii($90,$91); //@line 3698 "emscripten/stb_image.c"
  }
  $92 = $2; //@line 3699 "emscripten/stb_image.c"
  $93 = (($92) + 8|0); //@line 3699 "emscripten/stb_image.c"
  $94 = HEAP32[$93>>2]|0; //@line 3699 "emscripten/stb_image.c"
  $0 = $94; //@line 3699 "emscripten/stb_image.c"
  $169 = $0; //@line 3725 "emscripten/stb_image.c"
  STACKTOP = sp;return ($169|0); //@line 3725 "emscripten/stb_image.c"
 }
 else if ((label|0) == 21) {
  $100 = (__ZL1ePKc(29144)|0); //@line 3701 "emscripten/stb_image.c"
  $101 = ($100|0)!=(0); //@line 3701 "emscripten/stb_image.c"
  $102 = $101 ? 0 : 0; //@line 3701 "emscripten/stb_image.c"
  $103 = $102; //@line 3701 "emscripten/stb_image.c"
  $0 = $103; //@line 3701 "emscripten/stb_image.c"
  $169 = $0; //@line 3725 "emscripten/stb_image.c"
  STACKTOP = sp;return ($169|0); //@line 3725 "emscripten/stb_image.c"
 }
 else if ((label|0) == 24) {
  $113 = (__ZL1ePKc(29160)|0); //@line 3705 "emscripten/stb_image.c"
  $114 = ($113|0)!=(0); //@line 3705 "emscripten/stb_image.c"
  $115 = $114 ? 0 : 0; //@line 3705 "emscripten/stb_image.c"
  $116 = $115; //@line 3705 "emscripten/stb_image.c"
  $0 = $116; //@line 3705 "emscripten/stb_image.c"
  $169 = $0; //@line 3725 "emscripten/stb_image.c"
  STACKTOP = sp;return ($169|0); //@line 3725 "emscripten/stb_image.c"
 }
 else if ((label|0) == 30) {
  $146 = (__ZL1ePKc(29176)|0); //@line 3710 "emscripten/stb_image.c"
  $147 = ($146|0)!=(0); //@line 3710 "emscripten/stb_image.c"
  $148 = $147 ? 0 : 0; //@line 3710 "emscripten/stb_image.c"
  $149 = $148; //@line 3710 "emscripten/stb_image.c"
  $0 = $149; //@line 3710 "emscripten/stb_image.c"
  $169 = $0; //@line 3725 "emscripten/stb_image.c"
  STACKTOP = sp;return ($169|0); //@line 3725 "emscripten/stb_image.c"
 }
 else if ((label|0) == 36) {
  $165 = (__ZL1ePKc(29176)|0); //@line 3721 "emscripten/stb_image.c"
  $166 = ($165|0)!=(0); //@line 3721 "emscripten/stb_image.c"
  $167 = $166 ? 0 : 0; //@line 3721 "emscripten/stb_image.c"
  $168 = $167; //@line 3721 "emscripten/stb_image.c"
  $0 = $168; //@line 3721 "emscripten/stb_image.c"
  $169 = $0; //@line 3725 "emscripten/stb_image.c"
  STACKTOP = sp;return ($169|0); //@line 3725 "emscripten/stb_image.c"
 }
 return 0|0;
}
function __ZL17stbi_out_gif_codeP15stbi_gif_structt($g,$code) {
 $g = $g|0;
 $code = $code|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $g;
 $1 = $code;
 $2 = $1; //@line 3620 "emscripten/stb_image.c"
 $3 = $2&65535; //@line 3620 "emscripten/stb_image.c"
 $4 = $0; //@line 3620 "emscripten/stb_image.c"
 $5 = (($4) + 2080|0); //@line 3620 "emscripten/stb_image.c"
 $6 = (($5) + ($3<<2)|0); //@line 3620 "emscripten/stb_image.c"
 $7 = HEAP16[$6>>1]|0; //@line 3620 "emscripten/stb_image.c"
 $8 = $7 << 16 >> 16; //@line 3620 "emscripten/stb_image.c"
 $9 = ($8|0)>=(0); //@line 3620 "emscripten/stb_image.c"
 if ($9) {
  $10 = $0; //@line 3621 "emscripten/stb_image.c"
  $11 = $1; //@line 3621 "emscripten/stb_image.c"
  $12 = $11&65535; //@line 3621 "emscripten/stb_image.c"
  $13 = $0; //@line 3621 "emscripten/stb_image.c"
  $14 = (($13) + 2080|0); //@line 3621 "emscripten/stb_image.c"
  $15 = (($14) + ($12<<2)|0); //@line 3621 "emscripten/stb_image.c"
  $16 = HEAP16[$15>>1]|0; //@line 3621 "emscripten/stb_image.c"
  __ZL17stbi_out_gif_codeP15stbi_gif_structt($10,$16); //@line 3621 "emscripten/stb_image.c"
 }
 $17 = $0; //@line 3623 "emscripten/stb_image.c"
 $18 = (($17) + 18500|0); //@line 3623 "emscripten/stb_image.c"
 $19 = HEAP32[$18>>2]|0; //@line 3623 "emscripten/stb_image.c"
 $20 = $0; //@line 3623 "emscripten/stb_image.c"
 $21 = (($20) + 18492|0); //@line 3623 "emscripten/stb_image.c"
 $22 = HEAP32[$21>>2]|0; //@line 3623 "emscripten/stb_image.c"
 $23 = ($19|0)>=($22|0); //@line 3623 "emscripten/stb_image.c"
 if ($23) {
  STACKTOP = sp;return; //@line 3643 "emscripten/stb_image.c"
 }
 $24 = $0; //@line 3625 "emscripten/stb_image.c"
 $25 = (($24) + 18496|0); //@line 3625 "emscripten/stb_image.c"
 $26 = HEAP32[$25>>2]|0; //@line 3625 "emscripten/stb_image.c"
 $27 = $0; //@line 3625 "emscripten/stb_image.c"
 $28 = (($27) + 18500|0); //@line 3625 "emscripten/stb_image.c"
 $29 = HEAP32[$28>>2]|0; //@line 3625 "emscripten/stb_image.c"
 $30 = (($26) + ($29))|0; //@line 3625 "emscripten/stb_image.c"
 $31 = $0; //@line 3625 "emscripten/stb_image.c"
 $32 = (($31) + 8|0); //@line 3625 "emscripten/stb_image.c"
 $33 = HEAP32[$32>>2]|0; //@line 3625 "emscripten/stb_image.c"
 $34 = (($33) + ($30)|0); //@line 3625 "emscripten/stb_image.c"
 $p = $34; //@line 3625 "emscripten/stb_image.c"
 $35 = $1; //@line 3626 "emscripten/stb_image.c"
 $36 = $35&65535; //@line 3626 "emscripten/stb_image.c"
 $37 = $0; //@line 3626 "emscripten/stb_image.c"
 $38 = (($37) + 2080|0); //@line 3626 "emscripten/stb_image.c"
 $39 = (($38) + ($36<<2)|0); //@line 3626 "emscripten/stb_image.c"
 $40 = (($39) + 3|0); //@line 3626 "emscripten/stb_image.c"
 $41 = HEAP8[$40>>0]|0; //@line 3626 "emscripten/stb_image.c"
 $42 = $41&255; //@line 3626 "emscripten/stb_image.c"
 $43 = $42<<2; //@line 3626 "emscripten/stb_image.c"
 $44 = $0; //@line 3626 "emscripten/stb_image.c"
 $45 = (($44) + 18464|0); //@line 3626 "emscripten/stb_image.c"
 $46 = HEAP32[$45>>2]|0; //@line 3626 "emscripten/stb_image.c"
 $47 = (($46) + ($43)|0); //@line 3626 "emscripten/stb_image.c"
 $c = $47; //@line 3626 "emscripten/stb_image.c"
 $48 = $c; //@line 3628 "emscripten/stb_image.c"
 $49 = (($48) + 3|0); //@line 3628 "emscripten/stb_image.c"
 $50 = HEAP8[$49>>0]|0; //@line 3628 "emscripten/stb_image.c"
 $51 = $50&255; //@line 3628 "emscripten/stb_image.c"
 $52 = ($51|0)>=(128); //@line 3628 "emscripten/stb_image.c"
 if ($52) {
  $53 = $c; //@line 3629 "emscripten/stb_image.c"
  $54 = (($53) + 2|0); //@line 3629 "emscripten/stb_image.c"
  $55 = HEAP8[$54>>0]|0; //@line 3629 "emscripten/stb_image.c"
  $56 = $p; //@line 3629 "emscripten/stb_image.c"
  HEAP8[$56>>0] = $55; //@line 3629 "emscripten/stb_image.c"
  $57 = $c; //@line 3630 "emscripten/stb_image.c"
  $58 = (($57) + 1|0); //@line 3630 "emscripten/stb_image.c"
  $59 = HEAP8[$58>>0]|0; //@line 3630 "emscripten/stb_image.c"
  $60 = $p; //@line 3630 "emscripten/stb_image.c"
  $61 = (($60) + 1|0); //@line 3630 "emscripten/stb_image.c"
  HEAP8[$61>>0] = $59; //@line 3630 "emscripten/stb_image.c"
  $62 = $c; //@line 3631 "emscripten/stb_image.c"
  $63 = HEAP8[$62>>0]|0; //@line 3631 "emscripten/stb_image.c"
  $64 = $p; //@line 3631 "emscripten/stb_image.c"
  $65 = (($64) + 2|0); //@line 3631 "emscripten/stb_image.c"
  HEAP8[$65>>0] = $63; //@line 3631 "emscripten/stb_image.c"
  $66 = $c; //@line 3632 "emscripten/stb_image.c"
  $67 = (($66) + 3|0); //@line 3632 "emscripten/stb_image.c"
  $68 = HEAP8[$67>>0]|0; //@line 3632 "emscripten/stb_image.c"
  $69 = $p; //@line 3632 "emscripten/stb_image.c"
  $70 = (($69) + 3|0); //@line 3632 "emscripten/stb_image.c"
  HEAP8[$70>>0] = $68; //@line 3632 "emscripten/stb_image.c"
 }
 $71 = $0; //@line 3634 "emscripten/stb_image.c"
 $72 = (($71) + 18496|0); //@line 3634 "emscripten/stb_image.c"
 $73 = HEAP32[$72>>2]|0; //@line 3634 "emscripten/stb_image.c"
 $74 = (($73) + 4)|0; //@line 3634 "emscripten/stb_image.c"
 HEAP32[$72>>2] = $74; //@line 3634 "emscripten/stb_image.c"
 $75 = $0; //@line 3636 "emscripten/stb_image.c"
 $76 = (($75) + 18496|0); //@line 3636 "emscripten/stb_image.c"
 $77 = HEAP32[$76>>2]|0; //@line 3636 "emscripten/stb_image.c"
 $78 = $0; //@line 3636 "emscripten/stb_image.c"
 $79 = (($78) + 18488|0); //@line 3636 "emscripten/stb_image.c"
 $80 = HEAP32[$79>>2]|0; //@line 3636 "emscripten/stb_image.c"
 $81 = ($77|0)>=($80|0); //@line 3636 "emscripten/stb_image.c"
 if (!($81)) {
  STACKTOP = sp;return; //@line 3643 "emscripten/stb_image.c"
 }
 $82 = $0; //@line 3637 "emscripten/stb_image.c"
 $83 = (($82) + 18480|0); //@line 3637 "emscripten/stb_image.c"
 $84 = HEAP32[$83>>2]|0; //@line 3637 "emscripten/stb_image.c"
 $85 = $0; //@line 3637 "emscripten/stb_image.c"
 $86 = (($85) + 18496|0); //@line 3637 "emscripten/stb_image.c"
 HEAP32[$86>>2] = $84; //@line 3637 "emscripten/stb_image.c"
 $87 = $0; //@line 3638 "emscripten/stb_image.c"
 $88 = (($87) + 18472|0); //@line 3638 "emscripten/stb_image.c"
 $89 = HEAP32[$88>>2]|0; //@line 3638 "emscripten/stb_image.c"
 $90 = $0; //@line 3638 "emscripten/stb_image.c"
 $91 = (($90) + 18500|0); //@line 3638 "emscripten/stb_image.c"
 $92 = HEAP32[$91>>2]|0; //@line 3638 "emscripten/stb_image.c"
 $93 = (($92) + ($89))|0; //@line 3638 "emscripten/stb_image.c"
 HEAP32[$91>>2] = $93; //@line 3638 "emscripten/stb_image.c"
 while(1) {
  $94 = $0; //@line 3640 "emscripten/stb_image.c"
  $95 = (($94) + 18500|0); //@line 3640 "emscripten/stb_image.c"
  $96 = HEAP32[$95>>2]|0; //@line 3640 "emscripten/stb_image.c"
  $97 = $0; //@line 3640 "emscripten/stb_image.c"
  $98 = (($97) + 18492|0); //@line 3640 "emscripten/stb_image.c"
  $99 = HEAP32[$98>>2]|0; //@line 3640 "emscripten/stb_image.c"
  $100 = ($96|0)>=($99|0); //@line 3640 "emscripten/stb_image.c"
  if ($100) {
   $101 = $0; //@line 3640 "emscripten/stb_image.c"
   $102 = (($101) + 18468|0); //@line 3640 "emscripten/stb_image.c"
   $103 = HEAP32[$102>>2]|0; //@line 3640 "emscripten/stb_image.c"
   $104 = ($103|0)>(0); //@line 3640 "emscripten/stb_image.c"
   $129 = $104;
  } else {
   $129 = 0;
  }
  if (!($129)) {
   break;
  }
  $105 = $0; //@line 3641 "emscripten/stb_image.c"
  $106 = (($105) + 18468|0); //@line 3641 "emscripten/stb_image.c"
  $107 = HEAP32[$106>>2]|0; //@line 3641 "emscripten/stb_image.c"
  $108 = 1 << $107; //@line 3641 "emscripten/stb_image.c"
  $109 = $0; //@line 3641 "emscripten/stb_image.c"
  $110 = (($109) + 18504|0); //@line 3641 "emscripten/stb_image.c"
  $111 = HEAP32[$110>>2]|0; //@line 3641 "emscripten/stb_image.c"
  $112 = Math_imul($108, $111)|0; //@line 3641 "emscripten/stb_image.c"
  $113 = $0; //@line 3641 "emscripten/stb_image.c"
  $114 = (($113) + 18472|0); //@line 3641 "emscripten/stb_image.c"
  HEAP32[$114>>2] = $112; //@line 3641 "emscripten/stb_image.c"
  $115 = $0; //@line 3642 "emscripten/stb_image.c"
  $116 = (($115) + 18484|0); //@line 3642 "emscripten/stb_image.c"
  $117 = HEAP32[$116>>2]|0; //@line 3642 "emscripten/stb_image.c"
  $118 = $0; //@line 3642 "emscripten/stb_image.c"
  $119 = (($118) + 18472|0); //@line 3642 "emscripten/stb_image.c"
  $120 = HEAP32[$119>>2]|0; //@line 3642 "emscripten/stb_image.c"
  $121 = $120 >> 1; //@line 3642 "emscripten/stb_image.c"
  $122 = (($117) + ($121))|0; //@line 3642 "emscripten/stb_image.c"
  $123 = $0; //@line 3642 "emscripten/stb_image.c"
  $124 = (($123) + 18500|0); //@line 3642 "emscripten/stb_image.c"
  HEAP32[$124>>2] = $122; //@line 3642 "emscripten/stb_image.c"
  $125 = $0; //@line 3643 "emscripten/stb_image.c"
  $126 = (($125) + 18468|0); //@line 3643 "emscripten/stb_image.c"
  $127 = HEAP32[$126>>2]|0; //@line 3643 "emscripten/stb_image.c"
  $128 = (($127) + -1)|0; //@line 3643 "emscripten/stb_image.c"
  HEAP32[$126>>2] = $128; //@line 3643 "emscripten/stb_image.c"
 }
 STACKTOP = sp;return; //@line 3643 "emscripten/stb_image.c"
}
function __ZL8gif_testP4stbi($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sz = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $s;
 $2 = $1; //@line 3549 "emscripten/stb_image.c"
 $3 = (__ZL4get8P4stbi($2)|0); //@line 3549 "emscripten/stb_image.c"
 $4 = ($3|0)!=(71); //@line 3549 "emscripten/stb_image.c"
 do {
  if ($4) {
   label = 5;
  } else {
   $5 = $1; //@line 3549 "emscripten/stb_image.c"
   $6 = (__ZL4get8P4stbi($5)|0); //@line 3549 "emscripten/stb_image.c"
   $7 = ($6|0)!=(73); //@line 3549 "emscripten/stb_image.c"
   if ($7) {
    label = 5;
   } else {
    $8 = $1; //@line 3549 "emscripten/stb_image.c"
    $9 = (__ZL4get8P4stbi($8)|0); //@line 3549 "emscripten/stb_image.c"
    $10 = ($9|0)!=(70); //@line 3549 "emscripten/stb_image.c"
    if ($10) {
     label = 5;
    } else {
     $11 = $1; //@line 3549 "emscripten/stb_image.c"
     $12 = (__ZL4get8P4stbi($11)|0); //@line 3549 "emscripten/stb_image.c"
     $13 = ($12|0)!=(56); //@line 3549 "emscripten/stb_image.c"
     if ($13) {
      label = 5;
     } else {
      $14 = $1; //@line 3550 "emscripten/stb_image.c"
      $15 = (__ZL4get8P4stbi($14)|0); //@line 3550 "emscripten/stb_image.c"
      $sz = $15; //@line 3550 "emscripten/stb_image.c"
      $16 = $sz; //@line 3551 "emscripten/stb_image.c"
      $17 = ($16|0)!=(57); //@line 3551 "emscripten/stb_image.c"
      if ($17) {
       $18 = $sz; //@line 3551 "emscripten/stb_image.c"
       $19 = ($18|0)!=(55); //@line 3551 "emscripten/stb_image.c"
       if ($19) {
        $0 = 0; //@line 3551 "emscripten/stb_image.c"
        break;
       }
      }
      $20 = $1; //@line 3552 "emscripten/stb_image.c"
      $21 = (__ZL4get8P4stbi($20)|0); //@line 3552 "emscripten/stb_image.c"
      $22 = ($21|0)!=(97); //@line 3552 "emscripten/stb_image.c"
      if ($22) {
       $0 = 0; //@line 3552 "emscripten/stb_image.c"
       break;
      } else {
       $0 = 1; //@line 3553 "emscripten/stb_image.c"
       break;
      }
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 5) {
  $0 = 0; //@line 3549 "emscripten/stb_image.c"
 }
 $23 = $0; //@line 3553 "emscripten/stb_image.c"
 STACKTOP = sp;return ($23|0); //@line 3553 "emscripten/stb_image.c"
}
function __ZL8bmp_loadP4stbiPiS1_S1_i($s,$x,$y,$comp,$req_comp) {
 $s = $s|0;
 $x = $x|0;
 $y = $y|0;
 $comp = $comp|0;
 $req_comp = $req_comp|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a = 0, $a4 = 0, $acount = 0, $ashift = 0, $bcount = 0, $bpp = 0, $bshift = 0, $compress = 0, $easy = 0, $fake_a = 0;
 var $flip_vertically = 0, $gcount = 0, $gshift = 0, $hsz = 0, $i = 0, $j = 0, $ma = 0, $mb = 0, $mg = 0, $mr = 0, $offset = 0, $out = 0, $p1 = 0, $p2 = 0, $pad = 0, $pal = 0, $psize = 0, $rcount = 0, $rshift = 0, $t = 0;
 var $target = 0, $v = 0, $v2 = 0, $v3 = 0, $width = 0, $z = 0, $z1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1200|0;
 $pal = sp + 168|0;
 $1 = $s;
 $2 = $x;
 $3 = $y;
 $4 = $comp;
 $5 = $req_comp;
 $mr = 0; //@line 2623 "emscripten/stb_image.c"
 $mg = 0; //@line 2623 "emscripten/stb_image.c"
 $mb = 0; //@line 2623 "emscripten/stb_image.c"
 $ma = 0; //@line 2623 "emscripten/stb_image.c"
 $fake_a = 0; //@line 2623 "emscripten/stb_image.c"
 $psize = 0; //@line 2625 "emscripten/stb_image.c"
 $compress = 0; //@line 2625 "emscripten/stb_image.c"
 $6 = $1; //@line 2627 "emscripten/stb_image.c"
 $7 = (__ZL4get8P4stbi($6)|0); //@line 2627 "emscripten/stb_image.c"
 $8 = ($7|0)!=(66); //@line 2627 "emscripten/stb_image.c"
 if (!($8)) {
  $9 = $1; //@line 2627 "emscripten/stb_image.c"
  $10 = (__ZL4get8P4stbi($9)|0); //@line 2627 "emscripten/stb_image.c"
  $11 = ($10|0)!=(77); //@line 2627 "emscripten/stb_image.c"
  if (!($11)) {
   $16 = $1; //@line 2628 "emscripten/stb_image.c"
   (__ZL7get32leP4stbi($16)|0); //@line 2628 "emscripten/stb_image.c"
   $17 = $1; //@line 2629 "emscripten/stb_image.c"
   (__ZL7get16leP4stbi($17)|0); //@line 2629 "emscripten/stb_image.c"
   $18 = $1; //@line 2630 "emscripten/stb_image.c"
   (__ZL7get16leP4stbi($18)|0); //@line 2630 "emscripten/stb_image.c"
   $19 = $1; //@line 2631 "emscripten/stb_image.c"
   $20 = (__ZL7get32leP4stbi($19)|0); //@line 2631 "emscripten/stb_image.c"
   $offset = $20; //@line 2631 "emscripten/stb_image.c"
   $21 = $1; //@line 2632 "emscripten/stb_image.c"
   $22 = (__ZL7get32leP4stbi($21)|0); //@line 2632 "emscripten/stb_image.c"
   $hsz = $22; //@line 2632 "emscripten/stb_image.c"
   $23 = $hsz; //@line 2633 "emscripten/stb_image.c"
   $24 = ($23|0)!=(12); //@line 2633 "emscripten/stb_image.c"
   if ($24) {
    $25 = $hsz; //@line 2633 "emscripten/stb_image.c"
    $26 = ($25|0)!=(40); //@line 2633 "emscripten/stb_image.c"
    if ($26) {
     $27 = $hsz; //@line 2633 "emscripten/stb_image.c"
     $28 = ($27|0)!=(56); //@line 2633 "emscripten/stb_image.c"
     if ($28) {
      $29 = $hsz; //@line 2633 "emscripten/stb_image.c"
      $30 = ($29|0)!=(108); //@line 2633 "emscripten/stb_image.c"
      if ($30) {
       $31 = (__ZL1ePKc(29208)|0); //@line 2633 "emscripten/stb_image.c"
       $32 = ($31|0)!=(0); //@line 2633 "emscripten/stb_image.c"
       $33 = $32 ? 0 : 0; //@line 2633 "emscripten/stb_image.c"
       $34 = $33; //@line 2633 "emscripten/stb_image.c"
       $0 = $34; //@line 2633 "emscripten/stb_image.c"
       $609 = $0; //@line 2813 "emscripten/stb_image.c"
       STACKTOP = sp;return ($609|0); //@line 2813 "emscripten/stb_image.c"
      }
     }
    }
   }
   $35 = $hsz; //@line 2634 "emscripten/stb_image.c"
   $36 = ($35|0)==(12); //@line 2634 "emscripten/stb_image.c"
   if ($36) {
    $37 = $1; //@line 2635 "emscripten/stb_image.c"
    $38 = (__ZL7get16leP4stbi($37)|0); //@line 2635 "emscripten/stb_image.c"
    $39 = $1; //@line 2635 "emscripten/stb_image.c"
    HEAP32[$39>>2] = $38; //@line 2635 "emscripten/stb_image.c"
    $40 = $1; //@line 2636 "emscripten/stb_image.c"
    $41 = (__ZL7get16leP4stbi($40)|0); //@line 2636 "emscripten/stb_image.c"
    $42 = $1; //@line 2636 "emscripten/stb_image.c"
    $43 = (($42) + 4|0); //@line 2636 "emscripten/stb_image.c"
    HEAP32[$43>>2] = $41; //@line 2636 "emscripten/stb_image.c"
   } else {
    $44 = $1; //@line 2638 "emscripten/stb_image.c"
    $45 = (__ZL7get32leP4stbi($44)|0); //@line 2638 "emscripten/stb_image.c"
    $46 = $1; //@line 2638 "emscripten/stb_image.c"
    HEAP32[$46>>2] = $45; //@line 2638 "emscripten/stb_image.c"
    $47 = $1; //@line 2639 "emscripten/stb_image.c"
    $48 = (__ZL7get32leP4stbi($47)|0); //@line 2639 "emscripten/stb_image.c"
    $49 = $1; //@line 2639 "emscripten/stb_image.c"
    $50 = (($49) + 4|0); //@line 2639 "emscripten/stb_image.c"
    HEAP32[$50>>2] = $48; //@line 2639 "emscripten/stb_image.c"
   }
   $51 = $1; //@line 2641 "emscripten/stb_image.c"
   $52 = (__ZL7get16leP4stbi($51)|0); //@line 2641 "emscripten/stb_image.c"
   $53 = ($52|0)!=(1); //@line 2641 "emscripten/stb_image.c"
   if ($53) {
    $54 = (__ZL1ePKc(29224)|0); //@line 2641 "emscripten/stb_image.c"
    $55 = ($54|0)!=(0); //@line 2641 "emscripten/stb_image.c"
    $56 = $55 ? 0 : 0; //@line 2641 "emscripten/stb_image.c"
    $57 = $56; //@line 2641 "emscripten/stb_image.c"
    $0 = $57; //@line 2641 "emscripten/stb_image.c"
    $609 = $0; //@line 2813 "emscripten/stb_image.c"
    STACKTOP = sp;return ($609|0); //@line 2813 "emscripten/stb_image.c"
   }
   $58 = $1; //@line 2642 "emscripten/stb_image.c"
   $59 = (__ZL7get16leP4stbi($58)|0); //@line 2642 "emscripten/stb_image.c"
   $bpp = $59; //@line 2642 "emscripten/stb_image.c"
   $60 = $bpp; //@line 2643 "emscripten/stb_image.c"
   $61 = ($60|0)==(1); //@line 2643 "emscripten/stb_image.c"
   if ($61) {
    $62 = (__ZL1ePKc(29232)|0); //@line 2643 "emscripten/stb_image.c"
    $63 = ($62|0)!=(0); //@line 2643 "emscripten/stb_image.c"
    $64 = $63 ? 0 : 0; //@line 2643 "emscripten/stb_image.c"
    $65 = $64; //@line 2643 "emscripten/stb_image.c"
    $0 = $65; //@line 2643 "emscripten/stb_image.c"
    $609 = $0; //@line 2813 "emscripten/stb_image.c"
    STACKTOP = sp;return ($609|0); //@line 2813 "emscripten/stb_image.c"
   }
   $66 = $1; //@line 2644 "emscripten/stb_image.c"
   $67 = (($66) + 4|0); //@line 2644 "emscripten/stb_image.c"
   $68 = HEAP32[$67>>2]|0; //@line 2644 "emscripten/stb_image.c"
   $69 = ($68|0)>(0); //@line 2644 "emscripten/stb_image.c"
   $70 = $69&1; //@line 2644 "emscripten/stb_image.c"
   $flip_vertically = $70; //@line 2644 "emscripten/stb_image.c"
   $71 = $1; //@line 2645 "emscripten/stb_image.c"
   $72 = (($71) + 4|0); //@line 2645 "emscripten/stb_image.c"
   $73 = HEAP32[$72>>2]|0; //@line 2645 "emscripten/stb_image.c"
   $74 = (Math_abs(($73|0))|0); //@line 2645 "emscripten/stb_image.c"
   $75 = $1; //@line 2645 "emscripten/stb_image.c"
   $76 = (($75) + 4|0); //@line 2645 "emscripten/stb_image.c"
   HEAP32[$76>>2] = $74; //@line 2645 "emscripten/stb_image.c"
   $77 = $hsz; //@line 2646 "emscripten/stb_image.c"
   $78 = ($77|0)==(12); //@line 2646 "emscripten/stb_image.c"
   do {
    if ($78) {
     $79 = $bpp; //@line 2647 "emscripten/stb_image.c"
     $80 = ($79|0)<(24); //@line 2647 "emscripten/stb_image.c"
     if ($80) {
      $81 = $offset; //@line 2648 "emscripten/stb_image.c"
      $82 = (($81) - 14)|0; //@line 2648 "emscripten/stb_image.c"
      $83 = (($82) - 24)|0; //@line 2648 "emscripten/stb_image.c"
      $84 = (($83|0) / 3)&-1; //@line 2648 "emscripten/stb_image.c"
      $psize = $84; //@line 2648 "emscripten/stb_image.c"
     }
    } else {
     $85 = $1; //@line 2650 "emscripten/stb_image.c"
     $86 = (__ZL7get32leP4stbi($85)|0); //@line 2650 "emscripten/stb_image.c"
     $compress = $86; //@line 2650 "emscripten/stb_image.c"
     $87 = $compress; //@line 2651 "emscripten/stb_image.c"
     $88 = ($87|0)==(1); //@line 2651 "emscripten/stb_image.c"
     if (!($88)) {
      $89 = $compress; //@line 2651 "emscripten/stb_image.c"
      $90 = ($89|0)==(2); //@line 2651 "emscripten/stb_image.c"
      if (!($90)) {
       $95 = $1; //@line 2652 "emscripten/stb_image.c"
       (__ZL7get32leP4stbi($95)|0); //@line 2652 "emscripten/stb_image.c"
       $96 = $1; //@line 2653 "emscripten/stb_image.c"
       (__ZL7get32leP4stbi($96)|0); //@line 2653 "emscripten/stb_image.c"
       $97 = $1; //@line 2654 "emscripten/stb_image.c"
       (__ZL7get32leP4stbi($97)|0); //@line 2654 "emscripten/stb_image.c"
       $98 = $1; //@line 2655 "emscripten/stb_image.c"
       (__ZL7get32leP4stbi($98)|0); //@line 2655 "emscripten/stb_image.c"
       $99 = $1; //@line 2656 "emscripten/stb_image.c"
       (__ZL7get32leP4stbi($99)|0); //@line 2656 "emscripten/stb_image.c"
       $100 = $hsz; //@line 2657 "emscripten/stb_image.c"
       $101 = ($100|0)==(40); //@line 2657 "emscripten/stb_image.c"
       if ($101) {
        label = 25;
       } else {
        $102 = $hsz; //@line 2657 "emscripten/stb_image.c"
        $103 = ($102|0)==(56); //@line 2657 "emscripten/stb_image.c"
        if ($103) {
         label = 25;
        } else {
         $140 = $hsz; //@line 2691 "emscripten/stb_image.c"
         $141 = ($140|0)==(108); //@line 2691 "emscripten/stb_image.c"
         if (!($141)) {
          ___assert_fail((29256|0),(26712|0),2691,(29272|0)); //@line 2691 "emscripten/stb_image.c"
          // unreachable; //@line 2691 "emscripten/stb_image.c"
         }
         $142 = $1; //@line 2692 "emscripten/stb_image.c"
         $143 = (__ZL7get32leP4stbi($142)|0); //@line 2692 "emscripten/stb_image.c"
         $mr = $143; //@line 2692 "emscripten/stb_image.c"
         $144 = $1; //@line 2693 "emscripten/stb_image.c"
         $145 = (__ZL7get32leP4stbi($144)|0); //@line 2693 "emscripten/stb_image.c"
         $mg = $145; //@line 2693 "emscripten/stb_image.c"
         $146 = $1; //@line 2694 "emscripten/stb_image.c"
         $147 = (__ZL7get32leP4stbi($146)|0); //@line 2694 "emscripten/stb_image.c"
         $mb = $147; //@line 2694 "emscripten/stb_image.c"
         $148 = $1; //@line 2695 "emscripten/stb_image.c"
         $149 = (__ZL7get32leP4stbi($148)|0); //@line 2695 "emscripten/stb_image.c"
         $ma = $149; //@line 2695 "emscripten/stb_image.c"
         $150 = $1; //@line 2696 "emscripten/stb_image.c"
         (__ZL7get32leP4stbi($150)|0); //@line 2696 "emscripten/stb_image.c"
         $i = 0; //@line 2697 "emscripten/stb_image.c"
         while(1) {
          $151 = $i; //@line 2697 "emscripten/stb_image.c"
          $152 = ($151|0)<(12); //@line 2697 "emscripten/stb_image.c"
          if (!($152)) {
           break;
          }
          $153 = $1; //@line 2698 "emscripten/stb_image.c"
          (__ZL7get32leP4stbi($153)|0); //@line 2698 "emscripten/stb_image.c"
          $154 = $i; //@line 2697 "emscripten/stb_image.c"
          $155 = (($154) + 1)|0; //@line 2697 "emscripten/stb_image.c"
          $i = $155; //@line 2697 "emscripten/stb_image.c"
         }
        }
       }
       if ((label|0) == 25) {
        $104 = $hsz; //@line 2658 "emscripten/stb_image.c"
        $105 = ($104|0)==(56); //@line 2658 "emscripten/stb_image.c"
        if ($105) {
         $106 = $1; //@line 2659 "emscripten/stb_image.c"
         (__ZL7get32leP4stbi($106)|0); //@line 2659 "emscripten/stb_image.c"
         $107 = $1; //@line 2660 "emscripten/stb_image.c"
         (__ZL7get32leP4stbi($107)|0); //@line 2660 "emscripten/stb_image.c"
         $108 = $1; //@line 2661 "emscripten/stb_image.c"
         (__ZL7get32leP4stbi($108)|0); //@line 2661 "emscripten/stb_image.c"
         $109 = $1; //@line 2662 "emscripten/stb_image.c"
         (__ZL7get32leP4stbi($109)|0); //@line 2662 "emscripten/stb_image.c"
        }
        $110 = $bpp; //@line 2664 "emscripten/stb_image.c"
        $111 = ($110|0)==(16); //@line 2664 "emscripten/stb_image.c"
        if ($111) {
         label = 29;
        } else {
         $112 = $bpp; //@line 2664 "emscripten/stb_image.c"
         $113 = ($112|0)==(32); //@line 2664 "emscripten/stb_image.c"
         if ($113) {
          label = 29;
         }
        }
        if ((label|0) == 29) {
         $mb = 0; //@line 2665 "emscripten/stb_image.c"
         $mg = 0; //@line 2665 "emscripten/stb_image.c"
         $mr = 0; //@line 2665 "emscripten/stb_image.c"
         $114 = $compress; //@line 2666 "emscripten/stb_image.c"
         $115 = ($114|0)==(0); //@line 2666 "emscripten/stb_image.c"
         if ($115) {
          $116 = $bpp; //@line 2667 "emscripten/stb_image.c"
          $117 = ($116|0)==(32); //@line 2667 "emscripten/stb_image.c"
          if ($117) {
           $mr = 16711680; //@line 2668 "emscripten/stb_image.c"
           $mg = 65280; //@line 2669 "emscripten/stb_image.c"
           $mb = 255; //@line 2670 "emscripten/stb_image.c"
           $ma = -16777216; //@line 2671 "emscripten/stb_image.c"
           $fake_a = 1; //@line 2672 "emscripten/stb_image.c"
          } else {
           $mr = 31744; //@line 2674 "emscripten/stb_image.c"
           $mg = 992; //@line 2675 "emscripten/stb_image.c"
           $mb = 31; //@line 2676 "emscripten/stb_image.c"
          }
         } else {
          $118 = $compress; //@line 2678 "emscripten/stb_image.c"
          $119 = ($118|0)==(3); //@line 2678 "emscripten/stb_image.c"
          if (!($119)) {
           $136 = (__ZL1ePKc(29224)|0); //@line 2688 "emscripten/stb_image.c"
           $137 = ($136|0)!=(0); //@line 2688 "emscripten/stb_image.c"
           $138 = $137 ? 0 : 0; //@line 2688 "emscripten/stb_image.c"
           $139 = $138; //@line 2688 "emscripten/stb_image.c"
           $0 = $139; //@line 2688 "emscripten/stb_image.c"
           $609 = $0; //@line 2813 "emscripten/stb_image.c"
           STACKTOP = sp;return ($609|0); //@line 2813 "emscripten/stb_image.c"
          }
          $120 = $1; //@line 2679 "emscripten/stb_image.c"
          $121 = (__ZL7get32leP4stbi($120)|0); //@line 2679 "emscripten/stb_image.c"
          $mr = $121; //@line 2679 "emscripten/stb_image.c"
          $122 = $1; //@line 2680 "emscripten/stb_image.c"
          $123 = (__ZL7get32leP4stbi($122)|0); //@line 2680 "emscripten/stb_image.c"
          $mg = $123; //@line 2680 "emscripten/stb_image.c"
          $124 = $1; //@line 2681 "emscripten/stb_image.c"
          $125 = (__ZL7get32leP4stbi($124)|0); //@line 2681 "emscripten/stb_image.c"
          $mb = $125; //@line 2681 "emscripten/stb_image.c"
          $126 = $mr; //@line 2683 "emscripten/stb_image.c"
          $127 = $mg; //@line 2683 "emscripten/stb_image.c"
          $128 = ($126|0)==($127|0); //@line 2683 "emscripten/stb_image.c"
          do {
           if ($128) {
            $129 = $mg; //@line 2683 "emscripten/stb_image.c"
            $130 = $mb; //@line 2683 "emscripten/stb_image.c"
            $131 = ($129|0)==($130|0); //@line 2683 "emscripten/stb_image.c"
            if (!($131)) {
             break;
            }
            $132 = (__ZL1ePKc(29224)|0); //@line 2685 "emscripten/stb_image.c"
            $133 = ($132|0)!=(0); //@line 2685 "emscripten/stb_image.c"
            $134 = $133 ? 0 : 0; //@line 2685 "emscripten/stb_image.c"
            $135 = $134; //@line 2685 "emscripten/stb_image.c"
            $0 = $135; //@line 2685 "emscripten/stb_image.c"
            $609 = $0; //@line 2813 "emscripten/stb_image.c"
            STACKTOP = sp;return ($609|0); //@line 2813 "emscripten/stb_image.c"
           }
          } while(0);
         }
        }
       }
       $156 = $bpp; //@line 2700 "emscripten/stb_image.c"
       $157 = ($156|0)<(16); //@line 2700 "emscripten/stb_image.c"
       if ($157) {
        $158 = $offset; //@line 2701 "emscripten/stb_image.c"
        $159 = (($158) - 14)|0; //@line 2701 "emscripten/stb_image.c"
        $160 = $hsz; //@line 2701 "emscripten/stb_image.c"
        $161 = (($159) - ($160))|0; //@line 2701 "emscripten/stb_image.c"
        $162 = $161 >> 2; //@line 2701 "emscripten/stb_image.c"
        $psize = $162; //@line 2701 "emscripten/stb_image.c"
       }
       break;
      }
     }
     $91 = (__ZL1ePKc(29248)|0); //@line 2651 "emscripten/stb_image.c"
     $92 = ($91|0)!=(0); //@line 2651 "emscripten/stb_image.c"
     $93 = $92 ? 0 : 0; //@line 2651 "emscripten/stb_image.c"
     $94 = $93; //@line 2651 "emscripten/stb_image.c"
     $0 = $94; //@line 2651 "emscripten/stb_image.c"
     $609 = $0; //@line 2813 "emscripten/stb_image.c"
     STACKTOP = sp;return ($609|0); //@line 2813 "emscripten/stb_image.c"
    }
   } while(0);
   $163 = $ma; //@line 2703 "emscripten/stb_image.c"
   $164 = ($163|0)!=(0); //@line 2703 "emscripten/stb_image.c"
   $165 = $164 ? 4 : 3; //@line 2703 "emscripten/stb_image.c"
   $166 = $1; //@line 2703 "emscripten/stb_image.c"
   $167 = (($166) + 8|0); //@line 2703 "emscripten/stb_image.c"
   HEAP32[$167>>2] = $165; //@line 2703 "emscripten/stb_image.c"
   $168 = $5; //@line 2704 "emscripten/stb_image.c"
   $169 = ($168|0)!=(0); //@line 2704 "emscripten/stb_image.c"
   if ($169) {
    $170 = $5; //@line 2704 "emscripten/stb_image.c"
    $171 = ($170|0)>=(3); //@line 2704 "emscripten/stb_image.c"
    if ($171) {
     $172 = $5; //@line 2705 "emscripten/stb_image.c"
     $target = $172; //@line 2705 "emscripten/stb_image.c"
    } else {
     label = 56;
    }
   } else {
    label = 56;
   }
   if ((label|0) == 56) {
    $173 = $1; //@line 2707 "emscripten/stb_image.c"
    $174 = (($173) + 8|0); //@line 2707 "emscripten/stb_image.c"
    $175 = HEAP32[$174>>2]|0; //@line 2707 "emscripten/stb_image.c"
    $target = $175; //@line 2707 "emscripten/stb_image.c"
   }
   $176 = $target; //@line 2708 "emscripten/stb_image.c"
   $177 = $1; //@line 2708 "emscripten/stb_image.c"
   $178 = HEAP32[$177>>2]|0; //@line 2708 "emscripten/stb_image.c"
   $179 = Math_imul($176, $178)|0; //@line 2708 "emscripten/stb_image.c"
   $180 = $1; //@line 2708 "emscripten/stb_image.c"
   $181 = (($180) + 4|0); //@line 2708 "emscripten/stb_image.c"
   $182 = HEAP32[$181>>2]|0; //@line 2708 "emscripten/stb_image.c"
   $183 = Math_imul($179, $182)|0; //@line 2708 "emscripten/stb_image.c"
   $184 = (_malloc($183)|0); //@line 2708 "emscripten/stb_image.c"
   $out = $184; //@line 2708 "emscripten/stb_image.c"
   $185 = $out; //@line 2709 "emscripten/stb_image.c"
   $186 = ($185|0)!=(0|0); //@line 2709 "emscripten/stb_image.c"
   if (!($186)) {
    $187 = (__ZL1ePKc(26624)|0); //@line 2709 "emscripten/stb_image.c"
    $188 = ($187|0)!=(0); //@line 2709 "emscripten/stb_image.c"
    $189 = $188 ? 0 : 0; //@line 2709 "emscripten/stb_image.c"
    $190 = $189; //@line 2709 "emscripten/stb_image.c"
    $0 = $190; //@line 2709 "emscripten/stb_image.c"
    $609 = $0; //@line 2813 "emscripten/stb_image.c"
    STACKTOP = sp;return ($609|0); //@line 2813 "emscripten/stb_image.c"
   }
   $191 = $bpp; //@line 2710 "emscripten/stb_image.c"
   $192 = ($191|0)<(16); //@line 2710 "emscripten/stb_image.c"
   do {
    if ($192) {
     $z = 0; //@line 2711 "emscripten/stb_image.c"
     $193 = $psize; //@line 2712 "emscripten/stb_image.c"
     $194 = ($193|0)==(0); //@line 2712 "emscripten/stb_image.c"
     if (!($194)) {
      $195 = $psize; //@line 2712 "emscripten/stb_image.c"
      $196 = ($195|0)>(256); //@line 2712 "emscripten/stb_image.c"
      if (!($196)) {
       $i = 0; //@line 2713 "emscripten/stb_image.c"
       while(1) {
        $202 = $i; //@line 2713 "emscripten/stb_image.c"
        $203 = $psize; //@line 2713 "emscripten/stb_image.c"
        $204 = ($202|0)<($203|0); //@line 2713 "emscripten/stb_image.c"
        if (!($204)) {
         break;
        }
        $205 = $1; //@line 2714 "emscripten/stb_image.c"
        $206 = (__ZL5get8uP4stbi($205)|0); //@line 2714 "emscripten/stb_image.c"
        $207 = $i; //@line 2714 "emscripten/stb_image.c"
        $208 = (($pal) + ($207<<2)|0); //@line 2714 "emscripten/stb_image.c"
        $209 = (($208) + 2|0); //@line 2714 "emscripten/stb_image.c"
        HEAP8[$209>>0] = $206; //@line 2714 "emscripten/stb_image.c"
        $210 = $1; //@line 2715 "emscripten/stb_image.c"
        $211 = (__ZL5get8uP4stbi($210)|0); //@line 2715 "emscripten/stb_image.c"
        $212 = $i; //@line 2715 "emscripten/stb_image.c"
        $213 = (($pal) + ($212<<2)|0); //@line 2715 "emscripten/stb_image.c"
        $214 = (($213) + 1|0); //@line 2715 "emscripten/stb_image.c"
        HEAP8[$214>>0] = $211; //@line 2715 "emscripten/stb_image.c"
        $215 = $1; //@line 2716 "emscripten/stb_image.c"
        $216 = (__ZL5get8uP4stbi($215)|0); //@line 2716 "emscripten/stb_image.c"
        $217 = $i; //@line 2716 "emscripten/stb_image.c"
        $218 = (($pal) + ($217<<2)|0); //@line 2716 "emscripten/stb_image.c"
        HEAP8[$218>>0] = $216; //@line 2716 "emscripten/stb_image.c"
        $219 = $hsz; //@line 2717 "emscripten/stb_image.c"
        $220 = ($219|0)!=(12); //@line 2717 "emscripten/stb_image.c"
        if ($220) {
         $221 = $1; //@line 2717 "emscripten/stb_image.c"
         (__ZL4get8P4stbi($221)|0); //@line 2717 "emscripten/stb_image.c"
        }
        $222 = $i; //@line 2718 "emscripten/stb_image.c"
        $223 = (($pal) + ($222<<2)|0); //@line 2718 "emscripten/stb_image.c"
        $224 = (($223) + 3|0); //@line 2718 "emscripten/stb_image.c"
        HEAP8[$224>>0] = -1; //@line 2718 "emscripten/stb_image.c"
        $225 = $i; //@line 2713 "emscripten/stb_image.c"
        $226 = (($225) + 1)|0; //@line 2713 "emscripten/stb_image.c"
        $i = $226; //@line 2713 "emscripten/stb_image.c"
       }
       $227 = $1; //@line 2720 "emscripten/stb_image.c"
       $228 = $offset; //@line 2720 "emscripten/stb_image.c"
       $229 = (($228) - 14)|0; //@line 2720 "emscripten/stb_image.c"
       $230 = $hsz; //@line 2720 "emscripten/stb_image.c"
       $231 = (($229) - ($230))|0; //@line 2720 "emscripten/stb_image.c"
       $232 = $psize; //@line 2720 "emscripten/stb_image.c"
       $233 = $hsz; //@line 2720 "emscripten/stb_image.c"
       $234 = ($233|0)==(12); //@line 2720 "emscripten/stb_image.c"
       $235 = $234 ? 3 : 4; //@line 2720 "emscripten/stb_image.c"
       $236 = Math_imul($232, $235)|0; //@line 2720 "emscripten/stb_image.c"
       $237 = (($231) - ($236))|0; //@line 2720 "emscripten/stb_image.c"
       __ZL4skipP4stbii($227,$237); //@line 2720 "emscripten/stb_image.c"
       $238 = $bpp; //@line 2721 "emscripten/stb_image.c"
       $239 = ($238|0)==(4); //@line 2721 "emscripten/stb_image.c"
       do {
        if ($239) {
         $240 = $1; //@line 2721 "emscripten/stb_image.c"
         $241 = HEAP32[$240>>2]|0; //@line 2721 "emscripten/stb_image.c"
         $242 = (($241) + 1)|0; //@line 2721 "emscripten/stb_image.c"
         $243 = $242 >>> 1; //@line 2721 "emscripten/stb_image.c"
         $width = $243; //@line 2721 "emscripten/stb_image.c"
        } else {
         $244 = $bpp; //@line 2722 "emscripten/stb_image.c"
         $245 = ($244|0)==(8); //@line 2722 "emscripten/stb_image.c"
         if ($245) {
          $246 = $1; //@line 2722 "emscripten/stb_image.c"
          $247 = HEAP32[$246>>2]|0; //@line 2722 "emscripten/stb_image.c"
          $width = $247; //@line 2722 "emscripten/stb_image.c"
          break;
         } else {
          $248 = $out; //@line 2723 "emscripten/stb_image.c"
          _free($248); //@line 2723 "emscripten/stb_image.c"
          $249 = (__ZL1ePKc(29296)|0); //@line 2723 "emscripten/stb_image.c"
          $250 = ($249|0)!=(0); //@line 2723 "emscripten/stb_image.c"
          $251 = $250 ? 0 : 0; //@line 2723 "emscripten/stb_image.c"
          $252 = $251; //@line 2723 "emscripten/stb_image.c"
          $0 = $252; //@line 2723 "emscripten/stb_image.c"
          $609 = $0; //@line 2813 "emscripten/stb_image.c"
          STACKTOP = sp;return ($609|0); //@line 2813 "emscripten/stb_image.c"
         }
        }
       } while(0);
       $253 = $width; //@line 2724 "emscripten/stb_image.c"
       $254 = (0 - ($253))|0; //@line 2724 "emscripten/stb_image.c"
       $255 = $254 & 3; //@line 2724 "emscripten/stb_image.c"
       $pad = $255; //@line 2724 "emscripten/stb_image.c"
       $j = 0; //@line 2725 "emscripten/stb_image.c"
       while(1) {
        $256 = $j; //@line 2725 "emscripten/stb_image.c"
        $257 = $1; //@line 2725 "emscripten/stb_image.c"
        $258 = (($257) + 4|0); //@line 2725 "emscripten/stb_image.c"
        $259 = HEAP32[$258>>2]|0; //@line 2725 "emscripten/stb_image.c"
        $260 = ($256|0)<($259|0); //@line 2725 "emscripten/stb_image.c"
        if (!($260)) {
         break;
        }
        $i = 0; //@line 2726 "emscripten/stb_image.c"
        while(1) {
         $261 = $i; //@line 2726 "emscripten/stb_image.c"
         $262 = $1; //@line 2726 "emscripten/stb_image.c"
         $263 = HEAP32[$262>>2]|0; //@line 2726 "emscripten/stb_image.c"
         $264 = ($261|0)<($263|0); //@line 2726 "emscripten/stb_image.c"
         if (!($264)) {
          break;
         }
         $265 = $1; //@line 2727 "emscripten/stb_image.c"
         $266 = (__ZL4get8P4stbi($265)|0); //@line 2727 "emscripten/stb_image.c"
         $v = $266; //@line 2727 "emscripten/stb_image.c"
         $v2 = 0; //@line 2727 "emscripten/stb_image.c"
         $267 = $bpp; //@line 2728 "emscripten/stb_image.c"
         $268 = ($267|0)==(4); //@line 2728 "emscripten/stb_image.c"
         if ($268) {
          $269 = $v; //@line 2729 "emscripten/stb_image.c"
          $270 = $269 & 15; //@line 2729 "emscripten/stb_image.c"
          $v2 = $270; //@line 2729 "emscripten/stb_image.c"
          $271 = $v; //@line 2730 "emscripten/stb_image.c"
          $272 = $271 >> 4; //@line 2730 "emscripten/stb_image.c"
          $v = $272; //@line 2730 "emscripten/stb_image.c"
         }
         $273 = $v; //@line 2732 "emscripten/stb_image.c"
         $274 = (($pal) + ($273<<2)|0); //@line 2732 "emscripten/stb_image.c"
         $275 = HEAP8[$274>>0]|0; //@line 2732 "emscripten/stb_image.c"
         $276 = $z; //@line 2732 "emscripten/stb_image.c"
         $277 = (($276) + 1)|0; //@line 2732 "emscripten/stb_image.c"
         $z = $277; //@line 2732 "emscripten/stb_image.c"
         $278 = $out; //@line 2732 "emscripten/stb_image.c"
         $279 = (($278) + ($276)|0); //@line 2732 "emscripten/stb_image.c"
         HEAP8[$279>>0] = $275; //@line 2732 "emscripten/stb_image.c"
         $280 = $v; //@line 2733 "emscripten/stb_image.c"
         $281 = (($pal) + ($280<<2)|0); //@line 2733 "emscripten/stb_image.c"
         $282 = (($281) + 1|0); //@line 2733 "emscripten/stb_image.c"
         $283 = HEAP8[$282>>0]|0; //@line 2733 "emscripten/stb_image.c"
         $284 = $z; //@line 2733 "emscripten/stb_image.c"
         $285 = (($284) + 1)|0; //@line 2733 "emscripten/stb_image.c"
         $z = $285; //@line 2733 "emscripten/stb_image.c"
         $286 = $out; //@line 2733 "emscripten/stb_image.c"
         $287 = (($286) + ($284)|0); //@line 2733 "emscripten/stb_image.c"
         HEAP8[$287>>0] = $283; //@line 2733 "emscripten/stb_image.c"
         $288 = $v; //@line 2734 "emscripten/stb_image.c"
         $289 = (($pal) + ($288<<2)|0); //@line 2734 "emscripten/stb_image.c"
         $290 = (($289) + 2|0); //@line 2734 "emscripten/stb_image.c"
         $291 = HEAP8[$290>>0]|0; //@line 2734 "emscripten/stb_image.c"
         $292 = $z; //@line 2734 "emscripten/stb_image.c"
         $293 = (($292) + 1)|0; //@line 2734 "emscripten/stb_image.c"
         $z = $293; //@line 2734 "emscripten/stb_image.c"
         $294 = $out; //@line 2734 "emscripten/stb_image.c"
         $295 = (($294) + ($292)|0); //@line 2734 "emscripten/stb_image.c"
         HEAP8[$295>>0] = $291; //@line 2734 "emscripten/stb_image.c"
         $296 = $target; //@line 2735 "emscripten/stb_image.c"
         $297 = ($296|0)==(4); //@line 2735 "emscripten/stb_image.c"
         if ($297) {
          $298 = $z; //@line 2735 "emscripten/stb_image.c"
          $299 = (($298) + 1)|0; //@line 2735 "emscripten/stb_image.c"
          $z = $299; //@line 2735 "emscripten/stb_image.c"
          $300 = $out; //@line 2735 "emscripten/stb_image.c"
          $301 = (($300) + ($298)|0); //@line 2735 "emscripten/stb_image.c"
          HEAP8[$301>>0] = -1; //@line 2735 "emscripten/stb_image.c"
         }
         $302 = $i; //@line 2736 "emscripten/stb_image.c"
         $303 = (($302) + 1)|0; //@line 2736 "emscripten/stb_image.c"
         $304 = $1; //@line 2736 "emscripten/stb_image.c"
         $305 = HEAP32[$304>>2]|0; //@line 2736 "emscripten/stb_image.c"
         $306 = ($303|0)==($305|0); //@line 2736 "emscripten/stb_image.c"
         if ($306) {
          label = 84;
          break;
         }
         $307 = $bpp; //@line 2737 "emscripten/stb_image.c"
         $308 = ($307|0)==(8); //@line 2737 "emscripten/stb_image.c"
         if ($308) {
          $309 = $1; //@line 2737 "emscripten/stb_image.c"
          $310 = (__ZL4get8P4stbi($309)|0); //@line 2737 "emscripten/stb_image.c"
          $312 = $310;
         } else {
          $311 = $v2; //@line 2737 "emscripten/stb_image.c"
          $312 = $311;
         }
         $v = $312; //@line 2737 "emscripten/stb_image.c"
         $313 = $v; //@line 2738 "emscripten/stb_image.c"
         $314 = (($pal) + ($313<<2)|0); //@line 2738 "emscripten/stb_image.c"
         $315 = HEAP8[$314>>0]|0; //@line 2738 "emscripten/stb_image.c"
         $316 = $z; //@line 2738 "emscripten/stb_image.c"
         $317 = (($316) + 1)|0; //@line 2738 "emscripten/stb_image.c"
         $z = $317; //@line 2738 "emscripten/stb_image.c"
         $318 = $out; //@line 2738 "emscripten/stb_image.c"
         $319 = (($318) + ($316)|0); //@line 2738 "emscripten/stb_image.c"
         HEAP8[$319>>0] = $315; //@line 2738 "emscripten/stb_image.c"
         $320 = $v; //@line 2739 "emscripten/stb_image.c"
         $321 = (($pal) + ($320<<2)|0); //@line 2739 "emscripten/stb_image.c"
         $322 = (($321) + 1|0); //@line 2739 "emscripten/stb_image.c"
         $323 = HEAP8[$322>>0]|0; //@line 2739 "emscripten/stb_image.c"
         $324 = $z; //@line 2739 "emscripten/stb_image.c"
         $325 = (($324) + 1)|0; //@line 2739 "emscripten/stb_image.c"
         $z = $325; //@line 2739 "emscripten/stb_image.c"
         $326 = $out; //@line 2739 "emscripten/stb_image.c"
         $327 = (($326) + ($324)|0); //@line 2739 "emscripten/stb_image.c"
         HEAP8[$327>>0] = $323; //@line 2739 "emscripten/stb_image.c"
         $328 = $v; //@line 2740 "emscripten/stb_image.c"
         $329 = (($pal) + ($328<<2)|0); //@line 2740 "emscripten/stb_image.c"
         $330 = (($329) + 2|0); //@line 2740 "emscripten/stb_image.c"
         $331 = HEAP8[$330>>0]|0; //@line 2740 "emscripten/stb_image.c"
         $332 = $z; //@line 2740 "emscripten/stb_image.c"
         $333 = (($332) + 1)|0; //@line 2740 "emscripten/stb_image.c"
         $z = $333; //@line 2740 "emscripten/stb_image.c"
         $334 = $out; //@line 2740 "emscripten/stb_image.c"
         $335 = (($334) + ($332)|0); //@line 2740 "emscripten/stb_image.c"
         HEAP8[$335>>0] = $331; //@line 2740 "emscripten/stb_image.c"
         $336 = $target; //@line 2741 "emscripten/stb_image.c"
         $337 = ($336|0)==(4); //@line 2741 "emscripten/stb_image.c"
         if ($337) {
          $338 = $z; //@line 2741 "emscripten/stb_image.c"
          $339 = (($338) + 1)|0; //@line 2741 "emscripten/stb_image.c"
          $z = $339; //@line 2741 "emscripten/stb_image.c"
          $340 = $out; //@line 2741 "emscripten/stb_image.c"
          $341 = (($340) + ($338)|0); //@line 2741 "emscripten/stb_image.c"
          HEAP8[$341>>0] = -1; //@line 2741 "emscripten/stb_image.c"
         }
         $342 = $i; //@line 2726 "emscripten/stb_image.c"
         $343 = (($342) + 2)|0; //@line 2726 "emscripten/stb_image.c"
         $i = $343; //@line 2726 "emscripten/stb_image.c"
        }
        if ((label|0) == 84) {
         label = 0;
        }
        $344 = $1; //@line 2743 "emscripten/stb_image.c"
        $345 = $pad; //@line 2743 "emscripten/stb_image.c"
        __ZL4skipP4stbii($344,$345); //@line 2743 "emscripten/stb_image.c"
        $346 = $j; //@line 2725 "emscripten/stb_image.c"
        $347 = (($346) + 1)|0; //@line 2725 "emscripten/stb_image.c"
        $j = $347; //@line 2725 "emscripten/stb_image.c"
       }
       break;
      }
     }
     $197 = $out; //@line 2712 "emscripten/stb_image.c"
     _free($197); //@line 2712 "emscripten/stb_image.c"
     $198 = (__ZL1ePKc(29288)|0); //@line 2712 "emscripten/stb_image.c"
     $199 = ($198|0)!=(0); //@line 2712 "emscripten/stb_image.c"
     $200 = $199 ? 0 : 0; //@line 2712 "emscripten/stb_image.c"
     $201 = $200; //@line 2712 "emscripten/stb_image.c"
     $0 = $201; //@line 2712 "emscripten/stb_image.c"
     $609 = $0; //@line 2813 "emscripten/stb_image.c"
     STACKTOP = sp;return ($609|0); //@line 2813 "emscripten/stb_image.c"
    } else {
     $rshift = 0; //@line 2746 "emscripten/stb_image.c"
     $gshift = 0; //@line 2746 "emscripten/stb_image.c"
     $bshift = 0; //@line 2746 "emscripten/stb_image.c"
     $ashift = 0; //@line 2746 "emscripten/stb_image.c"
     $rcount = 0; //@line 2746 "emscripten/stb_image.c"
     $gcount = 0; //@line 2746 "emscripten/stb_image.c"
     $bcount = 0; //@line 2746 "emscripten/stb_image.c"
     $acount = 0; //@line 2746 "emscripten/stb_image.c"
     $z1 = 0; //@line 2747 "emscripten/stb_image.c"
     $easy = 0; //@line 2748 "emscripten/stb_image.c"
     $348 = $1; //@line 2749 "emscripten/stb_image.c"
     $349 = $offset; //@line 2749 "emscripten/stb_image.c"
     $350 = (($349) - 14)|0; //@line 2749 "emscripten/stb_image.c"
     $351 = $hsz; //@line 2749 "emscripten/stb_image.c"
     $352 = (($350) - ($351))|0; //@line 2749 "emscripten/stb_image.c"
     __ZL4skipP4stbii($348,$352); //@line 2749 "emscripten/stb_image.c"
     $353 = $bpp; //@line 2750 "emscripten/stb_image.c"
     $354 = ($353|0)==(24); //@line 2750 "emscripten/stb_image.c"
     if ($354) {
      $355 = $1; //@line 2750 "emscripten/stb_image.c"
      $356 = HEAP32[$355>>2]|0; //@line 2750 "emscripten/stb_image.c"
      $357 = ($356*3)|0; //@line 2750 "emscripten/stb_image.c"
      $width = $357; //@line 2750 "emscripten/stb_image.c"
     } else {
      $358 = $bpp; //@line 2751 "emscripten/stb_image.c"
      $359 = ($358|0)==(16); //@line 2751 "emscripten/stb_image.c"
      if ($359) {
       $360 = $1; //@line 2751 "emscripten/stb_image.c"
       $361 = HEAP32[$360>>2]|0; //@line 2751 "emscripten/stb_image.c"
       $362 = $361<<1; //@line 2751 "emscripten/stb_image.c"
       $width = $362; //@line 2751 "emscripten/stb_image.c"
      } else {
       $width = 0; //@line 2752 "emscripten/stb_image.c"
      }
     }
     $363 = $width; //@line 2753 "emscripten/stb_image.c"
     $364 = (0 - ($363))|0; //@line 2753 "emscripten/stb_image.c"
     $365 = $364 & 3; //@line 2753 "emscripten/stb_image.c"
     $pad = $365; //@line 2753 "emscripten/stb_image.c"
     $366 = $bpp; //@line 2754 "emscripten/stb_image.c"
     $367 = ($366|0)==(24); //@line 2754 "emscripten/stb_image.c"
     if ($367) {
      $easy = 1; //@line 2755 "emscripten/stb_image.c"
     } else {
      $368 = $bpp; //@line 2756 "emscripten/stb_image.c"
      $369 = ($368|0)==(32); //@line 2756 "emscripten/stb_image.c"
      if ($369) {
       $370 = $mb; //@line 2757 "emscripten/stb_image.c"
       $371 = ($370|0)==(255); //@line 2757 "emscripten/stb_image.c"
       do {
        if ($371) {
         $372 = $mg; //@line 2757 "emscripten/stb_image.c"
         $373 = ($372|0)==(65280); //@line 2757 "emscripten/stb_image.c"
         if ($373) {
          $374 = $mr; //@line 2757 "emscripten/stb_image.c"
          $375 = ($374|0)==(16711680); //@line 2757 "emscripten/stb_image.c"
          if (!($375)) {
           break;
          }
          $376 = $ma; //@line 2757 "emscripten/stb_image.c"
          $377 = ($376|0)==(-16777216); //@line 2757 "emscripten/stb_image.c"
          if (!($377)) {
           break;
          }
          $easy = 2; //@line 2758 "emscripten/stb_image.c"
         }
        }
       } while(0);
      }
     }
     $378 = $easy; //@line 2760 "emscripten/stb_image.c"
     $379 = ($378|0)!=(0); //@line 2760 "emscripten/stb_image.c"
     do {
      if (!($379)) {
       $380 = $mr; //@line 2761 "emscripten/stb_image.c"
       $381 = ($380|0)!=(0); //@line 2761 "emscripten/stb_image.c"
       if ($381) {
        $382 = $mg; //@line 2761 "emscripten/stb_image.c"
        $383 = ($382|0)!=(0); //@line 2761 "emscripten/stb_image.c"
        if ($383) {
         $384 = $mb; //@line 2761 "emscripten/stb_image.c"
         $385 = ($384|0)!=(0); //@line 2761 "emscripten/stb_image.c"
         if ($385) {
          $391 = $mr; //@line 2763 "emscripten/stb_image.c"
          $392 = (__ZL8high_bitj($391)|0); //@line 2763 "emscripten/stb_image.c"
          $393 = (($392) - 7)|0; //@line 2763 "emscripten/stb_image.c"
          $rshift = $393; //@line 2763 "emscripten/stb_image.c"
          $394 = $mr; //@line 2763 "emscripten/stb_image.c"
          $395 = (__ZL8bitcountj($394)|0); //@line 2763 "emscripten/stb_image.c"
          $rcount = $395; //@line 2763 "emscripten/stb_image.c"
          $396 = $mg; //@line 2764 "emscripten/stb_image.c"
          $397 = (__ZL8high_bitj($396)|0); //@line 2764 "emscripten/stb_image.c"
          $398 = (($397) - 7)|0; //@line 2764 "emscripten/stb_image.c"
          $gshift = $398; //@line 2764 "emscripten/stb_image.c"
          $399 = $mr; //@line 2764 "emscripten/stb_image.c"
          $400 = (__ZL8bitcountj($399)|0); //@line 2764 "emscripten/stb_image.c"
          $gcount = $400; //@line 2764 "emscripten/stb_image.c"
          $401 = $mb; //@line 2765 "emscripten/stb_image.c"
          $402 = (__ZL8high_bitj($401)|0); //@line 2765 "emscripten/stb_image.c"
          $403 = (($402) - 7)|0; //@line 2765 "emscripten/stb_image.c"
          $bshift = $403; //@line 2765 "emscripten/stb_image.c"
          $404 = $mr; //@line 2765 "emscripten/stb_image.c"
          $405 = (__ZL8bitcountj($404)|0); //@line 2765 "emscripten/stb_image.c"
          $bcount = $405; //@line 2765 "emscripten/stb_image.c"
          $406 = $ma; //@line 2766 "emscripten/stb_image.c"
          $407 = (__ZL8high_bitj($406)|0); //@line 2766 "emscripten/stb_image.c"
          $408 = (($407) - 7)|0; //@line 2766 "emscripten/stb_image.c"
          $ashift = $408; //@line 2766 "emscripten/stb_image.c"
          $409 = $mr; //@line 2766 "emscripten/stb_image.c"
          $410 = (__ZL8bitcountj($409)|0); //@line 2766 "emscripten/stb_image.c"
          $acount = $410; //@line 2766 "emscripten/stb_image.c"
          break;
         }
        }
       }
       $386 = $out; //@line 2761 "emscripten/stb_image.c"
       _free($386); //@line 2761 "emscripten/stb_image.c"
       $387 = (__ZL1ePKc(29304)|0); //@line 2761 "emscripten/stb_image.c"
       $388 = ($387|0)!=(0); //@line 2761 "emscripten/stb_image.c"
       $389 = $388 ? 0 : 0; //@line 2761 "emscripten/stb_image.c"
       $390 = $389; //@line 2761 "emscripten/stb_image.c"
       $0 = $390; //@line 2761 "emscripten/stb_image.c"
       $609 = $0; //@line 2813 "emscripten/stb_image.c"
       STACKTOP = sp;return ($609|0); //@line 2813 "emscripten/stb_image.c"
      }
     } while(0);
     $j = 0; //@line 2768 "emscripten/stb_image.c"
     while(1) {
      $411 = $j; //@line 2768 "emscripten/stb_image.c"
      $412 = $1; //@line 2768 "emscripten/stb_image.c"
      $413 = (($412) + 4|0); //@line 2768 "emscripten/stb_image.c"
      $414 = HEAP32[$413>>2]|0; //@line 2768 "emscripten/stb_image.c"
      $415 = ($411|0)<($414|0); //@line 2768 "emscripten/stb_image.c"
      if (!($415)) {
       break;
      }
      $416 = $easy; //@line 2769 "emscripten/stb_image.c"
      $417 = ($416|0)!=(0); //@line 2769 "emscripten/stb_image.c"
      if ($417) {
       $i = 0; //@line 2770 "emscripten/stb_image.c"
       while(1) {
        $418 = $i; //@line 2770 "emscripten/stb_image.c"
        $419 = $1; //@line 2770 "emscripten/stb_image.c"
        $420 = HEAP32[$419>>2]|0; //@line 2770 "emscripten/stb_image.c"
        $421 = ($418|0)<($420|0); //@line 2770 "emscripten/stb_image.c"
        if (!($421)) {
         break;
        }
        $422 = $1; //@line 2772 "emscripten/stb_image.c"
        $423 = (__ZL5get8uP4stbi($422)|0); //@line 2772 "emscripten/stb_image.c"
        $424 = $z1; //@line 2772 "emscripten/stb_image.c"
        $425 = (($424) + 2)|0; //@line 2772 "emscripten/stb_image.c"
        $426 = $out; //@line 2772 "emscripten/stb_image.c"
        $427 = (($426) + ($425)|0); //@line 2772 "emscripten/stb_image.c"
        HEAP8[$427>>0] = $423; //@line 2772 "emscripten/stb_image.c"
        $428 = $1; //@line 2773 "emscripten/stb_image.c"
        $429 = (__ZL5get8uP4stbi($428)|0); //@line 2773 "emscripten/stb_image.c"
        $430 = $z1; //@line 2773 "emscripten/stb_image.c"
        $431 = (($430) + 1)|0; //@line 2773 "emscripten/stb_image.c"
        $432 = $out; //@line 2773 "emscripten/stb_image.c"
        $433 = (($432) + ($431)|0); //@line 2773 "emscripten/stb_image.c"
        HEAP8[$433>>0] = $429; //@line 2773 "emscripten/stb_image.c"
        $434 = $1; //@line 2774 "emscripten/stb_image.c"
        $435 = (__ZL5get8uP4stbi($434)|0); //@line 2774 "emscripten/stb_image.c"
        $436 = $z1; //@line 2774 "emscripten/stb_image.c"
        $437 = (($436) + 0)|0; //@line 2774 "emscripten/stb_image.c"
        $438 = $out; //@line 2774 "emscripten/stb_image.c"
        $439 = (($438) + ($437)|0); //@line 2774 "emscripten/stb_image.c"
        HEAP8[$439>>0] = $435; //@line 2774 "emscripten/stb_image.c"
        $440 = $z1; //@line 2775 "emscripten/stb_image.c"
        $441 = (($440) + 3)|0; //@line 2775 "emscripten/stb_image.c"
        $z1 = $441; //@line 2775 "emscripten/stb_image.c"
        $442 = $easy; //@line 2776 "emscripten/stb_image.c"
        $443 = ($442|0)==(2); //@line 2776 "emscripten/stb_image.c"
        if ($443) {
         $444 = $1; //@line 2776 "emscripten/stb_image.c"
         $445 = (__ZL4get8P4stbi($444)|0); //@line 2776 "emscripten/stb_image.c"
         $446 = $445;
        } else {
         $446 = 255;
        }
        $a = $446; //@line 2776 "emscripten/stb_image.c"
        $447 = $target; //@line 2777 "emscripten/stb_image.c"
        $448 = ($447|0)==(4); //@line 2777 "emscripten/stb_image.c"
        if ($448) {
         $449 = $a; //@line 2777 "emscripten/stb_image.c"
         $450 = $449&255; //@line 2777 "emscripten/stb_image.c"
         $451 = $z1; //@line 2777 "emscripten/stb_image.c"
         $452 = (($451) + 1)|0; //@line 2777 "emscripten/stb_image.c"
         $z1 = $452; //@line 2777 "emscripten/stb_image.c"
         $453 = $out; //@line 2777 "emscripten/stb_image.c"
         $454 = (($453) + ($451)|0); //@line 2777 "emscripten/stb_image.c"
         HEAP8[$454>>0] = $450; //@line 2777 "emscripten/stb_image.c"
        }
        $455 = $i; //@line 2770 "emscripten/stb_image.c"
        $456 = (($455) + 1)|0; //@line 2770 "emscripten/stb_image.c"
        $i = $456; //@line 2770 "emscripten/stb_image.c"
       }
      } else {
       $i = 0; //@line 2780 "emscripten/stb_image.c"
       while(1) {
        $457 = $i; //@line 2780 "emscripten/stb_image.c"
        $458 = $1; //@line 2780 "emscripten/stb_image.c"
        $459 = HEAP32[$458>>2]|0; //@line 2780 "emscripten/stb_image.c"
        $460 = ($457|0)<($459|0); //@line 2780 "emscripten/stb_image.c"
        if (!($460)) {
         break;
        }
        $461 = $bpp; //@line 2781 "emscripten/stb_image.c"
        $462 = ($461|0)==(16); //@line 2781 "emscripten/stb_image.c"
        if ($462) {
         $463 = $1; //@line 2781 "emscripten/stb_image.c"
         $464 = (__ZL7get16leP4stbi($463)|0); //@line 2781 "emscripten/stb_image.c"
         $467 = $464;
        } else {
         $465 = $1; //@line 2781 "emscripten/stb_image.c"
         $466 = (__ZL7get32leP4stbi($465)|0); //@line 2781 "emscripten/stb_image.c"
         $467 = $466;
        }
        $v3 = $467; //@line 2781 "emscripten/stb_image.c"
        $468 = $v3; //@line 2783 "emscripten/stb_image.c"
        $469 = $mr; //@line 2783 "emscripten/stb_image.c"
        $470 = $468 & $469; //@line 2783 "emscripten/stb_image.c"
        $471 = $rshift; //@line 2783 "emscripten/stb_image.c"
        $472 = $rcount; //@line 2783 "emscripten/stb_image.c"
        $473 = (__ZL11shiftsignediii($470,$471,$472)|0); //@line 2783 "emscripten/stb_image.c"
        $474 = $473&255; //@line 2783 "emscripten/stb_image.c"
        $475 = $z1; //@line 2783 "emscripten/stb_image.c"
        $476 = (($475) + 1)|0; //@line 2783 "emscripten/stb_image.c"
        $z1 = $476; //@line 2783 "emscripten/stb_image.c"
        $477 = $out; //@line 2783 "emscripten/stb_image.c"
        $478 = (($477) + ($475)|0); //@line 2783 "emscripten/stb_image.c"
        HEAP8[$478>>0] = $474; //@line 2783 "emscripten/stb_image.c"
        $479 = $v3; //@line 2784 "emscripten/stb_image.c"
        $480 = $mg; //@line 2784 "emscripten/stb_image.c"
        $481 = $479 & $480; //@line 2784 "emscripten/stb_image.c"
        $482 = $gshift; //@line 2784 "emscripten/stb_image.c"
        $483 = $gcount; //@line 2784 "emscripten/stb_image.c"
        $484 = (__ZL11shiftsignediii($481,$482,$483)|0); //@line 2784 "emscripten/stb_image.c"
        $485 = $484&255; //@line 2784 "emscripten/stb_image.c"
        $486 = $z1; //@line 2784 "emscripten/stb_image.c"
        $487 = (($486) + 1)|0; //@line 2784 "emscripten/stb_image.c"
        $z1 = $487; //@line 2784 "emscripten/stb_image.c"
        $488 = $out; //@line 2784 "emscripten/stb_image.c"
        $489 = (($488) + ($486)|0); //@line 2784 "emscripten/stb_image.c"
        HEAP8[$489>>0] = $485; //@line 2784 "emscripten/stb_image.c"
        $490 = $v3; //@line 2785 "emscripten/stb_image.c"
        $491 = $mb; //@line 2785 "emscripten/stb_image.c"
        $492 = $490 & $491; //@line 2785 "emscripten/stb_image.c"
        $493 = $bshift; //@line 2785 "emscripten/stb_image.c"
        $494 = $bcount; //@line 2785 "emscripten/stb_image.c"
        $495 = (__ZL11shiftsignediii($492,$493,$494)|0); //@line 2785 "emscripten/stb_image.c"
        $496 = $495&255; //@line 2785 "emscripten/stb_image.c"
        $497 = $z1; //@line 2785 "emscripten/stb_image.c"
        $498 = (($497) + 1)|0; //@line 2785 "emscripten/stb_image.c"
        $z1 = $498; //@line 2785 "emscripten/stb_image.c"
        $499 = $out; //@line 2785 "emscripten/stb_image.c"
        $500 = (($499) + ($497)|0); //@line 2785 "emscripten/stb_image.c"
        HEAP8[$500>>0] = $496; //@line 2785 "emscripten/stb_image.c"
        $501 = $ma; //@line 2786 "emscripten/stb_image.c"
        $502 = ($501|0)!=(0); //@line 2786 "emscripten/stb_image.c"
        if ($502) {
         $503 = $v3; //@line 2786 "emscripten/stb_image.c"
         $504 = $ma; //@line 2786 "emscripten/stb_image.c"
         $505 = $503 & $504; //@line 2786 "emscripten/stb_image.c"
         $506 = $ashift; //@line 2786 "emscripten/stb_image.c"
         $507 = $acount; //@line 2786 "emscripten/stb_image.c"
         $508 = (__ZL11shiftsignediii($505,$506,$507)|0); //@line 2786 "emscripten/stb_image.c"
         $509 = $508;
        } else {
         $509 = 255;
        }
        $a4 = $509; //@line 2786 "emscripten/stb_image.c"
        $510 = $target; //@line 2787 "emscripten/stb_image.c"
        $511 = ($510|0)==(4); //@line 2787 "emscripten/stb_image.c"
        if ($511) {
         $512 = $a4; //@line 2787 "emscripten/stb_image.c"
         $513 = $512&255; //@line 2787 "emscripten/stb_image.c"
         $514 = $z1; //@line 2787 "emscripten/stb_image.c"
         $515 = (($514) + 1)|0; //@line 2787 "emscripten/stb_image.c"
         $z1 = $515; //@line 2787 "emscripten/stb_image.c"
         $516 = $out; //@line 2787 "emscripten/stb_image.c"
         $517 = (($516) + ($514)|0); //@line 2787 "emscripten/stb_image.c"
         HEAP8[$517>>0] = $513; //@line 2787 "emscripten/stb_image.c"
        }
        $518 = $i; //@line 2780 "emscripten/stb_image.c"
        $519 = (($518) + 1)|0; //@line 2780 "emscripten/stb_image.c"
        $i = $519; //@line 2780 "emscripten/stb_image.c"
       }
      }
      $520 = $1; //@line 2790 "emscripten/stb_image.c"
      $521 = $pad; //@line 2790 "emscripten/stb_image.c"
      __ZL4skipP4stbii($520,$521); //@line 2790 "emscripten/stb_image.c"
      $522 = $j; //@line 2768 "emscripten/stb_image.c"
      $523 = (($522) + 1)|0; //@line 2768 "emscripten/stb_image.c"
      $j = $523; //@line 2768 "emscripten/stb_image.c"
     }
    }
   } while(0);
   $524 = $flip_vertically; //@line 2793 "emscripten/stb_image.c"
   $525 = ($524|0)!=(0); //@line 2793 "emscripten/stb_image.c"
   if ($525) {
    $j = 0; //@line 2795 "emscripten/stb_image.c"
    while(1) {
     $526 = $j; //@line 2795 "emscripten/stb_image.c"
     $527 = $1; //@line 2795 "emscripten/stb_image.c"
     $528 = (($527) + 4|0); //@line 2795 "emscripten/stb_image.c"
     $529 = HEAP32[$528>>2]|0; //@line 2795 "emscripten/stb_image.c"
     $530 = $529 >> 1; //@line 2795 "emscripten/stb_image.c"
     $531 = ($526|0)<($530|0); //@line 2795 "emscripten/stb_image.c"
     if (!($531)) {
      break;
     }
     $532 = $out; //@line 2796 "emscripten/stb_image.c"
     $533 = $j; //@line 2796 "emscripten/stb_image.c"
     $534 = $1; //@line 2796 "emscripten/stb_image.c"
     $535 = HEAP32[$534>>2]|0; //@line 2796 "emscripten/stb_image.c"
     $536 = Math_imul($533, $535)|0; //@line 2796 "emscripten/stb_image.c"
     $537 = $target; //@line 2796 "emscripten/stb_image.c"
     $538 = Math_imul($536, $537)|0; //@line 2796 "emscripten/stb_image.c"
     $539 = (($532) + ($538)|0); //@line 2796 "emscripten/stb_image.c"
     $p1 = $539; //@line 2796 "emscripten/stb_image.c"
     $540 = $out; //@line 2797 "emscripten/stb_image.c"
     $541 = $1; //@line 2797 "emscripten/stb_image.c"
     $542 = (($541) + 4|0); //@line 2797 "emscripten/stb_image.c"
     $543 = HEAP32[$542>>2]|0; //@line 2797 "emscripten/stb_image.c"
     $544 = (($543) - 1)|0; //@line 2797 "emscripten/stb_image.c"
     $545 = $j; //@line 2797 "emscripten/stb_image.c"
     $546 = (($544) - ($545))|0; //@line 2797 "emscripten/stb_image.c"
     $547 = $1; //@line 2797 "emscripten/stb_image.c"
     $548 = HEAP32[$547>>2]|0; //@line 2797 "emscripten/stb_image.c"
     $549 = Math_imul($546, $548)|0; //@line 2797 "emscripten/stb_image.c"
     $550 = $target; //@line 2797 "emscripten/stb_image.c"
     $551 = Math_imul($549, $550)|0; //@line 2797 "emscripten/stb_image.c"
     $552 = (($540) + ($551)|0); //@line 2797 "emscripten/stb_image.c"
     $p2 = $552; //@line 2797 "emscripten/stb_image.c"
     $i = 0; //@line 2798 "emscripten/stb_image.c"
     while(1) {
      $553 = $i; //@line 2798 "emscripten/stb_image.c"
      $554 = $1; //@line 2798 "emscripten/stb_image.c"
      $555 = HEAP32[$554>>2]|0; //@line 2798 "emscripten/stb_image.c"
      $556 = $target; //@line 2798 "emscripten/stb_image.c"
      $557 = Math_imul($555, $556)|0; //@line 2798 "emscripten/stb_image.c"
      $558 = ($553|0)<($557|0); //@line 2798 "emscripten/stb_image.c"
      if (!($558)) {
       break;
      }
      $559 = $i; //@line 2799 "emscripten/stb_image.c"
      $560 = $p1; //@line 2799 "emscripten/stb_image.c"
      $561 = (($560) + ($559)|0); //@line 2799 "emscripten/stb_image.c"
      $562 = HEAP8[$561>>0]|0; //@line 2799 "emscripten/stb_image.c"
      $t = $562; //@line 2799 "emscripten/stb_image.c"
      $563 = $i; //@line 2799 "emscripten/stb_image.c"
      $564 = $p2; //@line 2799 "emscripten/stb_image.c"
      $565 = (($564) + ($563)|0); //@line 2799 "emscripten/stb_image.c"
      $566 = HEAP8[$565>>0]|0; //@line 2799 "emscripten/stb_image.c"
      $567 = $i; //@line 2799 "emscripten/stb_image.c"
      $568 = $p1; //@line 2799 "emscripten/stb_image.c"
      $569 = (($568) + ($567)|0); //@line 2799 "emscripten/stb_image.c"
      HEAP8[$569>>0] = $566; //@line 2799 "emscripten/stb_image.c"
      $570 = $t; //@line 2799 "emscripten/stb_image.c"
      $571 = $i; //@line 2799 "emscripten/stb_image.c"
      $572 = $p2; //@line 2799 "emscripten/stb_image.c"
      $573 = (($572) + ($571)|0); //@line 2799 "emscripten/stb_image.c"
      HEAP8[$573>>0] = $570; //@line 2799 "emscripten/stb_image.c"
      $574 = $i; //@line 2798 "emscripten/stb_image.c"
      $575 = (($574) + 1)|0; //@line 2798 "emscripten/stb_image.c"
      $i = $575; //@line 2798 "emscripten/stb_image.c"
     }
     $576 = $j; //@line 2795 "emscripten/stb_image.c"
     $577 = (($576) + 1)|0; //@line 2795 "emscripten/stb_image.c"
     $j = $577; //@line 2795 "emscripten/stb_image.c"
    }
   }
   $578 = $5; //@line 2804 "emscripten/stb_image.c"
   $579 = ($578|0)!=(0); //@line 2804 "emscripten/stb_image.c"
   do {
    if ($579) {
     $580 = $5; //@line 2804 "emscripten/stb_image.c"
     $581 = $target; //@line 2804 "emscripten/stb_image.c"
     $582 = ($580|0)!=($581|0); //@line 2804 "emscripten/stb_image.c"
     if ($582) {
      $583 = $out; //@line 2805 "emscripten/stb_image.c"
      $584 = $target; //@line 2805 "emscripten/stb_image.c"
      $585 = $5; //@line 2805 "emscripten/stb_image.c"
      $586 = $1; //@line 2805 "emscripten/stb_image.c"
      $587 = HEAP32[$586>>2]|0; //@line 2805 "emscripten/stb_image.c"
      $588 = $1; //@line 2805 "emscripten/stb_image.c"
      $589 = (($588) + 4|0); //@line 2805 "emscripten/stb_image.c"
      $590 = HEAP32[$589>>2]|0; //@line 2805 "emscripten/stb_image.c"
      $591 = (__ZL14convert_formatPhiijj($583,$584,$585,$587,$590)|0); //@line 2805 "emscripten/stb_image.c"
      $out = $591; //@line 2805 "emscripten/stb_image.c"
      $592 = $out; //@line 2806 "emscripten/stb_image.c"
      $593 = ($592|0)==(0|0); //@line 2806 "emscripten/stb_image.c"
      if (!($593)) {
       break;
      }
      $594 = $out; //@line 2806 "emscripten/stb_image.c"
      $0 = $594; //@line 2806 "emscripten/stb_image.c"
      $609 = $0; //@line 2813 "emscripten/stb_image.c"
      STACKTOP = sp;return ($609|0); //@line 2813 "emscripten/stb_image.c"
     }
    }
   } while(0);
   $595 = $1; //@line 2809 "emscripten/stb_image.c"
   $596 = HEAP32[$595>>2]|0; //@line 2809 "emscripten/stb_image.c"
   $597 = $2; //@line 2809 "emscripten/stb_image.c"
   HEAP32[$597>>2] = $596; //@line 2809 "emscripten/stb_image.c"
   $598 = $1; //@line 2810 "emscripten/stb_image.c"
   $599 = (($598) + 4|0); //@line 2810 "emscripten/stb_image.c"
   $600 = HEAP32[$599>>2]|0; //@line 2810 "emscripten/stb_image.c"
   $601 = $3; //@line 2810 "emscripten/stb_image.c"
   HEAP32[$601>>2] = $600; //@line 2810 "emscripten/stb_image.c"
   $602 = $4; //@line 2811 "emscripten/stb_image.c"
   $603 = ($602|0)!=(0|0); //@line 2811 "emscripten/stb_image.c"
   if ($603) {
    $604 = $1; //@line 2811 "emscripten/stb_image.c"
    $605 = (($604) + 8|0); //@line 2811 "emscripten/stb_image.c"
    $606 = HEAP32[$605>>2]|0; //@line 2811 "emscripten/stb_image.c"
    $607 = $4; //@line 2811 "emscripten/stb_image.c"
    HEAP32[$607>>2] = $606; //@line 2811 "emscripten/stb_image.c"
   }
   $608 = $out; //@line 2812 "emscripten/stb_image.c"
   $0 = $608; //@line 2812 "emscripten/stb_image.c"
   $609 = $0; //@line 2813 "emscripten/stb_image.c"
   STACKTOP = sp;return ($609|0); //@line 2813 "emscripten/stb_image.c"
  }
 }
 $12 = (__ZL1ePKc(29200)|0); //@line 2627 "emscripten/stb_image.c"
 $13 = ($12|0)!=(0); //@line 2627 "emscripten/stb_image.c"
 $14 = $13 ? 0 : 0; //@line 2627 "emscripten/stb_image.c"
 $15 = $14; //@line 2627 "emscripten/stb_image.c"
 $0 = $15; //@line 2627 "emscripten/stb_image.c"
 $609 = $0; //@line 2813 "emscripten/stb_image.c"
 STACKTOP = sp;return ($609|0); //@line 2813 "emscripten/stb_image.c"
}
function __ZL8high_bitj($z) {
 $z = $z|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $z;
 $n = 0; //@line 2583 "emscripten/stb_image.c"
 $2 = $1; //@line 2584 "emscripten/stb_image.c"
 $3 = ($2|0)==(0); //@line 2584 "emscripten/stb_image.c"
 if ($3) {
  $0 = -1; //@line 2584 "emscripten/stb_image.c"
  $35 = $0; //@line 2591 "emscripten/stb_image.c"
  STACKTOP = sp;return ($35|0); //@line 2591 "emscripten/stb_image.c"
 }
 $4 = $1; //@line 2585 "emscripten/stb_image.c"
 $5 = ($4>>>0)>=(65536); //@line 2585 "emscripten/stb_image.c"
 if ($5) {
  $6 = $n; //@line 2585 "emscripten/stb_image.c"
  $7 = (($6) + 16)|0; //@line 2585 "emscripten/stb_image.c"
  $n = $7; //@line 2585 "emscripten/stb_image.c"
  $8 = $1; //@line 2585 "emscripten/stb_image.c"
  $9 = $8 >>> 16; //@line 2585 "emscripten/stb_image.c"
  $1 = $9; //@line 2585 "emscripten/stb_image.c"
 }
 $10 = $1; //@line 2586 "emscripten/stb_image.c"
 $11 = ($10>>>0)>=(256); //@line 2586 "emscripten/stb_image.c"
 if ($11) {
  $12 = $n; //@line 2586 "emscripten/stb_image.c"
  $13 = (($12) + 8)|0; //@line 2586 "emscripten/stb_image.c"
  $n = $13; //@line 2586 "emscripten/stb_image.c"
  $14 = $1; //@line 2586 "emscripten/stb_image.c"
  $15 = $14 >>> 8; //@line 2586 "emscripten/stb_image.c"
  $1 = $15; //@line 2586 "emscripten/stb_image.c"
 }
 $16 = $1; //@line 2587 "emscripten/stb_image.c"
 $17 = ($16>>>0)>=(16); //@line 2587 "emscripten/stb_image.c"
 if ($17) {
  $18 = $n; //@line 2587 "emscripten/stb_image.c"
  $19 = (($18) + 4)|0; //@line 2587 "emscripten/stb_image.c"
  $n = $19; //@line 2587 "emscripten/stb_image.c"
  $20 = $1; //@line 2587 "emscripten/stb_image.c"
  $21 = $20 >>> 4; //@line 2587 "emscripten/stb_image.c"
  $1 = $21; //@line 2587 "emscripten/stb_image.c"
 }
 $22 = $1; //@line 2588 "emscripten/stb_image.c"
 $23 = ($22>>>0)>=(4); //@line 2588 "emscripten/stb_image.c"
 if ($23) {
  $24 = $n; //@line 2588 "emscripten/stb_image.c"
  $25 = (($24) + 2)|0; //@line 2588 "emscripten/stb_image.c"
  $n = $25; //@line 2588 "emscripten/stb_image.c"
  $26 = $1; //@line 2588 "emscripten/stb_image.c"
  $27 = $26 >>> 2; //@line 2588 "emscripten/stb_image.c"
  $1 = $27; //@line 2588 "emscripten/stb_image.c"
 }
 $28 = $1; //@line 2589 "emscripten/stb_image.c"
 $29 = ($28>>>0)>=(2); //@line 2589 "emscripten/stb_image.c"
 if ($29) {
  $30 = $n; //@line 2589 "emscripten/stb_image.c"
  $31 = (($30) + 1)|0; //@line 2589 "emscripten/stb_image.c"
  $n = $31; //@line 2589 "emscripten/stb_image.c"
  $32 = $1; //@line 2589 "emscripten/stb_image.c"
  $33 = $32 >>> 1; //@line 2589 "emscripten/stb_image.c"
  $1 = $33; //@line 2589 "emscripten/stb_image.c"
 }
 $34 = $n; //@line 2590 "emscripten/stb_image.c"
 $0 = $34; //@line 2590 "emscripten/stb_image.c"
 $35 = $0; //@line 2591 "emscripten/stb_image.c"
 STACKTOP = sp;return ($35|0); //@line 2591 "emscripten/stb_image.c"
}
function __ZL8bitcountj($a) {
 $a = $a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $a;
 $1 = $0; //@line 2595 "emscripten/stb_image.c"
 $2 = $1 & 1431655765; //@line 2595 "emscripten/stb_image.c"
 $3 = $0; //@line 2595 "emscripten/stb_image.c"
 $4 = $3 >>> 1; //@line 2595 "emscripten/stb_image.c"
 $5 = $4 & 1431655765; //@line 2595 "emscripten/stb_image.c"
 $6 = (($2) + ($5))|0; //@line 2595 "emscripten/stb_image.c"
 $0 = $6; //@line 2595 "emscripten/stb_image.c"
 $7 = $0; //@line 2596 "emscripten/stb_image.c"
 $8 = $7 & 858993459; //@line 2596 "emscripten/stb_image.c"
 $9 = $0; //@line 2596 "emscripten/stb_image.c"
 $10 = $9 >>> 2; //@line 2596 "emscripten/stb_image.c"
 $11 = $10 & 858993459; //@line 2596 "emscripten/stb_image.c"
 $12 = (($8) + ($11))|0; //@line 2596 "emscripten/stb_image.c"
 $0 = $12; //@line 2596 "emscripten/stb_image.c"
 $13 = $0; //@line 2597 "emscripten/stb_image.c"
 $14 = $0; //@line 2597 "emscripten/stb_image.c"
 $15 = $14 >>> 4; //@line 2597 "emscripten/stb_image.c"
 $16 = (($13) + ($15))|0; //@line 2597 "emscripten/stb_image.c"
 $17 = $16 & 252645135; //@line 2597 "emscripten/stb_image.c"
 $0 = $17; //@line 2597 "emscripten/stb_image.c"
 $18 = $0; //@line 2598 "emscripten/stb_image.c"
 $19 = $0; //@line 2598 "emscripten/stb_image.c"
 $20 = $19 >>> 8; //@line 2598 "emscripten/stb_image.c"
 $21 = (($18) + ($20))|0; //@line 2598 "emscripten/stb_image.c"
 $0 = $21; //@line 2598 "emscripten/stb_image.c"
 $22 = $0; //@line 2599 "emscripten/stb_image.c"
 $23 = $0; //@line 2599 "emscripten/stb_image.c"
 $24 = $23 >>> 16; //@line 2599 "emscripten/stb_image.c"
 $25 = (($22) + ($24))|0; //@line 2599 "emscripten/stb_image.c"
 $0 = $25; //@line 2599 "emscripten/stb_image.c"
 $26 = $0; //@line 2600 "emscripten/stb_image.c"
 $27 = $26 & 255; //@line 2600 "emscripten/stb_image.c"
 STACKTOP = sp;return ($27|0); //@line 2600 "emscripten/stb_image.c"
}
function __ZL11shiftsignediii($v,$shift,$bits) {
 $v = $v|0;
 $shift = $shift|0;
 $bits = $bits|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $result = 0, $z = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $v;
 $1 = $shift;
 $2 = $bits;
 $z = 0; //@line 2606 "emscripten/stb_image.c"
 $3 = $1; //@line 2608 "emscripten/stb_image.c"
 $4 = ($3|0)<(0); //@line 2608 "emscripten/stb_image.c"
 if ($4) {
  $5 = $1; //@line 2608 "emscripten/stb_image.c"
  $6 = (0 - ($5))|0; //@line 2608 "emscripten/stb_image.c"
  $7 = $0; //@line 2608 "emscripten/stb_image.c"
  $8 = $7 << $6; //@line 2608 "emscripten/stb_image.c"
  $0 = $8; //@line 2608 "emscripten/stb_image.c"
 } else {
  $9 = $1; //@line 2609 "emscripten/stb_image.c"
  $10 = $0; //@line 2609 "emscripten/stb_image.c"
  $11 = $10 >> $9; //@line 2609 "emscripten/stb_image.c"
  $0 = $11; //@line 2609 "emscripten/stb_image.c"
 }
 $12 = $0; //@line 2610 "emscripten/stb_image.c"
 $result = $12; //@line 2610 "emscripten/stb_image.c"
 $13 = $2; //@line 2612 "emscripten/stb_image.c"
 $z = $13; //@line 2612 "emscripten/stb_image.c"
 while(1) {
  $14 = $z; //@line 2613 "emscripten/stb_image.c"
  $15 = ($14|0)<(8); //@line 2613 "emscripten/stb_image.c"
  if (!($15)) {
   break;
  }
  $16 = $0; //@line 2614 "emscripten/stb_image.c"
  $17 = $z; //@line 2614 "emscripten/stb_image.c"
  $18 = $16 >> $17; //@line 2614 "emscripten/stb_image.c"
  $19 = $result; //@line 2614 "emscripten/stb_image.c"
  $20 = (($19) + ($18))|0; //@line 2614 "emscripten/stb_image.c"
  $result = $20; //@line 2614 "emscripten/stb_image.c"
  $21 = $2; //@line 2615 "emscripten/stb_image.c"
  $22 = $z; //@line 2615 "emscripten/stb_image.c"
  $23 = (($22) + ($21))|0; //@line 2615 "emscripten/stb_image.c"
  $z = $23; //@line 2615 "emscripten/stb_image.c"
 }
 $24 = $result; //@line 2617 "emscripten/stb_image.c"
 STACKTOP = sp;return ($24|0); //@line 2617 "emscripten/stb_image.c"
}
function __ZL8bmp_testP4stbi($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $sz = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $s;
 $2 = $1; //@line 2561 "emscripten/stb_image.c"
 $3 = (__ZL4get8P4stbi($2)|0); //@line 2561 "emscripten/stb_image.c"
 $4 = ($3|0)!=(66); //@line 2561 "emscripten/stb_image.c"
 do {
  if ($4) {
   $0 = 0; //@line 2561 "emscripten/stb_image.c"
  } else {
   $5 = $1; //@line 2562 "emscripten/stb_image.c"
   $6 = (__ZL4get8P4stbi($5)|0); //@line 2562 "emscripten/stb_image.c"
   $7 = ($6|0)!=(77); //@line 2562 "emscripten/stb_image.c"
   if ($7) {
    $0 = 0; //@line 2562 "emscripten/stb_image.c"
    break;
   }
   $8 = $1; //@line 2563 "emscripten/stb_image.c"
   (__ZL7get32leP4stbi($8)|0); //@line 2563 "emscripten/stb_image.c"
   $9 = $1; //@line 2564 "emscripten/stb_image.c"
   (__ZL7get16leP4stbi($9)|0); //@line 2564 "emscripten/stb_image.c"
   $10 = $1; //@line 2565 "emscripten/stb_image.c"
   (__ZL7get16leP4stbi($10)|0); //@line 2565 "emscripten/stb_image.c"
   $11 = $1; //@line 2566 "emscripten/stb_image.c"
   (__ZL7get32leP4stbi($11)|0); //@line 2566 "emscripten/stb_image.c"
   $12 = $1; //@line 2567 "emscripten/stb_image.c"
   $13 = (__ZL7get32leP4stbi($12)|0); //@line 2567 "emscripten/stb_image.c"
   $sz = $13; //@line 2567 "emscripten/stb_image.c"
   $14 = $sz; //@line 2568 "emscripten/stb_image.c"
   $15 = ($14|0)==(12); //@line 2568 "emscripten/stb_image.c"
   if (!($15)) {
    $16 = $sz; //@line 2568 "emscripten/stb_image.c"
    $17 = ($16|0)==(40); //@line 2568 "emscripten/stb_image.c"
    if (!($17)) {
     $18 = $sz; //@line 2568 "emscripten/stb_image.c"
     $19 = ($18|0)==(56); //@line 2568 "emscripten/stb_image.c"
     if (!($19)) {
      $20 = $sz; //@line 2568 "emscripten/stb_image.c"
      $21 = ($20|0)==(108); //@line 2568 "emscripten/stb_image.c"
      if (!($21)) {
       $0 = 0; //@line 2569 "emscripten/stb_image.c"
       break;
      }
     }
    }
   }
   $0 = 1; //@line 2568 "emscripten/stb_image.c"
  }
 } while(0);
 $22 = $0; //@line 2569 "emscripten/stb_image.c"
 STACKTOP = sp;return ($22|0); //@line 2569 "emscripten/stb_image.c"
}
function __ZL6do_pngP3pngPiS1_S1_i($p,$x,$y,$n,$req_comp) {
 $p = $p|0;
 $x = $x|0;
 $y = $y|0;
 $n = $n|0;
 $req_comp = $req_comp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = $p;
 $2 = $x;
 $3 = $y;
 $4 = $n;
 $5 = $req_comp;
 $result = 0; //@line 2501 "emscripten/stb_image.c"
 $6 = $5; //@line 2502 "emscripten/stb_image.c"
 $7 = ($6|0)<(0); //@line 2502 "emscripten/stb_image.c"
 if (!($7)) {
  $8 = $5; //@line 2502 "emscripten/stb_image.c"
  $9 = ($8|0)>(4); //@line 2502 "emscripten/stb_image.c"
  if (!($9)) {
   $14 = $1; //@line 2503 "emscripten/stb_image.c"
   $15 = $5; //@line 2503 "emscripten/stb_image.c"
   $16 = (__ZL14parse_png_fileP3pngii($14,0,$15)|0); //@line 2503 "emscripten/stb_image.c"
   $17 = ($16|0)!=(0); //@line 2503 "emscripten/stb_image.c"
   if ($17) {
    $18 = $1; //@line 2504 "emscripten/stb_image.c"
    $19 = (($18) + 12|0); //@line 2504 "emscripten/stb_image.c"
    $20 = HEAP32[$19>>2]|0; //@line 2504 "emscripten/stb_image.c"
    $result = $20; //@line 2504 "emscripten/stb_image.c"
    $21 = $1; //@line 2505 "emscripten/stb_image.c"
    $22 = (($21) + 12|0); //@line 2505 "emscripten/stb_image.c"
    HEAP32[$22>>2] = 0; //@line 2505 "emscripten/stb_image.c"
    $23 = $5; //@line 2506 "emscripten/stb_image.c"
    $24 = ($23|0)!=(0); //@line 2506 "emscripten/stb_image.c"
    do {
     if ($24) {
      $25 = $5; //@line 2506 "emscripten/stb_image.c"
      $26 = $1; //@line 2506 "emscripten/stb_image.c"
      $27 = HEAP32[$26>>2]|0; //@line 2506 "emscripten/stb_image.c"
      $28 = (($27) + 12|0); //@line 2506 "emscripten/stb_image.c"
      $29 = HEAP32[$28>>2]|0; //@line 2506 "emscripten/stb_image.c"
      $30 = ($25|0)!=($29|0); //@line 2506 "emscripten/stb_image.c"
      if ($30) {
       $31 = $result; //@line 2507 "emscripten/stb_image.c"
       $32 = $1; //@line 2507 "emscripten/stb_image.c"
       $33 = HEAP32[$32>>2]|0; //@line 2507 "emscripten/stb_image.c"
       $34 = (($33) + 12|0); //@line 2507 "emscripten/stb_image.c"
       $35 = HEAP32[$34>>2]|0; //@line 2507 "emscripten/stb_image.c"
       $36 = $5; //@line 2507 "emscripten/stb_image.c"
       $37 = $1; //@line 2507 "emscripten/stb_image.c"
       $38 = HEAP32[$37>>2]|0; //@line 2507 "emscripten/stb_image.c"
       $39 = HEAP32[$38>>2]|0; //@line 2507 "emscripten/stb_image.c"
       $40 = $1; //@line 2507 "emscripten/stb_image.c"
       $41 = HEAP32[$40>>2]|0; //@line 2507 "emscripten/stb_image.c"
       $42 = (($41) + 4|0); //@line 2507 "emscripten/stb_image.c"
       $43 = HEAP32[$42>>2]|0; //@line 2507 "emscripten/stb_image.c"
       $44 = (__ZL14convert_formatPhiijj($31,$35,$36,$39,$43)|0); //@line 2507 "emscripten/stb_image.c"
       $result = $44; //@line 2507 "emscripten/stb_image.c"
       $45 = $5; //@line 2508 "emscripten/stb_image.c"
       $46 = $1; //@line 2508 "emscripten/stb_image.c"
       $47 = HEAP32[$46>>2]|0; //@line 2508 "emscripten/stb_image.c"
       $48 = (($47) + 12|0); //@line 2508 "emscripten/stb_image.c"
       HEAP32[$48>>2] = $45; //@line 2508 "emscripten/stb_image.c"
       $49 = $result; //@line 2509 "emscripten/stb_image.c"
       $50 = ($49|0)==(0|0); //@line 2509 "emscripten/stb_image.c"
       if (!($50)) {
        break;
       }
       $51 = $result; //@line 2509 "emscripten/stb_image.c"
       $0 = $51; //@line 2509 "emscripten/stb_image.c"
       $84 = $0; //@line 2520 "emscripten/stb_image.c"
       STACKTOP = sp;return ($84|0); //@line 2520 "emscripten/stb_image.c"
      }
     }
    } while(0);
    $52 = $1; //@line 2511 "emscripten/stb_image.c"
    $53 = HEAP32[$52>>2]|0; //@line 2511 "emscripten/stb_image.c"
    $54 = HEAP32[$53>>2]|0; //@line 2511 "emscripten/stb_image.c"
    $55 = $2; //@line 2511 "emscripten/stb_image.c"
    HEAP32[$55>>2] = $54; //@line 2511 "emscripten/stb_image.c"
    $56 = $1; //@line 2512 "emscripten/stb_image.c"
    $57 = HEAP32[$56>>2]|0; //@line 2512 "emscripten/stb_image.c"
    $58 = (($57) + 4|0); //@line 2512 "emscripten/stb_image.c"
    $59 = HEAP32[$58>>2]|0; //@line 2512 "emscripten/stb_image.c"
    $60 = $3; //@line 2512 "emscripten/stb_image.c"
    HEAP32[$60>>2] = $59; //@line 2512 "emscripten/stb_image.c"
    $61 = $4; //@line 2513 "emscripten/stb_image.c"
    $62 = ($61|0)!=(0|0); //@line 2513 "emscripten/stb_image.c"
    if ($62) {
     $63 = $1; //@line 2513 "emscripten/stb_image.c"
     $64 = HEAP32[$63>>2]|0; //@line 2513 "emscripten/stb_image.c"
     $65 = (($64) + 8|0); //@line 2513 "emscripten/stb_image.c"
     $66 = HEAP32[$65>>2]|0; //@line 2513 "emscripten/stb_image.c"
     $67 = $4; //@line 2513 "emscripten/stb_image.c"
     HEAP32[$67>>2] = $66; //@line 2513 "emscripten/stb_image.c"
    }
   }
   $68 = $1; //@line 2515 "emscripten/stb_image.c"
   $69 = (($68) + 12|0); //@line 2515 "emscripten/stb_image.c"
   $70 = HEAP32[$69>>2]|0; //@line 2515 "emscripten/stb_image.c"
   _free($70); //@line 2515 "emscripten/stb_image.c"
   $71 = $1; //@line 2515 "emscripten/stb_image.c"
   $72 = (($71) + 12|0); //@line 2515 "emscripten/stb_image.c"
   HEAP32[$72>>2] = 0; //@line 2515 "emscripten/stb_image.c"
   $73 = $1; //@line 2516 "emscripten/stb_image.c"
   $74 = (($73) + 8|0); //@line 2516 "emscripten/stb_image.c"
   $75 = HEAP32[$74>>2]|0; //@line 2516 "emscripten/stb_image.c"
   _free($75); //@line 2516 "emscripten/stb_image.c"
   $76 = $1; //@line 2516 "emscripten/stb_image.c"
   $77 = (($76) + 8|0); //@line 2516 "emscripten/stb_image.c"
   HEAP32[$77>>2] = 0; //@line 2516 "emscripten/stb_image.c"
   $78 = $1; //@line 2517 "emscripten/stb_image.c"
   $79 = (($78) + 4|0); //@line 2517 "emscripten/stb_image.c"
   $80 = HEAP32[$79>>2]|0; //@line 2517 "emscripten/stb_image.c"
   _free($80); //@line 2517 "emscripten/stb_image.c"
   $81 = $1; //@line 2517 "emscripten/stb_image.c"
   $82 = (($81) + 4|0); //@line 2517 "emscripten/stb_image.c"
   HEAP32[$82>>2] = 0; //@line 2517 "emscripten/stb_image.c"
   $83 = $result; //@line 2519 "emscripten/stb_image.c"
   $0 = $83; //@line 2519 "emscripten/stb_image.c"
   $84 = $0; //@line 2520 "emscripten/stb_image.c"
   STACKTOP = sp;return ($84|0); //@line 2520 "emscripten/stb_image.c"
  }
 }
 $10 = (__ZL1ePKc(29320)|0); //@line 2502 "emscripten/stb_image.c"
 $11 = ($10|0)!=(0); //@line 2502 "emscripten/stb_image.c"
 $12 = $11 ? 0 : 0; //@line 2502 "emscripten/stb_image.c"
 $13 = $12; //@line 2502 "emscripten/stb_image.c"
 $0 = $13; //@line 2502 "emscripten/stb_image.c"
 $84 = $0; //@line 2520 "emscripten/stb_image.c"
 STACKTOP = sp;return ($84|0); //@line 2520 "emscripten/stb_image.c"
}
function __ZL15load_jpeg_imageP4jpegPiS1_S1_i($z,$out_x,$out_y,$comp,$req_comp) {
 $z = $z|0;
 $out_x = $out_x|0;
 $out_y = $out_y|0;
 $comp = $comp|0;
 $req_comp = $req_comp|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $coutput = 0, $decode_n = 0, $i = 0, $j = 0, $k = 0;
 var $n = 0, $out = 0, $output = 0, $r = 0, $r1 = 0, $res_comp = 0, $y = 0, $y2 = 0, $y_bot = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0;
 $coutput = sp;
 $res_comp = sp + 16|0;
 $1 = $z;
 $2 = $out_x;
 $3 = $out_y;
 $4 = $comp;
 $5 = $req_comp;
 $6 = $5; //@line 1481 "emscripten/stb_image.c"
 $7 = ($6|0)<(0); //@line 1481 "emscripten/stb_image.c"
 if (!($7)) {
  $8 = $5; //@line 1481 "emscripten/stb_image.c"
  $9 = ($8|0)>(4); //@line 1481 "emscripten/stb_image.c"
  if (!($9)) {
   $14 = $1; //@line 1482 "emscripten/stb_image.c"
   $15 = HEAP32[$14>>2]|0; //@line 1482 "emscripten/stb_image.c"
   $16 = (($15) + 8|0); //@line 1482 "emscripten/stb_image.c"
   HEAP32[$16>>2] = 0; //@line 1482 "emscripten/stb_image.c"
   $17 = $1; //@line 1485 "emscripten/stb_image.c"
   $18 = (__ZL17decode_jpeg_imageP4jpeg($17)|0); //@line 1485 "emscripten/stb_image.c"
   $19 = ($18|0)!=(0); //@line 1485 "emscripten/stb_image.c"
   if (!($19)) {
    $20 = $1; //@line 1485 "emscripten/stb_image.c"
    __ZL12cleanup_jpegP4jpeg($20); //@line 1485 "emscripten/stb_image.c"
    $0 = 0; //@line 1485 "emscripten/stb_image.c"
    $374 = $0; //@line 1575 "emscripten/stb_image.c"
    STACKTOP = sp;return ($374|0); //@line 1575 "emscripten/stb_image.c"
   }
   $21 = $5; //@line 1488 "emscripten/stb_image.c"
   $22 = ($21|0)!=(0); //@line 1488 "emscripten/stb_image.c"
   if ($22) {
    $23 = $5; //@line 1488 "emscripten/stb_image.c"
    $28 = $23;
   } else {
    $24 = $1; //@line 1488 "emscripten/stb_image.c"
    $25 = HEAP32[$24>>2]|0; //@line 1488 "emscripten/stb_image.c"
    $26 = (($25) + 8|0); //@line 1488 "emscripten/stb_image.c"
    $27 = HEAP32[$26>>2]|0; //@line 1488 "emscripten/stb_image.c"
    $28 = $27;
   }
   $n = $28; //@line 1488 "emscripten/stb_image.c"
   $29 = $1; //@line 1490 "emscripten/stb_image.c"
   $30 = HEAP32[$29>>2]|0; //@line 1490 "emscripten/stb_image.c"
   $31 = (($30) + 8|0); //@line 1490 "emscripten/stb_image.c"
   $32 = HEAP32[$31>>2]|0; //@line 1490 "emscripten/stb_image.c"
   $33 = ($32|0)==(3); //@line 1490 "emscripten/stb_image.c"
   if ($33) {
    $34 = $n; //@line 1490 "emscripten/stb_image.c"
    $35 = ($34|0)<(3); //@line 1490 "emscripten/stb_image.c"
    if ($35) {
     $decode_n = 1; //@line 1491 "emscripten/stb_image.c"
    } else {
     label = 12;
    }
   } else {
    label = 12;
   }
   if ((label|0) == 12) {
    $36 = $1; //@line 1493 "emscripten/stb_image.c"
    $37 = HEAP32[$36>>2]|0; //@line 1493 "emscripten/stb_image.c"
    $38 = (($37) + 8|0); //@line 1493 "emscripten/stb_image.c"
    $39 = HEAP32[$38>>2]|0; //@line 1493 "emscripten/stb_image.c"
    $decode_n = $39; //@line 1493 "emscripten/stb_image.c"
   }
   $k = 0; //@line 1504 "emscripten/stb_image.c"
   while(1) {
    $40 = $k; //@line 1504 "emscripten/stb_image.c"
    $41 = $decode_n; //@line 1504 "emscripten/stb_image.c"
    $42 = ($40|0)<($41|0); //@line 1504 "emscripten/stb_image.c"
    if (!($42)) {
     break;
    }
    $43 = $k; //@line 1505 "emscripten/stb_image.c"
    $44 = (($res_comp) + ($43<<5)|0); //@line 1505 "emscripten/stb_image.c"
    $r = $44; //@line 1505 "emscripten/stb_image.c"
    $45 = $1; //@line 1509 "emscripten/stb_image.c"
    $46 = HEAP32[$45>>2]|0; //@line 1509 "emscripten/stb_image.c"
    $47 = HEAP32[$46>>2]|0; //@line 1509 "emscripten/stb_image.c"
    $48 = (($47) + 3)|0; //@line 1509 "emscripten/stb_image.c"
    $49 = (_malloc($48)|0); //@line 1509 "emscripten/stb_image.c"
    $50 = $k; //@line 1509 "emscripten/stb_image.c"
    $51 = $1; //@line 1509 "emscripten/stb_image.c"
    $52 = (($51) + 13724|0); //@line 1509 "emscripten/stb_image.c"
    $53 = (($52) + (($50*56)|0)|0); //@line 1509 "emscripten/stb_image.c"
    $54 = (($53) + 52|0); //@line 1509 "emscripten/stb_image.c"
    HEAP32[$54>>2] = $49; //@line 1509 "emscripten/stb_image.c"
    $55 = $k; //@line 1510 "emscripten/stb_image.c"
    $56 = $1; //@line 1510 "emscripten/stb_image.c"
    $57 = (($56) + 13724|0); //@line 1510 "emscripten/stb_image.c"
    $58 = (($57) + (($55*56)|0)|0); //@line 1510 "emscripten/stb_image.c"
    $59 = (($58) + 52|0); //@line 1510 "emscripten/stb_image.c"
    $60 = HEAP32[$59>>2]|0; //@line 1510 "emscripten/stb_image.c"
    $61 = ($60|0)!=(0|0); //@line 1510 "emscripten/stb_image.c"
    if (!($61)) {
     label = 16;
     break;
    }
    $67 = $1; //@line 1512 "emscripten/stb_image.c"
    $68 = (($67) + 13700|0); //@line 1512 "emscripten/stb_image.c"
    $69 = HEAP32[$68>>2]|0; //@line 1512 "emscripten/stb_image.c"
    $70 = $k; //@line 1512 "emscripten/stb_image.c"
    $71 = $1; //@line 1512 "emscripten/stb_image.c"
    $72 = (($71) + 13724|0); //@line 1512 "emscripten/stb_image.c"
    $73 = (($72) + (($70*56)|0)|0); //@line 1512 "emscripten/stb_image.c"
    $74 = (($73) + 4|0); //@line 1512 "emscripten/stb_image.c"
    $75 = HEAP32[$74>>2]|0; //@line 1512 "emscripten/stb_image.c"
    $76 = (($69|0) / ($75|0))&-1; //@line 1512 "emscripten/stb_image.c"
    $77 = $r; //@line 1512 "emscripten/stb_image.c"
    $78 = (($77) + 12|0); //@line 1512 "emscripten/stb_image.c"
    HEAP32[$78>>2] = $76; //@line 1512 "emscripten/stb_image.c"
    $79 = $1; //@line 1513 "emscripten/stb_image.c"
    $80 = (($79) + 13704|0); //@line 1513 "emscripten/stb_image.c"
    $81 = HEAP32[$80>>2]|0; //@line 1513 "emscripten/stb_image.c"
    $82 = $k; //@line 1513 "emscripten/stb_image.c"
    $83 = $1; //@line 1513 "emscripten/stb_image.c"
    $84 = (($83) + 13724|0); //@line 1513 "emscripten/stb_image.c"
    $85 = (($84) + (($82*56)|0)|0); //@line 1513 "emscripten/stb_image.c"
    $86 = (($85) + 8|0); //@line 1513 "emscripten/stb_image.c"
    $87 = HEAP32[$86>>2]|0; //@line 1513 "emscripten/stb_image.c"
    $88 = (($81|0) / ($87|0))&-1; //@line 1513 "emscripten/stb_image.c"
    $89 = $r; //@line 1513 "emscripten/stb_image.c"
    $90 = (($89) + 16|0); //@line 1513 "emscripten/stb_image.c"
    HEAP32[$90>>2] = $88; //@line 1513 "emscripten/stb_image.c"
    $91 = $r; //@line 1514 "emscripten/stb_image.c"
    $92 = (($91) + 16|0); //@line 1514 "emscripten/stb_image.c"
    $93 = HEAP32[$92>>2]|0; //@line 1514 "emscripten/stb_image.c"
    $94 = $93 >> 1; //@line 1514 "emscripten/stb_image.c"
    $95 = $r; //@line 1514 "emscripten/stb_image.c"
    $96 = (($95) + 24|0); //@line 1514 "emscripten/stb_image.c"
    HEAP32[$96>>2] = $94; //@line 1514 "emscripten/stb_image.c"
    $97 = $1; //@line 1515 "emscripten/stb_image.c"
    $98 = HEAP32[$97>>2]|0; //@line 1515 "emscripten/stb_image.c"
    $99 = HEAP32[$98>>2]|0; //@line 1515 "emscripten/stb_image.c"
    $100 = $r; //@line 1515 "emscripten/stb_image.c"
    $101 = (($100) + 12|0); //@line 1515 "emscripten/stb_image.c"
    $102 = HEAP32[$101>>2]|0; //@line 1515 "emscripten/stb_image.c"
    $103 = (($99) + ($102))|0; //@line 1515 "emscripten/stb_image.c"
    $104 = (($103) - 1)|0; //@line 1515 "emscripten/stb_image.c"
    $105 = $r; //@line 1515 "emscripten/stb_image.c"
    $106 = (($105) + 12|0); //@line 1515 "emscripten/stb_image.c"
    $107 = HEAP32[$106>>2]|0; //@line 1515 "emscripten/stb_image.c"
    $108 = (($104>>>0) / ($107>>>0))&-1; //@line 1515 "emscripten/stb_image.c"
    $109 = $r; //@line 1515 "emscripten/stb_image.c"
    $110 = (($109) + 20|0); //@line 1515 "emscripten/stb_image.c"
    HEAP32[$110>>2] = $108; //@line 1515 "emscripten/stb_image.c"
    $111 = $r; //@line 1516 "emscripten/stb_image.c"
    $112 = (($111) + 28|0); //@line 1516 "emscripten/stb_image.c"
    HEAP32[$112>>2] = 0; //@line 1516 "emscripten/stb_image.c"
    $113 = $k; //@line 1517 "emscripten/stb_image.c"
    $114 = $1; //@line 1517 "emscripten/stb_image.c"
    $115 = (($114) + 13724|0); //@line 1517 "emscripten/stb_image.c"
    $116 = (($115) + (($113*56)|0)|0); //@line 1517 "emscripten/stb_image.c"
    $117 = (($116) + 44|0); //@line 1517 "emscripten/stb_image.c"
    $118 = HEAP32[$117>>2]|0; //@line 1517 "emscripten/stb_image.c"
    $119 = $r; //@line 1517 "emscripten/stb_image.c"
    $120 = (($119) + 8|0); //@line 1517 "emscripten/stb_image.c"
    HEAP32[$120>>2] = $118; //@line 1517 "emscripten/stb_image.c"
    $121 = $r; //@line 1517 "emscripten/stb_image.c"
    $122 = (($121) + 4|0); //@line 1517 "emscripten/stb_image.c"
    HEAP32[$122>>2] = $118; //@line 1517 "emscripten/stb_image.c"
    $123 = $r; //@line 1519 "emscripten/stb_image.c"
    $124 = (($123) + 12|0); //@line 1519 "emscripten/stb_image.c"
    $125 = HEAP32[$124>>2]|0; //@line 1519 "emscripten/stb_image.c"
    $126 = ($125|0)==(1); //@line 1519 "emscripten/stb_image.c"
    if ($126) {
     $127 = $r; //@line 1519 "emscripten/stb_image.c"
     $128 = (($127) + 16|0); //@line 1519 "emscripten/stb_image.c"
     $129 = HEAP32[$128>>2]|0; //@line 1519 "emscripten/stb_image.c"
     $130 = ($129|0)==(1); //@line 1519 "emscripten/stb_image.c"
     if ($130) {
      $131 = $r; //@line 1519 "emscripten/stb_image.c"
      HEAP32[$131>>2] = 186; //@line 1519 "emscripten/stb_image.c"
     } else {
      label = 20;
     }
    } else {
     label = 20;
    }
    if ((label|0) == 20) {
     label = 0;
     $132 = $r; //@line 1520 "emscripten/stb_image.c"
     $133 = (($132) + 12|0); //@line 1520 "emscripten/stb_image.c"
     $134 = HEAP32[$133>>2]|0; //@line 1520 "emscripten/stb_image.c"
     $135 = ($134|0)==(1); //@line 1520 "emscripten/stb_image.c"
     if ($135) {
      $136 = $r; //@line 1520 "emscripten/stb_image.c"
      $137 = (($136) + 16|0); //@line 1520 "emscripten/stb_image.c"
      $138 = HEAP32[$137>>2]|0; //@line 1520 "emscripten/stb_image.c"
      $139 = ($138|0)==(2); //@line 1520 "emscripten/stb_image.c"
      if ($139) {
       $140 = $r; //@line 1520 "emscripten/stb_image.c"
       HEAP32[$140>>2] = 187; //@line 1520 "emscripten/stb_image.c"
      } else {
       label = 23;
      }
     } else {
      label = 23;
     }
     if ((label|0) == 23) {
      label = 0;
      $141 = $r; //@line 1521 "emscripten/stb_image.c"
      $142 = (($141) + 12|0); //@line 1521 "emscripten/stb_image.c"
      $143 = HEAP32[$142>>2]|0; //@line 1521 "emscripten/stb_image.c"
      $144 = ($143|0)==(2); //@line 1521 "emscripten/stb_image.c"
      if ($144) {
       $145 = $r; //@line 1521 "emscripten/stb_image.c"
       $146 = (($145) + 16|0); //@line 1521 "emscripten/stb_image.c"
       $147 = HEAP32[$146>>2]|0; //@line 1521 "emscripten/stb_image.c"
       $148 = ($147|0)==(1); //@line 1521 "emscripten/stb_image.c"
       if ($148) {
        $149 = $r; //@line 1521 "emscripten/stb_image.c"
        HEAP32[$149>>2] = 188; //@line 1521 "emscripten/stb_image.c"
       } else {
        label = 26;
       }
      } else {
       label = 26;
      }
      if ((label|0) == 26) {
       label = 0;
       $150 = $r; //@line 1522 "emscripten/stb_image.c"
       $151 = (($150) + 12|0); //@line 1522 "emscripten/stb_image.c"
       $152 = HEAP32[$151>>2]|0; //@line 1522 "emscripten/stb_image.c"
       $153 = ($152|0)==(2); //@line 1522 "emscripten/stb_image.c"
       if ($153) {
        $154 = $r; //@line 1522 "emscripten/stb_image.c"
        $155 = (($154) + 16|0); //@line 1522 "emscripten/stb_image.c"
        $156 = HEAP32[$155>>2]|0; //@line 1522 "emscripten/stb_image.c"
        $157 = ($156|0)==(2); //@line 1522 "emscripten/stb_image.c"
        if ($157) {
         $158 = $r; //@line 1522 "emscripten/stb_image.c"
         HEAP32[$158>>2] = 189; //@line 1522 "emscripten/stb_image.c"
        } else {
         label = 29;
        }
       } else {
        label = 29;
       }
       if ((label|0) == 29) {
        label = 0;
        $159 = $r; //@line 1523 "emscripten/stb_image.c"
        HEAP32[$159>>2] = 190; //@line 1523 "emscripten/stb_image.c"
       }
      }
     }
    }
    $160 = $k; //@line 1504 "emscripten/stb_image.c"
    $161 = (($160) + 1)|0; //@line 1504 "emscripten/stb_image.c"
    $k = $161; //@line 1504 "emscripten/stb_image.c"
   }
   if ((label|0) == 16) {
    $62 = $1; //@line 1510 "emscripten/stb_image.c"
    __ZL12cleanup_jpegP4jpeg($62); //@line 1510 "emscripten/stb_image.c"
    $63 = (__ZL1ePKc(26624)|0); //@line 1510 "emscripten/stb_image.c"
    $64 = ($63|0)!=(0); //@line 1510 "emscripten/stb_image.c"
    $65 = $64 ? 0 : 0; //@line 1510 "emscripten/stb_image.c"
    $66 = $65; //@line 1510 "emscripten/stb_image.c"
    $0 = $66; //@line 1510 "emscripten/stb_image.c"
    $374 = $0; //@line 1575 "emscripten/stb_image.c"
    STACKTOP = sp;return ($374|0); //@line 1575 "emscripten/stb_image.c"
   }
   $162 = $n; //@line 1527 "emscripten/stb_image.c"
   $163 = $1; //@line 1527 "emscripten/stb_image.c"
   $164 = HEAP32[$163>>2]|0; //@line 1527 "emscripten/stb_image.c"
   $165 = HEAP32[$164>>2]|0; //@line 1527 "emscripten/stb_image.c"
   $166 = Math_imul($162, $165)|0; //@line 1527 "emscripten/stb_image.c"
   $167 = $1; //@line 1527 "emscripten/stb_image.c"
   $168 = HEAP32[$167>>2]|0; //@line 1527 "emscripten/stb_image.c"
   $169 = (($168) + 4|0); //@line 1527 "emscripten/stb_image.c"
   $170 = HEAP32[$169>>2]|0; //@line 1527 "emscripten/stb_image.c"
   $171 = Math_imul($166, $170)|0; //@line 1527 "emscripten/stb_image.c"
   $172 = (($171) + 1)|0; //@line 1527 "emscripten/stb_image.c"
   $173 = (_malloc($172)|0); //@line 1527 "emscripten/stb_image.c"
   $output = $173; //@line 1527 "emscripten/stb_image.c"
   $174 = $output; //@line 1528 "emscripten/stb_image.c"
   $175 = ($174|0)!=(0|0); //@line 1528 "emscripten/stb_image.c"
   if (!($175)) {
    $176 = $1; //@line 1528 "emscripten/stb_image.c"
    __ZL12cleanup_jpegP4jpeg($176); //@line 1528 "emscripten/stb_image.c"
    $177 = (__ZL1ePKc(26624)|0); //@line 1528 "emscripten/stb_image.c"
    $178 = ($177|0)!=(0); //@line 1528 "emscripten/stb_image.c"
    $179 = $178 ? 0 : 0; //@line 1528 "emscripten/stb_image.c"
    $180 = $179; //@line 1528 "emscripten/stb_image.c"
    $0 = $180; //@line 1528 "emscripten/stb_image.c"
    $374 = $0; //@line 1575 "emscripten/stb_image.c"
    STACKTOP = sp;return ($374|0); //@line 1575 "emscripten/stb_image.c"
   }
   $j = 0; //@line 1531 "emscripten/stb_image.c"
   while(1) {
    $181 = $j; //@line 1531 "emscripten/stb_image.c"
    $182 = $1; //@line 1531 "emscripten/stb_image.c"
    $183 = HEAP32[$182>>2]|0; //@line 1531 "emscripten/stb_image.c"
    $184 = (($183) + 4|0); //@line 1531 "emscripten/stb_image.c"
    $185 = HEAP32[$184>>2]|0; //@line 1531 "emscripten/stb_image.c"
    $186 = ($181>>>0)<($185>>>0); //@line 1531 "emscripten/stb_image.c"
    if (!($186)) {
     break;
    }
    $187 = $output; //@line 1532 "emscripten/stb_image.c"
    $188 = $n; //@line 1532 "emscripten/stb_image.c"
    $189 = $1; //@line 1532 "emscripten/stb_image.c"
    $190 = HEAP32[$189>>2]|0; //@line 1532 "emscripten/stb_image.c"
    $191 = HEAP32[$190>>2]|0; //@line 1532 "emscripten/stb_image.c"
    $192 = Math_imul($188, $191)|0; //@line 1532 "emscripten/stb_image.c"
    $193 = $j; //@line 1532 "emscripten/stb_image.c"
    $194 = Math_imul($192, $193)|0; //@line 1532 "emscripten/stb_image.c"
    $195 = (($187) + ($194)|0); //@line 1532 "emscripten/stb_image.c"
    $out = $195; //@line 1532 "emscripten/stb_image.c"
    $k = 0; //@line 1533 "emscripten/stb_image.c"
    while(1) {
     $196 = $k; //@line 1533 "emscripten/stb_image.c"
     $197 = $decode_n; //@line 1533 "emscripten/stb_image.c"
     $198 = ($196|0)<($197|0); //@line 1533 "emscripten/stb_image.c"
     if (!($198)) {
      break;
     }
     $199 = $k; //@line 1534 "emscripten/stb_image.c"
     $200 = (($res_comp) + ($199<<5)|0); //@line 1534 "emscripten/stb_image.c"
     $r1 = $200; //@line 1534 "emscripten/stb_image.c"
     $201 = $r1; //@line 1535 "emscripten/stb_image.c"
     $202 = (($201) + 24|0); //@line 1535 "emscripten/stb_image.c"
     $203 = HEAP32[$202>>2]|0; //@line 1535 "emscripten/stb_image.c"
     $204 = $r1; //@line 1535 "emscripten/stb_image.c"
     $205 = (($204) + 16|0); //@line 1535 "emscripten/stb_image.c"
     $206 = HEAP32[$205>>2]|0; //@line 1535 "emscripten/stb_image.c"
     $207 = $206 >> 1; //@line 1535 "emscripten/stb_image.c"
     $208 = ($203|0)>=($207|0); //@line 1535 "emscripten/stb_image.c"
     $209 = $208&1; //@line 1535 "emscripten/stb_image.c"
     $y_bot = $209; //@line 1535 "emscripten/stb_image.c"
     $210 = $r1; //@line 1536 "emscripten/stb_image.c"
     $211 = HEAP32[$210>>2]|0; //@line 1536 "emscripten/stb_image.c"
     $212 = $k; //@line 1536 "emscripten/stb_image.c"
     $213 = $1; //@line 1536 "emscripten/stb_image.c"
     $214 = (($213) + 13724|0); //@line 1536 "emscripten/stb_image.c"
     $215 = (($214) + (($212*56)|0)|0); //@line 1536 "emscripten/stb_image.c"
     $216 = (($215) + 52|0); //@line 1536 "emscripten/stb_image.c"
     $217 = HEAP32[$216>>2]|0; //@line 1536 "emscripten/stb_image.c"
     $218 = $y_bot; //@line 1536 "emscripten/stb_image.c"
     $219 = ($218|0)!=(0); //@line 1536 "emscripten/stb_image.c"
     if ($219) {
      $220 = $r1; //@line 1536 "emscripten/stb_image.c"
      $221 = (($220) + 8|0); //@line 1536 "emscripten/stb_image.c"
      $222 = HEAP32[$221>>2]|0; //@line 1536 "emscripten/stb_image.c"
      $240 = $222;
     } else {
      $223 = $r1; //@line 1536 "emscripten/stb_image.c"
      $224 = (($223) + 4|0); //@line 1536 "emscripten/stb_image.c"
      $225 = HEAP32[$224>>2]|0; //@line 1536 "emscripten/stb_image.c"
      $240 = $225;
     }
     $226 = $y_bot; //@line 1536 "emscripten/stb_image.c"
     $227 = ($226|0)!=(0); //@line 1536 "emscripten/stb_image.c"
     if ($227) {
      $228 = $r1; //@line 1536 "emscripten/stb_image.c"
      $229 = (($228) + 4|0); //@line 1536 "emscripten/stb_image.c"
      $230 = HEAP32[$229>>2]|0; //@line 1536 "emscripten/stb_image.c"
      $241 = $230;
     } else {
      $231 = $r1; //@line 1536 "emscripten/stb_image.c"
      $232 = (($231) + 8|0); //@line 1536 "emscripten/stb_image.c"
      $233 = HEAP32[$232>>2]|0; //@line 1536 "emscripten/stb_image.c"
      $241 = $233;
     }
     $234 = $r1; //@line 1536 "emscripten/stb_image.c"
     $235 = (($234) + 20|0); //@line 1536 "emscripten/stb_image.c"
     $236 = HEAP32[$235>>2]|0; //@line 1536 "emscripten/stb_image.c"
     $237 = $r1; //@line 1536 "emscripten/stb_image.c"
     $238 = (($237) + 12|0); //@line 1536 "emscripten/stb_image.c"
     $239 = HEAP32[$238>>2]|0; //@line 1536 "emscripten/stb_image.c"
     $242 = (FUNCTION_TABLE_iiiiii[$211 & 255]($217,$240,$241,$236,$239)|0); //@line 1536 "emscripten/stb_image.c"
     $243 = $k; //@line 1536 "emscripten/stb_image.c"
     $244 = (($coutput) + ($243<<2)|0); //@line 1536 "emscripten/stb_image.c"
     HEAP32[$244>>2] = $242; //@line 1536 "emscripten/stb_image.c"
     $245 = $r1; //@line 1540 "emscripten/stb_image.c"
     $246 = (($245) + 24|0); //@line 1540 "emscripten/stb_image.c"
     $247 = HEAP32[$246>>2]|0; //@line 1540 "emscripten/stb_image.c"
     $248 = (($247) + 1)|0; //@line 1540 "emscripten/stb_image.c"
     HEAP32[$246>>2] = $248; //@line 1540 "emscripten/stb_image.c"
     $249 = $r1; //@line 1540 "emscripten/stb_image.c"
     $250 = (($249) + 16|0); //@line 1540 "emscripten/stb_image.c"
     $251 = HEAP32[$250>>2]|0; //@line 1540 "emscripten/stb_image.c"
     $252 = ($248|0)>=($251|0); //@line 1540 "emscripten/stb_image.c"
     if ($252) {
      $253 = $r1; //@line 1541 "emscripten/stb_image.c"
      $254 = (($253) + 24|0); //@line 1541 "emscripten/stb_image.c"
      HEAP32[$254>>2] = 0; //@line 1541 "emscripten/stb_image.c"
      $255 = $r1; //@line 1542 "emscripten/stb_image.c"
      $256 = (($255) + 8|0); //@line 1542 "emscripten/stb_image.c"
      $257 = HEAP32[$256>>2]|0; //@line 1542 "emscripten/stb_image.c"
      $258 = $r1; //@line 1542 "emscripten/stb_image.c"
      $259 = (($258) + 4|0); //@line 1542 "emscripten/stb_image.c"
      HEAP32[$259>>2] = $257; //@line 1542 "emscripten/stb_image.c"
      $260 = $r1; //@line 1543 "emscripten/stb_image.c"
      $261 = (($260) + 28|0); //@line 1543 "emscripten/stb_image.c"
      $262 = HEAP32[$261>>2]|0; //@line 1543 "emscripten/stb_image.c"
      $263 = (($262) + 1)|0; //@line 1543 "emscripten/stb_image.c"
      HEAP32[$261>>2] = $263; //@line 1543 "emscripten/stb_image.c"
      $264 = $k; //@line 1543 "emscripten/stb_image.c"
      $265 = $1; //@line 1543 "emscripten/stb_image.c"
      $266 = (($265) + 13724|0); //@line 1543 "emscripten/stb_image.c"
      $267 = (($266) + (($264*56)|0)|0); //@line 1543 "emscripten/stb_image.c"
      $268 = (($267) + 32|0); //@line 1543 "emscripten/stb_image.c"
      $269 = HEAP32[$268>>2]|0; //@line 1543 "emscripten/stb_image.c"
      $270 = ($263|0)<($269|0); //@line 1543 "emscripten/stb_image.c"
      if ($270) {
       $271 = $k; //@line 1544 "emscripten/stb_image.c"
       $272 = $1; //@line 1544 "emscripten/stb_image.c"
       $273 = (($272) + 13724|0); //@line 1544 "emscripten/stb_image.c"
       $274 = (($273) + (($271*56)|0)|0); //@line 1544 "emscripten/stb_image.c"
       $275 = (($274) + 36|0); //@line 1544 "emscripten/stb_image.c"
       $276 = HEAP32[$275>>2]|0; //@line 1544 "emscripten/stb_image.c"
       $277 = $r1; //@line 1544 "emscripten/stb_image.c"
       $278 = (($277) + 8|0); //@line 1544 "emscripten/stb_image.c"
       $279 = HEAP32[$278>>2]|0; //@line 1544 "emscripten/stb_image.c"
       $280 = (($279) + ($276)|0); //@line 1544 "emscripten/stb_image.c"
       HEAP32[$278>>2] = $280; //@line 1544 "emscripten/stb_image.c"
      }
     }
     $281 = $k; //@line 1533 "emscripten/stb_image.c"
     $282 = (($281) + 1)|0; //@line 1533 "emscripten/stb_image.c"
     $k = $282; //@line 1533 "emscripten/stb_image.c"
    }
    $283 = $n; //@line 1547 "emscripten/stb_image.c"
    $284 = ($283|0)>=(3); //@line 1547 "emscripten/stb_image.c"
    if ($284) {
     $285 = HEAP32[$coutput>>2]|0; //@line 1548 "emscripten/stb_image.c"
     $y = $285; //@line 1548 "emscripten/stb_image.c"
     $286 = $1; //@line 1549 "emscripten/stb_image.c"
     $287 = HEAP32[$286>>2]|0; //@line 1549 "emscripten/stb_image.c"
     $288 = (($287) + 8|0); //@line 1549 "emscripten/stb_image.c"
     $289 = HEAP32[$288>>2]|0; //@line 1549 "emscripten/stb_image.c"
     $290 = ($289|0)==(3); //@line 1549 "emscripten/stb_image.c"
     if ($290) {
      $291 = $out; //@line 1553 "emscripten/stb_image.c"
      $292 = $y; //@line 1553 "emscripten/stb_image.c"
      $293 = (($coutput) + 4|0); //@line 1553 "emscripten/stb_image.c"
      $294 = HEAP32[$293>>2]|0; //@line 1553 "emscripten/stb_image.c"
      $295 = (($coutput) + 8|0); //@line 1553 "emscripten/stb_image.c"
      $296 = HEAP32[$295>>2]|0; //@line 1553 "emscripten/stb_image.c"
      $297 = $1; //@line 1553 "emscripten/stb_image.c"
      $298 = HEAP32[$297>>2]|0; //@line 1553 "emscripten/stb_image.c"
      $299 = HEAP32[$298>>2]|0; //@line 1553 "emscripten/stb_image.c"
      $300 = $n; //@line 1553 "emscripten/stb_image.c"
      __ZL16YCbCr_to_RGB_rowPhPKhS1_S1_ii($291,$292,$294,$296,$299,$300); //@line 1553 "emscripten/stb_image.c"
     } else {
      $i = 0; //@line 1556 "emscripten/stb_image.c"
      while(1) {
       $301 = $i; //@line 1556 "emscripten/stb_image.c"
       $302 = $1; //@line 1556 "emscripten/stb_image.c"
       $303 = HEAP32[$302>>2]|0; //@line 1556 "emscripten/stb_image.c"
       $304 = HEAP32[$303>>2]|0; //@line 1556 "emscripten/stb_image.c"
       $305 = ($301>>>0)<($304>>>0); //@line 1556 "emscripten/stb_image.c"
       if (!($305)) {
        break;
       }
       $306 = $i; //@line 1557 "emscripten/stb_image.c"
       $307 = $y; //@line 1557 "emscripten/stb_image.c"
       $308 = (($307) + ($306)|0); //@line 1557 "emscripten/stb_image.c"
       $309 = HEAP8[$308>>0]|0; //@line 1557 "emscripten/stb_image.c"
       $310 = $out; //@line 1557 "emscripten/stb_image.c"
       $311 = (($310) + 2|0); //@line 1557 "emscripten/stb_image.c"
       HEAP8[$311>>0] = $309; //@line 1557 "emscripten/stb_image.c"
       $312 = $out; //@line 1557 "emscripten/stb_image.c"
       $313 = (($312) + 1|0); //@line 1557 "emscripten/stb_image.c"
       HEAP8[$313>>0] = $309; //@line 1557 "emscripten/stb_image.c"
       $314 = $out; //@line 1557 "emscripten/stb_image.c"
       HEAP8[$314>>0] = $309; //@line 1557 "emscripten/stb_image.c"
       $315 = $out; //@line 1558 "emscripten/stb_image.c"
       $316 = (($315) + 3|0); //@line 1558 "emscripten/stb_image.c"
       HEAP8[$316>>0] = -1; //@line 1558 "emscripten/stb_image.c"
       $317 = $n; //@line 1559 "emscripten/stb_image.c"
       $318 = $out; //@line 1559 "emscripten/stb_image.c"
       $319 = (($318) + ($317)|0); //@line 1559 "emscripten/stb_image.c"
       $out = $319; //@line 1559 "emscripten/stb_image.c"
       $320 = $i; //@line 1556 "emscripten/stb_image.c"
       $321 = (($320) + 1)|0; //@line 1556 "emscripten/stb_image.c"
       $i = $321; //@line 1556 "emscripten/stb_image.c"
      }
     }
    } else {
     $322 = HEAP32[$coutput>>2]|0; //@line 1562 "emscripten/stb_image.c"
     $y2 = $322; //@line 1562 "emscripten/stb_image.c"
     $323 = $n; //@line 1563 "emscripten/stb_image.c"
     $324 = ($323|0)==(1); //@line 1563 "emscripten/stb_image.c"
     if ($324) {
      $i = 0; //@line 1564 "emscripten/stb_image.c"
      while(1) {
       $325 = $i; //@line 1564 "emscripten/stb_image.c"
       $326 = $1; //@line 1564 "emscripten/stb_image.c"
       $327 = HEAP32[$326>>2]|0; //@line 1564 "emscripten/stb_image.c"
       $328 = HEAP32[$327>>2]|0; //@line 1564 "emscripten/stb_image.c"
       $329 = ($325>>>0)<($328>>>0); //@line 1564 "emscripten/stb_image.c"
       if (!($329)) {
        break;
       }
       $330 = $i; //@line 1564 "emscripten/stb_image.c"
       $331 = $y2; //@line 1564 "emscripten/stb_image.c"
       $332 = (($331) + ($330)|0); //@line 1564 "emscripten/stb_image.c"
       $333 = HEAP8[$332>>0]|0; //@line 1564 "emscripten/stb_image.c"
       $334 = $i; //@line 1564 "emscripten/stb_image.c"
       $335 = $out; //@line 1564 "emscripten/stb_image.c"
       $336 = (($335) + ($334)|0); //@line 1564 "emscripten/stb_image.c"
       HEAP8[$336>>0] = $333; //@line 1564 "emscripten/stb_image.c"
       $337 = $i; //@line 1564 "emscripten/stb_image.c"
       $338 = (($337) + 1)|0; //@line 1564 "emscripten/stb_image.c"
       $i = $338; //@line 1564 "emscripten/stb_image.c"
      }
     } else {
      $i = 0; //@line 1566 "emscripten/stb_image.c"
      while(1) {
       $339 = $i; //@line 1566 "emscripten/stb_image.c"
       $340 = $1; //@line 1566 "emscripten/stb_image.c"
       $341 = HEAP32[$340>>2]|0; //@line 1566 "emscripten/stb_image.c"
       $342 = HEAP32[$341>>2]|0; //@line 1566 "emscripten/stb_image.c"
       $343 = ($339>>>0)<($342>>>0); //@line 1566 "emscripten/stb_image.c"
       if (!($343)) {
        break;
       }
       $344 = $i; //@line 1566 "emscripten/stb_image.c"
       $345 = $y2; //@line 1566 "emscripten/stb_image.c"
       $346 = (($345) + ($344)|0); //@line 1566 "emscripten/stb_image.c"
       $347 = HEAP8[$346>>0]|0; //@line 1566 "emscripten/stb_image.c"
       $348 = $out; //@line 1566 "emscripten/stb_image.c"
       $349 = (($348) + 1|0); //@line 1566 "emscripten/stb_image.c"
       $out = $349; //@line 1566 "emscripten/stb_image.c"
       HEAP8[$348>>0] = $347; //@line 1566 "emscripten/stb_image.c"
       $350 = $out; //@line 1566 "emscripten/stb_image.c"
       $351 = (($350) + 1|0); //@line 1566 "emscripten/stb_image.c"
       $out = $351; //@line 1566 "emscripten/stb_image.c"
       HEAP8[$350>>0] = -1; //@line 1566 "emscripten/stb_image.c"
       $352 = $i; //@line 1566 "emscripten/stb_image.c"
       $353 = (($352) + 1)|0; //@line 1566 "emscripten/stb_image.c"
       $i = $353; //@line 1566 "emscripten/stb_image.c"
      }
     }
    }
    $354 = $j; //@line 1531 "emscripten/stb_image.c"
    $355 = (($354) + 1)|0; //@line 1531 "emscripten/stb_image.c"
    $j = $355; //@line 1531 "emscripten/stb_image.c"
   }
   $356 = $1; //@line 1569 "emscripten/stb_image.c"
   __ZL12cleanup_jpegP4jpeg($356); //@line 1569 "emscripten/stb_image.c"
   $357 = $1; //@line 1570 "emscripten/stb_image.c"
   $358 = HEAP32[$357>>2]|0; //@line 1570 "emscripten/stb_image.c"
   $359 = HEAP32[$358>>2]|0; //@line 1570 "emscripten/stb_image.c"
   $360 = $2; //@line 1570 "emscripten/stb_image.c"
   HEAP32[$360>>2] = $359; //@line 1570 "emscripten/stb_image.c"
   $361 = $1; //@line 1571 "emscripten/stb_image.c"
   $362 = HEAP32[$361>>2]|0; //@line 1571 "emscripten/stb_image.c"
   $363 = (($362) + 4|0); //@line 1571 "emscripten/stb_image.c"
   $364 = HEAP32[$363>>2]|0; //@line 1571 "emscripten/stb_image.c"
   $365 = $3; //@line 1571 "emscripten/stb_image.c"
   HEAP32[$365>>2] = $364; //@line 1571 "emscripten/stb_image.c"
   $366 = $4; //@line 1572 "emscripten/stb_image.c"
   $367 = ($366|0)!=(0|0); //@line 1572 "emscripten/stb_image.c"
   if ($367) {
    $368 = $1; //@line 1572 "emscripten/stb_image.c"
    $369 = HEAP32[$368>>2]|0; //@line 1572 "emscripten/stb_image.c"
    $370 = (($369) + 8|0); //@line 1572 "emscripten/stb_image.c"
    $371 = HEAP32[$370>>2]|0; //@line 1572 "emscripten/stb_image.c"
    $372 = $4; //@line 1572 "emscripten/stb_image.c"
    HEAP32[$372>>2] = $371; //@line 1572 "emscripten/stb_image.c"
   }
   $373 = $output; //@line 1573 "emscripten/stb_image.c"
   $0 = $373; //@line 1573 "emscripten/stb_image.c"
   $374 = $0; //@line 1575 "emscripten/stb_image.c"
   STACKTOP = sp;return ($374|0); //@line 1575 "emscripten/stb_image.c"
  }
 }
 $10 = (__ZL1ePKc(29320)|0); //@line 1481 "emscripten/stb_image.c"
 $11 = ($10|0)!=(0); //@line 1481 "emscripten/stb_image.c"
 $12 = $11 ? 0 : 0; //@line 1481 "emscripten/stb_image.c"
 $13 = $12; //@line 1481 "emscripten/stb_image.c"
 $0 = $13; //@line 1481 "emscripten/stb_image.c"
 $374 = $0; //@line 1575 "emscripten/stb_image.c"
 STACKTOP = sp;return ($374|0); //@line 1575 "emscripten/stb_image.c"
}
function __ZL17decode_jpeg_imageP4jpeg($j) {
 $j = $j|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $m = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $j;
 $2 = $1; //@line 1293 "emscripten/stb_image.c"
 $3 = (($2) + 13984|0); //@line 1293 "emscripten/stb_image.c"
 HEAP32[$3>>2] = 0; //@line 1293 "emscripten/stb_image.c"
 $4 = $1; //@line 1294 "emscripten/stb_image.c"
 $5 = (__ZL18decode_jpeg_headerP4jpegi($4,0)|0); //@line 1294 "emscripten/stb_image.c"
 $6 = ($5|0)!=(0); //@line 1294 "emscripten/stb_image.c"
 if (!($6)) {
  $0 = 0; //@line 1294 "emscripten/stb_image.c"
  $50 = $0; //@line 1318 "emscripten/stb_image.c"
  STACKTOP = sp;return ($50|0); //@line 1318 "emscripten/stb_image.c"
 }
 $7 = $1; //@line 1295 "emscripten/stb_image.c"
 $8 = (__ZL10get_markerP4jpeg($7)|0); //@line 1295 "emscripten/stb_image.c"
 $9 = $8&255; //@line 1295 "emscripten/stb_image.c"
 $m = $9; //@line 1295 "emscripten/stb_image.c"
 L5: while(1) {
  $10 = $m; //@line 1296 "emscripten/stb_image.c"
  $11 = ($10|0)==(217); //@line 1296 "emscripten/stb_image.c"
  $12 = $11 ^ 1; //@line 1296 "emscripten/stb_image.c"
  if (!($12)) {
   label = 25;
   break;
  }
  $13 = $m; //@line 1297 "emscripten/stb_image.c"
  $14 = ($13|0)==(218); //@line 1297 "emscripten/stb_image.c"
  if ($14) {
   $15 = $1; //@line 1298 "emscripten/stb_image.c"
   $16 = (__ZL19process_scan_headerP4jpeg($15)|0); //@line 1298 "emscripten/stb_image.c"
   $17 = ($16|0)!=(0); //@line 1298 "emscripten/stb_image.c"
   if (!($17)) {
    label = 7;
    break;
   }
   $18 = $1; //@line 1299 "emscripten/stb_image.c"
   $19 = (__ZL24parse_entropy_coded_dataP4jpeg($18)|0); //@line 1299 "emscripten/stb_image.c"
   $20 = ($19|0)!=(0); //@line 1299 "emscripten/stb_image.c"
   if (!($20)) {
    label = 9;
    break;
   }
   $21 = $1; //@line 1300 "emscripten/stb_image.c"
   $22 = (($21) + 13956|0); //@line 1300 "emscripten/stb_image.c"
   $23 = HEAP8[$22>>0]|0; //@line 1300 "emscripten/stb_image.c"
   $24 = $23&255; //@line 1300 "emscripten/stb_image.c"
   $25 = ($24|0)==(255); //@line 1300 "emscripten/stb_image.c"
   if ($25) {
    while(1) {
     $26 = $1; //@line 1302 "emscripten/stb_image.c"
     $27 = HEAP32[$26>>2]|0; //@line 1302 "emscripten/stb_image.c"
     $28 = (__ZL6at_eofP4stbi($27)|0); //@line 1302 "emscripten/stb_image.c"
     $29 = ($28|0)!=(0); //@line 1302 "emscripten/stb_image.c"
     $30 = $29 ^ 1; //@line 1302 "emscripten/stb_image.c"
     if (!($30)) {
      break;
     }
     $31 = $1; //@line 1303 "emscripten/stb_image.c"
     $32 = HEAP32[$31>>2]|0; //@line 1303 "emscripten/stb_image.c"
     $33 = (__ZL4get8P4stbi($32)|0); //@line 1303 "emscripten/stb_image.c"
     $x = $33; //@line 1303 "emscripten/stb_image.c"
     $34 = $x; //@line 1304 "emscripten/stb_image.c"
     $35 = ($34|0)==(255); //@line 1304 "emscripten/stb_image.c"
     if ($35) {
      label = 14;
      break;
     }
     $41 = $x; //@line 1307 "emscripten/stb_image.c"
     $42 = ($41|0)!=(0); //@line 1307 "emscripten/stb_image.c"
     if ($42) {
      label = 16;
      break L5;
     }
    }
    if ((label|0) == 14) {
     label = 0;
     $36 = $1; //@line 1305 "emscripten/stb_image.c"
     $37 = HEAP32[$36>>2]|0; //@line 1305 "emscripten/stb_image.c"
     $38 = (__ZL5get8uP4stbi($37)|0); //@line 1305 "emscripten/stb_image.c"
     $39 = $1; //@line 1305 "emscripten/stb_image.c"
     $40 = (($39) + 13956|0); //@line 1305 "emscripten/stb_image.c"
     HEAP8[$40>>0] = $38; //@line 1305 "emscripten/stb_image.c"
    }
   }
  } else {
   $43 = $1; //@line 1314 "emscripten/stb_image.c"
   $44 = $m; //@line 1314 "emscripten/stb_image.c"
   $45 = (__ZL14process_markerP4jpegi($43,$44)|0); //@line 1314 "emscripten/stb_image.c"
   $46 = ($45|0)!=(0); //@line 1314 "emscripten/stb_image.c"
   if (!($46)) {
    label = 22;
    break;
   }
  }
  $47 = $1; //@line 1316 "emscripten/stb_image.c"
  $48 = (__ZL10get_markerP4jpeg($47)|0); //@line 1316 "emscripten/stb_image.c"
  $49 = $48&255; //@line 1316 "emscripten/stb_image.c"
  $m = $49; //@line 1316 "emscripten/stb_image.c"
 }
 if ((label|0) == 7) {
  $0 = 0; //@line 1298 "emscripten/stb_image.c"
  $50 = $0; //@line 1318 "emscripten/stb_image.c"
  STACKTOP = sp;return ($50|0); //@line 1318 "emscripten/stb_image.c"
 }
 else if ((label|0) == 9) {
  $0 = 0; //@line 1299 "emscripten/stb_image.c"
  $50 = $0; //@line 1318 "emscripten/stb_image.c"
  STACKTOP = sp;return ($50|0); //@line 1318 "emscripten/stb_image.c"
 }
 else if ((label|0) == 16) {
  $0 = 0; //@line 1308 "emscripten/stb_image.c"
  $50 = $0; //@line 1318 "emscripten/stb_image.c"
  STACKTOP = sp;return ($50|0); //@line 1318 "emscripten/stb_image.c"
 }
 else if ((label|0) == 22) {
  $0 = 0; //@line 1314 "emscripten/stb_image.c"
  $50 = $0; //@line 1318 "emscripten/stb_image.c"
  STACKTOP = sp;return ($50|0); //@line 1318 "emscripten/stb_image.c"
 }
 else if ((label|0) == 25) {
  $0 = 1; //@line 1318 "emscripten/stb_image.c"
  $50 = $0; //@line 1318 "emscripten/stb_image.c"
  STACKTOP = sp;return ($50|0); //@line 1318 "emscripten/stb_image.c"
 }
 return 0|0;
}
function __ZL12cleanup_jpegP4jpeg($j) {
 $j = $j|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $j;
 $i = 0; //@line 1455 "emscripten/stb_image.c"
 while(1) {
  $1 = $i; //@line 1455 "emscripten/stb_image.c"
  $2 = $0; //@line 1455 "emscripten/stb_image.c"
  $3 = HEAP32[$2>>2]|0; //@line 1455 "emscripten/stb_image.c"
  $4 = (($3) + 8|0); //@line 1455 "emscripten/stb_image.c"
  $5 = HEAP32[$4>>2]|0; //@line 1455 "emscripten/stb_image.c"
  $6 = ($1|0)<($5|0); //@line 1455 "emscripten/stb_image.c"
  if (!($6)) {
   break;
  }
  $7 = $i; //@line 1456 "emscripten/stb_image.c"
  $8 = $0; //@line 1456 "emscripten/stb_image.c"
  $9 = (($8) + 13724|0); //@line 1456 "emscripten/stb_image.c"
  $10 = (($9) + (($7*56)|0)|0); //@line 1456 "emscripten/stb_image.c"
  $11 = (($10) + 44|0); //@line 1456 "emscripten/stb_image.c"
  $12 = HEAP32[$11>>2]|0; //@line 1456 "emscripten/stb_image.c"
  $13 = ($12|0)!=(0|0); //@line 1456 "emscripten/stb_image.c"
  if ($13) {
   $14 = $i; //@line 1457 "emscripten/stb_image.c"
   $15 = $0; //@line 1457 "emscripten/stb_image.c"
   $16 = (($15) + 13724|0); //@line 1457 "emscripten/stb_image.c"
   $17 = (($16) + (($14*56)|0)|0); //@line 1457 "emscripten/stb_image.c"
   $18 = (($17) + 48|0); //@line 1457 "emscripten/stb_image.c"
   $19 = HEAP32[$18>>2]|0; //@line 1457 "emscripten/stb_image.c"
   _free($19); //@line 1457 "emscripten/stb_image.c"
   $20 = $i; //@line 1458 "emscripten/stb_image.c"
   $21 = $0; //@line 1458 "emscripten/stb_image.c"
   $22 = (($21) + 13724|0); //@line 1458 "emscripten/stb_image.c"
   $23 = (($22) + (($20*56)|0)|0); //@line 1458 "emscripten/stb_image.c"
   $24 = (($23) + 44|0); //@line 1458 "emscripten/stb_image.c"
   HEAP32[$24>>2] = 0; //@line 1458 "emscripten/stb_image.c"
  }
  $25 = $i; //@line 1460 "emscripten/stb_image.c"
  $26 = $0; //@line 1460 "emscripten/stb_image.c"
  $27 = (($26) + 13724|0); //@line 1460 "emscripten/stb_image.c"
  $28 = (($27) + (($25*56)|0)|0); //@line 1460 "emscripten/stb_image.c"
  $29 = (($28) + 52|0); //@line 1460 "emscripten/stb_image.c"
  $30 = HEAP32[$29>>2]|0; //@line 1460 "emscripten/stb_image.c"
  $31 = ($30|0)!=(0|0); //@line 1460 "emscripten/stb_image.c"
  if ($31) {
   $32 = $i; //@line 1461 "emscripten/stb_image.c"
   $33 = $0; //@line 1461 "emscripten/stb_image.c"
   $34 = (($33) + 13724|0); //@line 1461 "emscripten/stb_image.c"
   $35 = (($34) + (($32*56)|0)|0); //@line 1461 "emscripten/stb_image.c"
   $36 = (($35) + 52|0); //@line 1461 "emscripten/stb_image.c"
   $37 = HEAP32[$36>>2]|0; //@line 1461 "emscripten/stb_image.c"
   _free($37); //@line 1461 "emscripten/stb_image.c"
   $38 = $i; //@line 1462 "emscripten/stb_image.c"
   $39 = $0; //@line 1462 "emscripten/stb_image.c"
   $40 = (($39) + 13724|0); //@line 1462 "emscripten/stb_image.c"
   $41 = (($40) + (($38*56)|0)|0); //@line 1462 "emscripten/stb_image.c"
   $42 = (($41) + 52|0); //@line 1462 "emscripten/stb_image.c"
   HEAP32[$42>>2] = 0; //@line 1462 "emscripten/stb_image.c"
  }
  $43 = $i; //@line 1455 "emscripten/stb_image.c"
  $44 = (($43) + 1)|0; //@line 1455 "emscripten/stb_image.c"
  $i = $44; //@line 1455 "emscripten/stb_image.c"
 }
 STACKTOP = sp;return; //@line 1465 "emscripten/stb_image.c"
}
function __ZL14resample_row_1PhS_S_ii($out,$in_near,$in_far,$w,$hs) {
 $out = $out|0;
 $in_near = $in_near|0;
 $in_far = $in_far|0;
 $w = $w|0;
 $hs = $hs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $out;
 $1 = $in_near;
 $2 = $in_far;
 $3 = $w;
 $4 = $hs;
 $5 = $1; //@line 1334 "emscripten/stb_image.c"
 STACKTOP = sp;return ($5|0); //@line 1334 "emscripten/stb_image.c"
}
function __ZL16resample_row_v_2PhS_S_ii($out,$in_near,$in_far,$w,$hs) {
 $out = $out|0;
 $in_near = $in_near|0;
 $in_far = $in_far|0;
 $w = $w|0;
 $hs = $hs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $out;
 $1 = $in_near;
 $2 = $in_far;
 $3 = $w;
 $4 = $hs;
 $i = 0; //@line 1342 "emscripten/stb_image.c"
 while(1) {
  $5 = $i; //@line 1342 "emscripten/stb_image.c"
  $6 = $3; //@line 1342 "emscripten/stb_image.c"
  $7 = ($5|0)<($6|0); //@line 1342 "emscripten/stb_image.c"
  if (!($7)) {
   break;
  }
  $8 = $i; //@line 1343 "emscripten/stb_image.c"
  $9 = $1; //@line 1343 "emscripten/stb_image.c"
  $10 = (($9) + ($8)|0); //@line 1343 "emscripten/stb_image.c"
  $11 = HEAP8[$10>>0]|0; //@line 1343 "emscripten/stb_image.c"
  $12 = $11&255; //@line 1343 "emscripten/stb_image.c"
  $13 = ($12*3)|0; //@line 1343 "emscripten/stb_image.c"
  $14 = $i; //@line 1343 "emscripten/stb_image.c"
  $15 = $2; //@line 1343 "emscripten/stb_image.c"
  $16 = (($15) + ($14)|0); //@line 1343 "emscripten/stb_image.c"
  $17 = HEAP8[$16>>0]|0; //@line 1343 "emscripten/stb_image.c"
  $18 = $17&255; //@line 1343 "emscripten/stb_image.c"
  $19 = (($13) + ($18))|0; //@line 1343 "emscripten/stb_image.c"
  $20 = (($19) + 2)|0; //@line 1343 "emscripten/stb_image.c"
  $21 = $20 >> 2; //@line 1343 "emscripten/stb_image.c"
  $22 = $21&255; //@line 1343 "emscripten/stb_image.c"
  $23 = $i; //@line 1343 "emscripten/stb_image.c"
  $24 = $0; //@line 1343 "emscripten/stb_image.c"
  $25 = (($24) + ($23)|0); //@line 1343 "emscripten/stb_image.c"
  HEAP8[$25>>0] = $22; //@line 1343 "emscripten/stb_image.c"
  $26 = $i; //@line 1342 "emscripten/stb_image.c"
  $27 = (($26) + 1)|0; //@line 1342 "emscripten/stb_image.c"
  $i = $27; //@line 1342 "emscripten/stb_image.c"
 }
 $28 = $0; //@line 1344 "emscripten/stb_image.c"
 STACKTOP = sp;return ($28|0); //@line 1344 "emscripten/stb_image.c"
}
function __ZL16resample_row_h_2PhS_S_ii($out,$in_near,$in_far,$w,$hs) {
 $out = $out|0;
 $in_near = $in_near|0;
 $in_far = $in_far|0;
 $w = $w|0;
 $hs = $hs|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $input = 0, $n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $1 = $out;
 $2 = $in_near;
 $3 = $in_far;
 $4 = $w;
 $5 = $hs;
 $6 = $2; //@line 1351 "emscripten/stb_image.c"
 $input = $6; //@line 1351 "emscripten/stb_image.c"
 $7 = $4; //@line 1353 "emscripten/stb_image.c"
 $8 = ($7|0)==(1); //@line 1353 "emscripten/stb_image.c"
 if ($8) {
  $9 = $input; //@line 1355 "emscripten/stb_image.c"
  $10 = HEAP8[$9>>0]|0; //@line 1355 "emscripten/stb_image.c"
  $11 = $1; //@line 1355 "emscripten/stb_image.c"
  $12 = (($11) + 1|0); //@line 1355 "emscripten/stb_image.c"
  HEAP8[$12>>0] = $10; //@line 1355 "emscripten/stb_image.c"
  $13 = $1; //@line 1355 "emscripten/stb_image.c"
  HEAP8[$13>>0] = $10; //@line 1355 "emscripten/stb_image.c"
  $14 = $1; //@line 1356 "emscripten/stb_image.c"
  $0 = $14; //@line 1356 "emscripten/stb_image.c"
  $108 = $0; //@line 1373 "emscripten/stb_image.c"
  STACKTOP = sp;return ($108|0); //@line 1373 "emscripten/stb_image.c"
 }
 $15 = $input; //@line 1359 "emscripten/stb_image.c"
 $16 = HEAP8[$15>>0]|0; //@line 1359 "emscripten/stb_image.c"
 $17 = $1; //@line 1359 "emscripten/stb_image.c"
 HEAP8[$17>>0] = $16; //@line 1359 "emscripten/stb_image.c"
 $18 = $input; //@line 1360 "emscripten/stb_image.c"
 $19 = HEAP8[$18>>0]|0; //@line 1360 "emscripten/stb_image.c"
 $20 = $19&255; //@line 1360 "emscripten/stb_image.c"
 $21 = ($20*3)|0; //@line 1360 "emscripten/stb_image.c"
 $22 = $input; //@line 1360 "emscripten/stb_image.c"
 $23 = (($22) + 1|0); //@line 1360 "emscripten/stb_image.c"
 $24 = HEAP8[$23>>0]|0; //@line 1360 "emscripten/stb_image.c"
 $25 = $24&255; //@line 1360 "emscripten/stb_image.c"
 $26 = (($21) + ($25))|0; //@line 1360 "emscripten/stb_image.c"
 $27 = (($26) + 2)|0; //@line 1360 "emscripten/stb_image.c"
 $28 = $27 >> 2; //@line 1360 "emscripten/stb_image.c"
 $29 = $28&255; //@line 1360 "emscripten/stb_image.c"
 $30 = $1; //@line 1360 "emscripten/stb_image.c"
 $31 = (($30) + 1|0); //@line 1360 "emscripten/stb_image.c"
 HEAP8[$31>>0] = $29; //@line 1360 "emscripten/stb_image.c"
 $i = 1; //@line 1361 "emscripten/stb_image.c"
 while(1) {
  $32 = $i; //@line 1361 "emscripten/stb_image.c"
  $33 = $4; //@line 1361 "emscripten/stb_image.c"
  $34 = (($33) - 1)|0; //@line 1361 "emscripten/stb_image.c"
  $35 = ($32|0)<($34|0); //@line 1361 "emscripten/stb_image.c"
  if (!($35)) {
   break;
  }
  $36 = $i; //@line 1362 "emscripten/stb_image.c"
  $37 = $input; //@line 1362 "emscripten/stb_image.c"
  $38 = (($37) + ($36)|0); //@line 1362 "emscripten/stb_image.c"
  $39 = HEAP8[$38>>0]|0; //@line 1362 "emscripten/stb_image.c"
  $40 = $39&255; //@line 1362 "emscripten/stb_image.c"
  $41 = ($40*3)|0; //@line 1362 "emscripten/stb_image.c"
  $42 = (($41) + 2)|0; //@line 1362 "emscripten/stb_image.c"
  $n = $42; //@line 1362 "emscripten/stb_image.c"
  $43 = $n; //@line 1363 "emscripten/stb_image.c"
  $44 = $i; //@line 1363 "emscripten/stb_image.c"
  $45 = (($44) - 1)|0; //@line 1363 "emscripten/stb_image.c"
  $46 = $input; //@line 1363 "emscripten/stb_image.c"
  $47 = (($46) + ($45)|0); //@line 1363 "emscripten/stb_image.c"
  $48 = HEAP8[$47>>0]|0; //@line 1363 "emscripten/stb_image.c"
  $49 = $48&255; //@line 1363 "emscripten/stb_image.c"
  $50 = (($43) + ($49))|0; //@line 1363 "emscripten/stb_image.c"
  $51 = $50 >> 2; //@line 1363 "emscripten/stb_image.c"
  $52 = $51&255; //@line 1363 "emscripten/stb_image.c"
  $53 = $i; //@line 1363 "emscripten/stb_image.c"
  $54 = $53<<1; //@line 1363 "emscripten/stb_image.c"
  $55 = (($54) + 0)|0; //@line 1363 "emscripten/stb_image.c"
  $56 = $1; //@line 1363 "emscripten/stb_image.c"
  $57 = (($56) + ($55)|0); //@line 1363 "emscripten/stb_image.c"
  HEAP8[$57>>0] = $52; //@line 1363 "emscripten/stb_image.c"
  $58 = $n; //@line 1364 "emscripten/stb_image.c"
  $59 = $i; //@line 1364 "emscripten/stb_image.c"
  $60 = (($59) + 1)|0; //@line 1364 "emscripten/stb_image.c"
  $61 = $input; //@line 1364 "emscripten/stb_image.c"
  $62 = (($61) + ($60)|0); //@line 1364 "emscripten/stb_image.c"
  $63 = HEAP8[$62>>0]|0; //@line 1364 "emscripten/stb_image.c"
  $64 = $63&255; //@line 1364 "emscripten/stb_image.c"
  $65 = (($58) + ($64))|0; //@line 1364 "emscripten/stb_image.c"
  $66 = $65 >> 2; //@line 1364 "emscripten/stb_image.c"
  $67 = $66&255; //@line 1364 "emscripten/stb_image.c"
  $68 = $i; //@line 1364 "emscripten/stb_image.c"
  $69 = $68<<1; //@line 1364 "emscripten/stb_image.c"
  $70 = (($69) + 1)|0; //@line 1364 "emscripten/stb_image.c"
  $71 = $1; //@line 1364 "emscripten/stb_image.c"
  $72 = (($71) + ($70)|0); //@line 1364 "emscripten/stb_image.c"
  HEAP8[$72>>0] = $67; //@line 1364 "emscripten/stb_image.c"
  $73 = $i; //@line 1361 "emscripten/stb_image.c"
  $74 = (($73) + 1)|0; //@line 1361 "emscripten/stb_image.c"
  $i = $74; //@line 1361 "emscripten/stb_image.c"
 }
 $75 = $4; //@line 1366 "emscripten/stb_image.c"
 $76 = (($75) - 2)|0; //@line 1366 "emscripten/stb_image.c"
 $77 = $input; //@line 1366 "emscripten/stb_image.c"
 $78 = (($77) + ($76)|0); //@line 1366 "emscripten/stb_image.c"
 $79 = HEAP8[$78>>0]|0; //@line 1366 "emscripten/stb_image.c"
 $80 = $79&255; //@line 1366 "emscripten/stb_image.c"
 $81 = ($80*3)|0; //@line 1366 "emscripten/stb_image.c"
 $82 = $4; //@line 1366 "emscripten/stb_image.c"
 $83 = (($82) - 1)|0; //@line 1366 "emscripten/stb_image.c"
 $84 = $input; //@line 1366 "emscripten/stb_image.c"
 $85 = (($84) + ($83)|0); //@line 1366 "emscripten/stb_image.c"
 $86 = HEAP8[$85>>0]|0; //@line 1366 "emscripten/stb_image.c"
 $87 = $86&255; //@line 1366 "emscripten/stb_image.c"
 $88 = (($81) + ($87))|0; //@line 1366 "emscripten/stb_image.c"
 $89 = (($88) + 2)|0; //@line 1366 "emscripten/stb_image.c"
 $90 = $89 >> 2; //@line 1366 "emscripten/stb_image.c"
 $91 = $90&255; //@line 1366 "emscripten/stb_image.c"
 $92 = $i; //@line 1366 "emscripten/stb_image.c"
 $93 = $92<<1; //@line 1366 "emscripten/stb_image.c"
 $94 = (($93) + 0)|0; //@line 1366 "emscripten/stb_image.c"
 $95 = $1; //@line 1366 "emscripten/stb_image.c"
 $96 = (($95) + ($94)|0); //@line 1366 "emscripten/stb_image.c"
 HEAP8[$96>>0] = $91; //@line 1366 "emscripten/stb_image.c"
 $97 = $4; //@line 1367 "emscripten/stb_image.c"
 $98 = (($97) - 1)|0; //@line 1367 "emscripten/stb_image.c"
 $99 = $input; //@line 1367 "emscripten/stb_image.c"
 $100 = (($99) + ($98)|0); //@line 1367 "emscripten/stb_image.c"
 $101 = HEAP8[$100>>0]|0; //@line 1367 "emscripten/stb_image.c"
 $102 = $i; //@line 1367 "emscripten/stb_image.c"
 $103 = $102<<1; //@line 1367 "emscripten/stb_image.c"
 $104 = (($103) + 1)|0; //@line 1367 "emscripten/stb_image.c"
 $105 = $1; //@line 1367 "emscripten/stb_image.c"
 $106 = (($105) + ($104)|0); //@line 1367 "emscripten/stb_image.c"
 HEAP8[$106>>0] = $101; //@line 1367 "emscripten/stb_image.c"
 $107 = $1; //@line 1372 "emscripten/stb_image.c"
 $0 = $107; //@line 1372 "emscripten/stb_image.c"
 $108 = $0; //@line 1373 "emscripten/stb_image.c"
 STACKTOP = sp;return ($108|0); //@line 1373 "emscripten/stb_image.c"
}
function __ZL17resample_row_hv_2PhS_S_ii($out,$in_near,$in_far,$w,$hs) {
 $out = $out|0;
 $in_near = $in_near|0;
 $in_far = $in_far|0;
 $w = $w|0;
 $hs = $hs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $9 = 0, $i = 0, $t0 = 0, $t1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $1 = $out;
 $2 = $in_near;
 $3 = $in_far;
 $4 = $w;
 $5 = $hs;
 $6 = $4; //@line 1381 "emscripten/stb_image.c"
 $7 = ($6|0)==(1); //@line 1381 "emscripten/stb_image.c"
 if ($7) {
  $8 = $2; //@line 1382 "emscripten/stb_image.c"
  $9 = HEAP8[$8>>0]|0; //@line 1382 "emscripten/stb_image.c"
  $10 = $9&255; //@line 1382 "emscripten/stb_image.c"
  $11 = ($10*3)|0; //@line 1382 "emscripten/stb_image.c"
  $12 = $3; //@line 1382 "emscripten/stb_image.c"
  $13 = HEAP8[$12>>0]|0; //@line 1382 "emscripten/stb_image.c"
  $14 = $13&255; //@line 1382 "emscripten/stb_image.c"
  $15 = (($11) + ($14))|0; //@line 1382 "emscripten/stb_image.c"
  $16 = (($15) + 2)|0; //@line 1382 "emscripten/stb_image.c"
  $17 = $16 >> 2; //@line 1382 "emscripten/stb_image.c"
  $18 = $17&255; //@line 1382 "emscripten/stb_image.c"
  $19 = $1; //@line 1382 "emscripten/stb_image.c"
  $20 = (($19) + 1|0); //@line 1382 "emscripten/stb_image.c"
  HEAP8[$20>>0] = $18; //@line 1382 "emscripten/stb_image.c"
  $21 = $1; //@line 1382 "emscripten/stb_image.c"
  HEAP8[$21>>0] = $18; //@line 1382 "emscripten/stb_image.c"
  $22 = $1; //@line 1383 "emscripten/stb_image.c"
  $0 = $22; //@line 1383 "emscripten/stb_image.c"
  $87 = $0; //@line 1399 "emscripten/stb_image.c"
  STACKTOP = sp;return ($87|0); //@line 1399 "emscripten/stb_image.c"
 }
 $23 = $2; //@line 1386 "emscripten/stb_image.c"
 $24 = HEAP8[$23>>0]|0; //@line 1386 "emscripten/stb_image.c"
 $25 = $24&255; //@line 1386 "emscripten/stb_image.c"
 $26 = ($25*3)|0; //@line 1386 "emscripten/stb_image.c"
 $27 = $3; //@line 1386 "emscripten/stb_image.c"
 $28 = HEAP8[$27>>0]|0; //@line 1386 "emscripten/stb_image.c"
 $29 = $28&255; //@line 1386 "emscripten/stb_image.c"
 $30 = (($26) + ($29))|0; //@line 1386 "emscripten/stb_image.c"
 $t1 = $30; //@line 1386 "emscripten/stb_image.c"
 $31 = $t1; //@line 1387 "emscripten/stb_image.c"
 $32 = (($31) + 2)|0; //@line 1387 "emscripten/stb_image.c"
 $33 = $32 >> 2; //@line 1387 "emscripten/stb_image.c"
 $34 = $33&255; //@line 1387 "emscripten/stb_image.c"
 $35 = $1; //@line 1387 "emscripten/stb_image.c"
 HEAP8[$35>>0] = $34; //@line 1387 "emscripten/stb_image.c"
 $i = 1; //@line 1388 "emscripten/stb_image.c"
 while(1) {
  $36 = $i; //@line 1388 "emscripten/stb_image.c"
  $37 = $4; //@line 1388 "emscripten/stb_image.c"
  $38 = ($36|0)<($37|0); //@line 1388 "emscripten/stb_image.c"
  if (!($38)) {
   break;
  }
  $39 = $t1; //@line 1389 "emscripten/stb_image.c"
  $t0 = $39; //@line 1389 "emscripten/stb_image.c"
  $40 = $i; //@line 1390 "emscripten/stb_image.c"
  $41 = $2; //@line 1390 "emscripten/stb_image.c"
  $42 = (($41) + ($40)|0); //@line 1390 "emscripten/stb_image.c"
  $43 = HEAP8[$42>>0]|0; //@line 1390 "emscripten/stb_image.c"
  $44 = $43&255; //@line 1390 "emscripten/stb_image.c"
  $45 = ($44*3)|0; //@line 1390 "emscripten/stb_image.c"
  $46 = $i; //@line 1390 "emscripten/stb_image.c"
  $47 = $3; //@line 1390 "emscripten/stb_image.c"
  $48 = (($47) + ($46)|0); //@line 1390 "emscripten/stb_image.c"
  $49 = HEAP8[$48>>0]|0; //@line 1390 "emscripten/stb_image.c"
  $50 = $49&255; //@line 1390 "emscripten/stb_image.c"
  $51 = (($45) + ($50))|0; //@line 1390 "emscripten/stb_image.c"
  $t1 = $51; //@line 1390 "emscripten/stb_image.c"
  $52 = $t0; //@line 1391 "emscripten/stb_image.c"
  $53 = ($52*3)|0; //@line 1391 "emscripten/stb_image.c"
  $54 = $t1; //@line 1391 "emscripten/stb_image.c"
  $55 = (($53) + ($54))|0; //@line 1391 "emscripten/stb_image.c"
  $56 = (($55) + 8)|0; //@line 1391 "emscripten/stb_image.c"
  $57 = $56 >> 4; //@line 1391 "emscripten/stb_image.c"
  $58 = $57&255; //@line 1391 "emscripten/stb_image.c"
  $59 = $i; //@line 1391 "emscripten/stb_image.c"
  $60 = $59<<1; //@line 1391 "emscripten/stb_image.c"
  $61 = (($60) - 1)|0; //@line 1391 "emscripten/stb_image.c"
  $62 = $1; //@line 1391 "emscripten/stb_image.c"
  $63 = (($62) + ($61)|0); //@line 1391 "emscripten/stb_image.c"
  HEAP8[$63>>0] = $58; //@line 1391 "emscripten/stb_image.c"
  $64 = $t1; //@line 1392 "emscripten/stb_image.c"
  $65 = ($64*3)|0; //@line 1392 "emscripten/stb_image.c"
  $66 = $t0; //@line 1392 "emscripten/stb_image.c"
  $67 = (($65) + ($66))|0; //@line 1392 "emscripten/stb_image.c"
  $68 = (($67) + 8)|0; //@line 1392 "emscripten/stb_image.c"
  $69 = $68 >> 4; //@line 1392 "emscripten/stb_image.c"
  $70 = $69&255; //@line 1392 "emscripten/stb_image.c"
  $71 = $i; //@line 1392 "emscripten/stb_image.c"
  $72 = $71<<1; //@line 1392 "emscripten/stb_image.c"
  $73 = $1; //@line 1392 "emscripten/stb_image.c"
  $74 = (($73) + ($72)|0); //@line 1392 "emscripten/stb_image.c"
  HEAP8[$74>>0] = $70; //@line 1392 "emscripten/stb_image.c"
  $75 = $i; //@line 1388 "emscripten/stb_image.c"
  $76 = (($75) + 1)|0; //@line 1388 "emscripten/stb_image.c"
  $i = $76; //@line 1388 "emscripten/stb_image.c"
 }
 $77 = $t1; //@line 1394 "emscripten/stb_image.c"
 $78 = (($77) + 2)|0; //@line 1394 "emscripten/stb_image.c"
 $79 = $78 >> 2; //@line 1394 "emscripten/stb_image.c"
 $80 = $79&255; //@line 1394 "emscripten/stb_image.c"
 $81 = $4; //@line 1394 "emscripten/stb_image.c"
 $82 = $81<<1; //@line 1394 "emscripten/stb_image.c"
 $83 = (($82) - 1)|0; //@line 1394 "emscripten/stb_image.c"
 $84 = $1; //@line 1394 "emscripten/stb_image.c"
 $85 = (($84) + ($83)|0); //@line 1394 "emscripten/stb_image.c"
 HEAP8[$85>>0] = $80; //@line 1394 "emscripten/stb_image.c"
 $86 = $1; //@line 1398 "emscripten/stb_image.c"
 $0 = $86; //@line 1398 "emscripten/stb_image.c"
 $87 = $0; //@line 1399 "emscripten/stb_image.c"
 STACKTOP = sp;return ($87|0); //@line 1399 "emscripten/stb_image.c"
}
function __ZL20resample_row_genericPhS_S_ii($out,$in_near,$in_far,$w,$hs) {
 $out = $out|0;
 $in_near = $in_near|0;
 $in_far = $in_far|0;
 $w = $w|0;
 $hs = $hs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $j = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $out;
 $1 = $in_near;
 $2 = $in_far;
 $3 = $w;
 $4 = $hs;
 $5 = $2; //@line 1405 "emscripten/stb_image.c"
 $2 = $5; //@line 1405 "emscripten/stb_image.c"
 $i = 0; //@line 1406 "emscripten/stb_image.c"
 while(1) {
  $6 = $i; //@line 1406 "emscripten/stb_image.c"
  $7 = $3; //@line 1406 "emscripten/stb_image.c"
  $8 = ($6|0)<($7|0); //@line 1406 "emscripten/stb_image.c"
  if (!($8)) {
   break;
  }
  $j = 0; //@line 1407 "emscripten/stb_image.c"
  while(1) {
   $9 = $j; //@line 1407 "emscripten/stb_image.c"
   $10 = $4; //@line 1407 "emscripten/stb_image.c"
   $11 = ($9|0)<($10|0); //@line 1407 "emscripten/stb_image.c"
   if (!($11)) {
    break;
   }
   $12 = $i; //@line 1408 "emscripten/stb_image.c"
   $13 = $1; //@line 1408 "emscripten/stb_image.c"
   $14 = (($13) + ($12)|0); //@line 1408 "emscripten/stb_image.c"
   $15 = HEAP8[$14>>0]|0; //@line 1408 "emscripten/stb_image.c"
   $16 = $i; //@line 1408 "emscripten/stb_image.c"
   $17 = $4; //@line 1408 "emscripten/stb_image.c"
   $18 = Math_imul($16, $17)|0; //@line 1408 "emscripten/stb_image.c"
   $19 = $j; //@line 1408 "emscripten/stb_image.c"
   $20 = (($18) + ($19))|0; //@line 1408 "emscripten/stb_image.c"
   $21 = $0; //@line 1408 "emscripten/stb_image.c"
   $22 = (($21) + ($20)|0); //@line 1408 "emscripten/stb_image.c"
   HEAP8[$22>>0] = $15; //@line 1408 "emscripten/stb_image.c"
   $23 = $j; //@line 1407 "emscripten/stb_image.c"
   $24 = (($23) + 1)|0; //@line 1407 "emscripten/stb_image.c"
   $j = $24; //@line 1407 "emscripten/stb_image.c"
  }
  $25 = $i; //@line 1406 "emscripten/stb_image.c"
  $26 = (($25) + 1)|0; //@line 1406 "emscripten/stb_image.c"
  $i = $26; //@line 1406 "emscripten/stb_image.c"
 }
 $27 = $0; //@line 1409 "emscripten/stb_image.c"
 STACKTOP = sp;return ($27|0); //@line 1409 "emscripten/stb_image.c"
}
function __ZL16YCbCr_to_RGB_rowPhPKhS1_S1_ii($out,$y,$pcb,$pcr,$count,$step) {
 $out = $out|0;
 $y = $y|0;
 $pcb = $pcb|0;
 $pcr = $pcr|0;
 $count = $count|0;
 $step = $step|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, $b = 0;
 var $cb = 0, $cr = 0, $g = 0, $i = 0, $r = 0, $y_fixed = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $0 = $out;
 $1 = $y;
 $2 = $pcb;
 $3 = $pcr;
 $4 = $count;
 $5 = $step;
 $i = 0; //@line 1419 "emscripten/stb_image.c"
 while(1) {
  $6 = $i; //@line 1419 "emscripten/stb_image.c"
  $7 = $4; //@line 1419 "emscripten/stb_image.c"
  $8 = ($6|0)<($7|0); //@line 1419 "emscripten/stb_image.c"
  if (!($8)) {
   break;
  }
  $9 = $i; //@line 1420 "emscripten/stb_image.c"
  $10 = $1; //@line 1420 "emscripten/stb_image.c"
  $11 = (($10) + ($9)|0); //@line 1420 "emscripten/stb_image.c"
  $12 = HEAP8[$11>>0]|0; //@line 1420 "emscripten/stb_image.c"
  $13 = $12&255; //@line 1420 "emscripten/stb_image.c"
  $14 = $13 << 16; //@line 1420 "emscripten/stb_image.c"
  $15 = (($14) + 32768)|0; //@line 1420 "emscripten/stb_image.c"
  $y_fixed = $15; //@line 1420 "emscripten/stb_image.c"
  $16 = $i; //@line 1422 "emscripten/stb_image.c"
  $17 = $3; //@line 1422 "emscripten/stb_image.c"
  $18 = (($17) + ($16)|0); //@line 1422 "emscripten/stb_image.c"
  $19 = HEAP8[$18>>0]|0; //@line 1422 "emscripten/stb_image.c"
  $20 = $19&255; //@line 1422 "emscripten/stb_image.c"
  $21 = (($20) - 128)|0; //@line 1422 "emscripten/stb_image.c"
  $cr = $21; //@line 1422 "emscripten/stb_image.c"
  $22 = $i; //@line 1423 "emscripten/stb_image.c"
  $23 = $2; //@line 1423 "emscripten/stb_image.c"
  $24 = (($23) + ($22)|0); //@line 1423 "emscripten/stb_image.c"
  $25 = HEAP8[$24>>0]|0; //@line 1423 "emscripten/stb_image.c"
  $26 = $25&255; //@line 1423 "emscripten/stb_image.c"
  $27 = (($26) - 128)|0; //@line 1423 "emscripten/stb_image.c"
  $cb = $27; //@line 1423 "emscripten/stb_image.c"
  $28 = $y_fixed; //@line 1424 "emscripten/stb_image.c"
  $29 = $cr; //@line 1424 "emscripten/stb_image.c"
  $30 = ($29*91881)|0; //@line 1424 "emscripten/stb_image.c"
  $31 = (($28) + ($30))|0; //@line 1424 "emscripten/stb_image.c"
  $r = $31; //@line 1424 "emscripten/stb_image.c"
  $32 = $y_fixed; //@line 1425 "emscripten/stb_image.c"
  $33 = $cr; //@line 1425 "emscripten/stb_image.c"
  $34 = ($33*46802)|0; //@line 1425 "emscripten/stb_image.c"
  $35 = (($32) - ($34))|0; //@line 1425 "emscripten/stb_image.c"
  $36 = $cb; //@line 1425 "emscripten/stb_image.c"
  $37 = ($36*22554)|0; //@line 1425 "emscripten/stb_image.c"
  $38 = (($35) - ($37))|0; //@line 1425 "emscripten/stb_image.c"
  $g = $38; //@line 1425 "emscripten/stb_image.c"
  $39 = $y_fixed; //@line 1426 "emscripten/stb_image.c"
  $40 = $cb; //@line 1426 "emscripten/stb_image.c"
  $41 = ($40*116130)|0; //@line 1426 "emscripten/stb_image.c"
  $42 = (($39) + ($41))|0; //@line 1426 "emscripten/stb_image.c"
  $b = $42; //@line 1426 "emscripten/stb_image.c"
  $43 = $r; //@line 1427 "emscripten/stb_image.c"
  $44 = $43 >> 16; //@line 1427 "emscripten/stb_image.c"
  $r = $44; //@line 1427 "emscripten/stb_image.c"
  $45 = $g; //@line 1428 "emscripten/stb_image.c"
  $46 = $45 >> 16; //@line 1428 "emscripten/stb_image.c"
  $g = $46; //@line 1428 "emscripten/stb_image.c"
  $47 = $b; //@line 1429 "emscripten/stb_image.c"
  $48 = $47 >> 16; //@line 1429 "emscripten/stb_image.c"
  $b = $48; //@line 1429 "emscripten/stb_image.c"
  $49 = $r; //@line 1430 "emscripten/stb_image.c"
  $50 = ($49>>>0)>(255); //@line 1430 "emscripten/stb_image.c"
  if ($50) {
   $51 = $r; //@line 1430 "emscripten/stb_image.c"
   $52 = ($51|0)<(0); //@line 1430 "emscripten/stb_image.c"
   if ($52) {
    $r = 0; //@line 1430 "emscripten/stb_image.c"
   } else {
    $r = 255; //@line 1430 "emscripten/stb_image.c"
   }
  }
  $53 = $g; //@line 1431 "emscripten/stb_image.c"
  $54 = ($53>>>0)>(255); //@line 1431 "emscripten/stb_image.c"
  if ($54) {
   $55 = $g; //@line 1431 "emscripten/stb_image.c"
   $56 = ($55|0)<(0); //@line 1431 "emscripten/stb_image.c"
   if ($56) {
    $g = 0; //@line 1431 "emscripten/stb_image.c"
   } else {
    $g = 255; //@line 1431 "emscripten/stb_image.c"
   }
  }
  $57 = $b; //@line 1432 "emscripten/stb_image.c"
  $58 = ($57>>>0)>(255); //@line 1432 "emscripten/stb_image.c"
  if ($58) {
   $59 = $b; //@line 1432 "emscripten/stb_image.c"
   $60 = ($59|0)<(0); //@line 1432 "emscripten/stb_image.c"
   if ($60) {
    $b = 0; //@line 1432 "emscripten/stb_image.c"
   } else {
    $b = 255; //@line 1432 "emscripten/stb_image.c"
   }
  }
  $61 = $r; //@line 1433 "emscripten/stb_image.c"
  $62 = $61&255; //@line 1433 "emscripten/stb_image.c"
  $63 = $0; //@line 1433 "emscripten/stb_image.c"
  HEAP8[$63>>0] = $62; //@line 1433 "emscripten/stb_image.c"
  $64 = $g; //@line 1434 "emscripten/stb_image.c"
  $65 = $64&255; //@line 1434 "emscripten/stb_image.c"
  $66 = $0; //@line 1434 "emscripten/stb_image.c"
  $67 = (($66) + 1|0); //@line 1434 "emscripten/stb_image.c"
  HEAP8[$67>>0] = $65; //@line 1434 "emscripten/stb_image.c"
  $68 = $b; //@line 1435 "emscripten/stb_image.c"
  $69 = $68&255; //@line 1435 "emscripten/stb_image.c"
  $70 = $0; //@line 1435 "emscripten/stb_image.c"
  $71 = (($70) + 2|0); //@line 1435 "emscripten/stb_image.c"
  HEAP8[$71>>0] = $69; //@line 1435 "emscripten/stb_image.c"
  $72 = $0; //@line 1436 "emscripten/stb_image.c"
  $73 = (($72) + 3|0); //@line 1436 "emscripten/stb_image.c"
  HEAP8[$73>>0] = -1; //@line 1436 "emscripten/stb_image.c"
  $74 = $5; //@line 1437 "emscripten/stb_image.c"
  $75 = $0; //@line 1437 "emscripten/stb_image.c"
  $76 = (($75) + ($74)|0); //@line 1437 "emscripten/stb_image.c"
  $0 = $76; //@line 1437 "emscripten/stb_image.c"
  $77 = $i; //@line 1419 "emscripten/stb_image.c"
  $78 = (($77) + 1)|0; //@line 1419 "emscripten/stb_image.c"
  $i = $78; //@line 1419 "emscripten/stb_image.c"
 }
 STACKTOP = sp;return; //@line 1439 "emscripten/stb_image.c"
}
function __ZL19process_scan_headerP4jpeg($z) {
 $z = $z|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $Ls = 0, $i = 0, $id = 0;
 var $q = 0, $which = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = $z;
 $2 = $1; //@line 1168 "emscripten/stb_image.c"
 $3 = HEAP32[$2>>2]|0; //@line 1168 "emscripten/stb_image.c"
 $4 = (__ZL5get16P4stbi($3)|0); //@line 1168 "emscripten/stb_image.c"
 $Ls = $4; //@line 1168 "emscripten/stb_image.c"
 $5 = $1; //@line 1169 "emscripten/stb_image.c"
 $6 = HEAP32[$5>>2]|0; //@line 1169 "emscripten/stb_image.c"
 $7 = (__ZL4get8P4stbi($6)|0); //@line 1169 "emscripten/stb_image.c"
 $8 = $1; //@line 1169 "emscripten/stb_image.c"
 $9 = (($8) + 13964|0); //@line 1169 "emscripten/stb_image.c"
 HEAP32[$9>>2] = $7; //@line 1169 "emscripten/stb_image.c"
 $10 = $1; //@line 1170 "emscripten/stb_image.c"
 $11 = (($10) + 13964|0); //@line 1170 "emscripten/stb_image.c"
 $12 = HEAP32[$11>>2]|0; //@line 1170 "emscripten/stb_image.c"
 $13 = ($12|0)<(1); //@line 1170 "emscripten/stb_image.c"
 if (!($13)) {
  $14 = $1; //@line 1170 "emscripten/stb_image.c"
  $15 = (($14) + 13964|0); //@line 1170 "emscripten/stb_image.c"
  $16 = HEAP32[$15>>2]|0; //@line 1170 "emscripten/stb_image.c"
  $17 = ($16|0)>(4); //@line 1170 "emscripten/stb_image.c"
  if (!($17)) {
   $18 = $1; //@line 1170 "emscripten/stb_image.c"
   $19 = (($18) + 13964|0); //@line 1170 "emscripten/stb_image.c"
   $20 = HEAP32[$19>>2]|0; //@line 1170 "emscripten/stb_image.c"
   $21 = $1; //@line 1170 "emscripten/stb_image.c"
   $22 = HEAP32[$21>>2]|0; //@line 1170 "emscripten/stb_image.c"
   $23 = (($22) + 8|0); //@line 1170 "emscripten/stb_image.c"
   $24 = HEAP32[$23>>2]|0; //@line 1170 "emscripten/stb_image.c"
   $25 = ($20|0)>($24|0); //@line 1170 "emscripten/stb_image.c"
   if (!($25)) {
    $27 = $Ls; //@line 1171 "emscripten/stb_image.c"
    $28 = $1; //@line 1171 "emscripten/stb_image.c"
    $29 = (($28) + 13964|0); //@line 1171 "emscripten/stb_image.c"
    $30 = HEAP32[$29>>2]|0; //@line 1171 "emscripten/stb_image.c"
    $31 = $30<<1; //@line 1171 "emscripten/stb_image.c"
    $32 = (6 + ($31))|0; //@line 1171 "emscripten/stb_image.c"
    $33 = ($27|0)!=($32|0); //@line 1171 "emscripten/stb_image.c"
    if ($33) {
     $34 = (__ZL1ePKc(29520)|0); //@line 1171 "emscripten/stb_image.c"
     $0 = $34; //@line 1171 "emscripten/stb_image.c"
     $116 = $0; //@line 1188 "emscripten/stb_image.c"
     STACKTOP = sp;return ($116|0); //@line 1188 "emscripten/stb_image.c"
    }
    $i = 0; //@line 1172 "emscripten/stb_image.c"
    while(1) {
     $35 = $i; //@line 1172 "emscripten/stb_image.c"
     $36 = $1; //@line 1172 "emscripten/stb_image.c"
     $37 = (($36) + 13964|0); //@line 1172 "emscripten/stb_image.c"
     $38 = HEAP32[$37>>2]|0; //@line 1172 "emscripten/stb_image.c"
     $39 = ($35|0)<($38|0); //@line 1172 "emscripten/stb_image.c"
     if (!($39)) {
      label = 23;
      break;
     }
     $40 = $1; //@line 1173 "emscripten/stb_image.c"
     $41 = HEAP32[$40>>2]|0; //@line 1173 "emscripten/stb_image.c"
     $42 = (__ZL4get8P4stbi($41)|0); //@line 1173 "emscripten/stb_image.c"
     $id = $42; //@line 1173 "emscripten/stb_image.c"
     $43 = $1; //@line 1174 "emscripten/stb_image.c"
     $44 = HEAP32[$43>>2]|0; //@line 1174 "emscripten/stb_image.c"
     $45 = (__ZL4get8P4stbi($44)|0); //@line 1174 "emscripten/stb_image.c"
     $q = $45; //@line 1174 "emscripten/stb_image.c"
     $which = 0; //@line 1175 "emscripten/stb_image.c"
     while(1) {
      $46 = $which; //@line 1175 "emscripten/stb_image.c"
      $47 = $1; //@line 1175 "emscripten/stb_image.c"
      $48 = HEAP32[$47>>2]|0; //@line 1175 "emscripten/stb_image.c"
      $49 = (($48) + 8|0); //@line 1175 "emscripten/stb_image.c"
      $50 = HEAP32[$49>>2]|0; //@line 1175 "emscripten/stb_image.c"
      $51 = ($46|0)<($50|0); //@line 1175 "emscripten/stb_image.c"
      if (!($51)) {
       break;
      }
      $52 = $which; //@line 1176 "emscripten/stb_image.c"
      $53 = $1; //@line 1176 "emscripten/stb_image.c"
      $54 = (($53) + 13724|0); //@line 1176 "emscripten/stb_image.c"
      $55 = (($54) + (($52*56)|0)|0); //@line 1176 "emscripten/stb_image.c"
      $56 = HEAP32[$55>>2]|0; //@line 1176 "emscripten/stb_image.c"
      $57 = $id; //@line 1176 "emscripten/stb_image.c"
      $58 = ($56|0)==($57|0); //@line 1176 "emscripten/stb_image.c"
      if ($58) {
       label = 12;
       break;
      }
      $59 = $which; //@line 1175 "emscripten/stb_image.c"
      $60 = (($59) + 1)|0; //@line 1175 "emscripten/stb_image.c"
      $which = $60; //@line 1175 "emscripten/stb_image.c"
     }
     if ((label|0) == 12) {
      label = 0;
     }
     $61 = $which; //@line 1178 "emscripten/stb_image.c"
     $62 = $1; //@line 1178 "emscripten/stb_image.c"
     $63 = HEAP32[$62>>2]|0; //@line 1178 "emscripten/stb_image.c"
     $64 = (($63) + 8|0); //@line 1178 "emscripten/stb_image.c"
     $65 = HEAP32[$64>>2]|0; //@line 1178 "emscripten/stb_image.c"
     $66 = ($61|0)==($65|0); //@line 1178 "emscripten/stb_image.c"
     if ($66) {
      label = 16;
      break;
     }
     $67 = $q; //@line 1179 "emscripten/stb_image.c"
     $68 = $67 >> 4; //@line 1179 "emscripten/stb_image.c"
     $69 = $which; //@line 1179 "emscripten/stb_image.c"
     $70 = $1; //@line 1179 "emscripten/stb_image.c"
     $71 = (($70) + 13724|0); //@line 1179 "emscripten/stb_image.c"
     $72 = (($71) + (($69*56)|0)|0); //@line 1179 "emscripten/stb_image.c"
     $73 = (($72) + 16|0); //@line 1179 "emscripten/stb_image.c"
     HEAP32[$73>>2] = $68; //@line 1179 "emscripten/stb_image.c"
     $74 = $which; //@line 1179 "emscripten/stb_image.c"
     $75 = $1; //@line 1179 "emscripten/stb_image.c"
     $76 = (($75) + 13724|0); //@line 1179 "emscripten/stb_image.c"
     $77 = (($76) + (($74*56)|0)|0); //@line 1179 "emscripten/stb_image.c"
     $78 = (($77) + 16|0); //@line 1179 "emscripten/stb_image.c"
     $79 = HEAP32[$78>>2]|0; //@line 1179 "emscripten/stb_image.c"
     $80 = ($79|0)>(3); //@line 1179 "emscripten/stb_image.c"
     if ($80) {
      label = 18;
      break;
     }
     $82 = $q; //@line 1180 "emscripten/stb_image.c"
     $83 = $82 & 15; //@line 1180 "emscripten/stb_image.c"
     $84 = $which; //@line 1180 "emscripten/stb_image.c"
     $85 = $1; //@line 1180 "emscripten/stb_image.c"
     $86 = (($85) + 13724|0); //@line 1180 "emscripten/stb_image.c"
     $87 = (($86) + (($84*56)|0)|0); //@line 1180 "emscripten/stb_image.c"
     $88 = (($87) + 20|0); //@line 1180 "emscripten/stb_image.c"
     HEAP32[$88>>2] = $83; //@line 1180 "emscripten/stb_image.c"
     $89 = $which; //@line 1180 "emscripten/stb_image.c"
     $90 = $1; //@line 1180 "emscripten/stb_image.c"
     $91 = (($90) + 13724|0); //@line 1180 "emscripten/stb_image.c"
     $92 = (($91) + (($89*56)|0)|0); //@line 1180 "emscripten/stb_image.c"
     $93 = (($92) + 20|0); //@line 1180 "emscripten/stb_image.c"
     $94 = HEAP32[$93>>2]|0; //@line 1180 "emscripten/stb_image.c"
     $95 = ($94|0)>(3); //@line 1180 "emscripten/stb_image.c"
     if ($95) {
      label = 20;
      break;
     }
     $97 = $which; //@line 1181 "emscripten/stb_image.c"
     $98 = $i; //@line 1181 "emscripten/stb_image.c"
     $99 = $1; //@line 1181 "emscripten/stb_image.c"
     $100 = (($99) + 13968|0); //@line 1181 "emscripten/stb_image.c"
     $101 = (($100) + ($98<<2)|0); //@line 1181 "emscripten/stb_image.c"
     HEAP32[$101>>2] = $97; //@line 1181 "emscripten/stb_image.c"
     $102 = $i; //@line 1172 "emscripten/stb_image.c"
     $103 = (($102) + 1)|0; //@line 1172 "emscripten/stb_image.c"
     $i = $103; //@line 1172 "emscripten/stb_image.c"
    }
    if ((label|0) == 16) {
     $0 = 0; //@line 1178 "emscripten/stb_image.c"
     $116 = $0; //@line 1188 "emscripten/stb_image.c"
     STACKTOP = sp;return ($116|0); //@line 1188 "emscripten/stb_image.c"
    }
    else if ((label|0) == 18) {
     $81 = (__ZL1ePKc(29536)|0); //@line 1179 "emscripten/stb_image.c"
     $0 = $81; //@line 1179 "emscripten/stb_image.c"
     $116 = $0; //@line 1188 "emscripten/stb_image.c"
     STACKTOP = sp;return ($116|0); //@line 1188 "emscripten/stb_image.c"
    }
    else if ((label|0) == 20) {
     $96 = (__ZL1ePKc(29552)|0); //@line 1180 "emscripten/stb_image.c"
     $0 = $96; //@line 1180 "emscripten/stb_image.c"
     $116 = $0; //@line 1188 "emscripten/stb_image.c"
     STACKTOP = sp;return ($116|0); //@line 1188 "emscripten/stb_image.c"
    }
    else if ((label|0) == 23) {
     $104 = $1; //@line 1183 "emscripten/stb_image.c"
     $105 = HEAP32[$104>>2]|0; //@line 1183 "emscripten/stb_image.c"
     $106 = (__ZL4get8P4stbi($105)|0); //@line 1183 "emscripten/stb_image.c"
     $107 = ($106|0)!=(0); //@line 1183 "emscripten/stb_image.c"
     if ($107) {
      $108 = (__ZL1ePKc(29568)|0); //@line 1183 "emscripten/stb_image.c"
      $0 = $108; //@line 1183 "emscripten/stb_image.c"
      $116 = $0; //@line 1188 "emscripten/stb_image.c"
      STACKTOP = sp;return ($116|0); //@line 1188 "emscripten/stb_image.c"
     }
     $109 = $1; //@line 1184 "emscripten/stb_image.c"
     $110 = HEAP32[$109>>2]|0; //@line 1184 "emscripten/stb_image.c"
     (__ZL4get8P4stbi($110)|0); //@line 1184 "emscripten/stb_image.c"
     $111 = $1; //@line 1185 "emscripten/stb_image.c"
     $112 = HEAP32[$111>>2]|0; //@line 1185 "emscripten/stb_image.c"
     $113 = (__ZL4get8P4stbi($112)|0); //@line 1185 "emscripten/stb_image.c"
     $114 = ($113|0)!=(0); //@line 1185 "emscripten/stb_image.c"
     if ($114) {
      $115 = (__ZL1ePKc(29568)|0); //@line 1185 "emscripten/stb_image.c"
      $0 = $115; //@line 1185 "emscripten/stb_image.c"
      $116 = $0; //@line 1188 "emscripten/stb_image.c"
      STACKTOP = sp;return ($116|0); //@line 1188 "emscripten/stb_image.c"
     } else {
      $0 = 1; //@line 1187 "emscripten/stb_image.c"
      $116 = $0; //@line 1188 "emscripten/stb_image.c"
      STACKTOP = sp;return ($116|0); //@line 1188 "emscripten/stb_image.c"
     }
    }
   }
  }
 }
 $26 = (__ZL1ePKc(29496)|0); //@line 1170 "emscripten/stb_image.c"
 $0 = $26; //@line 1170 "emscripten/stb_image.c"
 $116 = $0; //@line 1188 "emscripten/stb_image.c"
 STACKTOP = sp;return ($116|0); //@line 1188 "emscripten/stb_image.c"
}
function __ZL24parse_entropy_coded_dataP4jpeg($z) {
 $z = $z|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $data = 0, $data3 = 0, $h = 0;
 var $i = 0, $i1 = 0, $j = 0, $j2 = 0, $k = 0, $n = 0, $n4 = 0, $w = 0, $x = 0, $x2 = 0, $y = 0, $y2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0;
 $data = sp + 192|0;
 $data3 = sp + 64|0;
 $1 = $z;
 $2 = $1; //@line 1026 "emscripten/stb_image.c"
 __ZL5resetP4jpeg($2); //@line 1026 "emscripten/stb_image.c"
 $3 = $1; //@line 1027 "emscripten/stb_image.c"
 $4 = (($3) + 13964|0); //@line 1027 "emscripten/stb_image.c"
 $5 = HEAP32[$4>>2]|0; //@line 1027 "emscripten/stb_image.c"
 $6 = ($5|0)==(1); //@line 1027 "emscripten/stb_image.c"
 do {
  if ($6) {
   $7 = $1; //@line 1033 "emscripten/stb_image.c"
   $8 = (($7) + 13968|0); //@line 1033 "emscripten/stb_image.c"
   $9 = HEAP32[$8>>2]|0; //@line 1033 "emscripten/stb_image.c"
   $n = $9; //@line 1033 "emscripten/stb_image.c"
   $10 = $n; //@line 1038 "emscripten/stb_image.c"
   $11 = $1; //@line 1038 "emscripten/stb_image.c"
   $12 = (($11) + 13724|0); //@line 1038 "emscripten/stb_image.c"
   $13 = (($12) + (($10*56)|0)|0); //@line 1038 "emscripten/stb_image.c"
   $14 = (($13) + 28|0); //@line 1038 "emscripten/stb_image.c"
   $15 = HEAP32[$14>>2]|0; //@line 1038 "emscripten/stb_image.c"
   $16 = (($15) + 7)|0; //@line 1038 "emscripten/stb_image.c"
   $17 = $16 >> 3; //@line 1038 "emscripten/stb_image.c"
   $w = $17; //@line 1038 "emscripten/stb_image.c"
   $18 = $n; //@line 1039 "emscripten/stb_image.c"
   $19 = $1; //@line 1039 "emscripten/stb_image.c"
   $20 = (($19) + 13724|0); //@line 1039 "emscripten/stb_image.c"
   $21 = (($20) + (($18*56)|0)|0); //@line 1039 "emscripten/stb_image.c"
   $22 = (($21) + 32|0); //@line 1039 "emscripten/stb_image.c"
   $23 = HEAP32[$22>>2]|0; //@line 1039 "emscripten/stb_image.c"
   $24 = (($23) + 7)|0; //@line 1039 "emscripten/stb_image.c"
   $25 = $24 >> 3; //@line 1039 "emscripten/stb_image.c"
   $h = $25; //@line 1039 "emscripten/stb_image.c"
   $j = 0; //@line 1040 "emscripten/stb_image.c"
   L43: while(1) {
    $26 = $j; //@line 1040 "emscripten/stb_image.c"
    $27 = $h; //@line 1040 "emscripten/stb_image.c"
    $28 = ($26|0)<($27|0); //@line 1040 "emscripten/stb_image.c"
    if (!($28)) {
     label = 19;
     break;
    }
    $i = 0; //@line 1041 "emscripten/stb_image.c"
    while(1) {
     $29 = $i; //@line 1041 "emscripten/stb_image.c"
     $30 = $w; //@line 1041 "emscripten/stb_image.c"
     $31 = ($29|0)<($30|0); //@line 1041 "emscripten/stb_image.c"
     if (!($31)) {
      break;
     }
     $32 = $1; //@line 1042 "emscripten/stb_image.c"
     $33 = $1; //@line 1042 "emscripten/stb_image.c"
     $34 = (($33) + 4|0); //@line 1042 "emscripten/stb_image.c"
     $35 = $n; //@line 1042 "emscripten/stb_image.c"
     $36 = $1; //@line 1042 "emscripten/stb_image.c"
     $37 = (($36) + 13724|0); //@line 1042 "emscripten/stb_image.c"
     $38 = (($37) + (($35*56)|0)|0); //@line 1042 "emscripten/stb_image.c"
     $39 = (($38) + 16|0); //@line 1042 "emscripten/stb_image.c"
     $40 = HEAP32[$39>>2]|0; //@line 1042 "emscripten/stb_image.c"
     $41 = (($34) + (($40*1680)|0)|0); //@line 1042 "emscripten/stb_image.c"
     $42 = $1; //@line 1042 "emscripten/stb_image.c"
     $43 = (($42) + 6724|0); //@line 1042 "emscripten/stb_image.c"
     $44 = $n; //@line 1042 "emscripten/stb_image.c"
     $45 = $1; //@line 1042 "emscripten/stb_image.c"
     $46 = (($45) + 13724|0); //@line 1042 "emscripten/stb_image.c"
     $47 = (($46) + (($44*56)|0)|0); //@line 1042 "emscripten/stb_image.c"
     $48 = (($47) + 20|0); //@line 1042 "emscripten/stb_image.c"
     $49 = HEAP32[$48>>2]|0; //@line 1042 "emscripten/stb_image.c"
     $50 = (($43) + (($49*1680)|0)|0); //@line 1042 "emscripten/stb_image.c"
     $51 = $n; //@line 1042 "emscripten/stb_image.c"
     $52 = (__ZL12decode_blockP4jpegPsP7huffmanS3_i($32,$data,$41,$50,$51)|0); //@line 1042 "emscripten/stb_image.c"
     $53 = ($52|0)!=(0); //@line 1042 "emscripten/stb_image.c"
     if (!($53)) {
      label = 7;
      break L43;
     }
     $54 = $n; //@line 1046 "emscripten/stb_image.c"
     $55 = $1; //@line 1046 "emscripten/stb_image.c"
     $56 = (($55) + 13724|0); //@line 1046 "emscripten/stb_image.c"
     $57 = (($56) + (($54*56)|0)|0); //@line 1046 "emscripten/stb_image.c"
     $58 = (($57) + 44|0); //@line 1046 "emscripten/stb_image.c"
     $59 = HEAP32[$58>>2]|0; //@line 1046 "emscripten/stb_image.c"
     $60 = $n; //@line 1046 "emscripten/stb_image.c"
     $61 = $1; //@line 1046 "emscripten/stb_image.c"
     $62 = (($61) + 13724|0); //@line 1046 "emscripten/stb_image.c"
     $63 = (($62) + (($60*56)|0)|0); //@line 1046 "emscripten/stb_image.c"
     $64 = (($63) + 36|0); //@line 1046 "emscripten/stb_image.c"
     $65 = HEAP32[$64>>2]|0; //@line 1046 "emscripten/stb_image.c"
     $66 = $j; //@line 1046 "emscripten/stb_image.c"
     $67 = Math_imul($65, $66)|0; //@line 1046 "emscripten/stb_image.c"
     $68 = $67<<3; //@line 1046 "emscripten/stb_image.c"
     $69 = (($59) + ($68)|0); //@line 1046 "emscripten/stb_image.c"
     $70 = $i; //@line 1046 "emscripten/stb_image.c"
     $71 = $70<<3; //@line 1046 "emscripten/stb_image.c"
     $72 = (($69) + ($71)|0); //@line 1046 "emscripten/stb_image.c"
     $73 = $n; //@line 1046 "emscripten/stb_image.c"
     $74 = $1; //@line 1046 "emscripten/stb_image.c"
     $75 = (($74) + 13724|0); //@line 1046 "emscripten/stb_image.c"
     $76 = (($75) + (($73*56)|0)|0); //@line 1046 "emscripten/stb_image.c"
     $77 = (($76) + 36|0); //@line 1046 "emscripten/stb_image.c"
     $78 = HEAP32[$77>>2]|0; //@line 1046 "emscripten/stb_image.c"
     $79 = $n; //@line 1046 "emscripten/stb_image.c"
     $80 = $1; //@line 1046 "emscripten/stb_image.c"
     $81 = (($80) + 13724|0); //@line 1046 "emscripten/stb_image.c"
     $82 = (($81) + (($79*56)|0)|0); //@line 1046 "emscripten/stb_image.c"
     $83 = (($82) + 12|0); //@line 1046 "emscripten/stb_image.c"
     $84 = HEAP32[$83>>2]|0; //@line 1046 "emscripten/stb_image.c"
     $85 = $1; //@line 1046 "emscripten/stb_image.c"
     $86 = (($85) + 13444|0); //@line 1046 "emscripten/stb_image.c"
     $87 = (($86) + ($84<<6)|0); //@line 1046 "emscripten/stb_image.c"
     __ZL10idct_blockPhiPsS_($72,$78,$data,$87); //@line 1046 "emscripten/stb_image.c"
     $88 = $1; //@line 1049 "emscripten/stb_image.c"
     $89 = (($88) + 13988|0); //@line 1049 "emscripten/stb_image.c"
     $90 = HEAP32[$89>>2]|0; //@line 1049 "emscripten/stb_image.c"
     $91 = (($90) + -1)|0; //@line 1049 "emscripten/stb_image.c"
     HEAP32[$89>>2] = $91; //@line 1049 "emscripten/stb_image.c"
     $92 = ($91|0)<=(0); //@line 1049 "emscripten/stb_image.c"
     if ($92) {
      $93 = $1; //@line 1050 "emscripten/stb_image.c"
      $94 = (($93) + 13952|0); //@line 1050 "emscripten/stb_image.c"
      $95 = HEAP32[$94>>2]|0; //@line 1050 "emscripten/stb_image.c"
      $96 = ($95|0)<(24); //@line 1050 "emscripten/stb_image.c"
      if ($96) {
       $97 = $1; //@line 1050 "emscripten/stb_image.c"
       __ZL18grow_buffer_unsafeP4jpeg($97); //@line 1050 "emscripten/stb_image.c"
      }
      $98 = $1; //@line 1053 "emscripten/stb_image.c"
      $99 = (($98) + 13956|0); //@line 1053 "emscripten/stb_image.c"
      $100 = HEAP8[$99>>0]|0; //@line 1053 "emscripten/stb_image.c"
      $101 = $100&255; //@line 1053 "emscripten/stb_image.c"
      $102 = ($101|0)>=(208); //@line 1053 "emscripten/stb_image.c"
      if (!($102)) {
       label = 13;
       break L43;
      }
      $103 = $1; //@line 1053 "emscripten/stb_image.c"
      $104 = (($103) + 13956|0); //@line 1053 "emscripten/stb_image.c"
      $105 = HEAP8[$104>>0]|0; //@line 1053 "emscripten/stb_image.c"
      $106 = $105&255; //@line 1053 "emscripten/stb_image.c"
      $107 = ($106|0)<=(215); //@line 1053 "emscripten/stb_image.c"
      if (!($107)) {
       label = 13;
       break L43;
      }
      $108 = $1; //@line 1054 "emscripten/stb_image.c"
      __ZL5resetP4jpeg($108); //@line 1054 "emscripten/stb_image.c"
     }
     $109 = $i; //@line 1041 "emscripten/stb_image.c"
     $110 = (($109) + 1)|0; //@line 1041 "emscripten/stb_image.c"
     $i = $110; //@line 1041 "emscripten/stb_image.c"
    }
    $111 = $j; //@line 1040 "emscripten/stb_image.c"
    $112 = (($111) + 1)|0; //@line 1040 "emscripten/stb_image.c"
    $j = $112; //@line 1040 "emscripten/stb_image.c"
   }
   if ((label|0) == 7) {
    $0 = 0; //@line 1042 "emscripten/stb_image.c"
    $256 = $0; //@line 1093 "emscripten/stb_image.c"
    STACKTOP = sp;return ($256|0); //@line 1093 "emscripten/stb_image.c"
   }
   else if ((label|0) == 13) {
    $0 = 1; //@line 1053 "emscripten/stb_image.c"
    $256 = $0; //@line 1093 "emscripten/stb_image.c"
    STACKTOP = sp;return ($256|0); //@line 1093 "emscripten/stb_image.c"
   }
   else if ((label|0) == 19) {
    break;
   }
  } else {
   $j2 = 0; //@line 1061 "emscripten/stb_image.c"
   L3: while(1) {
    $113 = $j2; //@line 1061 "emscripten/stb_image.c"
    $114 = $1; //@line 1061 "emscripten/stb_image.c"
    $115 = (($114) + 13712|0); //@line 1061 "emscripten/stb_image.c"
    $116 = HEAP32[$115>>2]|0; //@line 1061 "emscripten/stb_image.c"
    $117 = ($113|0)<($116|0); //@line 1061 "emscripten/stb_image.c"
    if (!($117)) {
     label = 49;
     break;
    }
    $i1 = 0; //@line 1062 "emscripten/stb_image.c"
    while(1) {
     $118 = $i1; //@line 1062 "emscripten/stb_image.c"
     $119 = $1; //@line 1062 "emscripten/stb_image.c"
     $120 = (($119) + 13708|0); //@line 1062 "emscripten/stb_image.c"
     $121 = HEAP32[$120>>2]|0; //@line 1062 "emscripten/stb_image.c"
     $122 = ($118|0)<($121|0); //@line 1062 "emscripten/stb_image.c"
     if (!($122)) {
      break;
     }
     $k = 0; //@line 1064 "emscripten/stb_image.c"
     while(1) {
      $123 = $k; //@line 1064 "emscripten/stb_image.c"
      $124 = $1; //@line 1064 "emscripten/stb_image.c"
      $125 = (($124) + 13964|0); //@line 1064 "emscripten/stb_image.c"
      $126 = HEAP32[$125>>2]|0; //@line 1064 "emscripten/stb_image.c"
      $127 = ($123|0)<($126|0); //@line 1064 "emscripten/stb_image.c"
      if (!($127)) {
       break;
      }
      $128 = $k; //@line 1065 "emscripten/stb_image.c"
      $129 = $1; //@line 1065 "emscripten/stb_image.c"
      $130 = (($129) + 13968|0); //@line 1065 "emscripten/stb_image.c"
      $131 = (($130) + ($128<<2)|0); //@line 1065 "emscripten/stb_image.c"
      $132 = HEAP32[$131>>2]|0; //@line 1065 "emscripten/stb_image.c"
      $n4 = $132; //@line 1065 "emscripten/stb_image.c"
      $y = 0; //@line 1068 "emscripten/stb_image.c"
      while(1) {
       $133 = $y; //@line 1068 "emscripten/stb_image.c"
       $134 = $n4; //@line 1068 "emscripten/stb_image.c"
       $135 = $1; //@line 1068 "emscripten/stb_image.c"
       $136 = (($135) + 13724|0); //@line 1068 "emscripten/stb_image.c"
       $137 = (($136) + (($134*56)|0)|0); //@line 1068 "emscripten/stb_image.c"
       $138 = (($137) + 8|0); //@line 1068 "emscripten/stb_image.c"
       $139 = HEAP32[$138>>2]|0; //@line 1068 "emscripten/stb_image.c"
       $140 = ($133|0)<($139|0); //@line 1068 "emscripten/stb_image.c"
       if (!($140)) {
        break;
       }
       $x = 0; //@line 1069 "emscripten/stb_image.c"
       while(1) {
        $141 = $x; //@line 1069 "emscripten/stb_image.c"
        $142 = $n4; //@line 1069 "emscripten/stb_image.c"
        $143 = $1; //@line 1069 "emscripten/stb_image.c"
        $144 = (($143) + 13724|0); //@line 1069 "emscripten/stb_image.c"
        $145 = (($144) + (($142*56)|0)|0); //@line 1069 "emscripten/stb_image.c"
        $146 = (($145) + 4|0); //@line 1069 "emscripten/stb_image.c"
        $147 = HEAP32[$146>>2]|0; //@line 1069 "emscripten/stb_image.c"
        $148 = ($141|0)<($147|0); //@line 1069 "emscripten/stb_image.c"
        if (!($148)) {
         break;
        }
        $149 = $i1; //@line 1070 "emscripten/stb_image.c"
        $150 = $n4; //@line 1070 "emscripten/stb_image.c"
        $151 = $1; //@line 1070 "emscripten/stb_image.c"
        $152 = (($151) + 13724|0); //@line 1070 "emscripten/stb_image.c"
        $153 = (($152) + (($150*56)|0)|0); //@line 1070 "emscripten/stb_image.c"
        $154 = (($153) + 4|0); //@line 1070 "emscripten/stb_image.c"
        $155 = HEAP32[$154>>2]|0; //@line 1070 "emscripten/stb_image.c"
        $156 = Math_imul($149, $155)|0; //@line 1070 "emscripten/stb_image.c"
        $157 = $x; //@line 1070 "emscripten/stb_image.c"
        $158 = (($156) + ($157))|0; //@line 1070 "emscripten/stb_image.c"
        $159 = $158<<3; //@line 1070 "emscripten/stb_image.c"
        $x2 = $159; //@line 1070 "emscripten/stb_image.c"
        $160 = $j2; //@line 1071 "emscripten/stb_image.c"
        $161 = $n4; //@line 1071 "emscripten/stb_image.c"
        $162 = $1; //@line 1071 "emscripten/stb_image.c"
        $163 = (($162) + 13724|0); //@line 1071 "emscripten/stb_image.c"
        $164 = (($163) + (($161*56)|0)|0); //@line 1071 "emscripten/stb_image.c"
        $165 = (($164) + 8|0); //@line 1071 "emscripten/stb_image.c"
        $166 = HEAP32[$165>>2]|0; //@line 1071 "emscripten/stb_image.c"
        $167 = Math_imul($160, $166)|0; //@line 1071 "emscripten/stb_image.c"
        $168 = $y; //@line 1071 "emscripten/stb_image.c"
        $169 = (($167) + ($168))|0; //@line 1071 "emscripten/stb_image.c"
        $170 = $169<<3; //@line 1071 "emscripten/stb_image.c"
        $y2 = $170; //@line 1071 "emscripten/stb_image.c"
        $171 = $1; //@line 1072 "emscripten/stb_image.c"
        $172 = $1; //@line 1072 "emscripten/stb_image.c"
        $173 = (($172) + 4|0); //@line 1072 "emscripten/stb_image.c"
        $174 = $n4; //@line 1072 "emscripten/stb_image.c"
        $175 = $1; //@line 1072 "emscripten/stb_image.c"
        $176 = (($175) + 13724|0); //@line 1072 "emscripten/stb_image.c"
        $177 = (($176) + (($174*56)|0)|0); //@line 1072 "emscripten/stb_image.c"
        $178 = (($177) + 16|0); //@line 1072 "emscripten/stb_image.c"
        $179 = HEAP32[$178>>2]|0; //@line 1072 "emscripten/stb_image.c"
        $180 = (($173) + (($179*1680)|0)|0); //@line 1072 "emscripten/stb_image.c"
        $181 = $1; //@line 1072 "emscripten/stb_image.c"
        $182 = (($181) + 6724|0); //@line 1072 "emscripten/stb_image.c"
        $183 = $n4; //@line 1072 "emscripten/stb_image.c"
        $184 = $1; //@line 1072 "emscripten/stb_image.c"
        $185 = (($184) + 13724|0); //@line 1072 "emscripten/stb_image.c"
        $186 = (($185) + (($183*56)|0)|0); //@line 1072 "emscripten/stb_image.c"
        $187 = (($186) + 20|0); //@line 1072 "emscripten/stb_image.c"
        $188 = HEAP32[$187>>2]|0; //@line 1072 "emscripten/stb_image.c"
        $189 = (($182) + (($188*1680)|0)|0); //@line 1072 "emscripten/stb_image.c"
        $190 = $n4; //@line 1072 "emscripten/stb_image.c"
        $191 = (__ZL12decode_blockP4jpegPsP7huffmanS3_i($171,$data3,$180,$189,$190)|0); //@line 1072 "emscripten/stb_image.c"
        $192 = ($191|0)!=(0); //@line 1072 "emscripten/stb_image.c"
        if (!($192)) {
         label = 31;
         break L3;
        }
        $193 = $n4; //@line 1076 "emscripten/stb_image.c"
        $194 = $1; //@line 1076 "emscripten/stb_image.c"
        $195 = (($194) + 13724|0); //@line 1076 "emscripten/stb_image.c"
        $196 = (($195) + (($193*56)|0)|0); //@line 1076 "emscripten/stb_image.c"
        $197 = (($196) + 44|0); //@line 1076 "emscripten/stb_image.c"
        $198 = HEAP32[$197>>2]|0; //@line 1076 "emscripten/stb_image.c"
        $199 = $n4; //@line 1076 "emscripten/stb_image.c"
        $200 = $1; //@line 1076 "emscripten/stb_image.c"
        $201 = (($200) + 13724|0); //@line 1076 "emscripten/stb_image.c"
        $202 = (($201) + (($199*56)|0)|0); //@line 1076 "emscripten/stb_image.c"
        $203 = (($202) + 36|0); //@line 1076 "emscripten/stb_image.c"
        $204 = HEAP32[$203>>2]|0; //@line 1076 "emscripten/stb_image.c"
        $205 = $y2; //@line 1076 "emscripten/stb_image.c"
        $206 = Math_imul($204, $205)|0; //@line 1076 "emscripten/stb_image.c"
        $207 = (($198) + ($206)|0); //@line 1076 "emscripten/stb_image.c"
        $208 = $x2; //@line 1076 "emscripten/stb_image.c"
        $209 = (($207) + ($208)|0); //@line 1076 "emscripten/stb_image.c"
        $210 = $n4; //@line 1076 "emscripten/stb_image.c"
        $211 = $1; //@line 1076 "emscripten/stb_image.c"
        $212 = (($211) + 13724|0); //@line 1076 "emscripten/stb_image.c"
        $213 = (($212) + (($210*56)|0)|0); //@line 1076 "emscripten/stb_image.c"
        $214 = (($213) + 36|0); //@line 1076 "emscripten/stb_image.c"
        $215 = HEAP32[$214>>2]|0; //@line 1076 "emscripten/stb_image.c"
        $216 = $n4; //@line 1076 "emscripten/stb_image.c"
        $217 = $1; //@line 1076 "emscripten/stb_image.c"
        $218 = (($217) + 13724|0); //@line 1076 "emscripten/stb_image.c"
        $219 = (($218) + (($216*56)|0)|0); //@line 1076 "emscripten/stb_image.c"
        $220 = (($219) + 12|0); //@line 1076 "emscripten/stb_image.c"
        $221 = HEAP32[$220>>2]|0; //@line 1076 "emscripten/stb_image.c"
        $222 = $1; //@line 1076 "emscripten/stb_image.c"
        $223 = (($222) + 13444|0); //@line 1076 "emscripten/stb_image.c"
        $224 = (($223) + ($221<<6)|0); //@line 1076 "emscripten/stb_image.c"
        __ZL10idct_blockPhiPsS_($209,$215,$data3,$224); //@line 1076 "emscripten/stb_image.c"
        $225 = $x; //@line 1069 "emscripten/stb_image.c"
        $226 = (($225) + 1)|0; //@line 1069 "emscripten/stb_image.c"
        $x = $226; //@line 1069 "emscripten/stb_image.c"
       }
       $227 = $y; //@line 1068 "emscripten/stb_image.c"
       $228 = (($227) + 1)|0; //@line 1068 "emscripten/stb_image.c"
       $y = $228; //@line 1068 "emscripten/stb_image.c"
      }
      $229 = $k; //@line 1064 "emscripten/stb_image.c"
      $230 = (($229) + 1)|0; //@line 1064 "emscripten/stb_image.c"
      $k = $230; //@line 1064 "emscripten/stb_image.c"
     }
     $231 = $1; //@line 1083 "emscripten/stb_image.c"
     $232 = (($231) + 13988|0); //@line 1083 "emscripten/stb_image.c"
     $233 = HEAP32[$232>>2]|0; //@line 1083 "emscripten/stb_image.c"
     $234 = (($233) + -1)|0; //@line 1083 "emscripten/stb_image.c"
     HEAP32[$232>>2] = $234; //@line 1083 "emscripten/stb_image.c"
     $235 = ($234|0)<=(0); //@line 1083 "emscripten/stb_image.c"
     if ($235) {
      $236 = $1; //@line 1084 "emscripten/stb_image.c"
      $237 = (($236) + 13952|0); //@line 1084 "emscripten/stb_image.c"
      $238 = HEAP32[$237>>2]|0; //@line 1084 "emscripten/stb_image.c"
      $239 = ($238|0)<(24); //@line 1084 "emscripten/stb_image.c"
      if ($239) {
       $240 = $1; //@line 1084 "emscripten/stb_image.c"
       __ZL18grow_buffer_unsafeP4jpeg($240); //@line 1084 "emscripten/stb_image.c"
      }
      $241 = $1; //@line 1087 "emscripten/stb_image.c"
      $242 = (($241) + 13956|0); //@line 1087 "emscripten/stb_image.c"
      $243 = HEAP8[$242>>0]|0; //@line 1087 "emscripten/stb_image.c"
      $244 = $243&255; //@line 1087 "emscripten/stb_image.c"
      $245 = ($244|0)>=(208); //@line 1087 "emscripten/stb_image.c"
      if (!($245)) {
       label = 43;
       break L3;
      }
      $246 = $1; //@line 1087 "emscripten/stb_image.c"
      $247 = (($246) + 13956|0); //@line 1087 "emscripten/stb_image.c"
      $248 = HEAP8[$247>>0]|0; //@line 1087 "emscripten/stb_image.c"
      $249 = $248&255; //@line 1087 "emscripten/stb_image.c"
      $250 = ($249|0)<=(215); //@line 1087 "emscripten/stb_image.c"
      if (!($250)) {
       label = 43;
       break L3;
      }
      $251 = $1; //@line 1088 "emscripten/stb_image.c"
      __ZL5resetP4jpeg($251); //@line 1088 "emscripten/stb_image.c"
     }
     $252 = $i1; //@line 1062 "emscripten/stb_image.c"
     $253 = (($252) + 1)|0; //@line 1062 "emscripten/stb_image.c"
     $i1 = $253; //@line 1062 "emscripten/stb_image.c"
    }
    $254 = $j2; //@line 1061 "emscripten/stb_image.c"
    $255 = (($254) + 1)|0; //@line 1061 "emscripten/stb_image.c"
    $j2 = $255; //@line 1061 "emscripten/stb_image.c"
   }
   if ((label|0) == 31) {
    $0 = 0; //@line 1072 "emscripten/stb_image.c"
    $256 = $0; //@line 1093 "emscripten/stb_image.c"
    STACKTOP = sp;return ($256|0); //@line 1093 "emscripten/stb_image.c"
   }
   else if ((label|0) == 43) {
    $0 = 1; //@line 1087 "emscripten/stb_image.c"
    $256 = $0; //@line 1093 "emscripten/stb_image.c"
    STACKTOP = sp;return ($256|0); //@line 1093 "emscripten/stb_image.c"
   }
   else if ((label|0) == 49) {
    break;
   }
  }
 } while(0);
 $0 = 1; //@line 1093 "emscripten/stb_image.c"
 $256 = $0; //@line 1093 "emscripten/stb_image.c"
 STACKTOP = sp;return ($256|0); //@line 1093 "emscripten/stb_image.c"
}
function __ZL5resetP4jpeg($j) {
 $j = $j|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $j;
 $1 = $0; //@line 1014 "emscripten/stb_image.c"
 $2 = (($1) + 13952|0); //@line 1014 "emscripten/stb_image.c"
 HEAP32[$2>>2] = 0; //@line 1014 "emscripten/stb_image.c"
 $3 = $0; //@line 1015 "emscripten/stb_image.c"
 $4 = (($3) + 13948|0); //@line 1015 "emscripten/stb_image.c"
 HEAP32[$4>>2] = 0; //@line 1015 "emscripten/stb_image.c"
 $5 = $0; //@line 1016 "emscripten/stb_image.c"
 $6 = (($5) + 13960|0); //@line 1016 "emscripten/stb_image.c"
 HEAP32[$6>>2] = 0; //@line 1016 "emscripten/stb_image.c"
 $7 = $0; //@line 1017 "emscripten/stb_image.c"
 $8 = (($7) + 13724|0); //@line 1017 "emscripten/stb_image.c"
 $9 = (($8) + 112|0); //@line 1017 "emscripten/stb_image.c"
 $10 = (($9) + 24|0); //@line 1017 "emscripten/stb_image.c"
 HEAP32[$10>>2] = 0; //@line 1017 "emscripten/stb_image.c"
 $11 = $0; //@line 1017 "emscripten/stb_image.c"
 $12 = (($11) + 13724|0); //@line 1017 "emscripten/stb_image.c"
 $13 = (($12) + 56|0); //@line 1017 "emscripten/stb_image.c"
 $14 = (($13) + 24|0); //@line 1017 "emscripten/stb_image.c"
 HEAP32[$14>>2] = 0; //@line 1017 "emscripten/stb_image.c"
 $15 = $0; //@line 1017 "emscripten/stb_image.c"
 $16 = (($15) + 13724|0); //@line 1017 "emscripten/stb_image.c"
 $17 = (($16) + 24|0); //@line 1017 "emscripten/stb_image.c"
 HEAP32[$17>>2] = 0; //@line 1017 "emscripten/stb_image.c"
 $18 = $0; //@line 1018 "emscripten/stb_image.c"
 $19 = (($18) + 13956|0); //@line 1018 "emscripten/stb_image.c"
 HEAP8[$19>>0] = -1; //@line 1018 "emscripten/stb_image.c"
 $20 = $0; //@line 1019 "emscripten/stb_image.c"
 $21 = (($20) + 13984|0); //@line 1019 "emscripten/stb_image.c"
 $22 = HEAP32[$21>>2]|0; //@line 1019 "emscripten/stb_image.c"
 $23 = ($22|0)!=(0); //@line 1019 "emscripten/stb_image.c"
 if ($23) {
  $24 = $0; //@line 1019 "emscripten/stb_image.c"
  $25 = (($24) + 13984|0); //@line 1019 "emscripten/stb_image.c"
  $26 = HEAP32[$25>>2]|0; //@line 1019 "emscripten/stb_image.c"
  $29 = $26;
  $27 = $0; //@line 1019 "emscripten/stb_image.c"
  $28 = (($27) + 13988|0); //@line 1019 "emscripten/stb_image.c"
  HEAP32[$28>>2] = $29; //@line 1019 "emscripten/stb_image.c"
  STACKTOP = sp;return; //@line 1022 "emscripten/stb_image.c"
 } else {
  $29 = 2147483647;
  $27 = $0; //@line 1019 "emscripten/stb_image.c"
  $28 = (($27) + 13988|0); //@line 1019 "emscripten/stb_image.c"
  HEAP32[$28>>2] = $29; //@line 1019 "emscripten/stb_image.c"
  STACKTOP = sp;return; //@line 1022 "emscripten/stb_image.c"
 }
}
function __ZL12decode_blockP4jpegPsP7huffmanS3_i($j,$data,$hdc,$hac,$b) {
 $j = $j|0;
 $data = $data|0;
 $hdc = $hdc|0;
 $hac = $hac|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $dc = 0, $diff = 0, $k = 0, $r = 0, $rs = 0, $s = 0, $t = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $1 = $j;
 $2 = $data;
 $3 = $hdc;
 $4 = $hac;
 $5 = $b;
 $6 = $1; //@line 831 "emscripten/stb_image.c"
 $7 = $3; //@line 831 "emscripten/stb_image.c"
 $8 = (__ZL6decodeP4jpegP7huffman($6,$7)|0); //@line 831 "emscripten/stb_image.c"
 $t = $8; //@line 831 "emscripten/stb_image.c"
 $9 = $t; //@line 832 "emscripten/stb_image.c"
 $10 = ($9|0)<(0); //@line 832 "emscripten/stb_image.c"
 if ($10) {
  $11 = (__ZL1ePKc(27888)|0); //@line 832 "emscripten/stb_image.c"
  $0 = $11; //@line 832 "emscripten/stb_image.c"
  $68 = $0; //@line 860 "emscripten/stb_image.c"
  STACKTOP = sp;return ($68|0); //@line 860 "emscripten/stb_image.c"
 }
 $12 = $2; //@line 835 "emscripten/stb_image.c"
 dest=$12+0|0; stop=dest+128|0; do { HEAP16[dest>>1]=0|0; dest=dest+2|0; } while ((dest|0) < (stop|0)); //@line 835 "emscripten/stb_image.c"
 $13 = $t; //@line 837 "emscripten/stb_image.c"
 $14 = ($13|0)!=(0); //@line 837 "emscripten/stb_image.c"
 if ($14) {
  $15 = $1; //@line 837 "emscripten/stb_image.c"
  $16 = $t; //@line 837 "emscripten/stb_image.c"
  $17 = (__ZL14extend_receiveP4jpegi($15,$16)|0); //@line 837 "emscripten/stb_image.c"
  $18 = $17;
 } else {
  $18 = 0;
 }
 $diff = $18; //@line 837 "emscripten/stb_image.c"
 $19 = $5; //@line 838 "emscripten/stb_image.c"
 $20 = $1; //@line 838 "emscripten/stb_image.c"
 $21 = (($20) + 13724|0); //@line 838 "emscripten/stb_image.c"
 $22 = (($21) + (($19*56)|0)|0); //@line 838 "emscripten/stb_image.c"
 $23 = (($22) + 24|0); //@line 838 "emscripten/stb_image.c"
 $24 = HEAP32[$23>>2]|0; //@line 838 "emscripten/stb_image.c"
 $25 = $diff; //@line 838 "emscripten/stb_image.c"
 $26 = (($24) + ($25))|0; //@line 838 "emscripten/stb_image.c"
 $dc = $26; //@line 838 "emscripten/stb_image.c"
 $27 = $dc; //@line 839 "emscripten/stb_image.c"
 $28 = $5; //@line 839 "emscripten/stb_image.c"
 $29 = $1; //@line 839 "emscripten/stb_image.c"
 $30 = (($29) + 13724|0); //@line 839 "emscripten/stb_image.c"
 $31 = (($30) + (($28*56)|0)|0); //@line 839 "emscripten/stb_image.c"
 $32 = (($31) + 24|0); //@line 839 "emscripten/stb_image.c"
 HEAP32[$32>>2] = $27; //@line 839 "emscripten/stb_image.c"
 $33 = $dc; //@line 840 "emscripten/stb_image.c"
 $34 = $33&65535; //@line 840 "emscripten/stb_image.c"
 $35 = $2; //@line 840 "emscripten/stb_image.c"
 HEAP16[$35>>1] = $34; //@line 840 "emscripten/stb_image.c"
 $k = 1; //@line 843 "emscripten/stb_image.c"
 while(1) {
  $36 = $1; //@line 846 "emscripten/stb_image.c"
  $37 = $4; //@line 846 "emscripten/stb_image.c"
  $38 = (__ZL6decodeP4jpegP7huffman($36,$37)|0); //@line 846 "emscripten/stb_image.c"
  $rs = $38; //@line 846 "emscripten/stb_image.c"
  $39 = $rs; //@line 847 "emscripten/stb_image.c"
  $40 = ($39|0)<(0); //@line 847 "emscripten/stb_image.c"
  if ($40) {
   label = 8;
   break;
  }
  $42 = $rs; //@line 848 "emscripten/stb_image.c"
  $43 = $42 & 15; //@line 848 "emscripten/stb_image.c"
  $s = $43; //@line 848 "emscripten/stb_image.c"
  $44 = $rs; //@line 849 "emscripten/stb_image.c"
  $45 = $44 >> 4; //@line 849 "emscripten/stb_image.c"
  $r = $45; //@line 849 "emscripten/stb_image.c"
  $46 = $s; //@line 850 "emscripten/stb_image.c"
  $47 = ($46|0)==(0); //@line 850 "emscripten/stb_image.c"
  if ($47) {
   $48 = $rs; //@line 851 "emscripten/stb_image.c"
   $49 = ($48|0)!=(240); //@line 851 "emscripten/stb_image.c"
   if ($49) {
    label = 11;
    break;
   }
   $50 = $k; //@line 852 "emscripten/stb_image.c"
   $51 = (($50) + 16)|0; //@line 852 "emscripten/stb_image.c"
   $k = $51; //@line 852 "emscripten/stb_image.c"
  } else {
   $52 = $r; //@line 854 "emscripten/stb_image.c"
   $53 = $k; //@line 854 "emscripten/stb_image.c"
   $54 = (($53) + ($52))|0; //@line 854 "emscripten/stb_image.c"
   $k = $54; //@line 854 "emscripten/stb_image.c"
   $55 = $1; //@line 856 "emscripten/stb_image.c"
   $56 = $s; //@line 856 "emscripten/stb_image.c"
   $57 = (__ZL14extend_receiveP4jpegi($55,$56)|0); //@line 856 "emscripten/stb_image.c"
   $58 = $57&65535; //@line 856 "emscripten/stb_image.c"
   $59 = $k; //@line 856 "emscripten/stb_image.c"
   $60 = (($59) + 1)|0; //@line 856 "emscripten/stb_image.c"
   $k = $60; //@line 856 "emscripten/stb_image.c"
   $61 = (27344 + ($59)|0); //@line 856 "emscripten/stb_image.c"
   $62 = HEAP8[$61>>0]|0; //@line 856 "emscripten/stb_image.c"
   $63 = $62&255; //@line 856 "emscripten/stb_image.c"
   $64 = $2; //@line 856 "emscripten/stb_image.c"
   $65 = (($64) + ($63<<1)|0); //@line 856 "emscripten/stb_image.c"
   HEAP16[$65>>1] = $58; //@line 856 "emscripten/stb_image.c"
  }
  $66 = $k; //@line 858 "emscripten/stb_image.c"
  $67 = ($66|0)<(64); //@line 858 "emscripten/stb_image.c"
  if (!($67)) {
   break;
  }
 }
 if ((label|0) == 8) {
  $41 = (__ZL1ePKc(27888)|0); //@line 847 "emscripten/stb_image.c"
  $0 = $41; //@line 847 "emscripten/stb_image.c"
  $68 = $0; //@line 860 "emscripten/stb_image.c"
  STACKTOP = sp;return ($68|0); //@line 860 "emscripten/stb_image.c"
 }
 else if ((label|0) == 11) {
 }
 $0 = 1; //@line 859 "emscripten/stb_image.c"
 $68 = $0; //@line 860 "emscripten/stb_image.c"
 STACKTOP = sp;return ($68|0); //@line 860 "emscripten/stb_image.c"
}
function __ZL10idct_blockPhiPsS_($out,$out_stride,$data,$dequantize) {
 $out = $out|0;
 $out_stride = $out_stride|0;
 $data = $data|0;
 $dequantize = $dequantize|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $d = 0, $dcterm = 0, $dq = 0, $i = 0, $o = 0, $p1 = 0, $p15 = 0, $p2 = 0;
 var $p26 = 0, $p3 = 0, $p37 = 0, $p4 = 0, $p48 = 0, $p5 = 0, $p59 = 0, $t0 = 0, $t01 = 0, $t1 = 0, $t12 = 0, $t2 = 0, $t23 = 0, $t3 = 0, $t34 = 0, $v = 0, $val = 0, $x0 = 0, $x010 = 0, $x1 = 0;
 var $x111 = 0, $x2 = 0, $x212 = 0, $x3 = 0, $x313 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416|0;
 $val = sp + 128|0;
 $0 = $out;
 $1 = $out_stride;
 $2 = $data;
 $3 = $dequantize;
 $v = $val; //@line 923 "emscripten/stb_image.c"
 $4 = $3; //@line 924 "emscripten/stb_image.c"
 $dq = $4; //@line 924 "emscripten/stb_image.c"
 $5 = $2; //@line 926 "emscripten/stb_image.c"
 $d = $5; //@line 926 "emscripten/stb_image.c"
 $i = 0; //@line 929 "emscripten/stb_image.c"
 while(1) {
  $6 = $i; //@line 929 "emscripten/stb_image.c"
  $7 = ($6|0)<(8); //@line 929 "emscripten/stb_image.c"
  if (!($7)) {
   break;
  }
  $8 = $d; //@line 931 "emscripten/stb_image.c"
  $9 = (($8) + 16|0); //@line 931 "emscripten/stb_image.c"
  $10 = HEAP16[$9>>1]|0; //@line 931 "emscripten/stb_image.c"
  $11 = $10 << 16 >> 16; //@line 931 "emscripten/stb_image.c"
  $12 = ($11|0)==(0); //@line 931 "emscripten/stb_image.c"
  if ($12) {
   $13 = $d; //@line 931 "emscripten/stb_image.c"
   $14 = (($13) + 32|0); //@line 931 "emscripten/stb_image.c"
   $15 = HEAP16[$14>>1]|0; //@line 931 "emscripten/stb_image.c"
   $16 = $15 << 16 >> 16; //@line 931 "emscripten/stb_image.c"
   $17 = ($16|0)==(0); //@line 931 "emscripten/stb_image.c"
   if ($17) {
    $18 = $d; //@line 931 "emscripten/stb_image.c"
    $19 = (($18) + 48|0); //@line 931 "emscripten/stb_image.c"
    $20 = HEAP16[$19>>1]|0; //@line 931 "emscripten/stb_image.c"
    $21 = $20 << 16 >> 16; //@line 931 "emscripten/stb_image.c"
    $22 = ($21|0)==(0); //@line 931 "emscripten/stb_image.c"
    if ($22) {
     $23 = $d; //@line 931 "emscripten/stb_image.c"
     $24 = (($23) + 64|0); //@line 931 "emscripten/stb_image.c"
     $25 = HEAP16[$24>>1]|0; //@line 931 "emscripten/stb_image.c"
     $26 = $25 << 16 >> 16; //@line 931 "emscripten/stb_image.c"
     $27 = ($26|0)==(0); //@line 931 "emscripten/stb_image.c"
     if ($27) {
      $28 = $d; //@line 931 "emscripten/stb_image.c"
      $29 = (($28) + 80|0); //@line 931 "emscripten/stb_image.c"
      $30 = HEAP16[$29>>1]|0; //@line 931 "emscripten/stb_image.c"
      $31 = $30 << 16 >> 16; //@line 931 "emscripten/stb_image.c"
      $32 = ($31|0)==(0); //@line 931 "emscripten/stb_image.c"
      if ($32) {
       $33 = $d; //@line 931 "emscripten/stb_image.c"
       $34 = (($33) + 96|0); //@line 931 "emscripten/stb_image.c"
       $35 = HEAP16[$34>>1]|0; //@line 931 "emscripten/stb_image.c"
       $36 = $35 << 16 >> 16; //@line 931 "emscripten/stb_image.c"
       $37 = ($36|0)==(0); //@line 931 "emscripten/stb_image.c"
       if ($37) {
        $38 = $d; //@line 931 "emscripten/stb_image.c"
        $39 = (($38) + 112|0); //@line 931 "emscripten/stb_image.c"
        $40 = HEAP16[$39>>1]|0; //@line 931 "emscripten/stb_image.c"
        $41 = $40 << 16 >> 16; //@line 931 "emscripten/stb_image.c"
        $42 = ($41|0)==(0); //@line 931 "emscripten/stb_image.c"
        if ($42) {
         $43 = $d; //@line 937 "emscripten/stb_image.c"
         $44 = HEAP16[$43>>1]|0; //@line 937 "emscripten/stb_image.c"
         $45 = $44 << 16 >> 16; //@line 937 "emscripten/stb_image.c"
         $46 = $dq; //@line 937 "emscripten/stb_image.c"
         $47 = HEAP8[$46>>0]|0; //@line 937 "emscripten/stb_image.c"
         $48 = $47&255; //@line 937 "emscripten/stb_image.c"
         $49 = Math_imul($45, $48)|0; //@line 937 "emscripten/stb_image.c"
         $50 = $49 << 2; //@line 937 "emscripten/stb_image.c"
         $dcterm = $50; //@line 937 "emscripten/stb_image.c"
         $51 = $dcterm; //@line 938 "emscripten/stb_image.c"
         $52 = $v; //@line 938 "emscripten/stb_image.c"
         $53 = (($52) + 224|0); //@line 938 "emscripten/stb_image.c"
         HEAP32[$53>>2] = $51; //@line 938 "emscripten/stb_image.c"
         $54 = $v; //@line 938 "emscripten/stb_image.c"
         $55 = (($54) + 192|0); //@line 938 "emscripten/stb_image.c"
         HEAP32[$55>>2] = $51; //@line 938 "emscripten/stb_image.c"
         $56 = $v; //@line 938 "emscripten/stb_image.c"
         $57 = (($56) + 160|0); //@line 938 "emscripten/stb_image.c"
         HEAP32[$57>>2] = $51; //@line 938 "emscripten/stb_image.c"
         $58 = $v; //@line 938 "emscripten/stb_image.c"
         $59 = (($58) + 128|0); //@line 938 "emscripten/stb_image.c"
         HEAP32[$59>>2] = $51; //@line 938 "emscripten/stb_image.c"
         $60 = $v; //@line 938 "emscripten/stb_image.c"
         $61 = (($60) + 96|0); //@line 938 "emscripten/stb_image.c"
         HEAP32[$61>>2] = $51; //@line 938 "emscripten/stb_image.c"
         $62 = $v; //@line 938 "emscripten/stb_image.c"
         $63 = (($62) + 64|0); //@line 938 "emscripten/stb_image.c"
         HEAP32[$63>>2] = $51; //@line 938 "emscripten/stb_image.c"
         $64 = $v; //@line 938 "emscripten/stb_image.c"
         $65 = (($64) + 32|0); //@line 938 "emscripten/stb_image.c"
         HEAP32[$65>>2] = $51; //@line 938 "emscripten/stb_image.c"
         $66 = $v; //@line 938 "emscripten/stb_image.c"
         HEAP32[$66>>2] = $51; //@line 938 "emscripten/stb_image.c"
        } else {
         label = 11;
        }
       } else {
        label = 11;
       }
      } else {
       label = 11;
      }
     } else {
      label = 11;
     }
    } else {
     label = 11;
    }
   } else {
    label = 11;
   }
  } else {
   label = 11;
  }
  if ((label|0) == 11) {
   label = 0;
   $67 = $d; //@line 940 "emscripten/stb_image.c"
   $68 = (($67) + 32|0); //@line 940 "emscripten/stb_image.c"
   $69 = HEAP16[$68>>1]|0; //@line 940 "emscripten/stb_image.c"
   $70 = $69 << 16 >> 16; //@line 940 "emscripten/stb_image.c"
   $71 = $dq; //@line 940 "emscripten/stb_image.c"
   $72 = (($71) + 16|0); //@line 940 "emscripten/stb_image.c"
   $73 = HEAP8[$72>>0]|0; //@line 940 "emscripten/stb_image.c"
   $74 = $73&255; //@line 940 "emscripten/stb_image.c"
   $75 = Math_imul($70, $74)|0; //@line 940 "emscripten/stb_image.c"
   $p2 = $75; //@line 940 "emscripten/stb_image.c"
   $76 = $d; //@line 940 "emscripten/stb_image.c"
   $77 = (($76) + 96|0); //@line 940 "emscripten/stb_image.c"
   $78 = HEAP16[$77>>1]|0; //@line 940 "emscripten/stb_image.c"
   $79 = $78 << 16 >> 16; //@line 940 "emscripten/stb_image.c"
   $80 = $dq; //@line 940 "emscripten/stb_image.c"
   $81 = (($80) + 48|0); //@line 940 "emscripten/stb_image.c"
   $82 = HEAP8[$81>>0]|0; //@line 940 "emscripten/stb_image.c"
   $83 = $82&255; //@line 940 "emscripten/stb_image.c"
   $84 = Math_imul($79, $83)|0; //@line 940 "emscripten/stb_image.c"
   $p3 = $84; //@line 940 "emscripten/stb_image.c"
   $85 = $p2; //@line 940 "emscripten/stb_image.c"
   $86 = $p3; //@line 940 "emscripten/stb_image.c"
   $87 = (($85) + ($86))|0; //@line 940 "emscripten/stb_image.c"
   $88 = ($87*2217)|0; //@line 940 "emscripten/stb_image.c"
   $p1 = $88; //@line 940 "emscripten/stb_image.c"
   $89 = $p1; //@line 940 "emscripten/stb_image.c"
   $90 = $p3; //@line 940 "emscripten/stb_image.c"
   $91 = Math_imul($90, -7567)|0; //@line 940 "emscripten/stb_image.c"
   $92 = (($89) + ($91))|0; //@line 940 "emscripten/stb_image.c"
   $t2 = $92; //@line 940 "emscripten/stb_image.c"
   $93 = $p1; //@line 940 "emscripten/stb_image.c"
   $94 = $p2; //@line 940 "emscripten/stb_image.c"
   $95 = ($94*3135)|0; //@line 940 "emscripten/stb_image.c"
   $96 = (($93) + ($95))|0; //@line 940 "emscripten/stb_image.c"
   $t3 = $96; //@line 940 "emscripten/stb_image.c"
   $97 = $d; //@line 940 "emscripten/stb_image.c"
   $98 = HEAP16[$97>>1]|0; //@line 940 "emscripten/stb_image.c"
   $99 = $98 << 16 >> 16; //@line 940 "emscripten/stb_image.c"
   $100 = $dq; //@line 940 "emscripten/stb_image.c"
   $101 = HEAP8[$100>>0]|0; //@line 940 "emscripten/stb_image.c"
   $102 = $101&255; //@line 940 "emscripten/stb_image.c"
   $103 = Math_imul($99, $102)|0; //@line 940 "emscripten/stb_image.c"
   $p2 = $103; //@line 940 "emscripten/stb_image.c"
   $104 = $d; //@line 940 "emscripten/stb_image.c"
   $105 = (($104) + 64|0); //@line 940 "emscripten/stb_image.c"
   $106 = HEAP16[$105>>1]|0; //@line 940 "emscripten/stb_image.c"
   $107 = $106 << 16 >> 16; //@line 940 "emscripten/stb_image.c"
   $108 = $dq; //@line 940 "emscripten/stb_image.c"
   $109 = (($108) + 32|0); //@line 940 "emscripten/stb_image.c"
   $110 = HEAP8[$109>>0]|0; //@line 940 "emscripten/stb_image.c"
   $111 = $110&255; //@line 940 "emscripten/stb_image.c"
   $112 = Math_imul($107, $111)|0; //@line 940 "emscripten/stb_image.c"
   $p3 = $112; //@line 940 "emscripten/stb_image.c"
   $113 = $p2; //@line 940 "emscripten/stb_image.c"
   $114 = $p3; //@line 940 "emscripten/stb_image.c"
   $115 = (($113) + ($114))|0; //@line 940 "emscripten/stb_image.c"
   $116 = $115 << 12; //@line 940 "emscripten/stb_image.c"
   $t0 = $116; //@line 940 "emscripten/stb_image.c"
   $117 = $p2; //@line 940 "emscripten/stb_image.c"
   $118 = $p3; //@line 940 "emscripten/stb_image.c"
   $119 = (($117) - ($118))|0; //@line 940 "emscripten/stb_image.c"
   $120 = $119 << 12; //@line 940 "emscripten/stb_image.c"
   $t1 = $120; //@line 940 "emscripten/stb_image.c"
   $121 = $t0; //@line 940 "emscripten/stb_image.c"
   $122 = $t3; //@line 940 "emscripten/stb_image.c"
   $123 = (($121) + ($122))|0; //@line 940 "emscripten/stb_image.c"
   $x0 = $123; //@line 940 "emscripten/stb_image.c"
   $124 = $t0; //@line 940 "emscripten/stb_image.c"
   $125 = $t3; //@line 940 "emscripten/stb_image.c"
   $126 = (($124) - ($125))|0; //@line 940 "emscripten/stb_image.c"
   $x3 = $126; //@line 940 "emscripten/stb_image.c"
   $127 = $t1; //@line 940 "emscripten/stb_image.c"
   $128 = $t2; //@line 940 "emscripten/stb_image.c"
   $129 = (($127) + ($128))|0; //@line 940 "emscripten/stb_image.c"
   $x1 = $129; //@line 940 "emscripten/stb_image.c"
   $130 = $t1; //@line 940 "emscripten/stb_image.c"
   $131 = $t2; //@line 940 "emscripten/stb_image.c"
   $132 = (($130) - ($131))|0; //@line 940 "emscripten/stb_image.c"
   $x2 = $132; //@line 940 "emscripten/stb_image.c"
   $133 = $d; //@line 940 "emscripten/stb_image.c"
   $134 = (($133) + 112|0); //@line 940 "emscripten/stb_image.c"
   $135 = HEAP16[$134>>1]|0; //@line 940 "emscripten/stb_image.c"
   $136 = $135 << 16 >> 16; //@line 940 "emscripten/stb_image.c"
   $137 = $dq; //@line 940 "emscripten/stb_image.c"
   $138 = (($137) + 56|0); //@line 940 "emscripten/stb_image.c"
   $139 = HEAP8[$138>>0]|0; //@line 940 "emscripten/stb_image.c"
   $140 = $139&255; //@line 940 "emscripten/stb_image.c"
   $141 = Math_imul($136, $140)|0; //@line 940 "emscripten/stb_image.c"
   $t0 = $141; //@line 940 "emscripten/stb_image.c"
   $142 = $d; //@line 940 "emscripten/stb_image.c"
   $143 = (($142) + 80|0); //@line 940 "emscripten/stb_image.c"
   $144 = HEAP16[$143>>1]|0; //@line 940 "emscripten/stb_image.c"
   $145 = $144 << 16 >> 16; //@line 940 "emscripten/stb_image.c"
   $146 = $dq; //@line 940 "emscripten/stb_image.c"
   $147 = (($146) + 40|0); //@line 940 "emscripten/stb_image.c"
   $148 = HEAP8[$147>>0]|0; //@line 940 "emscripten/stb_image.c"
   $149 = $148&255; //@line 940 "emscripten/stb_image.c"
   $150 = Math_imul($145, $149)|0; //@line 940 "emscripten/stb_image.c"
   $t1 = $150; //@line 940 "emscripten/stb_image.c"
   $151 = $d; //@line 940 "emscripten/stb_image.c"
   $152 = (($151) + 48|0); //@line 940 "emscripten/stb_image.c"
   $153 = HEAP16[$152>>1]|0; //@line 940 "emscripten/stb_image.c"
   $154 = $153 << 16 >> 16; //@line 940 "emscripten/stb_image.c"
   $155 = $dq; //@line 940 "emscripten/stb_image.c"
   $156 = (($155) + 24|0); //@line 940 "emscripten/stb_image.c"
   $157 = HEAP8[$156>>0]|0; //@line 940 "emscripten/stb_image.c"
   $158 = $157&255; //@line 940 "emscripten/stb_image.c"
   $159 = Math_imul($154, $158)|0; //@line 940 "emscripten/stb_image.c"
   $t2 = $159; //@line 940 "emscripten/stb_image.c"
   $160 = $d; //@line 940 "emscripten/stb_image.c"
   $161 = (($160) + 16|0); //@line 940 "emscripten/stb_image.c"
   $162 = HEAP16[$161>>1]|0; //@line 940 "emscripten/stb_image.c"
   $163 = $162 << 16 >> 16; //@line 940 "emscripten/stb_image.c"
   $164 = $dq; //@line 940 "emscripten/stb_image.c"
   $165 = (($164) + 8|0); //@line 940 "emscripten/stb_image.c"
   $166 = HEAP8[$165>>0]|0; //@line 940 "emscripten/stb_image.c"
   $167 = $166&255; //@line 940 "emscripten/stb_image.c"
   $168 = Math_imul($163, $167)|0; //@line 940 "emscripten/stb_image.c"
   $t3 = $168; //@line 940 "emscripten/stb_image.c"
   $169 = $t0; //@line 940 "emscripten/stb_image.c"
   $170 = $t2; //@line 940 "emscripten/stb_image.c"
   $171 = (($169) + ($170))|0; //@line 940 "emscripten/stb_image.c"
   $p3 = $171; //@line 940 "emscripten/stb_image.c"
   $172 = $t1; //@line 940 "emscripten/stb_image.c"
   $173 = $t3; //@line 940 "emscripten/stb_image.c"
   $174 = (($172) + ($173))|0; //@line 940 "emscripten/stb_image.c"
   $p4 = $174; //@line 940 "emscripten/stb_image.c"
   $175 = $t0; //@line 940 "emscripten/stb_image.c"
   $176 = $t3; //@line 940 "emscripten/stb_image.c"
   $177 = (($175) + ($176))|0; //@line 940 "emscripten/stb_image.c"
   $p1 = $177; //@line 940 "emscripten/stb_image.c"
   $178 = $t1; //@line 940 "emscripten/stb_image.c"
   $179 = $t2; //@line 940 "emscripten/stb_image.c"
   $180 = (($178) + ($179))|0; //@line 940 "emscripten/stb_image.c"
   $p2 = $180; //@line 940 "emscripten/stb_image.c"
   $181 = $p3; //@line 940 "emscripten/stb_image.c"
   $182 = $p4; //@line 940 "emscripten/stb_image.c"
   $183 = (($181) + ($182))|0; //@line 940 "emscripten/stb_image.c"
   $184 = ($183*4816)|0; //@line 940 "emscripten/stb_image.c"
   $p5 = $184; //@line 940 "emscripten/stb_image.c"
   $185 = $t0; //@line 940 "emscripten/stb_image.c"
   $186 = ($185*1223)|0; //@line 940 "emscripten/stb_image.c"
   $t0 = $186; //@line 940 "emscripten/stb_image.c"
   $187 = $t1; //@line 940 "emscripten/stb_image.c"
   $188 = ($187*8410)|0; //@line 940 "emscripten/stb_image.c"
   $t1 = $188; //@line 940 "emscripten/stb_image.c"
   $189 = $t2; //@line 940 "emscripten/stb_image.c"
   $190 = ($189*12586)|0; //@line 940 "emscripten/stb_image.c"
   $t2 = $190; //@line 940 "emscripten/stb_image.c"
   $191 = $t3; //@line 940 "emscripten/stb_image.c"
   $192 = ($191*6149)|0; //@line 940 "emscripten/stb_image.c"
   $t3 = $192; //@line 940 "emscripten/stb_image.c"
   $193 = $p5; //@line 940 "emscripten/stb_image.c"
   $194 = $p1; //@line 940 "emscripten/stb_image.c"
   $195 = Math_imul($194, -3685)|0; //@line 940 "emscripten/stb_image.c"
   $196 = (($193) + ($195))|0; //@line 940 "emscripten/stb_image.c"
   $p1 = $196; //@line 940 "emscripten/stb_image.c"
   $197 = $p5; //@line 940 "emscripten/stb_image.c"
   $198 = $p2; //@line 940 "emscripten/stb_image.c"
   $199 = Math_imul($198, -10497)|0; //@line 940 "emscripten/stb_image.c"
   $200 = (($197) + ($199))|0; //@line 940 "emscripten/stb_image.c"
   $p2 = $200; //@line 940 "emscripten/stb_image.c"
   $201 = $p3; //@line 940 "emscripten/stb_image.c"
   $202 = Math_imul($201, -8034)|0; //@line 940 "emscripten/stb_image.c"
   $p3 = $202; //@line 940 "emscripten/stb_image.c"
   $203 = $p4; //@line 940 "emscripten/stb_image.c"
   $204 = Math_imul($203, -1597)|0; //@line 940 "emscripten/stb_image.c"
   $p4 = $204; //@line 940 "emscripten/stb_image.c"
   $205 = $p1; //@line 940 "emscripten/stb_image.c"
   $206 = $p4; //@line 940 "emscripten/stb_image.c"
   $207 = (($205) + ($206))|0; //@line 940 "emscripten/stb_image.c"
   $208 = $t3; //@line 940 "emscripten/stb_image.c"
   $209 = (($208) + ($207))|0; //@line 940 "emscripten/stb_image.c"
   $t3 = $209; //@line 940 "emscripten/stb_image.c"
   $210 = $p2; //@line 940 "emscripten/stb_image.c"
   $211 = $p3; //@line 940 "emscripten/stb_image.c"
   $212 = (($210) + ($211))|0; //@line 940 "emscripten/stb_image.c"
   $213 = $t2; //@line 940 "emscripten/stb_image.c"
   $214 = (($213) + ($212))|0; //@line 940 "emscripten/stb_image.c"
   $t2 = $214; //@line 940 "emscripten/stb_image.c"
   $215 = $p2; //@line 940 "emscripten/stb_image.c"
   $216 = $p4; //@line 940 "emscripten/stb_image.c"
   $217 = (($215) + ($216))|0; //@line 940 "emscripten/stb_image.c"
   $218 = $t1; //@line 940 "emscripten/stb_image.c"
   $219 = (($218) + ($217))|0; //@line 940 "emscripten/stb_image.c"
   $t1 = $219; //@line 940 "emscripten/stb_image.c"
   $220 = $p1; //@line 940 "emscripten/stb_image.c"
   $221 = $p3; //@line 940 "emscripten/stb_image.c"
   $222 = (($220) + ($221))|0; //@line 940 "emscripten/stb_image.c"
   $223 = $t0; //@line 940 "emscripten/stb_image.c"
   $224 = (($223) + ($222))|0; //@line 940 "emscripten/stb_image.c"
   $t0 = $224; //@line 940 "emscripten/stb_image.c"
   $225 = $x0; //@line 944 "emscripten/stb_image.c"
   $226 = (($225) + 512)|0; //@line 944 "emscripten/stb_image.c"
   $x0 = $226; //@line 944 "emscripten/stb_image.c"
   $227 = $x1; //@line 944 "emscripten/stb_image.c"
   $228 = (($227) + 512)|0; //@line 944 "emscripten/stb_image.c"
   $x1 = $228; //@line 944 "emscripten/stb_image.c"
   $229 = $x2; //@line 944 "emscripten/stb_image.c"
   $230 = (($229) + 512)|0; //@line 944 "emscripten/stb_image.c"
   $x2 = $230; //@line 944 "emscripten/stb_image.c"
   $231 = $x3; //@line 944 "emscripten/stb_image.c"
   $232 = (($231) + 512)|0; //@line 944 "emscripten/stb_image.c"
   $x3 = $232; //@line 944 "emscripten/stb_image.c"
   $233 = $x0; //@line 945 "emscripten/stb_image.c"
   $234 = $t3; //@line 945 "emscripten/stb_image.c"
   $235 = (($233) + ($234))|0; //@line 945 "emscripten/stb_image.c"
   $236 = $235 >> 10; //@line 945 "emscripten/stb_image.c"
   $237 = $v; //@line 945 "emscripten/stb_image.c"
   HEAP32[$237>>2] = $236; //@line 945 "emscripten/stb_image.c"
   $238 = $x0; //@line 946 "emscripten/stb_image.c"
   $239 = $t3; //@line 946 "emscripten/stb_image.c"
   $240 = (($238) - ($239))|0; //@line 946 "emscripten/stb_image.c"
   $241 = $240 >> 10; //@line 946 "emscripten/stb_image.c"
   $242 = $v; //@line 946 "emscripten/stb_image.c"
   $243 = (($242) + 224|0); //@line 946 "emscripten/stb_image.c"
   HEAP32[$243>>2] = $241; //@line 946 "emscripten/stb_image.c"
   $244 = $x1; //@line 947 "emscripten/stb_image.c"
   $245 = $t2; //@line 947 "emscripten/stb_image.c"
   $246 = (($244) + ($245))|0; //@line 947 "emscripten/stb_image.c"
   $247 = $246 >> 10; //@line 947 "emscripten/stb_image.c"
   $248 = $v; //@line 947 "emscripten/stb_image.c"
   $249 = (($248) + 32|0); //@line 947 "emscripten/stb_image.c"
   HEAP32[$249>>2] = $247; //@line 947 "emscripten/stb_image.c"
   $250 = $x1; //@line 948 "emscripten/stb_image.c"
   $251 = $t2; //@line 948 "emscripten/stb_image.c"
   $252 = (($250) - ($251))|0; //@line 948 "emscripten/stb_image.c"
   $253 = $252 >> 10; //@line 948 "emscripten/stb_image.c"
   $254 = $v; //@line 948 "emscripten/stb_image.c"
   $255 = (($254) + 192|0); //@line 948 "emscripten/stb_image.c"
   HEAP32[$255>>2] = $253; //@line 948 "emscripten/stb_image.c"
   $256 = $x2; //@line 949 "emscripten/stb_image.c"
   $257 = $t1; //@line 949 "emscripten/stb_image.c"
   $258 = (($256) + ($257))|0; //@line 949 "emscripten/stb_image.c"
   $259 = $258 >> 10; //@line 949 "emscripten/stb_image.c"
   $260 = $v; //@line 949 "emscripten/stb_image.c"
   $261 = (($260) + 64|0); //@line 949 "emscripten/stb_image.c"
   HEAP32[$261>>2] = $259; //@line 949 "emscripten/stb_image.c"
   $262 = $x2; //@line 950 "emscripten/stb_image.c"
   $263 = $t1; //@line 950 "emscripten/stb_image.c"
   $264 = (($262) - ($263))|0; //@line 950 "emscripten/stb_image.c"
   $265 = $264 >> 10; //@line 950 "emscripten/stb_image.c"
   $266 = $v; //@line 950 "emscripten/stb_image.c"
   $267 = (($266) + 160|0); //@line 950 "emscripten/stb_image.c"
   HEAP32[$267>>2] = $265; //@line 950 "emscripten/stb_image.c"
   $268 = $x3; //@line 951 "emscripten/stb_image.c"
   $269 = $t0; //@line 951 "emscripten/stb_image.c"
   $270 = (($268) + ($269))|0; //@line 951 "emscripten/stb_image.c"
   $271 = $270 >> 10; //@line 951 "emscripten/stb_image.c"
   $272 = $v; //@line 951 "emscripten/stb_image.c"
   $273 = (($272) + 96|0); //@line 951 "emscripten/stb_image.c"
   HEAP32[$273>>2] = $271; //@line 951 "emscripten/stb_image.c"
   $274 = $x3; //@line 952 "emscripten/stb_image.c"
   $275 = $t0; //@line 952 "emscripten/stb_image.c"
   $276 = (($274) - ($275))|0; //@line 952 "emscripten/stb_image.c"
   $277 = $276 >> 10; //@line 952 "emscripten/stb_image.c"
   $278 = $v; //@line 952 "emscripten/stb_image.c"
   $279 = (($278) + 128|0); //@line 952 "emscripten/stb_image.c"
   HEAP32[$279>>2] = $277; //@line 952 "emscripten/stb_image.c"
  }
  $280 = $i; //@line 929 "emscripten/stb_image.c"
  $281 = (($280) + 1)|0; //@line 929 "emscripten/stb_image.c"
  $i = $281; //@line 929 "emscripten/stb_image.c"
  $282 = $d; //@line 929 "emscripten/stb_image.c"
  $283 = (($282) + 2|0); //@line 929 "emscripten/stb_image.c"
  $d = $283; //@line 929 "emscripten/stb_image.c"
  $284 = $dq; //@line 929 "emscripten/stb_image.c"
  $285 = (($284) + 1|0); //@line 929 "emscripten/stb_image.c"
  $dq = $285; //@line 929 "emscripten/stb_image.c"
  $286 = $v; //@line 929 "emscripten/stb_image.c"
  $287 = (($286) + 4|0); //@line 929 "emscripten/stb_image.c"
  $v = $287; //@line 929 "emscripten/stb_image.c"
 }
 $i = 0; //@line 956 "emscripten/stb_image.c"
 $v = $val; //@line 956 "emscripten/stb_image.c"
 $288 = $0; //@line 956 "emscripten/stb_image.c"
 $o = $288; //@line 956 "emscripten/stb_image.c"
 while(1) {
  $289 = $i; //@line 956 "emscripten/stb_image.c"
  $290 = ($289|0)<(8); //@line 956 "emscripten/stb_image.c"
  if (!($290)) {
   break;
  }
  $291 = $v; //@line 958 "emscripten/stb_image.c"
  $292 = (($291) + 8|0); //@line 958 "emscripten/stb_image.c"
  $293 = HEAP32[$292>>2]|0; //@line 958 "emscripten/stb_image.c"
  $p26 = $293; //@line 958 "emscripten/stb_image.c"
  $294 = $v; //@line 958 "emscripten/stb_image.c"
  $295 = (($294) + 24|0); //@line 958 "emscripten/stb_image.c"
  $296 = HEAP32[$295>>2]|0; //@line 958 "emscripten/stb_image.c"
  $p37 = $296; //@line 958 "emscripten/stb_image.c"
  $297 = $p26; //@line 958 "emscripten/stb_image.c"
  $298 = $p37; //@line 958 "emscripten/stb_image.c"
  $299 = (($297) + ($298))|0; //@line 958 "emscripten/stb_image.c"
  $300 = ($299*2217)|0; //@line 958 "emscripten/stb_image.c"
  $p15 = $300; //@line 958 "emscripten/stb_image.c"
  $301 = $p15; //@line 958 "emscripten/stb_image.c"
  $302 = $p37; //@line 958 "emscripten/stb_image.c"
  $303 = Math_imul($302, -7567)|0; //@line 958 "emscripten/stb_image.c"
  $304 = (($301) + ($303))|0; //@line 958 "emscripten/stb_image.c"
  $t23 = $304; //@line 958 "emscripten/stb_image.c"
  $305 = $p15; //@line 958 "emscripten/stb_image.c"
  $306 = $p26; //@line 958 "emscripten/stb_image.c"
  $307 = ($306*3135)|0; //@line 958 "emscripten/stb_image.c"
  $308 = (($305) + ($307))|0; //@line 958 "emscripten/stb_image.c"
  $t34 = $308; //@line 958 "emscripten/stb_image.c"
  $309 = $v; //@line 958 "emscripten/stb_image.c"
  $310 = HEAP32[$309>>2]|0; //@line 958 "emscripten/stb_image.c"
  $p26 = $310; //@line 958 "emscripten/stb_image.c"
  $311 = $v; //@line 958 "emscripten/stb_image.c"
  $312 = (($311) + 16|0); //@line 958 "emscripten/stb_image.c"
  $313 = HEAP32[$312>>2]|0; //@line 958 "emscripten/stb_image.c"
  $p37 = $313; //@line 958 "emscripten/stb_image.c"
  $314 = $p26; //@line 958 "emscripten/stb_image.c"
  $315 = $p37; //@line 958 "emscripten/stb_image.c"
  $316 = (($314) + ($315))|0; //@line 958 "emscripten/stb_image.c"
  $317 = $316 << 12; //@line 958 "emscripten/stb_image.c"
  $t01 = $317; //@line 958 "emscripten/stb_image.c"
  $318 = $p26; //@line 958 "emscripten/stb_image.c"
  $319 = $p37; //@line 958 "emscripten/stb_image.c"
  $320 = (($318) - ($319))|0; //@line 958 "emscripten/stb_image.c"
  $321 = $320 << 12; //@line 958 "emscripten/stb_image.c"
  $t12 = $321; //@line 958 "emscripten/stb_image.c"
  $322 = $t01; //@line 958 "emscripten/stb_image.c"
  $323 = $t34; //@line 958 "emscripten/stb_image.c"
  $324 = (($322) + ($323))|0; //@line 958 "emscripten/stb_image.c"
  $x010 = $324; //@line 958 "emscripten/stb_image.c"
  $325 = $t01; //@line 958 "emscripten/stb_image.c"
  $326 = $t34; //@line 958 "emscripten/stb_image.c"
  $327 = (($325) - ($326))|0; //@line 958 "emscripten/stb_image.c"
  $x313 = $327; //@line 958 "emscripten/stb_image.c"
  $328 = $t12; //@line 958 "emscripten/stb_image.c"
  $329 = $t23; //@line 958 "emscripten/stb_image.c"
  $330 = (($328) + ($329))|0; //@line 958 "emscripten/stb_image.c"
  $x111 = $330; //@line 958 "emscripten/stb_image.c"
  $331 = $t12; //@line 958 "emscripten/stb_image.c"
  $332 = $t23; //@line 958 "emscripten/stb_image.c"
  $333 = (($331) - ($332))|0; //@line 958 "emscripten/stb_image.c"
  $x212 = $333; //@line 958 "emscripten/stb_image.c"
  $334 = $v; //@line 958 "emscripten/stb_image.c"
  $335 = (($334) + 28|0); //@line 958 "emscripten/stb_image.c"
  $336 = HEAP32[$335>>2]|0; //@line 958 "emscripten/stb_image.c"
  $t01 = $336; //@line 958 "emscripten/stb_image.c"
  $337 = $v; //@line 958 "emscripten/stb_image.c"
  $338 = (($337) + 20|0); //@line 958 "emscripten/stb_image.c"
  $339 = HEAP32[$338>>2]|0; //@line 958 "emscripten/stb_image.c"
  $t12 = $339; //@line 958 "emscripten/stb_image.c"
  $340 = $v; //@line 958 "emscripten/stb_image.c"
  $341 = (($340) + 12|0); //@line 958 "emscripten/stb_image.c"
  $342 = HEAP32[$341>>2]|0; //@line 958 "emscripten/stb_image.c"
  $t23 = $342; //@line 958 "emscripten/stb_image.c"
  $343 = $v; //@line 958 "emscripten/stb_image.c"
  $344 = (($343) + 4|0); //@line 958 "emscripten/stb_image.c"
  $345 = HEAP32[$344>>2]|0; //@line 958 "emscripten/stb_image.c"
  $t34 = $345; //@line 958 "emscripten/stb_image.c"
  $346 = $t01; //@line 958 "emscripten/stb_image.c"
  $347 = $t23; //@line 958 "emscripten/stb_image.c"
  $348 = (($346) + ($347))|0; //@line 958 "emscripten/stb_image.c"
  $p37 = $348; //@line 958 "emscripten/stb_image.c"
  $349 = $t12; //@line 958 "emscripten/stb_image.c"
  $350 = $t34; //@line 958 "emscripten/stb_image.c"
  $351 = (($349) + ($350))|0; //@line 958 "emscripten/stb_image.c"
  $p48 = $351; //@line 958 "emscripten/stb_image.c"
  $352 = $t01; //@line 958 "emscripten/stb_image.c"
  $353 = $t34; //@line 958 "emscripten/stb_image.c"
  $354 = (($352) + ($353))|0; //@line 958 "emscripten/stb_image.c"
  $p15 = $354; //@line 958 "emscripten/stb_image.c"
  $355 = $t12; //@line 958 "emscripten/stb_image.c"
  $356 = $t23; //@line 958 "emscripten/stb_image.c"
  $357 = (($355) + ($356))|0; //@line 958 "emscripten/stb_image.c"
  $p26 = $357; //@line 958 "emscripten/stb_image.c"
  $358 = $p37; //@line 958 "emscripten/stb_image.c"
  $359 = $p48; //@line 958 "emscripten/stb_image.c"
  $360 = (($358) + ($359))|0; //@line 958 "emscripten/stb_image.c"
  $361 = ($360*4816)|0; //@line 958 "emscripten/stb_image.c"
  $p59 = $361; //@line 958 "emscripten/stb_image.c"
  $362 = $t01; //@line 958 "emscripten/stb_image.c"
  $363 = ($362*1223)|0; //@line 958 "emscripten/stb_image.c"
  $t01 = $363; //@line 958 "emscripten/stb_image.c"
  $364 = $t12; //@line 958 "emscripten/stb_image.c"
  $365 = ($364*8410)|0; //@line 958 "emscripten/stb_image.c"
  $t12 = $365; //@line 958 "emscripten/stb_image.c"
  $366 = $t23; //@line 958 "emscripten/stb_image.c"
  $367 = ($366*12586)|0; //@line 958 "emscripten/stb_image.c"
  $t23 = $367; //@line 958 "emscripten/stb_image.c"
  $368 = $t34; //@line 958 "emscripten/stb_image.c"
  $369 = ($368*6149)|0; //@line 958 "emscripten/stb_image.c"
  $t34 = $369; //@line 958 "emscripten/stb_image.c"
  $370 = $p59; //@line 958 "emscripten/stb_image.c"
  $371 = $p15; //@line 958 "emscripten/stb_image.c"
  $372 = Math_imul($371, -3685)|0; //@line 958 "emscripten/stb_image.c"
  $373 = (($370) + ($372))|0; //@line 958 "emscripten/stb_image.c"
  $p15 = $373; //@line 958 "emscripten/stb_image.c"
  $374 = $p59; //@line 958 "emscripten/stb_image.c"
  $375 = $p26; //@line 958 "emscripten/stb_image.c"
  $376 = Math_imul($375, -10497)|0; //@line 958 "emscripten/stb_image.c"
  $377 = (($374) + ($376))|0; //@line 958 "emscripten/stb_image.c"
  $p26 = $377; //@line 958 "emscripten/stb_image.c"
  $378 = $p37; //@line 958 "emscripten/stb_image.c"
  $379 = Math_imul($378, -8034)|0; //@line 958 "emscripten/stb_image.c"
  $p37 = $379; //@line 958 "emscripten/stb_image.c"
  $380 = $p48; //@line 958 "emscripten/stb_image.c"
  $381 = Math_imul($380, -1597)|0; //@line 958 "emscripten/stb_image.c"
  $p48 = $381; //@line 958 "emscripten/stb_image.c"
  $382 = $p15; //@line 958 "emscripten/stb_image.c"
  $383 = $p48; //@line 958 "emscripten/stb_image.c"
  $384 = (($382) + ($383))|0; //@line 958 "emscripten/stb_image.c"
  $385 = $t34; //@line 958 "emscripten/stb_image.c"
  $386 = (($385) + ($384))|0; //@line 958 "emscripten/stb_image.c"
  $t34 = $386; //@line 958 "emscripten/stb_image.c"
  $387 = $p26; //@line 958 "emscripten/stb_image.c"
  $388 = $p37; //@line 958 "emscripten/stb_image.c"
  $389 = (($387) + ($388))|0; //@line 958 "emscripten/stb_image.c"
  $390 = $t23; //@line 958 "emscripten/stb_image.c"
  $391 = (($390) + ($389))|0; //@line 958 "emscripten/stb_image.c"
  $t23 = $391; //@line 958 "emscripten/stb_image.c"
  $392 = $p26; //@line 958 "emscripten/stb_image.c"
  $393 = $p48; //@line 958 "emscripten/stb_image.c"
  $394 = (($392) + ($393))|0; //@line 958 "emscripten/stb_image.c"
  $395 = $t12; //@line 958 "emscripten/stb_image.c"
  $396 = (($395) + ($394))|0; //@line 958 "emscripten/stb_image.c"
  $t12 = $396; //@line 958 "emscripten/stb_image.c"
  $397 = $p15; //@line 958 "emscripten/stb_image.c"
  $398 = $p37; //@line 958 "emscripten/stb_image.c"
  $399 = (($397) + ($398))|0; //@line 958 "emscripten/stb_image.c"
  $400 = $t01; //@line 958 "emscripten/stb_image.c"
  $401 = (($400) + ($399))|0; //@line 958 "emscripten/stb_image.c"
  $t01 = $401; //@line 958 "emscripten/stb_image.c"
  $402 = $x010; //@line 965 "emscripten/stb_image.c"
  $403 = (($402) + 16842752)|0; //@line 965 "emscripten/stb_image.c"
  $x010 = $403; //@line 965 "emscripten/stb_image.c"
  $404 = $x111; //@line 966 "emscripten/stb_image.c"
  $405 = (($404) + 16842752)|0; //@line 966 "emscripten/stb_image.c"
  $x111 = $405; //@line 966 "emscripten/stb_image.c"
  $406 = $x212; //@line 967 "emscripten/stb_image.c"
  $407 = (($406) + 16842752)|0; //@line 967 "emscripten/stb_image.c"
  $x212 = $407; //@line 967 "emscripten/stb_image.c"
  $408 = $x313; //@line 968 "emscripten/stb_image.c"
  $409 = (($408) + 16842752)|0; //@line 968 "emscripten/stb_image.c"
  $x313 = $409; //@line 968 "emscripten/stb_image.c"
  $410 = $x010; //@line 971 "emscripten/stb_image.c"
  $411 = $t34; //@line 971 "emscripten/stb_image.c"
  $412 = (($410) + ($411))|0; //@line 971 "emscripten/stb_image.c"
  $413 = $412 >> 17; //@line 971 "emscripten/stb_image.c"
  $414 = (__ZL5clampi($413)|0); //@line 971 "emscripten/stb_image.c"
  $415 = $o; //@line 971 "emscripten/stb_image.c"
  HEAP8[$415>>0] = $414; //@line 971 "emscripten/stb_image.c"
  $416 = $x010; //@line 972 "emscripten/stb_image.c"
  $417 = $t34; //@line 972 "emscripten/stb_image.c"
  $418 = (($416) - ($417))|0; //@line 972 "emscripten/stb_image.c"
  $419 = $418 >> 17; //@line 972 "emscripten/stb_image.c"
  $420 = (__ZL5clampi($419)|0); //@line 972 "emscripten/stb_image.c"
  $421 = $o; //@line 972 "emscripten/stb_image.c"
  $422 = (($421) + 7|0); //@line 972 "emscripten/stb_image.c"
  HEAP8[$422>>0] = $420; //@line 972 "emscripten/stb_image.c"
  $423 = $x111; //@line 973 "emscripten/stb_image.c"
  $424 = $t23; //@line 973 "emscripten/stb_image.c"
  $425 = (($423) + ($424))|0; //@line 973 "emscripten/stb_image.c"
  $426 = $425 >> 17; //@line 973 "emscripten/stb_image.c"
  $427 = (__ZL5clampi($426)|0); //@line 973 "emscripten/stb_image.c"
  $428 = $o; //@line 973 "emscripten/stb_image.c"
  $429 = (($428) + 1|0); //@line 973 "emscripten/stb_image.c"
  HEAP8[$429>>0] = $427; //@line 973 "emscripten/stb_image.c"
  $430 = $x111; //@line 974 "emscripten/stb_image.c"
  $431 = $t23; //@line 974 "emscripten/stb_image.c"
  $432 = (($430) - ($431))|0; //@line 974 "emscripten/stb_image.c"
  $433 = $432 >> 17; //@line 974 "emscripten/stb_image.c"
  $434 = (__ZL5clampi($433)|0); //@line 974 "emscripten/stb_image.c"
  $435 = $o; //@line 974 "emscripten/stb_image.c"
  $436 = (($435) + 6|0); //@line 974 "emscripten/stb_image.c"
  HEAP8[$436>>0] = $434; //@line 974 "emscripten/stb_image.c"
  $437 = $x212; //@line 975 "emscripten/stb_image.c"
  $438 = $t12; //@line 975 "emscripten/stb_image.c"
  $439 = (($437) + ($438))|0; //@line 975 "emscripten/stb_image.c"
  $440 = $439 >> 17; //@line 975 "emscripten/stb_image.c"
  $441 = (__ZL5clampi($440)|0); //@line 975 "emscripten/stb_image.c"
  $442 = $o; //@line 975 "emscripten/stb_image.c"
  $443 = (($442) + 2|0); //@line 975 "emscripten/stb_image.c"
  HEAP8[$443>>0] = $441; //@line 975 "emscripten/stb_image.c"
  $444 = $x212; //@line 976 "emscripten/stb_image.c"
  $445 = $t12; //@line 976 "emscripten/stb_image.c"
  $446 = (($444) - ($445))|0; //@line 976 "emscripten/stb_image.c"
  $447 = $446 >> 17; //@line 976 "emscripten/stb_image.c"
  $448 = (__ZL5clampi($447)|0); //@line 976 "emscripten/stb_image.c"
  $449 = $o; //@line 976 "emscripten/stb_image.c"
  $450 = (($449) + 5|0); //@line 976 "emscripten/stb_image.c"
  HEAP8[$450>>0] = $448; //@line 976 "emscripten/stb_image.c"
  $451 = $x313; //@line 977 "emscripten/stb_image.c"
  $452 = $t01; //@line 977 "emscripten/stb_image.c"
  $453 = (($451) + ($452))|0; //@line 977 "emscripten/stb_image.c"
  $454 = $453 >> 17; //@line 977 "emscripten/stb_image.c"
  $455 = (__ZL5clampi($454)|0); //@line 977 "emscripten/stb_image.c"
  $456 = $o; //@line 977 "emscripten/stb_image.c"
  $457 = (($456) + 3|0); //@line 977 "emscripten/stb_image.c"
  HEAP8[$457>>0] = $455; //@line 977 "emscripten/stb_image.c"
  $458 = $x313; //@line 978 "emscripten/stb_image.c"
  $459 = $t01; //@line 978 "emscripten/stb_image.c"
  $460 = (($458) - ($459))|0; //@line 978 "emscripten/stb_image.c"
  $461 = $460 >> 17; //@line 978 "emscripten/stb_image.c"
  $462 = (__ZL5clampi($461)|0); //@line 978 "emscripten/stb_image.c"
  $463 = $o; //@line 978 "emscripten/stb_image.c"
  $464 = (($463) + 4|0); //@line 978 "emscripten/stb_image.c"
  HEAP8[$464>>0] = $462; //@line 978 "emscripten/stb_image.c"
  $465 = $i; //@line 956 "emscripten/stb_image.c"
  $466 = (($465) + 1)|0; //@line 956 "emscripten/stb_image.c"
  $i = $466; //@line 956 "emscripten/stb_image.c"
  $467 = $v; //@line 956 "emscripten/stb_image.c"
  $468 = (($467) + 32|0); //@line 956 "emscripten/stb_image.c"
  $v = $468; //@line 956 "emscripten/stb_image.c"
  $469 = $1; //@line 956 "emscripten/stb_image.c"
  $470 = $o; //@line 956 "emscripten/stb_image.c"
  $471 = (($470) + ($469)|0); //@line 956 "emscripten/stb_image.c"
  $o = $471; //@line 956 "emscripten/stb_image.c"
 }
 STACKTOP = sp;return; //@line 980 "emscripten/stb_image.c"
}
function __ZL18grow_buffer_unsafeP4jpeg($j) {
 $j = $j|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $b = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $j;
 while(1) {
  $1 = $0; //@line 716 "emscripten/stb_image.c"
  $2 = (($1) + 13960|0); //@line 716 "emscripten/stb_image.c"
  $3 = HEAP32[$2>>2]|0; //@line 716 "emscripten/stb_image.c"
  $4 = ($3|0)!=(0); //@line 716 "emscripten/stb_image.c"
  if ($4) {
   $8 = 0;
  } else {
   $5 = $0; //@line 716 "emscripten/stb_image.c"
   $6 = HEAP32[$5>>2]|0; //@line 716 "emscripten/stb_image.c"
   $7 = (__ZL4get8P4stbi($6)|0); //@line 716 "emscripten/stb_image.c"
   $8 = $7;
  }
  $b = $8; //@line 716 "emscripten/stb_image.c"
  $9 = $b; //@line 717 "emscripten/stb_image.c"
  $10 = ($9|0)==(255); //@line 717 "emscripten/stb_image.c"
  if ($10) {
   $11 = $0; //@line 718 "emscripten/stb_image.c"
   $12 = HEAP32[$11>>2]|0; //@line 718 "emscripten/stb_image.c"
   $13 = (__ZL4get8P4stbi($12)|0); //@line 718 "emscripten/stb_image.c"
   $c = $13; //@line 718 "emscripten/stb_image.c"
   $14 = $c; //@line 719 "emscripten/stb_image.c"
   $15 = ($14|0)!=(0); //@line 719 "emscripten/stb_image.c"
   if ($15) {
    break;
   }
  }
  $22 = $b; //@line 725 "emscripten/stb_image.c"
  $23 = $0; //@line 725 "emscripten/stb_image.c"
  $24 = (($23) + 13952|0); //@line 725 "emscripten/stb_image.c"
  $25 = HEAP32[$24>>2]|0; //@line 725 "emscripten/stb_image.c"
  $26 = (24 - ($25))|0; //@line 725 "emscripten/stb_image.c"
  $27 = $22 << $26; //@line 725 "emscripten/stb_image.c"
  $28 = $0; //@line 725 "emscripten/stb_image.c"
  $29 = (($28) + 13948|0); //@line 725 "emscripten/stb_image.c"
  $30 = HEAP32[$29>>2]|0; //@line 725 "emscripten/stb_image.c"
  $31 = $30 | $27; //@line 725 "emscripten/stb_image.c"
  HEAP32[$29>>2] = $31; //@line 725 "emscripten/stb_image.c"
  $32 = $0; //@line 726 "emscripten/stb_image.c"
  $33 = (($32) + 13952|0); //@line 726 "emscripten/stb_image.c"
  $34 = HEAP32[$33>>2]|0; //@line 726 "emscripten/stb_image.c"
  $35 = (($34) + 8)|0; //@line 726 "emscripten/stb_image.c"
  HEAP32[$33>>2] = $35; //@line 726 "emscripten/stb_image.c"
  $36 = $0; //@line 727 "emscripten/stb_image.c"
  $37 = (($36) + 13952|0); //@line 727 "emscripten/stb_image.c"
  $38 = HEAP32[$37>>2]|0; //@line 727 "emscripten/stb_image.c"
  $39 = ($38|0)<=(24); //@line 727 "emscripten/stb_image.c"
  if (!($39)) {
   label = 11;
   break;
  }
 }
 if ((label|0) == 11) {
  STACKTOP = sp;return; //@line 726 "emscripten/stb_image.c"
 }
 $16 = $c; //@line 720 "emscripten/stb_image.c"
 $17 = $16&255; //@line 720 "emscripten/stb_image.c"
 $18 = $0; //@line 720 "emscripten/stb_image.c"
 $19 = (($18) + 13956|0); //@line 720 "emscripten/stb_image.c"
 HEAP8[$19>>0] = $17; //@line 720 "emscripten/stb_image.c"
 $20 = $0; //@line 721 "emscripten/stb_image.c"
 $21 = (($20) + 13960|0); //@line 721 "emscripten/stb_image.c"
 HEAP32[$21>>2] = 1; //@line 721 "emscripten/stb_image.c"
 STACKTOP = sp;return; //@line 726 "emscripten/stb_image.c"
}
function __ZL5clampi($x) {
 $x = $x|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $x;
 $2 = $1; //@line 866 "emscripten/stb_image.c"
 $3 = ($2>>>0)>(255); //@line 866 "emscripten/stb_image.c"
 do {
  if ($3) {
   $4 = $1; //@line 867 "emscripten/stb_image.c"
   $5 = ($4|0)<(0); //@line 867 "emscripten/stb_image.c"
   if ($5) {
    $0 = 0; //@line 867 "emscripten/stb_image.c"
    break;
   }
   $6 = $1; //@line 868 "emscripten/stb_image.c"
   $7 = ($6|0)>(255); //@line 868 "emscripten/stb_image.c"
   if ($7) {
    $0 = -1; //@line 868 "emscripten/stb_image.c"
    break;
   } else {
    label = 7;
    break;
   }
  } else {
   label = 7;
  }
 } while(0);
 if ((label|0) == 7) {
  $8 = $1; //@line 870 "emscripten/stb_image.c"
  $9 = $8&255; //@line 870 "emscripten/stb_image.c"
  $0 = $9; //@line 870 "emscripten/stb_image.c"
 }
 $10 = $0; //@line 871 "emscripten/stb_image.c"
 STACKTOP = sp;return ($10|0); //@line 871 "emscripten/stb_image.c"
}
function __ZL6decodeP4jpegP7huffman($j,$h) {
 $j = $j|0;
 $h = $h|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c = 0, $k = 0, $s = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = $j;
 $2 = $h;
 $3 = $1; //@line 739 "emscripten/stb_image.c"
 $4 = (($3) + 13952|0); //@line 739 "emscripten/stb_image.c"
 $5 = HEAP32[$4>>2]|0; //@line 739 "emscripten/stb_image.c"
 $6 = ($5|0)<(16); //@line 739 "emscripten/stb_image.c"
 if ($6) {
  $7 = $1; //@line 739 "emscripten/stb_image.c"
  __ZL18grow_buffer_unsafeP4jpeg($7); //@line 739 "emscripten/stb_image.c"
 }
 $8 = $1; //@line 743 "emscripten/stb_image.c"
 $9 = (($8) + 13948|0); //@line 743 "emscripten/stb_image.c"
 $10 = HEAP32[$9>>2]|0; //@line 743 "emscripten/stb_image.c"
 $11 = $10 >>> 23; //@line 743 "emscripten/stb_image.c"
 $12 = $11 & 511; //@line 743 "emscripten/stb_image.c"
 $c = $12; //@line 743 "emscripten/stb_image.c"
 $13 = $c; //@line 744 "emscripten/stb_image.c"
 $14 = $2; //@line 744 "emscripten/stb_image.c"
 $15 = (($14) + ($13)|0); //@line 744 "emscripten/stb_image.c"
 $16 = HEAP8[$15>>0]|0; //@line 744 "emscripten/stb_image.c"
 $17 = $16&255; //@line 744 "emscripten/stb_image.c"
 $k = $17; //@line 744 "emscripten/stb_image.c"
 $18 = $k; //@line 745 "emscripten/stb_image.c"
 $19 = ($18|0)<(255); //@line 745 "emscripten/stb_image.c"
 if ($19) {
  $20 = $k; //@line 746 "emscripten/stb_image.c"
  $21 = $2; //@line 746 "emscripten/stb_image.c"
  $22 = (($21) + 1280|0); //@line 746 "emscripten/stb_image.c"
  $23 = (($22) + ($20)|0); //@line 746 "emscripten/stb_image.c"
  $24 = HEAP8[$23>>0]|0; //@line 746 "emscripten/stb_image.c"
  $25 = $24&255; //@line 746 "emscripten/stb_image.c"
  $s = $25; //@line 746 "emscripten/stb_image.c"
  $26 = $s; //@line 747 "emscripten/stb_image.c"
  $27 = $1; //@line 747 "emscripten/stb_image.c"
  $28 = (($27) + 13952|0); //@line 747 "emscripten/stb_image.c"
  $29 = HEAP32[$28>>2]|0; //@line 747 "emscripten/stb_image.c"
  $30 = ($26|0)>($29|0); //@line 747 "emscripten/stb_image.c"
  if ($30) {
   $0 = -1; //@line 748 "emscripten/stb_image.c"
   $130 = $0; //@line 781 "emscripten/stb_image.c"
   STACKTOP = sp;return ($130|0); //@line 781 "emscripten/stb_image.c"
  } else {
   $31 = $s; //@line 749 "emscripten/stb_image.c"
   $32 = $1; //@line 749 "emscripten/stb_image.c"
   $33 = (($32) + 13948|0); //@line 749 "emscripten/stb_image.c"
   $34 = HEAP32[$33>>2]|0; //@line 749 "emscripten/stb_image.c"
   $35 = $34 << $31; //@line 749 "emscripten/stb_image.c"
   HEAP32[$33>>2] = $35; //@line 749 "emscripten/stb_image.c"
   $36 = $s; //@line 750 "emscripten/stb_image.c"
   $37 = $1; //@line 750 "emscripten/stb_image.c"
   $38 = (($37) + 13952|0); //@line 750 "emscripten/stb_image.c"
   $39 = HEAP32[$38>>2]|0; //@line 750 "emscripten/stb_image.c"
   $40 = (($39) - ($36))|0; //@line 750 "emscripten/stb_image.c"
   HEAP32[$38>>2] = $40; //@line 750 "emscripten/stb_image.c"
   $41 = $k; //@line 751 "emscripten/stb_image.c"
   $42 = $2; //@line 751 "emscripten/stb_image.c"
   $43 = (($42) + 1024|0); //@line 751 "emscripten/stb_image.c"
   $44 = (($43) + ($41)|0); //@line 751 "emscripten/stb_image.c"
   $45 = HEAP8[$44>>0]|0; //@line 751 "emscripten/stb_image.c"
   $46 = $45&255; //@line 751 "emscripten/stb_image.c"
   $0 = $46; //@line 751 "emscripten/stb_image.c"
   $130 = $0; //@line 781 "emscripten/stb_image.c"
   STACKTOP = sp;return ($130|0); //@line 781 "emscripten/stb_image.c"
  }
 }
 $47 = $1; //@line 760 "emscripten/stb_image.c"
 $48 = (($47) + 13948|0); //@line 760 "emscripten/stb_image.c"
 $49 = HEAP32[$48>>2]|0; //@line 760 "emscripten/stb_image.c"
 $50 = $49 >>> 16; //@line 760 "emscripten/stb_image.c"
 $temp = $50; //@line 760 "emscripten/stb_image.c"
 $k = 10; //@line 761 "emscripten/stb_image.c"
 while(1) {
  $51 = $temp; //@line 762 "emscripten/stb_image.c"
  $52 = $k; //@line 762 "emscripten/stb_image.c"
  $53 = $2; //@line 762 "emscripten/stb_image.c"
  $54 = (($53) + 1540|0); //@line 762 "emscripten/stb_image.c"
  $55 = (($54) + ($52<<2)|0); //@line 762 "emscripten/stb_image.c"
  $56 = HEAP32[$55>>2]|0; //@line 762 "emscripten/stb_image.c"
  $57 = ($51>>>0)<($56>>>0); //@line 762 "emscripten/stb_image.c"
  if ($57) {
   break;
  }
  $58 = $k; //@line 761 "emscripten/stb_image.c"
  $59 = (($58) + 1)|0; //@line 761 "emscripten/stb_image.c"
  $k = $59; //@line 761 "emscripten/stb_image.c"
 }
 $60 = $k; //@line 764 "emscripten/stb_image.c"
 $61 = ($60|0)==(17); //@line 764 "emscripten/stb_image.c"
 if ($61) {
  $62 = $1; //@line 766 "emscripten/stb_image.c"
  $63 = (($62) + 13952|0); //@line 766 "emscripten/stb_image.c"
  $64 = HEAP32[$63>>2]|0; //@line 766 "emscripten/stb_image.c"
  $65 = (($64) - 16)|0; //@line 766 "emscripten/stb_image.c"
  HEAP32[$63>>2] = $65; //@line 766 "emscripten/stb_image.c"
  $0 = -1; //@line 767 "emscripten/stb_image.c"
  $130 = $0; //@line 781 "emscripten/stb_image.c"
  STACKTOP = sp;return ($130|0); //@line 781 "emscripten/stb_image.c"
 }
 $66 = $k; //@line 770 "emscripten/stb_image.c"
 $67 = $1; //@line 770 "emscripten/stb_image.c"
 $68 = (($67) + 13952|0); //@line 770 "emscripten/stb_image.c"
 $69 = HEAP32[$68>>2]|0; //@line 770 "emscripten/stb_image.c"
 $70 = ($66|0)>($69|0); //@line 770 "emscripten/stb_image.c"
 if ($70) {
  $0 = -1; //@line 771 "emscripten/stb_image.c"
  $130 = $0; //@line 781 "emscripten/stb_image.c"
  STACKTOP = sp;return ($130|0); //@line 781 "emscripten/stb_image.c"
 }
 $71 = $1; //@line 774 "emscripten/stb_image.c"
 $72 = (($71) + 13948|0); //@line 774 "emscripten/stb_image.c"
 $73 = HEAP32[$72>>2]|0; //@line 774 "emscripten/stb_image.c"
 $74 = $k; //@line 774 "emscripten/stb_image.c"
 $75 = (32 - ($74))|0; //@line 774 "emscripten/stb_image.c"
 $76 = $73 >>> $75; //@line 774 "emscripten/stb_image.c"
 $77 = $k; //@line 774 "emscripten/stb_image.c"
 $78 = (29336 + ($77<<2)|0); //@line 774 "emscripten/stb_image.c"
 $79 = HEAP32[$78>>2]|0; //@line 774 "emscripten/stb_image.c"
 $80 = $76 & $79; //@line 774 "emscripten/stb_image.c"
 $81 = $k; //@line 774 "emscripten/stb_image.c"
 $82 = $2; //@line 774 "emscripten/stb_image.c"
 $83 = (($82) + 1612|0); //@line 774 "emscripten/stb_image.c"
 $84 = (($83) + ($81<<2)|0); //@line 774 "emscripten/stb_image.c"
 $85 = HEAP32[$84>>2]|0; //@line 774 "emscripten/stb_image.c"
 $86 = (($80) + ($85))|0; //@line 774 "emscripten/stb_image.c"
 $c = $86; //@line 774 "emscripten/stb_image.c"
 $87 = $1; //@line 775 "emscripten/stb_image.c"
 $88 = (($87) + 13948|0); //@line 775 "emscripten/stb_image.c"
 $89 = HEAP32[$88>>2]|0; //@line 775 "emscripten/stb_image.c"
 $90 = $c; //@line 775 "emscripten/stb_image.c"
 $91 = $2; //@line 775 "emscripten/stb_image.c"
 $92 = (($91) + 1280|0); //@line 775 "emscripten/stb_image.c"
 $93 = (($92) + ($90)|0); //@line 775 "emscripten/stb_image.c"
 $94 = HEAP8[$93>>0]|0; //@line 775 "emscripten/stb_image.c"
 $95 = $94&255; //@line 775 "emscripten/stb_image.c"
 $96 = (32 - ($95))|0; //@line 775 "emscripten/stb_image.c"
 $97 = $89 >>> $96; //@line 775 "emscripten/stb_image.c"
 $98 = $c; //@line 775 "emscripten/stb_image.c"
 $99 = $2; //@line 775 "emscripten/stb_image.c"
 $100 = (($99) + 1280|0); //@line 775 "emscripten/stb_image.c"
 $101 = (($100) + ($98)|0); //@line 775 "emscripten/stb_image.c"
 $102 = HEAP8[$101>>0]|0; //@line 775 "emscripten/stb_image.c"
 $103 = $102&255; //@line 775 "emscripten/stb_image.c"
 $104 = (29336 + ($103<<2)|0); //@line 775 "emscripten/stb_image.c"
 $105 = HEAP32[$104>>2]|0; //@line 775 "emscripten/stb_image.c"
 $106 = $97 & $105; //@line 775 "emscripten/stb_image.c"
 $107 = $c; //@line 775 "emscripten/stb_image.c"
 $108 = $2; //@line 775 "emscripten/stb_image.c"
 $109 = (($108) + 512|0); //@line 775 "emscripten/stb_image.c"
 $110 = (($109) + ($107<<1)|0); //@line 775 "emscripten/stb_image.c"
 $111 = HEAP16[$110>>1]|0; //@line 775 "emscripten/stb_image.c"
 $112 = $111&65535; //@line 775 "emscripten/stb_image.c"
 $113 = ($106|0)==($112|0); //@line 775 "emscripten/stb_image.c"
 if (!($113)) {
  ___assert_fail((29408|0),(26712|0),775,(29488|0)); //@line 775 "emscripten/stb_image.c"
  // unreachable; //@line 775 "emscripten/stb_image.c"
 }
 $114 = $k; //@line 778 "emscripten/stb_image.c"
 $115 = $1; //@line 778 "emscripten/stb_image.c"
 $116 = (($115) + 13952|0); //@line 778 "emscripten/stb_image.c"
 $117 = HEAP32[$116>>2]|0; //@line 778 "emscripten/stb_image.c"
 $118 = (($117) - ($114))|0; //@line 778 "emscripten/stb_image.c"
 HEAP32[$116>>2] = $118; //@line 778 "emscripten/stb_image.c"
 $119 = $k; //@line 779 "emscripten/stb_image.c"
 $120 = $1; //@line 779 "emscripten/stb_image.c"
 $121 = (($120) + 13948|0); //@line 779 "emscripten/stb_image.c"
 $122 = HEAP32[$121>>2]|0; //@line 779 "emscripten/stb_image.c"
 $123 = $122 << $119; //@line 779 "emscripten/stb_image.c"
 HEAP32[$121>>2] = $123; //@line 779 "emscripten/stb_image.c"
 $124 = $c; //@line 780 "emscripten/stb_image.c"
 $125 = $2; //@line 780 "emscripten/stb_image.c"
 $126 = (($125) + 1024|0); //@line 780 "emscripten/stb_image.c"
 $127 = (($126) + ($124)|0); //@line 780 "emscripten/stb_image.c"
 $128 = HEAP8[$127>>0]|0; //@line 780 "emscripten/stb_image.c"
 $129 = $128&255; //@line 780 "emscripten/stb_image.c"
 $0 = $129; //@line 780 "emscripten/stb_image.c"
 $130 = $0; //@line 781 "emscripten/stb_image.c"
 STACKTOP = sp;return ($130|0); //@line 781 "emscripten/stb_image.c"
}
function __ZL14extend_receiveP4jpegi($j,$n) {
 $j = $j|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $k = 0, $m = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = $j;
 $2 = $n;
 $3 = $2; //@line 787 "emscripten/stb_image.c"
 $4 = (($3) - 1)|0; //@line 787 "emscripten/stb_image.c"
 $5 = 1 << $4; //@line 787 "emscripten/stb_image.c"
 $m = $5; //@line 787 "emscripten/stb_image.c"
 $6 = $1; //@line 789 "emscripten/stb_image.c"
 $7 = (($6) + 13952|0); //@line 789 "emscripten/stb_image.c"
 $8 = HEAP32[$7>>2]|0; //@line 789 "emscripten/stb_image.c"
 $9 = $2; //@line 789 "emscripten/stb_image.c"
 $10 = ($8|0)<($9|0); //@line 789 "emscripten/stb_image.c"
 if ($10) {
  $11 = $1; //@line 789 "emscripten/stb_image.c"
  __ZL18grow_buffer_unsafeP4jpeg($11); //@line 789 "emscripten/stb_image.c"
 }
 $12 = $1; //@line 792 "emscripten/stb_image.c"
 $13 = (($12) + 13948|0); //@line 792 "emscripten/stb_image.c"
 $14 = HEAP32[$13>>2]|0; //@line 792 "emscripten/stb_image.c"
 $15 = $2; //@line 792 "emscripten/stb_image.c"
 $16 = $14 << $15; //@line 792 "emscripten/stb_image.c"
 $17 = $1; //@line 792 "emscripten/stb_image.c"
 $18 = (($17) + 13948|0); //@line 792 "emscripten/stb_image.c"
 $19 = HEAP32[$18>>2]|0; //@line 792 "emscripten/stb_image.c"
 $20 = $2; //@line 792 "emscripten/stb_image.c"
 $21 = (32 - ($20))|0; //@line 792 "emscripten/stb_image.c"
 $22 = $19 >>> $21; //@line 792 "emscripten/stb_image.c"
 $23 = $16 | $22; //@line 792 "emscripten/stb_image.c"
 $k = $23; //@line 792 "emscripten/stb_image.c"
 $24 = $k; //@line 793 "emscripten/stb_image.c"
 $25 = $2; //@line 793 "emscripten/stb_image.c"
 $26 = (29336 + ($25<<2)|0); //@line 793 "emscripten/stb_image.c"
 $27 = HEAP32[$26>>2]|0; //@line 793 "emscripten/stb_image.c"
 $28 = $27 ^ -1; //@line 793 "emscripten/stb_image.c"
 $29 = $24 & $28; //@line 793 "emscripten/stb_image.c"
 $30 = $1; //@line 793 "emscripten/stb_image.c"
 $31 = (($30) + 13948|0); //@line 793 "emscripten/stb_image.c"
 HEAP32[$31>>2] = $29; //@line 793 "emscripten/stb_image.c"
 $32 = $2; //@line 794 "emscripten/stb_image.c"
 $33 = (29336 + ($32<<2)|0); //@line 794 "emscripten/stb_image.c"
 $34 = HEAP32[$33>>2]|0; //@line 794 "emscripten/stb_image.c"
 $35 = $k; //@line 794 "emscripten/stb_image.c"
 $36 = $35 & $34; //@line 794 "emscripten/stb_image.c"
 $k = $36; //@line 794 "emscripten/stb_image.c"
 $37 = $2; //@line 795 "emscripten/stb_image.c"
 $38 = $1; //@line 795 "emscripten/stb_image.c"
 $39 = (($38) + 13952|0); //@line 795 "emscripten/stb_image.c"
 $40 = HEAP32[$39>>2]|0; //@line 795 "emscripten/stb_image.c"
 $41 = (($40) - ($37))|0; //@line 795 "emscripten/stb_image.c"
 HEAP32[$39>>2] = $41; //@line 795 "emscripten/stb_image.c"
 $42 = $k; //@line 804 "emscripten/stb_image.c"
 $43 = $m; //@line 804 "emscripten/stb_image.c"
 $44 = ($42>>>0)<($43>>>0); //@line 804 "emscripten/stb_image.c"
 if ($44) {
  $45 = $2; //@line 805 "emscripten/stb_image.c"
  $46 = -1 << $45; //@line 805 "emscripten/stb_image.c"
  $47 = $k; //@line 805 "emscripten/stb_image.c"
  $48 = (($46) + ($47))|0; //@line 805 "emscripten/stb_image.c"
  $49 = (($48) + 1)|0; //@line 805 "emscripten/stb_image.c"
  $0 = $49; //@line 805 "emscripten/stb_image.c"
  $51 = $0; //@line 808 "emscripten/stb_image.c"
  STACKTOP = sp;return ($51|0); //@line 808 "emscripten/stb_image.c"
 } else {
  $50 = $k; //@line 807 "emscripten/stb_image.c"
  $0 = $50; //@line 807 "emscripten/stb_image.c"
  $51 = $0; //@line 808 "emscripten/stb_image.c"
  STACKTOP = sp;return ($51|0); //@line 808 "emscripten/stb_image.c"
 }
 return 0|0;
}
function __Z7mem_inii($size) {
 $size = $size|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $size;
 $1 = $0; //@line 87 "emscripten/supio_emscripten.cpp"
 $2 = (_calloc($1,1)|0); //@line 87 "emscripten/supio_emscripten.cpp"
 STACKTOP = sp;return ($2|0); //@line 87 "emscripten/supio_emscripten.cpp"
}
function __Z7mem_byePv($ptr) {
 $ptr = $ptr|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $ptr;
 $1 = $0; //@line 91 "emscripten/supio_emscripten.cpp"
 _free($1); //@line 91 "emscripten/supio_emscripten.cpp"
 STACKTOP = sp;return; //@line 92 "emscripten/supio_emscripten.cpp"
}
function __Z8mem_savePcPvii($p_fname,$mem,$msize,$seekofs) {
 $p_fname = $p_fname|0;
 $mem = $mem|0;
 $msize = $msize|0;
 $seekofs = $seekofs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $flen = 0, $fname = 0, $fp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = $p_fname;
 $2 = $mem;
 $3 = $msize;
 $4 = $seekofs;
 $5 = $1; //@line 101 "emscripten/supio_emscripten.cpp"
 $fname = $5; //@line 101 "emscripten/supio_emscripten.cpp"
 $6 = $fname; //@line 102 "emscripten/supio_emscripten.cpp"
 $7 = HEAP8[$6>>0]|0; //@line 102 "emscripten/supio_emscripten.cpp"
 $8 = $7 << 24 >> 24; //@line 102 "emscripten/supio_emscripten.cpp"
 $9 = ($8|0)!=(47); //@line 102 "emscripten/supio_emscripten.cpp"
 if ($9) {
  $10 = $1; //@line 103 "emscripten/supio_emscripten.cpp"
  $11 = (_hgio_getstorage($10)|0); //@line 103 "emscripten/supio_emscripten.cpp"
  $fname = $11; //@line 103 "emscripten/supio_emscripten.cpp"
 }
 $12 = $4; //@line 105 "emscripten/supio_emscripten.cpp"
 $13 = ($12|0)<(0); //@line 105 "emscripten/supio_emscripten.cpp"
 if ($13) {
  $14 = $fname; //@line 106 "emscripten/supio_emscripten.cpp"
  $15 = (_fopen(($14|0),(29576|0))|0); //@line 106 "emscripten/supio_emscripten.cpp"
  $fp = $15; //@line 106 "emscripten/supio_emscripten.cpp"
 } else {
  $16 = $fname; //@line 109 "emscripten/supio_emscripten.cpp"
  $17 = (_fopen(($16|0),(29584|0))|0); //@line 109 "emscripten/supio_emscripten.cpp"
  $fp = $17; //@line 109 "emscripten/supio_emscripten.cpp"
 }
 $18 = $fp; //@line 111 "emscripten/supio_emscripten.cpp"
 $19 = ($18|0)==(0|0); //@line 111 "emscripten/supio_emscripten.cpp"
 if ($19) {
  $0 = -1; //@line 111 "emscripten/supio_emscripten.cpp"
  $30 = $0; //@line 116 "emscripten/supio_emscripten.cpp"
  STACKTOP = sp;return ($30|0); //@line 116 "emscripten/supio_emscripten.cpp"
 }
 $20 = $4; //@line 112 "emscripten/supio_emscripten.cpp"
 $21 = ($20|0)>=(0); //@line 112 "emscripten/supio_emscripten.cpp"
 if ($21) {
  $22 = $fp; //@line 112 "emscripten/supio_emscripten.cpp"
  $23 = $4; //@line 112 "emscripten/supio_emscripten.cpp"
  (_fseek(($22|0),($23|0),0)|0); //@line 112 "emscripten/supio_emscripten.cpp"
 }
 $24 = $2; //@line 113 "emscripten/supio_emscripten.cpp"
 $25 = $3; //@line 113 "emscripten/supio_emscripten.cpp"
 $26 = $fp; //@line 113 "emscripten/supio_emscripten.cpp"
 $27 = (_fwrite(($24|0),1,($25|0),($26|0))|0); //@line 113 "emscripten/supio_emscripten.cpp"
 $flen = $27; //@line 113 "emscripten/supio_emscripten.cpp"
 $28 = $fp; //@line 114 "emscripten/supio_emscripten.cpp"
 (_fclose(($28|0))|0); //@line 114 "emscripten/supio_emscripten.cpp"
 $29 = $flen; //@line 115 "emscripten/supio_emscripten.cpp"
 $0 = $29; //@line 115 "emscripten/supio_emscripten.cpp"
 $30 = $0; //@line 116 "emscripten/supio_emscripten.cpp"
 STACKTOP = sp;return ($30|0); //@line 116 "emscripten/supio_emscripten.cpp"
}
function __Z7strcasePc($target) {
 $target = $target|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a1 = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $target;
 $1 = $0; //@line 126 "emscripten/supio_emscripten.cpp"
 $p = $1; //@line 126 "emscripten/supio_emscripten.cpp"
 while(1) {
  $2 = $p; //@line 128 "emscripten/supio_emscripten.cpp"
  $3 = HEAP8[$2>>0]|0; //@line 128 "emscripten/supio_emscripten.cpp"
  $a1 = $3; //@line 128 "emscripten/supio_emscripten.cpp"
  $4 = $a1; //@line 128 "emscripten/supio_emscripten.cpp"
  $5 = $4&255; //@line 128 "emscripten/supio_emscripten.cpp"
  $6 = ($5|0)==(0); //@line 128 "emscripten/supio_emscripten.cpp"
  if ($6) {
   break;
  }
  $7 = $a1; //@line 129 "emscripten/supio_emscripten.cpp"
  $8 = $7&255; //@line 129 "emscripten/supio_emscripten.cpp"
  $9 = (_tolower($8)|0); //@line 129 "emscripten/supio_emscripten.cpp"
  $10 = $9&255; //@line 129 "emscripten/supio_emscripten.cpp"
  $11 = $p; //@line 129 "emscripten/supio_emscripten.cpp"
  HEAP8[$11>>0] = $10; //@line 129 "emscripten/supio_emscripten.cpp"
  $12 = $p; //@line 130 "emscripten/supio_emscripten.cpp"
  $13 = (($12) + 1|0); //@line 130 "emscripten/supio_emscripten.cpp"
  $p = $13; //@line 130 "emscripten/supio_emscripten.cpp"
  $14 = $a1; //@line 131 "emscripten/supio_emscripten.cpp"
  $15 = $14&255; //@line 131 "emscripten/supio_emscripten.cpp"
  $16 = ($15|0)>=(129); //@line 131 "emscripten/supio_emscripten.cpp"
  if ($16) {
   $17 = $a1; //@line 132 "emscripten/supio_emscripten.cpp"
   $18 = $17&255; //@line 132 "emscripten/supio_emscripten.cpp"
   $19 = ($18|0)<=(159); //@line 132 "emscripten/supio_emscripten.cpp"
   if ($19) {
    label = 7;
   } else {
    $20 = $a1; //@line 132 "emscripten/supio_emscripten.cpp"
    $21 = $20&255; //@line 132 "emscripten/supio_emscripten.cpp"
    $22 = ($21|0)>=(224); //@line 132 "emscripten/supio_emscripten.cpp"
    if ($22) {
     label = 7;
    }
   }
   if ((label|0) == 7) {
    label = 0;
    $23 = $p; //@line 132 "emscripten/supio_emscripten.cpp"
    $24 = (($23) + 1|0); //@line 132 "emscripten/supio_emscripten.cpp"
    $p = $24; //@line 132 "emscripten/supio_emscripten.cpp"
   }
  }
 }
 STACKTOP = sp;return; //@line 135 "emscripten/supio_emscripten.cpp"
}
function __Z7strstr2PcS_($target,$src) {
 $target = $target|0;
 $src = $src|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a1 = 0, $a2 = 0, $a3 = 0, $p = 0, $p2 = 0;
 var $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = $target;
 $2 = $src;
 $3 = $1; //@line 183 "emscripten/supio_emscripten.cpp"
 $p = $3; //@line 183 "emscripten/supio_emscripten.cpp"
 $4 = $2; //@line 184 "emscripten/supio_emscripten.cpp"
 $5 = HEAP8[$4>>0]|0; //@line 184 "emscripten/supio_emscripten.cpp"
 $6 = $5 << 24 >> 24; //@line 184 "emscripten/supio_emscripten.cpp"
 $7 = ($6|0)==(0); //@line 184 "emscripten/supio_emscripten.cpp"
 if (!($7)) {
  $8 = $1; //@line 184 "emscripten/supio_emscripten.cpp"
  $9 = HEAP8[$8>>0]|0; //@line 184 "emscripten/supio_emscripten.cpp"
  $10 = $9 << 24 >> 24; //@line 184 "emscripten/supio_emscripten.cpp"
  $11 = ($10|0)==(0); //@line 184 "emscripten/supio_emscripten.cpp"
  if (!($11)) {
   L4: while(1) {
    $12 = $p; //@line 186 "emscripten/supio_emscripten.cpp"
    $13 = HEAP8[$12>>0]|0; //@line 186 "emscripten/supio_emscripten.cpp"
    $a1 = $13; //@line 186 "emscripten/supio_emscripten.cpp"
    $14 = $a1; //@line 186 "emscripten/supio_emscripten.cpp"
    $15 = $14&255; //@line 186 "emscripten/supio_emscripten.cpp"
    $16 = ($15|0)==(0); //@line 186 "emscripten/supio_emscripten.cpp"
    if ($16) {
     break;
    }
    $17 = $p; //@line 187 "emscripten/supio_emscripten.cpp"
    $p2 = $17; //@line 187 "emscripten/supio_emscripten.cpp"
    $18 = $2; //@line 188 "emscripten/supio_emscripten.cpp"
    $s = $18; //@line 188 "emscripten/supio_emscripten.cpp"
    while(1) {
     $19 = $s; //@line 190 "emscripten/supio_emscripten.cpp"
     $20 = (($19) + 1|0); //@line 190 "emscripten/supio_emscripten.cpp"
     $s = $20; //@line 190 "emscripten/supio_emscripten.cpp"
     $21 = HEAP8[$19>>0]|0; //@line 190 "emscripten/supio_emscripten.cpp"
     $a2 = $21; //@line 190 "emscripten/supio_emscripten.cpp"
     $22 = $a2; //@line 190 "emscripten/supio_emscripten.cpp"
     $23 = $22&255; //@line 190 "emscripten/supio_emscripten.cpp"
     $24 = ($23|0)==(0); //@line 190 "emscripten/supio_emscripten.cpp"
     if ($24) {
      label = 9;
      break L4;
     }
     $26 = $p2; //@line 191 "emscripten/supio_emscripten.cpp"
     $27 = (($26) + 1|0); //@line 191 "emscripten/supio_emscripten.cpp"
     $p2 = $27; //@line 191 "emscripten/supio_emscripten.cpp"
     $28 = HEAP8[$26>>0]|0; //@line 191 "emscripten/supio_emscripten.cpp"
     $a3 = $28; //@line 191 "emscripten/supio_emscripten.cpp"
     $29 = $a3; //@line 191 "emscripten/supio_emscripten.cpp"
     $30 = $29&255; //@line 191 "emscripten/supio_emscripten.cpp"
     $31 = ($30|0)==(0); //@line 191 "emscripten/supio_emscripten.cpp"
     if ($31) {
      label = 11;
      break;
     }
     $32 = $a2; //@line 192 "emscripten/supio_emscripten.cpp"
     $33 = $32&255; //@line 192 "emscripten/supio_emscripten.cpp"
     $34 = $a3; //@line 192 "emscripten/supio_emscripten.cpp"
     $35 = $34&255; //@line 192 "emscripten/supio_emscripten.cpp"
     $36 = ($33|0)!=($35|0); //@line 192 "emscripten/supio_emscripten.cpp"
     if ($36) {
      label = 13;
      break;
     }
    }
    if ((label|0) == 11) {
     label = 0;
    }
    else if ((label|0) == 13) {
     label = 0;
    }
    $37 = $p; //@line 194 "emscripten/supio_emscripten.cpp"
    $38 = (($37) + 1|0); //@line 194 "emscripten/supio_emscripten.cpp"
    $p = $38; //@line 194 "emscripten/supio_emscripten.cpp"
    $39 = $a1; //@line 195 "emscripten/supio_emscripten.cpp"
    $40 = $39&255; //@line 195 "emscripten/supio_emscripten.cpp"
    $41 = $40 & 128; //@line 195 "emscripten/supio_emscripten.cpp"
    $42 = ($41|0)!=(0); //@line 195 "emscripten/supio_emscripten.cpp"
    if ($42) {
     while(1) {
      $43 = $p; //@line 197 "emscripten/supio_emscripten.cpp"
      $44 = HEAP8[$43>>0]|0; //@line 197 "emscripten/supio_emscripten.cpp"
      $a1 = $44; //@line 197 "emscripten/supio_emscripten.cpp"
      $45 = $a1; //@line 197 "emscripten/supio_emscripten.cpp"
      $46 = $45&255; //@line 197 "emscripten/supio_emscripten.cpp"
      $47 = ($46|0)==(0); //@line 197 "emscripten/supio_emscripten.cpp"
      if ($47) {
       label = 18;
       break;
      }
      $48 = $a1; //@line 198 "emscripten/supio_emscripten.cpp"
      $49 = $48&255; //@line 198 "emscripten/supio_emscripten.cpp"
      $50 = $49 & 192; //@line 198 "emscripten/supio_emscripten.cpp"
      $51 = ($50|0)!=(128); //@line 198 "emscripten/supio_emscripten.cpp"
      if ($51) {
       label = 20;
       break;
      }
      $52 = $p; //@line 199 "emscripten/supio_emscripten.cpp"
      $53 = (($52) + 1|0); //@line 199 "emscripten/supio_emscripten.cpp"
      $p = $53; //@line 199 "emscripten/supio_emscripten.cpp"
     }
     if ((label|0) == 18) {
      label = 0;
     }
     else if ((label|0) == 20) {
      label = 0;
     }
    }
   }
   if ((label|0) == 9) {
    $25 = $p; //@line 190 "emscripten/supio_emscripten.cpp"
    $0 = $25; //@line 190 "emscripten/supio_emscripten.cpp"
    $54 = $0; //@line 204 "emscripten/supio_emscripten.cpp"
    STACKTOP = sp;return ($54|0); //@line 204 "emscripten/supio_emscripten.cpp"
   }
   $0 = 0; //@line 203 "emscripten/supio_emscripten.cpp"
   $54 = $0; //@line 204 "emscripten/supio_emscripten.cpp"
   STACKTOP = sp;return ($54|0); //@line 204 "emscripten/supio_emscripten.cpp"
  }
 }
 $0 = 0; //@line 184 "emscripten/supio_emscripten.cpp"
 $54 = $0; //@line 204 "emscripten/supio_emscripten.cpp"
 STACKTOP = sp;return ($54|0); //@line 204 "emscripten/supio_emscripten.cpp"
}
function __Z7strchr2Pcc($target,$code) {
 $target = $target|0;
 $code = $code|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a1 = 0, $p = 0, $res = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $target;
 $1 = $code;
 $2 = $0; //@line 214 "emscripten/supio_emscripten.cpp"
 $p = $2; //@line 214 "emscripten/supio_emscripten.cpp"
 $res = 0; //@line 215 "emscripten/supio_emscripten.cpp"
 while(1) {
  $3 = $p; //@line 217 "emscripten/supio_emscripten.cpp"
  $4 = HEAP8[$3>>0]|0; //@line 217 "emscripten/supio_emscripten.cpp"
  $a1 = $4; //@line 217 "emscripten/supio_emscripten.cpp"
  $5 = $a1; //@line 217 "emscripten/supio_emscripten.cpp"
  $6 = $5&255; //@line 217 "emscripten/supio_emscripten.cpp"
  $7 = ($6|0)==(0); //@line 217 "emscripten/supio_emscripten.cpp"
  if ($7) {
   break;
  }
  $8 = $a1; //@line 218 "emscripten/supio_emscripten.cpp"
  $9 = $8&255; //@line 218 "emscripten/supio_emscripten.cpp"
  $10 = $1; //@line 218 "emscripten/supio_emscripten.cpp"
  $11 = $10 << 24 >> 24; //@line 218 "emscripten/supio_emscripten.cpp"
  $12 = ($9|0)==($11|0); //@line 218 "emscripten/supio_emscripten.cpp"
  if ($12) {
   $13 = $p; //@line 218 "emscripten/supio_emscripten.cpp"
   $res = $13; //@line 218 "emscripten/supio_emscripten.cpp"
  }
  $14 = $p; //@line 219 "emscripten/supio_emscripten.cpp"
  $15 = (($14) + 1|0); //@line 219 "emscripten/supio_emscripten.cpp"
  $p = $15; //@line 219 "emscripten/supio_emscripten.cpp"
  $16 = $a1; //@line 220 "emscripten/supio_emscripten.cpp"
  $17 = $16&255; //@line 220 "emscripten/supio_emscripten.cpp"
  $18 = $17 & 128; //@line 220 "emscripten/supio_emscripten.cpp"
  $19 = ($18|0)!=(0); //@line 220 "emscripten/supio_emscripten.cpp"
  if ($19) {
   while(1) {
    $20 = $p; //@line 222 "emscripten/supio_emscripten.cpp"
    $21 = HEAP8[$20>>0]|0; //@line 222 "emscripten/supio_emscripten.cpp"
    $a1 = $21; //@line 222 "emscripten/supio_emscripten.cpp"
    $22 = $a1; //@line 222 "emscripten/supio_emscripten.cpp"
    $23 = $22&255; //@line 222 "emscripten/supio_emscripten.cpp"
    $24 = ($23|0)==(0); //@line 222 "emscripten/supio_emscripten.cpp"
    if ($24) {
     label = 9;
     break;
    }
    $25 = $a1; //@line 223 "emscripten/supio_emscripten.cpp"
    $26 = $25&255; //@line 223 "emscripten/supio_emscripten.cpp"
    $27 = $26 & 192; //@line 223 "emscripten/supio_emscripten.cpp"
    $28 = ($27|0)!=(128); //@line 223 "emscripten/supio_emscripten.cpp"
    if ($28) {
     label = 11;
     break;
    }
    $29 = $p; //@line 224 "emscripten/supio_emscripten.cpp"
    $30 = (($29) + 1|0); //@line 224 "emscripten/supio_emscripten.cpp"
    $p = $30; //@line 224 "emscripten/supio_emscripten.cpp"
   }
   if ((label|0) == 9) {
    label = 0;
   }
   else if ((label|0) == 11) {
    label = 0;
   }
  }
 }
 $31 = $res; //@line 228 "emscripten/supio_emscripten.cpp"
 STACKTOP = sp;return ($31|0); //@line 228 "emscripten/supio_emscripten.cpp"
}
function __Z7getpathPcS_i($stmp,$outbuf,$p2) {
 $stmp = $stmp|0;
 $outbuf = $outbuf|0;
 $p2 = $p2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0, $p_dir = 0, $p_drive = 0, $p_ext = 0, $p_fname = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1296|0;
 $tmp = sp + 1040|0;
 $p_drive = sp + 16|0;
 $p_dir = sp + 272|0;
 $p_fname = sp + 528|0;
 $p_ext = sp + 784|0;
 $0 = $stmp;
 $1 = $outbuf;
 $2 = $p2;
 $3 = $1; //@line 269 "emscripten/supio_emscripten.cpp"
 $p = $3; //@line 269 "emscripten/supio_emscripten.cpp"
 $4 = $2; //@line 270 "emscripten/supio_emscripten.cpp"
 $5 = $4 & 16; //@line 270 "emscripten/supio_emscripten.cpp"
 $6 = ($5|0)!=(0); //@line 270 "emscripten/supio_emscripten.cpp"
 if ($6) {
  $7 = $0; //@line 270 "emscripten/supio_emscripten.cpp"
  __Z7strcasePc($7); //@line 270 "emscripten/supio_emscripten.cpp"
 }
 $8 = $0; //@line 271 "emscripten/supio_emscripten.cpp"
 __ZL10_splitpathPcS_S_S_S_($8,$p_drive,$p_dir,$p_fname,$p_ext); //@line 271 "emscripten/supio_emscripten.cpp"
 (_strcat(($p_drive|0),($p_dir|0))|0); //@line 273 "emscripten/supio_emscripten.cpp"
 $9 = $2; //@line 274 "emscripten/supio_emscripten.cpp"
 $10 = $9 & 8; //@line 274 "emscripten/supio_emscripten.cpp"
 $11 = ($10|0)!=(0); //@line 274 "emscripten/supio_emscripten.cpp"
 if ($11) {
  (_strcpy(($tmp|0),($p_fname|0))|0); //@line 275 "emscripten/supio_emscripten.cpp"
  (_strcat(($tmp|0),($p_ext|0))|0); //@line 275 "emscripten/supio_emscripten.cpp"
 } else {
  $12 = $2; //@line 276 "emscripten/supio_emscripten.cpp"
  $13 = $12 & 32; //@line 276 "emscripten/supio_emscripten.cpp"
  $14 = ($13|0)!=(0); //@line 276 "emscripten/supio_emscripten.cpp"
  if ($14) {
   (_strcpy(($tmp|0),($p_drive|0))|0); //@line 277 "emscripten/supio_emscripten.cpp"
  } else {
   $15 = $0; //@line 279 "emscripten/supio_emscripten.cpp"
   (_strcpy(($tmp|0),($15|0))|0); //@line 279 "emscripten/supio_emscripten.cpp"
  }
 }
 $16 = $2; //@line 281 "emscripten/supio_emscripten.cpp"
 $17 = $16 & 7; //@line 281 "emscripten/supio_emscripten.cpp"
 if ((($17|0) == 2)) {
  $24 = $p; //@line 287 "emscripten/supio_emscripten.cpp"
  (_strcpy(($24|0),($p_ext|0))|0); //@line 287 "emscripten/supio_emscripten.cpp"
  STACKTOP = sp;return; //@line 293 "emscripten/supio_emscripten.cpp"
 } else if ((($17|0) == 1)) {
  $18 = (_strlen(($tmp|0))|0); //@line 283 "emscripten/supio_emscripten.cpp"
  $19 = (_strlen(($p_ext|0))|0); //@line 283 "emscripten/supio_emscripten.cpp"
  $20 = (($18) - ($19))|0; //@line 283 "emscripten/supio_emscripten.cpp"
  $21 = $0; //@line 283 "emscripten/supio_emscripten.cpp"
  $22 = (($21) + ($20)|0); //@line 283 "emscripten/supio_emscripten.cpp"
  HEAP8[$22>>0] = 0; //@line 283 "emscripten/supio_emscripten.cpp"
  $23 = $p; //@line 284 "emscripten/supio_emscripten.cpp"
  (_strcpy(($23|0),($tmp|0))|0); //@line 284 "emscripten/supio_emscripten.cpp"
  STACKTOP = sp;return; //@line 293 "emscripten/supio_emscripten.cpp"
 } else {
  $25 = $p; //@line 290 "emscripten/supio_emscripten.cpp"
  (_strcpy(($25|0),($tmp|0))|0); //@line 290 "emscripten/supio_emscripten.cpp"
  STACKTOP = sp;return; //@line 293 "emscripten/supio_emscripten.cpp"
 }
}
function __ZL10_splitpathPcS_S_S_S_($path,$p_drive,$dir,$fname,$ext) {
 $path = $path|0;
 $p_drive = $p_drive|0;
 $dir = $dir|0;
 $fname = $fname|0;
 $ext = $ext|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0, $pathtmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0;
 $pathtmp = sp + 24|0;
 $0 = $path;
 $1 = $p_drive;
 $2 = $dir;
 $3 = $fname;
 $4 = $ext;
 $5 = $1; //@line 238 "emscripten/supio_emscripten.cpp"
 HEAP8[$5>>0] = 0; //@line 238 "emscripten/supio_emscripten.cpp"
 $6 = $0; //@line 239 "emscripten/supio_emscripten.cpp"
 (_strcpy(($pathtmp|0),($6|0))|0); //@line 239 "emscripten/supio_emscripten.cpp"
 $7 = (__Z7strchr2Pcc($pathtmp,46)|0); //@line 241 "emscripten/supio_emscripten.cpp"
 $p = $7; //@line 241 "emscripten/supio_emscripten.cpp"
 $8 = $p; //@line 242 "emscripten/supio_emscripten.cpp"
 $9 = ($8|0)==(0|0); //@line 242 "emscripten/supio_emscripten.cpp"
 if ($9) {
  $10 = $4; //@line 243 "emscripten/supio_emscripten.cpp"
  HEAP8[$10>>0] = 0; //@line 243 "emscripten/supio_emscripten.cpp"
 } else {
  $11 = $4; //@line 245 "emscripten/supio_emscripten.cpp"
  $12 = $p; //@line 245 "emscripten/supio_emscripten.cpp"
  (_strcpy(($11|0),($12|0))|0); //@line 245 "emscripten/supio_emscripten.cpp"
  $13 = $p; //@line 246 "emscripten/supio_emscripten.cpp"
  HEAP8[$13>>0] = 0; //@line 246 "emscripten/supio_emscripten.cpp"
 }
 $14 = (__Z7strchr2Pcc($pathtmp,47)|0); //@line 248 "emscripten/supio_emscripten.cpp"
 $p = $14; //@line 248 "emscripten/supio_emscripten.cpp"
 $15 = $p; //@line 249 "emscripten/supio_emscripten.cpp"
 $16 = ($15|0)==(0|0); //@line 249 "emscripten/supio_emscripten.cpp"
 if ($16) {
  $17 = $2; //@line 250 "emscripten/supio_emscripten.cpp"
  HEAP8[$17>>0] = 0; //@line 250 "emscripten/supio_emscripten.cpp"
  $18 = $3; //@line 251 "emscripten/supio_emscripten.cpp"
  (_strcpy(($18|0),($pathtmp|0))|0); //@line 251 "emscripten/supio_emscripten.cpp"
  STACKTOP = sp;return; //@line 257 "emscripten/supio_emscripten.cpp"
 } else {
  $19 = $3; //@line 253 "emscripten/supio_emscripten.cpp"
  $20 = $p; //@line 253 "emscripten/supio_emscripten.cpp"
  $21 = (($20) + 1|0); //@line 253 "emscripten/supio_emscripten.cpp"
  (_strcpy(($19|0),($21|0))|0); //@line 253 "emscripten/supio_emscripten.cpp"
  $22 = $p; //@line 254 "emscripten/supio_emscripten.cpp"
  $23 = (($22) + 1|0); //@line 254 "emscripten/supio_emscripten.cpp"
  HEAP8[$23>>0] = 0; //@line 254 "emscripten/supio_emscripten.cpp"
  $24 = $2; //@line 255 "emscripten/supio_emscripten.cpp"
  (_strcpy(($24|0),($pathtmp|0))|0); //@line 255 "emscripten/supio_emscripten.cpp"
  STACKTOP = sp;return; //@line 257 "emscripten/supio_emscripten.cpp"
 }
}
function __Z7makedirPc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $name;
 $1 = $0; //@line 298 "emscripten/supio_emscripten.cpp"
 $2 = (_mkdir(($1|0),493)|0); //@line 298 "emscripten/supio_emscripten.cpp"
 STACKTOP = sp;return ($2|0); //@line 298 "emscripten/supio_emscripten.cpp"
}
function __Z9changedirPc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $name;
 $1 = $0; //@line 304 "emscripten/supio_emscripten.cpp"
 $2 = (_chdir(($1|0))|0); //@line 304 "emscripten/supio_emscripten.cpp"
 STACKTOP = sp;return ($2|0); //@line 304 "emscripten/supio_emscripten.cpp"
}
function __Z7delfilePc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $name;
 $1 = $0; //@line 310 "emscripten/supio_emscripten.cpp"
 $2 = (_unlink(($1|0))|0); //@line 310 "emscripten/supio_emscripten.cpp"
 STACKTOP = sp;return ($2|0); //@line 310 "emscripten/supio_emscripten.cpp"
}
function __Z7dirlistPcPS_i($fname,$target,$p3) {
 $fname = $fname|0;
 $target = $target|0;
 $p3 = $p3|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, $curdir = 0, $fd = 0, $fl = 0, $fmask = 0, $p = 0, $sh = 0, $st = 0, $stat_main = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 384|0;
 $st = sp;
 $curdir = sp + 112|0;
 $0 = $fname;
 $1 = $target;
 $2 = $p3;
 $stat_main = 0; //@line 329 "emscripten/supio_emscripten.cpp"
 (_getcwd(($curdir|0),256)|0); //@line 332 "emscripten/supio_emscripten.cpp"
 $3 = (_opendir(($curdir|0))|0); //@line 333 "emscripten/supio_emscripten.cpp"
 $sh = $3; //@line 333 "emscripten/supio_emscripten.cpp"
 $4 = $sh; //@line 335 "emscripten/supio_emscripten.cpp"
 $5 = (_readdir(($4|0))|0); //@line 335 "emscripten/supio_emscripten.cpp"
 $fd = $5; //@line 335 "emscripten/supio_emscripten.cpp"
 while(1) {
  $6 = $fd; //@line 336 "emscripten/supio_emscripten.cpp"
  $7 = ($6|0)!=(0|0); //@line 336 "emscripten/supio_emscripten.cpp"
  if (!($7)) {
   break;
  }
  $8 = $fd; //@line 337 "emscripten/supio_emscripten.cpp"
  $9 = (($8) + 11|0); //@line 337 "emscripten/supio_emscripten.cpp"
  $p = $9; //@line 337 "emscripten/supio_emscripten.cpp"
  $fl = 1; //@line 337 "emscripten/supio_emscripten.cpp"
  $10 = $p; //@line 338 "emscripten/supio_emscripten.cpp"
  $11 = HEAP8[$10>>0]|0; //@line 338 "emscripten/supio_emscripten.cpp"
  $12 = $11 << 24 >> 24; //@line 338 "emscripten/supio_emscripten.cpp"
  $13 = ($12|0)==(0); //@line 338 "emscripten/supio_emscripten.cpp"
  if ($13) {
   $fl = 0; //@line 338 "emscripten/supio_emscripten.cpp"
  }
  $14 = $p; //@line 339 "emscripten/supio_emscripten.cpp"
  $15 = HEAP8[$14>>0]|0; //@line 339 "emscripten/supio_emscripten.cpp"
  $16 = $15 << 24 >> 24; //@line 339 "emscripten/supio_emscripten.cpp"
  $17 = ($16|0)==(46); //@line 339 "emscripten/supio_emscripten.cpp"
  if ($17) {
   $18 = $p; //@line 340 "emscripten/supio_emscripten.cpp"
   $19 = (($18) + 1|0); //@line 340 "emscripten/supio_emscripten.cpp"
   $20 = HEAP8[$19>>0]|0; //@line 340 "emscripten/supio_emscripten.cpp"
   $21 = $20 << 24 >> 24; //@line 340 "emscripten/supio_emscripten.cpp"
   $22 = ($21|0)==(0); //@line 340 "emscripten/supio_emscripten.cpp"
   if ($22) {
    $fl = 0; //@line 340 "emscripten/supio_emscripten.cpp"
   }
   $23 = $p; //@line 341 "emscripten/supio_emscripten.cpp"
   $24 = (($23) + 1|0); //@line 341 "emscripten/supio_emscripten.cpp"
   $25 = HEAP8[$24>>0]|0; //@line 341 "emscripten/supio_emscripten.cpp"
   $26 = $25 << 24 >> 24; //@line 341 "emscripten/supio_emscripten.cpp"
   $27 = ($26|0)==(46); //@line 341 "emscripten/supio_emscripten.cpp"
   if ($27) {
    $28 = $p; //@line 341 "emscripten/supio_emscripten.cpp"
    $29 = (($28) + 2|0); //@line 341 "emscripten/supio_emscripten.cpp"
    $30 = HEAP8[$29>>0]|0; //@line 341 "emscripten/supio_emscripten.cpp"
    $31 = $30 << 24 >> 24; //@line 341 "emscripten/supio_emscripten.cpp"
    $32 = ($31|0)==(0); //@line 341 "emscripten/supio_emscripten.cpp"
    if ($32) {
     $fl = 0; //@line 341 "emscripten/supio_emscripten.cpp"
    }
   }
  }
  $33 = $2; //@line 345 "emscripten/supio_emscripten.cpp"
  $34 = ($33|0)!=(0); //@line 345 "emscripten/supio_emscripten.cpp"
  if ($34) {
   $35 = $fl; //@line 345 "emscripten/supio_emscripten.cpp"
   $36 = ($35|0)==(1); //@line 345 "emscripten/supio_emscripten.cpp"
   if ($36) {
    $37 = $p; //@line 346 "emscripten/supio_emscripten.cpp"
    (_stat(($37|0),($st|0))|0); //@line 346 "emscripten/supio_emscripten.cpp"
    $fmask = 0; //@line 347 "emscripten/supio_emscripten.cpp"
    $38 = $2; //@line 348 "emscripten/supio_emscripten.cpp"
    $39 = $38 & 4; //@line 348 "emscripten/supio_emscripten.cpp"
    $40 = ($39|0)!=(0); //@line 348 "emscripten/supio_emscripten.cpp"
    if ($40) {
     $41 = (($st) + 12|0); //@line 349 "emscripten/supio_emscripten.cpp"
     $42 = HEAP32[$41>>2]|0; //@line 349 "emscripten/supio_emscripten.cpp"
     $43 = $42 & 61440; //@line 349 "emscripten/supio_emscripten.cpp"
     $44 = ($43|0)==(32768); //@line 349 "emscripten/supio_emscripten.cpp"
     if ($44) {
      $45 = $p; //@line 349 "emscripten/supio_emscripten.cpp"
      $46 = HEAP8[$45>>0]|0; //@line 349 "emscripten/supio_emscripten.cpp"
      $47 = $46 << 24 >> 24; //@line 349 "emscripten/supio_emscripten.cpp"
      $48 = ($47|0)!=(46); //@line 349 "emscripten/supio_emscripten.cpp"
      if ($48) {
       $fl = 0; //@line 350 "emscripten/supio_emscripten.cpp"
      } else {
       label = 18;
      }
     } else {
      label = 18;
     }
     if ((label|0) == 18) {
      label = 0;
      $fmask = 3; //@line 352 "emscripten/supio_emscripten.cpp"
     }
    }
    $49 = $fl; //@line 355 "emscripten/supio_emscripten.cpp"
    $50 = ($49|0)==(1); //@line 355 "emscripten/supio_emscripten.cpp"
    if ($50) {
     $51 = $2; //@line 356 "emscripten/supio_emscripten.cpp"
     $52 = $fmask; //@line 356 "emscripten/supio_emscripten.cpp"
     $53 = $51 ^ $52; //@line 356 "emscripten/supio_emscripten.cpp"
     $54 = $53 & 1; //@line 356 "emscripten/supio_emscripten.cpp"
     $55 = ($54|0)!=(0); //@line 356 "emscripten/supio_emscripten.cpp"
     if ($55) {
      $56 = (($st) + 12|0); //@line 356 "emscripten/supio_emscripten.cpp"
      $57 = HEAP32[$56>>2]|0; //@line 356 "emscripten/supio_emscripten.cpp"
      $58 = $57 & 61440; //@line 356 "emscripten/supio_emscripten.cpp"
      $59 = ($58|0)==(16384); //@line 356 "emscripten/supio_emscripten.cpp"
      if ($59) {
       $fl = 0; //@line 356 "emscripten/supio_emscripten.cpp"
      }
     }
     $60 = $2; //@line 357 "emscripten/supio_emscripten.cpp"
     $61 = $fmask; //@line 357 "emscripten/supio_emscripten.cpp"
     $62 = $60 ^ $61; //@line 357 "emscripten/supio_emscripten.cpp"
     $63 = $62 & 2; //@line 357 "emscripten/supio_emscripten.cpp"
     $64 = ($63|0)!=(0); //@line 357 "emscripten/supio_emscripten.cpp"
     if ($64) {
      $65 = $p; //@line 357 "emscripten/supio_emscripten.cpp"
      $66 = HEAP8[$65>>0]|0; //@line 357 "emscripten/supio_emscripten.cpp"
      $67 = $66 << 24 >> 24; //@line 357 "emscripten/supio_emscripten.cpp"
      $68 = ($67|0)==(46); //@line 357 "emscripten/supio_emscripten.cpp"
      if ($68) {
       $fl = 0; //@line 357 "emscripten/supio_emscripten.cpp"
      }
     }
    }
   }
  }
  $69 = $fl; //@line 362 "emscripten/supio_emscripten.cpp"
  $70 = ($69|0)!=(0); //@line 362 "emscripten/supio_emscripten.cpp"
  if ($70) {
   $71 = $p; //@line 363 "emscripten/supio_emscripten.cpp"
   $72 = $0; //@line 363 "emscripten/supio_emscripten.cpp"
   $73 = (__ZL8wildcardPcS_($71,$72)|0); //@line 363 "emscripten/supio_emscripten.cpp"
   $fl = $73; //@line 363 "emscripten/supio_emscripten.cpp"
  }
  $74 = $fl; //@line 366 "emscripten/supio_emscripten.cpp"
  $75 = ($74|0)!=(0); //@line 366 "emscripten/supio_emscripten.cpp"
  if ($75) {
   $76 = $stat_main; //@line 367 "emscripten/supio_emscripten.cpp"
   $77 = (($76) + 1)|0; //@line 367 "emscripten/supio_emscripten.cpp"
   $stat_main = $77; //@line 367 "emscripten/supio_emscripten.cpp"
   $78 = $1; //@line 368 "emscripten/supio_emscripten.cpp"
   $79 = $p; //@line 368 "emscripten/supio_emscripten.cpp"
   __Z8sbStrAddPPcS_($78,$79); //@line 368 "emscripten/supio_emscripten.cpp"
   $80 = $1; //@line 369 "emscripten/supio_emscripten.cpp"
   __Z8sbStrAddPPcS_($80,29592); //@line 369 "emscripten/supio_emscripten.cpp"
  }
  $81 = $sh; //@line 371 "emscripten/supio_emscripten.cpp"
  $82 = (_readdir(($81|0))|0); //@line 371 "emscripten/supio_emscripten.cpp"
  $fd = $82; //@line 371 "emscripten/supio_emscripten.cpp"
 }
 $83 = $sh; //@line 373 "emscripten/supio_emscripten.cpp"
 (_closedir(($83|0))|0); //@line 373 "emscripten/supio_emscripten.cpp"
 $84 = $stat_main; //@line 374 "emscripten/supio_emscripten.cpp"
 STACKTOP = sp;return ($84|0); //@line 374 "emscripten/supio_emscripten.cpp"
}
function __ZL8wildcardPcS_($text,$wc) {
 $text = $text|0;
 $wc = $wc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $text;
 $2 = $wc;
 $3 = $2; //@line 57 "emscripten/supio_emscripten.cpp"
 $4 = HEAP8[$3>>0]|0; //@line 57 "emscripten/supio_emscripten.cpp"
 $5 = $4 << 24 >> 24; //@line 57 "emscripten/supio_emscripten.cpp"
 $6 = ($5|0)==(0); //@line 57 "emscripten/supio_emscripten.cpp"
 if ($6) {
  $7 = $1; //@line 57 "emscripten/supio_emscripten.cpp"
  $8 = HEAP8[$7>>0]|0; //@line 57 "emscripten/supio_emscripten.cpp"
  $9 = $8 << 24 >> 24; //@line 57 "emscripten/supio_emscripten.cpp"
  $10 = ($9|0)==(0); //@line 57 "emscripten/supio_emscripten.cpp"
  if ($10) {
   $0 = 1; //@line 58 "emscripten/supio_emscripten.cpp"
   $74 = $0; //@line 79 "emscripten/supio_emscripten.cpp"
   STACKTOP = sp;return ($74|0); //@line 79 "emscripten/supio_emscripten.cpp"
  }
 }
 $11 = $2; //@line 60 "emscripten/supio_emscripten.cpp"
 $12 = HEAP8[$11>>0]|0; //@line 60 "emscripten/supio_emscripten.cpp"
 $13 = $12 << 24 >> 24; //@line 60 "emscripten/supio_emscripten.cpp"
 $14 = ($13|0)==(42); //@line 60 "emscripten/supio_emscripten.cpp"
 do {
  if ($14) {
   $15 = $1; //@line 61 "emscripten/supio_emscripten.cpp"
   $16 = HEAP8[$15>>0]|0; //@line 61 "emscripten/supio_emscripten.cpp"
   $17 = $16 << 24 >> 24; //@line 61 "emscripten/supio_emscripten.cpp"
   $18 = ($17|0)==(0); //@line 61 "emscripten/supio_emscripten.cpp"
   if ($18) {
    $19 = $2; //@line 61 "emscripten/supio_emscripten.cpp"
    $20 = (($19) + 1|0); //@line 61 "emscripten/supio_emscripten.cpp"
    $21 = HEAP8[$20>>0]|0; //@line 61 "emscripten/supio_emscripten.cpp"
    $22 = $21 << 24 >> 24; //@line 61 "emscripten/supio_emscripten.cpp"
    $23 = ($22|0)==(0); //@line 61 "emscripten/supio_emscripten.cpp"
    if ($23) {
     $0 = 1; //@line 62 "emscripten/supio_emscripten.cpp"
     $74 = $0; //@line 79 "emscripten/supio_emscripten.cpp"
     STACKTOP = sp;return ($74|0); //@line 79 "emscripten/supio_emscripten.cpp"
    }
   }
   $24 = $1; //@line 63 "emscripten/supio_emscripten.cpp"
   $25 = HEAP8[$24>>0]|0; //@line 63 "emscripten/supio_emscripten.cpp"
   $26 = $25 << 24 >> 24; //@line 63 "emscripten/supio_emscripten.cpp"
   $27 = ($26|0)==(0); //@line 63 "emscripten/supio_emscripten.cpp"
   if ($27) {
    $0 = 0; //@line 64 "emscripten/supio_emscripten.cpp"
    $74 = $0; //@line 79 "emscripten/supio_emscripten.cpp"
    STACKTOP = sp;return ($74|0); //@line 79 "emscripten/supio_emscripten.cpp"
   }
   $28 = $2; //@line 66 "emscripten/supio_emscripten.cpp"
   $29 = (($28) + 1|0); //@line 66 "emscripten/supio_emscripten.cpp"
   $30 = HEAP8[$29>>0]|0; //@line 66 "emscripten/supio_emscripten.cpp"
   $31 = $30 << 24 >> 24; //@line 66 "emscripten/supio_emscripten.cpp"
   $32 = $1; //@line 66 "emscripten/supio_emscripten.cpp"
   $33 = HEAP8[$32>>0]|0; //@line 66 "emscripten/supio_emscripten.cpp"
   $34 = $33 << 24 >> 24; //@line 66 "emscripten/supio_emscripten.cpp"
   $35 = ($31|0)==($34|0); //@line 66 "emscripten/supio_emscripten.cpp"
   $36 = $35&1; //@line 66 "emscripten/supio_emscripten.cpp"
   $37 = $2; //@line 66 "emscripten/supio_emscripten.cpp"
   $38 = (($37) + 1|0); //@line 66 "emscripten/supio_emscripten.cpp"
   $39 = HEAP8[$38>>0]|0; //@line 66 "emscripten/supio_emscripten.cpp"
   $40 = $39 << 24 >> 24; //@line 66 "emscripten/supio_emscripten.cpp"
   $41 = ($40|0)==(42); //@line 66 "emscripten/supio_emscripten.cpp"
   $42 = $41&1; //@line 66 "emscripten/supio_emscripten.cpp"
   $43 = $36 | $42; //@line 66 "emscripten/supio_emscripten.cpp"
   $44 = ($43|0)!=(0); //@line 66 "emscripten/supio_emscripten.cpp"
   do {
    if ($44) {
     $45 = $1; //@line 67 "emscripten/supio_emscripten.cpp"
     $46 = $2; //@line 67 "emscripten/supio_emscripten.cpp"
     $47 = (($46) + 1|0); //@line 67 "emscripten/supio_emscripten.cpp"
     $48 = (__ZL8wildcardPcS_($45,$47)|0); //@line 67 "emscripten/supio_emscripten.cpp"
     $49 = ($48|0)!=(0); //@line 67 "emscripten/supio_emscripten.cpp"
     if (!($49)) {
      break;
     }
     $0 = 1; //@line 68 "emscripten/supio_emscripten.cpp"
     $74 = $0; //@line 79 "emscripten/supio_emscripten.cpp"
     STACKTOP = sp;return ($74|0); //@line 79 "emscripten/supio_emscripten.cpp"
    }
   } while(0);
   $50 = $1; //@line 71 "emscripten/supio_emscripten.cpp"
   $51 = HEAP8[$50>>0]|0; //@line 71 "emscripten/supio_emscripten.cpp"
   $52 = $51 << 24 >> 24; //@line 71 "emscripten/supio_emscripten.cpp"
   $53 = ($52|0)!=(0); //@line 71 "emscripten/supio_emscripten.cpp"
   if (!($53)) {
    break;
   }
   $54 = $1; //@line 72 "emscripten/supio_emscripten.cpp"
   $55 = (($54) + 1|0); //@line 72 "emscripten/supio_emscripten.cpp"
   $56 = $2; //@line 72 "emscripten/supio_emscripten.cpp"
   $57 = (__ZL8wildcardPcS_($55,$56)|0); //@line 72 "emscripten/supio_emscripten.cpp"
   $0 = $57; //@line 72 "emscripten/supio_emscripten.cpp"
   $74 = $0; //@line 79 "emscripten/supio_emscripten.cpp"
   STACKTOP = sp;return ($74|0); //@line 79 "emscripten/supio_emscripten.cpp"
  }
 } while(0);
 $58 = $1; //@line 75 "emscripten/supio_emscripten.cpp"
 $59 = HEAP8[$58>>0]|0; //@line 75 "emscripten/supio_emscripten.cpp"
 $60 = $59 << 24 >> 24; //@line 75 "emscripten/supio_emscripten.cpp"
 $61 = ($60|0)!=(0); //@line 75 "emscripten/supio_emscripten.cpp"
 if ($61) {
  $62 = $2; //@line 75 "emscripten/supio_emscripten.cpp"
  $63 = HEAP8[$62>>0]|0; //@line 75 "emscripten/supio_emscripten.cpp"
  $64 = $63 << 24 >> 24; //@line 75 "emscripten/supio_emscripten.cpp"
  $65 = $1; //@line 75 "emscripten/supio_emscripten.cpp"
  $66 = HEAP8[$65>>0]|0; //@line 75 "emscripten/supio_emscripten.cpp"
  $67 = $66 << 24 >> 24; //@line 75 "emscripten/supio_emscripten.cpp"
  $68 = ($64|0)==($67|0); //@line 75 "emscripten/supio_emscripten.cpp"
  if ($68) {
   $69 = $1; //@line 76 "emscripten/supio_emscripten.cpp"
   $70 = (($69) + 1|0); //@line 76 "emscripten/supio_emscripten.cpp"
   $71 = $2; //@line 76 "emscripten/supio_emscripten.cpp"
   $72 = (($71) + 1|0); //@line 76 "emscripten/supio_emscripten.cpp"
   $73 = (__ZL8wildcardPcS_($70,$72)|0); //@line 76 "emscripten/supio_emscripten.cpp"
   $0 = $73; //@line 76 "emscripten/supio_emscripten.cpp"
   $74 = $0; //@line 79 "emscripten/supio_emscripten.cpp"
   STACKTOP = sp;return ($74|0); //@line 79 "emscripten/supio_emscripten.cpp"
  }
 }
 $0 = 0; //@line 78 "emscripten/supio_emscripten.cpp"
 $74 = $0; //@line 79 "emscripten/supio_emscripten.cpp"
 STACKTOP = sp;return ($74|0); //@line 79 "emscripten/supio_emscripten.cpp"
}
function __Z7gettimei($index) {
 $index = $index|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $lt = 0, $tv = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $tv = sp + 8|0;
 $1 = $index;
 (_gettimeofday(($tv|0),(0|0))|0); //@line 396 "emscripten/supio_emscripten.cpp"
 $2 = (_localtime(($tv|0))|0); //@line 397 "emscripten/supio_emscripten.cpp"
 $lt = $2; //@line 397 "emscripten/supio_emscripten.cpp"
 $3 = $1; //@line 399 "emscripten/supio_emscripten.cpp"
 do {
  switch ($3|0) {
  case 0:  {
   $4 = $lt; //@line 401 "emscripten/supio_emscripten.cpp"
   $5 = (($4) + 20|0); //@line 401 "emscripten/supio_emscripten.cpp"
   $6 = HEAP32[$5>>2]|0; //@line 401 "emscripten/supio_emscripten.cpp"
   $7 = (($6) + 1900)|0; //@line 401 "emscripten/supio_emscripten.cpp"
   $0 = $7; //@line 401 "emscripten/supio_emscripten.cpp"
   break;
  }
  case 1:  {
   $8 = $lt; //@line 403 "emscripten/supio_emscripten.cpp"
   $9 = (($8) + 16|0); //@line 403 "emscripten/supio_emscripten.cpp"
   $10 = HEAP32[$9>>2]|0; //@line 403 "emscripten/supio_emscripten.cpp"
   $11 = (($10) + 1)|0; //@line 403 "emscripten/supio_emscripten.cpp"
   $0 = $11; //@line 403 "emscripten/supio_emscripten.cpp"
   break;
  }
  case 7:  {
   $26 = (($tv) + 4|0); //@line 415 "emscripten/supio_emscripten.cpp"
   $27 = HEAP32[$26>>2]|0; //@line 415 "emscripten/supio_emscripten.cpp"
   $28 = (($27|0) / 10000)&-1; //@line 415 "emscripten/supio_emscripten.cpp"
   $0 = $28; //@line 415 "emscripten/supio_emscripten.cpp"
   break;
  }
  case 4:  {
   $18 = $lt; //@line 409 "emscripten/supio_emscripten.cpp"
   $19 = (($18) + 8|0); //@line 409 "emscripten/supio_emscripten.cpp"
   $20 = HEAP32[$19>>2]|0; //@line 409 "emscripten/supio_emscripten.cpp"
   $0 = $20; //@line 409 "emscripten/supio_emscripten.cpp"
   break;
  }
  case 5:  {
   $21 = $lt; //@line 411 "emscripten/supio_emscripten.cpp"
   $22 = (($21) + 4|0); //@line 411 "emscripten/supio_emscripten.cpp"
   $23 = HEAP32[$22>>2]|0; //@line 411 "emscripten/supio_emscripten.cpp"
   $0 = $23; //@line 411 "emscripten/supio_emscripten.cpp"
   break;
  }
  case 3:  {
   $15 = $lt; //@line 407 "emscripten/supio_emscripten.cpp"
   $16 = (($15) + 12|0); //@line 407 "emscripten/supio_emscripten.cpp"
   $17 = HEAP32[$16>>2]|0; //@line 407 "emscripten/supio_emscripten.cpp"
   $0 = $17; //@line 407 "emscripten/supio_emscripten.cpp"
   break;
  }
  case 6:  {
   $24 = $lt; //@line 413 "emscripten/supio_emscripten.cpp"
   $25 = HEAP32[$24>>2]|0; //@line 413 "emscripten/supio_emscripten.cpp"
   $0 = $25; //@line 413 "emscripten/supio_emscripten.cpp"
   break;
  }
  case 2:  {
   $12 = $lt; //@line 405 "emscripten/supio_emscripten.cpp"
   $13 = (($12) + 24|0); //@line 405 "emscripten/supio_emscripten.cpp"
   $14 = HEAP32[$13>>2]|0; //@line 405 "emscripten/supio_emscripten.cpp"
   $0 = $14; //@line 405 "emscripten/supio_emscripten.cpp"
   break;
  }
  case 8:  {
   $29 = (($tv) + 4|0); //@line 418 "emscripten/supio_emscripten.cpp"
   $30 = HEAP32[$29>>2]|0; //@line 418 "emscripten/supio_emscripten.cpp"
   $31 = (($30|0) % 10000)&-1; //@line 418 "emscripten/supio_emscripten.cpp"
   $0 = $31; //@line 418 "emscripten/supio_emscripten.cpp"
   break;
  }
  default: {
   $0 = 0; //@line 420 "emscripten/supio_emscripten.cpp"
  }
  }
 } while(0);
 $32 = $0; //@line 421 "emscripten/supio_emscripten.cpp"
 STACKTOP = sp;return ($32|0); //@line 421 "emscripten/supio_emscripten.cpp"
}
function __Z9strsp_iniv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[29600>>2] = 0; //@line 428 "emscripten/supio_emscripten.cpp"
 STACKTOP = sp;return; //@line 429 "emscripten/supio_emscripten.cpp"
}
function __Z12strsp_getptrv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[29600>>2]|0; //@line 433 "emscripten/supio_emscripten.cpp"
 STACKTOP = sp;return ($0|0); //@line 433 "emscripten/supio_emscripten.cpp"
}
function __Z9strsp_getPcS_ci($srcstr,$dststr,$splitchr,$len) {
 $srcstr = $srcstr|0;
 $dststr = $dststr|0;
 $splitchr = $splitchr|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $a = 0, $a1 = 0, $a2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $srcstr;
 $1 = $dststr;
 $2 = $splitchr;
 $3 = $len;
 $a = 0; //@line 449 "emscripten/supio_emscripten.cpp"
 while(1) {
  $4 = HEAP32[29600>>2]|0; //@line 451 "emscripten/supio_emscripten.cpp"
  $5 = $0; //@line 451 "emscripten/supio_emscripten.cpp"
  $6 = (($5) + ($4)|0); //@line 451 "emscripten/supio_emscripten.cpp"
  $7 = HEAP8[$6>>0]|0; //@line 451 "emscripten/supio_emscripten.cpp"
  $a1 = $7; //@line 451 "emscripten/supio_emscripten.cpp"
  $8 = $a1; //@line 452 "emscripten/supio_emscripten.cpp"
  $9 = $8&255; //@line 452 "emscripten/supio_emscripten.cpp"
  $10 = ($9|0)==(0); //@line 452 "emscripten/supio_emscripten.cpp"
  if ($10) {
   label = 3;
   break;
  }
  $11 = HEAP32[29600>>2]|0; //@line 453 "emscripten/supio_emscripten.cpp"
  $12 = (($11) + 1)|0; //@line 453 "emscripten/supio_emscripten.cpp"
  HEAP32[29600>>2] = $12; //@line 453 "emscripten/supio_emscripten.cpp"
  $13 = $a1; //@line 455 "emscripten/supio_emscripten.cpp"
  $14 = $13&255; //@line 455 "emscripten/supio_emscripten.cpp"
  $15 = $2; //@line 455 "emscripten/supio_emscripten.cpp"
  $16 = $15 << 24 >> 24; //@line 455 "emscripten/supio_emscripten.cpp"
  $17 = ($14|0)==($16|0); //@line 455 "emscripten/supio_emscripten.cpp"
  if ($17) {
   label = 5;
   break;
  }
  $18 = $a1; //@line 456 "emscripten/supio_emscripten.cpp"
  $19 = $18&255; //@line 456 "emscripten/supio_emscripten.cpp"
  $20 = ($19|0)==(13); //@line 456 "emscripten/supio_emscripten.cpp"
  if ($20) {
   label = 7;
   break;
  }
  $30 = $a1; //@line 461 "emscripten/supio_emscripten.cpp"
  $31 = $30&255; //@line 461 "emscripten/supio_emscripten.cpp"
  $32 = ($31|0)==(10); //@line 461 "emscripten/supio_emscripten.cpp"
  if ($32) {
   label = 11;
   break;
  }
  $37 = $a1; //@line 465 "emscripten/supio_emscripten.cpp"
  $38 = $a; //@line 465 "emscripten/supio_emscripten.cpp"
  $39 = (($38) + 1)|0; //@line 465 "emscripten/supio_emscripten.cpp"
  $a = $39; //@line 465 "emscripten/supio_emscripten.cpp"
  $40 = $1; //@line 465 "emscripten/supio_emscripten.cpp"
  $41 = (($40) + ($38)|0); //@line 465 "emscripten/supio_emscripten.cpp"
  HEAP8[$41>>0] = $37; //@line 465 "emscripten/supio_emscripten.cpp"
  $42 = $a1; //@line 467 "emscripten/supio_emscripten.cpp"
  $43 = $42&255; //@line 467 "emscripten/supio_emscripten.cpp"
  $44 = $43 & 128; //@line 467 "emscripten/supio_emscripten.cpp"
  $45 = ($44|0)!=(0); //@line 467 "emscripten/supio_emscripten.cpp"
  if ($45) {
   while(1) {
    $46 = HEAP32[29600>>2]|0; //@line 469 "emscripten/supio_emscripten.cpp"
    $47 = $0; //@line 469 "emscripten/supio_emscripten.cpp"
    $48 = (($47) + ($46)|0); //@line 469 "emscripten/supio_emscripten.cpp"
    $49 = HEAP8[$48>>0]|0; //@line 469 "emscripten/supio_emscripten.cpp"
    $a1 = $49; //@line 469 "emscripten/supio_emscripten.cpp"
    $50 = $a1; //@line 470 "emscripten/supio_emscripten.cpp"
    $51 = $50&255; //@line 470 "emscripten/supio_emscripten.cpp"
    $52 = ($51|0)==(0); //@line 470 "emscripten/supio_emscripten.cpp"
    if ($52) {
     label = 15;
     break;
    }
    $53 = $a1; //@line 471 "emscripten/supio_emscripten.cpp"
    $54 = $53&255; //@line 471 "emscripten/supio_emscripten.cpp"
    $55 = $54 & 192; //@line 471 "emscripten/supio_emscripten.cpp"
    $56 = ($55|0)!=(128); //@line 471 "emscripten/supio_emscripten.cpp"
    if ($56) {
     label = 17;
     break;
    }
    $57 = HEAP32[29600>>2]|0; //@line 472 "emscripten/supio_emscripten.cpp"
    $58 = (($57) + 1)|0; //@line 472 "emscripten/supio_emscripten.cpp"
    HEAP32[29600>>2] = $58; //@line 472 "emscripten/supio_emscripten.cpp"
    $59 = $a1; //@line 473 "emscripten/supio_emscripten.cpp"
    $60 = $a; //@line 473 "emscripten/supio_emscripten.cpp"
    $61 = (($60) + 1)|0; //@line 473 "emscripten/supio_emscripten.cpp"
    $a = $61; //@line 473 "emscripten/supio_emscripten.cpp"
    $62 = $1; //@line 473 "emscripten/supio_emscripten.cpp"
    $63 = (($62) + ($60)|0); //@line 473 "emscripten/supio_emscripten.cpp"
    HEAP8[$63>>0] = $59; //@line 473 "emscripten/supio_emscripten.cpp"
   }
   if ((label|0) == 15) {
    label = 0;
   }
   else if ((label|0) == 17) {
    label = 0;
   }
  }
  $64 = $a; //@line 476 "emscripten/supio_emscripten.cpp"
  $65 = $3; //@line 476 "emscripten/supio_emscripten.cpp"
  $66 = ($64|0)>=($65|0); //@line 476 "emscripten/supio_emscripten.cpp"
  if ($66) {
   label = 21;
   break;
  }
 }
 if ((label|0) == 3) {
 }
 else if ((label|0) == 5) {
 }
 else if ((label|0) == 7) {
  $21 = HEAP32[29600>>2]|0; //@line 457 "emscripten/supio_emscripten.cpp"
  $22 = $0; //@line 457 "emscripten/supio_emscripten.cpp"
  $23 = (($22) + ($21)|0); //@line 457 "emscripten/supio_emscripten.cpp"
  $24 = HEAP8[$23>>0]|0; //@line 457 "emscripten/supio_emscripten.cpp"
  $a2 = $24; //@line 457 "emscripten/supio_emscripten.cpp"
  $25 = $a2; //@line 458 "emscripten/supio_emscripten.cpp"
  $26 = $25&255; //@line 458 "emscripten/supio_emscripten.cpp"
  $27 = ($26|0)==(10); //@line 458 "emscripten/supio_emscripten.cpp"
  if ($27) {
   $28 = HEAP32[29600>>2]|0; //@line 458 "emscripten/supio_emscripten.cpp"
   $29 = (($28) + 1)|0; //@line 458 "emscripten/supio_emscripten.cpp"
   HEAP32[29600>>2] = $29; //@line 458 "emscripten/supio_emscripten.cpp"
  }
 }
 else if ((label|0) == 11) {
  $33 = HEAP32[29600>>2]|0; //@line 462 "emscripten/supio_emscripten.cpp"
  $34 = $0; //@line 462 "emscripten/supio_emscripten.cpp"
  $35 = (($34) + ($33)|0); //@line 462 "emscripten/supio_emscripten.cpp"
  $36 = HEAP8[$35>>0]|0; //@line 462 "emscripten/supio_emscripten.cpp"
  $a2 = $36; //@line 462 "emscripten/supio_emscripten.cpp"
 }
 else if ((label|0) == 21) {
 }
 $67 = $a; //@line 478 "emscripten/supio_emscripten.cpp"
 $68 = $1; //@line 478 "emscripten/supio_emscripten.cpp"
 $69 = (($68) + ($67)|0); //@line 478 "emscripten/supio_emscripten.cpp"
 HEAP8[$69>>0] = 0; //@line 478 "emscripten/supio_emscripten.cpp"
 $70 = $a1; //@line 479 "emscripten/supio_emscripten.cpp"
 $71 = $70&255; //@line 479 "emscripten/supio_emscripten.cpp"
 STACKTOP = sp;return ($71|0); //@line 479 "emscripten/supio_emscripten.cpp"
}
function __Z8GetLimitiii($num,$min,$max) {
 $num = $num|0;
 $min = $min|0;
 $max = $max|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $num;
 $2 = $min;
 $3 = $max;
 $4 = $1; //@line 505 "emscripten/supio_emscripten.cpp"
 $5 = $3; //@line 505 "emscripten/supio_emscripten.cpp"
 $6 = ($4|0)>($5|0); //@line 505 "emscripten/supio_emscripten.cpp"
 do {
  if ($6) {
   $7 = $3; //@line 505 "emscripten/supio_emscripten.cpp"
   $0 = $7; //@line 505 "emscripten/supio_emscripten.cpp"
  } else {
   $8 = $1; //@line 506 "emscripten/supio_emscripten.cpp"
   $9 = $2; //@line 506 "emscripten/supio_emscripten.cpp"
   $10 = ($8|0)<($9|0); //@line 506 "emscripten/supio_emscripten.cpp"
   if ($10) {
    $11 = $2; //@line 506 "emscripten/supio_emscripten.cpp"
    $0 = $11; //@line 506 "emscripten/supio_emscripten.cpp"
    break;
   } else {
    $12 = $1; //@line 507 "emscripten/supio_emscripten.cpp"
    $0 = $12; //@line 507 "emscripten/supio_emscripten.cpp"
    break;
   }
  }
 } while(0);
 $13 = $0; //@line 508 "emscripten/supio_emscripten.cpp"
 STACKTOP = sp;return ($13|0); //@line 508 "emscripten/supio_emscripten.cpp"
}
function __Z4htoiPc($str) {
 $str = $str|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a1 = 0, $conv = 0, $d = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $str;
 $conv = 0; //@line 543 "emscripten/supio_emscripten.cpp"
 $d = 0; //@line 544 "emscripten/supio_emscripten.cpp"
 while(1) {
  $1 = $d; //@line 546 "emscripten/supio_emscripten.cpp"
  $2 = (($1) + 1)|0; //@line 546 "emscripten/supio_emscripten.cpp"
  $d = $2; //@line 546 "emscripten/supio_emscripten.cpp"
  $3 = $0; //@line 546 "emscripten/supio_emscripten.cpp"
  $4 = (($3) + ($1)|0); //@line 546 "emscripten/supio_emscripten.cpp"
  $5 = HEAP8[$4>>0]|0; //@line 546 "emscripten/supio_emscripten.cpp"
  $a1 = $5; //@line 546 "emscripten/supio_emscripten.cpp"
  $6 = $a1; //@line 546 "emscripten/supio_emscripten.cpp"
  $7 = $6 << 24 >> 24; //@line 546 "emscripten/supio_emscripten.cpp"
  $8 = ($7|0)==(0); //@line 546 "emscripten/supio_emscripten.cpp"
  if ($8) {
   break;
  }
  $9 = $conv; //@line 547 "emscripten/supio_emscripten.cpp"
  $10 = $9 << 4; //@line 547 "emscripten/supio_emscripten.cpp"
  $11 = $a1; //@line 547 "emscripten/supio_emscripten.cpp"
  $12 = (__ZL8htoi_subc($11)|0); //@line 547 "emscripten/supio_emscripten.cpp"
  $13 = (($10) + ($12))|0; //@line 547 "emscripten/supio_emscripten.cpp"
  $conv = $13; //@line 547 "emscripten/supio_emscripten.cpp"
 }
 $14 = $conv; //@line 549 "emscripten/supio_emscripten.cpp"
 STACKTOP = sp;return ($14|0); //@line 549 "emscripten/supio_emscripten.cpp"
}
function __ZL8htoi_subc($hstr) {
 $hstr = $hstr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $hstr;
 $2 = $1; //@line 531 "emscripten/supio_emscripten.cpp"
 $3 = $2 << 24 >> 24; //@line 531 "emscripten/supio_emscripten.cpp"
 $4 = (_tolower($3)|0); //@line 531 "emscripten/supio_emscripten.cpp"
 $5 = $4&255; //@line 531 "emscripten/supio_emscripten.cpp"
 $a1 = $5; //@line 531 "emscripten/supio_emscripten.cpp"
 $6 = $a1; //@line 532 "emscripten/supio_emscripten.cpp"
 $7 = $6 << 24 >> 24; //@line 532 "emscripten/supio_emscripten.cpp"
 $8 = ($7|0)>=(48); //@line 532 "emscripten/supio_emscripten.cpp"
 if ($8) {
  $9 = $a1; //@line 532 "emscripten/supio_emscripten.cpp"
  $10 = $9 << 24 >> 24; //@line 532 "emscripten/supio_emscripten.cpp"
  $11 = ($10|0)<=(57); //@line 532 "emscripten/supio_emscripten.cpp"
  if ($11) {
   $12 = $a1; //@line 532 "emscripten/supio_emscripten.cpp"
   $13 = $12 << 24 >> 24; //@line 532 "emscripten/supio_emscripten.cpp"
   $14 = (($13) - 48)|0; //@line 532 "emscripten/supio_emscripten.cpp"
   $0 = $14; //@line 532 "emscripten/supio_emscripten.cpp"
   $25 = $0; //@line 535 "emscripten/supio_emscripten.cpp"
   STACKTOP = sp;return ($25|0); //@line 535 "emscripten/supio_emscripten.cpp"
  }
 }
 $15 = $a1; //@line 533 "emscripten/supio_emscripten.cpp"
 $16 = $15 << 24 >> 24; //@line 533 "emscripten/supio_emscripten.cpp"
 $17 = ($16|0)>=(97); //@line 533 "emscripten/supio_emscripten.cpp"
 if ($17) {
  $18 = $a1; //@line 533 "emscripten/supio_emscripten.cpp"
  $19 = $18 << 24 >> 24; //@line 533 "emscripten/supio_emscripten.cpp"
  $20 = ($19|0)<=(102); //@line 533 "emscripten/supio_emscripten.cpp"
  if ($20) {
   $21 = $a1; //@line 533 "emscripten/supio_emscripten.cpp"
   $22 = $21 << 24 >> 24; //@line 533 "emscripten/supio_emscripten.cpp"
   $23 = (($22) - 97)|0; //@line 533 "emscripten/supio_emscripten.cpp"
   $24 = (($23) + 10)|0; //@line 533 "emscripten/supio_emscripten.cpp"
   $0 = $24; //@line 533 "emscripten/supio_emscripten.cpp"
   $25 = $0; //@line 535 "emscripten/supio_emscripten.cpp"
   STACKTOP = sp;return ($25|0); //@line 535 "emscripten/supio_emscripten.cpp"
  }
 }
 $0 = 0; //@line 534 "emscripten/supio_emscripten.cpp"
 $25 = $0; //@line 535 "emscripten/supio_emscripten.cpp"
 STACKTOP = sp;return ($25|0); //@line 535 "emscripten/supio_emscripten.cpp"
}
function __Z7strchr3PciiPS_($target,$code,$sw,$findptr) {
 $target = $target|0;
 $code = $code|0;
 $sw = $sw|0;
 $findptr = $findptr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a1 = 0, $code1 = 0, $code2 = 0, $p = 0, $pres = 0, $res = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $1 = $target;
 $2 = $code;
 $3 = $sw;
 $4 = $findptr;
 $5 = $1; //@line 572 "emscripten/supio_emscripten.cpp"
 $p = $5; //@line 572 "emscripten/supio_emscripten.cpp"
 $6 = $2; //@line 573 "emscripten/supio_emscripten.cpp"
 $7 = $6 & 255; //@line 573 "emscripten/supio_emscripten.cpp"
 $8 = $7&255; //@line 573 "emscripten/supio_emscripten.cpp"
 $code1 = $8; //@line 573 "emscripten/supio_emscripten.cpp"
 $code2 = 0; //@line 574 "emscripten/supio_emscripten.cpp"
 $res = 0; //@line 576 "emscripten/supio_emscripten.cpp"
 $pres = 0; //@line 577 "emscripten/supio_emscripten.cpp"
 $9 = $4; //@line 578 "emscripten/supio_emscripten.cpp"
 HEAP32[$9>>2] = 0; //@line 578 "emscripten/supio_emscripten.cpp"
 while(1) {
  $10 = $p; //@line 581 "emscripten/supio_emscripten.cpp"
  $11 = HEAP8[$10>>0]|0; //@line 581 "emscripten/supio_emscripten.cpp"
  $a1 = $11; //@line 581 "emscripten/supio_emscripten.cpp"
  $12 = $a1; //@line 581 "emscripten/supio_emscripten.cpp"
  $13 = $12&255; //@line 581 "emscripten/supio_emscripten.cpp"
  $14 = ($13|0)==(0); //@line 581 "emscripten/supio_emscripten.cpp"
  if ($14) {
   label = 3;
   break;
  }
  $15 = $a1; //@line 582 "emscripten/supio_emscripten.cpp"
  $16 = $15&255; //@line 582 "emscripten/supio_emscripten.cpp"
  $17 = $code1; //@line 582 "emscripten/supio_emscripten.cpp"
  $18 = $17&255; //@line 582 "emscripten/supio_emscripten.cpp"
  $19 = ($16|0)==($18|0); //@line 582 "emscripten/supio_emscripten.cpp"
  if ($19) {
   $20 = $p; //@line 583 "emscripten/supio_emscripten.cpp"
   $res = $20; //@line 583 "emscripten/supio_emscripten.cpp"
  }
  $21 = $p; //@line 585 "emscripten/supio_emscripten.cpp"
  $22 = (($21) + 1|0); //@line 585 "emscripten/supio_emscripten.cpp"
  $p = $22; //@line 585 "emscripten/supio_emscripten.cpp"
  $23 = $a1; //@line 586 "emscripten/supio_emscripten.cpp"
  $24 = $23&255; //@line 586 "emscripten/supio_emscripten.cpp"
  $25 = $24 & 128; //@line 586 "emscripten/supio_emscripten.cpp"
  $26 = ($25|0)!=(0); //@line 586 "emscripten/supio_emscripten.cpp"
  if ($26) {
   while(1) {
    $27 = $p; //@line 588 "emscripten/supio_emscripten.cpp"
    $28 = HEAP8[$27>>0]|0; //@line 588 "emscripten/supio_emscripten.cpp"
    $a1 = $28; //@line 588 "emscripten/supio_emscripten.cpp"
    $29 = $a1; //@line 588 "emscripten/supio_emscripten.cpp"
    $30 = $29&255; //@line 588 "emscripten/supio_emscripten.cpp"
    $31 = ($30|0)==(0); //@line 588 "emscripten/supio_emscripten.cpp"
    if ($31) {
     label = 9;
     break;
    }
    $32 = $a1; //@line 589 "emscripten/supio_emscripten.cpp"
    $33 = $32&255; //@line 589 "emscripten/supio_emscripten.cpp"
    $34 = $33 & 192; //@line 589 "emscripten/supio_emscripten.cpp"
    $35 = ($34|0)!=(128); //@line 589 "emscripten/supio_emscripten.cpp"
    if ($35) {
     label = 11;
     break;
    }
    $36 = $p; //@line 590 "emscripten/supio_emscripten.cpp"
    $37 = (($36) + 1|0); //@line 590 "emscripten/supio_emscripten.cpp"
    $p = $37; //@line 590 "emscripten/supio_emscripten.cpp"
   }
   if ((label|0) == 9) {
    label = 0;
   }
   else if ((label|0) == 11) {
    label = 0;
   }
  }
  $38 = $res; //@line 593 "emscripten/supio_emscripten.cpp"
  $39 = ($38|0)!=(0|0); //@line 593 "emscripten/supio_emscripten.cpp"
  if ($39) {
   $40 = $res; //@line 593 "emscripten/supio_emscripten.cpp"
   $41 = $4; //@line 593 "emscripten/supio_emscripten.cpp"
   HEAP32[$41>>2] = $40; //@line 593 "emscripten/supio_emscripten.cpp"
   $42 = $p; //@line 593 "emscripten/supio_emscripten.cpp"
   $pres = $42; //@line 593 "emscripten/supio_emscripten.cpp"
   $res = 0; //@line 593 "emscripten/supio_emscripten.cpp"
  }
  $43 = $3; //@line 595 "emscripten/supio_emscripten.cpp"
  if ((($43|0) == 2)) {
   label = 20;
   break;
  } else if ((($43|0) == 1)) {
   $44 = $4; //@line 597 "emscripten/supio_emscripten.cpp"
   $45 = HEAP32[$44>>2]|0; //@line 597 "emscripten/supio_emscripten.cpp"
   $46 = ($45|0)!=(0|0); //@line 597 "emscripten/supio_emscripten.cpp"
   if ($46) {
    label = 18;
    break;
   }
  }
 }
 if ((label|0) == 3) {
  $49 = $pres; //@line 603 "emscripten/supio_emscripten.cpp"
  $0 = $49; //@line 603 "emscripten/supio_emscripten.cpp"
  $50 = $0; //@line 604 "emscripten/supio_emscripten.cpp"
  STACKTOP = sp;return ($50|0); //@line 604 "emscripten/supio_emscripten.cpp"
 }
 else if ((label|0) == 18) {
  $47 = $p; //@line 597 "emscripten/supio_emscripten.cpp"
  $0 = $47; //@line 597 "emscripten/supio_emscripten.cpp"
  $50 = $0; //@line 604 "emscripten/supio_emscripten.cpp"
  STACKTOP = sp;return ($50|0); //@line 604 "emscripten/supio_emscripten.cpp"
 }
 else if ((label|0) == 20) {
  $48 = $p; //@line 600 "emscripten/supio_emscripten.cpp"
  $0 = $48; //@line 600 "emscripten/supio_emscripten.cpp"
  $50 = $0; //@line 604 "emscripten/supio_emscripten.cpp"
  STACKTOP = sp;return ($50|0); //@line 604 "emscripten/supio_emscripten.cpp"
 }
 return 0|0;
}
function __Z9TrimCodeRPci($p,$code) {
 $p = $p|0;
 $code = $code|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $ss = 0, $ss2 = 0, $sslast = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $ss2 = sp + 8|0;
 $0 = $p;
 $1 = $code;
 while(1) {
  $2 = $0; //@line 616 "emscripten/supio_emscripten.cpp"
  $3 = (_strlen(($2|0))|0); //@line 616 "emscripten/supio_emscripten.cpp"
  $i = $3; //@line 616 "emscripten/supio_emscripten.cpp"
  $4 = $0; //@line 617 "emscripten/supio_emscripten.cpp"
  $5 = $i; //@line 617 "emscripten/supio_emscripten.cpp"
  $6 = (($4) + ($5)|0); //@line 617 "emscripten/supio_emscripten.cpp"
  $sslast = $6; //@line 617 "emscripten/supio_emscripten.cpp"
  $7 = $0; //@line 618 "emscripten/supio_emscripten.cpp"
  $8 = $1; //@line 618 "emscripten/supio_emscripten.cpp"
  $9 = (__Z7strchr3PciiPS_($7,$8,0,$ss2)|0); //@line 618 "emscripten/supio_emscripten.cpp"
  $ss = $9; //@line 618 "emscripten/supio_emscripten.cpp"
  $10 = HEAP32[$ss2>>2]|0; //@line 619 "emscripten/supio_emscripten.cpp"
  $11 = ($10|0)==(0|0); //@line 619 "emscripten/supio_emscripten.cpp"
  if ($11) {
   label = 3;
   break;
  }
  $12 = $ss; //@line 620 "emscripten/supio_emscripten.cpp"
  $13 = $sslast; //@line 620 "emscripten/supio_emscripten.cpp"
  $14 = ($12|0)!=($13|0); //@line 620 "emscripten/supio_emscripten.cpp"
  if ($14) {
   label = 5;
   break;
  }
  $15 = HEAP32[$ss2>>2]|0; //@line 621 "emscripten/supio_emscripten.cpp"
  HEAP8[$15>>0] = 0; //@line 621 "emscripten/supio_emscripten.cpp"
 }
 if ((label|0) == 3) {
  STACKTOP = sp;return; //@line 623 "emscripten/supio_emscripten.cpp"
 }
 else if ((label|0) == 5) {
  STACKTOP = sp;return; //@line 623 "emscripten/supio_emscripten.cpp"
 }
}
function __Z8TrimCodePci($p,$code) {
 $p = $p|0;
 $code = $code|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $ss = 0, $ss2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $ss2 = sp + 8|0;
 $0 = $p;
 $1 = $code;
 while(1) {
  $2 = $0; //@line 633 "emscripten/supio_emscripten.cpp"
  $3 = $1; //@line 633 "emscripten/supio_emscripten.cpp"
  $4 = (__Z7strchr3PciiPS_($2,$3,1,$ss2)|0); //@line 633 "emscripten/supio_emscripten.cpp"
  $ss = $4; //@line 633 "emscripten/supio_emscripten.cpp"
  $5 = HEAP32[$ss2>>2]|0; //@line 634 "emscripten/supio_emscripten.cpp"
  $6 = ($5|0)==(0|0); //@line 634 "emscripten/supio_emscripten.cpp"
  if ($6) {
   break;
  }
  $7 = HEAP32[$ss2>>2]|0; //@line 635 "emscripten/supio_emscripten.cpp"
  $8 = $ss; //@line 635 "emscripten/supio_emscripten.cpp"
  (_strcpy(($7|0),($8|0))|0); //@line 635 "emscripten/supio_emscripten.cpp"
 }
 STACKTOP = sp;return; //@line 637 "emscripten/supio_emscripten.cpp"
}
function __Z9TrimCodeLPci($p,$code) {
 $p = $p|0;
 $code = $code|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $ss = 0, $ss2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $ss2 = sp + 8|0;
 $0 = $p;
 $1 = $code;
 while(1) {
  $2 = $0; //@line 647 "emscripten/supio_emscripten.cpp"
  $3 = $1; //@line 647 "emscripten/supio_emscripten.cpp"
  $4 = (__Z7strchr3PciiPS_($2,$3,2,$ss2)|0); //@line 647 "emscripten/supio_emscripten.cpp"
  $ss = $4; //@line 647 "emscripten/supio_emscripten.cpp"
  $5 = HEAP32[$ss2>>2]|0; //@line 648 "emscripten/supio_emscripten.cpp"
  $6 = ($5|0)==(0|0); //@line 648 "emscripten/supio_emscripten.cpp"
  if ($6) {
   break;
  }
  $7 = HEAP32[$ss2>>2]|0; //@line 649 "emscripten/supio_emscripten.cpp"
  $8 = $ss; //@line 649 "emscripten/supio_emscripten.cpp"
  (_strcpy(($7|0),($8|0))|0); //@line 649 "emscripten/supio_emscripten.cpp"
 }
 STACKTOP = sp;return; //@line 651 "emscripten/supio_emscripten.cpp"
}
function __Z15ReplaceSetMatchPcS_($src,$match) {
 $src = $src|0;
 $match = $match|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $src;
 $1 = $match;
 $2 = $0; //@line 671 "emscripten/supio_emscripten.cpp"
 HEAP32[29608>>2] = $2; //@line 671 "emscripten/supio_emscripten.cpp"
 $3 = HEAP32[29608>>2]|0; //@line 672 "emscripten/supio_emscripten.cpp"
 $4 = (_strlen(($3|0))|0); //@line 672 "emscripten/supio_emscripten.cpp"
 HEAP32[29616>>2] = $4; //@line 672 "emscripten/supio_emscripten.cpp"
 $5 = HEAP32[29616>>2]|0; //@line 673 "emscripten/supio_emscripten.cpp"
 $6 = (($5) + 16384)|0; //@line 673 "emscripten/supio_emscripten.cpp"
 HEAP32[29624>>2] = $6; //@line 673 "emscripten/supio_emscripten.cpp"
 $7 = HEAP32[29624>>2]|0; //@line 674 "emscripten/supio_emscripten.cpp"
 $8 = ($7|0)<(32768); //@line 674 "emscripten/supio_emscripten.cpp"
 if ($8) {
  HEAP32[29624>>2] = 32768; //@line 674 "emscripten/supio_emscripten.cpp"
 }
 $9 = HEAP32[29624>>2]|0; //@line 675 "emscripten/supio_emscripten.cpp"
 $10 = (__Z7sbAlloci($9)|0); //@line 675 "emscripten/supio_emscripten.cpp"
 HEAP32[29632>>2] = $10; //@line 675 "emscripten/supio_emscripten.cpp"
 $11 = HEAP32[29632>>2]|0; //@line 676 "emscripten/supio_emscripten.cpp"
 HEAP8[$11>>0] = 0; //@line 676 "emscripten/supio_emscripten.cpp"
 $12 = $1; //@line 678 "emscripten/supio_emscripten.cpp"
 $13 = (_strlen(($12|0))|0); //@line 678 "emscripten/supio_emscripten.cpp"
 HEAP32[29640>>2] = $13; //@line 678 "emscripten/supio_emscripten.cpp"
 $14 = HEAP32[29640>>2]|0; //@line 679 "emscripten/supio_emscripten.cpp"
 $15 = (($14) + 1)|0; //@line 679 "emscripten/supio_emscripten.cpp"
 $16 = (__Z7sbAlloci($15)|0); //@line 679 "emscripten/supio_emscripten.cpp"
 HEAP32[29648>>2] = $16; //@line 679 "emscripten/supio_emscripten.cpp"
 $17 = HEAP32[29648>>2]|0; //@line 680 "emscripten/supio_emscripten.cpp"
 $18 = $1; //@line 680 "emscripten/supio_emscripten.cpp"
 $19 = HEAP32[29640>>2]|0; //@line 680 "emscripten/supio_emscripten.cpp"
 $20 = (($19) + 1)|0; //@line 680 "emscripten/supio_emscripten.cpp"
 _memcpy(($17|0),($18|0),($20|0))|0; //@line 680 "emscripten/supio_emscripten.cpp"
 STACKTOP = sp;return; //@line 681 "emscripten/supio_emscripten.cpp"
}
function __Z10ReplaceStrPc($repstr) {
 $repstr = $repstr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $9 = 0, $a1 = 0, $a2 = 0, $csize = 0, $cursize = 0, $i = 0, $p = 0, $psize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $repstr;
 $1 = $0; //@line 693 "emscripten/supio_emscripten.cpp"
 HEAP32[29656>>2] = $1; //@line 693 "emscripten/supio_emscripten.cpp"
 $2 = HEAP32[29656>>2]|0; //@line 694 "emscripten/supio_emscripten.cpp"
 $3 = (_strlen(($2|0))|0); //@line 694 "emscripten/supio_emscripten.cpp"
 HEAP32[29664>>2] = $3; //@line 694 "emscripten/supio_emscripten.cpp"
 HEAP32[29672>>2] = 0; //@line 695 "emscripten/supio_emscripten.cpp"
 $cursize = 0; //@line 699 "emscripten/supio_emscripten.cpp"
 $4 = HEAP32[29608>>2]|0; //@line 700 "emscripten/supio_emscripten.cpp"
 $p = $4; //@line 700 "emscripten/supio_emscripten.cpp"
 $5 = HEAP32[29648>>2]|0; //@line 701 "emscripten/supio_emscripten.cpp"
 $6 = HEAP8[$5>>0]|0; //@line 701 "emscripten/supio_emscripten.cpp"
 $a2 = $6; //@line 701 "emscripten/supio_emscripten.cpp"
 while(1) {
  $7 = $p; //@line 703 "emscripten/supio_emscripten.cpp"
  $8 = HEAP8[$7>>0]|0; //@line 703 "emscripten/supio_emscripten.cpp"
  $a1 = $8; //@line 703 "emscripten/supio_emscripten.cpp"
  $9 = $a1; //@line 704 "emscripten/supio_emscripten.cpp"
  $10 = $9&255; //@line 704 "emscripten/supio_emscripten.cpp"
  $11 = ($10|0)==(0); //@line 704 "emscripten/supio_emscripten.cpp"
  if ($11) {
   break;
  }
  $psize = 0; //@line 707 "emscripten/supio_emscripten.cpp"
  $csize = 1; //@line 707 "emscripten/supio_emscripten.cpp"
  $12 = $a1; //@line 708 "emscripten/supio_emscripten.cpp"
  $13 = $12&255; //@line 708 "emscripten/supio_emscripten.cpp"
  $14 = $a2; //@line 708 "emscripten/supio_emscripten.cpp"
  $15 = $14&255; //@line 708 "emscripten/supio_emscripten.cpp"
  $16 = ($13|0)==($15|0); //@line 708 "emscripten/supio_emscripten.cpp"
  if ($16) {
   $17 = $p; //@line 709 "emscripten/supio_emscripten.cpp"
   $18 = HEAP32[29648>>2]|0; //@line 709 "emscripten/supio_emscripten.cpp"
   $19 = HEAP32[29640>>2]|0; //@line 709 "emscripten/supio_emscripten.cpp"
   $20 = (_memcmp($17,$18,$19)|0); //@line 709 "emscripten/supio_emscripten.cpp"
   $21 = ($20|0)==(0); //@line 709 "emscripten/supio_emscripten.cpp"
   if ($21) {
    $22 = HEAP32[29640>>2]|0; //@line 710 "emscripten/supio_emscripten.cpp"
    $psize = $22; //@line 710 "emscripten/supio_emscripten.cpp"
    $23 = HEAP32[29664>>2]|0; //@line 711 "emscripten/supio_emscripten.cpp"
    $csize = $23; //@line 711 "emscripten/supio_emscripten.cpp"
   }
  }
  $24 = $cursize; //@line 716 "emscripten/supio_emscripten.cpp"
  $25 = $csize; //@line 716 "emscripten/supio_emscripten.cpp"
  $26 = (($24) + ($25))|0; //@line 716 "emscripten/supio_emscripten.cpp"
  $i = $26; //@line 716 "emscripten/supio_emscripten.cpp"
  $27 = $i; //@line 717 "emscripten/supio_emscripten.cpp"
  $28 = HEAP32[29624>>2]|0; //@line 717 "emscripten/supio_emscripten.cpp"
  $29 = ($27|0)>=($28|0); //@line 717 "emscripten/supio_emscripten.cpp"
  if ($29) {
   $30 = HEAP32[29624>>2]|0; //@line 718 "emscripten/supio_emscripten.cpp"
   $31 = (($30) + 32768)|0; //@line 718 "emscripten/supio_emscripten.cpp"
   HEAP32[29624>>2] = $31; //@line 718 "emscripten/supio_emscripten.cpp"
   $32 = HEAP32[29632>>2]|0; //@line 719 "emscripten/supio_emscripten.cpp"
   $33 = HEAP32[29624>>2]|0; //@line 719 "emscripten/supio_emscripten.cpp"
   $34 = (__Z8sbExpandPci($32,$33)|0); //@line 719 "emscripten/supio_emscripten.cpp"
   HEAP32[29632>>2] = $34; //@line 719 "emscripten/supio_emscripten.cpp"
  }
  $35 = $psize; //@line 722 "emscripten/supio_emscripten.cpp"
  $36 = ($35|0)!=(0); //@line 722 "emscripten/supio_emscripten.cpp"
  if ($36) {
   $37 = HEAP32[29632>>2]|0; //@line 724 "emscripten/supio_emscripten.cpp"
   $38 = $cursize; //@line 724 "emscripten/supio_emscripten.cpp"
   $39 = (($37) + ($38)|0); //@line 724 "emscripten/supio_emscripten.cpp"
   $40 = HEAP32[29656>>2]|0; //@line 724 "emscripten/supio_emscripten.cpp"
   $41 = $csize; //@line 724 "emscripten/supio_emscripten.cpp"
   _memcpy(($39|0),($40|0),($41|0))|0; //@line 724 "emscripten/supio_emscripten.cpp"
   $42 = $psize; //@line 725 "emscripten/supio_emscripten.cpp"
   $43 = $p; //@line 725 "emscripten/supio_emscripten.cpp"
   $44 = (($43) + ($42)|0); //@line 725 "emscripten/supio_emscripten.cpp"
   $p = $44; //@line 725 "emscripten/supio_emscripten.cpp"
   $45 = $csize; //@line 726 "emscripten/supio_emscripten.cpp"
   $46 = $cursize; //@line 726 "emscripten/supio_emscripten.cpp"
   $47 = (($46) + ($45))|0; //@line 726 "emscripten/supio_emscripten.cpp"
   $cursize = $47; //@line 726 "emscripten/supio_emscripten.cpp"
   $48 = HEAP32[29672>>2]|0; //@line 727 "emscripten/supio_emscripten.cpp"
   $49 = (($48) + 1)|0; //@line 727 "emscripten/supio_emscripten.cpp"
   HEAP32[29672>>2] = $49; //@line 727 "emscripten/supio_emscripten.cpp"
  } else {
   $50 = $a1; //@line 730 "emscripten/supio_emscripten.cpp"
   $51 = $cursize; //@line 730 "emscripten/supio_emscripten.cpp"
   $52 = (($51) + 1)|0; //@line 730 "emscripten/supio_emscripten.cpp"
   $cursize = $52; //@line 730 "emscripten/supio_emscripten.cpp"
   $53 = HEAP32[29632>>2]|0; //@line 730 "emscripten/supio_emscripten.cpp"
   $54 = (($53) + ($51)|0); //@line 730 "emscripten/supio_emscripten.cpp"
   HEAP8[$54>>0] = $50; //@line 730 "emscripten/supio_emscripten.cpp"
   $55 = $p; //@line 731 "emscripten/supio_emscripten.cpp"
   $56 = (($55) + 1|0); //@line 731 "emscripten/supio_emscripten.cpp"
   $p = $56; //@line 731 "emscripten/supio_emscripten.cpp"
   $57 = $a1; //@line 733 "emscripten/supio_emscripten.cpp"
   $58 = $57&255; //@line 733 "emscripten/supio_emscripten.cpp"
   $59 = $58 & 128; //@line 733 "emscripten/supio_emscripten.cpp"
   $60 = ($59|0)!=(0); //@line 733 "emscripten/supio_emscripten.cpp"
   if ($60) {
    while(1) {
     $61 = $p; //@line 735 "emscripten/supio_emscripten.cpp"
     $62 = HEAP8[$61>>0]|0; //@line 735 "emscripten/supio_emscripten.cpp"
     $a1 = $62; //@line 735 "emscripten/supio_emscripten.cpp"
     $63 = $a1; //@line 736 "emscripten/supio_emscripten.cpp"
     $64 = $63&255; //@line 736 "emscripten/supio_emscripten.cpp"
     $65 = ($64|0)==(0); //@line 736 "emscripten/supio_emscripten.cpp"
     if ($65) {
      label = 15;
      break;
     }
     $66 = $a1; //@line 737 "emscripten/supio_emscripten.cpp"
     $67 = $66&255; //@line 737 "emscripten/supio_emscripten.cpp"
     $68 = $67 & 192; //@line 737 "emscripten/supio_emscripten.cpp"
     $69 = ($68|0)!=(128); //@line 737 "emscripten/supio_emscripten.cpp"
     if ($69) {
      label = 17;
      break;
     }
     $70 = $p; //@line 738 "emscripten/supio_emscripten.cpp"
     $71 = (($70) + 1|0); //@line 738 "emscripten/supio_emscripten.cpp"
     $p = $71; //@line 738 "emscripten/supio_emscripten.cpp"
     $72 = HEAP8[$70>>0]|0; //@line 738 "emscripten/supio_emscripten.cpp"
     $73 = $cursize; //@line 738 "emscripten/supio_emscripten.cpp"
     $74 = (($73) + 1)|0; //@line 738 "emscripten/supio_emscripten.cpp"
     $cursize = $74; //@line 738 "emscripten/supio_emscripten.cpp"
     $75 = HEAP32[29632>>2]|0; //@line 738 "emscripten/supio_emscripten.cpp"
     $76 = (($75) + ($73)|0); //@line 738 "emscripten/supio_emscripten.cpp"
     HEAP8[$76>>0] = $72; //@line 738 "emscripten/supio_emscripten.cpp"
    }
    if ((label|0) == 15) {
     label = 0;
    }
    else if ((label|0) == 17) {
     label = 0;
    }
   }
  }
 }
 $77 = $cursize; //@line 745 "emscripten/supio_emscripten.cpp"
 $78 = HEAP32[29632>>2]|0; //@line 745 "emscripten/supio_emscripten.cpp"
 $79 = (($78) + ($77)|0); //@line 745 "emscripten/supio_emscripten.cpp"
 HEAP8[$79>>0] = 0; //@line 745 "emscripten/supio_emscripten.cpp"
 $80 = HEAP32[29632>>2]|0; //@line 746 "emscripten/supio_emscripten.cpp"
 STACKTOP = sp;return ($80|0); //@line 746 "emscripten/supio_emscripten.cpp"
}
function __Z11ReplaceDonev() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[29648>>2]|0; //@line 753 "emscripten/supio_emscripten.cpp"
 __Z6sbFreePv($0); //@line 753 "emscripten/supio_emscripten.cpp"
 $1 = HEAP32[29632>>2]|0; //@line 754 "emscripten/supio_emscripten.cpp"
 __Z6sbFreePv($1); //@line 754 "emscripten/supio_emscripten.cpp"
 $2 = HEAP32[29672>>2]|0; //@line 755 "emscripten/supio_emscripten.cpp"
 STACKTOP = sp;return ($2|0); //@line 755 "emscripten/supio_emscripten.cpp"
}
function __Z6AlertfPKcz($format,$varargs) {
 $format = $format|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $args = 0, $textbf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4128|0;
 $textbf = sp + 24|0;
 $args = sp;
 $0 = $format;
 HEAP32[$args>>2] = $varargs; //@line 785 "emscripten/supio_emscripten.cpp"
 $1 = $0; //@line 786 "emscripten/supio_emscripten.cpp"
 (_vsprintf($textbf,$1,$args)|0); //@line 786 "emscripten/supio_emscripten.cpp"
 (_emscripten_asm_const_int((29680|0),($textbf|0))|0); //@line 788 "emscripten/supio_emscripten.cpp"
 STACKTOP = sp;return; //@line 792 "emscripten/supio_emscripten.cpp"
}
function _ldexp($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_scalbn($x,$n));
 STACKTOP = sp;return (+$0);
}
function _strncat($d,$s,$n) {
 $d = $d|0;
 $s = $s|0;
 $n = $n|0;
 var $$0$lcssa = 0, $$014 = 0, $$023 = 0, $$05 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen(($d|0))|0);
 $1 = (($d) + ($0)|0);
 $2 = ($n|0)==(0);
 L1: do {
  if ($2) {
   $$0$lcssa = $1;
  } else {
   $$014 = $n;$$023 = $s;$$05 = $1;
   while(1) {
    $3 = HEAP8[$$023>>0]|0;
    $4 = ($3<<24>>24)==(0);
    if ($4) {
     $$0$lcssa = $$05;
     break L1;
    }
    $5 = (($$014) + -1)|0;
    $6 = (($$023) + 1|0);
    $7 = (($$05) + 1|0);
    HEAP8[$$05>>0] = $3;
    $8 = ($5|0)==(0);
    if ($8) {
     $$0$lcssa = $7;
     break;
    } else {
     $$014 = $5;$$023 = $6;$$05 = $7;
    }
   }
  }
 } while(0);
 HEAP8[$$0$lcssa>>0] = 0;
 STACKTOP = sp;return ($d|0);
}
function _strspn($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $$0 = 0, $$026 = 0, $$03 = 0, $$1$lcssa = 0, $$14 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $byteset = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $byteset = sp;
 ;HEAP32[$byteset+0>>2]=0|0;HEAP32[$byteset+4>>2]=0|0;HEAP32[$byteset+8>>2]=0|0;HEAP32[$byteset+12>>2]=0|0;HEAP32[$byteset+16>>2]=0|0;HEAP32[$byteset+20>>2]=0|0;HEAP32[$byteset+24>>2]=0|0;HEAP32[$byteset+28>>2]=0|0;
 $0 = HEAP8[$c>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (($c) + 1|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $$03 = $s;
  while(1) {
   $5 = HEAP8[$$03>>0]|0;
   $6 = ($5<<24>>24)==($0<<24>>24);
   $7 = (($$03) + 1|0);
   if ($6) {
    $$03 = $7;
   } else {
    break;
   }
  }
  $8 = $$03;
  $9 = $s;
  $10 = (($8) - ($9))|0;
  $$0 = $10;
  STACKTOP = sp;return ($$0|0);
 } else {
  $$026 = $c;$14 = $0;
 }
 while(1) {
  $13 = $14&255;
  $15 = $13 & 31;
  $16 = 1 << $15;
  $17 = $13 >>> 5;
  $18 = (($byteset) + ($17<<2)|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $19 | $16;
  HEAP32[$18>>2] = $20;
  $21 = (($$026) + 1|0);
  $22 = HEAP8[$21>>0]|0;
  $23 = ($22<<24>>24)==(0);
  if ($23) {
   break;
  } else {
   $$026 = $21;$14 = $22;
  }
 }
 $11 = HEAP8[$s>>0]|0;
 $12 = ($11<<24>>24)==(0);
 L12: do {
  if ($12) {
   $$1$lcssa = $s;
  } else {
   $$14 = $s;$28 = $11;
   while(1) {
    $27 = $28&255;
    $29 = $27 >>> 5;
    $30 = (($byteset) + ($29<<2)|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = $27 & 31;
    $33 = 1 << $32;
    $34 = $31 & $33;
    $35 = ($34|0)==(0);
    $25 = (($$14) + 1|0);
    if ($35) {
     $$1$lcssa = $$14;
     break L12;
    }
    $24 = HEAP8[$25>>0]|0;
    $26 = ($24<<24>>24)==(0);
    if ($26) {
     $$1$lcssa = $25;
     break;
    } else {
     $$14 = $25;$28 = $24;
    }
   }
  }
 } while(0);
 $36 = $$1$lcssa;
 $37 = $s;
 $38 = (($36) - ($37))|0;
 $$0 = $38;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt9type_infoD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv116__enum_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv116__enum_type_info9can_catchEPKNS_16__shim_type_infoERPv($this,$thrown_type,$0) {
 $this = $this|0;
 $thrown_type = $thrown_type|0;
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($this|0)==($thrown_type|0);
 STACKTOP = sp;return ($1|0);
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($this,$thrown_type,$adjustedPtr) {
 $this = $this|0;
 $thrown_type = $thrown_type|0;
 $adjustedPtr = $adjustedPtr|0;
 var $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $info = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $info = sp;
 $0 = ($this|0)==($thrown_type|0);
 if ($0) {
  $$1 = 1;
  STACKTOP = sp;return ($$1|0);
 }
 $1 = ($thrown_type|0)==(0|0);
 if ($1) {
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 $2 = (___dynamic_cast($thrown_type,29784,29840,0)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 dest=$info+0|0; stop=dest+56|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$info>>2] = $2;
 $4 = (($info) + 8|0);
 HEAP32[$4>>2] = $this;
 $5 = (($info) + 12|0);
 HEAP32[$5>>2] = -1;
 $6 = (($info) + 48|0);
 HEAP32[$6>>2] = 1;
 $7 = HEAP32[$2>>2]|0;
 $8 = (($7) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$adjustedPtr>>2]|0;
 FUNCTION_TABLE_viiii[$9 & 127]($2,$info,$10,1);
 $11 = (($info) + 24|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(1);
 if (!($13)) {
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 $14 = (($info) + 16|0);
 $15 = HEAP32[$14>>2]|0;
 HEAP32[$adjustedPtr>>2] = $15;
 $$1 = 1;
 STACKTOP = sp;return ($$1|0);
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==($this|0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = (($info) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  HEAP32[$3>>2] = $adjustedPtr;
  $6 = (($info) + 24|0);
  HEAP32[$6>>2] = $path_below;
  $7 = (($info) + 36|0);
  HEAP32[$7>>2] = 1;
  STACKTOP = sp;return;
 }
 $8 = ($4|0)==($adjustedPtr|0);
 if (!($8)) {
  $12 = (($info) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + 1)|0;
  HEAP32[$12>>2] = $14;
  $15 = (($info) + 24|0);
  HEAP32[$15>>2] = 2;
  $16 = (($info) + 54|0);
  HEAP8[$16>>0] = 1;
  STACKTOP = sp;return;
 }
 $9 = (($info) + 24|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(2);
 if (!($11)) {
  STACKTOP = sp;return;
 }
 HEAP32[$9>>2] = $path_below;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if (!($2)) {
  $17 = (($this) + 8|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = HEAP32[$18>>2]|0;
  $20 = (($19) + 28|0);
  $21 = HEAP32[$20>>2]|0;
  FUNCTION_TABLE_viiii[$21 & 127]($18,$info,$adjustedPtr,$path_below);
  STACKTOP = sp;return;
 }
 $3 = (($info) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  HEAP32[$3>>2] = $adjustedPtr;
  $6 = (($info) + 24|0);
  HEAP32[$6>>2] = $path_below;
  $7 = (($info) + 36|0);
  HEAP32[$7>>2] = 1;
  STACKTOP = sp;return;
 }
 $8 = ($4|0)==($adjustedPtr|0);
 if (!($8)) {
  $12 = (($info) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + 1)|0;
  HEAP32[$12>>2] = $14;
  $15 = (($info) + 24|0);
  HEAP32[$15>>2] = 2;
  $16 = (($info) + 54|0);
  HEAP8[$16>>0] = 1;
  STACKTOP = sp;return;
 }
 $9 = (($info) + 24|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(2);
 if (!($11)) {
  STACKTOP = sp;return;
 }
 HEAP32[$9>>2] = $path_below;
 STACKTOP = sp;return;
}
function ___dynamic_cast($static_ptr,$static_type,$dst_type,$src2dst_offset) {
 $static_ptr = $static_ptr|0;
 $static_type = $static_type|0;
 $dst_type = $dst_type|0;
 $src2dst_offset = $src2dst_offset|0;
 var $$ = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dst_ptr$0 = 0, $info = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $info = sp;
 $0 = HEAP32[$static_ptr>>2]|0;
 $1 = (($0) + -8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 $4 = (($static_ptr) + ($3)|0);
 $5 = (($0) + -4|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$info>>2] = $dst_type;
 $7 = (($info) + 4|0);
 HEAP32[$7>>2] = $static_ptr;
 $8 = (($info) + 8|0);
 HEAP32[$8>>2] = $static_type;
 $9 = (($info) + 12|0);
 HEAP32[$9>>2] = $src2dst_offset;
 $10 = (($info) + 16|0);
 $11 = (($info) + 20|0);
 $12 = (($info) + 24|0);
 $13 = (($info) + 28|0);
 $14 = (($info) + 32|0);
 $15 = (($info) + 40|0);
 $16 = ($6|0)==($dst_type|0);
 dest=$10+0|0; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));HEAP16[$10+36>>1]=0|0;HEAP8[$10+38>>0]=0|0;
 if ($16) {
  $17 = (($info) + 48|0);
  HEAP32[$17>>2] = 1;
  $18 = HEAP32[$6>>2]|0;
  $19 = (($18) + 20|0);
  $20 = HEAP32[$19>>2]|0;
  FUNCTION_TABLE_viiiiii[$20 & 15]($6,$info,$4,$4,1,0);
  $21 = HEAP32[$12>>2]|0;
  $22 = ($21|0)==(1);
  $$ = $22 ? $4 : 0;
  $dst_ptr$0 = $$;
  STACKTOP = sp;return ($dst_ptr$0|0);
 }
 $23 = (($info) + 36|0);
 $24 = HEAP32[$6>>2]|0;
 $25 = (($24) + 24|0);
 $26 = HEAP32[$25>>2]|0;
 FUNCTION_TABLE_viiiii[$26 & 15]($6,$info,$4,1,0);
 $27 = HEAP32[$23>>2]|0;
 if ((($27|0) == 1)) {
  $35 = HEAP32[$12>>2]|0;
  $36 = ($35|0)==(1);
  if (!($36)) {
   $37 = HEAP32[$15>>2]|0;
   $38 = ($37|0)==(0);
   if (!($38)) {
    $dst_ptr$0 = 0;
    STACKTOP = sp;return ($dst_ptr$0|0);
   }
   $39 = HEAP32[$13>>2]|0;
   $40 = ($39|0)==(1);
   if (!($40)) {
    $dst_ptr$0 = 0;
    STACKTOP = sp;return ($dst_ptr$0|0);
   }
   $41 = HEAP32[$14>>2]|0;
   $42 = ($41|0)==(1);
   if (!($42)) {
    $dst_ptr$0 = 0;
    STACKTOP = sp;return ($dst_ptr$0|0);
   }
  }
  $43 = HEAP32[$10>>2]|0;
  $dst_ptr$0 = $43;
  STACKTOP = sp;return ($dst_ptr$0|0);
 } else if ((($27|0) == 0)) {
  $28 = HEAP32[$15>>2]|0;
  $29 = ($28|0)==(1);
  if (!($29)) {
   $dst_ptr$0 = 0;
   STACKTOP = sp;return ($dst_ptr$0|0);
  }
  $30 = HEAP32[$13>>2]|0;
  $31 = ($30|0)==(1);
  if (!($31)) {
   $dst_ptr$0 = 0;
   STACKTOP = sp;return ($dst_ptr$0|0);
  }
  $32 = HEAP32[$14>>2]|0;
  $33 = ($32|0)==(1);
  $34 = HEAP32[$11>>2]|0;
  $$1 = $33 ? $34 : 0;
  $dst_ptr$0 = $$1;
  STACKTOP = sp;return ($dst_ptr$0|0);
 } else {
  $dst_ptr$0 = 0;
  STACKTOP = sp;return ($dst_ptr$0|0);
 }
 return 0|0;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $is_dst_type_derived_from_static_type$0$off01 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  $3 = (($info) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==($current_ptr|0);
  if (!($5)) {
   STACKTOP = sp;return;
  }
  $6 = (($info) + 28|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(1);
  if ($8) {
   STACKTOP = sp;return;
  }
  HEAP32[$6>>2] = $path_below;
  STACKTOP = sp;return;
 }
 $9 = HEAP32[$info>>2]|0;
 $10 = ($this|0)==($9|0);
 if (!($10)) {
  $43 = (($this) + 8|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = HEAP32[$44>>2]|0;
  $46 = (($45) + 24|0);
  $47 = HEAP32[$46>>2]|0;
  FUNCTION_TABLE_viiiii[$47 & 15]($44,$info,$current_ptr,$path_below,$use_strcmp);
  STACKTOP = sp;return;
 }
 $11 = (($info) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==($current_ptr|0);
 if (!($13)) {
  $14 = (($info) + 20|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)==($current_ptr|0);
  if (!($16)) {
   $19 = (($info) + 32|0);
   HEAP32[$19>>2] = $path_below;
   $20 = (($info) + 44|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ($21|0)==(4);
   if ($22) {
    STACKTOP = sp;return;
   }
   $23 = (($info) + 52|0);
   HEAP8[$23>>0] = 0;
   $24 = (($info) + 53|0);
   HEAP8[$24>>0] = 0;
   $25 = (($this) + 8|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = HEAP32[$26>>2]|0;
   $28 = (($27) + 20|0);
   $29 = HEAP32[$28>>2]|0;
   FUNCTION_TABLE_viiiiii[$29 & 15]($26,$info,$current_ptr,$current_ptr,1,$use_strcmp);
   $30 = HEAP8[$24>>0]|0;
   $31 = ($30<<24>>24)==(0);
   if ($31) {
    $is_dst_type_derived_from_static_type$0$off01 = 0;
    label = 13;
   } else {
    $32 = HEAP8[$23>>0]|0;
    $not$ = ($32<<24>>24)==(0);
    if ($not$) {
     $is_dst_type_derived_from_static_type$0$off01 = 1;
     label = 13;
    }
   }
   do {
    if ((label|0) == 13) {
     HEAP32[$14>>2] = $current_ptr;
     $33 = (($info) + 40|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = (($34) + 1)|0;
     HEAP32[$33>>2] = $35;
     $36 = (($info) + 36|0);
     $37 = HEAP32[$36>>2]|0;
     $38 = ($37|0)==(1);
     if ($38) {
      $39 = (($info) + 24|0);
      $40 = HEAP32[$39>>2]|0;
      $41 = ($40|0)==(2);
      if ($41) {
       $42 = (($info) + 54|0);
       HEAP8[$42>>0] = 1;
       if ($is_dst_type_derived_from_static_type$0$off01) {
        break;
       }
      } else {
       label = 16;
      }
     } else {
      label = 16;
     }
     if ((label|0) == 16) {
      if ($is_dst_type_derived_from_static_type$0$off01) {
       break;
      }
     }
     HEAP32[$20>>2] = 4;
     STACKTOP = sp;return;
    }
   } while(0);
   HEAP32[$20>>2] = 3;
   STACKTOP = sp;return;
  }
 }
 $17 = ($path_below|0)==(1);
 if (!($17)) {
  STACKTOP = sp;return;
 }
 $18 = (($info) + 32|0);
 HEAP32[$18>>2] = 1;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==($this|0);
 if ($2) {
  $3 = (($info) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==($current_ptr|0);
  if (!($5)) {
   STACKTOP = sp;return;
  }
  $6 = (($info) + 28|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(1);
  if ($8) {
   STACKTOP = sp;return;
  }
  HEAP32[$6>>2] = $path_below;
  STACKTOP = sp;return;
 }
 $9 = HEAP32[$info>>2]|0;
 $10 = ($9|0)==($this|0);
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $11 = (($info) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==($current_ptr|0);
 if (!($13)) {
  $14 = (($info) + 20|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)==($current_ptr|0);
  if (!($16)) {
   $19 = (($info) + 32|0);
   HEAP32[$19>>2] = $path_below;
   HEAP32[$14>>2] = $current_ptr;
   $20 = (($info) + 40|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (($21) + 1)|0;
   HEAP32[$20>>2] = $22;
   $23 = (($info) + 36|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ($24|0)==(1);
   if ($25) {
    $26 = (($info) + 24|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ($27|0)==(2);
    if ($28) {
     $29 = (($info) + 54|0);
     HEAP8[$29>>0] = 1;
    }
   }
   $30 = (($info) + 44|0);
   HEAP32[$30>>2] = 4;
   STACKTOP = sp;return;
  }
 }
 $17 = ($path_below|0)==(1);
 if (!($17)) {
  STACKTOP = sp;return;
 }
 $18 = (($info) + 32|0);
 HEAP32[$18>>2] = 1;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond$i = 0, $or$cond1$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if (!($2)) {
  $32 = (($this) + 8|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = HEAP32[$33>>2]|0;
  $35 = (($34) + 20|0);
  $36 = HEAP32[$35>>2]|0;
  FUNCTION_TABLE_viiiiii[$36 & 15]($33,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
  STACKTOP = sp;return;
 }
 $3 = (($info) + 53|0);
 HEAP8[$3>>0] = 1;
 $4 = (($info) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==($current_ptr|0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = (($info) + 52|0);
 HEAP8[$7>>0] = 1;
 $8 = (($info) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 if ($10) {
  HEAP32[$8>>2] = $dst_ptr;
  $11 = (($info) + 24|0);
  HEAP32[$11>>2] = $path_below;
  $12 = (($info) + 36|0);
  HEAP32[$12>>2] = 1;
  $13 = (($info) + 48|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)==(1);
  $16 = ($path_below|0)==(1);
  $or$cond$i = $15 & $16;
  if (!($or$cond$i)) {
   STACKTOP = sp;return;
  }
  $17 = (($info) + 54|0);
  HEAP8[$17>>0] = 1;
  STACKTOP = sp;return;
 }
 $18 = ($9|0)==($dst_ptr|0);
 if (!($18)) {
  $28 = (($info) + 36|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (($29) + 1)|0;
  HEAP32[$28>>2] = $30;
  $31 = (($info) + 54|0);
  HEAP8[$31>>0] = 1;
  STACKTOP = sp;return;
 }
 $19 = (($info) + 24|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)==(2);
 if ($21) {
  HEAP32[$19>>2] = $path_below;
  $26 = $path_below;
 } else {
  $26 = $20;
 }
 $22 = (($info) + 48|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)==(1);
 $25 = ($26|0)==(1);
 $or$cond1$i = $24 & $25;
 if (!($or$cond1$i)) {
  STACKTOP = sp;return;
 }
 $27 = (($info) + 54|0);
 HEAP8[$27>>0] = 1;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond$i = 0, $or$cond1$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==($this|0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = (($info) + 53|0);
 HEAP8[$3>>0] = 1;
 $4 = (($info) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==($current_ptr|0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = (($info) + 52|0);
 HEAP8[$7>>0] = 1;
 $8 = (($info) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 if ($10) {
  HEAP32[$8>>2] = $dst_ptr;
  $11 = (($info) + 24|0);
  HEAP32[$11>>2] = $path_below;
  $12 = (($info) + 36|0);
  HEAP32[$12>>2] = 1;
  $13 = (($info) + 48|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)==(1);
  $16 = ($path_below|0)==(1);
  $or$cond$i = $15 & $16;
  if (!($or$cond$i)) {
   STACKTOP = sp;return;
  }
  $17 = (($info) + 54|0);
  HEAP8[$17>>0] = 1;
  STACKTOP = sp;return;
 }
 $18 = ($9|0)==($dst_ptr|0);
 if (!($18)) {
  $28 = (($info) + 36|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (($29) + 1)|0;
  HEAP32[$28>>2] = $30;
  $31 = (($info) + 54|0);
  HEAP8[$31>>0] = 1;
  STACKTOP = sp;return;
 }
 $19 = (($info) + 24|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)==(2);
 if ($21) {
  HEAP32[$19>>2] = $path_below;
  $26 = $path_below;
 } else {
  $26 = $20;
 }
 $22 = (($info) + 48|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)==(1);
 $25 = ($26|0)==(1);
 $or$cond1$i = $24 & $25;
 if (!($or$cond1$i)) {
  STACKTOP = sp;return;
 }
 $27 = (($info) + 54|0);
 HEAP8[$27>>0] = 1;
 STACKTOP = sp;return;
}
function _malloc($bytes) {
 $bytes = $bytes|0;
 var $$$i = 0, $$3$i = 0, $$4$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i25 = 0, $$pre$i25$i = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i26$iZ2D = 0, $$pre$phi$i26Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi58$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre57$i$i = 0, $$rsize$0$i = 0, $$rsize$3$i = 0, $$sum = 0, $$sum$i$i = 0, $$sum$i$i$i = 0;
 var $$sum$i14$i = 0, $$sum$i15$i = 0, $$sum$i18$i = 0, $$sum$i21$i = 0, $$sum$i2334 = 0, $$sum$i32 = 0, $$sum$i35 = 0, $$sum1 = 0, $$sum1$i = 0, $$sum1$i$i = 0, $$sum1$i16$i = 0, $$sum1$i22$i = 0, $$sum1$i24 = 0, $$sum10 = 0, $$sum10$i = 0, $$sum10$i$i = 0, $$sum10$pre$i$i = 0, $$sum107$i = 0, $$sum108$i = 0, $$sum109$i = 0;
 var $$sum11$i = 0, $$sum11$i$i = 0, $$sum11$i24$i = 0, $$sum110$i = 0, $$sum111$i = 0, $$sum1112 = 0, $$sum112$i = 0, $$sum113$i = 0, $$sum114$i = 0, $$sum115$i = 0, $$sum116$i = 0, $$sum117$i = 0, $$sum118$i = 0, $$sum119$i = 0, $$sum12$i = 0, $$sum12$i$i = 0, $$sum120$i = 0, $$sum13$i = 0, $$sum13$i$i = 0, $$sum14$i$i = 0;
 var $$sum14$pre$i = 0, $$sum15$i = 0, $$sum15$i$i = 0, $$sum16$i = 0, $$sum16$i$i = 0, $$sum17$i = 0, $$sum17$i$i = 0, $$sum18$i = 0, $$sum1819$i$i = 0, $$sum2 = 0, $$sum2$i = 0, $$sum2$i$i = 0, $$sum2$i$i$i = 0, $$sum2$i17$i = 0, $$sum2$i19$i = 0, $$sum2$i23$i = 0, $$sum2$pre$i = 0, $$sum20$i$i = 0, $$sum21$i$i = 0, $$sum22$i$i = 0;
 var $$sum23$i$i = 0, $$sum24$i$i = 0, $$sum25$i$i = 0, $$sum26$pre$i$i = 0, $$sum27$i$i = 0, $$sum28$i$i = 0, $$sum29$i$i = 0, $$sum3$i = 0, $$sum3$i$i = 0, $$sum3$i27 = 0, $$sum30$i$i = 0, $$sum3132$i$i = 0, $$sum34$i$i = 0, $$sum3536$i$i = 0, $$sum3738$i$i = 0, $$sum39$i$i = 0, $$sum4 = 0, $$sum4$i = 0, $$sum4$i28 = 0, $$sum40$i$i = 0;
 var $$sum41$i$i = 0, $$sum42$i$i = 0, $$sum5$i = 0, $$sum5$i$i = 0, $$sum56 = 0, $$sum6$i = 0, $$sum67$i$i = 0, $$sum7$i = 0, $$sum8$i = 0, $$sum8$pre = 0, $$sum9 = 0, $$sum9$i = 0, $$sum9$i$i = 0, $$tsize$1$i = 0, $$v$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0;
 var $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0;
 var $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0;
 var $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0;
 var $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0;
 var $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0;
 var $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0;
 var $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0;
 var $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0;
 var $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0;
 var $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0;
 var $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0;
 var $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0;
 var $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0;
 var $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0;
 var $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0;
 var $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0;
 var $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0;
 var $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0;
 var $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0;
 var $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0;
 var $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0;
 var $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0;
 var $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0;
 var $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0;
 var $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0;
 var $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0;
 var $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0;
 var $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0;
 var $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0;
 var $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0;
 var $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0;
 var $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0;
 var $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0;
 var $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0;
 var $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0;
 var $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0;
 var $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0;
 var $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0;
 var $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0;
 var $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0;
 var $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0;
 var $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0;
 var $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0;
 var $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0, $F5$0$i = 0;
 var $I1$0$c$i$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0, $K12$025$i = 0, $K2$014$i$i = 0, $K8$052$i$i = 0, $R$0$i = 0, $R$0$i$i = 0, $R$0$i18 = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i20 = 0, $RP$0$i = 0, $RP$0$i$i = 0, $RP$0$i17 = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i28$i = 0, $T$013$i$i = 0;
 var $T$024$i = 0, $T$051$i$i = 0, $br$0$i = 0, $cond$i = 0, $cond$i$i = 0, $cond$i21 = 0, $exitcond$i$i = 0, $i$02$i$i = 0, $idx$0$i = 0, $mem$0 = 0, $nb$0 = 0, $notlhs$i = 0, $notrhs$i = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0, $or$cond$i29 = 0, $or$cond1$i = 0, $or$cond10$i = 0, $or$cond19$i = 0, $or$cond2$i = 0;
 var $or$cond49$i = 0, $or$cond5$i = 0, $or$cond6$i = 0, $or$cond8$not$i = 0, $or$cond9$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i15 = 0, $rsize$1$i = 0, $rsize$2$i = 0, $rsize$3$lcssa$i = 0, $rsize$329$i = 0, $rst$0$i = 0, $rst$1$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$075$i = 0, $sp$168$i = 0, $ssize$0$$i = 0;
 var $ssize$0$i = 0, $ssize$1$i = 0, $ssize$2$i = 0, $t$0$i = 0, $t$0$i14 = 0, $t$1$i = 0, $t$2$ph$i = 0, $t$2$v$3$i = 0, $t$228$i = 0, $tbase$0$i = 0, $tbase$247$i = 0, $tsize$0$i = 0, $tsize$0323841$i = 0, $tsize$1$i = 0, $tsize$246$i = 0, $v$0$i = 0, $v$0$i16 = 0, $v$1$i = 0, $v$2$i = 0, $v$3$lcssa$i = 0;
 var $v$330$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bytes>>>0)<(245);
 do {
  if ($0) {
   $1 = ($bytes>>>0)<(11);
   if ($1) {
    $5 = 16;
   } else {
    $2 = (($bytes) + 11)|0;
    $3 = $2 & -8;
    $5 = $3;
   }
   $4 = $5 >>> 3;
   $6 = HEAP32[30080>>2]|0;
   $7 = $6 >>> $4;
   $8 = $7 & 3;
   $9 = ($8|0)==(0);
   if (!($9)) {
    $10 = $7 & 1;
    $11 = $10 ^ 1;
    $12 = (($11) + ($4))|0;
    $13 = $12 << 1;
    $14 = ((30080 + ($13<<2)|0) + 40|0);
    $$sum10 = (($13) + 2)|0;
    $15 = ((30080 + ($$sum10<<2)|0) + 40|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (($16) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($14|0)==($18|0);
    do {
     if ($19) {
      $20 = 1 << $12;
      $21 = $20 ^ -1;
      $22 = $6 & $21;
      HEAP32[30080>>2] = $22;
     } else {
      $23 = HEAP32[((30080 + 16|0))>>2]|0;
      $24 = ($18>>>0)<($23>>>0);
      if ($24) {
       _abort();
       // unreachable;
      }
      $25 = (($18) + 12|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = ($26|0)==($16|0);
      if ($27) {
       HEAP32[$25>>2] = $14;
       HEAP32[$15>>2] = $18;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $28 = $12 << 3;
    $29 = $28 | 3;
    $30 = (($16) + 4|0);
    HEAP32[$30>>2] = $29;
    $$sum1112 = $28 | 4;
    $31 = (($16) + ($$sum1112)|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $32 | 1;
    HEAP32[$31>>2] = $33;
    $mem$0 = $17;
    STACKTOP = sp;return ($mem$0|0);
   }
   $34 = HEAP32[((30080 + 8|0))>>2]|0;
   $35 = ($5>>>0)>($34>>>0);
   if ($35) {
    $36 = ($7|0)==(0);
    if (!($36)) {
     $37 = $7 << $4;
     $38 = 2 << $4;
     $39 = (0 - ($38))|0;
     $40 = $38 | $39;
     $41 = $37 & $40;
     $42 = (0 - ($41))|0;
     $43 = $41 & $42;
     $44 = (($43) + -1)|0;
     $45 = $44 >>> 12;
     $46 = $45 & 16;
     $47 = $44 >>> $46;
     $48 = $47 >>> 5;
     $49 = $48 & 8;
     $50 = $49 | $46;
     $51 = $47 >>> $49;
     $52 = $51 >>> 2;
     $53 = $52 & 4;
     $54 = $50 | $53;
     $55 = $51 >>> $53;
     $56 = $55 >>> 1;
     $57 = $56 & 2;
     $58 = $54 | $57;
     $59 = $55 >>> $57;
     $60 = $59 >>> 1;
     $61 = $60 & 1;
     $62 = $58 | $61;
     $63 = $59 >>> $61;
     $64 = (($62) + ($63))|0;
     $65 = $64 << 1;
     $66 = ((30080 + ($65<<2)|0) + 40|0);
     $$sum4 = (($65) + 2)|0;
     $67 = ((30080 + ($$sum4<<2)|0) + 40|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = (($68) + 8|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = ($66|0)==($70|0);
     do {
      if ($71) {
       $72 = 1 << $64;
       $73 = $72 ^ -1;
       $74 = $6 & $73;
       HEAP32[30080>>2] = $74;
      } else {
       $75 = HEAP32[((30080 + 16|0))>>2]|0;
       $76 = ($70>>>0)<($75>>>0);
       if ($76) {
        _abort();
        // unreachable;
       }
       $77 = (($70) + 12|0);
       $78 = HEAP32[$77>>2]|0;
       $79 = ($78|0)==($68|0);
       if ($79) {
        HEAP32[$77>>2] = $66;
        HEAP32[$67>>2] = $70;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $80 = $64 << 3;
     $81 = (($80) - ($5))|0;
     $82 = $5 | 3;
     $83 = (($68) + 4|0);
     HEAP32[$83>>2] = $82;
     $84 = (($68) + ($5)|0);
     $85 = $81 | 1;
     $$sum56 = $5 | 4;
     $86 = (($68) + ($$sum56)|0);
     HEAP32[$86>>2] = $85;
     $87 = (($68) + ($80)|0);
     HEAP32[$87>>2] = $81;
     $88 = HEAP32[((30080 + 8|0))>>2]|0;
     $89 = ($88|0)==(0);
     if (!($89)) {
      $90 = HEAP32[((30080 + 20|0))>>2]|0;
      $91 = $88 >>> 3;
      $92 = $91 << 1;
      $93 = ((30080 + ($92<<2)|0) + 40|0);
      $94 = HEAP32[30080>>2]|0;
      $95 = 1 << $91;
      $96 = $94 & $95;
      $97 = ($96|0)==(0);
      if ($97) {
       $98 = $94 | $95;
       HEAP32[30080>>2] = $98;
       $$sum8$pre = (($92) + 2)|0;
       $$pre = ((30080 + ($$sum8$pre<<2)|0) + 40|0);
       $$pre$phiZ2D = $$pre;$F4$0 = $93;
      } else {
       $$sum9 = (($92) + 2)|0;
       $99 = ((30080 + ($$sum9<<2)|0) + 40|0);
       $100 = HEAP32[$99>>2]|0;
       $101 = HEAP32[((30080 + 16|0))>>2]|0;
       $102 = ($100>>>0)<($101>>>0);
       if ($102) {
        _abort();
        // unreachable;
       } else {
        $$pre$phiZ2D = $99;$F4$0 = $100;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $90;
      $103 = (($F4$0) + 12|0);
      HEAP32[$103>>2] = $90;
      $104 = (($90) + 8|0);
      HEAP32[$104>>2] = $F4$0;
      $105 = (($90) + 12|0);
      HEAP32[$105>>2] = $93;
     }
     HEAP32[((30080 + 8|0))>>2] = $81;
     HEAP32[((30080 + 20|0))>>2] = $84;
     $mem$0 = $69;
     STACKTOP = sp;return ($mem$0|0);
    }
    $106 = HEAP32[((30080 + 4|0))>>2]|0;
    $107 = ($106|0)==(0);
    if ($107) {
     $nb$0 = $5;
    } else {
     $108 = (0 - ($106))|0;
     $109 = $106 & $108;
     $110 = (($109) + -1)|0;
     $111 = $110 >>> 12;
     $112 = $111 & 16;
     $113 = $110 >>> $112;
     $114 = $113 >>> 5;
     $115 = $114 & 8;
     $116 = $115 | $112;
     $117 = $113 >>> $115;
     $118 = $117 >>> 2;
     $119 = $118 & 4;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = $121 >>> 1;
     $123 = $122 & 2;
     $124 = $120 | $123;
     $125 = $121 >>> $123;
     $126 = $125 >>> 1;
     $127 = $126 & 1;
     $128 = $124 | $127;
     $129 = $125 >>> $127;
     $130 = (($128) + ($129))|0;
     $131 = ((30080 + ($130<<2)|0) + 304|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = (($132) + 4|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = $134 & -8;
     $136 = (($135) - ($5))|0;
     $rsize$0$i = $136;$t$0$i = $132;$v$0$i = $132;
     while(1) {
      $137 = (($t$0$i) + 16|0);
      $138 = HEAP32[$137>>2]|0;
      $139 = ($138|0)==(0|0);
      if ($139) {
       $140 = (($t$0$i) + 20|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = ($141|0)==(0|0);
       if ($142) {
        break;
       } else {
        $144 = $141;
       }
      } else {
       $144 = $138;
      }
      $143 = (($144) + 4|0);
      $145 = HEAP32[$143>>2]|0;
      $146 = $145 & -8;
      $147 = (($146) - ($5))|0;
      $148 = ($147>>>0)<($rsize$0$i>>>0);
      $$rsize$0$i = $148 ? $147 : $rsize$0$i;
      $$v$0$i = $148 ? $144 : $v$0$i;
      $rsize$0$i = $$rsize$0$i;$t$0$i = $144;$v$0$i = $$v$0$i;
     }
     $149 = HEAP32[((30080 + 16|0))>>2]|0;
     $150 = ($v$0$i>>>0)<($149>>>0);
     if ($150) {
      _abort();
      // unreachable;
     }
     $151 = (($v$0$i) + ($5)|0);
     $152 = ($v$0$i>>>0)<($151>>>0);
     if (!($152)) {
      _abort();
      // unreachable;
     }
     $153 = (($v$0$i) + 24|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = (($v$0$i) + 12|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ($156|0)==($v$0$i|0);
     do {
      if ($157) {
       $167 = (($v$0$i) + 20|0);
       $168 = HEAP32[$167>>2]|0;
       $169 = ($168|0)==(0|0);
       if ($169) {
        $170 = (($v$0$i) + 16|0);
        $171 = HEAP32[$170>>2]|0;
        $172 = ($171|0)==(0|0);
        if ($172) {
         $R$1$i = 0;
         break;
        } else {
         $R$0$i = $171;$RP$0$i = $170;
        }
       } else {
        $R$0$i = $168;$RP$0$i = $167;
       }
       while(1) {
        $173 = (($R$0$i) + 20|0);
        $174 = HEAP32[$173>>2]|0;
        $175 = ($174|0)==(0|0);
        if (!($175)) {
         $R$0$i = $174;$RP$0$i = $173;
         continue;
        }
        $176 = (($R$0$i) + 16|0);
        $177 = HEAP32[$176>>2]|0;
        $178 = ($177|0)==(0|0);
        if ($178) {
         break;
        } else {
         $R$0$i = $177;$RP$0$i = $176;
        }
       }
       $179 = ($RP$0$i>>>0)<($149>>>0);
       if ($179) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$RP$0$i>>2] = 0;
        $R$1$i = $R$0$i;
        break;
       }
      } else {
       $158 = (($v$0$i) + 8|0);
       $159 = HEAP32[$158>>2]|0;
       $160 = ($159>>>0)<($149>>>0);
       if ($160) {
        _abort();
        // unreachable;
       }
       $161 = (($159) + 12|0);
       $162 = HEAP32[$161>>2]|0;
       $163 = ($162|0)==($v$0$i|0);
       if (!($163)) {
        _abort();
        // unreachable;
       }
       $164 = (($156) + 8|0);
       $165 = HEAP32[$164>>2]|0;
       $166 = ($165|0)==($v$0$i|0);
       if ($166) {
        HEAP32[$161>>2] = $156;
        HEAP32[$164>>2] = $159;
        $R$1$i = $156;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $180 = ($154|0)==(0|0);
     do {
      if (!($180)) {
       $181 = (($v$0$i) + 28|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = ((30080 + ($182<<2)|0) + 304|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($v$0$i|0)==($184|0);
       if ($185) {
        HEAP32[$183>>2] = $R$1$i;
        $cond$i = ($R$1$i|0)==(0|0);
        if ($cond$i) {
         $186 = 1 << $182;
         $187 = $186 ^ -1;
         $188 = HEAP32[((30080 + 4|0))>>2]|0;
         $189 = $188 & $187;
         HEAP32[((30080 + 4|0))>>2] = $189;
         break;
        }
       } else {
        $190 = HEAP32[((30080 + 16|0))>>2]|0;
        $191 = ($154>>>0)<($190>>>0);
        if ($191) {
         _abort();
         // unreachable;
        }
        $192 = (($154) + 16|0);
        $193 = HEAP32[$192>>2]|0;
        $194 = ($193|0)==($v$0$i|0);
        if ($194) {
         HEAP32[$192>>2] = $R$1$i;
        } else {
         $195 = (($154) + 20|0);
         HEAP32[$195>>2] = $R$1$i;
        }
        $196 = ($R$1$i|0)==(0|0);
        if ($196) {
         break;
        }
       }
       $197 = HEAP32[((30080 + 16|0))>>2]|0;
       $198 = ($R$1$i>>>0)<($197>>>0);
       if ($198) {
        _abort();
        // unreachable;
       }
       $199 = (($R$1$i) + 24|0);
       HEAP32[$199>>2] = $154;
       $200 = (($v$0$i) + 16|0);
       $201 = HEAP32[$200>>2]|0;
       $202 = ($201|0)==(0|0);
       do {
        if (!($202)) {
         $203 = HEAP32[((30080 + 16|0))>>2]|0;
         $204 = ($201>>>0)<($203>>>0);
         if ($204) {
          _abort();
          // unreachable;
         } else {
          $205 = (($R$1$i) + 16|0);
          HEAP32[$205>>2] = $201;
          $206 = (($201) + 24|0);
          HEAP32[$206>>2] = $R$1$i;
          break;
         }
        }
       } while(0);
       $207 = (($v$0$i) + 20|0);
       $208 = HEAP32[$207>>2]|0;
       $209 = ($208|0)==(0|0);
       if (!($209)) {
        $210 = HEAP32[((30080 + 16|0))>>2]|0;
        $211 = ($208>>>0)<($210>>>0);
        if ($211) {
         _abort();
         // unreachable;
        } else {
         $212 = (($R$1$i) + 20|0);
         HEAP32[$212>>2] = $208;
         $213 = (($208) + 24|0);
         HEAP32[$213>>2] = $R$1$i;
         break;
        }
       }
      }
     } while(0);
     $214 = ($rsize$0$i>>>0)<(16);
     if ($214) {
      $215 = (($rsize$0$i) + ($5))|0;
      $216 = $215 | 3;
      $217 = (($v$0$i) + 4|0);
      HEAP32[$217>>2] = $216;
      $$sum4$i = (($215) + 4)|0;
      $218 = (($v$0$i) + ($$sum4$i)|0);
      $219 = HEAP32[$218>>2]|0;
      $220 = $219 | 1;
      HEAP32[$218>>2] = $220;
     } else {
      $221 = $5 | 3;
      $222 = (($v$0$i) + 4|0);
      HEAP32[$222>>2] = $221;
      $223 = $rsize$0$i | 1;
      $$sum$i35 = $5 | 4;
      $224 = (($v$0$i) + ($$sum$i35)|0);
      HEAP32[$224>>2] = $223;
      $$sum1$i = (($rsize$0$i) + ($5))|0;
      $225 = (($v$0$i) + ($$sum1$i)|0);
      HEAP32[$225>>2] = $rsize$0$i;
      $226 = HEAP32[((30080 + 8|0))>>2]|0;
      $227 = ($226|0)==(0);
      if (!($227)) {
       $228 = HEAP32[((30080 + 20|0))>>2]|0;
       $229 = $226 >>> 3;
       $230 = $229 << 1;
       $231 = ((30080 + ($230<<2)|0) + 40|0);
       $232 = HEAP32[30080>>2]|0;
       $233 = 1 << $229;
       $234 = $232 & $233;
       $235 = ($234|0)==(0);
       if ($235) {
        $236 = $232 | $233;
        HEAP32[30080>>2] = $236;
        $$sum2$pre$i = (($230) + 2)|0;
        $$pre$i = ((30080 + ($$sum2$pre$i<<2)|0) + 40|0);
        $$pre$phi$iZ2D = $$pre$i;$F1$0$i = $231;
       } else {
        $$sum3$i = (($230) + 2)|0;
        $237 = ((30080 + ($$sum3$i<<2)|0) + 40|0);
        $238 = HEAP32[$237>>2]|0;
        $239 = HEAP32[((30080 + 16|0))>>2]|0;
        $240 = ($238>>>0)<($239>>>0);
        if ($240) {
         _abort();
         // unreachable;
        } else {
         $$pre$phi$iZ2D = $237;$F1$0$i = $238;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $228;
       $241 = (($F1$0$i) + 12|0);
       HEAP32[$241>>2] = $228;
       $242 = (($228) + 8|0);
       HEAP32[$242>>2] = $F1$0$i;
       $243 = (($228) + 12|0);
       HEAP32[$243>>2] = $231;
      }
      HEAP32[((30080 + 8|0))>>2] = $rsize$0$i;
      HEAP32[((30080 + 20|0))>>2] = $151;
     }
     $244 = (($v$0$i) + 8|0);
     $mem$0 = $244;
     STACKTOP = sp;return ($mem$0|0);
    }
   } else {
    $nb$0 = $5;
   }
  } else {
   $245 = ($bytes>>>0)>(4294967231);
   if ($245) {
    $nb$0 = -1;
   } else {
    $246 = (($bytes) + 11)|0;
    $247 = $246 & -8;
    $248 = HEAP32[((30080 + 4|0))>>2]|0;
    $249 = ($248|0)==(0);
    if ($249) {
     $nb$0 = $247;
    } else {
     $250 = (0 - ($247))|0;
     $251 = $246 >>> 8;
     $252 = ($251|0)==(0);
     if ($252) {
      $idx$0$i = 0;
     } else {
      $253 = ($247>>>0)>(16777215);
      if ($253) {
       $idx$0$i = 31;
      } else {
       $254 = (($251) + 1048320)|0;
       $255 = $254 >>> 16;
       $256 = $255 & 8;
       $257 = $251 << $256;
       $258 = (($257) + 520192)|0;
       $259 = $258 >>> 16;
       $260 = $259 & 4;
       $261 = $260 | $256;
       $262 = $257 << $260;
       $263 = (($262) + 245760)|0;
       $264 = $263 >>> 16;
       $265 = $264 & 2;
       $266 = $261 | $265;
       $267 = (14 - ($266))|0;
       $268 = $262 << $265;
       $269 = $268 >>> 15;
       $270 = (($267) + ($269))|0;
       $271 = $270 << 1;
       $272 = (($270) + 7)|0;
       $273 = $247 >>> $272;
       $274 = $273 & 1;
       $275 = $274 | $271;
       $idx$0$i = $275;
      }
     }
     $276 = ((30080 + ($idx$0$i<<2)|0) + 304|0);
     $277 = HEAP32[$276>>2]|0;
     $278 = ($277|0)==(0|0);
     L126: do {
      if ($278) {
       $rsize$2$i = $250;$t$1$i = 0;$v$2$i = 0;
      } else {
       $279 = ($idx$0$i|0)==(31);
       if ($279) {
        $283 = 0;
       } else {
        $280 = $idx$0$i >>> 1;
        $281 = (25 - ($280))|0;
        $283 = $281;
       }
       $282 = $247 << $283;
       $rsize$0$i15 = $250;$rst$0$i = 0;$sizebits$0$i = $282;$t$0$i14 = $277;$v$0$i16 = 0;
       while(1) {
        $284 = (($t$0$i14) + 4|0);
        $285 = HEAP32[$284>>2]|0;
        $286 = $285 & -8;
        $287 = (($286) - ($247))|0;
        $288 = ($287>>>0)<($rsize$0$i15>>>0);
        if ($288) {
         $289 = ($286|0)==($247|0);
         if ($289) {
          $rsize$2$i = $287;$t$1$i = $t$0$i14;$v$2$i = $t$0$i14;
          break L126;
         } else {
          $rsize$1$i = $287;$v$1$i = $t$0$i14;
         }
        } else {
         $rsize$1$i = $rsize$0$i15;$v$1$i = $v$0$i16;
        }
        $290 = (($t$0$i14) + 20|0);
        $291 = HEAP32[$290>>2]|0;
        $292 = $sizebits$0$i >>> 31;
        $293 = ((($t$0$i14) + ($292<<2)|0) + 16|0);
        $294 = HEAP32[$293>>2]|0;
        $295 = ($291|0)==(0|0);
        $296 = ($291|0)==($294|0);
        $or$cond$i = $295 | $296;
        $rst$1$i = $or$cond$i ? $rst$0$i : $291;
        $297 = ($294|0)==(0|0);
        $298 = $sizebits$0$i << 1;
        if ($297) {
         $rsize$2$i = $rsize$1$i;$t$1$i = $rst$1$i;$v$2$i = $v$1$i;
         break;
        } else {
         $rsize$0$i15 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $298;$t$0$i14 = $294;$v$0$i16 = $v$1$i;
        }
       }
      }
     } while(0);
     $299 = ($t$1$i|0)==(0|0);
     $300 = ($v$2$i|0)==(0|0);
     $or$cond19$i = $299 & $300;
     if ($or$cond19$i) {
      $301 = 2 << $idx$0$i;
      $302 = (0 - ($301))|0;
      $303 = $301 | $302;
      $304 = $248 & $303;
      $305 = ($304|0)==(0);
      if ($305) {
       $nb$0 = $247;
       break;
      }
      $306 = (0 - ($304))|0;
      $307 = $304 & $306;
      $308 = (($307) + -1)|0;
      $309 = $308 >>> 12;
      $310 = $309 & 16;
      $311 = $308 >>> $310;
      $312 = $311 >>> 5;
      $313 = $312 & 8;
      $314 = $313 | $310;
      $315 = $311 >>> $313;
      $316 = $315 >>> 2;
      $317 = $316 & 4;
      $318 = $314 | $317;
      $319 = $315 >>> $317;
      $320 = $319 >>> 1;
      $321 = $320 & 2;
      $322 = $318 | $321;
      $323 = $319 >>> $321;
      $324 = $323 >>> 1;
      $325 = $324 & 1;
      $326 = $322 | $325;
      $327 = $323 >>> $325;
      $328 = (($326) + ($327))|0;
      $329 = ((30080 + ($328<<2)|0) + 304|0);
      $330 = HEAP32[$329>>2]|0;
      $t$2$ph$i = $330;
     } else {
      $t$2$ph$i = $t$1$i;
     }
     $331 = ($t$2$ph$i|0)==(0|0);
     if ($331) {
      $rsize$3$lcssa$i = $rsize$2$i;$v$3$lcssa$i = $v$2$i;
     } else {
      $rsize$329$i = $rsize$2$i;$t$228$i = $t$2$ph$i;$v$330$i = $v$2$i;
      while(1) {
       $332 = (($t$228$i) + 4|0);
       $333 = HEAP32[$332>>2]|0;
       $334 = $333 & -8;
       $335 = (($334) - ($247))|0;
       $336 = ($335>>>0)<($rsize$329$i>>>0);
       $$rsize$3$i = $336 ? $335 : $rsize$329$i;
       $t$2$v$3$i = $336 ? $t$228$i : $v$330$i;
       $337 = (($t$228$i) + 16|0);
       $338 = HEAP32[$337>>2]|0;
       $339 = ($338|0)==(0|0);
       if (!($339)) {
        $rsize$329$i = $$rsize$3$i;$t$228$i = $338;$v$330$i = $t$2$v$3$i;
        continue;
       }
       $340 = (($t$228$i) + 20|0);
       $341 = HEAP32[$340>>2]|0;
       $342 = ($341|0)==(0|0);
       if ($342) {
        $rsize$3$lcssa$i = $$rsize$3$i;$v$3$lcssa$i = $t$2$v$3$i;
        break;
       } else {
        $rsize$329$i = $$rsize$3$i;$t$228$i = $341;$v$330$i = $t$2$v$3$i;
       }
      }
     }
     $343 = ($v$3$lcssa$i|0)==(0|0);
     if ($343) {
      $nb$0 = $247;
     } else {
      $344 = HEAP32[((30080 + 8|0))>>2]|0;
      $345 = (($344) - ($247))|0;
      $346 = ($rsize$3$lcssa$i>>>0)<($345>>>0);
      if ($346) {
       $347 = HEAP32[((30080 + 16|0))>>2]|0;
       $348 = ($v$3$lcssa$i>>>0)<($347>>>0);
       if ($348) {
        _abort();
        // unreachable;
       }
       $349 = (($v$3$lcssa$i) + ($247)|0);
       $350 = ($v$3$lcssa$i>>>0)<($349>>>0);
       if (!($350)) {
        _abort();
        // unreachable;
       }
       $351 = (($v$3$lcssa$i) + 24|0);
       $352 = HEAP32[$351>>2]|0;
       $353 = (($v$3$lcssa$i) + 12|0);
       $354 = HEAP32[$353>>2]|0;
       $355 = ($354|0)==($v$3$lcssa$i|0);
       do {
        if ($355) {
         $365 = (($v$3$lcssa$i) + 20|0);
         $366 = HEAP32[$365>>2]|0;
         $367 = ($366|0)==(0|0);
         if ($367) {
          $368 = (($v$3$lcssa$i) + 16|0);
          $369 = HEAP32[$368>>2]|0;
          $370 = ($369|0)==(0|0);
          if ($370) {
           $R$1$i20 = 0;
           break;
          } else {
           $R$0$i18 = $369;$RP$0$i17 = $368;
          }
         } else {
          $R$0$i18 = $366;$RP$0$i17 = $365;
         }
         while(1) {
          $371 = (($R$0$i18) + 20|0);
          $372 = HEAP32[$371>>2]|0;
          $373 = ($372|0)==(0|0);
          if (!($373)) {
           $R$0$i18 = $372;$RP$0$i17 = $371;
           continue;
          }
          $374 = (($R$0$i18) + 16|0);
          $375 = HEAP32[$374>>2]|0;
          $376 = ($375|0)==(0|0);
          if ($376) {
           break;
          } else {
           $R$0$i18 = $375;$RP$0$i17 = $374;
          }
         }
         $377 = ($RP$0$i17>>>0)<($347>>>0);
         if ($377) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$RP$0$i17>>2] = 0;
          $R$1$i20 = $R$0$i18;
          break;
         }
        } else {
         $356 = (($v$3$lcssa$i) + 8|0);
         $357 = HEAP32[$356>>2]|0;
         $358 = ($357>>>0)<($347>>>0);
         if ($358) {
          _abort();
          // unreachable;
         }
         $359 = (($357) + 12|0);
         $360 = HEAP32[$359>>2]|0;
         $361 = ($360|0)==($v$3$lcssa$i|0);
         if (!($361)) {
          _abort();
          // unreachable;
         }
         $362 = (($354) + 8|0);
         $363 = HEAP32[$362>>2]|0;
         $364 = ($363|0)==($v$3$lcssa$i|0);
         if ($364) {
          HEAP32[$359>>2] = $354;
          HEAP32[$362>>2] = $357;
          $R$1$i20 = $354;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $378 = ($352|0)==(0|0);
       do {
        if (!($378)) {
         $379 = (($v$3$lcssa$i) + 28|0);
         $380 = HEAP32[$379>>2]|0;
         $381 = ((30080 + ($380<<2)|0) + 304|0);
         $382 = HEAP32[$381>>2]|0;
         $383 = ($v$3$lcssa$i|0)==($382|0);
         if ($383) {
          HEAP32[$381>>2] = $R$1$i20;
          $cond$i21 = ($R$1$i20|0)==(0|0);
          if ($cond$i21) {
           $384 = 1 << $380;
           $385 = $384 ^ -1;
           $386 = HEAP32[((30080 + 4|0))>>2]|0;
           $387 = $386 & $385;
           HEAP32[((30080 + 4|0))>>2] = $387;
           break;
          }
         } else {
          $388 = HEAP32[((30080 + 16|0))>>2]|0;
          $389 = ($352>>>0)<($388>>>0);
          if ($389) {
           _abort();
           // unreachable;
          }
          $390 = (($352) + 16|0);
          $391 = HEAP32[$390>>2]|0;
          $392 = ($391|0)==($v$3$lcssa$i|0);
          if ($392) {
           HEAP32[$390>>2] = $R$1$i20;
          } else {
           $393 = (($352) + 20|0);
           HEAP32[$393>>2] = $R$1$i20;
          }
          $394 = ($R$1$i20|0)==(0|0);
          if ($394) {
           break;
          }
         }
         $395 = HEAP32[((30080 + 16|0))>>2]|0;
         $396 = ($R$1$i20>>>0)<($395>>>0);
         if ($396) {
          _abort();
          // unreachable;
         }
         $397 = (($R$1$i20) + 24|0);
         HEAP32[$397>>2] = $352;
         $398 = (($v$3$lcssa$i) + 16|0);
         $399 = HEAP32[$398>>2]|0;
         $400 = ($399|0)==(0|0);
         do {
          if (!($400)) {
           $401 = HEAP32[((30080 + 16|0))>>2]|0;
           $402 = ($399>>>0)<($401>>>0);
           if ($402) {
            _abort();
            // unreachable;
           } else {
            $403 = (($R$1$i20) + 16|0);
            HEAP32[$403>>2] = $399;
            $404 = (($399) + 24|0);
            HEAP32[$404>>2] = $R$1$i20;
            break;
           }
          }
         } while(0);
         $405 = (($v$3$lcssa$i) + 20|0);
         $406 = HEAP32[$405>>2]|0;
         $407 = ($406|0)==(0|0);
         if (!($407)) {
          $408 = HEAP32[((30080 + 16|0))>>2]|0;
          $409 = ($406>>>0)<($408>>>0);
          if ($409) {
           _abort();
           // unreachable;
          } else {
           $410 = (($R$1$i20) + 20|0);
           HEAP32[$410>>2] = $406;
           $411 = (($406) + 24|0);
           HEAP32[$411>>2] = $R$1$i20;
           break;
          }
         }
        }
       } while(0);
       $412 = ($rsize$3$lcssa$i>>>0)<(16);
       L204: do {
        if ($412) {
         $413 = (($rsize$3$lcssa$i) + ($247))|0;
         $414 = $413 | 3;
         $415 = (($v$3$lcssa$i) + 4|0);
         HEAP32[$415>>2] = $414;
         $$sum18$i = (($413) + 4)|0;
         $416 = (($v$3$lcssa$i) + ($$sum18$i)|0);
         $417 = HEAP32[$416>>2]|0;
         $418 = $417 | 1;
         HEAP32[$416>>2] = $418;
        } else {
         $419 = $247 | 3;
         $420 = (($v$3$lcssa$i) + 4|0);
         HEAP32[$420>>2] = $419;
         $421 = $rsize$3$lcssa$i | 1;
         $$sum$i2334 = $247 | 4;
         $422 = (($v$3$lcssa$i) + ($$sum$i2334)|0);
         HEAP32[$422>>2] = $421;
         $$sum1$i24 = (($rsize$3$lcssa$i) + ($247))|0;
         $423 = (($v$3$lcssa$i) + ($$sum1$i24)|0);
         HEAP32[$423>>2] = $rsize$3$lcssa$i;
         $424 = $rsize$3$lcssa$i >>> 3;
         $425 = ($rsize$3$lcssa$i>>>0)<(256);
         if ($425) {
          $426 = $424 << 1;
          $427 = ((30080 + ($426<<2)|0) + 40|0);
          $428 = HEAP32[30080>>2]|0;
          $429 = 1 << $424;
          $430 = $428 & $429;
          $431 = ($430|0)==(0);
          do {
           if ($431) {
            $432 = $428 | $429;
            HEAP32[30080>>2] = $432;
            $$sum14$pre$i = (($426) + 2)|0;
            $$pre$i25 = ((30080 + ($$sum14$pre$i<<2)|0) + 40|0);
            $$pre$phi$i26Z2D = $$pre$i25;$F5$0$i = $427;
           } else {
            $$sum17$i = (($426) + 2)|0;
            $433 = ((30080 + ($$sum17$i<<2)|0) + 40|0);
            $434 = HEAP32[$433>>2]|0;
            $435 = HEAP32[((30080 + 16|0))>>2]|0;
            $436 = ($434>>>0)<($435>>>0);
            if (!($436)) {
             $$pre$phi$i26Z2D = $433;$F5$0$i = $434;
             break;
            }
            _abort();
            // unreachable;
           }
          } while(0);
          HEAP32[$$pre$phi$i26Z2D>>2] = $349;
          $437 = (($F5$0$i) + 12|0);
          HEAP32[$437>>2] = $349;
          $$sum15$i = (($247) + 8)|0;
          $438 = (($v$3$lcssa$i) + ($$sum15$i)|0);
          HEAP32[$438>>2] = $F5$0$i;
          $$sum16$i = (($247) + 12)|0;
          $439 = (($v$3$lcssa$i) + ($$sum16$i)|0);
          HEAP32[$439>>2] = $427;
          break;
         }
         $440 = $rsize$3$lcssa$i >>> 8;
         $441 = ($440|0)==(0);
         if ($441) {
          $I7$0$i = 0;
         } else {
          $442 = ($rsize$3$lcssa$i>>>0)>(16777215);
          if ($442) {
           $I7$0$i = 31;
          } else {
           $443 = (($440) + 1048320)|0;
           $444 = $443 >>> 16;
           $445 = $444 & 8;
           $446 = $440 << $445;
           $447 = (($446) + 520192)|0;
           $448 = $447 >>> 16;
           $449 = $448 & 4;
           $450 = $449 | $445;
           $451 = $446 << $449;
           $452 = (($451) + 245760)|0;
           $453 = $452 >>> 16;
           $454 = $453 & 2;
           $455 = $450 | $454;
           $456 = (14 - ($455))|0;
           $457 = $451 << $454;
           $458 = $457 >>> 15;
           $459 = (($456) + ($458))|0;
           $460 = $459 << 1;
           $461 = (($459) + 7)|0;
           $462 = $rsize$3$lcssa$i >>> $461;
           $463 = $462 & 1;
           $464 = $463 | $460;
           $I7$0$i = $464;
          }
         }
         $465 = ((30080 + ($I7$0$i<<2)|0) + 304|0);
         $$sum2$i = (($247) + 28)|0;
         $466 = (($v$3$lcssa$i) + ($$sum2$i)|0);
         HEAP32[$466>>2] = $I7$0$i;
         $$sum3$i27 = (($247) + 16)|0;
         $467 = (($v$3$lcssa$i) + ($$sum3$i27)|0);
         $$sum4$i28 = (($247) + 20)|0;
         $468 = (($v$3$lcssa$i) + ($$sum4$i28)|0);
         HEAP32[$468>>2] = 0;
         HEAP32[$467>>2] = 0;
         $469 = HEAP32[((30080 + 4|0))>>2]|0;
         $470 = 1 << $I7$0$i;
         $471 = $469 & $470;
         $472 = ($471|0)==(0);
         if ($472) {
          $473 = $469 | $470;
          HEAP32[((30080 + 4|0))>>2] = $473;
          HEAP32[$465>>2] = $349;
          $$sum5$i = (($247) + 24)|0;
          $474 = (($v$3$lcssa$i) + ($$sum5$i)|0);
          HEAP32[$474>>2] = $465;
          $$sum6$i = (($247) + 12)|0;
          $475 = (($v$3$lcssa$i) + ($$sum6$i)|0);
          HEAP32[$475>>2] = $349;
          $$sum7$i = (($247) + 8)|0;
          $476 = (($v$3$lcssa$i) + ($$sum7$i)|0);
          HEAP32[$476>>2] = $349;
          break;
         }
         $477 = HEAP32[$465>>2]|0;
         $478 = ($I7$0$i|0)==(31);
         if ($478) {
          $486 = 0;
         } else {
          $479 = $I7$0$i >>> 1;
          $480 = (25 - ($479))|0;
          $486 = $480;
         }
         $481 = (($477) + 4|0);
         $482 = HEAP32[$481>>2]|0;
         $483 = $482 & -8;
         $484 = ($483|0)==($rsize$3$lcssa$i|0);
         L224: do {
          if ($484) {
           $T$0$lcssa$i = $477;
          } else {
           $485 = $rsize$3$lcssa$i << $486;
           $K12$025$i = $485;$T$024$i = $477;
           while(1) {
            $493 = $K12$025$i >>> 31;
            $494 = ((($T$024$i) + ($493<<2)|0) + 16|0);
            $489 = HEAP32[$494>>2]|0;
            $495 = ($489|0)==(0|0);
            if ($495) {
             break;
            }
            $487 = $K12$025$i << 1;
            $488 = (($489) + 4|0);
            $490 = HEAP32[$488>>2]|0;
            $491 = $490 & -8;
            $492 = ($491|0)==($rsize$3$lcssa$i|0);
            if ($492) {
             $T$0$lcssa$i = $489;
             break L224;
            } else {
             $K12$025$i = $487;$T$024$i = $489;
            }
           }
           $496 = HEAP32[((30080 + 16|0))>>2]|0;
           $497 = ($494>>>0)<($496>>>0);
           if ($497) {
            _abort();
            // unreachable;
           } else {
            HEAP32[$494>>2] = $349;
            $$sum11$i = (($247) + 24)|0;
            $498 = (($v$3$lcssa$i) + ($$sum11$i)|0);
            HEAP32[$498>>2] = $T$024$i;
            $$sum12$i = (($247) + 12)|0;
            $499 = (($v$3$lcssa$i) + ($$sum12$i)|0);
            HEAP32[$499>>2] = $349;
            $$sum13$i = (($247) + 8)|0;
            $500 = (($v$3$lcssa$i) + ($$sum13$i)|0);
            HEAP32[$500>>2] = $349;
            break L204;
           }
          }
         } while(0);
         $501 = (($T$0$lcssa$i) + 8|0);
         $502 = HEAP32[$501>>2]|0;
         $503 = HEAP32[((30080 + 16|0))>>2]|0;
         $504 = ($T$0$lcssa$i>>>0)<($503>>>0);
         if ($504) {
          _abort();
          // unreachable;
         }
         $505 = ($502>>>0)<($503>>>0);
         if ($505) {
          _abort();
          // unreachable;
         } else {
          $506 = (($502) + 12|0);
          HEAP32[$506>>2] = $349;
          HEAP32[$501>>2] = $349;
          $$sum8$i = (($247) + 8)|0;
          $507 = (($v$3$lcssa$i) + ($$sum8$i)|0);
          HEAP32[$507>>2] = $502;
          $$sum9$i = (($247) + 12)|0;
          $508 = (($v$3$lcssa$i) + ($$sum9$i)|0);
          HEAP32[$508>>2] = $T$0$lcssa$i;
          $$sum10$i = (($247) + 24)|0;
          $509 = (($v$3$lcssa$i) + ($$sum10$i)|0);
          HEAP32[$509>>2] = 0;
          break;
         }
        }
       } while(0);
       $510 = (($v$3$lcssa$i) + 8|0);
       $mem$0 = $510;
       STACKTOP = sp;return ($mem$0|0);
      } else {
       $nb$0 = $247;
      }
     }
    }
   }
  }
 } while(0);
 $511 = HEAP32[((30080 + 8|0))>>2]|0;
 $512 = ($nb$0>>>0)>($511>>>0);
 if (!($512)) {
  $513 = (($511) - ($nb$0))|0;
  $514 = HEAP32[((30080 + 20|0))>>2]|0;
  $515 = ($513>>>0)>(15);
  if ($515) {
   $516 = (($514) + ($nb$0)|0);
   HEAP32[((30080 + 20|0))>>2] = $516;
   HEAP32[((30080 + 8|0))>>2] = $513;
   $517 = $513 | 1;
   $$sum2 = (($nb$0) + 4)|0;
   $518 = (($514) + ($$sum2)|0);
   HEAP32[$518>>2] = $517;
   $519 = (($514) + ($511)|0);
   HEAP32[$519>>2] = $513;
   $520 = $nb$0 | 3;
   $521 = (($514) + 4|0);
   HEAP32[$521>>2] = $520;
  } else {
   HEAP32[((30080 + 8|0))>>2] = 0;
   HEAP32[((30080 + 20|0))>>2] = 0;
   $522 = $511 | 3;
   $523 = (($514) + 4|0);
   HEAP32[$523>>2] = $522;
   $$sum1 = (($511) + 4)|0;
   $524 = (($514) + ($$sum1)|0);
   $525 = HEAP32[$524>>2]|0;
   $526 = $525 | 1;
   HEAP32[$524>>2] = $526;
  }
  $527 = (($514) + 8|0);
  $mem$0 = $527;
  STACKTOP = sp;return ($mem$0|0);
 }
 $528 = HEAP32[((30080 + 12|0))>>2]|0;
 $529 = ($nb$0>>>0)<($528>>>0);
 if ($529) {
  $530 = (($528) - ($nb$0))|0;
  HEAP32[((30080 + 12|0))>>2] = $530;
  $531 = HEAP32[((30080 + 24|0))>>2]|0;
  $532 = (($531) + ($nb$0)|0);
  HEAP32[((30080 + 24|0))>>2] = $532;
  $533 = $530 | 1;
  $$sum = (($nb$0) + 4)|0;
  $534 = (($531) + ($$sum)|0);
  HEAP32[$534>>2] = $533;
  $535 = $nb$0 | 3;
  $536 = (($531) + 4|0);
  HEAP32[$536>>2] = $535;
  $537 = (($531) + 8|0);
  $mem$0 = $537;
  STACKTOP = sp;return ($mem$0|0);
 }
 $538 = HEAP32[30552>>2]|0;
 $539 = ($538|0)==(0);
 do {
  if ($539) {
   $540 = (_sysconf(30)|0);
   $541 = (($540) + -1)|0;
   $542 = $541 & $540;
   $543 = ($542|0)==(0);
   if ($543) {
    HEAP32[((30552 + 8|0))>>2] = $540;
    HEAP32[((30552 + 4|0))>>2] = $540;
    HEAP32[((30552 + 12|0))>>2] = -1;
    HEAP32[((30552 + 16|0))>>2] = -1;
    HEAP32[((30552 + 20|0))>>2] = 0;
    HEAP32[((30080 + 444|0))>>2] = 0;
    $544 = (_time((0|0))|0);
    $545 = $544 & -16;
    $546 = $545 ^ 1431655768;
    HEAP32[30552>>2] = $546;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $547 = (($nb$0) + 48)|0;
 $548 = HEAP32[((30552 + 8|0))>>2]|0;
 $549 = (($nb$0) + 47)|0;
 $550 = (($548) + ($549))|0;
 $551 = (0 - ($548))|0;
 $552 = $550 & $551;
 $553 = ($552>>>0)>($nb$0>>>0);
 if (!($553)) {
  $mem$0 = 0;
  STACKTOP = sp;return ($mem$0|0);
 }
 $554 = HEAP32[((30080 + 440|0))>>2]|0;
 $555 = ($554|0)==(0);
 if (!($555)) {
  $556 = HEAP32[((30080 + 432|0))>>2]|0;
  $557 = (($556) + ($552))|0;
  $558 = ($557>>>0)<=($556>>>0);
  $559 = ($557>>>0)>($554>>>0);
  $or$cond1$i = $558 | $559;
  if ($or$cond1$i) {
   $mem$0 = 0;
   STACKTOP = sp;return ($mem$0|0);
  }
 }
 $560 = HEAP32[((30080 + 444|0))>>2]|0;
 $561 = $560 & 4;
 $562 = ($561|0)==(0);
 L269: do {
  if ($562) {
   $563 = HEAP32[((30080 + 24|0))>>2]|0;
   $564 = ($563|0)==(0|0);
   L271: do {
    if ($564) {
     label = 182;
    } else {
     $sp$0$i$i = ((30080 + 448|0));
     while(1) {
      $565 = HEAP32[$sp$0$i$i>>2]|0;
      $566 = ($565>>>0)>($563>>>0);
      if (!($566)) {
       $567 = (($sp$0$i$i) + 4|0);
       $568 = HEAP32[$567>>2]|0;
       $569 = (($565) + ($568)|0);
       $570 = ($569>>>0)>($563>>>0);
       if ($570) {
        break;
       }
      }
      $571 = (($sp$0$i$i) + 8|0);
      $572 = HEAP32[$571>>2]|0;
      $573 = ($572|0)==(0|0);
      if ($573) {
       label = 182;
       break L271;
      } else {
       $sp$0$i$i = $572;
      }
     }
     $574 = ($sp$0$i$i|0)==(0|0);
     if ($574) {
      label = 182;
     } else {
      $597 = HEAP32[((30080 + 12|0))>>2]|0;
      $598 = (($550) - ($597))|0;
      $599 = $598 & $551;
      $600 = ($599>>>0)<(2147483647);
      if ($600) {
       $601 = (_sbrk(($599|0))|0);
       $602 = HEAP32[$sp$0$i$i>>2]|0;
       $603 = HEAP32[$567>>2]|0;
       $604 = (($602) + ($603)|0);
       $605 = ($601|0)==($604|0);
       $$3$i = $605 ? $599 : 0;
       $$4$i = $605 ? $601 : (-1);
       $br$0$i = $601;$ssize$1$i = $599;$tbase$0$i = $$4$i;$tsize$0$i = $$3$i;
       label = 191;
      } else {
       $tsize$0323841$i = 0;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 182) {
     $575 = (_sbrk(0)|0);
     $576 = ($575|0)==((-1)|0);
     if ($576) {
      $tsize$0323841$i = 0;
     } else {
      $577 = $575;
      $578 = HEAP32[((30552 + 4|0))>>2]|0;
      $579 = (($578) + -1)|0;
      $580 = $579 & $577;
      $581 = ($580|0)==(0);
      if ($581) {
       $ssize$0$i = $552;
      } else {
       $582 = (($579) + ($577))|0;
       $583 = (0 - ($578))|0;
       $584 = $582 & $583;
       $585 = (($552) - ($577))|0;
       $586 = (($585) + ($584))|0;
       $ssize$0$i = $586;
      }
      $587 = HEAP32[((30080 + 432|0))>>2]|0;
      $588 = (($587) + ($ssize$0$i))|0;
      $589 = ($ssize$0$i>>>0)>($nb$0>>>0);
      $590 = ($ssize$0$i>>>0)<(2147483647);
      $or$cond$i29 = $589 & $590;
      if ($or$cond$i29) {
       $591 = HEAP32[((30080 + 440|0))>>2]|0;
       $592 = ($591|0)==(0);
       if (!($592)) {
        $593 = ($588>>>0)<=($587>>>0);
        $594 = ($588>>>0)>($591>>>0);
        $or$cond2$i = $593 | $594;
        if ($or$cond2$i) {
         $tsize$0323841$i = 0;
         break;
        }
       }
       $595 = (_sbrk(($ssize$0$i|0))|0);
       $596 = ($595|0)==($575|0);
       $ssize$0$$i = $596 ? $ssize$0$i : 0;
       $$$i = $596 ? $575 : (-1);
       $br$0$i = $595;$ssize$1$i = $ssize$0$i;$tbase$0$i = $$$i;$tsize$0$i = $ssize$0$$i;
       label = 191;
      } else {
       $tsize$0323841$i = 0;
      }
     }
    }
   } while(0);
   L291: do {
    if ((label|0) == 191) {
     $606 = (0 - ($ssize$1$i))|0;
     $607 = ($tbase$0$i|0)==((-1)|0);
     if (!($607)) {
      $tbase$247$i = $tbase$0$i;$tsize$246$i = $tsize$0$i;
      label = 202;
      break L269;
     }
     $608 = ($br$0$i|0)!=((-1)|0);
     $609 = ($ssize$1$i>>>0)<(2147483647);
     $or$cond5$i = $608 & $609;
     $610 = ($ssize$1$i>>>0)<($547>>>0);
     $or$cond6$i = $or$cond5$i & $610;
     do {
      if ($or$cond6$i) {
       $611 = HEAP32[((30552 + 8|0))>>2]|0;
       $612 = (($549) - ($ssize$1$i))|0;
       $613 = (($612) + ($611))|0;
       $614 = (0 - ($611))|0;
       $615 = $613 & $614;
       $616 = ($615>>>0)<(2147483647);
       if ($616) {
        $617 = (_sbrk(($615|0))|0);
        $618 = ($617|0)==((-1)|0);
        if ($618) {
         (_sbrk(($606|0))|0);
         $tsize$0323841$i = $tsize$0$i;
         break L291;
        } else {
         $619 = (($615) + ($ssize$1$i))|0;
         $ssize$2$i = $619;
         break;
        }
       } else {
        $ssize$2$i = $ssize$1$i;
       }
      } else {
       $ssize$2$i = $ssize$1$i;
      }
     } while(0);
     $620 = ($br$0$i|0)==((-1)|0);
     if ($620) {
      $tsize$0323841$i = $tsize$0$i;
     } else {
      $tbase$247$i = $br$0$i;$tsize$246$i = $ssize$2$i;
      label = 202;
      break L269;
     }
    }
   } while(0);
   $621 = HEAP32[((30080 + 444|0))>>2]|0;
   $622 = $621 | 4;
   HEAP32[((30080 + 444|0))>>2] = $622;
   $tsize$1$i = $tsize$0323841$i;
   label = 199;
  } else {
   $tsize$1$i = 0;
   label = 199;
  }
 } while(0);
 if ((label|0) == 199) {
  $623 = ($552>>>0)<(2147483647);
  if ($623) {
   $624 = (_sbrk(($552|0))|0);
   $625 = (_sbrk(0)|0);
   $notlhs$i = ($624|0)!=((-1)|0);
   $notrhs$i = ($625|0)!=((-1)|0);
   $or$cond8$not$i = $notrhs$i & $notlhs$i;
   $626 = ($624>>>0)<($625>>>0);
   $or$cond9$i = $or$cond8$not$i & $626;
   if ($or$cond9$i) {
    $627 = $625;
    $628 = $624;
    $629 = (($627) - ($628))|0;
    $630 = (($nb$0) + 40)|0;
    $631 = ($629>>>0)>($630>>>0);
    $$tsize$1$i = $631 ? $629 : $tsize$1$i;
    if ($631) {
     $tbase$247$i = $624;$tsize$246$i = $$tsize$1$i;
     label = 202;
    }
   }
  }
 }
 if ((label|0) == 202) {
  $632 = HEAP32[((30080 + 432|0))>>2]|0;
  $633 = (($632) + ($tsize$246$i))|0;
  HEAP32[((30080 + 432|0))>>2] = $633;
  $634 = HEAP32[((30080 + 436|0))>>2]|0;
  $635 = ($633>>>0)>($634>>>0);
  if ($635) {
   HEAP32[((30080 + 436|0))>>2] = $633;
  }
  $636 = HEAP32[((30080 + 24|0))>>2]|0;
  $637 = ($636|0)==(0|0);
  L311: do {
   if ($637) {
    $638 = HEAP32[((30080 + 16|0))>>2]|0;
    $639 = ($638|0)==(0|0);
    $640 = ($tbase$247$i>>>0)<($638>>>0);
    $or$cond10$i = $639 | $640;
    if ($or$cond10$i) {
     HEAP32[((30080 + 16|0))>>2] = $tbase$247$i;
    }
    HEAP32[((30080 + 448|0))>>2] = $tbase$247$i;
    HEAP32[((30080 + 452|0))>>2] = $tsize$246$i;
    HEAP32[((30080 + 460|0))>>2] = 0;
    $641 = HEAP32[30552>>2]|0;
    HEAP32[((30080 + 36|0))>>2] = $641;
    HEAP32[((30080 + 32|0))>>2] = -1;
    $i$02$i$i = 0;
    while(1) {
     $642 = $i$02$i$i << 1;
     $643 = ((30080 + ($642<<2)|0) + 40|0);
     $$sum$i$i = (($642) + 3)|0;
     $644 = ((30080 + ($$sum$i$i<<2)|0) + 40|0);
     HEAP32[$644>>2] = $643;
     $$sum1$i$i = (($642) + 2)|0;
     $645 = ((30080 + ($$sum1$i$i<<2)|0) + 40|0);
     HEAP32[$645>>2] = $643;
     $646 = (($i$02$i$i) + 1)|0;
     $exitcond$i$i = ($646|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $i$02$i$i = $646;
     }
    }
    $647 = (($tsize$246$i) + -40)|0;
    $648 = (($tbase$247$i) + 8|0);
    $649 = $648;
    $650 = $649 & 7;
    $651 = ($650|0)==(0);
    if ($651) {
     $655 = 0;
    } else {
     $652 = (0 - ($649))|0;
     $653 = $652 & 7;
     $655 = $653;
    }
    $654 = (($tbase$247$i) + ($655)|0);
    $656 = (($647) - ($655))|0;
    HEAP32[((30080 + 24|0))>>2] = $654;
    HEAP32[((30080 + 12|0))>>2] = $656;
    $657 = $656 | 1;
    $$sum$i14$i = (($655) + 4)|0;
    $658 = (($tbase$247$i) + ($$sum$i14$i)|0);
    HEAP32[$658>>2] = $657;
    $$sum2$i$i = (($tsize$246$i) + -36)|0;
    $659 = (($tbase$247$i) + ($$sum2$i$i)|0);
    HEAP32[$659>>2] = 40;
    $660 = HEAP32[((30552 + 16|0))>>2]|0;
    HEAP32[((30080 + 28|0))>>2] = $660;
   } else {
    $sp$075$i = ((30080 + 448|0));
    while(1) {
     $661 = HEAP32[$sp$075$i>>2]|0;
     $662 = (($sp$075$i) + 4|0);
     $663 = HEAP32[$662>>2]|0;
     $664 = (($661) + ($663)|0);
     $665 = ($tbase$247$i|0)==($664|0);
     if ($665) {
      label = 214;
      break;
     }
     $666 = (($sp$075$i) + 8|0);
     $667 = HEAP32[$666>>2]|0;
     $668 = ($667|0)==(0|0);
     if ($668) {
      break;
     } else {
      $sp$075$i = $667;
     }
    }
    if ((label|0) == 214) {
     $669 = (($sp$075$i) + 12|0);
     $670 = HEAP32[$669>>2]|0;
     $671 = $670 & 8;
     $672 = ($671|0)==(0);
     if ($672) {
      $673 = ($636>>>0)>=($661>>>0);
      $674 = ($636>>>0)<($tbase$247$i>>>0);
      $or$cond49$i = $673 & $674;
      if ($or$cond49$i) {
       $675 = (($663) + ($tsize$246$i))|0;
       HEAP32[$662>>2] = $675;
       $676 = HEAP32[((30080 + 12|0))>>2]|0;
       $677 = (($676) + ($tsize$246$i))|0;
       $678 = (($636) + 8|0);
       $679 = $678;
       $680 = $679 & 7;
       $681 = ($680|0)==(0);
       if ($681) {
        $685 = 0;
       } else {
        $682 = (0 - ($679))|0;
        $683 = $682 & 7;
        $685 = $683;
       }
       $684 = (($636) + ($685)|0);
       $686 = (($677) - ($685))|0;
       HEAP32[((30080 + 24|0))>>2] = $684;
       HEAP32[((30080 + 12|0))>>2] = $686;
       $687 = $686 | 1;
       $$sum$i18$i = (($685) + 4)|0;
       $688 = (($636) + ($$sum$i18$i)|0);
       HEAP32[$688>>2] = $687;
       $$sum2$i19$i = (($677) + 4)|0;
       $689 = (($636) + ($$sum2$i19$i)|0);
       HEAP32[$689>>2] = 40;
       $690 = HEAP32[((30552 + 16|0))>>2]|0;
       HEAP32[((30080 + 28|0))>>2] = $690;
       break;
      }
     }
    }
    $691 = HEAP32[((30080 + 16|0))>>2]|0;
    $692 = ($tbase$247$i>>>0)<($691>>>0);
    if ($692) {
     HEAP32[((30080 + 16|0))>>2] = $tbase$247$i;
    }
    $693 = (($tbase$247$i) + ($tsize$246$i)|0);
    $sp$168$i = ((30080 + 448|0));
    while(1) {
     $694 = HEAP32[$sp$168$i>>2]|0;
     $695 = ($694|0)==($693|0);
     if ($695) {
      label = 224;
      break;
     }
     $696 = (($sp$168$i) + 8|0);
     $697 = HEAP32[$696>>2]|0;
     $698 = ($697|0)==(0|0);
     if ($698) {
      break;
     } else {
      $sp$168$i = $697;
     }
    }
    if ((label|0) == 224) {
     $699 = (($sp$168$i) + 12|0);
     $700 = HEAP32[$699>>2]|0;
     $701 = $700 & 8;
     $702 = ($701|0)==(0);
     if ($702) {
      HEAP32[$sp$168$i>>2] = $tbase$247$i;
      $703 = (($sp$168$i) + 4|0);
      $704 = HEAP32[$703>>2]|0;
      $705 = (($704) + ($tsize$246$i))|0;
      HEAP32[$703>>2] = $705;
      $706 = (($tbase$247$i) + 8|0);
      $707 = $706;
      $708 = $707 & 7;
      $709 = ($708|0)==(0);
      if ($709) {
       $713 = 0;
      } else {
       $710 = (0 - ($707))|0;
       $711 = $710 & 7;
       $713 = $711;
      }
      $712 = (($tbase$247$i) + ($713)|0);
      $$sum107$i = (($tsize$246$i) + 8)|0;
      $714 = (($tbase$247$i) + ($$sum107$i)|0);
      $715 = $714;
      $716 = $715 & 7;
      $717 = ($716|0)==(0);
      if ($717) {
       $720 = 0;
      } else {
       $718 = (0 - ($715))|0;
       $719 = $718 & 7;
       $720 = $719;
      }
      $$sum108$i = (($720) + ($tsize$246$i))|0;
      $721 = (($tbase$247$i) + ($$sum108$i)|0);
      $722 = $721;
      $723 = $712;
      $724 = (($722) - ($723))|0;
      $$sum$i21$i = (($713) + ($nb$0))|0;
      $725 = (($tbase$247$i) + ($$sum$i21$i)|0);
      $726 = (($724) - ($nb$0))|0;
      $727 = $nb$0 | 3;
      $$sum1$i22$i = (($713) + 4)|0;
      $728 = (($tbase$247$i) + ($$sum1$i22$i)|0);
      HEAP32[$728>>2] = $727;
      $729 = HEAP32[((30080 + 24|0))>>2]|0;
      $730 = ($721|0)==($729|0);
      L338: do {
       if ($730) {
        $731 = HEAP32[((30080 + 12|0))>>2]|0;
        $732 = (($731) + ($726))|0;
        HEAP32[((30080 + 12|0))>>2] = $732;
        HEAP32[((30080 + 24|0))>>2] = $725;
        $733 = $732 | 1;
        $$sum42$i$i = (($$sum$i21$i) + 4)|0;
        $734 = (($tbase$247$i) + ($$sum42$i$i)|0);
        HEAP32[$734>>2] = $733;
       } else {
        $735 = HEAP32[((30080 + 20|0))>>2]|0;
        $736 = ($721|0)==($735|0);
        if ($736) {
         $737 = HEAP32[((30080 + 8|0))>>2]|0;
         $738 = (($737) + ($726))|0;
         HEAP32[((30080 + 8|0))>>2] = $738;
         HEAP32[((30080 + 20|0))>>2] = $725;
         $739 = $738 | 1;
         $$sum40$i$i = (($$sum$i21$i) + 4)|0;
         $740 = (($tbase$247$i) + ($$sum40$i$i)|0);
         HEAP32[$740>>2] = $739;
         $$sum41$i$i = (($738) + ($$sum$i21$i))|0;
         $741 = (($tbase$247$i) + ($$sum41$i$i)|0);
         HEAP32[$741>>2] = $738;
         break;
        }
        $$sum2$i23$i = (($tsize$246$i) + 4)|0;
        $$sum109$i = (($$sum2$i23$i) + ($720))|0;
        $742 = (($tbase$247$i) + ($$sum109$i)|0);
        $743 = HEAP32[$742>>2]|0;
        $744 = $743 & 3;
        $745 = ($744|0)==(1);
        if ($745) {
         $746 = $743 & -8;
         $747 = $743 >>> 3;
         $748 = ($743>>>0)<(256);
         L346: do {
          if ($748) {
           $$sum3738$i$i = $720 | 8;
           $$sum119$i = (($$sum3738$i$i) + ($tsize$246$i))|0;
           $749 = (($tbase$247$i) + ($$sum119$i)|0);
           $750 = HEAP32[$749>>2]|0;
           $$sum39$i$i = (($tsize$246$i) + 12)|0;
           $$sum120$i = (($$sum39$i$i) + ($720))|0;
           $751 = (($tbase$247$i) + ($$sum120$i)|0);
           $752 = HEAP32[$751>>2]|0;
           $753 = $747 << 1;
           $754 = ((30080 + ($753<<2)|0) + 40|0);
           $755 = ($750|0)==($754|0);
           do {
            if (!($755)) {
             $756 = HEAP32[((30080 + 16|0))>>2]|0;
             $757 = ($750>>>0)<($756>>>0);
             if ($757) {
              _abort();
              // unreachable;
             }
             $758 = (($750) + 12|0);
             $759 = HEAP32[$758>>2]|0;
             $760 = ($759|0)==($721|0);
             if ($760) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $761 = ($752|0)==($750|0);
           if ($761) {
            $762 = 1 << $747;
            $763 = $762 ^ -1;
            $764 = HEAP32[30080>>2]|0;
            $765 = $764 & $763;
            HEAP32[30080>>2] = $765;
            break;
           }
           $766 = ($752|0)==($754|0);
           do {
            if ($766) {
             $$pre57$i$i = (($752) + 8|0);
             $$pre$phi58$i$iZ2D = $$pre57$i$i;
            } else {
             $767 = HEAP32[((30080 + 16|0))>>2]|0;
             $768 = ($752>>>0)<($767>>>0);
             if ($768) {
              _abort();
              // unreachable;
             }
             $769 = (($752) + 8|0);
             $770 = HEAP32[$769>>2]|0;
             $771 = ($770|0)==($721|0);
             if ($771) {
              $$pre$phi58$i$iZ2D = $769;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $772 = (($750) + 12|0);
           HEAP32[$772>>2] = $752;
           HEAP32[$$pre$phi58$i$iZ2D>>2] = $750;
          } else {
           $$sum34$i$i = $720 | 24;
           $$sum110$i = (($$sum34$i$i) + ($tsize$246$i))|0;
           $773 = (($tbase$247$i) + ($$sum110$i)|0);
           $774 = HEAP32[$773>>2]|0;
           $$sum5$i$i = (($tsize$246$i) + 12)|0;
           $$sum111$i = (($$sum5$i$i) + ($720))|0;
           $775 = (($tbase$247$i) + ($$sum111$i)|0);
           $776 = HEAP32[$775>>2]|0;
           $777 = ($776|0)==($721|0);
           do {
            if ($777) {
             $$sum67$i$i = $720 | 16;
             $$sum117$i = (($$sum2$i23$i) + ($$sum67$i$i))|0;
             $788 = (($tbase$247$i) + ($$sum117$i)|0);
             $789 = HEAP32[$788>>2]|0;
             $790 = ($789|0)==(0|0);
             if ($790) {
              $$sum118$i = (($$sum67$i$i) + ($tsize$246$i))|0;
              $791 = (($tbase$247$i) + ($$sum118$i)|0);
              $792 = HEAP32[$791>>2]|0;
              $793 = ($792|0)==(0|0);
              if ($793) {
               $R$1$i$i = 0;
               break;
              } else {
               $R$0$i$i = $792;$RP$0$i$i = $791;
              }
             } else {
              $R$0$i$i = $789;$RP$0$i$i = $788;
             }
             while(1) {
              $794 = (($R$0$i$i) + 20|0);
              $795 = HEAP32[$794>>2]|0;
              $796 = ($795|0)==(0|0);
              if (!($796)) {
               $R$0$i$i = $795;$RP$0$i$i = $794;
               continue;
              }
              $797 = (($R$0$i$i) + 16|0);
              $798 = HEAP32[$797>>2]|0;
              $799 = ($798|0)==(0|0);
              if ($799) {
               break;
              } else {
               $R$0$i$i = $798;$RP$0$i$i = $797;
              }
             }
             $800 = HEAP32[((30080 + 16|0))>>2]|0;
             $801 = ($RP$0$i$i>>>0)<($800>>>0);
             if ($801) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$RP$0$i$i>>2] = 0;
              $R$1$i$i = $R$0$i$i;
              break;
             }
            } else {
             $$sum3536$i$i = $720 | 8;
             $$sum112$i = (($$sum3536$i$i) + ($tsize$246$i))|0;
             $778 = (($tbase$247$i) + ($$sum112$i)|0);
             $779 = HEAP32[$778>>2]|0;
             $780 = HEAP32[((30080 + 16|0))>>2]|0;
             $781 = ($779>>>0)<($780>>>0);
             if ($781) {
              _abort();
              // unreachable;
             }
             $782 = (($779) + 12|0);
             $783 = HEAP32[$782>>2]|0;
             $784 = ($783|0)==($721|0);
             if (!($784)) {
              _abort();
              // unreachable;
             }
             $785 = (($776) + 8|0);
             $786 = HEAP32[$785>>2]|0;
             $787 = ($786|0)==($721|0);
             if ($787) {
              HEAP32[$782>>2] = $776;
              HEAP32[$785>>2] = $779;
              $R$1$i$i = $776;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $802 = ($774|0)==(0|0);
           if ($802) {
            break;
           }
           $$sum30$i$i = (($tsize$246$i) + 28)|0;
           $$sum113$i = (($$sum30$i$i) + ($720))|0;
           $803 = (($tbase$247$i) + ($$sum113$i)|0);
           $804 = HEAP32[$803>>2]|0;
           $805 = ((30080 + ($804<<2)|0) + 304|0);
           $806 = HEAP32[$805>>2]|0;
           $807 = ($721|0)==($806|0);
           do {
            if ($807) {
             HEAP32[$805>>2] = $R$1$i$i;
             $cond$i$i = ($R$1$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $808 = 1 << $804;
             $809 = $808 ^ -1;
             $810 = HEAP32[((30080 + 4|0))>>2]|0;
             $811 = $810 & $809;
             HEAP32[((30080 + 4|0))>>2] = $811;
             break L346;
            } else {
             $812 = HEAP32[((30080 + 16|0))>>2]|0;
             $813 = ($774>>>0)<($812>>>0);
             if ($813) {
              _abort();
              // unreachable;
             }
             $814 = (($774) + 16|0);
             $815 = HEAP32[$814>>2]|0;
             $816 = ($815|0)==($721|0);
             if ($816) {
              HEAP32[$814>>2] = $R$1$i$i;
             } else {
              $817 = (($774) + 20|0);
              HEAP32[$817>>2] = $R$1$i$i;
             }
             $818 = ($R$1$i$i|0)==(0|0);
             if ($818) {
              break L346;
             }
            }
           } while(0);
           $819 = HEAP32[((30080 + 16|0))>>2]|0;
           $820 = ($R$1$i$i>>>0)<($819>>>0);
           if ($820) {
            _abort();
            // unreachable;
           }
           $821 = (($R$1$i$i) + 24|0);
           HEAP32[$821>>2] = $774;
           $$sum3132$i$i = $720 | 16;
           $$sum114$i = (($$sum3132$i$i) + ($tsize$246$i))|0;
           $822 = (($tbase$247$i) + ($$sum114$i)|0);
           $823 = HEAP32[$822>>2]|0;
           $824 = ($823|0)==(0|0);
           do {
            if (!($824)) {
             $825 = HEAP32[((30080 + 16|0))>>2]|0;
             $826 = ($823>>>0)<($825>>>0);
             if ($826) {
              _abort();
              // unreachable;
             } else {
              $827 = (($R$1$i$i) + 16|0);
              HEAP32[$827>>2] = $823;
              $828 = (($823) + 24|0);
              HEAP32[$828>>2] = $R$1$i$i;
              break;
             }
            }
           } while(0);
           $$sum115$i = (($$sum2$i23$i) + ($$sum3132$i$i))|0;
           $829 = (($tbase$247$i) + ($$sum115$i)|0);
           $830 = HEAP32[$829>>2]|0;
           $831 = ($830|0)==(0|0);
           if ($831) {
            break;
           }
           $832 = HEAP32[((30080 + 16|0))>>2]|0;
           $833 = ($830>>>0)<($832>>>0);
           if ($833) {
            _abort();
            // unreachable;
           } else {
            $834 = (($R$1$i$i) + 20|0);
            HEAP32[$834>>2] = $830;
            $835 = (($830) + 24|0);
            HEAP32[$835>>2] = $R$1$i$i;
            break;
           }
          }
         } while(0);
         $$sum9$i$i = $746 | $720;
         $$sum116$i = (($$sum9$i$i) + ($tsize$246$i))|0;
         $836 = (($tbase$247$i) + ($$sum116$i)|0);
         $837 = (($746) + ($726))|0;
         $oldfirst$0$i$i = $836;$qsize$0$i$i = $837;
        } else {
         $oldfirst$0$i$i = $721;$qsize$0$i$i = $726;
        }
        $838 = (($oldfirst$0$i$i) + 4|0);
        $839 = HEAP32[$838>>2]|0;
        $840 = $839 & -2;
        HEAP32[$838>>2] = $840;
        $841 = $qsize$0$i$i | 1;
        $$sum10$i$i = (($$sum$i21$i) + 4)|0;
        $842 = (($tbase$247$i) + ($$sum10$i$i)|0);
        HEAP32[$842>>2] = $841;
        $$sum11$i24$i = (($qsize$0$i$i) + ($$sum$i21$i))|0;
        $843 = (($tbase$247$i) + ($$sum11$i24$i)|0);
        HEAP32[$843>>2] = $qsize$0$i$i;
        $844 = $qsize$0$i$i >>> 3;
        $845 = ($qsize$0$i$i>>>0)<(256);
        if ($845) {
         $846 = $844 << 1;
         $847 = ((30080 + ($846<<2)|0) + 40|0);
         $848 = HEAP32[30080>>2]|0;
         $849 = 1 << $844;
         $850 = $848 & $849;
         $851 = ($850|0)==(0);
         do {
          if ($851) {
           $852 = $848 | $849;
           HEAP32[30080>>2] = $852;
           $$sum26$pre$i$i = (($846) + 2)|0;
           $$pre$i25$i = ((30080 + ($$sum26$pre$i$i<<2)|0) + 40|0);
           $$pre$phi$i26$iZ2D = $$pre$i25$i;$F4$0$i$i = $847;
          } else {
           $$sum29$i$i = (($846) + 2)|0;
           $853 = ((30080 + ($$sum29$i$i<<2)|0) + 40|0);
           $854 = HEAP32[$853>>2]|0;
           $855 = HEAP32[((30080 + 16|0))>>2]|0;
           $856 = ($854>>>0)<($855>>>0);
           if (!($856)) {
            $$pre$phi$i26$iZ2D = $853;$F4$0$i$i = $854;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i26$iZ2D>>2] = $725;
         $857 = (($F4$0$i$i) + 12|0);
         HEAP32[$857>>2] = $725;
         $$sum27$i$i = (($$sum$i21$i) + 8)|0;
         $858 = (($tbase$247$i) + ($$sum27$i$i)|0);
         HEAP32[$858>>2] = $F4$0$i$i;
         $$sum28$i$i = (($$sum$i21$i) + 12)|0;
         $859 = (($tbase$247$i) + ($$sum28$i$i)|0);
         HEAP32[$859>>2] = $847;
         break;
        }
        $860 = $qsize$0$i$i >>> 8;
        $861 = ($860|0)==(0);
        do {
         if ($861) {
          $I7$0$i$i = 0;
         } else {
          $862 = ($qsize$0$i$i>>>0)>(16777215);
          if ($862) {
           $I7$0$i$i = 31;
           break;
          }
          $863 = (($860) + 1048320)|0;
          $864 = $863 >>> 16;
          $865 = $864 & 8;
          $866 = $860 << $865;
          $867 = (($866) + 520192)|0;
          $868 = $867 >>> 16;
          $869 = $868 & 4;
          $870 = $869 | $865;
          $871 = $866 << $869;
          $872 = (($871) + 245760)|0;
          $873 = $872 >>> 16;
          $874 = $873 & 2;
          $875 = $870 | $874;
          $876 = (14 - ($875))|0;
          $877 = $871 << $874;
          $878 = $877 >>> 15;
          $879 = (($876) + ($878))|0;
          $880 = $879 << 1;
          $881 = (($879) + 7)|0;
          $882 = $qsize$0$i$i >>> $881;
          $883 = $882 & 1;
          $884 = $883 | $880;
          $I7$0$i$i = $884;
         }
        } while(0);
        $885 = ((30080 + ($I7$0$i$i<<2)|0) + 304|0);
        $$sum12$i$i = (($$sum$i21$i) + 28)|0;
        $886 = (($tbase$247$i) + ($$sum12$i$i)|0);
        HEAP32[$886>>2] = $I7$0$i$i;
        $$sum13$i$i = (($$sum$i21$i) + 16)|0;
        $887 = (($tbase$247$i) + ($$sum13$i$i)|0);
        $$sum14$i$i = (($$sum$i21$i) + 20)|0;
        $888 = (($tbase$247$i) + ($$sum14$i$i)|0);
        HEAP32[$888>>2] = 0;
        HEAP32[$887>>2] = 0;
        $889 = HEAP32[((30080 + 4|0))>>2]|0;
        $890 = 1 << $I7$0$i$i;
        $891 = $889 & $890;
        $892 = ($891|0)==(0);
        if ($892) {
         $893 = $889 | $890;
         HEAP32[((30080 + 4|0))>>2] = $893;
         HEAP32[$885>>2] = $725;
         $$sum15$i$i = (($$sum$i21$i) + 24)|0;
         $894 = (($tbase$247$i) + ($$sum15$i$i)|0);
         HEAP32[$894>>2] = $885;
         $$sum16$i$i = (($$sum$i21$i) + 12)|0;
         $895 = (($tbase$247$i) + ($$sum16$i$i)|0);
         HEAP32[$895>>2] = $725;
         $$sum17$i$i = (($$sum$i21$i) + 8)|0;
         $896 = (($tbase$247$i) + ($$sum17$i$i)|0);
         HEAP32[$896>>2] = $725;
         break;
        }
        $897 = HEAP32[$885>>2]|0;
        $898 = ($I7$0$i$i|0)==(31);
        if ($898) {
         $906 = 0;
        } else {
         $899 = $I7$0$i$i >>> 1;
         $900 = (25 - ($899))|0;
         $906 = $900;
        }
        $901 = (($897) + 4|0);
        $902 = HEAP32[$901>>2]|0;
        $903 = $902 & -8;
        $904 = ($903|0)==($qsize$0$i$i|0);
        L435: do {
         if ($904) {
          $T$0$lcssa$i28$i = $897;
         } else {
          $905 = $qsize$0$i$i << $906;
          $K8$052$i$i = $905;$T$051$i$i = $897;
          while(1) {
           $913 = $K8$052$i$i >>> 31;
           $914 = ((($T$051$i$i) + ($913<<2)|0) + 16|0);
           $909 = HEAP32[$914>>2]|0;
           $915 = ($909|0)==(0|0);
           if ($915) {
            break;
           }
           $907 = $K8$052$i$i << 1;
           $908 = (($909) + 4|0);
           $910 = HEAP32[$908>>2]|0;
           $911 = $910 & -8;
           $912 = ($911|0)==($qsize$0$i$i|0);
           if ($912) {
            $T$0$lcssa$i28$i = $909;
            break L435;
           } else {
            $K8$052$i$i = $907;$T$051$i$i = $909;
           }
          }
          $916 = HEAP32[((30080 + 16|0))>>2]|0;
          $917 = ($914>>>0)<($916>>>0);
          if ($917) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$914>>2] = $725;
           $$sum23$i$i = (($$sum$i21$i) + 24)|0;
           $918 = (($tbase$247$i) + ($$sum23$i$i)|0);
           HEAP32[$918>>2] = $T$051$i$i;
           $$sum24$i$i = (($$sum$i21$i) + 12)|0;
           $919 = (($tbase$247$i) + ($$sum24$i$i)|0);
           HEAP32[$919>>2] = $725;
           $$sum25$i$i = (($$sum$i21$i) + 8)|0;
           $920 = (($tbase$247$i) + ($$sum25$i$i)|0);
           HEAP32[$920>>2] = $725;
           break L338;
          }
         }
        } while(0);
        $921 = (($T$0$lcssa$i28$i) + 8|0);
        $922 = HEAP32[$921>>2]|0;
        $923 = HEAP32[((30080 + 16|0))>>2]|0;
        $924 = ($T$0$lcssa$i28$i>>>0)<($923>>>0);
        if ($924) {
         _abort();
         // unreachable;
        }
        $925 = ($922>>>0)<($923>>>0);
        if ($925) {
         _abort();
         // unreachable;
        } else {
         $926 = (($922) + 12|0);
         HEAP32[$926>>2] = $725;
         HEAP32[$921>>2] = $725;
         $$sum20$i$i = (($$sum$i21$i) + 8)|0;
         $927 = (($tbase$247$i) + ($$sum20$i$i)|0);
         HEAP32[$927>>2] = $922;
         $$sum21$i$i = (($$sum$i21$i) + 12)|0;
         $928 = (($tbase$247$i) + ($$sum21$i$i)|0);
         HEAP32[$928>>2] = $T$0$lcssa$i28$i;
         $$sum22$i$i = (($$sum$i21$i) + 24)|0;
         $929 = (($tbase$247$i) + ($$sum22$i$i)|0);
         HEAP32[$929>>2] = 0;
         break;
        }
       }
      } while(0);
      $$sum1819$i$i = $713 | 8;
      $930 = (($tbase$247$i) + ($$sum1819$i$i)|0);
      $mem$0 = $930;
      STACKTOP = sp;return ($mem$0|0);
     }
    }
    $sp$0$i$i$i = ((30080 + 448|0));
    while(1) {
     $931 = HEAP32[$sp$0$i$i$i>>2]|0;
     $932 = ($931>>>0)>($636>>>0);
     if (!($932)) {
      $933 = (($sp$0$i$i$i) + 4|0);
      $934 = HEAP32[$933>>2]|0;
      $935 = (($931) + ($934)|0);
      $936 = ($935>>>0)>($636>>>0);
      if ($936) {
       break;
      }
     }
     $937 = (($sp$0$i$i$i) + 8|0);
     $938 = HEAP32[$937>>2]|0;
     $sp$0$i$i$i = $938;
    }
    $$sum$i15$i = (($934) + -47)|0;
    $$sum1$i16$i = (($934) + -39)|0;
    $939 = (($931) + ($$sum1$i16$i)|0);
    $940 = $939;
    $941 = $940 & 7;
    $942 = ($941|0)==(0);
    if ($942) {
     $945 = 0;
    } else {
     $943 = (0 - ($940))|0;
     $944 = $943 & 7;
     $945 = $944;
    }
    $$sum2$i17$i = (($$sum$i15$i) + ($945))|0;
    $946 = (($931) + ($$sum2$i17$i)|0);
    $947 = (($636) + 16|0);
    $948 = ($946>>>0)<($947>>>0);
    $949 = $948 ? $636 : $946;
    $950 = (($949) + 8|0);
    $951 = (($tsize$246$i) + -40)|0;
    $952 = (($tbase$247$i) + 8|0);
    $953 = $952;
    $954 = $953 & 7;
    $955 = ($954|0)==(0);
    if ($955) {
     $959 = 0;
    } else {
     $956 = (0 - ($953))|0;
     $957 = $956 & 7;
     $959 = $957;
    }
    $958 = (($tbase$247$i) + ($959)|0);
    $960 = (($951) - ($959))|0;
    HEAP32[((30080 + 24|0))>>2] = $958;
    HEAP32[((30080 + 12|0))>>2] = $960;
    $961 = $960 | 1;
    $$sum$i$i$i = (($959) + 4)|0;
    $962 = (($tbase$247$i) + ($$sum$i$i$i)|0);
    HEAP32[$962>>2] = $961;
    $$sum2$i$i$i = (($tsize$246$i) + -36)|0;
    $963 = (($tbase$247$i) + ($$sum2$i$i$i)|0);
    HEAP32[$963>>2] = 40;
    $964 = HEAP32[((30552 + 16|0))>>2]|0;
    HEAP32[((30080 + 28|0))>>2] = $964;
    $965 = (($949) + 4|0);
    HEAP32[$965>>2] = 27;
    ;HEAP32[$950+0>>2]=HEAP32[((30080 + 448|0))+0>>2]|0;HEAP32[$950+4>>2]=HEAP32[((30080 + 448|0))+4>>2]|0;HEAP32[$950+8>>2]=HEAP32[((30080 + 448|0))+8>>2]|0;HEAP32[$950+12>>2]=HEAP32[((30080 + 448|0))+12>>2]|0;
    HEAP32[((30080 + 448|0))>>2] = $tbase$247$i;
    HEAP32[((30080 + 452|0))>>2] = $tsize$246$i;
    HEAP32[((30080 + 460|0))>>2] = 0;
    HEAP32[((30080 + 456|0))>>2] = $950;
    $966 = (($949) + 28|0);
    HEAP32[$966>>2] = 7;
    $967 = (($949) + 32|0);
    $968 = ($967>>>0)<($935>>>0);
    if ($968) {
     $970 = $966;
     while(1) {
      $969 = (($970) + 4|0);
      HEAP32[$969>>2] = 7;
      $971 = (($970) + 8|0);
      $972 = ($971>>>0)<($935>>>0);
      if ($972) {
       $970 = $969;
      } else {
       break;
      }
     }
    }
    $973 = ($949|0)==($636|0);
    if (!($973)) {
     $974 = $949;
     $975 = $636;
     $976 = (($974) - ($975))|0;
     $977 = (($636) + ($976)|0);
     $$sum3$i$i = (($976) + 4)|0;
     $978 = (($636) + ($$sum3$i$i)|0);
     $979 = HEAP32[$978>>2]|0;
     $980 = $979 & -2;
     HEAP32[$978>>2] = $980;
     $981 = $976 | 1;
     $982 = (($636) + 4|0);
     HEAP32[$982>>2] = $981;
     HEAP32[$977>>2] = $976;
     $983 = $976 >>> 3;
     $984 = ($976>>>0)<(256);
     if ($984) {
      $985 = $983 << 1;
      $986 = ((30080 + ($985<<2)|0) + 40|0);
      $987 = HEAP32[30080>>2]|0;
      $988 = 1 << $983;
      $989 = $987 & $988;
      $990 = ($989|0)==(0);
      do {
       if ($990) {
        $991 = $987 | $988;
        HEAP32[30080>>2] = $991;
        $$sum10$pre$i$i = (($985) + 2)|0;
        $$pre$i$i = ((30080 + ($$sum10$pre$i$i<<2)|0) + 40|0);
        $$pre$phi$i$iZ2D = $$pre$i$i;$F$0$i$i = $986;
       } else {
        $$sum11$i$i = (($985) + 2)|0;
        $992 = ((30080 + ($$sum11$i$i<<2)|0) + 40|0);
        $993 = HEAP32[$992>>2]|0;
        $994 = HEAP32[((30080 + 16|0))>>2]|0;
        $995 = ($993>>>0)<($994>>>0);
        if (!($995)) {
         $$pre$phi$i$iZ2D = $992;$F$0$i$i = $993;
         break;
        }
        _abort();
        // unreachable;
       }
      } while(0);
      HEAP32[$$pre$phi$i$iZ2D>>2] = $636;
      $996 = (($F$0$i$i) + 12|0);
      HEAP32[$996>>2] = $636;
      $997 = (($636) + 8|0);
      HEAP32[$997>>2] = $F$0$i$i;
      $998 = (($636) + 12|0);
      HEAP32[$998>>2] = $986;
      break;
     }
     $999 = $976 >>> 8;
     $1000 = ($999|0)==(0);
     if ($1000) {
      $I1$0$i$i = 0;
     } else {
      $1001 = ($976>>>0)>(16777215);
      if ($1001) {
       $I1$0$i$i = 31;
      } else {
       $1002 = (($999) + 1048320)|0;
       $1003 = $1002 >>> 16;
       $1004 = $1003 & 8;
       $1005 = $999 << $1004;
       $1006 = (($1005) + 520192)|0;
       $1007 = $1006 >>> 16;
       $1008 = $1007 & 4;
       $1009 = $1008 | $1004;
       $1010 = $1005 << $1008;
       $1011 = (($1010) + 245760)|0;
       $1012 = $1011 >>> 16;
       $1013 = $1012 & 2;
       $1014 = $1009 | $1013;
       $1015 = (14 - ($1014))|0;
       $1016 = $1010 << $1013;
       $1017 = $1016 >>> 15;
       $1018 = (($1015) + ($1017))|0;
       $1019 = $1018 << 1;
       $1020 = (($1018) + 7)|0;
       $1021 = $976 >>> $1020;
       $1022 = $1021 & 1;
       $1023 = $1022 | $1019;
       $I1$0$i$i = $1023;
      }
     }
     $1024 = ((30080 + ($I1$0$i$i<<2)|0) + 304|0);
     $1025 = (($636) + 28|0);
     $I1$0$c$i$i = $I1$0$i$i;
     HEAP32[$1025>>2] = $I1$0$c$i$i;
     $1026 = (($636) + 20|0);
     HEAP32[$1026>>2] = 0;
     $1027 = (($636) + 16|0);
     HEAP32[$1027>>2] = 0;
     $1028 = HEAP32[((30080 + 4|0))>>2]|0;
     $1029 = 1 << $I1$0$i$i;
     $1030 = $1028 & $1029;
     $1031 = ($1030|0)==(0);
     if ($1031) {
      $1032 = $1028 | $1029;
      HEAP32[((30080 + 4|0))>>2] = $1032;
      HEAP32[$1024>>2] = $636;
      $1033 = (($636) + 24|0);
      HEAP32[$1033>>2] = $1024;
      $1034 = (($636) + 12|0);
      HEAP32[$1034>>2] = $636;
      $1035 = (($636) + 8|0);
      HEAP32[$1035>>2] = $636;
      break;
     }
     $1036 = HEAP32[$1024>>2]|0;
     $1037 = ($I1$0$i$i|0)==(31);
     if ($1037) {
      $1045 = 0;
     } else {
      $1038 = $I1$0$i$i >>> 1;
      $1039 = (25 - ($1038))|0;
      $1045 = $1039;
     }
     $1040 = (($1036) + 4|0);
     $1041 = HEAP32[$1040>>2]|0;
     $1042 = $1041 & -8;
     $1043 = ($1042|0)==($976|0);
     L489: do {
      if ($1043) {
       $T$0$lcssa$i$i = $1036;
      } else {
       $1044 = $976 << $1045;
       $K2$014$i$i = $1044;$T$013$i$i = $1036;
       while(1) {
        $1052 = $K2$014$i$i >>> 31;
        $1053 = ((($T$013$i$i) + ($1052<<2)|0) + 16|0);
        $1048 = HEAP32[$1053>>2]|0;
        $1054 = ($1048|0)==(0|0);
        if ($1054) {
         break;
        }
        $1046 = $K2$014$i$i << 1;
        $1047 = (($1048) + 4|0);
        $1049 = HEAP32[$1047>>2]|0;
        $1050 = $1049 & -8;
        $1051 = ($1050|0)==($976|0);
        if ($1051) {
         $T$0$lcssa$i$i = $1048;
         break L489;
        } else {
         $K2$014$i$i = $1046;$T$013$i$i = $1048;
        }
       }
       $1055 = HEAP32[((30080 + 16|0))>>2]|0;
       $1056 = ($1053>>>0)<($1055>>>0);
       if ($1056) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$1053>>2] = $636;
        $1057 = (($636) + 24|0);
        HEAP32[$1057>>2] = $T$013$i$i;
        $1058 = (($636) + 12|0);
        HEAP32[$1058>>2] = $636;
        $1059 = (($636) + 8|0);
        HEAP32[$1059>>2] = $636;
        break L311;
       }
      }
     } while(0);
     $1060 = (($T$0$lcssa$i$i) + 8|0);
     $1061 = HEAP32[$1060>>2]|0;
     $1062 = HEAP32[((30080 + 16|0))>>2]|0;
     $1063 = ($T$0$lcssa$i$i>>>0)<($1062>>>0);
     if ($1063) {
      _abort();
      // unreachable;
     }
     $1064 = ($1061>>>0)<($1062>>>0);
     if ($1064) {
      _abort();
      // unreachable;
     } else {
      $1065 = (($1061) + 12|0);
      HEAP32[$1065>>2] = $636;
      HEAP32[$1060>>2] = $636;
      $1066 = (($636) + 8|0);
      HEAP32[$1066>>2] = $1061;
      $1067 = (($636) + 12|0);
      HEAP32[$1067>>2] = $T$0$lcssa$i$i;
      $1068 = (($636) + 24|0);
      HEAP32[$1068>>2] = 0;
      break;
     }
    }
   }
  } while(0);
  $1069 = HEAP32[((30080 + 12|0))>>2]|0;
  $1070 = ($1069>>>0)>($nb$0>>>0);
  if ($1070) {
   $1071 = (($1069) - ($nb$0))|0;
   HEAP32[((30080 + 12|0))>>2] = $1071;
   $1072 = HEAP32[((30080 + 24|0))>>2]|0;
   $1073 = (($1072) + ($nb$0)|0);
   HEAP32[((30080 + 24|0))>>2] = $1073;
   $1074 = $1071 | 1;
   $$sum$i32 = (($nb$0) + 4)|0;
   $1075 = (($1072) + ($$sum$i32)|0);
   HEAP32[$1075>>2] = $1074;
   $1076 = $nb$0 | 3;
   $1077 = (($1072) + 4|0);
   HEAP32[$1077>>2] = $1076;
   $1078 = (($1072) + 8|0);
   $mem$0 = $1078;
   STACKTOP = sp;return ($mem$0|0);
  }
 }
 $1079 = (___errno_location()|0);
 HEAP32[$1079>>2] = 12;
 $mem$0 = 0;
 STACKTOP = sp;return ($mem$0|0);
}
function _free($mem) {
 $mem = $mem|0;
 var $$pre = 0, $$pre$phi68Z2D = 0, $$pre$phi70Z2D = 0, $$pre$phiZ2D = 0, $$pre67 = 0, $$pre69 = 0, $$sum = 0, $$sum16$pre = 0, $$sum17 = 0, $$sum18 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum2324 = 0, $$sum25 = 0, $$sum26 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0;
 var $$sum31 = 0, $$sum32 = 0, $$sum33 = 0, $$sum34 = 0, $$sum35 = 0, $$sum36 = 0, $$sum37 = 0, $$sum5 = 0, $$sum67 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
 var $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0;
 var $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0;
 var $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0;
 var $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0;
 var $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0;
 var $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0;
 var $322 = 0, $323 = 0, $324 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I18$0 = 0, $I18$0$c = 0, $K19$057 = 0;
 var $R$0 = 0, $R$1 = 0, $R7$0 = 0, $R7$1 = 0, $RP$0 = 0, $RP9$0 = 0, $T$0$lcssa = 0, $T$056 = 0, $cond = 0, $cond54 = 0, $p$0 = 0, $psize$0 = 0, $psize$1 = 0, $sp$0$i = 0, $sp$0$in$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mem|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = (($mem) + -8|0);
 $2 = HEAP32[((30080 + 16|0))>>2]|0;
 $3 = ($1>>>0)<($2>>>0);
 if ($3) {
  _abort();
  // unreachable;
 }
 $4 = (($mem) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 3;
 $7 = ($6|0)==(1);
 if ($7) {
  _abort();
  // unreachable;
 }
 $8 = $5 & -8;
 $$sum = (($8) + -8)|0;
 $9 = (($mem) + ($$sum)|0);
 $10 = $5 & 1;
 $11 = ($10|0)==(0);
 do {
  if ($11) {
   $12 = HEAP32[$1>>2]|0;
   $13 = ($6|0)==(0);
   if ($13) {
    STACKTOP = sp;return;
   }
   $$sum2 = (-8 - ($12))|0;
   $14 = (($mem) + ($$sum2)|0);
   $15 = (($12) + ($8))|0;
   $16 = ($14>>>0)<($2>>>0);
   if ($16) {
    _abort();
    // unreachable;
   }
   $17 = HEAP32[((30080 + 20|0))>>2]|0;
   $18 = ($14|0)==($17|0);
   if ($18) {
    $$sum3 = (($8) + -4)|0;
    $104 = (($mem) + ($$sum3)|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = $105 & 3;
    $107 = ($106|0)==(3);
    if (!($107)) {
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    HEAP32[((30080 + 8|0))>>2] = $15;
    $108 = HEAP32[$104>>2]|0;
    $109 = $108 & -2;
    HEAP32[$104>>2] = $109;
    $110 = $15 | 1;
    $$sum26 = (($$sum2) + 4)|0;
    $111 = (($mem) + ($$sum26)|0);
    HEAP32[$111>>2] = $110;
    HEAP32[$9>>2] = $15;
    STACKTOP = sp;return;
   }
   $19 = $12 >>> 3;
   $20 = ($12>>>0)<(256);
   if ($20) {
    $$sum36 = (($$sum2) + 8)|0;
    $21 = (($mem) + ($$sum36)|0);
    $22 = HEAP32[$21>>2]|0;
    $$sum37 = (($$sum2) + 12)|0;
    $23 = (($mem) + ($$sum37)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = $19 << 1;
    $26 = ((30080 + ($25<<2)|0) + 40|0);
    $27 = ($22|0)==($26|0);
    if (!($27)) {
     $28 = ($22>>>0)<($2>>>0);
     if ($28) {
      _abort();
      // unreachable;
     }
     $29 = (($22) + 12|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ($30|0)==($14|0);
     if (!($31)) {
      _abort();
      // unreachable;
     }
    }
    $32 = ($24|0)==($22|0);
    if ($32) {
     $33 = 1 << $19;
     $34 = $33 ^ -1;
     $35 = HEAP32[30080>>2]|0;
     $36 = $35 & $34;
     HEAP32[30080>>2] = $36;
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    $37 = ($24|0)==($26|0);
    if ($37) {
     $$pre69 = (($24) + 8|0);
     $$pre$phi70Z2D = $$pre69;
    } else {
     $38 = ($24>>>0)<($2>>>0);
     if ($38) {
      _abort();
      // unreachable;
     }
     $39 = (($24) + 8|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = ($40|0)==($14|0);
     if ($41) {
      $$pre$phi70Z2D = $39;
     } else {
      _abort();
      // unreachable;
     }
    }
    $42 = (($22) + 12|0);
    HEAP32[$42>>2] = $24;
    HEAP32[$$pre$phi70Z2D>>2] = $22;
    $p$0 = $14;$psize$0 = $15;
    break;
   }
   $$sum28 = (($$sum2) + 24)|0;
   $43 = (($mem) + ($$sum28)|0);
   $44 = HEAP32[$43>>2]|0;
   $$sum29 = (($$sum2) + 12)|0;
   $45 = (($mem) + ($$sum29)|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)==($14|0);
   do {
    if ($47) {
     $$sum31 = (($$sum2) + 20)|0;
     $57 = (($mem) + ($$sum31)|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = ($58|0)==(0|0);
     if ($59) {
      $$sum30 = (($$sum2) + 16)|0;
      $60 = (($mem) + ($$sum30)|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = ($61|0)==(0|0);
      if ($62) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $61;$RP$0 = $60;
      }
     } else {
      $R$0 = $58;$RP$0 = $57;
     }
     while(1) {
      $63 = (($R$0) + 20|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = ($64|0)==(0|0);
      if (!($65)) {
       $R$0 = $64;$RP$0 = $63;
       continue;
      }
      $66 = (($R$0) + 16|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = ($67|0)==(0|0);
      if ($68) {
       break;
      } else {
       $R$0 = $67;$RP$0 = $66;
      }
     }
     $69 = ($RP$0>>>0)<($2>>>0);
     if ($69) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0>>2] = 0;
      $R$1 = $R$0;
      break;
     }
    } else {
     $$sum35 = (($$sum2) + 8)|0;
     $48 = (($mem) + ($$sum35)|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = ($49>>>0)<($2>>>0);
     if ($50) {
      _abort();
      // unreachable;
     }
     $51 = (($49) + 12|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = ($52|0)==($14|0);
     if (!($53)) {
      _abort();
      // unreachable;
     }
     $54 = (($46) + 8|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($55|0)==($14|0);
     if ($56) {
      HEAP32[$51>>2] = $46;
      HEAP32[$54>>2] = $49;
      $R$1 = $46;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $70 = ($44|0)==(0|0);
   if ($70) {
    $p$0 = $14;$psize$0 = $15;
   } else {
    $$sum32 = (($$sum2) + 28)|0;
    $71 = (($mem) + ($$sum32)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ((30080 + ($72<<2)|0) + 304|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($14|0)==($74|0);
    if ($75) {
     HEAP32[$73>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $76 = 1 << $72;
      $77 = $76 ^ -1;
      $78 = HEAP32[((30080 + 4|0))>>2]|0;
      $79 = $78 & $77;
      HEAP32[((30080 + 4|0))>>2] = $79;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    } else {
     $80 = HEAP32[((30080 + 16|0))>>2]|0;
     $81 = ($44>>>0)<($80>>>0);
     if ($81) {
      _abort();
      // unreachable;
     }
     $82 = (($44) + 16|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = ($83|0)==($14|0);
     if ($84) {
      HEAP32[$82>>2] = $R$1;
     } else {
      $85 = (($44) + 20|0);
      HEAP32[$85>>2] = $R$1;
     }
     $86 = ($R$1|0)==(0|0);
     if ($86) {
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
    $87 = HEAP32[((30080 + 16|0))>>2]|0;
    $88 = ($R$1>>>0)<($87>>>0);
    if ($88) {
     _abort();
     // unreachable;
    }
    $89 = (($R$1) + 24|0);
    HEAP32[$89>>2] = $44;
    $$sum33 = (($$sum2) + 16)|0;
    $90 = (($mem) + ($$sum33)|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = ($91|0)==(0|0);
    do {
     if (!($92)) {
      $93 = HEAP32[((30080 + 16|0))>>2]|0;
      $94 = ($91>>>0)<($93>>>0);
      if ($94) {
       _abort();
       // unreachable;
      } else {
       $95 = (($R$1) + 16|0);
       HEAP32[$95>>2] = $91;
       $96 = (($91) + 24|0);
       HEAP32[$96>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum34 = (($$sum2) + 20)|0;
    $97 = (($mem) + ($$sum34)|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = ($98|0)==(0|0);
    if ($99) {
     $p$0 = $14;$psize$0 = $15;
    } else {
     $100 = HEAP32[((30080 + 16|0))>>2]|0;
     $101 = ($98>>>0)<($100>>>0);
     if ($101) {
      _abort();
      // unreachable;
     } else {
      $102 = (($R$1) + 20|0);
      HEAP32[$102>>2] = $98;
      $103 = (($98) + 24|0);
      HEAP32[$103>>2] = $R$1;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
   }
  } else {
   $p$0 = $1;$psize$0 = $8;
  }
 } while(0);
 $112 = ($p$0>>>0)<($9>>>0);
 if (!($112)) {
  _abort();
  // unreachable;
 }
 $$sum25 = (($8) + -4)|0;
 $113 = (($mem) + ($$sum25)|0);
 $114 = HEAP32[$113>>2]|0;
 $115 = $114 & 1;
 $116 = ($115|0)==(0);
 if ($116) {
  _abort();
  // unreachable;
 }
 $117 = $114 & 2;
 $118 = ($117|0)==(0);
 if ($118) {
  $119 = HEAP32[((30080 + 24|0))>>2]|0;
  $120 = ($9|0)==($119|0);
  if ($120) {
   $121 = HEAP32[((30080 + 12|0))>>2]|0;
   $122 = (($121) + ($psize$0))|0;
   HEAP32[((30080 + 12|0))>>2] = $122;
   HEAP32[((30080 + 24|0))>>2] = $p$0;
   $123 = $122 | 1;
   $124 = (($p$0) + 4|0);
   HEAP32[$124>>2] = $123;
   $125 = HEAP32[((30080 + 20|0))>>2]|0;
   $126 = ($p$0|0)==($125|0);
   if (!($126)) {
    STACKTOP = sp;return;
   }
   HEAP32[((30080 + 20|0))>>2] = 0;
   HEAP32[((30080 + 8|0))>>2] = 0;
   STACKTOP = sp;return;
  }
  $127 = HEAP32[((30080 + 20|0))>>2]|0;
  $128 = ($9|0)==($127|0);
  if ($128) {
   $129 = HEAP32[((30080 + 8|0))>>2]|0;
   $130 = (($129) + ($psize$0))|0;
   HEAP32[((30080 + 8|0))>>2] = $130;
   HEAP32[((30080 + 20|0))>>2] = $p$0;
   $131 = $130 | 1;
   $132 = (($p$0) + 4|0);
   HEAP32[$132>>2] = $131;
   $133 = (($p$0) + ($130)|0);
   HEAP32[$133>>2] = $130;
   STACKTOP = sp;return;
  }
  $134 = $114 & -8;
  $135 = (($134) + ($psize$0))|0;
  $136 = $114 >>> 3;
  $137 = ($114>>>0)<(256);
  do {
   if ($137) {
    $138 = (($mem) + ($8)|0);
    $139 = HEAP32[$138>>2]|0;
    $$sum2324 = $8 | 4;
    $140 = (($mem) + ($$sum2324)|0);
    $141 = HEAP32[$140>>2]|0;
    $142 = $136 << 1;
    $143 = ((30080 + ($142<<2)|0) + 40|0);
    $144 = ($139|0)==($143|0);
    if (!($144)) {
     $145 = HEAP32[((30080 + 16|0))>>2]|0;
     $146 = ($139>>>0)<($145>>>0);
     if ($146) {
      _abort();
      // unreachable;
     }
     $147 = (($139) + 12|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = ($148|0)==($9|0);
     if (!($149)) {
      _abort();
      // unreachable;
     }
    }
    $150 = ($141|0)==($139|0);
    if ($150) {
     $151 = 1 << $136;
     $152 = $151 ^ -1;
     $153 = HEAP32[30080>>2]|0;
     $154 = $153 & $152;
     HEAP32[30080>>2] = $154;
     break;
    }
    $155 = ($141|0)==($143|0);
    if ($155) {
     $$pre67 = (($141) + 8|0);
     $$pre$phi68Z2D = $$pre67;
    } else {
     $156 = HEAP32[((30080 + 16|0))>>2]|0;
     $157 = ($141>>>0)<($156>>>0);
     if ($157) {
      _abort();
      // unreachable;
     }
     $158 = (($141) + 8|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = ($159|0)==($9|0);
     if ($160) {
      $$pre$phi68Z2D = $158;
     } else {
      _abort();
      // unreachable;
     }
    }
    $161 = (($139) + 12|0);
    HEAP32[$161>>2] = $141;
    HEAP32[$$pre$phi68Z2D>>2] = $139;
   } else {
    $$sum5 = (($8) + 16)|0;
    $162 = (($mem) + ($$sum5)|0);
    $163 = HEAP32[$162>>2]|0;
    $$sum67 = $8 | 4;
    $164 = (($mem) + ($$sum67)|0);
    $165 = HEAP32[$164>>2]|0;
    $166 = ($165|0)==($9|0);
    do {
     if ($166) {
      $$sum9 = (($8) + 12)|0;
      $177 = (($mem) + ($$sum9)|0);
      $178 = HEAP32[$177>>2]|0;
      $179 = ($178|0)==(0|0);
      if ($179) {
       $$sum8 = (($8) + 8)|0;
       $180 = (($mem) + ($$sum8)|0);
       $181 = HEAP32[$180>>2]|0;
       $182 = ($181|0)==(0|0);
       if ($182) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $181;$RP9$0 = $180;
       }
      } else {
       $R7$0 = $178;$RP9$0 = $177;
      }
      while(1) {
       $183 = (($R7$0) + 20|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($184|0)==(0|0);
       if (!($185)) {
        $R7$0 = $184;$RP9$0 = $183;
        continue;
       }
       $186 = (($R7$0) + 16|0);
       $187 = HEAP32[$186>>2]|0;
       $188 = ($187|0)==(0|0);
       if ($188) {
        break;
       } else {
        $R7$0 = $187;$RP9$0 = $186;
       }
      }
      $189 = HEAP32[((30080 + 16|0))>>2]|0;
      $190 = ($RP9$0>>>0)<($189>>>0);
      if ($190) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0>>2] = 0;
       $R7$1 = $R7$0;
       break;
      }
     } else {
      $167 = (($mem) + ($8)|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = HEAP32[((30080 + 16|0))>>2]|0;
      $170 = ($168>>>0)<($169>>>0);
      if ($170) {
       _abort();
       // unreachable;
      }
      $171 = (($168) + 12|0);
      $172 = HEAP32[$171>>2]|0;
      $173 = ($172|0)==($9|0);
      if (!($173)) {
       _abort();
       // unreachable;
      }
      $174 = (($165) + 8|0);
      $175 = HEAP32[$174>>2]|0;
      $176 = ($175|0)==($9|0);
      if ($176) {
       HEAP32[$171>>2] = $165;
       HEAP32[$174>>2] = $168;
       $R7$1 = $165;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $191 = ($163|0)==(0|0);
    if (!($191)) {
     $$sum18 = (($8) + 20)|0;
     $192 = (($mem) + ($$sum18)|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = ((30080 + ($193<<2)|0) + 304|0);
     $195 = HEAP32[$194>>2]|0;
     $196 = ($9|0)==($195|0);
     if ($196) {
      HEAP32[$194>>2] = $R7$1;
      $cond54 = ($R7$1|0)==(0|0);
      if ($cond54) {
       $197 = 1 << $193;
       $198 = $197 ^ -1;
       $199 = HEAP32[((30080 + 4|0))>>2]|0;
       $200 = $199 & $198;
       HEAP32[((30080 + 4|0))>>2] = $200;
       break;
      }
     } else {
      $201 = HEAP32[((30080 + 16|0))>>2]|0;
      $202 = ($163>>>0)<($201>>>0);
      if ($202) {
       _abort();
       // unreachable;
      }
      $203 = (($163) + 16|0);
      $204 = HEAP32[$203>>2]|0;
      $205 = ($204|0)==($9|0);
      if ($205) {
       HEAP32[$203>>2] = $R7$1;
      } else {
       $206 = (($163) + 20|0);
       HEAP32[$206>>2] = $R7$1;
      }
      $207 = ($R7$1|0)==(0|0);
      if ($207) {
       break;
      }
     }
     $208 = HEAP32[((30080 + 16|0))>>2]|0;
     $209 = ($R7$1>>>0)<($208>>>0);
     if ($209) {
      _abort();
      // unreachable;
     }
     $210 = (($R7$1) + 24|0);
     HEAP32[$210>>2] = $163;
     $$sum19 = (($8) + 8)|0;
     $211 = (($mem) + ($$sum19)|0);
     $212 = HEAP32[$211>>2]|0;
     $213 = ($212|0)==(0|0);
     do {
      if (!($213)) {
       $214 = HEAP32[((30080 + 16|0))>>2]|0;
       $215 = ($212>>>0)<($214>>>0);
       if ($215) {
        _abort();
        // unreachable;
       } else {
        $216 = (($R7$1) + 16|0);
        HEAP32[$216>>2] = $212;
        $217 = (($212) + 24|0);
        HEAP32[$217>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum20 = (($8) + 12)|0;
     $218 = (($mem) + ($$sum20)|0);
     $219 = HEAP32[$218>>2]|0;
     $220 = ($219|0)==(0|0);
     if (!($220)) {
      $221 = HEAP32[((30080 + 16|0))>>2]|0;
      $222 = ($219>>>0)<($221>>>0);
      if ($222) {
       _abort();
       // unreachable;
      } else {
       $223 = (($R7$1) + 20|0);
       HEAP32[$223>>2] = $219;
       $224 = (($219) + 24|0);
       HEAP32[$224>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $225 = $135 | 1;
  $226 = (($p$0) + 4|0);
  HEAP32[$226>>2] = $225;
  $227 = (($p$0) + ($135)|0);
  HEAP32[$227>>2] = $135;
  $228 = HEAP32[((30080 + 20|0))>>2]|0;
  $229 = ($p$0|0)==($228|0);
  if ($229) {
   HEAP32[((30080 + 8|0))>>2] = $135;
   STACKTOP = sp;return;
  } else {
   $psize$1 = $135;
  }
 } else {
  $230 = $114 & -2;
  HEAP32[$113>>2] = $230;
  $231 = $psize$0 | 1;
  $232 = (($p$0) + 4|0);
  HEAP32[$232>>2] = $231;
  $233 = (($p$0) + ($psize$0)|0);
  HEAP32[$233>>2] = $psize$0;
  $psize$1 = $psize$0;
 }
 $234 = $psize$1 >>> 3;
 $235 = ($psize$1>>>0)<(256);
 if ($235) {
  $236 = $234 << 1;
  $237 = ((30080 + ($236<<2)|0) + 40|0);
  $238 = HEAP32[30080>>2]|0;
  $239 = 1 << $234;
  $240 = $238 & $239;
  $241 = ($240|0)==(0);
  if ($241) {
   $242 = $238 | $239;
   HEAP32[30080>>2] = $242;
   $$sum16$pre = (($236) + 2)|0;
   $$pre = ((30080 + ($$sum16$pre<<2)|0) + 40|0);
   $$pre$phiZ2D = $$pre;$F16$0 = $237;
  } else {
   $$sum17 = (($236) + 2)|0;
   $243 = ((30080 + ($$sum17<<2)|0) + 40|0);
   $244 = HEAP32[$243>>2]|0;
   $245 = HEAP32[((30080 + 16|0))>>2]|0;
   $246 = ($244>>>0)<($245>>>0);
   if ($246) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $243;$F16$0 = $244;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$0;
  $247 = (($F16$0) + 12|0);
  HEAP32[$247>>2] = $p$0;
  $248 = (($p$0) + 8|0);
  HEAP32[$248>>2] = $F16$0;
  $249 = (($p$0) + 12|0);
  HEAP32[$249>>2] = $237;
  STACKTOP = sp;return;
 }
 $250 = $psize$1 >>> 8;
 $251 = ($250|0)==(0);
 if ($251) {
  $I18$0 = 0;
 } else {
  $252 = ($psize$1>>>0)>(16777215);
  if ($252) {
   $I18$0 = 31;
  } else {
   $253 = (($250) + 1048320)|0;
   $254 = $253 >>> 16;
   $255 = $254 & 8;
   $256 = $250 << $255;
   $257 = (($256) + 520192)|0;
   $258 = $257 >>> 16;
   $259 = $258 & 4;
   $260 = $259 | $255;
   $261 = $256 << $259;
   $262 = (($261) + 245760)|0;
   $263 = $262 >>> 16;
   $264 = $263 & 2;
   $265 = $260 | $264;
   $266 = (14 - ($265))|0;
   $267 = $261 << $264;
   $268 = $267 >>> 15;
   $269 = (($266) + ($268))|0;
   $270 = $269 << 1;
   $271 = (($269) + 7)|0;
   $272 = $psize$1 >>> $271;
   $273 = $272 & 1;
   $274 = $273 | $270;
   $I18$0 = $274;
  }
 }
 $275 = ((30080 + ($I18$0<<2)|0) + 304|0);
 $276 = (($p$0) + 28|0);
 $I18$0$c = $I18$0;
 HEAP32[$276>>2] = $I18$0$c;
 $277 = (($p$0) + 20|0);
 HEAP32[$277>>2] = 0;
 $278 = (($p$0) + 16|0);
 HEAP32[$278>>2] = 0;
 $279 = HEAP32[((30080 + 4|0))>>2]|0;
 $280 = 1 << $I18$0;
 $281 = $279 & $280;
 $282 = ($281|0)==(0);
 L199: do {
  if ($282) {
   $283 = $279 | $280;
   HEAP32[((30080 + 4|0))>>2] = $283;
   HEAP32[$275>>2] = $p$0;
   $284 = (($p$0) + 24|0);
   HEAP32[$284>>2] = $275;
   $285 = (($p$0) + 12|0);
   HEAP32[$285>>2] = $p$0;
   $286 = (($p$0) + 8|0);
   HEAP32[$286>>2] = $p$0;
  } else {
   $287 = HEAP32[$275>>2]|0;
   $288 = ($I18$0|0)==(31);
   if ($288) {
    $296 = 0;
   } else {
    $289 = $I18$0 >>> 1;
    $290 = (25 - ($289))|0;
    $296 = $290;
   }
   $291 = (($287) + 4|0);
   $292 = HEAP32[$291>>2]|0;
   $293 = $292 & -8;
   $294 = ($293|0)==($psize$1|0);
   L204: do {
    if ($294) {
     $T$0$lcssa = $287;
    } else {
     $295 = $psize$1 << $296;
     $K19$057 = $295;$T$056 = $287;
     while(1) {
      $303 = $K19$057 >>> 31;
      $304 = ((($T$056) + ($303<<2)|0) + 16|0);
      $299 = HEAP32[$304>>2]|0;
      $305 = ($299|0)==(0|0);
      if ($305) {
       break;
      }
      $297 = $K19$057 << 1;
      $298 = (($299) + 4|0);
      $300 = HEAP32[$298>>2]|0;
      $301 = $300 & -8;
      $302 = ($301|0)==($psize$1|0);
      if ($302) {
       $T$0$lcssa = $299;
       break L204;
      } else {
       $K19$057 = $297;$T$056 = $299;
      }
     }
     $306 = HEAP32[((30080 + 16|0))>>2]|0;
     $307 = ($304>>>0)<($306>>>0);
     if ($307) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$304>>2] = $p$0;
      $308 = (($p$0) + 24|0);
      HEAP32[$308>>2] = $T$056;
      $309 = (($p$0) + 12|0);
      HEAP32[$309>>2] = $p$0;
      $310 = (($p$0) + 8|0);
      HEAP32[$310>>2] = $p$0;
      break L199;
     }
    }
   } while(0);
   $311 = (($T$0$lcssa) + 8|0);
   $312 = HEAP32[$311>>2]|0;
   $313 = HEAP32[((30080 + 16|0))>>2]|0;
   $314 = ($T$0$lcssa>>>0)<($313>>>0);
   if ($314) {
    _abort();
    // unreachable;
   }
   $315 = ($312>>>0)<($313>>>0);
   if ($315) {
    _abort();
    // unreachable;
   } else {
    $316 = (($312) + 12|0);
    HEAP32[$316>>2] = $p$0;
    HEAP32[$311>>2] = $p$0;
    $317 = (($p$0) + 8|0);
    HEAP32[$317>>2] = $312;
    $318 = (($p$0) + 12|0);
    HEAP32[$318>>2] = $T$0$lcssa;
    $319 = (($p$0) + 24|0);
    HEAP32[$319>>2] = 0;
    break;
   }
  }
 } while(0);
 $320 = HEAP32[((30080 + 32|0))>>2]|0;
 $321 = (($320) + -1)|0;
 HEAP32[((30080 + 32|0))>>2] = $321;
 $322 = ($321|0)==(0);
 if ($322) {
  $sp$0$in$i = ((30080 + 456|0));
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
  $323 = ($sp$0$i|0)==(0|0);
  $324 = (($sp$0$i) + 8|0);
  if ($323) {
   break;
  } else {
   $sp$0$in$i = $324;
  }
 }
 HEAP32[((30080 + 32|0))>>2] = -1;
 STACKTOP = sp;return;
}
function _calloc($n_elements,$elem_size) {
 $n_elements = $n_elements|0;
 $elem_size = $elem_size|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $req$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n_elements|0)==(0);
 if ($0) {
  $req$0 = 0;
 } else {
  $1 = Math_imul($elem_size, $n_elements)|0;
  $2 = $elem_size | $n_elements;
  $3 = ($2>>>0)>(65535);
  if ($3) {
   $4 = (($1>>>0) / ($n_elements>>>0))&-1;
   $5 = ($4|0)==($elem_size|0);
   $$ = $5 ? $1 : -1;
   $req$0 = $$;
  } else {
   $req$0 = $1;
  }
 }
 $6 = (_malloc($req$0)|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  STACKTOP = sp;return ($6|0);
 }
 $8 = (($6) + -4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 3;
 $11 = ($10|0)==(0);
 if ($11) {
  STACKTOP = sp;return ($6|0);
 }
 _memset(($6|0),0,($req$0|0))|0;
 STACKTOP = sp;return ($6|0);
}
function _realloc($oldmem,$bytes) {
 $oldmem = $oldmem|0;
 $bytes = $bytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $mem$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($oldmem|0)==(0|0);
 do {
  if ($0) {
   $1 = (_malloc($bytes)|0);
   $mem$0 = $1;
  } else {
   $2 = ($bytes>>>0)>(4294967231);
   if ($2) {
    $3 = (___errno_location()|0);
    HEAP32[$3>>2] = 12;
    $mem$0 = 0;
    break;
   }
   $4 = ($bytes>>>0)<(11);
   if ($4) {
    $8 = 16;
   } else {
    $5 = (($bytes) + 11)|0;
    $6 = $5 & -8;
    $8 = $6;
   }
   $7 = (($oldmem) + -8|0);
   $9 = (_try_realloc_chunk($7,$8)|0);
   $10 = ($9|0)==(0|0);
   if (!($10)) {
    $11 = (($9) + 8|0);
    $mem$0 = $11;
    break;
   }
   $12 = (_malloc($bytes)|0);
   $13 = ($12|0)==(0|0);
   if ($13) {
    $mem$0 = 0;
   } else {
    $14 = (($oldmem) + -4|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = $15 & -8;
    $17 = $15 & 3;
    $18 = ($17|0)==(0);
    $19 = $18 ? 8 : 4;
    $20 = (($16) - ($19))|0;
    $21 = ($20>>>0)<($bytes>>>0);
    $22 = $21 ? $20 : $bytes;
    _memcpy(($12|0),($oldmem|0),($22|0))|0;
    _free($oldmem);
    $mem$0 = $12;
   }
  }
 } while(0);
 STACKTOP = sp;return ($mem$0|0);
}
function _try_realloc_chunk($p,$nb) {
 $p = $p|0;
 $nb = $nb|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $$sum = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum2728 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum78 = 0;
 var $$sum910 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $R$0 = 0, $R$1 = 0, $RP$0 = 0;
 var $cond = 0, $newp$0 = 0, $or$cond = 0, $storemerge = 0, $storemerge21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & -8;
 $3 = (($p) + ($2)|0);
 $4 = HEAP32[((30080 + 16|0))>>2]|0;
 $5 = ($p>>>0)<($4>>>0);
 if ($5) {
  _abort();
  // unreachable;
 }
 $6 = $1 & 3;
 $7 = ($6|0)!=(1);
 $8 = ($p>>>0)<($3>>>0);
 $or$cond = $7 & $8;
 if (!($or$cond)) {
  _abort();
  // unreachable;
 }
 $$sum2728 = $2 | 4;
 $9 = (($p) + ($$sum2728)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & 1;
 $12 = ($11|0)==(0);
 if ($12) {
  _abort();
  // unreachable;
 }
 $13 = ($6|0)==(0);
 if ($13) {
  $14 = ($nb>>>0)<(256);
  if ($14) {
   $newp$0 = 0;
   STACKTOP = sp;return ($newp$0|0);
  }
  $15 = (($nb) + 4)|0;
  $16 = ($2>>>0)<($15>>>0);
  if (!($16)) {
   $17 = (($2) - ($nb))|0;
   $18 = HEAP32[((30552 + 8|0))>>2]|0;
   $19 = $18 << 1;
   $20 = ($17>>>0)>($19>>>0);
   if (!($20)) {
    $newp$0 = $p;
    STACKTOP = sp;return ($newp$0|0);
   }
  }
  $newp$0 = 0;
  STACKTOP = sp;return ($newp$0|0);
 }
 $21 = ($2>>>0)<($nb>>>0);
 if (!($21)) {
  $22 = (($2) - ($nb))|0;
  $23 = ($22>>>0)>(15);
  if (!($23)) {
   $newp$0 = $p;
   STACKTOP = sp;return ($newp$0|0);
  }
  $24 = (($p) + ($nb)|0);
  $25 = $1 & 1;
  $26 = $25 | $nb;
  $27 = $26 | 2;
  HEAP32[$0>>2] = $27;
  $$sum23 = (($nb) + 4)|0;
  $28 = (($p) + ($$sum23)|0);
  $29 = $22 | 3;
  HEAP32[$28>>2] = $29;
  $30 = HEAP32[$9>>2]|0;
  $31 = $30 | 1;
  HEAP32[$9>>2] = $31;
  _dispose_chunk($24,$22);
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 }
 $32 = HEAP32[((30080 + 24|0))>>2]|0;
 $33 = ($3|0)==($32|0);
 if ($33) {
  $34 = HEAP32[((30080 + 12|0))>>2]|0;
  $35 = (($34) + ($2))|0;
  $36 = ($35>>>0)>($nb>>>0);
  if (!($36)) {
   $newp$0 = 0;
   STACKTOP = sp;return ($newp$0|0);
  }
  $37 = (($35) - ($nb))|0;
  $38 = (($p) + ($nb)|0);
  $39 = $1 & 1;
  $40 = $39 | $nb;
  $41 = $40 | 2;
  HEAP32[$0>>2] = $41;
  $$sum22 = (($nb) + 4)|0;
  $42 = (($p) + ($$sum22)|0);
  $43 = $37 | 1;
  HEAP32[$42>>2] = $43;
  HEAP32[((30080 + 24|0))>>2] = $38;
  HEAP32[((30080 + 12|0))>>2] = $37;
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 }
 $44 = HEAP32[((30080 + 20|0))>>2]|0;
 $45 = ($3|0)==($44|0);
 if ($45) {
  $46 = HEAP32[((30080 + 8|0))>>2]|0;
  $47 = (($46) + ($2))|0;
  $48 = ($47>>>0)<($nb>>>0);
  if ($48) {
   $newp$0 = 0;
   STACKTOP = sp;return ($newp$0|0);
  }
  $49 = (($47) - ($nb))|0;
  $50 = ($49>>>0)>(15);
  if ($50) {
   $51 = (($p) + ($nb)|0);
   $52 = (($p) + ($47)|0);
   $53 = $1 & 1;
   $54 = $53 | $nb;
   $55 = $54 | 2;
   HEAP32[$0>>2] = $55;
   $$sum19 = (($nb) + 4)|0;
   $56 = (($p) + ($$sum19)|0);
   $57 = $49 | 1;
   HEAP32[$56>>2] = $57;
   HEAP32[$52>>2] = $49;
   $$sum20 = (($47) + 4)|0;
   $58 = (($p) + ($$sum20)|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = $59 & -2;
   HEAP32[$58>>2] = $60;
   $storemerge = $51;$storemerge21 = $49;
  } else {
   $61 = $1 & 1;
   $62 = $61 | $47;
   $63 = $62 | 2;
   HEAP32[$0>>2] = $63;
   $$sum17 = (($47) + 4)|0;
   $64 = (($p) + ($$sum17)|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = $65 | 1;
   HEAP32[$64>>2] = $66;
   $storemerge = 0;$storemerge21 = 0;
  }
  HEAP32[((30080 + 8|0))>>2] = $storemerge21;
  HEAP32[((30080 + 20|0))>>2] = $storemerge;
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 }
 $67 = $10 & 2;
 $68 = ($67|0)==(0);
 if (!($68)) {
  $newp$0 = 0;
  STACKTOP = sp;return ($newp$0|0);
 }
 $69 = $10 & -8;
 $70 = (($69) + ($2))|0;
 $71 = ($70>>>0)<($nb>>>0);
 if ($71) {
  $newp$0 = 0;
  STACKTOP = sp;return ($newp$0|0);
 }
 $72 = (($70) - ($nb))|0;
 $73 = $10 >>> 3;
 $74 = ($10>>>0)<(256);
 do {
  if ($74) {
   $$sum15 = (($2) + 8)|0;
   $75 = (($p) + ($$sum15)|0);
   $76 = HEAP32[$75>>2]|0;
   $$sum16 = (($2) + 12)|0;
   $77 = (($p) + ($$sum16)|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = $73 << 1;
   $80 = ((30080 + ($79<<2)|0) + 40|0);
   $81 = ($76|0)==($80|0);
   if (!($81)) {
    $82 = ($76>>>0)<($4>>>0);
    if ($82) {
     _abort();
     // unreachable;
    }
    $83 = (($76) + 12|0);
    $84 = HEAP32[$83>>2]|0;
    $85 = ($84|0)==($3|0);
    if (!($85)) {
     _abort();
     // unreachable;
    }
   }
   $86 = ($78|0)==($76|0);
   if ($86) {
    $87 = 1 << $73;
    $88 = $87 ^ -1;
    $89 = HEAP32[30080>>2]|0;
    $90 = $89 & $88;
    HEAP32[30080>>2] = $90;
    break;
   }
   $91 = ($78|0)==($80|0);
   if ($91) {
    $$pre = (($78) + 8|0);
    $$pre$phiZ2D = $$pre;
   } else {
    $92 = ($78>>>0)<($4>>>0);
    if ($92) {
     _abort();
     // unreachable;
    }
    $93 = (($78) + 8|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = ($94|0)==($3|0);
    if ($95) {
     $$pre$phiZ2D = $93;
    } else {
     _abort();
     // unreachable;
    }
   }
   $96 = (($76) + 12|0);
   HEAP32[$96>>2] = $78;
   HEAP32[$$pre$phiZ2D>>2] = $76;
  } else {
   $$sum = (($2) + 24)|0;
   $97 = (($p) + ($$sum)|0);
   $98 = HEAP32[$97>>2]|0;
   $$sum2 = (($2) + 12)|0;
   $99 = (($p) + ($$sum2)|0);
   $100 = HEAP32[$99>>2]|0;
   $101 = ($100|0)==($3|0);
   do {
    if ($101) {
     $$sum4 = (($2) + 20)|0;
     $111 = (($p) + ($$sum4)|0);
     $112 = HEAP32[$111>>2]|0;
     $113 = ($112|0)==(0|0);
     if ($113) {
      $$sum3 = (($2) + 16)|0;
      $114 = (($p) + ($$sum3)|0);
      $115 = HEAP32[$114>>2]|0;
      $116 = ($115|0)==(0|0);
      if ($116) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $115;$RP$0 = $114;
      }
     } else {
      $R$0 = $112;$RP$0 = $111;
     }
     while(1) {
      $117 = (($R$0) + 20|0);
      $118 = HEAP32[$117>>2]|0;
      $119 = ($118|0)==(0|0);
      if (!($119)) {
       $R$0 = $118;$RP$0 = $117;
       continue;
      }
      $120 = (($R$0) + 16|0);
      $121 = HEAP32[$120>>2]|0;
      $122 = ($121|0)==(0|0);
      if ($122) {
       break;
      } else {
       $R$0 = $121;$RP$0 = $120;
      }
     }
     $123 = ($RP$0>>>0)<($4>>>0);
     if ($123) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0>>2] = 0;
      $R$1 = $R$0;
      break;
     }
    } else {
     $$sum14 = (($2) + 8)|0;
     $102 = (($p) + ($$sum14)|0);
     $103 = HEAP32[$102>>2]|0;
     $104 = ($103>>>0)<($4>>>0);
     if ($104) {
      _abort();
      // unreachable;
     }
     $105 = (($103) + 12|0);
     $106 = HEAP32[$105>>2]|0;
     $107 = ($106|0)==($3|0);
     if (!($107)) {
      _abort();
      // unreachable;
     }
     $108 = (($100) + 8|0);
     $109 = HEAP32[$108>>2]|0;
     $110 = ($109|0)==($3|0);
     if ($110) {
      HEAP32[$105>>2] = $100;
      HEAP32[$108>>2] = $103;
      $R$1 = $100;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $124 = ($98|0)==(0|0);
   if (!($124)) {
    $$sum11 = (($2) + 28)|0;
    $125 = (($p) + ($$sum11)|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ((30080 + ($126<<2)|0) + 304|0);
    $128 = HEAP32[$127>>2]|0;
    $129 = ($3|0)==($128|0);
    if ($129) {
     HEAP32[$127>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $130 = 1 << $126;
      $131 = $130 ^ -1;
      $132 = HEAP32[((30080 + 4|0))>>2]|0;
      $133 = $132 & $131;
      HEAP32[((30080 + 4|0))>>2] = $133;
      break;
     }
    } else {
     $134 = HEAP32[((30080 + 16|0))>>2]|0;
     $135 = ($98>>>0)<($134>>>0);
     if ($135) {
      _abort();
      // unreachable;
     }
     $136 = (($98) + 16|0);
     $137 = HEAP32[$136>>2]|0;
     $138 = ($137|0)==($3|0);
     if ($138) {
      HEAP32[$136>>2] = $R$1;
     } else {
      $139 = (($98) + 20|0);
      HEAP32[$139>>2] = $R$1;
     }
     $140 = ($R$1|0)==(0|0);
     if ($140) {
      break;
     }
    }
    $141 = HEAP32[((30080 + 16|0))>>2]|0;
    $142 = ($R$1>>>0)<($141>>>0);
    if ($142) {
     _abort();
     // unreachable;
    }
    $143 = (($R$1) + 24|0);
    HEAP32[$143>>2] = $98;
    $$sum12 = (($2) + 16)|0;
    $144 = (($p) + ($$sum12)|0);
    $145 = HEAP32[$144>>2]|0;
    $146 = ($145|0)==(0|0);
    do {
     if (!($146)) {
      $147 = HEAP32[((30080 + 16|0))>>2]|0;
      $148 = ($145>>>0)<($147>>>0);
      if ($148) {
       _abort();
       // unreachable;
      } else {
       $149 = (($R$1) + 16|0);
       HEAP32[$149>>2] = $145;
       $150 = (($145) + 24|0);
       HEAP32[$150>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum13 = (($2) + 20)|0;
    $151 = (($p) + ($$sum13)|0);
    $152 = HEAP32[$151>>2]|0;
    $153 = ($152|0)==(0|0);
    if (!($153)) {
     $154 = HEAP32[((30080 + 16|0))>>2]|0;
     $155 = ($152>>>0)<($154>>>0);
     if ($155) {
      _abort();
      // unreachable;
     } else {
      $156 = (($R$1) + 20|0);
      HEAP32[$156>>2] = $152;
      $157 = (($152) + 24|0);
      HEAP32[$157>>2] = $R$1;
      break;
     }
    }
   }
  }
 } while(0);
 $158 = ($72>>>0)<(16);
 if ($158) {
  $159 = HEAP32[$0>>2]|0;
  $160 = $159 & 1;
  $161 = $70 | $160;
  $162 = $161 | 2;
  HEAP32[$0>>2] = $162;
  $$sum910 = $70 | 4;
  $163 = (($p) + ($$sum910)|0);
  $164 = HEAP32[$163>>2]|0;
  $165 = $164 | 1;
  HEAP32[$163>>2] = $165;
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 } else {
  $166 = (($p) + ($nb)|0);
  $167 = HEAP32[$0>>2]|0;
  $168 = $167 & 1;
  $169 = $168 | $nb;
  $170 = $169 | 2;
  HEAP32[$0>>2] = $170;
  $$sum5 = (($nb) + 4)|0;
  $171 = (($p) + ($$sum5)|0);
  $172 = $72 | 3;
  HEAP32[$171>>2] = $172;
  $$sum78 = $70 | 4;
  $173 = (($p) + ($$sum78)|0);
  $174 = HEAP32[$173>>2]|0;
  $175 = $174 | 1;
  HEAP32[$173>>2] = $175;
  _dispose_chunk($166,$72);
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 }
 return 0|0;
}
function _dispose_chunk($p,$psize) {
 $p = $p|0;
 $psize = $psize|0;
 var $$0 = 0, $$02 = 0, $$1 = 0, $$pre = 0, $$pre$phi63Z2D = 0, $$pre$phi65Z2D = 0, $$pre$phiZ2D = 0, $$pre62 = 0, $$pre64 = 0, $$sum = 0, $$sum1 = 0, $$sum12$pre = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum18 = 0, $$sum19 = 0, $$sum2 = 0;
 var $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0, $$sum25 = 0, $$sum26 = 0, $$sum27 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0, $$sum31 = 0, $$sum4 = 0, $$sum5 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
 var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0;
 var $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I19$0 = 0, $I19$0$c = 0, $K20$049 = 0, $R$0 = 0, $R$1 = 0, $R7$0 = 0, $R7$1 = 0, $RP$0 = 0, $RP9$0 = 0, $T$0$lcssa = 0, $T$048 = 0, $cond = 0, $cond46 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($p) + ($psize)|0);
 $1 = (($p) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 1;
 $4 = ($3|0)==(0);
 do {
  if ($4) {
   $5 = HEAP32[$p>>2]|0;
   $6 = $2 & 3;
   $7 = ($6|0)==(0);
   if ($7) {
    STACKTOP = sp;return;
   }
   $8 = (0 - ($5))|0;
   $9 = (($p) + ($8)|0);
   $10 = (($5) + ($psize))|0;
   $11 = HEAP32[((30080 + 16|0))>>2]|0;
   $12 = ($9>>>0)<($11>>>0);
   if ($12) {
    _abort();
    // unreachable;
   }
   $13 = HEAP32[((30080 + 20|0))>>2]|0;
   $14 = ($9|0)==($13|0);
   if ($14) {
    $$sum = (($psize) + 4)|0;
    $100 = (($p) + ($$sum)|0);
    $101 = HEAP32[$100>>2]|0;
    $102 = $101 & 3;
    $103 = ($102|0)==(3);
    if (!($103)) {
     $$0 = $9;$$02 = $10;
     break;
    }
    HEAP32[((30080 + 8|0))>>2] = $10;
    $104 = HEAP32[$100>>2]|0;
    $105 = $104 & -2;
    HEAP32[$100>>2] = $105;
    $106 = $10 | 1;
    $$sum20 = (4 - ($5))|0;
    $107 = (($p) + ($$sum20)|0);
    HEAP32[$107>>2] = $106;
    HEAP32[$0>>2] = $10;
    STACKTOP = sp;return;
   }
   $15 = $5 >>> 3;
   $16 = ($5>>>0)<(256);
   if ($16) {
    $$sum30 = (8 - ($5))|0;
    $17 = (($p) + ($$sum30)|0);
    $18 = HEAP32[$17>>2]|0;
    $$sum31 = (12 - ($5))|0;
    $19 = (($p) + ($$sum31)|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $15 << 1;
    $22 = ((30080 + ($21<<2)|0) + 40|0);
    $23 = ($18|0)==($22|0);
    if (!($23)) {
     $24 = ($18>>>0)<($11>>>0);
     if ($24) {
      _abort();
      // unreachable;
     }
     $25 = (($18) + 12|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($26|0)==($9|0);
     if (!($27)) {
      _abort();
      // unreachable;
     }
    }
    $28 = ($20|0)==($18|0);
    if ($28) {
     $29 = 1 << $15;
     $30 = $29 ^ -1;
     $31 = HEAP32[30080>>2]|0;
     $32 = $31 & $30;
     HEAP32[30080>>2] = $32;
     $$0 = $9;$$02 = $10;
     break;
    }
    $33 = ($20|0)==($22|0);
    if ($33) {
     $$pre64 = (($20) + 8|0);
     $$pre$phi65Z2D = $$pre64;
    } else {
     $34 = ($20>>>0)<($11>>>0);
     if ($34) {
      _abort();
      // unreachable;
     }
     $35 = (($20) + 8|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = ($36|0)==($9|0);
     if ($37) {
      $$pre$phi65Z2D = $35;
     } else {
      _abort();
      // unreachable;
     }
    }
    $38 = (($18) + 12|0);
    HEAP32[$38>>2] = $20;
    HEAP32[$$pre$phi65Z2D>>2] = $18;
    $$0 = $9;$$02 = $10;
    break;
   }
   $$sum22 = (24 - ($5))|0;
   $39 = (($p) + ($$sum22)|0);
   $40 = HEAP32[$39>>2]|0;
   $$sum23 = (12 - ($5))|0;
   $41 = (($p) + ($$sum23)|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)==($9|0);
   do {
    if ($43) {
     $$sum24 = (16 - ($5))|0;
     $$sum25 = (($$sum24) + 4)|0;
     $53 = (($p) + ($$sum25)|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ($54|0)==(0|0);
     if ($55) {
      $56 = (($p) + ($$sum24)|0);
      $57 = HEAP32[$56>>2]|0;
      $58 = ($57|0)==(0|0);
      if ($58) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $57;$RP$0 = $56;
      }
     } else {
      $R$0 = $54;$RP$0 = $53;
     }
     while(1) {
      $59 = (($R$0) + 20|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = ($60|0)==(0|0);
      if (!($61)) {
       $R$0 = $60;$RP$0 = $59;
       continue;
      }
      $62 = (($R$0) + 16|0);
      $63 = HEAP32[$62>>2]|0;
      $64 = ($63|0)==(0|0);
      if ($64) {
       break;
      } else {
       $R$0 = $63;$RP$0 = $62;
      }
     }
     $65 = ($RP$0>>>0)<($11>>>0);
     if ($65) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0>>2] = 0;
      $R$1 = $R$0;
      break;
     }
    } else {
     $$sum29 = (8 - ($5))|0;
     $44 = (($p) + ($$sum29)|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = ($45>>>0)<($11>>>0);
     if ($46) {
      _abort();
      // unreachable;
     }
     $47 = (($45) + 12|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = ($48|0)==($9|0);
     if (!($49)) {
      _abort();
      // unreachable;
     }
     $50 = (($42) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51|0)==($9|0);
     if ($52) {
      HEAP32[$47>>2] = $42;
      HEAP32[$50>>2] = $45;
      $R$1 = $42;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $66 = ($40|0)==(0|0);
   if ($66) {
    $$0 = $9;$$02 = $10;
   } else {
    $$sum26 = (28 - ($5))|0;
    $67 = (($p) + ($$sum26)|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = ((30080 + ($68<<2)|0) + 304|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($9|0)==($70|0);
    if ($71) {
     HEAP32[$69>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $72 = 1 << $68;
      $73 = $72 ^ -1;
      $74 = HEAP32[((30080 + 4|0))>>2]|0;
      $75 = $74 & $73;
      HEAP32[((30080 + 4|0))>>2] = $75;
      $$0 = $9;$$02 = $10;
      break;
     }
    } else {
     $76 = HEAP32[((30080 + 16|0))>>2]|0;
     $77 = ($40>>>0)<($76>>>0);
     if ($77) {
      _abort();
      // unreachable;
     }
     $78 = (($40) + 16|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = ($79|0)==($9|0);
     if ($80) {
      HEAP32[$78>>2] = $R$1;
     } else {
      $81 = (($40) + 20|0);
      HEAP32[$81>>2] = $R$1;
     }
     $82 = ($R$1|0)==(0|0);
     if ($82) {
      $$0 = $9;$$02 = $10;
      break;
     }
    }
    $83 = HEAP32[((30080 + 16|0))>>2]|0;
    $84 = ($R$1>>>0)<($83>>>0);
    if ($84) {
     _abort();
     // unreachable;
    }
    $85 = (($R$1) + 24|0);
    HEAP32[$85>>2] = $40;
    $$sum27 = (16 - ($5))|0;
    $86 = (($p) + ($$sum27)|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87|0)==(0|0);
    do {
     if (!($88)) {
      $89 = HEAP32[((30080 + 16|0))>>2]|0;
      $90 = ($87>>>0)<($89>>>0);
      if ($90) {
       _abort();
       // unreachable;
      } else {
       $91 = (($R$1) + 16|0);
       HEAP32[$91>>2] = $87;
       $92 = (($87) + 24|0);
       HEAP32[$92>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum28 = (($$sum27) + 4)|0;
    $93 = (($p) + ($$sum28)|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = ($94|0)==(0|0);
    if ($95) {
     $$0 = $9;$$02 = $10;
    } else {
     $96 = HEAP32[((30080 + 16|0))>>2]|0;
     $97 = ($94>>>0)<($96>>>0);
     if ($97) {
      _abort();
      // unreachable;
     } else {
      $98 = (($R$1) + 20|0);
      HEAP32[$98>>2] = $94;
      $99 = (($94) + 24|0);
      HEAP32[$99>>2] = $R$1;
      $$0 = $9;$$02 = $10;
      break;
     }
    }
   }
  } else {
   $$0 = $p;$$02 = $psize;
  }
 } while(0);
 $108 = HEAP32[((30080 + 16|0))>>2]|0;
 $109 = ($0>>>0)<($108>>>0);
 if ($109) {
  _abort();
  // unreachable;
 }
 $$sum1 = (($psize) + 4)|0;
 $110 = (($p) + ($$sum1)|0);
 $111 = HEAP32[$110>>2]|0;
 $112 = $111 & 2;
 $113 = ($112|0)==(0);
 if ($113) {
  $114 = HEAP32[((30080 + 24|0))>>2]|0;
  $115 = ($0|0)==($114|0);
  if ($115) {
   $116 = HEAP32[((30080 + 12|0))>>2]|0;
   $117 = (($116) + ($$02))|0;
   HEAP32[((30080 + 12|0))>>2] = $117;
   HEAP32[((30080 + 24|0))>>2] = $$0;
   $118 = $117 | 1;
   $119 = (($$0) + 4|0);
   HEAP32[$119>>2] = $118;
   $120 = HEAP32[((30080 + 20|0))>>2]|0;
   $121 = ($$0|0)==($120|0);
   if (!($121)) {
    STACKTOP = sp;return;
   }
   HEAP32[((30080 + 20|0))>>2] = 0;
   HEAP32[((30080 + 8|0))>>2] = 0;
   STACKTOP = sp;return;
  }
  $122 = HEAP32[((30080 + 20|0))>>2]|0;
  $123 = ($0|0)==($122|0);
  if ($123) {
   $124 = HEAP32[((30080 + 8|0))>>2]|0;
   $125 = (($124) + ($$02))|0;
   HEAP32[((30080 + 8|0))>>2] = $125;
   HEAP32[((30080 + 20|0))>>2] = $$0;
   $126 = $125 | 1;
   $127 = (($$0) + 4|0);
   HEAP32[$127>>2] = $126;
   $128 = (($$0) + ($125)|0);
   HEAP32[$128>>2] = $125;
   STACKTOP = sp;return;
  }
  $129 = $111 & -8;
  $130 = (($129) + ($$02))|0;
  $131 = $111 >>> 3;
  $132 = ($111>>>0)<(256);
  do {
   if ($132) {
    $$sum18 = (($psize) + 8)|0;
    $133 = (($p) + ($$sum18)|0);
    $134 = HEAP32[$133>>2]|0;
    $$sum19 = (($psize) + 12)|0;
    $135 = (($p) + ($$sum19)|0);
    $136 = HEAP32[$135>>2]|0;
    $137 = $131 << 1;
    $138 = ((30080 + ($137<<2)|0) + 40|0);
    $139 = ($134|0)==($138|0);
    if (!($139)) {
     $140 = ($134>>>0)<($108>>>0);
     if ($140) {
      _abort();
      // unreachable;
     }
     $141 = (($134) + 12|0);
     $142 = HEAP32[$141>>2]|0;
     $143 = ($142|0)==($0|0);
     if (!($143)) {
      _abort();
      // unreachable;
     }
    }
    $144 = ($136|0)==($134|0);
    if ($144) {
     $145 = 1 << $131;
     $146 = $145 ^ -1;
     $147 = HEAP32[30080>>2]|0;
     $148 = $147 & $146;
     HEAP32[30080>>2] = $148;
     break;
    }
    $149 = ($136|0)==($138|0);
    if ($149) {
     $$pre62 = (($136) + 8|0);
     $$pre$phi63Z2D = $$pre62;
    } else {
     $150 = ($136>>>0)<($108>>>0);
     if ($150) {
      _abort();
      // unreachable;
     }
     $151 = (($136) + 8|0);
     $152 = HEAP32[$151>>2]|0;
     $153 = ($152|0)==($0|0);
     if ($153) {
      $$pre$phi63Z2D = $151;
     } else {
      _abort();
      // unreachable;
     }
    }
    $154 = (($134) + 12|0);
    HEAP32[$154>>2] = $136;
    HEAP32[$$pre$phi63Z2D>>2] = $134;
   } else {
    $$sum2 = (($psize) + 24)|0;
    $155 = (($p) + ($$sum2)|0);
    $156 = HEAP32[$155>>2]|0;
    $$sum3 = (($psize) + 12)|0;
    $157 = (($p) + ($$sum3)|0);
    $158 = HEAP32[$157>>2]|0;
    $159 = ($158|0)==($0|0);
    do {
     if ($159) {
      $$sum5 = (($psize) + 20)|0;
      $169 = (($p) + ($$sum5)|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = ($170|0)==(0|0);
      if ($171) {
       $$sum4 = (($psize) + 16)|0;
       $172 = (($p) + ($$sum4)|0);
       $173 = HEAP32[$172>>2]|0;
       $174 = ($173|0)==(0|0);
       if ($174) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $173;$RP9$0 = $172;
       }
      } else {
       $R7$0 = $170;$RP9$0 = $169;
      }
      while(1) {
       $175 = (($R7$0) + 20|0);
       $176 = HEAP32[$175>>2]|0;
       $177 = ($176|0)==(0|0);
       if (!($177)) {
        $R7$0 = $176;$RP9$0 = $175;
        continue;
       }
       $178 = (($R7$0) + 16|0);
       $179 = HEAP32[$178>>2]|0;
       $180 = ($179|0)==(0|0);
       if ($180) {
        break;
       } else {
        $R7$0 = $179;$RP9$0 = $178;
       }
      }
      $181 = ($RP9$0>>>0)<($108>>>0);
      if ($181) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0>>2] = 0;
       $R7$1 = $R7$0;
       break;
      }
     } else {
      $$sum17 = (($psize) + 8)|0;
      $160 = (($p) + ($$sum17)|0);
      $161 = HEAP32[$160>>2]|0;
      $162 = ($161>>>0)<($108>>>0);
      if ($162) {
       _abort();
       // unreachable;
      }
      $163 = (($161) + 12|0);
      $164 = HEAP32[$163>>2]|0;
      $165 = ($164|0)==($0|0);
      if (!($165)) {
       _abort();
       // unreachable;
      }
      $166 = (($158) + 8|0);
      $167 = HEAP32[$166>>2]|0;
      $168 = ($167|0)==($0|0);
      if ($168) {
       HEAP32[$163>>2] = $158;
       HEAP32[$166>>2] = $161;
       $R7$1 = $158;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $182 = ($156|0)==(0|0);
    if (!($182)) {
     $$sum14 = (($psize) + 28)|0;
     $183 = (($p) + ($$sum14)|0);
     $184 = HEAP32[$183>>2]|0;
     $185 = ((30080 + ($184<<2)|0) + 304|0);
     $186 = HEAP32[$185>>2]|0;
     $187 = ($0|0)==($186|0);
     if ($187) {
      HEAP32[$185>>2] = $R7$1;
      $cond46 = ($R7$1|0)==(0|0);
      if ($cond46) {
       $188 = 1 << $184;
       $189 = $188 ^ -1;
       $190 = HEAP32[((30080 + 4|0))>>2]|0;
       $191 = $190 & $189;
       HEAP32[((30080 + 4|0))>>2] = $191;
       break;
      }
     } else {
      $192 = HEAP32[((30080 + 16|0))>>2]|0;
      $193 = ($156>>>0)<($192>>>0);
      if ($193) {
       _abort();
       // unreachable;
      }
      $194 = (($156) + 16|0);
      $195 = HEAP32[$194>>2]|0;
      $196 = ($195|0)==($0|0);
      if ($196) {
       HEAP32[$194>>2] = $R7$1;
      } else {
       $197 = (($156) + 20|0);
       HEAP32[$197>>2] = $R7$1;
      }
      $198 = ($R7$1|0)==(0|0);
      if ($198) {
       break;
      }
     }
     $199 = HEAP32[((30080 + 16|0))>>2]|0;
     $200 = ($R7$1>>>0)<($199>>>0);
     if ($200) {
      _abort();
      // unreachable;
     }
     $201 = (($R7$1) + 24|0);
     HEAP32[$201>>2] = $156;
     $$sum15 = (($psize) + 16)|0;
     $202 = (($p) + ($$sum15)|0);
     $203 = HEAP32[$202>>2]|0;
     $204 = ($203|0)==(0|0);
     do {
      if (!($204)) {
       $205 = HEAP32[((30080 + 16|0))>>2]|0;
       $206 = ($203>>>0)<($205>>>0);
       if ($206) {
        _abort();
        // unreachable;
       } else {
        $207 = (($R7$1) + 16|0);
        HEAP32[$207>>2] = $203;
        $208 = (($203) + 24|0);
        HEAP32[$208>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum16 = (($psize) + 20)|0;
     $209 = (($p) + ($$sum16)|0);
     $210 = HEAP32[$209>>2]|0;
     $211 = ($210|0)==(0|0);
     if (!($211)) {
      $212 = HEAP32[((30080 + 16|0))>>2]|0;
      $213 = ($210>>>0)<($212>>>0);
      if ($213) {
       _abort();
       // unreachable;
      } else {
       $214 = (($R7$1) + 20|0);
       HEAP32[$214>>2] = $210;
       $215 = (($210) + 24|0);
       HEAP32[$215>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $216 = $130 | 1;
  $217 = (($$0) + 4|0);
  HEAP32[$217>>2] = $216;
  $218 = (($$0) + ($130)|0);
  HEAP32[$218>>2] = $130;
  $219 = HEAP32[((30080 + 20|0))>>2]|0;
  $220 = ($$0|0)==($219|0);
  if ($220) {
   HEAP32[((30080 + 8|0))>>2] = $130;
   STACKTOP = sp;return;
  } else {
   $$1 = $130;
  }
 } else {
  $221 = $111 & -2;
  HEAP32[$110>>2] = $221;
  $222 = $$02 | 1;
  $223 = (($$0) + 4|0);
  HEAP32[$223>>2] = $222;
  $224 = (($$0) + ($$02)|0);
  HEAP32[$224>>2] = $$02;
  $$1 = $$02;
 }
 $225 = $$1 >>> 3;
 $226 = ($$1>>>0)<(256);
 if ($226) {
  $227 = $225 << 1;
  $228 = ((30080 + ($227<<2)|0) + 40|0);
  $229 = HEAP32[30080>>2]|0;
  $230 = 1 << $225;
  $231 = $229 & $230;
  $232 = ($231|0)==(0);
  if ($232) {
   $233 = $229 | $230;
   HEAP32[30080>>2] = $233;
   $$sum12$pre = (($227) + 2)|0;
   $$pre = ((30080 + ($$sum12$pre<<2)|0) + 40|0);
   $$pre$phiZ2D = $$pre;$F16$0 = $228;
  } else {
   $$sum13 = (($227) + 2)|0;
   $234 = ((30080 + ($$sum13<<2)|0) + 40|0);
   $235 = HEAP32[$234>>2]|0;
   $236 = HEAP32[((30080 + 16|0))>>2]|0;
   $237 = ($235>>>0)<($236>>>0);
   if ($237) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $234;$F16$0 = $235;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$0;
  $238 = (($F16$0) + 12|0);
  HEAP32[$238>>2] = $$0;
  $239 = (($$0) + 8|0);
  HEAP32[$239>>2] = $F16$0;
  $240 = (($$0) + 12|0);
  HEAP32[$240>>2] = $228;
  STACKTOP = sp;return;
 }
 $241 = $$1 >>> 8;
 $242 = ($241|0)==(0);
 if ($242) {
  $I19$0 = 0;
 } else {
  $243 = ($$1>>>0)>(16777215);
  if ($243) {
   $I19$0 = 31;
  } else {
   $244 = (($241) + 1048320)|0;
   $245 = $244 >>> 16;
   $246 = $245 & 8;
   $247 = $241 << $246;
   $248 = (($247) + 520192)|0;
   $249 = $248 >>> 16;
   $250 = $249 & 4;
   $251 = $250 | $246;
   $252 = $247 << $250;
   $253 = (($252) + 245760)|0;
   $254 = $253 >>> 16;
   $255 = $254 & 2;
   $256 = $251 | $255;
   $257 = (14 - ($256))|0;
   $258 = $252 << $255;
   $259 = $258 >>> 15;
   $260 = (($257) + ($259))|0;
   $261 = $260 << 1;
   $262 = (($260) + 7)|0;
   $263 = $$1 >>> $262;
   $264 = $263 & 1;
   $265 = $264 | $261;
   $I19$0 = $265;
  }
 }
 $266 = ((30080 + ($I19$0<<2)|0) + 304|0);
 $267 = (($$0) + 28|0);
 $I19$0$c = $I19$0;
 HEAP32[$267>>2] = $I19$0$c;
 $268 = (($$0) + 20|0);
 HEAP32[$268>>2] = 0;
 $269 = (($$0) + 16|0);
 HEAP32[$269>>2] = 0;
 $270 = HEAP32[((30080 + 4|0))>>2]|0;
 $271 = 1 << $I19$0;
 $272 = $270 & $271;
 $273 = ($272|0)==(0);
 if ($273) {
  $274 = $270 | $271;
  HEAP32[((30080 + 4|0))>>2] = $274;
  HEAP32[$266>>2] = $$0;
  $275 = (($$0) + 24|0);
  HEAP32[$275>>2] = $266;
  $276 = (($$0) + 12|0);
  HEAP32[$276>>2] = $$0;
  $277 = (($$0) + 8|0);
  HEAP32[$277>>2] = $$0;
  STACKTOP = sp;return;
 }
 $278 = HEAP32[$266>>2]|0;
 $279 = ($I19$0|0)==(31);
 if ($279) {
  $287 = 0;
 } else {
  $280 = $I19$0 >>> 1;
  $281 = (25 - ($280))|0;
  $287 = $281;
 }
 $282 = (($278) + 4|0);
 $283 = HEAP32[$282>>2]|0;
 $284 = $283 & -8;
 $285 = ($284|0)==($$1|0);
 L194: do {
  if ($285) {
   $T$0$lcssa = $278;
  } else {
   $286 = $$1 << $287;
   $K20$049 = $286;$T$048 = $278;
   while(1) {
    $294 = $K20$049 >>> 31;
    $295 = ((($T$048) + ($294<<2)|0) + 16|0);
    $290 = HEAP32[$295>>2]|0;
    $296 = ($290|0)==(0|0);
    if ($296) {
     break;
    }
    $288 = $K20$049 << 1;
    $289 = (($290) + 4|0);
    $291 = HEAP32[$289>>2]|0;
    $292 = $291 & -8;
    $293 = ($292|0)==($$1|0);
    if ($293) {
     $T$0$lcssa = $290;
     break L194;
    } else {
     $K20$049 = $288;$T$048 = $290;
    }
   }
   $297 = HEAP32[((30080 + 16|0))>>2]|0;
   $298 = ($295>>>0)<($297>>>0);
   if ($298) {
    _abort();
    // unreachable;
   }
   HEAP32[$295>>2] = $$0;
   $299 = (($$0) + 24|0);
   HEAP32[$299>>2] = $T$048;
   $300 = (($$0) + 12|0);
   HEAP32[$300>>2] = $$0;
   $301 = (($$0) + 8|0);
   HEAP32[$301>>2] = $$0;
   STACKTOP = sp;return;
  }
 } while(0);
 $302 = (($T$0$lcssa) + 8|0);
 $303 = HEAP32[$302>>2]|0;
 $304 = HEAP32[((30080 + 16|0))>>2]|0;
 $305 = ($T$0$lcssa>>>0)<($304>>>0);
 if ($305) {
  _abort();
  // unreachable;
 }
 $306 = ($303>>>0)<($304>>>0);
 if ($306) {
  _abort();
  // unreachable;
 }
 $307 = (($303) + 12|0);
 HEAP32[$307>>2] = $$0;
 HEAP32[$302>>2] = $$0;
 $308 = (($$0) + 8|0);
 HEAP32[$308>>2] = $303;
 $309 = (($$0) + 12|0);
 HEAP32[$309>>2] = $T$0$lcssa;
 $310 = (($$0) + 24|0);
 HEAP32[$310>>2] = 0;
 STACKTOP = sp;return;
}
function __Znwj($size) {
 $size = $size|0;
 var $$size = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ($size|0)==(0);
 $$size = $0 ? 1 : $size;
 while(1) {
  $1 = (_malloc($$size)|0);
  $2 = ($1|0)==(0|0);
  if (!($2)) {
   label = 10;
   break;
  }
  $3 = HEAP32[30576>>2]|0;HEAP32[30576>>2] = (($3+0)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   label = 9;
   break;
  }
  $5 = $3;
  __THREW__ = 0;
  invoke_v($5|0);
  $6 = __THREW__; __THREW__ = 0;
  $7 = $6&1;
  if ($7) {
   label = 5;
   break;
  }
 }
 do {
  if ((label|0) == 5) {
   $8 = ___cxa_find_matching_catch(-1,-1,30640|0)|0;
   $9 = tempRet0;
   $lpad$phi$index = $8;$lpad$phi$index2 = $9;
  }
  else if ((label|0) == 9) {
   $13 = (___cxa_allocate_exception(4)|0);
   HEAP32[$13>>2] = ((30584 + 8|0));
   __THREW__ = 0;
   invoke_viii(92,($13|0),(30640|0),(15|0));
   $14 = __THREW__; __THREW__ = 0;
   $15 = $14&1;
   if ($15) {
    $10 = ___cxa_find_matching_catch(-1,-1,30640|0)|0;
    $11 = tempRet0;
    $lpad$phi$index = $10;$lpad$phi$index2 = $11;
    break;
   } else {
    // unreachable;
   }
  }
  else if ((label|0) == 10) {
   STACKTOP = sp;return ($1|0);
  }
 } while(0);
 $12 = ($lpad$phi$index2|0)<(0);
 if ($12) {
  ___cxa_call_unexpected(($lpad$phi$index|0));
  // unreachable;
 } else {
  ___resumeException($lpad$phi$index|0);
  // unreachable;
 }
 return 0|0;
}
function __Znaj($size) {
 $size = $size|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $0 = (invoke_ii(191,($size|0))|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if (!($2)) {
  STACKTOP = sp;return ($0|0);
 }
 $3 = ___cxa_find_matching_catch(-1,-1,30640|0)|0;
 $4 = tempRet0;
 $5 = ($4|0)<(0);
 if ($5) {
  ___cxa_call_unexpected(($3|0));
  // unreachable;
 } else {
  ___resumeException($3|0);
  // unreachable;
 }
 return 0|0;
}
function __ZdlPv($ptr) {
 $ptr = $ptr|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($ptr|0)==(0|0);
 if (!($0)) {
  _free($ptr);
 }
 STACKTOP = sp;return;
}
function __ZdaPv($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($ptr);
 STACKTOP = sp;return;
}
function __ZNSt9bad_allocD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt9exceptionD2Ev(($this|0));
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt9bad_allocD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt9exceptionD2Ev(($this|0));
 STACKTOP = sp;return;
}
function __ZNKSt9bad_alloc4whatEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return (30608|0);
}
function _isdigit($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($c) + -48)|0;
 $1 = ($0>>>0)<(10);
 $2 = $1&1;
 STACKTOP = sp;return ($2|0);
}
function _isspace($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($c|0)==(32);
 if ($0) {
  $4 = 1;
 } else {
  $1 = (($c) + -9)|0;
  $2 = ($1>>>0)<(5);
  $4 = $2;
 }
 $3 = $4&1;
 STACKTOP = sp;return ($3|0);
}
function _isupper($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($c) + -65)|0;
 $1 = ($0>>>0)<(26);
 $2 = $1&1;
 STACKTOP = sp;return ($2|0);
}
function _tolower($c) {
 $c = $c|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_isupper($c)|0);
 $1 = ($0|0)==(0);
 $2 = $c | 32;
 $$0 = $1 ? $c : $2;
 STACKTOP = sp;return ($$0|0);
}
function ___intscan($f,$base,$pok,$0,$1) {
 $f = $f|0;
 $base = $base|0;
 $pok = $pok|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$1 = 0, $$121 = 0, $$122 = 0, $$18 = 0, $$19 = 0, $$base = 0, $$base16 = 0, $$lcssa = 0, $$sum = 0, $$sum10 = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum1352 = 0, $$sum14 = 0, $$sum15 = 0, $$sum9 = 0, $$sum934 = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0;
 var $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c$0 = 0, $c$1 = 0, $c$123 = 0, $c$2$be = 0, $c$2$lcssa = 0, $c$3$be = 0, $c$3$lcssa = 0, $c$359 = 0, $c$4$be = 0, $c$4$lcssa = 0, $c$5$be = 0, $c$6$be = 0, $c$6$lcssa = 0, $c$7$be = 0, $c$744 = 0;
 var $c$8 = 0, $c$9$be = 0, $neg$0 = 0, $or$cond = 0, $or$cond17 = 0, $or$cond20 = 0, $or$cond26 = 0, $or$cond2628 = 0, $phitmp93 = 0, $x$068 = 0, $x$135 = 0, $x$253 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($base>>>0)>(36);
 if ($2) {
  $5 = (___errno_location()|0);
  HEAP32[$5>>2] = 22;
  $278 = 0;$279 = 0;
  tempRet0 = $278;
  STACKTOP = sp;return ($279|0);
 }
 $3 = (($f) + 4|0);
 $4 = (($f) + 100|0);
 while(1) {
  $6 = HEAP32[$3>>2]|0;
  $7 = HEAP32[$4>>2]|0;
  $8 = ($6>>>0)<($7>>>0);
  if ($8) {
   $9 = (($6) + 1|0);
   HEAP32[$3>>2] = $9;
   $10 = HEAP8[$6>>0]|0;
   $11 = $10&255;
   $13 = $11;
  } else {
   $12 = (___shgetc($f)|0);
   $13 = $12;
  }
  $14 = (_isspace($13)|0);
  $15 = ($14|0)==(0);
  if ($15) {
   break;
  }
 }
 $16 = ($13|0)==(45);
 do {
  if ((($13|0) == 43) | (($13|0) == 45)) {
   $17 = $16 << 31 >> 31;
   $18 = HEAP32[$3>>2]|0;
   $19 = HEAP32[$4>>2]|0;
   $20 = ($18>>>0)<($19>>>0);
   if ($20) {
    $21 = (($18) + 1|0);
    HEAP32[$3>>2] = $21;
    $22 = HEAP8[$18>>0]|0;
    $23 = $22&255;
    $c$0 = $23;$neg$0 = $17;
    break;
   } else {
    $24 = (___shgetc($f)|0);
    $c$0 = $24;$neg$0 = $17;
    break;
   }
  } else {
   $c$0 = $13;$neg$0 = 0;
  }
 } while(0);
 $25 = ($base|0)==(0);
 $26 = $base & -17;
 $27 = ($26|0)==(0);
 $28 = ($c$0|0)==(48);
 $or$cond = $27 & $28;
 do {
  if ($or$cond) {
   $29 = HEAP32[$3>>2]|0;
   $30 = HEAP32[$4>>2]|0;
   $31 = ($29>>>0)<($30>>>0);
   if ($31) {
    $32 = (($29) + 1|0);
    HEAP32[$3>>2] = $32;
    $33 = HEAP8[$29>>0]|0;
    $34 = $33&255;
    $37 = $34;
   } else {
    $35 = (___shgetc($f)|0);
    $37 = $35;
   }
   $36 = $37 | 32;
   $38 = ($36|0)==(120);
   if (!($38)) {
    $$base = $25 ? 8 : $base;
    $$1 = $$base;$c$1 = $37;
    label = 32;
    break;
   }
   $39 = HEAP32[$3>>2]|0;
   $40 = HEAP32[$4>>2]|0;
   $41 = ($39>>>0)<($40>>>0);
   if ($41) {
    $42 = (($39) + 1|0);
    HEAP32[$3>>2] = $42;
    $43 = HEAP8[$39>>0]|0;
    $44 = $43&255;
    $46 = $44;
   } else {
    $45 = (___shgetc($f)|0);
    $46 = $45;
   }
   $$sum15 = (($46) + 1)|0;
   $47 = (30656 + ($$sum15)|0);
   $48 = HEAP8[$47>>0]|0;
   $49 = ($48&255)>(15);
   if ($49) {
    $50 = HEAP32[$4>>2]|0;
    $51 = ($50|0)==(0|0);
    if (!($51)) {
     $52 = HEAP32[$3>>2]|0;
     $53 = (($52) + -1|0);
     HEAP32[$3>>2] = $53;
    }
    $54 = ($pok|0)==(0);
    if ($54) {
     ___shlim($f,0);
     $278 = 0;$279 = 0;
     tempRet0 = $278;
     STACKTOP = sp;return ($279|0);
    }
    if ($51) {
     $278 = 0;$279 = 0;
     tempRet0 = $278;
     STACKTOP = sp;return ($279|0);
    }
    $55 = HEAP32[$3>>2]|0;
    $56 = (($55) + -1|0);
    HEAP32[$3>>2] = $56;
    $278 = 0;$279 = 0;
    tempRet0 = $278;
    STACKTOP = sp;return ($279|0);
   } else {
    $$122 = 16;$c$123 = $46;
    label = 47;
   }
  } else {
   $$base16 = $25 ? 10 : $base;
   $$sum = (($c$0) + 1)|0;
   $57 = (30656 + ($$sum)|0);
   $58 = HEAP8[$57>>0]|0;
   $59 = $58&255;
   $60 = ($59>>>0)<($$base16>>>0);
   if ($60) {
    $$1 = $$base16;$c$1 = $c$0;
    label = 32;
   } else {
    $61 = HEAP32[$4>>2]|0;
    $62 = ($61|0)==(0|0);
    if (!($62)) {
     $63 = HEAP32[$3>>2]|0;
     $64 = (($63) + -1|0);
     HEAP32[$3>>2] = $64;
    }
    ___shlim($f,0);
    $65 = (___errno_location()|0);
    HEAP32[$65>>2] = 22;
    $278 = 0;$279 = 0;
    tempRet0 = $278;
    STACKTOP = sp;return ($279|0);
   }
  }
 } while(0);
 if ((label|0) == 32) {
  $66 = ($$1|0)==(10);
  if ($66) {
   $67 = (($c$1) + -48)|0;
   $68 = ($67>>>0)<(10);
   if ($68) {
    $70 = $67;$x$068 = 0;
    while(1) {
     $69 = (($x$068) + ($70))|0;
     $71 = HEAP32[$3>>2]|0;
     $72 = HEAP32[$4>>2]|0;
     $73 = ($71>>>0)<($72>>>0);
     if ($73) {
      $74 = (($71) + 1|0);
      HEAP32[$3>>2] = $74;
      $75 = HEAP8[$71>>0]|0;
      $76 = $75&255;
      $c$2$be = $76;
     } else {
      $77 = (___shgetc($f)|0);
      $c$2$be = $77;
     }
     $78 = (($c$2$be) + -48)|0;
     $79 = ($78>>>0)<(10);
     $80 = ($69>>>0)<(429496729);
     $$ = $79 & $80;
     if (!($$)) {
      break;
     }
     $phitmp93 = ($69*10)|0;
     $70 = $78;$x$068 = $phitmp93;
    }
    $280 = $69;$281 = 0;$c$2$lcssa = $c$2$be;
   } else {
    $280 = 0;$281 = 0;$c$2$lcssa = $c$1;
   }
   $81 = (($c$2$lcssa) + -48)|0;
   $82 = ($81>>>0)<(10);
   if ($82) {
    $83 = $280;$84 = $281;$88 = $81;$c$359 = $c$2$lcssa;
    while(1) {
     $85 = (___muldi3(($83|0),($84|0),10,0)|0);
     $86 = tempRet0;
     $87 = ($88|0)<(0);
     $89 = $87 << 31 >> 31;
     $90 = $88 ^ -1;
     $91 = $89 ^ -1;
     $92 = ($86>>>0)>($91>>>0);
     $93 = ($86|0)==($91|0);
     $94 = ($85>>>0)>($90>>>0);
     $95 = $93 & $94;
     $96 = $92 | $95;
     if ($96) {
      $$lcssa = $88;$282 = $83;$283 = $84;$c$3$lcssa = $c$359;
      break;
     }
     $97 = (_i64Add(($85|0),($86|0),($88|0),($89|0))|0);
     $98 = tempRet0;
     $99 = HEAP32[$3>>2]|0;
     $100 = HEAP32[$4>>2]|0;
     $101 = ($99>>>0)<($100>>>0);
     if ($101) {
      $102 = (($99) + 1|0);
      HEAP32[$3>>2] = $102;
      $103 = HEAP8[$99>>0]|0;
      $104 = $103&255;
      $c$3$be = $104;
     } else {
      $105 = (___shgetc($f)|0);
      $c$3$be = $105;
     }
     $106 = (($c$3$be) + -48)|0;
     $107 = ($106>>>0)<(10);
     $108 = ($98>>>0)<(429496729);
     $109 = ($98|0)==(429496729);
     $110 = ($97>>>0)<(2576980378);
     $111 = $109 & $110;
     $112 = $108 | $111;
     $or$cond17 = $107 & $112;
     if ($or$cond17) {
      $83 = $97;$84 = $98;$88 = $106;$c$359 = $c$3$be;
     } else {
      $$lcssa = $106;$282 = $97;$283 = $98;$c$3$lcssa = $c$3$be;
      break;
     }
    }
    $113 = ($$lcssa>>>0)>(9);
    if ($113) {
     $252 = $283;$255 = $282;
    } else {
     $$121 = 10;$284 = $282;$285 = $283;$c$8 = $c$3$lcssa;
     label = 73;
    }
   } else {
    $252 = $281;$255 = $280;
   }
  } else {
   $$122 = $$1;$c$123 = $c$1;
   label = 47;
  }
 }
 L70: do {
  if ((label|0) == 47) {
   $114 = (($$122) + -1)|0;
   $115 = $114 & $$122;
   $116 = ($115|0)==(0);
   if ($116) {
    $121 = ($$122*23)|0;
    $122 = $121 >>> 5;
    $123 = $122 & 7;
    $124 = (30920 + ($123)|0);
    $125 = HEAP8[$124>>0]|0;
    $126 = $125 << 24 >> 24;
    $$sum934 = (($c$123) + 1)|0;
    $127 = (30656 + ($$sum934)|0);
    $128 = HEAP8[$127>>0]|0;
    $129 = $128&255;
    $130 = ($129>>>0)<($$122>>>0);
    if ($130) {
     $133 = $129;$x$135 = 0;
     while(1) {
      $131 = $x$135 << $126;
      $132 = $133 | $131;
      $134 = HEAP32[$3>>2]|0;
      $135 = HEAP32[$4>>2]|0;
      $136 = ($134>>>0)<($135>>>0);
      if ($136) {
       $137 = (($134) + 1|0);
       HEAP32[$3>>2] = $137;
       $138 = HEAP8[$134>>0]|0;
       $139 = $138&255;
       $c$4$be = $139;
      } else {
       $140 = (___shgetc($f)|0);
       $c$4$be = $140;
      }
      $$sum9 = (($c$4$be) + 1)|0;
      $141 = (30656 + ($$sum9)|0);
      $142 = HEAP8[$141>>0]|0;
      $143 = $142&255;
      $144 = ($143>>>0)<($$122>>>0);
      $145 = ($132>>>0)<(134217728);
      $$18 = $144 & $145;
      if ($$18) {
       $133 = $143;$x$135 = $132;
      } else {
       break;
      }
     }
     $149 = $142;$152 = 0;$155 = $132;$c$4$lcssa = $c$4$be;
    } else {
     $149 = $128;$152 = 0;$155 = 0;$c$4$lcssa = $c$123;
    }
    $146 = (_bitshift64Lshr(-1,-1,($126|0))|0);
    $147 = tempRet0;
    $148 = $149&255;
    $150 = ($148>>>0)>=($$122>>>0);
    $151 = ($152>>>0)>($147>>>0);
    $153 = ($152|0)==($147|0);
    $154 = ($155>>>0)>($146>>>0);
    $156 = $153 & $154;
    $157 = $151 | $156;
    $or$cond2628 = $150 | $157;
    if ($or$cond2628) {
     $$121 = $$122;$284 = $155;$285 = $152;$c$8 = $c$4$lcssa;
     label = 73;
     break;
    } else {
     $158 = $155;$159 = $152;$163 = $149;
    }
    while(1) {
     $160 = (_bitshift64Shl(($158|0),($159|0),($126|0))|0);
     $161 = tempRet0;
     $162 = $163&255;
     $164 = $162 | $160;
     $165 = HEAP32[$3>>2]|0;
     $166 = HEAP32[$4>>2]|0;
     $167 = ($165>>>0)<($166>>>0);
     if ($167) {
      $168 = (($165) + 1|0);
      HEAP32[$3>>2] = $168;
      $169 = HEAP8[$165>>0]|0;
      $170 = $169&255;
      $c$5$be = $170;
     } else {
      $171 = (___shgetc($f)|0);
      $c$5$be = $171;
     }
     $$sum10 = (($c$5$be) + 1)|0;
     $172 = (30656 + ($$sum10)|0);
     $173 = HEAP8[$172>>0]|0;
     $174 = $173&255;
     $175 = ($174>>>0)>=($$122>>>0);
     $176 = ($161>>>0)>($147>>>0);
     $177 = ($161|0)==($147|0);
     $178 = ($164>>>0)>($146>>>0);
     $179 = $177 & $178;
     $180 = $176 | $179;
     $or$cond26 = $175 | $180;
     if ($or$cond26) {
      $$121 = $$122;$284 = $164;$285 = $161;$c$8 = $c$5$be;
      label = 73;
      break L70;
     } else {
      $158 = $164;$159 = $161;$163 = $173;
     }
    }
   }
   $$sum1352 = (($c$123) + 1)|0;
   $117 = (30656 + ($$sum1352)|0);
   $118 = HEAP8[$117>>0]|0;
   $119 = $118&255;
   $120 = ($119>>>0)<($$122>>>0);
   if ($120) {
    $183 = $119;$x$253 = 0;
    while(1) {
     $181 = Math_imul($x$253, $$122)|0;
     $182 = (($183) + ($181))|0;
     $184 = HEAP32[$3>>2]|0;
     $185 = HEAP32[$4>>2]|0;
     $186 = ($184>>>0)<($185>>>0);
     if ($186) {
      $187 = (($184) + 1|0);
      HEAP32[$3>>2] = $187;
      $188 = HEAP8[$184>>0]|0;
      $189 = $188&255;
      $c$6$be = $189;
     } else {
      $190 = (___shgetc($f)|0);
      $c$6$be = $190;
     }
     $$sum13 = (($c$6$be) + 1)|0;
     $191 = (30656 + ($$sum13)|0);
     $192 = HEAP8[$191>>0]|0;
     $193 = $192&255;
     $194 = ($193>>>0)<($$122>>>0);
     $195 = ($182>>>0)<(119304647);
     $$19 = $194 & $195;
     if ($$19) {
      $183 = $193;$x$253 = $182;
     } else {
      break;
     }
    }
    $197 = $192;$286 = $182;$287 = 0;$c$6$lcssa = $c$6$be;
   } else {
    $197 = $118;$286 = 0;$287 = 0;$c$6$lcssa = $c$123;
   }
   $196 = $197&255;
   $198 = ($196>>>0)<($$122>>>0);
   if ($198) {
    $199 = (___udivdi3(-1,-1,($$122|0),0)|0);
    $200 = tempRet0;
    $202 = $287;$205 = $286;$211 = $197;$c$744 = $c$6$lcssa;
    while(1) {
     $201 = ($202>>>0)>($200>>>0);
     $203 = ($202|0)==($200|0);
     $204 = ($205>>>0)>($199>>>0);
     $206 = $203 & $204;
     $207 = $201 | $206;
     if ($207) {
      $$121 = $$122;$284 = $205;$285 = $202;$c$8 = $c$744;
      label = 73;
      break L70;
     }
     $208 = (___muldi3(($205|0),($202|0),($$122|0),0)|0);
     $209 = tempRet0;
     $210 = $211&255;
     $212 = $210 ^ -1;
     $213 = ($209>>>0)>(4294967295);
     $214 = ($209|0)==(-1);
     $215 = ($208>>>0)>($212>>>0);
     $216 = $214 & $215;
     $217 = $213 | $216;
     if ($217) {
      $$121 = $$122;$284 = $205;$285 = $202;$c$8 = $c$744;
      label = 73;
      break L70;
     }
     $218 = (_i64Add(($210|0),0,($208|0),($209|0))|0);
     $219 = tempRet0;
     $220 = HEAP32[$3>>2]|0;
     $221 = HEAP32[$4>>2]|0;
     $222 = ($220>>>0)<($221>>>0);
     if ($222) {
      $223 = (($220) + 1|0);
      HEAP32[$3>>2] = $223;
      $224 = HEAP8[$220>>0]|0;
      $225 = $224&255;
      $c$7$be = $225;
     } else {
      $226 = (___shgetc($f)|0);
      $c$7$be = $226;
     }
     $$sum14 = (($c$7$be) + 1)|0;
     $227 = (30656 + ($$sum14)|0);
     $228 = HEAP8[$227>>0]|0;
     $229 = $228&255;
     $230 = ($229>>>0)<($$122>>>0);
     if ($230) {
      $202 = $219;$205 = $218;$211 = $228;$c$744 = $c$7$be;
     } else {
      $$121 = $$122;$284 = $218;$285 = $219;$c$8 = $c$7$be;
      label = 73;
      break;
     }
    }
   } else {
    $$121 = $$122;$284 = $286;$285 = $287;$c$8 = $c$6$lcssa;
    label = 73;
   }
  }
 } while(0);
 if ((label|0) == 73) {
  $$sum11 = (($c$8) + 1)|0;
  $231 = (30656 + ($$sum11)|0);
  $232 = HEAP8[$231>>0]|0;
  $233 = $232&255;
  $234 = ($233>>>0)<($$121>>>0);
  if ($234) {
   while(1) {
    $235 = HEAP32[$3>>2]|0;
    $236 = HEAP32[$4>>2]|0;
    $237 = ($235>>>0)<($236>>>0);
    if ($237) {
     $238 = (($235) + 1|0);
     HEAP32[$3>>2] = $238;
     $239 = HEAP8[$235>>0]|0;
     $240 = $239&255;
     $c$9$be = $240;
    } else {
     $241 = (___shgetc($f)|0);
     $c$9$be = $241;
    }
    $$sum12 = (($c$9$be) + 1)|0;
    $242 = (30656 + ($$sum12)|0);
    $243 = HEAP8[$242>>0]|0;
    $244 = $243&255;
    $245 = ($244>>>0)<($$121>>>0);
    if (!($245)) {
     break;
    }
   }
   $246 = (___errno_location()|0);
   HEAP32[$246>>2] = 34;
   $252 = $1;$255 = $0;
  } else {
   $252 = $285;$255 = $284;
  }
 }
 $247 = HEAP32[$4>>2]|0;
 $248 = ($247|0)==(0|0);
 if (!($248)) {
  $249 = HEAP32[$3>>2]|0;
  $250 = (($249) + -1|0);
  HEAP32[$3>>2] = $250;
 }
 $251 = ($252>>>0)<($1>>>0);
 $253 = ($252|0)==($1|0);
 $254 = ($255>>>0)<($0>>>0);
 $256 = $253 & $254;
 $257 = $251 | $256;
 if (!($257)) {
  $258 = $0 & 1;
  $259 = ($258|0)==(0);
  $260 = (0)==(0);
  $261 = $259 & $260;
  $262 = ($neg$0|0)==(0);
  $or$cond20 = $261 & $262;
  if ($or$cond20) {
   $263 = (___errno_location()|0);
   HEAP32[$263>>2] = 34;
   $264 = (_i64Add(($0|0),($1|0),-1,-1)|0);
   $265 = tempRet0;
   $278 = $265;$279 = $264;
   tempRet0 = $278;
   STACKTOP = sp;return ($279|0);
  }
  $266 = ($252>>>0)>($1>>>0);
  $267 = ($252|0)==($1|0);
  $268 = ($255>>>0)>($0>>>0);
  $269 = $267 & $268;
  $270 = $266 | $269;
  if ($270) {
   $271 = (___errno_location()|0);
   HEAP32[$271>>2] = 34;
   $278 = $1;$279 = $0;
   tempRet0 = $278;
   STACKTOP = sp;return ($279|0);
  }
 }
 $272 = ($neg$0|0)<(0);
 $273 = $272 << 31 >> 31;
 $274 = $255 ^ $neg$0;
 $275 = $252 ^ $273;
 $276 = (_i64Subtract(($274|0),($275|0),($neg$0|0),($273|0))|0);
 $277 = tempRet0;
 $278 = $277;$279 = $276;
 tempRet0 = $278;
 STACKTOP = sp;return ($279|0);
}
function ___floatscan($f,$prec,$pok) {
 $f = $f|0;
 $prec = $prec|0;
 $pok = $pok|0;
 var $$$i = 0, $$$i22 = 0, $$0 = 0.0, $$02$i = 0, $$08$i = 0, $$09$i = 0, $$1$be$i = 0, $$1$ph$i = 0, $$10$i = 0, $$14$i = 0, $$2$i = 0, $$3$be$i = 0, $$3$lcssa$i = 0, $$38$i = 0, $$388$i = 0, $$397$i = 0, $$in = 0, $$k$0$i = 0, $$lcssa43$i = 0, $$lnz$0$i = 0;
 var $$neg20$i = 0, $$pn$i = 0.0, $$pre$i = 0.0, $$pre$i17 = 0, $$pre$phi$iZ2D = 0.0, $$promoted$i = 0, $$sink$off0$us$i = 0, $$sink$off0$us53$i = 0, $$x$4$i = 0, $$y$3$i = 0.0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0, $187 = 0, $188 = 0.0, $189 = 0.0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0.0, $209 = 0.0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0.0, $255 = 0.0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0.0, $264 = 0.0, $265 = 0.0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0.0, $277 = 0.0, $278 = 0.0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0.0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0.0;
 var $305 = 0.0, $306 = 0.0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0.0, $313 = 0.0, $314 = 0.0, $315 = 0.0, $316 = 0.0, $317 = 0.0, $318 = 0, $319 = 0, $32 = 0, $320 = 0.0, $321 = 0, $322 = 0;
 var $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0;
 var $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0;
 var $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0;
 var $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0;
 var $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0;
 var $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0.0, $418 = 0.0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0;
 var $431 = 0, $432 = 0, $433 = 0, $434 = 0.0, $435 = 0.0, $436 = 0.0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0.0, $447 = 0.0, $448 = 0.0, $449 = 0;
 var $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0.0, $459 = 0.0, $46 = 0, $460 = 0.0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0;
 var $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0.0, $473 = 0, $474 = 0.0, $475 = 0.0, $476 = 0, $477 = 0.0, $478 = 0, $479 = 0.0, $48 = 0, $480 = 0.0, $481 = 0, $482 = 0, $483 = 0, $484 = 0.0, $485 = 0.0;
 var $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0.0, $490 = 0, $491 = 0.0, $492 = 0.0, $493 = 0.0, $494 = 0, $495 = 0, $496 = 0, $497 = 0.0, $498 = 0.0, $499 = 0, $5 = 0, $50 = 0.0, $500 = 0, $501 = 0, $502 = 0;
 var $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0.0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0;
 var $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0;
 var $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0;
 var $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0;
 var $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0;
 var $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0;
 var $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0;
 var $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0.0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0;
 var $648 = 0.0, $649 = 0.0, $65 = 0, $650 = 0.0, $651 = 0, $652 = 0.0, $653 = 0.0, $654 = 0.0, $655 = 0.0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0;
 var $666 = 0.0, $667 = 0.0, $668 = 0.0, $669 = 0, $67 = 0, $670 = 0.0, $671 = 0.0, $672 = 0, $673 = 0, $674 = 0, $675 = 0.0, $676 = 0.0, $677 = 0.0, $678 = 0.0, $679 = 0, $68 = 0, $680 = 0, $681 = 0.0, $682 = 0, $683 = 0.0;
 var $684 = 0.0, $685 = 0.0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0.0, $691 = 0, $692 = 0, $693 = 0, $694 = 0.0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0;
 var $701 = 0.0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0.0, $707 = 0, $708 = 0, $709 = 0.0, $71 = 0, $710 = 0.0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0;
 var $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a$0$lcssa161$i = 0, $a$061$i = 0, $a$1$i = 0, $a$2$ph40$i = 0;
 var $a$3$i = 0, $a$3$i$ph = 0, $a$3$ph$i = 0, $a$427$i = 0, $a$5$i = 0, $bias$0$i = 0.0, $bias$07$i = 0.0, $bits$0$ph = 0, $brmerge = 0, $brmerge107 = 0, $c$0 = 0, $c$0$i = 0, $c$1$lcssa = 0, $c$1$ph$i = 0, $c$169 = 0, $c$2 = 0, $c$2$i = 0, $c$2$lcssa$i = 0, $c$364 = 0, $c$4 = 0;
 var $c$5 = 0, $c$6 = 0, $carry$063$i = 0, $carry1$0$us$i = 0, $carry1$0$us49$i = 0, $carry1$1$lcssa$lcssa$i = 0, $carry1$1$us$i = 0, $carry1$1$us54$i = 0, $carry3$030$i = 0, $cond$i = 0, $d$0$i = 0, $denormal$0$i = 0, $denormal$1$i = 0, $denormal$2$i = 0, $e2$0$ph$i = 0, $e2$0$us$i = 0, $e2$0$us44$i = 0, $e2$1$i = 0, $e2$1$i$ph = 0, $e2$1$ph$i = 0;
 var $e2$2$i = 0, $e2$3$i = 0, $emin$0$ph = 0, $exitcond$i = 0, $frac$0$i = 0.0, $frac$1$i = 0.0, $frac$2$i = 0.0, $gotdig$0$i = 0, $gotdig$0$i9 = 0, $gotdig$2$i = 0, $gotdig$2$i11 = 0, $gotdig$3$i = 0, $gotdig$3$lcssa$i = 0, $gotdig$381$i = 0, $gotdig$393$i = 0, $gotdig$4$i = 0, $gotrad$0$i = 0, $gotrad$0$i12 = 0, $gotrad$1$i = 0, $gotrad$1$lcssa$i = 0;
 var $gotrad$194$i = 0, $gotrad$2$i = 0, $gottail$0$i = 0, $gottail$1$i = 0, $gottail$2$i = 0, $i$0$lcssa = 0, $i$025$i = 0, $i$068 = 0, $i$1$i = 0, $i$166 = 0, $i$263 = 0, $i$3 = 0, $i$4 = 0, $j$0$lcssa$i = 0, $j$086$i = 0, $j$096$i = 0, $j$2$i = 0, $j$371$i = 0, $k$0$lcssa$i = 0, $k$084$i = 0;
 var $k$095$i = 0, $k$2$i = 0, $k$3$i = 0, $k$462$i = 0, $k$5$in$us$i = 0, $k$5$in$us48$i = 0, $k$5$us$i = 0, $k$5$us50$i = 0, $k$5$z$2$us$i = 0, $k$5$z$2$us56$i = 0, $k$628$i = 0, $lnz$0$lcssa$i = 0, $lnz$079$i = 0, $lnz$092$i = 0, $lnz$2$i = 0, $notlhs = 0, $notrhs = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i15 = 0;
 var $or$cond106$not = 0, $or$cond11$i = 0, $or$cond12$us$i = 0, $or$cond12$us55$i = 0, $or$cond13$i = 0, $or$cond15$i = 0, $or$cond16$i = 0, $or$cond17$i = 0, $or$cond3$i = 0, $or$cond3$i16 = 0, $or$cond4$i = 0, $or$cond5 = 0, $or$cond7$i = 0, $or$cond789$i = 0, $or$cond8 = 0, $rp$0$lcssa162$i = 0, $rp$060$i = 0, $rp$1$i18 = 0, $rp$2$ph38$i = 0, $rp$3$i$ph = 0;
 var $rp$3$ph33$i = 0, $rp$426$i = 0, $rp$5$i = 0, $scale$0$i = 0.0, $scale$1$i = 0.0, $scale$2$i = 0.0, $sign$0 = 0, $storemerge$i = 0, $sum$i = 0, $x$0$i = 0, $x$1$i = 0, $x$2$i = 0, $x$3$lcssa$i = 0, $x$313$i = 0, $x$4$lcssa$i = 0, $x$48$i = 0, $x$5$i = 0, $x$6$i = 0, $x$i = 0, $y$0$i = 0.0;
 var $y$1$i = 0.0, $y$1$i23 = 0.0, $y$2$i = 0.0, $y$2$i24 = 0.0, $y$3$i = 0.0, $y$3$lcssa$i = 0.0, $y$39$i = 0.0, $y$4$i = 0.0, $y$5$i = 0.0, $z$0$i = 0, $z$1$ph39$i = 0, $z$1$us$i = 0, $z$1$us45$i = 0, $z$2$us$i = 0, $z$2$us47$i = 0, $z$3$lcssa$lcssa$i = 0, $z$3$us$i = 0, $z$3$us57$i = 0, $z$4$i = 0, $z$5$ph$i = 0;
 var $z$7$1$i = 0, $z$7$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0;
 $x$i = sp;
 if ((($prec|0) == 0)) {
  $bits$0$ph = 24;$emin$0$ph = -149;
 } else if ((($prec|0) == 2)) {
  $bits$0$ph = 53;$emin$0$ph = -1074;
 } else if ((($prec|0) == 1)) {
  $bits$0$ph = 53;$emin$0$ph = -1074;
 } else {
  $$0 = 0.0;
  STACKTOP = sp;return (+$$0);
 }
 $0 = (($f) + 4|0);
 $1 = (($f) + 100|0);
 while(1) {
  $2 = HEAP32[$0>>2]|0;
  $3 = HEAP32[$1>>2]|0;
  $4 = ($2>>>0)<($3>>>0);
  if ($4) {
   $5 = (($2) + 1|0);
   HEAP32[$0>>2] = $5;
   $6 = HEAP8[$2>>0]|0;
   $7 = $6&255;
   $9 = $7;
  } else {
   $8 = (___shgetc($f)|0);
   $9 = $8;
  }
  $10 = (_isspace($9)|0);
  $11 = ($10|0)==(0);
  if ($11) {
   break;
  }
 }
 $12 = ($9|0)==(45);
 do {
  if ((($9|0) == 43) | (($9|0) == 45)) {
   $13 = $12&1;
   $14 = $13 << 1;
   $15 = (1 - ($14))|0;
   $16 = HEAP32[$0>>2]|0;
   $17 = HEAP32[$1>>2]|0;
   $18 = ($16>>>0)<($17>>>0);
   if ($18) {
    $19 = (($16) + 1|0);
    HEAP32[$0>>2] = $19;
    $20 = HEAP8[$16>>0]|0;
    $21 = $20&255;
    $c$0 = $21;$sign$0 = $15;
    break;
   } else {
    $22 = (___shgetc($f)|0);
    $c$0 = $22;$sign$0 = $15;
    break;
   }
  } else {
   $c$0 = $9;$sign$0 = 1;
  }
 } while(0);
 $c$169 = $c$0;$i$068 = 0;
 while(1) {
  $23 = $c$169 | 32;
  $24 = (30936 + ($i$068)|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = $25 << 24 >> 24;
  $27 = ($23|0)==($26|0);
  if (!($27)) {
   $c$1$lcssa = $c$169;$i$0$lcssa = $i$068;
   break;
  }
  $28 = ($i$068>>>0)<(7);
  do {
   if ($28) {
    $29 = HEAP32[$0>>2]|0;
    $30 = HEAP32[$1>>2]|0;
    $31 = ($29>>>0)<($30>>>0);
    if ($31) {
     $32 = (($29) + 1|0);
     HEAP32[$0>>2] = $32;
     $33 = HEAP8[$29>>0]|0;
     $34 = $33&255;
     $c$2 = $34;
     break;
    } else {
     $35 = (___shgetc($f)|0);
     $c$2 = $35;
     break;
    }
   } else {
    $c$2 = $c$169;
   }
  } while(0);
  $36 = (($i$068) + 1)|0;
  $37 = ($36>>>0)<(8);
  if ($37) {
   $c$169 = $c$2;$i$068 = $36;
  } else {
   $c$1$lcssa = $c$2;$i$0$lcssa = $36;
   break;
  }
 }
 do {
  if ((($i$0$lcssa|0) == 3)) {
   label = 23;
  } else if (!((($i$0$lcssa|0) == 8))) {
   $38 = ($i$0$lcssa>>>0)<(4);
   $39 = ($pok|0)==(0);
   $or$cond = $38 | $39;
   if (!($or$cond)) {
    $40 = ($i$0$lcssa|0)==(8);
    if ($40) {
     break;
    } else {
     label = 23;
     break;
    }
   }
   $52 = ($i$0$lcssa|0)==(0);
   L34: do {
    if ($52) {
     $c$364 = $c$1$lcssa;$i$263 = 0;
     while(1) {
      $53 = $c$364 | 32;
      $54 = (30952 + ($i$263)|0);
      $55 = HEAP8[$54>>0]|0;
      $56 = $55 << 24 >> 24;
      $57 = ($53|0)==($56|0);
      if (!($57)) {
       $c$5 = $c$364;$i$3 = $i$263;
       break L34;
      }
      $58 = ($i$263>>>0)<(2);
      do {
       if ($58) {
        $59 = HEAP32[$0>>2]|0;
        $60 = HEAP32[$1>>2]|0;
        $61 = ($59>>>0)<($60>>>0);
        if ($61) {
         $62 = (($59) + 1|0);
         HEAP32[$0>>2] = $62;
         $63 = HEAP8[$59>>0]|0;
         $64 = $63&255;
         $c$4 = $64;
         break;
        } else {
         $65 = (___shgetc($f)|0);
         $c$4 = $65;
         break;
        }
       } else {
        $c$4 = $c$364;
       }
      } while(0);
      $66 = (($i$263) + 1)|0;
      $67 = ($66>>>0)<(3);
      if ($67) {
       $c$364 = $c$4;$i$263 = $66;
      } else {
       $c$5 = $c$4;$i$3 = $66;
       break;
      }
     }
    } else {
     $c$5 = $c$1$lcssa;$i$3 = $i$0$lcssa;
    }
   } while(0);
   if ((($i$3|0) == 3)) {
    $68 = HEAP32[$0>>2]|0;
    $69 = HEAP32[$1>>2]|0;
    $70 = ($68>>>0)<($69>>>0);
    if ($70) {
     $71 = (($68) + 1|0);
     HEAP32[$0>>2] = $71;
     $72 = HEAP8[$68>>0]|0;
     $73 = $72&255;
     $76 = $73;
    } else {
     $74 = (___shgetc($f)|0);
     $76 = $74;
    }
    $75 = ($76|0)==(40);
    if ($75) {
     $i$4 = 1;
    } else {
     $77 = HEAP32[$1>>2]|0;
     $78 = ($77|0)==(0|0);
     if ($78) {
      $$0 = nan;
      STACKTOP = sp;return (+$$0);
     }
     $79 = HEAP32[$0>>2]|0;
     $80 = (($79) + -1|0);
     HEAP32[$0>>2] = $80;
     $$0 = nan;
     STACKTOP = sp;return (+$$0);
    }
    while(1) {
     $81 = HEAP32[$0>>2]|0;
     $82 = HEAP32[$1>>2]|0;
     $83 = ($81>>>0)<($82>>>0);
     if ($83) {
      $84 = (($81) + 1|0);
      HEAP32[$0>>2] = $84;
      $85 = HEAP8[$81>>0]|0;
      $86 = $85&255;
      $89 = $86;
     } else {
      $87 = (___shgetc($f)|0);
      $89 = $87;
     }
     $88 = (($89) + -48)|0;
     $90 = ($88>>>0)<(10);
     $91 = (($89) + -65)|0;
     $92 = ($91>>>0)<(26);
     $or$cond8 = $90 | $92;
     if (!($or$cond8)) {
      $93 = (($89) + -97)|0;
      $94 = ($93>>>0)<(26);
      $95 = ($89|0)==(95);
      $or$cond5 = $94 | $95;
      if (!($or$cond5)) {
       break;
      }
     }
     $107 = (($i$4) + 1)|0;
     $i$4 = $107;
    }
    $96 = ($89|0)==(41);
    if ($96) {
     $$0 = nan;
     STACKTOP = sp;return (+$$0);
    }
    $97 = HEAP32[$1>>2]|0;
    $98 = ($97|0)==(0|0);
    if (!($98)) {
     $99 = HEAP32[$0>>2]|0;
     $100 = (($99) + -1|0);
     HEAP32[$0>>2] = $100;
    }
    if ($39) {
     $102 = (___errno_location()|0);
     HEAP32[$102>>2] = 22;
     ___shlim($f,0);
     $$0 = 0.0;
     STACKTOP = sp;return (+$$0);
    }
    $101 = ($i$4|0)==(0);
    $brmerge107 = $101 | $98;
    if ($brmerge107) {
     $$0 = nan;
     STACKTOP = sp;return (+$$0);
    } else {
     $$in = $i$4;
    }
    while(1) {
     $103 = (($$in) + -1)|0;
     $104 = HEAP32[$0>>2]|0;
     $105 = (($104) + -1|0);
     HEAP32[$0>>2] = $105;
     $106 = ($103|0)==(0);
     if ($106) {
      $$0 = nan;
      break;
     } else {
      $$in = $103;
     }
    }
    STACKTOP = sp;return (+$$0);
   } else if ((($i$3|0) == 0)) {
    $113 = ($c$5|0)==(48);
    do {
     if ($113) {
      $114 = HEAP32[$0>>2]|0;
      $115 = HEAP32[$1>>2]|0;
      $116 = ($114>>>0)<($115>>>0);
      if ($116) {
       $117 = (($114) + 1|0);
       HEAP32[$0>>2] = $117;
       $118 = HEAP8[$114>>0]|0;
       $119 = $118&255;
       $122 = $119;
      } else {
       $120 = (___shgetc($f)|0);
       $122 = $120;
      }
      $121 = $122 | 32;
      $123 = ($121|0)==(120);
      if (!($123)) {
       $321 = HEAP32[$1>>2]|0;
       $322 = ($321|0)==(0|0);
       if ($322) {
        $c$6 = 48;
        break;
       }
       $323 = HEAP32[$0>>2]|0;
       $324 = (($323) + -1|0);
       HEAP32[$0>>2] = $324;
       $c$6 = 48;
       break;
      }
      $124 = HEAP32[$0>>2]|0;
      $125 = HEAP32[$1>>2]|0;
      $126 = ($124>>>0)<($125>>>0);
      if ($126) {
       $127 = (($124) + 1|0);
       HEAP32[$0>>2] = $127;
       $128 = HEAP8[$124>>0]|0;
       $129 = $128&255;
       $c$0$i = $129;$gotdig$0$i = 0;
      } else {
       $130 = (___shgetc($f)|0);
       $c$0$i = $130;$gotdig$0$i = 0;
      }
      while(1) {
       if ((($c$0$i|0) == 46)) {
        label = 70;
        break;
       } else if (!((($c$0$i|0) == 48))) {
        $169 = 0;$172 = 0;$212 = 0;$214 = 0;$c$2$i = $c$0$i;$gotdig$2$i = $gotdig$0$i;$gotrad$0$i = 0;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
        break;
       }
       $131 = HEAP32[$0>>2]|0;
       $132 = HEAP32[$1>>2]|0;
       $133 = ($131>>>0)<($132>>>0);
       if ($133) {
        $134 = (($131) + 1|0);
        HEAP32[$0>>2] = $134;
        $135 = HEAP8[$131>>0]|0;
        $136 = $135&255;
        $c$0$i = $136;$gotdig$0$i = 1;
        continue;
       } else {
        $137 = (___shgetc($f)|0);
        $c$0$i = $137;$gotdig$0$i = 1;
        continue;
       }
      }
      L107: do {
       if ((label|0) == 70) {
        $138 = HEAP32[$0>>2]|0;
        $139 = HEAP32[$1>>2]|0;
        $140 = ($138>>>0)<($139>>>0);
        if ($140) {
         $141 = (($138) + 1|0);
         HEAP32[$0>>2] = $141;
         $142 = HEAP8[$138>>0]|0;
         $143 = $142&255;
         $c$1$ph$i = $143;
        } else {
         $144 = (___shgetc($f)|0);
         $c$1$ph$i = $144;
        }
        $145 = ($c$1$ph$i|0)==(48);
        if ($145) {
         $155 = -1;$156 = -1;
         while(1) {
          $146 = HEAP32[$0>>2]|0;
          $147 = HEAP32[$1>>2]|0;
          $148 = ($146>>>0)<($147>>>0);
          if ($148) {
           $149 = (($146) + 1|0);
           HEAP32[$0>>2] = $149;
           $150 = HEAP8[$146>>0]|0;
           $151 = $150&255;
           $154 = $151;
          } else {
           $152 = (___shgetc($f)|0);
           $154 = $152;
          }
          $153 = ($154|0)==(48);
          if (!($153)) {
           $169 = 0;$172 = 0;$212 = $155;$214 = $156;$c$2$i = $154;$gotdig$2$i = 1;$gotrad$0$i = 1;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
           break L107;
          }
          $157 = (_i64Add(($155|0),($156|0),-1,-1)|0);
          $158 = tempRet0;
          $155 = $157;$156 = $158;
         }
        } else {
         $169 = 0;$172 = 0;$212 = 0;$214 = 0;$c$2$i = $c$1$ph$i;$gotdig$2$i = $gotdig$0$i;$gotrad$0$i = 1;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
        }
       }
      } while(0);
      L120: while(1) {
       $159 = (($c$2$i) + -48)|0;
       $160 = ($159>>>0)<(10);
       do {
        if ($160) {
         $d$0$i = $159;
         label = 84;
        } else {
         $161 = $c$2$i | 32;
         $162 = (($161) + -97)|0;
         $163 = ($162>>>0)<(6);
         $164 = ($c$2$i|0)==(46);
         $or$cond$i = $163 | $164;
         if (!($or$cond$i)) {
          $c$2$lcssa$i = $c$2$i;
          break L120;
         }
         if ($164) {
          $165 = ($gotrad$0$i|0)==(0);
          if ($165) {
           $712 = $172;$713 = $169;$714 = $172;$715 = $169;$gotdig$3$i = $gotdig$2$i;$gotrad$1$i = 1;$gottail$2$i = $gottail$0$i;$scale$2$i = $scale$0$i;$x$2$i = $x$0$i;$y$2$i = $y$0$i;
           break;
          } else {
           $c$2$lcssa$i = 46;
           break L120;
          }
         } else {
          $166 = ($c$2$i|0)>(57);
          $167 = (($161) + -87)|0;
          $$38$i = $166 ? $167 : $159;
          $d$0$i = $$38$i;
          label = 84;
          break;
         }
        }
       } while(0);
       if ((label|0) == 84) {
        label = 0;
        $168 = ($169|0)<(0);
        $170 = ($169|0)==(0);
        $171 = ($172>>>0)<(8);
        $173 = $170 & $171;
        $174 = $168 | $173;
        do {
         if ($174) {
          $175 = $x$0$i << 4;
          $176 = (($d$0$i) + ($175))|0;
          $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $176;$y$1$i = $y$0$i;
         } else {
          $177 = ($169|0)<(0);
          $178 = ($169|0)==(0);
          $179 = ($172>>>0)<(14);
          $180 = $178 & $179;
          $181 = $177 | $180;
          if ($181) {
           $182 = (+($d$0$i|0));
           $183 = $scale$0$i * 0.0625;
           $184 = $183 * $182;
           $185 = $y$0$i + $184;
           $gottail$1$i = $gottail$0$i;$scale$1$i = $183;$x$1$i = $x$0$i;$y$1$i = $185;
           break;
          }
          $186 = ($d$0$i|0)!=(0);
          $187 = ($gottail$0$i|0)==(0);
          $or$cond3$i = $186 & $187;
          if ($or$cond3$i) {
           $188 = $scale$0$i * 0.5;
           $189 = $y$0$i + $188;
           $gottail$1$i = 1;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $189;
          } else {
           $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $y$0$i;
          }
         }
        } while(0);
        $190 = (_i64Add(($172|0),($169|0),1,0)|0);
        $191 = tempRet0;
        $712 = $212;$713 = $214;$714 = $190;$715 = $191;$gotdig$3$i = 1;$gotrad$1$i = $gotrad$0$i;$gottail$2$i = $gottail$1$i;$scale$2$i = $scale$1$i;$x$2$i = $x$1$i;$y$2$i = $y$1$i;
       }
       $192 = HEAP32[$0>>2]|0;
       $193 = HEAP32[$1>>2]|0;
       $194 = ($192>>>0)<($193>>>0);
       if ($194) {
        $195 = (($192) + 1|0);
        HEAP32[$0>>2] = $195;
        $196 = HEAP8[$192>>0]|0;
        $197 = $196&255;
        $169 = $715;$172 = $714;$212 = $712;$214 = $713;$c$2$i = $197;$gotdig$2$i = $gotdig$3$i;$gotrad$0$i = $gotrad$1$i;$gottail$0$i = $gottail$2$i;$scale$0$i = $scale$2$i;$x$0$i = $x$2$i;$y$0$i = $y$2$i;
        continue;
       } else {
        $198 = (___shgetc($f)|0);
        $169 = $715;$172 = $714;$212 = $712;$214 = $713;$c$2$i = $198;$gotdig$2$i = $gotdig$3$i;$gotrad$0$i = $gotrad$1$i;$gottail$0$i = $gottail$2$i;$scale$0$i = $scale$2$i;$x$0$i = $x$2$i;$y$0$i = $y$2$i;
        continue;
       }
      }
      $199 = ($gotdig$2$i|0)==(0);
      if ($199) {
       $200 = HEAP32[$1>>2]|0;
       $201 = ($200|0)==(0|0);
       if (!($201)) {
        $202 = HEAP32[$0>>2]|0;
        $203 = (($202) + -1|0);
        HEAP32[$0>>2] = $203;
       }
       if ($39) {
        ___shlim($f,0);
       } else {
        if (!($201)) {
         $204 = HEAP32[$0>>2]|0;
         $205 = (($204) + -1|0);
         HEAP32[$0>>2] = $205;
         $206 = ($gotrad$0$i|0)==(0);
         if (!($206)) {
          $207 = (($204) + -2|0);
          HEAP32[$0>>2] = $207;
         }
        }
       }
       $208 = (+($sign$0|0));
       $209 = $208 * 0.0;
       $$0 = $209;
       STACKTOP = sp;return (+$$0);
      }
      $210 = ($gotrad$0$i|0)==(0);
      $211 = $210 ? $172 : $212;
      $213 = $210 ? $169 : $214;
      $215 = ($169|0)<(0);
      $216 = ($169|0)==(0);
      $217 = ($172>>>0)<(8);
      $218 = $216 & $217;
      $219 = $215 | $218;
      if ($219) {
       $221 = $172;$222 = $169;$x$313$i = $x$0$i;
       while(1) {
        $220 = $x$313$i << 4;
        $223 = (_i64Add(($221|0),($222|0),1,0)|0);
        $224 = tempRet0;
        $225 = ($224|0)<(0);
        $226 = ($224|0)==(0);
        $227 = ($223>>>0)<(8);
        $228 = $226 & $227;
        $229 = $225 | $228;
        if ($229) {
         $221 = $223;$222 = $224;$x$313$i = $220;
        } else {
         $x$3$lcssa$i = $220;
         break;
        }
       }
      } else {
       $x$3$lcssa$i = $x$0$i;
      }
      $230 = $c$2$lcssa$i | 32;
      $231 = ($230|0)==(112);
      do {
       if ($231) {
        $232 = (_scanexp($f,$pok)|0);
        $233 = tempRet0;
        $234 = ($232|0)==(0);
        $235 = ($233|0)==(-2147483648);
        $236 = $234 & $235;
        if ($236) {
         if ($39) {
          ___shlim($f,0);
          $$0 = 0.0;
          STACKTOP = sp;return (+$$0);
         } else {
          $237 = HEAP32[$1>>2]|0;
          $238 = ($237|0)==(0|0);
          if ($238) {
           $249 = 0;$250 = 0;
           break;
          }
          $239 = HEAP32[$0>>2]|0;
          $240 = (($239) + -1|0);
          HEAP32[$0>>2] = $240;
          $249 = 0;$250 = 0;
          break;
         }
        } else {
         $249 = $232;$250 = $233;
        }
       } else {
        $241 = HEAP32[$1>>2]|0;
        $242 = ($241|0)==(0|0);
        if ($242) {
         $249 = 0;$250 = 0;
        } else {
         $243 = HEAP32[$0>>2]|0;
         $244 = (($243) + -1|0);
         HEAP32[$0>>2] = $244;
         $249 = 0;$250 = 0;
        }
       }
      } while(0);
      $245 = (_bitshift64Shl(($211|0),($213|0),2)|0);
      $246 = tempRet0;
      $247 = (_i64Add(($245|0),($246|0),-32,-1)|0);
      $248 = tempRet0;
      $251 = (_i64Add(($247|0),($248|0),($249|0),($250|0))|0);
      $252 = tempRet0;
      $253 = ($x$3$lcssa$i|0)==(0);
      if ($253) {
       $254 = (+($sign$0|0));
       $255 = $254 * 0.0;
       $$0 = $255;
       STACKTOP = sp;return (+$$0);
      }
      $256 = (0 - ($emin$0$ph))|0;
      $257 = ($252|0)>(0);
      $258 = ($252|0)==(0);
      $259 = ($251>>>0)>($256>>>0);
      $260 = $258 & $259;
      $261 = $257 | $260;
      if ($261) {
       $262 = (___errno_location()|0);
       HEAP32[$262>>2] = 34;
       $263 = (+($sign$0|0));
       $264 = $263 * 1.79769313486231570815E+308;
       $265 = $264 * 1.79769313486231570815E+308;
       $$0 = $265;
       STACKTOP = sp;return (+$$0);
      }
      $266 = (($emin$0$ph) + -106)|0;
      $267 = ($266|0)<(0);
      $268 = $267 << 31 >> 31;
      $269 = ($252|0)<($268|0);
      $270 = ($252|0)==($268|0);
      $271 = ($251>>>0)<($266>>>0);
      $272 = $270 & $271;
      $273 = $269 | $272;
      if ($273) {
       $275 = (___errno_location()|0);
       HEAP32[$275>>2] = 34;
       $276 = (+($sign$0|0));
       $277 = $276 * 2.22507385850720138309E-308;
       $278 = $277 * 2.22507385850720138309E-308;
       $$0 = $278;
       STACKTOP = sp;return (+$$0);
      }
      $274 = ($x$3$lcssa$i|0)>(-1);
      if ($274) {
       $283 = $251;$284 = $252;$x$48$i = $x$3$lcssa$i;$y$39$i = $y$0$i;
       while(1) {
        $279 = !($y$39$i >= 0.5);
        $280 = $x$48$i << 1;
        if ($279) {
         $$pn$i = $y$39$i;$x$5$i = $280;
        } else {
         $281 = $280 | 1;
         $282 = $y$39$i + -1.0;
         $$pn$i = $282;$x$5$i = $281;
        }
        $y$4$i = $y$39$i + $$pn$i;
        $285 = (_i64Add(($283|0),($284|0),-1,-1)|0);
        $286 = tempRet0;
        $287 = ($x$5$i|0)>(-1);
        if ($287) {
         $283 = $285;$284 = $286;$x$48$i = $x$5$i;$y$39$i = $y$4$i;
        } else {
         $292 = $285;$293 = $286;$x$4$lcssa$i = $x$5$i;$y$3$lcssa$i = $y$4$i;
         break;
        }
       }
      } else {
       $292 = $251;$293 = $252;$x$4$lcssa$i = $x$3$lcssa$i;$y$3$lcssa$i = $y$0$i;
      }
      $288 = ($emin$0$ph|0)<(0);
      $289 = $288 << 31 >> 31;
      $290 = (_i64Subtract(32,0,($emin$0$ph|0),($289|0))|0);
      $291 = tempRet0;
      $294 = (_i64Add(($292|0),($293|0),($290|0),($291|0))|0);
      $295 = tempRet0;
      $296 = (0)>($295|0);
      $297 = (0)==($295|0);
      $298 = ($bits$0$ph>>>0)>($294>>>0);
      $299 = $297 & $298;
      $300 = $296 | $299;
      if ($300) {
       $301 = ($294|0)<(0);
       $$$i = $301 ? 0 : $294;
       $$02$i = $$$i;
      } else {
       $$02$i = $bits$0$ph;
      }
      $302 = ($$02$i|0)<(53);
      do {
       if ($302) {
        $303 = (84 - ($$02$i))|0;
        $304 = (+_scalbn(1.0,$303));
        $305 = (+($sign$0|0));
        $306 = (+_copysignl((+$304),(+$305)));
        $307 = ($$02$i|0)<(32);
        $308 = $y$3$lcssa$i != 0.0;
        $or$cond4$i = $307 & $308;
        if (!($or$cond4$i)) {
         $$pre$phi$iZ2D = $305;$bias$07$i = $306;$x$6$i = $x$4$lcssa$i;$y$5$i = $y$3$lcssa$i;
         break;
        }
        $309 = $x$4$lcssa$i & 1;
        $310 = ($309|0)==(0);
        $311 = $309 ^ 1;
        $$x$4$i = (($311) + ($x$4$lcssa$i))|0;
        $$y$3$i = $310 ? 0.0 : $y$3$lcssa$i;
        $$pre$phi$iZ2D = $305;$bias$07$i = $306;$x$6$i = $$x$4$i;$y$5$i = $$y$3$i;
       } else {
        $$pre$i = (+($sign$0|0));
        $$pre$phi$iZ2D = $$pre$i;$bias$07$i = 0.0;$x$6$i = $x$4$lcssa$i;$y$5$i = $y$3$lcssa$i;
       }
      } while(0);
      $312 = (+($x$6$i>>>0));
      $313 = $$pre$phi$iZ2D * $312;
      $314 = $bias$07$i + $313;
      $315 = $$pre$phi$iZ2D * $y$5$i;
      $316 = $315 + $314;
      $317 = $316 - $bias$07$i;
      $318 = $317 != 0.0;
      if (!($318)) {
       $319 = (___errno_location()|0);
       HEAP32[$319>>2] = 34;
      }
      $320 = (+_scalbnl($317,$292));
      $$0 = $320;
      STACKTOP = sp;return (+$$0);
     } else {
      $c$6 = $c$5;
     }
    } while(0);
    $sum$i = (($emin$0$ph) + ($bits$0$ph))|0;
    $325 = (0 - ($sum$i))|0;
    $$08$i = $c$6;$gotdig$0$i9 = 0;
    while(1) {
     if ((($$08$i|0) == 46)) {
      label = 139;
      break;
     } else if (!((($$08$i|0) == 48))) {
      $$2$i = $$08$i;$716 = 0;$717 = 0;$gotdig$2$i11 = $gotdig$0$i9;$gotrad$0$i12 = 0;
      break;
     }
     $326 = HEAP32[$0>>2]|0;
     $327 = HEAP32[$1>>2]|0;
     $328 = ($326>>>0)<($327>>>0);
     if ($328) {
      $329 = (($326) + 1|0);
      HEAP32[$0>>2] = $329;
      $330 = HEAP8[$326>>0]|0;
      $331 = $330&255;
      $$08$i = $331;$gotdig$0$i9 = 1;
      continue;
     } else {
      $332 = (___shgetc($f)|0);
      $$08$i = $332;$gotdig$0$i9 = 1;
      continue;
     }
    }
    L209: do {
     if ((label|0) == 139) {
      $333 = HEAP32[$0>>2]|0;
      $334 = HEAP32[$1>>2]|0;
      $335 = ($333>>>0)<($334>>>0);
      if ($335) {
       $336 = (($333) + 1|0);
       HEAP32[$0>>2] = $336;
       $337 = HEAP8[$333>>0]|0;
       $338 = $337&255;
       $$1$ph$i = $338;
      } else {
       $339 = (___shgetc($f)|0);
       $$1$ph$i = $339;
      }
      $340 = ($$1$ph$i|0)==(48);
      if ($340) {
       $349 = -1;$350 = -1;
       while(1) {
        $341 = HEAP32[$0>>2]|0;
        $342 = HEAP32[$1>>2]|0;
        $343 = ($341>>>0)<($342>>>0);
        if ($343) {
         $344 = (($341) + 1|0);
         HEAP32[$0>>2] = $344;
         $345 = HEAP8[$341>>0]|0;
         $346 = $345&255;
         $$1$be$i = $346;
        } else {
         $347 = (___shgetc($f)|0);
         $$1$be$i = $347;
        }
        $348 = ($$1$be$i|0)==(48);
        if (!($348)) {
         $$2$i = $$1$be$i;$716 = $349;$717 = $350;$gotdig$2$i11 = 1;$gotrad$0$i12 = 1;
         break L209;
        }
        $351 = (_i64Add(($349|0),($350|0),-1,-1)|0);
        $352 = tempRet0;
        $349 = $351;$350 = $352;
       }
      } else {
       $$2$i = $$1$ph$i;$716 = 0;$717 = 0;$gotdig$2$i11 = $gotdig$0$i9;$gotrad$0$i12 = 1;
      }
     }
    } while(0);
    HEAP32[$x$i>>2] = 0;
    $353 = (($$2$i) + -48)|0;
    $354 = ($353>>>0)<(10);
    $355 = ($$2$i|0)==(46);
    $or$cond789$i = $354 | $355;
    L223: do {
     if ($or$cond789$i) {
      $356 = (($x$i) + 496|0);
      $$397$i = $$2$i;$358 = 0;$359 = 0;$718 = $355;$719 = $353;$720 = $716;$721 = $717;$gotdig$393$i = $gotdig$2$i11;$gotrad$194$i = $gotrad$0$i12;$j$096$i = 0;$k$095$i = 0;$lnz$092$i = 0;
      while(1) {
       do {
        if ($718) {
         $cond$i = ($gotrad$194$i|0)==(0);
         if ($cond$i) {
          $722 = $358;$723 = $359;$724 = $358;$725 = $359;$gotdig$4$i = $gotdig$393$i;$gotrad$2$i = 1;$j$2$i = $j$096$i;$k$2$i = $k$095$i;$lnz$2$i = $lnz$092$i;
         } else {
          $$388$i = $$397$i;$405 = $720;$406 = $721;$421 = $358;$424 = $359;$gotdig$381$i = $gotdig$393$i;$j$086$i = $j$096$i;$k$084$i = $k$095$i;$lnz$079$i = $lnz$092$i;
          break L223;
         }
        } else {
         $357 = ($k$095$i|0)<(125);
         $360 = (_i64Add(($358|0),($359|0),1,0)|0);
         $361 = tempRet0;
         $362 = ($$397$i|0)!=(48);
         if (!($357)) {
          if (!($362)) {
           $722 = $720;$723 = $721;$724 = $360;$725 = $361;$gotdig$4$i = $gotdig$393$i;$gotrad$2$i = $gotrad$194$i;$j$2$i = $j$096$i;$k$2$i = $k$095$i;$lnz$2$i = $lnz$092$i;
           break;
          }
          $372 = HEAP32[$356>>2]|0;
          $373 = $372 | 1;
          HEAP32[$356>>2] = $373;
          $722 = $720;$723 = $721;$724 = $360;$725 = $361;$gotdig$4$i = $gotdig$393$i;$gotrad$2$i = $gotrad$194$i;$j$2$i = $j$096$i;$k$2$i = $k$095$i;$lnz$2$i = $lnz$092$i;
          break;
         }
         $$lnz$0$i = $362 ? $360 : $lnz$092$i;
         $363 = ($j$096$i|0)==(0);
         $364 = (($x$i) + ($k$095$i<<2)|0);
         if ($363) {
          $storemerge$i = $719;
         } else {
          $365 = HEAP32[$364>>2]|0;
          $366 = ($365*10)|0;
          $367 = (($$397$i) + -48)|0;
          $368 = (($367) + ($366))|0;
          $storemerge$i = $368;
         }
         HEAP32[$364>>2] = $storemerge$i;
         $369 = (($j$096$i) + 1)|0;
         $370 = ($369|0)==(9);
         $371 = $370&1;
         $$k$0$i = (($371) + ($k$095$i))|0;
         $$10$i = $370 ? 0 : $369;
         $722 = $720;$723 = $721;$724 = $360;$725 = $361;$gotdig$4$i = 1;$gotrad$2$i = $gotrad$194$i;$j$2$i = $$10$i;$k$2$i = $$k$0$i;$lnz$2$i = $$lnz$0$i;
        }
       } while(0);
       $374 = HEAP32[$0>>2]|0;
       $375 = HEAP32[$1>>2]|0;
       $376 = ($374>>>0)<($375>>>0);
       if ($376) {
        $377 = (($374) + 1|0);
        HEAP32[$0>>2] = $377;
        $378 = HEAP8[$374>>0]|0;
        $379 = $378&255;
        $$3$be$i = $379;
       } else {
        $380 = (___shgetc($f)|0);
        $$3$be$i = $380;
       }
       $381 = (($$3$be$i) + -48)|0;
       $382 = ($381>>>0)<(10);
       $383 = ($$3$be$i|0)==(46);
       $or$cond7$i = $382 | $383;
       if ($or$cond7$i) {
        $$397$i = $$3$be$i;$358 = $724;$359 = $725;$718 = $383;$719 = $381;$720 = $722;$721 = $723;$gotdig$393$i = $gotdig$4$i;$gotrad$194$i = $gotrad$2$i;$j$096$i = $j$2$i;$k$095$i = $k$2$i;$lnz$092$i = $lnz$2$i;
       } else {
        $$3$lcssa$i = $$3$be$i;$386 = $724;$387 = $722;$389 = $725;$390 = $723;$gotdig$3$lcssa$i = $gotdig$4$i;$gotrad$1$lcssa$i = $gotrad$2$i;$j$0$lcssa$i = $j$2$i;$k$0$lcssa$i = $k$2$i;$lnz$0$lcssa$i = $lnz$2$i;
        label = 162;
        break;
       }
      }
     } else {
      $$3$lcssa$i = $$2$i;$386 = 0;$387 = $716;$389 = 0;$390 = $717;$gotdig$3$lcssa$i = $gotdig$2$i11;$gotrad$1$lcssa$i = $gotrad$0$i12;$j$0$lcssa$i = 0;$k$0$lcssa$i = 0;$lnz$0$lcssa$i = 0;
      label = 162;
     }
    } while(0);
    if ((label|0) == 162) {
     $384 = ($gotrad$1$lcssa$i|0)==(0);
     $385 = $384 ? $386 : $387;
     $388 = $384 ? $389 : $390;
     $$388$i = $$3$lcssa$i;$405 = $385;$406 = $388;$421 = $386;$424 = $389;$gotdig$381$i = $gotdig$3$lcssa$i;$j$086$i = $j$0$lcssa$i;$k$084$i = $k$0$lcssa$i;$lnz$079$i = $lnz$0$lcssa$i;
    }
    $391 = ($gotdig$381$i|0)!=(0);
    if ($391) {
     $392 = $$388$i | 32;
     $393 = ($392|0)==(101);
     if ($393) {
      $394 = (_scanexp($f,$pok)|0);
      $395 = tempRet0;
      $396 = ($394|0)==(0);
      $397 = ($395|0)==(-2147483648);
      $398 = $396 & $397;
      do {
       if ($398) {
        if ($39) {
         ___shlim($f,0);
         $$0 = 0.0;
         STACKTOP = sp;return (+$$0);
        } else {
         $399 = HEAP32[$1>>2]|0;
         $400 = ($399|0)==(0|0);
         if ($400) {
          $403 = 0;$404 = 0;
          break;
         }
         $401 = HEAP32[$0>>2]|0;
         $402 = (($401) + -1|0);
         HEAP32[$0>>2] = $402;
         $403 = 0;$404 = 0;
         break;
        }
       } else {
        $403 = $394;$404 = $395;
       }
      } while(0);
      $407 = (_i64Add(($403|0),($404|0),($405|0),($406|0))|0);
      $408 = tempRet0;
      $420 = $407;$423 = $408;
     } else {
      label = 171;
     }
    } else {
     label = 171;
    }
    if ((label|0) == 171) {
     $409 = ($$388$i|0)>(-1);
     if ($409) {
      $410 = HEAP32[$1>>2]|0;
      $411 = ($410|0)==(0|0);
      if ($411) {
       $420 = $405;$423 = $406;
      } else {
       $412 = HEAP32[$0>>2]|0;
       $413 = (($412) + -1|0);
       HEAP32[$0>>2] = $413;
       $420 = $405;$423 = $406;
      }
     } else {
      $420 = $405;$423 = $406;
     }
    }
    if (!($391)) {
     $414 = (___errno_location()|0);
     HEAP32[$414>>2] = 22;
     ___shlim($f,0);
     $$0 = 0.0;
     STACKTOP = sp;return (+$$0);
    }
    $415 = HEAP32[$x$i>>2]|0;
    $416 = ($415|0)==(0);
    if ($416) {
     $417 = (+($sign$0|0));
     $418 = $417 * 0.0;
     $$0 = $418;
     STACKTOP = sp;return (+$$0);
    }
    $419 = ($420|0)==($421|0);
    $422 = ($423|0)==($424|0);
    $425 = $419 & $422;
    $426 = ($424|0)<(0);
    $427 = ($424|0)==(0);
    $428 = ($421>>>0)<(10);
    $429 = $427 & $428;
    $430 = $426 | $429;
    $or$cond$i15 = $425 & $430;
    do {
     if ($or$cond$i15) {
      $431 = ($bits$0$ph>>>0)>(30);
      if (!($431)) {
       $432 = $415 >>> $bits$0$ph;
       $433 = ($432|0)==(0);
       if (!($433)) {
        break;
       }
      }
      $434 = (+($sign$0|0));
      $435 = (+($415>>>0));
      $436 = $434 * $435;
      $$0 = $436;
      STACKTOP = sp;return (+$$0);
     }
    } while(0);
    $437 = (($emin$0$ph|0) / -2)&-1;
    $438 = ($437|0)<(0);
    $439 = $438 << 31 >> 31;
    $440 = ($423|0)>($439|0);
    $441 = ($423|0)==($439|0);
    $442 = ($420>>>0)>($437>>>0);
    $443 = $441 & $442;
    $444 = $440 | $443;
    if ($444) {
     $445 = (___errno_location()|0);
     HEAP32[$445>>2] = 34;
     $446 = (+($sign$0|0));
     $447 = $446 * 1.79769313486231570815E+308;
     $448 = $447 * 1.79769313486231570815E+308;
     $$0 = $448;
     STACKTOP = sp;return (+$$0);
    }
    $449 = (($emin$0$ph) + -106)|0;
    $450 = ($449|0)<(0);
    $451 = $450 << 31 >> 31;
    $452 = ($423|0)<($451|0);
    $453 = ($423|0)==($451|0);
    $454 = ($420>>>0)<($449>>>0);
    $455 = $453 & $454;
    $456 = $452 | $455;
    if ($456) {
     $457 = (___errno_location()|0);
     HEAP32[$457>>2] = 34;
     $458 = (+($sign$0|0));
     $459 = $458 * 2.22507385850720138309E-308;
     $460 = $459 * 2.22507385850720138309E-308;
     $$0 = $460;
     STACKTOP = sp;return (+$$0);
    }
    $461 = ($j$086$i|0)==(0);
    if ($461) {
     $k$3$i = $k$084$i;
    } else {
     $462 = ($j$086$i|0)<(9);
     if ($462) {
      $463 = (($x$i) + ($k$084$i<<2)|0);
      $$promoted$i = HEAP32[$463>>2]|0;
      $465 = $$promoted$i;$j$371$i = $j$086$i;
      while(1) {
       $464 = ($465*10)|0;
       $466 = (($j$371$i) + 1)|0;
       $exitcond$i = ($466|0)==(9);
       if ($exitcond$i) {
        break;
       } else {
        $465 = $464;$j$371$i = $466;
       }
      }
      HEAP32[$463>>2] = $464;
     }
     $467 = (($k$084$i) + 1)|0;
     $k$3$i = $467;
    }
    $468 = ($lnz$079$i|0)<(9);
    do {
     if ($468) {
      $469 = ($lnz$079$i|0)<=($420|0);
      $470 = ($420|0)<(18);
      $or$cond3$i16 = $469 & $470;
      if ($or$cond3$i16) {
       $471 = ($420|0)==(9);
       if ($471) {
        $472 = (+($sign$0|0));
        $473 = HEAP32[$x$i>>2]|0;
        $474 = (+($473>>>0));
        $475 = $472 * $474;
        $$0 = $475;
        STACKTOP = sp;return (+$$0);
       }
       $476 = ($420|0)<(9);
       if ($476) {
        $477 = (+($sign$0|0));
        $478 = HEAP32[$x$i>>2]|0;
        $479 = (+($478>>>0));
        $480 = $477 * $479;
        $481 = (8 - ($420))|0;
        $482 = (30968 + ($481<<2)|0);
        $483 = HEAP32[$482>>2]|0;
        $484 = (+($483|0));
        $485 = $480 / $484;
        $$0 = $485;
        STACKTOP = sp;return (+$$0);
       }
       $486 = Math_imul($420, -3)|0;
       $$neg20$i = (($bits$0$ph) + 27)|0;
       $487 = (($$neg20$i) + ($486))|0;
       $488 = ($487|0)>(30);
       $$pre$i17 = HEAP32[$x$i>>2]|0;
       if (!($488)) {
        $489 = $$pre$i17 >>> $487;
        $490 = ($489|0)==(0);
        if (!($490)) {
         break;
        }
       }
       $491 = (+($sign$0|0));
       $492 = (+($$pre$i17>>>0));
       $493 = $491 * $492;
       $494 = (($420) + -10)|0;
       $495 = (30968 + ($494<<2)|0);
       $496 = HEAP32[$495>>2]|0;
       $497 = (+($496|0));
       $498 = $493 * $497;
       $$0 = $498;
       STACKTOP = sp;return (+$$0);
      }
     }
    } while(0);
    $499 = (($420|0) % 9)&-1;
    $500 = ($499|0)==(0);
    if ($500) {
     $a$2$ph40$i = 0;$e2$0$ph$i = 0;$rp$2$ph38$i = $420;$z$1$ph39$i = $k$3$i;
    } else {
     $501 = ($420|0)>(-1);
     $502 = (($499) + 9)|0;
     $503 = $501 ? $499 : $502;
     $504 = (8 - ($503))|0;
     $505 = (30968 + ($504<<2)|0);
     $506 = HEAP32[$505>>2]|0;
     $507 = ($k$3$i|0)==(0);
     if ($507) {
      $a$0$lcssa161$i = 0;$rp$0$lcssa162$i = $420;$z$0$i = 0;
     } else {
      $508 = (1000000000 / ($506|0))&-1;
      $a$061$i = 0;$carry$063$i = 0;$k$462$i = 0;$rp$060$i = $420;
      while(1) {
       $509 = (($x$i) + ($k$462$i<<2)|0);
       $510 = HEAP32[$509>>2]|0;
       $511 = (($510>>>0) % ($506>>>0))&-1;
       $512 = (($510>>>0) / ($506>>>0))&-1;
       $513 = (($512) + ($carry$063$i))|0;
       HEAP32[$509>>2] = $513;
       $514 = Math_imul($511, $508)|0;
       $515 = ($k$462$i|0)==($a$061$i|0);
       $516 = ($513|0)==(0);
       $or$cond11$i = $515 & $516;
       $517 = (($k$462$i) + 1)|0;
       if ($or$cond11$i) {
        $518 = $517 & 127;
        $519 = (($rp$060$i) + -9)|0;
        $a$1$i = $518;$rp$1$i18 = $519;
       } else {
        $a$1$i = $a$061$i;$rp$1$i18 = $rp$060$i;
       }
       $520 = ($517|0)==($k$3$i|0);
       if ($520) {
        break;
       } else {
        $a$061$i = $a$1$i;$carry$063$i = $514;$k$462$i = $517;$rp$060$i = $rp$1$i18;
       }
      }
      $521 = ($514|0)==(0);
      if ($521) {
       $a$0$lcssa161$i = $a$1$i;$rp$0$lcssa162$i = $rp$1$i18;$z$0$i = $k$3$i;
      } else {
       $522 = (($k$3$i) + 1)|0;
       $523 = (($x$i) + ($k$3$i<<2)|0);
       HEAP32[$523>>2] = $514;
       $a$0$lcssa161$i = $a$1$i;$rp$0$lcssa162$i = $rp$1$i18;$z$0$i = $522;
      }
     }
     $524 = (9 - ($503))|0;
     $525 = (($524) + ($rp$0$lcssa162$i))|0;
     $a$2$ph40$i = $a$0$lcssa161$i;$e2$0$ph$i = 0;$rp$2$ph38$i = $525;$z$1$ph39$i = $z$0$i;
    }
    L321: while(1) {
     $526 = ($rp$2$ph38$i|0)<(18);
     $527 = (($x$i) + ($a$2$ph40$i<<2)|0);
     if ($526) {
      $e2$0$us$i = $e2$0$ph$i;$z$1$us$i = $z$1$ph39$i;
      while(1) {
       $529 = (($z$1$us$i) + 127)|0;
       $carry1$0$us$i = 0;$k$5$in$us$i = $529;$z$2$us$i = $z$1$us$i;
       while(1) {
        $k$5$us$i = $k$5$in$us$i & 127;
        $530 = (($x$i) + ($k$5$us$i<<2)|0);
        $531 = HEAP32[$530>>2]|0;
        $532 = (_bitshift64Shl(($531|0),0,29)|0);
        $533 = tempRet0;
        $534 = (_i64Add(($532|0),($533|0),($carry1$0$us$i|0),0)|0);
        $535 = tempRet0;
        $536 = ($535>>>0)>(0);
        $537 = ($535|0)==(0);
        $538 = ($534>>>0)>(1000000000);
        $539 = $537 & $538;
        $540 = $536 | $539;
        if ($540) {
         $541 = (___udivdi3(($534|0),($535|0),1000000000,0)|0);
         $542 = tempRet0;
         $543 = (___uremdi3(($534|0),($535|0),1000000000,0)|0);
         $544 = tempRet0;
         $$sink$off0$us$i = $543;$carry1$1$us$i = $541;
        } else {
         $$sink$off0$us$i = $534;$carry1$1$us$i = 0;
        }
        HEAP32[$530>>2] = $$sink$off0$us$i;
        $545 = (($z$2$us$i) + 127)|0;
        $546 = $545 & 127;
        $547 = ($k$5$us$i|0)!=($546|0);
        $548 = ($k$5$us$i|0)==($a$2$ph40$i|0);
        $or$cond12$us$i = $547 | $548;
        if ($or$cond12$us$i) {
         $z$3$us$i = $z$2$us$i;
        } else {
         $549 = ($$sink$off0$us$i|0)==(0);
         $k$5$z$2$us$i = $549 ? $k$5$us$i : $z$2$us$i;
         $z$3$us$i = $k$5$z$2$us$i;
        }
        $550 = (($k$5$us$i) + -1)|0;
        if ($548) {
         break;
        } else {
         $carry1$0$us$i = $carry1$1$us$i;$k$5$in$us$i = $550;$z$2$us$i = $z$3$us$i;
        }
       }
       $551 = (($e2$0$us$i) + -29)|0;
       $552 = ($carry1$1$us$i|0)==(0);
       if ($552) {
        $e2$0$us$i = $551;$z$1$us$i = $z$3$us$i;
       } else {
        $$lcssa43$i = $551;$carry1$1$lcssa$lcssa$i = $carry1$1$us$i;$z$3$lcssa$lcssa$i = $z$3$us$i;
        break;
       }
      }
     } else {
      $528 = ($rp$2$ph38$i|0)==(18);
      if ($528) {
       $e2$0$us44$i = $e2$0$ph$i;$z$1$us45$i = $z$1$ph39$i;
      } else {
       $a$3$ph$i = $a$2$ph40$i;$e2$1$ph$i = $e2$0$ph$i;$rp$3$ph33$i = $rp$2$ph38$i;$z$5$ph$i = $z$1$ph39$i;
       break;
      }
      while(1) {
       $553 = HEAP32[$527>>2]|0;
       $554 = ($553>>>0)<(9007199);
       if (!($554)) {
        $a$3$ph$i = $a$2$ph40$i;$e2$1$ph$i = $e2$0$us44$i;$rp$3$ph33$i = 18;$z$5$ph$i = $z$1$us45$i;
        break L321;
       }
       $555 = (($z$1$us45$i) + 127)|0;
       $carry1$0$us49$i = 0;$k$5$in$us48$i = $555;$z$2$us47$i = $z$1$us45$i;
       while(1) {
        $k$5$us50$i = $k$5$in$us48$i & 127;
        $556 = (($x$i) + ($k$5$us50$i<<2)|0);
        $557 = HEAP32[$556>>2]|0;
        $558 = (_bitshift64Shl(($557|0),0,29)|0);
        $559 = tempRet0;
        $560 = (_i64Add(($558|0),($559|0),($carry1$0$us49$i|0),0)|0);
        $561 = tempRet0;
        $562 = ($561>>>0)>(0);
        $563 = ($561|0)==(0);
        $564 = ($560>>>0)>(1000000000);
        $565 = $563 & $564;
        $566 = $562 | $565;
        if ($566) {
         $567 = (___udivdi3(($560|0),($561|0),1000000000,0)|0);
         $568 = tempRet0;
         $569 = (___uremdi3(($560|0),($561|0),1000000000,0)|0);
         $570 = tempRet0;
         $$sink$off0$us53$i = $569;$carry1$1$us54$i = $567;
        } else {
         $$sink$off0$us53$i = $560;$carry1$1$us54$i = 0;
        }
        HEAP32[$556>>2] = $$sink$off0$us53$i;
        $571 = (($z$2$us47$i) + 127)|0;
        $572 = $571 & 127;
        $573 = ($k$5$us50$i|0)!=($572|0);
        $574 = ($k$5$us50$i|0)==($a$2$ph40$i|0);
        $or$cond12$us55$i = $573 | $574;
        if ($or$cond12$us55$i) {
         $z$3$us57$i = $z$2$us47$i;
        } else {
         $575 = ($$sink$off0$us53$i|0)==(0);
         $k$5$z$2$us56$i = $575 ? $k$5$us50$i : $z$2$us47$i;
         $z$3$us57$i = $k$5$z$2$us56$i;
        }
        $576 = (($k$5$us50$i) + -1)|0;
        if ($574) {
         break;
        } else {
         $carry1$0$us49$i = $carry1$1$us54$i;$k$5$in$us48$i = $576;$z$2$us47$i = $z$3$us57$i;
        }
       }
       $577 = (($e2$0$us44$i) + -29)|0;
       $578 = ($carry1$1$us54$i|0)==(0);
       if ($578) {
        $e2$0$us44$i = $577;$z$1$us45$i = $z$3$us57$i;
       } else {
        $$lcssa43$i = $577;$carry1$1$lcssa$lcssa$i = $carry1$1$us54$i;$z$3$lcssa$lcssa$i = $z$3$us57$i;
        break;
       }
      }
     }
     $579 = (($rp$2$ph38$i) + 9)|0;
     $580 = (($a$2$ph40$i) + 127)|0;
     $581 = $580 & 127;
     $582 = ($581|0)==($z$3$lcssa$lcssa$i|0);
     if ($582) {
      $583 = (($z$3$lcssa$lcssa$i) + 127)|0;
      $584 = $583 & 127;
      $585 = (($x$i) + ($584<<2)|0);
      $586 = HEAP32[$585>>2]|0;
      $587 = (($z$3$lcssa$lcssa$i) + 126)|0;
      $588 = $587 & 127;
      $589 = (($x$i) + ($588<<2)|0);
      $590 = HEAP32[$589>>2]|0;
      $591 = $590 | $586;
      HEAP32[$589>>2] = $591;
      $z$4$i = $584;
     } else {
      $z$4$i = $z$3$lcssa$lcssa$i;
     }
     $592 = (($x$i) + ($581<<2)|0);
     HEAP32[$592>>2] = $carry1$1$lcssa$lcssa$i;
     $a$2$ph40$i = $581;$e2$0$ph$i = $$lcssa43$i;$rp$2$ph38$i = $579;$z$1$ph39$i = $z$4$i;
    }
    L352: while(1) {
     $629 = (($z$5$ph$i) + 1)|0;
     $627 = $629 & 127;
     $630 = (($z$5$ph$i) + 127)|0;
     $631 = $630 & 127;
     $632 = (($x$i) + ($631<<2)|0);
     $a$3$i$ph = $a$3$ph$i;$e2$1$i$ph = $e2$1$ph$i;$rp$3$i$ph = $rp$3$ph33$i;
     while(1) {
      $605 = ($rp$3$i$ph|0)==(18);
      $633 = ($rp$3$i$ph|0)>(27);
      $$14$i = $633 ? 9 : 1;
      $a$3$i = $a$3$i$ph;$e2$1$i = $e2$1$i$ph;
      while(1) {
       $i$025$i = 0;
       while(1) {
        $595 = (($i$025$i) + ($a$3$i))|0;
        $596 = $595 & 127;
        $597 = ($596|0)==($z$5$ph$i|0);
        if ($597) {
         $i$1$i = 2;
         break;
        }
        $598 = (($x$i) + ($596<<2)|0);
        $599 = HEAP32[$598>>2]|0;
        $600 = (30960 + ($i$025$i<<2)|0);
        $601 = HEAP32[$600>>2]|0;
        $602 = ($599>>>0)<($601>>>0);
        if ($602) {
         $i$1$i = 2;
         break;
        }
        $603 = ($599>>>0)>($601>>>0);
        $594 = (($i$025$i) + 1)|0;
        if ($603) {
         $i$1$i = $i$025$i;
         break;
        }
        $593 = ($594|0)<(2);
        if ($593) {
         $i$025$i = $594;
        } else {
         $i$1$i = $594;
         break;
        }
       }
       $604 = ($i$1$i|0)==(2);
       $or$cond13$i = $604 & $605;
       if ($or$cond13$i) {
        break L352;
       }
       $608 = (($$14$i) + ($e2$1$i))|0;
       $609 = ($a$3$i|0)==($z$5$ph$i|0);
       if ($609) {
        $a$3$i = $z$5$ph$i;$e2$1$i = $608;
       } else {
        break;
       }
      }
      $610 = 1 << $$14$i;
      $611 = (($610) + -1)|0;
      $612 = 1000000000 >>> $$14$i;
      $a$427$i = $a$3$i;$carry3$030$i = 0;$k$628$i = $a$3$i;$rp$426$i = $rp$3$i$ph;
      while(1) {
       $613 = (($x$i) + ($k$628$i<<2)|0);
       $614 = HEAP32[$613>>2]|0;
       $615 = $614 & $611;
       $616 = $614 >>> $$14$i;
       $617 = (($616) + ($carry3$030$i))|0;
       HEAP32[$613>>2] = $617;
       $618 = Math_imul($615, $612)|0;
       $619 = ($k$628$i|0)==($a$427$i|0);
       $620 = ($617|0)==(0);
       $or$cond15$i = $619 & $620;
       $621 = (($k$628$i) + 1)|0;
       $622 = $621 & 127;
       $623 = (($rp$426$i) + -9)|0;
       $rp$5$i = $or$cond15$i ? $623 : $rp$426$i;
       $a$5$i = $or$cond15$i ? $622 : $a$427$i;
       $624 = ($622|0)==($z$5$ph$i|0);
       if ($624) {
        break;
       } else {
        $a$427$i = $a$5$i;$carry3$030$i = $618;$k$628$i = $622;$rp$426$i = $rp$5$i;
       }
      }
      $625 = ($618|0)==(0);
      if ($625) {
       $a$3$i$ph = $a$5$i;$e2$1$i$ph = $608;$rp$3$i$ph = $rp$5$i;
       continue;
      }
      $626 = ($627|0)==($a$5$i|0);
      if (!($626)) {
       break;
      }
      $634 = HEAP32[$632>>2]|0;
      $635 = $634 | 1;
      HEAP32[$632>>2] = $635;
      $a$3$i$ph = $a$5$i;$e2$1$i$ph = $608;$rp$3$i$ph = $rp$5$i;
     }
     $628 = (($x$i) + ($z$5$ph$i<<2)|0);
     HEAP32[$628>>2] = $618;
     $a$3$ph$i = $a$5$i;$e2$1$ph$i = $608;$rp$3$ph33$i = $rp$5$i;$z$5$ph$i = $627;
    }
    $606 = $a$3$i & 127;
    $607 = ($606|0)==($z$5$ph$i|0);
    if ($607) {
     $636 = (($627) + -1)|0;
     $637 = (($x$i) + ($636<<2)|0);
     HEAP32[$637>>2] = 0;
     $z$7$i = $627;
    } else {
     $z$7$i = $z$5$ph$i;
    }
    $638 = (($x$i) + ($606<<2)|0);
    $639 = HEAP32[$638>>2]|0;
    $640 = (+($639>>>0));
    $641 = (($a$3$i) + 1)|0;
    $642 = $641 & 127;
    $643 = ($642|0)==($z$7$i|0);
    if ($643) {
     $702 = (($z$7$i) + 1)|0;
     $703 = $702 & 127;
     $704 = (($703) + -1)|0;
     $705 = (($x$i) + ($704<<2)|0);
     HEAP32[$705>>2] = 0;
     $z$7$1$i = $703;
    } else {
     $z$7$1$i = $z$7$i;
    }
    $706 = $640 * 1.0E+9;
    $707 = (($x$i) + ($642<<2)|0);
    $708 = HEAP32[$707>>2]|0;
    $709 = (+($708>>>0));
    $710 = $706 + $709;
    $667 = (+($sign$0|0));
    $649 = $667 * $710;
    $687 = (($e2$1$i) + 53)|0;
    $645 = (($687) - ($emin$0$ph))|0;
    $711 = ($645|0)<($bits$0$ph|0);
    if ($711) {
     $644 = ($645|0)<(0);
     $$$i22 = $644 ? 0 : $645;
     $$09$i = $$$i22;$denormal$0$i = 1;
    } else {
     $$09$i = $bits$0$ph;$denormal$0$i = 0;
    }
    $646 = ($$09$i|0)<(53);
    if ($646) {
     $647 = (105 - ($$09$i))|0;
     $648 = (+_scalbn(1.0,$647));
     $650 = (+_copysignl((+$648),(+$649)));
     $651 = (53 - ($$09$i))|0;
     $652 = (+_scalbn(1.0,$651));
     $653 = (+_fmodl((+$649),(+$652)));
     $654 = $649 - $653;
     $655 = $650 + $654;
     $bias$0$i = $650;$frac$0$i = $653;$y$1$i23 = $655;
    } else {
     $bias$0$i = 0.0;$frac$0$i = 0.0;$y$1$i23 = $649;
    }
    $656 = (($a$3$i) + 2)|0;
    $657 = $656 & 127;
    $658 = ($657|0)==($z$7$1$i|0);
    do {
     if ($658) {
      $frac$2$i = $frac$0$i;
     } else {
      $659 = (($x$i) + ($657<<2)|0);
      $660 = HEAP32[$659>>2]|0;
      $661 = ($660>>>0)<(500000000);
      do {
       if ($661) {
        $662 = ($660|0)==(0);
        if ($662) {
         $663 = (($a$3$i) + 3)|0;
         $664 = $663 & 127;
         $665 = ($664|0)==($z$7$1$i|0);
         if ($665) {
          $frac$1$i = $frac$0$i;
          break;
         }
        }
        $666 = $667 * 0.25;
        $668 = $666 + $frac$0$i;
        $frac$1$i = $668;
       } else {
        $669 = ($660>>>0)>(500000000);
        if ($669) {
         $670 = $667 * 0.75;
         $671 = $670 + $frac$0$i;
         $frac$1$i = $671;
         break;
        }
        $672 = (($a$3$i) + 3)|0;
        $673 = $672 & 127;
        $674 = ($673|0)==($z$7$1$i|0);
        if ($674) {
         $675 = $667 * 0.5;
         $676 = $675 + $frac$0$i;
         $frac$1$i = $676;
         break;
        } else {
         $677 = $667 * 0.75;
         $678 = $677 + $frac$0$i;
         $frac$1$i = $678;
         break;
        }
       }
      } while(0);
      $679 = (53 - ($$09$i))|0;
      $680 = ($679|0)>(1);
      if (!($680)) {
       $frac$2$i = $frac$1$i;
       break;
      }
      $681 = (+_fmodl((+$frac$1$i),1.0));
      $682 = $681 != 0.0;
      if ($682) {
       $frac$2$i = $frac$1$i;
       break;
      }
      $683 = $frac$1$i + 1.0;
      $frac$2$i = $683;
     }
    } while(0);
    $684 = $y$1$i23 + $frac$2$i;
    $685 = $684 - $bias$0$i;
    $686 = $687 & 2147483647;
    $688 = (-2 - ($sum$i))|0;
    $689 = ($686|0)>($688|0);
    do {
     if ($689) {
      $690 = (+Math_abs((+$685)));
      $691 = !($690 >= 9007199254740992.0);
      if ($691) {
       $denormal$2$i = $denormal$0$i;$e2$2$i = $e2$1$i;$y$2$i24 = $685;
      } else {
       $692 = ($denormal$0$i|0)!=(0);
       $693 = ($$09$i|0)==($645|0);
       $or$cond16$i = $692 & $693;
       $denormal$1$i = $or$cond16$i ? 0 : $denormal$0$i;
       $694 = $685 * 0.5;
       $695 = (($e2$1$i) + 1)|0;
       $denormal$2$i = $denormal$1$i;$e2$2$i = $695;$y$2$i24 = $694;
      }
      $696 = (($e2$2$i) + 50)|0;
      $697 = ($696|0)>($325|0);
      if (!($697)) {
       $698 = ($denormal$2$i|0)!=(0);
       $699 = $frac$2$i != 0.0;
       $or$cond17$i = $698 & $699;
       if (!($or$cond17$i)) {
        $e2$3$i = $e2$2$i;$y$3$i = $y$2$i24;
        break;
       }
      }
      $700 = (___errno_location()|0);
      HEAP32[$700>>2] = 34;
      $e2$3$i = $e2$2$i;$y$3$i = $y$2$i24;
     } else {
      $e2$3$i = $e2$1$i;$y$3$i = $685;
     }
    } while(0);
    $701 = (+_scalbnl($y$3$i,$e2$3$i));
    $$0 = $701;
    STACKTOP = sp;return (+$$0);
   } else {
    $108 = HEAP32[$1>>2]|0;
    $109 = ($108|0)==(0|0);
    if (!($109)) {
     $110 = HEAP32[$0>>2]|0;
     $111 = (($110) + -1|0);
     HEAP32[$0>>2] = $111;
    }
    $112 = (___errno_location()|0);
    HEAP32[$112>>2] = 22;
    ___shlim($f,0);
    $$0 = 0.0;
    STACKTOP = sp;return (+$$0);
   }
  }
 } while(0);
 if ((label|0) == 23) {
  $41 = HEAP32[$1>>2]|0;
  $42 = ($41|0)==(0|0);
  if (!($42)) {
   $43 = HEAP32[$0>>2]|0;
   $44 = (($43) + -1|0);
   HEAP32[$0>>2] = $44;
  }
  $notlhs = ($pok|0)==(0);
  $notrhs = ($i$0$lcssa>>>0)<(4);
  $or$cond106$not = $notrhs | $notlhs;
  $brmerge = $or$cond106$not | $42;
  if (!($brmerge)) {
   $i$166 = $i$0$lcssa;
   while(1) {
    $45 = HEAP32[$0>>2]|0;
    $46 = (($45) + -1|0);
    HEAP32[$0>>2] = $46;
    $47 = (($i$166) + -1)|0;
    $48 = ($47>>>0)>(3);
    if ($48) {
     $i$166 = $47;
    } else {
     break;
    }
   }
  }
 }
 $49 = (+($sign$0|0));
 $50 = $49 * inf;
 $51 = $50;
 $$0 = $51;
 STACKTOP = sp;return (+$$0);
}
function _scanexp($f,$pok) {
 $f = $f|0;
 $pok = $pok|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $c$0 = 0, $c$1$be = 0;
 var $c$18 = 0, $c$2$be = 0, $c$2$lcssa = 0, $c$23 = 0, $c$3$be = 0, $neg$0 = 0, $or$cond = 0, $or$cond2 = 0, $phitmp16 = 0, $x$09 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($f) + 100|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)<($3>>>0);
 if ($4) {
  $5 = (($1) + 1|0);
  HEAP32[$0>>2] = $5;
  $6 = HEAP8[$1>>0]|0;
  $7 = $6&255;
  $10 = $7;
 } else {
  $8 = (___shgetc($f)|0);
  $10 = $8;
 }
 $9 = ($10|0)==(45);
 if ((($10|0) == 43) | (($10|0) == 45)) {
  $11 = $9&1;
  $12 = HEAP32[$0>>2]|0;
  $13 = HEAP32[$2>>2]|0;
  $14 = ($12>>>0)<($13>>>0);
  if ($14) {
   $15 = (($12) + 1|0);
   HEAP32[$0>>2] = $15;
   $16 = HEAP8[$12>>0]|0;
   $17 = $16&255;
   $20 = $17;
  } else {
   $18 = (___shgetc($f)|0);
   $20 = $18;
  }
  $19 = (($20) + -48)|0;
  $21 = ($19>>>0)<(10);
  $22 = ($pok|0)==(0);
  $or$cond = $21 | $22;
  if ($or$cond) {
   $c$0 = $20;$neg$0 = $11;
  } else {
   $23 = HEAP32[$2>>2]|0;
   $24 = ($23|0)==(0|0);
   if ($24) {
    $c$0 = $20;$neg$0 = $11;
   } else {
    $25 = HEAP32[$0>>2]|0;
    $26 = (($25) + -1|0);
    HEAP32[$0>>2] = $26;
    $c$0 = $20;$neg$0 = $11;
   }
  }
 } else {
  $c$0 = $10;$neg$0 = 0;
 }
 $27 = (($c$0) + -48)|0;
 $28 = ($27>>>0)>(9);
 if ($28) {
  $29 = HEAP32[$2>>2]|0;
  $30 = ($29|0)==(0|0);
  if ($30) {
   $95 = -2147483648;$96 = 0;
   tempRet0 = $95;
   STACKTOP = sp;return ($96|0);
  }
  $31 = HEAP32[$0>>2]|0;
  $32 = (($31) + -1|0);
  HEAP32[$0>>2] = $32;
  $95 = -2147483648;$96 = 0;
  tempRet0 = $95;
  STACKTOP = sp;return ($96|0);
 } else {
  $c$18 = $c$0;$x$09 = 0;
 }
 while(1) {
  $33 = (($c$18) + -48)|0;
  $34 = (($33) + ($x$09))|0;
  $35 = HEAP32[$0>>2]|0;
  $36 = HEAP32[$2>>2]|0;
  $37 = ($35>>>0)<($36>>>0);
  if ($37) {
   $38 = (($35) + 1|0);
   HEAP32[$0>>2] = $38;
   $39 = HEAP8[$35>>0]|0;
   $40 = $39&255;
   $c$1$be = $40;
  } else {
   $41 = (___shgetc($f)|0);
   $c$1$be = $41;
  }
  $42 = (($c$1$be) + -48)|0;
  $43 = ($42>>>0)<(10);
  $44 = ($34|0)<(214748364);
  $$ = $43 & $44;
  if (!($$)) {
   break;
  }
  $phitmp16 = ($34*10)|0;
  $c$18 = $c$1$be;$x$09 = $phitmp16;
 }
 $45 = ($34|0)<(0);
 $46 = $45 << 31 >> 31;
 $47 = (($c$1$be) + -48)|0;
 $48 = ($47>>>0)<(10);
 if ($48) {
  $51 = $34;$52 = $46;$c$23 = $c$1$be;
  while(1) {
   $53 = (___muldi3(($51|0),($52|0),10,0)|0);
   $54 = tempRet0;
   $55 = ($c$23|0)<(0);
   $56 = $55 << 31 >> 31;
   $57 = (_i64Add(($c$23|0),($56|0),-48,-1)|0);
   $58 = tempRet0;
   $59 = (_i64Add(($57|0),($58|0),($53|0),($54|0))|0);
   $60 = tempRet0;
   $61 = HEAP32[$0>>2]|0;
   $62 = HEAP32[$2>>2]|0;
   $63 = ($61>>>0)<($62>>>0);
   if ($63) {
    $64 = (($61) + 1|0);
    HEAP32[$0>>2] = $64;
    $65 = HEAP8[$61>>0]|0;
    $66 = $65&255;
    $c$2$be = $66;
   } else {
    $67 = (___shgetc($f)|0);
    $c$2$be = $67;
   }
   $68 = (($c$2$be) + -48)|0;
   $69 = ($68>>>0)<(10);
   $70 = ($60|0)<(21474836);
   $71 = ($60|0)==(21474836);
   $72 = ($59>>>0)<(2061584302);
   $73 = $71 & $72;
   $74 = $70 | $73;
   $or$cond2 = $69 & $74;
   if ($or$cond2) {
    $51 = $59;$52 = $60;$c$23 = $c$2$be;
   } else {
    $89 = $59;$90 = $60;$c$2$lcssa = $c$2$be;
    break;
   }
  }
 } else {
  $89 = $34;$90 = $46;$c$2$lcssa = $c$1$be;
 }
 $49 = (($c$2$lcssa) + -48)|0;
 $50 = ($49>>>0)<(10);
 if ($50) {
  while(1) {
   $75 = HEAP32[$0>>2]|0;
   $76 = HEAP32[$2>>2]|0;
   $77 = ($75>>>0)<($76>>>0);
   if ($77) {
    $78 = (($75) + 1|0);
    HEAP32[$0>>2] = $78;
    $79 = HEAP8[$75>>0]|0;
    $80 = $79&255;
    $c$3$be = $80;
   } else {
    $81 = (___shgetc($f)|0);
    $c$3$be = $81;
   }
   $82 = (($c$3$be) + -48)|0;
   $83 = ($82>>>0)<(10);
   if (!($83)) {
    break;
   }
  }
 }
 $84 = HEAP32[$2>>2]|0;
 $85 = ($84|0)==(0|0);
 if (!($85)) {
  $86 = HEAP32[$0>>2]|0;
  $87 = (($86) + -1|0);
  HEAP32[$0>>2] = $87;
 }
 $88 = ($neg$0|0)!=(0);
 $91 = (_i64Subtract(0,0,($89|0),($90|0))|0);
 $92 = tempRet0;
 $93 = $88 ? $91 : $89;
 $94 = $88 ? $92 : $90;
 $95 = $94;$96 = $93;
 tempRet0 = $95;
 STACKTOP = sp;return ($96|0);
}
function ___shlim($f,$lim) {
 $f = $f|0;
 $lim = $lim|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 104|0);
 HEAP32[$0>>2] = $lim;
 $1 = (($f) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($f) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $2;
 $6 = $4;
 $7 = (($5) - ($6))|0;
 $8 = (($f) + 108|0);
 HEAP32[$8>>2] = $7;
 $9 = ($lim|0)!=(0);
 $10 = ($7|0)>($lim|0);
 $or$cond = $9 & $10;
 if ($or$cond) {
  $11 = (($4) + ($lim)|0);
  $12 = (($f) + 100|0);
  HEAP32[$12>>2] = $11;
  STACKTOP = sp;return;
 } else {
  $13 = (($f) + 100|0);
  HEAP32[$13>>2] = $2;
  STACKTOP = sp;return;
 }
}
function ___shgetc($f) {
 $f = $f|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert2 = 0, $$pre = 0, $$pre3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 104|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  label = 3;
 } else {
  $3 = (($f) + 108|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)<($1|0);
  if ($5) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $6 = (___uflow($f)|0);
  $7 = ($6|0)<(0);
  if (!($7)) {
   $9 = HEAP32[$0>>2]|0;
   $10 = ($9|0)==(0);
   $$phi$trans$insert = (($f) + 8|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   if ($10) {
    label = 8;
   } else {
    $11 = (($f) + 4|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = $$pre;
    $14 = $12;
    $15 = (($13) - ($14))|0;
    $16 = (($f) + 108|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = (($9) - ($17))|0;
    $19 = (($18) + -1)|0;
    $20 = ($15|0)>($19|0);
    if ($20) {
     $21 = (($12) + ($19)|0);
     $22 = (($f) + 100|0);
     HEAP32[$22>>2] = $21;
    } else {
     label = 8;
    }
   }
   if ((label|0) == 8) {
    $23 = (($f) + 100|0);
    HEAP32[$23>>2] = $$pre;
   }
   $24 = ($$pre|0)==(0|0);
   $$phi$trans$insert2 = (($f) + 4|0);
   $$pre3 = HEAP32[$$phi$trans$insert2>>2]|0;
   if (!($24)) {
    $25 = $$pre;
    $26 = $$pre3;
    $27 = (($f) + 108|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (($25) + 1)|0;
    $30 = (($29) - ($26))|0;
    $31 = (($30) + ($28))|0;
    HEAP32[$27>>2] = $31;
   }
   $32 = (($$pre3) + -1|0);
   $33 = HEAP8[$32>>0]|0;
   $34 = $33&255;
   $35 = ($34|0)==($6|0);
   if ($35) {
    $$0 = $6;
    STACKTOP = sp;return ($$0|0);
   }
   $36 = $6&255;
   HEAP8[$32>>0] = $36;
   $$0 = $6;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $8 = (($f) + 100|0);
 HEAP32[$8>>2] = 0;
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function _frexp($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $$0 = 0.0, $$01 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $3 = tempRet0;
 $4 = $2 & 2047;
 if ((($4|0) == 0)) {
  $5 = $x != 0.0;
  if ($5) {
   $6 = $x * 18446744073709551616.0;
   $7 = (+_frexp($6,$e));
   $8 = HEAP32[$e>>2]|0;
   $9 = (($8) + -64)|0;
   $$01 = $7;$storemerge = $9;
  } else {
   $$01 = $x;$storemerge = 0;
  }
  HEAP32[$e>>2] = $storemerge;
  $$0 = $$01;
  STACKTOP = sp;return (+$$0);
 } else if ((($4|0) == 2047)) {
  $$0 = $x;
  STACKTOP = sp;return (+$$0);
 } else {
  $10 = (($4) + -1022)|0;
  HEAP32[$e>>2] = $10;
  $11 = $1 & -2146435073;
  $12 = $11 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $12;$13 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $13;
  STACKTOP = sp;return (+$$0);
 }
 return +0;
}
function _frexpl($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_frexp($x,$e));
 STACKTOP = sp;return (+$0);
}
function _scalbn($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $0 = 0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0.0, $9 = 0, $y$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)>(1023);
 if ($0) {
  $1 = $x * 8.98846567431157953864E+307;
  $2 = (($n) + -1023)|0;
  $3 = ($2|0)>(1023);
  if ($3) {
   $4 = $1 * 8.98846567431157953864E+307;
   $5 = (($n) + -2046)|0;
   $6 = ($5|0)>(1023);
   $$ = $6 ? 1023 : $5;
   $$0 = $$;$y$0 = $4;
  } else {
   $$0 = $2;$y$0 = $1;
  }
 } else {
  $7 = ($n|0)<(-1022);
  if ($7) {
   $8 = $x * 2.22507385850720138309E-308;
   $9 = (($n) + 1022)|0;
   $10 = ($9|0)<(-1022);
   if ($10) {
    $11 = $8 * 2.22507385850720138309E-308;
    $12 = (($n) + 2044)|0;
    $13 = ($12|0)<(-1022);
    $$1 = $13 ? -1022 : $12;
    $$0 = $$1;$y$0 = $11;
   } else {
    $$0 = $9;$y$0 = $8;
   }
  } else {
   $$0 = $n;$y$0 = $x;
  }
 }
 $14 = (($$0) + 1023)|0;
 $15 = (_bitshift64Shl(($14|0),0,52)|0);
 $16 = tempRet0;
 HEAP32[tempDoublePtr>>2] = $15;HEAP32[tempDoublePtr+4>>2] = $16;$17 = +HEAPF64[tempDoublePtr>>3];
 $18 = $y$0 * $17;
 STACKTOP = sp;return (+$18);
}
function _scalbnl($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_scalbn($x,$n));
 STACKTOP = sp;return (+$0);
}
function _wctomb($s,$wc) {
 $s = $s|0;
 $wc = $wc|0;
 var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 0;
 } else {
  $1 = (_wcrtomb($s,$wc,0)|0);
  $$0 = $1;
 }
 STACKTOP = sp;return ($$0|0);
}
function _wcrtomb($s,$wc,$st) {
 $s = $s|0;
 $wc = $wc|0;
 $st = $st|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = ($wc>>>0)<(128);
 if ($1) {
  $2 = $wc&255;
  HEAP8[$s>>0] = $2;
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = ($wc>>>0)<(2048);
 if ($3) {
  $4 = $wc >>> 6;
  $5 = $4 | 192;
  $6 = $5&255;
  $7 = (($s) + 1|0);
  HEAP8[$s>>0] = $6;
  $8 = $wc & 63;
  $9 = $8 | 128;
  $10 = $9&255;
  HEAP8[$7>>0] = $10;
  $$0 = 2;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = ($wc>>>0)<(55296);
 $12 = (($wc) + -57344)|0;
 $13 = ($12>>>0)<(8192);
 $or$cond = $11 | $13;
 if ($or$cond) {
  $14 = $wc >>> 12;
  $15 = $14 | 224;
  $16 = $15&255;
  $17 = (($s) + 1|0);
  HEAP8[$s>>0] = $16;
  $18 = $wc >>> 6;
  $19 = $18 & 63;
  $20 = $19 | 128;
  $21 = $20&255;
  $22 = (($s) + 2|0);
  HEAP8[$17>>0] = $21;
  $23 = $wc & 63;
  $24 = $23 | 128;
  $25 = $24&255;
  HEAP8[$22>>0] = $25;
  $$0 = 3;
  STACKTOP = sp;return ($$0|0);
 }
 $26 = (($wc) + -65536)|0;
 $27 = ($26>>>0)<(1048576);
 if ($27) {
  $28 = $wc >>> 18;
  $29 = $28 | 240;
  $30 = $29&255;
  $31 = (($s) + 1|0);
  HEAP8[$s>>0] = $30;
  $32 = $wc >>> 12;
  $33 = $32 & 63;
  $34 = $33 | 128;
  $35 = $34&255;
  $36 = (($s) + 2|0);
  HEAP8[$31>>0] = $35;
  $37 = $wc >>> 6;
  $38 = $37 & 63;
  $39 = $38 | 128;
  $40 = $39&255;
  $41 = (($s) + 3|0);
  HEAP8[$36>>0] = $40;
  $42 = $wc & 63;
  $43 = $42 | 128;
  $44 = $43&255;
  HEAP8[$41>>0] = $44;
  $$0 = 4;
  STACKTOP = sp;return ($$0|0);
 } else {
  $45 = (___errno_location()|0);
  HEAP32[$45>>2] = 84;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function ___toread($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = (($f) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($f) + 44|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($7>>>0)>($9>>>0);
 if ($10) {
  $11 = (($f) + 36|0);
  $12 = HEAP32[$11>>2]|0;
  (FUNCTION_TABLE_iiii[$12 & 255]($f,0,0)|0);
 }
 $13 = (($f) + 16|0);
 HEAP32[$13>>2] = 0;
 $14 = (($f) + 28|0);
 HEAP32[$14>>2] = 0;
 HEAP32[$6>>2] = 0;
 $15 = HEAP32[$f>>2]|0;
 $16 = $15 & 20;
 $17 = ($16|0)==(0);
 if ($17) {
  $21 = HEAP32[$8>>2]|0;
  $22 = (($f) + 8|0);
  HEAP32[$22>>2] = $21;
  $23 = (($f) + 4|0);
  HEAP32[$23>>2] = $21;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $18 = $15 & 4;
 $19 = ($18|0)==(0);
 if ($19) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $20 = $15 | 32;
 HEAP32[$f>>2] = $20;
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function ___towrite($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = HEAP32[$f>>2]|0;
 $7 = $6 & 8;
 $8 = ($7|0)==(0);
 if ($8) {
  $10 = (($f) + 8|0);
  HEAP32[$10>>2] = 0;
  $11 = (($f) + 4|0);
  HEAP32[$11>>2] = 0;
  $12 = (($f) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($f) + 28|0);
  HEAP32[$14>>2] = $13;
  $15 = (($f) + 20|0);
  HEAP32[$15>>2] = $13;
  $16 = (($f) + 48|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($13) + ($17)|0);
  $19 = (($f) + 16|0);
  HEAP32[$19>>2] = $18;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $9 = $6 | 32;
  HEAP32[$f>>2] = $9;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function ___uflow($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $c = sp;
 $0 = (($f) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = (___toread($f)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   label = 3;
  } else {
   $$0 = -1;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $5 = (($f) + 32|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (FUNCTION_TABLE_iiii[$6 & 255]($f,$c,1)|0);
  $8 = ($7|0)==(1);
  if ($8) {
   $9 = HEAP8[$c>>0]|0;
   $10 = $9&255;
   $$0 = $10;
  } else {
   $$0 = -1;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___fwritex($s,$l,$f) {
 $s = $s|0;
 $l = $l|0;
 $f = $f|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$pre = 0, $$pre6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 do {
  if ($2) {
   $3 = (___towrite($f)|0);
   $4 = ($3|0)==(0);
   if ($4) {
    $$pre6 = HEAP32[$0>>2]|0;
    $8 = $$pre6;
    break;
   } else {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $8 = $1;
  }
 } while(0);
 $5 = (($f) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $8;
 $9 = $6;
 $10 = (($7) - ($9))|0;
 $11 = ($10>>>0)<($l>>>0);
 if ($11) {
  $12 = (($f) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (FUNCTION_TABLE_iiii[$13 & 255]($f,$s,$l)|0);
  $$0 = $14;
  STACKTOP = sp;return ($$0|0);
 }
 $15 = (($f) + 75|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = ($16<<24>>24)>(-1);
 L11: do {
  if ($17) {
   $i$0 = $l;
   while(1) {
    $18 = ($i$0|0)==(0);
    if ($18) {
     $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
     break L11;
    }
    $19 = (($i$0) + -1)|0;
    $20 = (($s) + ($19)|0);
    $21 = HEAP8[$20>>0]|0;
    $22 = ($21<<24>>24)==(10);
    if ($22) {
     break;
    } else {
     $i$0 = $19;
    }
   }
   $23 = (($f) + 36|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (FUNCTION_TABLE_iiii[$24 & 255]($f,$s,$i$0)|0);
   $26 = ($25>>>0)<($i$0>>>0);
   if ($26) {
    $$0 = $i$0;
    STACKTOP = sp;return ($$0|0);
   } else {
    $27 = (($s) + ($i$0)|0);
    $28 = (($l) - ($i$0))|0;
    $$pre = HEAP32[$5>>2]|0;
    $$01 = $28;$$02 = $27;$29 = $$pre;$i$1 = $i$0;
    break;
   }
  } else {
   $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
  }
 } while(0);
 _memcpy(($29|0),($$02|0),($$01|0))|0;
 $30 = HEAP32[$5>>2]|0;
 $31 = (($30) + ($$01)|0);
 HEAP32[$5>>2] = $31;
 $32 = (($i$1) + ($$01))|0;
 $$0 = $32;
 STACKTOP = sp;return ($$0|0);
}
function _snprintf($s,$n,$fmt,$varargs) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsnprintf($s,$n,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _sprintf($s,$fmt,$varargs) {
 $s = $s|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsprintf($s,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _MUSL_vfprintf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $ap2 = 0, $internal_buf = 0, $nl_arg = 0, $nl_type = 0, $ret$1 = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0;
 $ap2 = sp + 120|0;
 $nl_type = sp + 80|0;
 $nl_arg = sp;
 $internal_buf = sp + 136|0;
 dest=$nl_type+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$ap>>2]|0;
 HEAP32[$ap2>>2] = $vacopy_currentptr;
 $0 = (_printf_core(0,$fmt,$ap2,$nl_arg,$nl_type)|0);
 $1 = ($0|0)<(0);
 if ($1) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (($f) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $6 = (($f) + 44|0);
  $7 = HEAP32[$6>>2]|0;
  HEAP32[$6>>2] = $internal_buf;
  $8 = (($f) + 28|0);
  HEAP32[$8>>2] = $internal_buf;
  $9 = (($f) + 20|0);
  HEAP32[$9>>2] = $internal_buf;
  HEAP32[$2>>2] = 80;
  $10 = (($internal_buf) + 80|0);
  $11 = (($f) + 16|0);
  HEAP32[$11>>2] = $10;
  $12 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
  $13 = ($7|0)==(0|0);
  if ($13) {
   $ret$1 = $12;
  } else {
   $14 = (($f) + 36|0);
   $15 = HEAP32[$14>>2]|0;
   (FUNCTION_TABLE_iiii[$15 & 255]($f,0,0)|0);
   $16 = HEAP32[$9>>2]|0;
   $17 = ($16|0)==(0|0);
   $$ = $17 ? -1 : $12;
   HEAP32[$6>>2] = $7;
   HEAP32[$2>>2] = 0;
   HEAP32[$11>>2] = 0;
   HEAP32[$8>>2] = 0;
   HEAP32[$9>>2] = 0;
   $ret$1 = $$;
  }
 } else {
  $5 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
  $ret$1 = $5;
 }
 $$0 = $ret$1;
 STACKTOP = sp;return ($$0|0);
}
function _printf_core($f,$fmt,$ap,$nl_arg,$nl_type) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 $nl_arg = $nl_arg|0;
 $nl_type = $nl_type|0;
 var $$ = 0, $$$5$i = 0, $$$i = 0, $$$p$i = 0, $$0 = 0, $$0$lcssa$i = 0, $$0$lcssa$i$i = 0, $$0$lcssa$i104$i = 0, $$0$lcssa$i128$i = 0, $$0$lcssa$i143$i = 0, $$0$lcssa$i38 = 0, $$0$lcssa$i39$i = 0, $$0$lcssa$i44 = 0, $$0$lcssa$i46 = 0, $$0$lcssa$i46$i = 0, $$0$lcssa$i49$i = 0, $$0$lcssa$i53 = 0, $$0$lcssa$i56$i = 0, $$0$lcssa$i60 = 0, $$0$lcssa$i63$i = 0;
 var $$0$lcssa$i67 = 0, $$0$lcssa$i69$i = 0, $$0$lcssa$i76$i = 0, $$0$lcssa$i78 = 0, $$0$lcssa$i85$i = 0, $$0$lcssa$i97$i = 0, $$01$i = 0, $$01$i$i = 0, $$01$i102$i = 0, $$01$i126$i = 0, $$01$i141$i = 0, $$01$i36 = 0, $$01$i37$i = 0, $$01$i44$i = 0, $$01$i51 = 0, $$01$i54$i = 0, $$01$i58 = 0, $$01$i61$i = 0, $$01$i65 = 0, $$01$i67$i = 0;
 var $$01$i74$i = 0, $$01$i76 = 0, $$01$i95$i = 0, $$01$lcssa$off0$i = 0, $$01$lcssa$off0$i$i = 0, $$01$lcssa$off0$i86$i = 0, $$012$i = 0, $$012$i73 = 0, $$03$i41 = 0, $$05$i = 0, $$05$i$i = 0, $$05$i80$i = 0, $$06$i = 0.0, $$1$i = 0.0, $$1$lcssa$i$i = 0, $$1$lcssa$i113$i = 0, $$113$i = 0, $$12$i = 0, $$12$i$i = 0, $$12$i111$i = 0;
 var $$12$i120$i = 0, $$12$i135$i = 0, $$12$i88$i = 0, $$14 = 0, $$15 = 0, $$16 = 0, $$18 = 0, $$2$i = 0.0, $$2$us$i = 0.0, $$2$us$us$i = 0.0, $$2$us160$i = 0.0, $$20$i = 0, $$20$us$i = 0, $$21$i = 0, $$22$i = 0.0, $$24$i = 0, $$26$i = 0, $$29$$24$i = 0, $$29$$26$i = 0, $$29$i = 0;
 var $$3$i = 0.0, $$310$i = 0, $$32$i = 0, $$4$i = 0.0, $$411$lcssa$i = 0, $$411176$i = 0, $$5194$i = 0, $$a$3$i = 0, $$a$3$us$i = 0, $$a$3$us319$i = 0, $$a$3$us320$i = 0, $$a$3321$i = 0, $$a$3322$i = 0, $$fl$4 = 0, $$lcssa94 = 0, $$mask$i = 0, $$mask$i31 = 0, $$mask1$i = 0, $$mask1$i30 = 0, $$neg152$i = 0;
 var $$neg153$i = 0, $$not$i = 0, $$p$5 = 0, $$p$i = 0, $$pn$i = 0, $$pr$i = 0, $$pr147$i = 0, $$pre = 0, $$pre$i = 0, $$pre291 = 0, $$pre292 = 0, $$pre312$i = 0, $$sink = 0, $$sink300$off32 = 0, $$sum$i = 0, $$sum14$i = 0, $$sum15$i = 0, $$z$3$i = 0, $$z$4$us$i = 0, $0 = 0;
 var $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0;
 var $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0;
 var $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0.0, $104 = 0, $1040 = 0.0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1048$phi = 0, $1049 = 0, $1049$phi = 0, $105 = 0;
 var $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0.0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0.0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
 var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
 var $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0;
 var $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0;
 var $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0;
 var $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0;
 var $368 = 0.0, $369 = 0, $37 = 0, $370 = 0.0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0;
 var $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0;
 var $403 = 0, $404 = 0, $405 = 0, $406 = 0.0, $407 = 0.0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0;
 var $421 = 0.0, $422 = 0, $423 = 0, $424 = 0, $425 = 0.0, $426 = 0.0, $427 = 0.0, $428 = 0.0, $429 = 0.0, $43 = 0, $430 = 0.0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0;
 var $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0;
 var $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0;
 var $476 = 0, $477 = 0, $478 = 0, $479 = 0.0, $48 = 0, $480 = 0.0, $481 = 0.0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0;
 var $494 = 0.0, $495 = 0.0, $496 = 0.0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0.0, $51 = 0, $510 = 0.0;
 var $511 = 0.0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0.0, $525 = 0.0, $526 = 0.0, $527 = 0, $528 = 0, $529 = 0;
 var $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0;
 var $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0;
 var $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0.0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0;
 var $584 = 0.0, $585 = 0.0, $586 = 0.0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0;
 var $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0;
 var $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0;
 var $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0;
 var $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0;
 var $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0;
 var $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0;
 var $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0.0;
 var $728 = 0.0, $729 = 0, $73 = 0, $730 = 0.0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0;
 var $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0;
 var $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0;
 var $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0;
 var $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0;
 var $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0;
 var $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0;
 var $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0;
 var $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0;
 var $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0;
 var $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0;
 var $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0;
 var $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0;
 var $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0;
 var $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0;
 var $999 = 0, $a$0 = 0, $a$1 = 0, $a$1$lcssa$i = 0, $a$1257$i = 0, $a$2 = 0, $a$2$i = 0, $a$3$lcssa$i = 0, $a$3245$i = 0, $a$3245$us$i = 0, $a$6$i = 0, $a$7$i = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0, $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0;
 var $arglist_current29 = 0, $arglist_current32 = 0, $arglist_current35 = 0, $arglist_current38 = 0, $arglist_current41 = 0, $arglist_current44 = 0, $arglist_current47 = 0, $arglist_current5 = 0, $arglist_current50 = 0, $arglist_current53 = 0, $arglist_current56 = 0, $arglist_current59 = 0, $arglist_current62 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0;
 var $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next30 = 0, $arglist_next33 = 0, $arglist_next36 = 0, $arglist_next39 = 0, $arglist_next42 = 0, $arglist_next45 = 0, $arglist_next48 = 0, $arglist_next51 = 0, $arglist_next54 = 0, $arglist_next57 = 0, $arglist_next6 = 0, $arglist_next60 = 0, $arglist_next63 = 0, $arglist_next9 = 0, $argpos$0 = 0, $big$i = 0, $brmerge$i = 0, $buf = 0;
 var $buf$i = 0, $carry$0250$i = 0, $carry3$0239$i = 0, $carry3$0239$us$i = 0, $cnt$0 = 0, $cnt$1 = 0, $d$0251$i = 0, $d$1238$i = 0, $d$1238$us$i = 0, $d$2$a$3$i = 0, $d$2$lcssa$i = 0, $d$2220$i = 0, $d$3$i = 0, $d$4184$i = 0, $d$5175$i = 0, $d$6193$i = 0, $e$0233$i = 0, $e$1$i = 0, $e$2215$i = 0, $e$3$i = 0;
 var $e$4$i = 0, $e2$i = 0, $ebuf0$i = 0, $estr$0$i = 0, $estr$1$lcssa$i = 0, $estr$1$ph$i = 0, $estr$1201$i = 0, $estr$2$i = 0, $exitcond$i = 0, $fl$0102 = 0, $fl$0106 = 0, $fl$1 = 0, $fl$1$ = 0, $fl$3 = 0, $fl$4 = 0, $fl$6 = 0, $i$0$lcssa = 0, $i$0167 = 0, $i$0169 = 0, $i$0234$i = 0;
 var $i$03$i = 0, $i$03$i23 = 0, $i$1$lcssa$i = 0, $i$1175 = 0, $i$1226$i = 0, $i$2216$i = 0, $i$291 = 0, $i$3210$i = 0, $i$390 = 0, $isdigit = 0, $isdigit$i = 0, $isdigit$i25 = 0, $isdigit10 = 0, $isdigit12 = 0, $isdigit2$i = 0, $isdigit2$i22 = 0, $isdigittmp = 0, $isdigittmp$i = 0, $isdigittmp$i24 = 0, $isdigittmp1$i = 0;
 var $isdigittmp1$i21 = 0, $isdigittmp11 = 0, $isdigittmp9 = 0, $j$0$i = 0, $j$0225$i = 0, $j$0227$i = 0, $j$1211$i = 0, $j$2$i = 0, $l$0 = 0, $l$0$i = 0, $l$1$i = 0, $l$1$lcssa = 0, $l$1168 = 0, $l10n$0 = 0, $l10n$0$phi = 0, $l10n$1 = 0, $l10n$2 = 0, $l10n$3 = 0, $mb = 0, $or$cond = 0;
 var $or$cond$i = 0, $or$cond$i$i = 0, $or$cond$i101$i = 0, $or$cond$i36$i = 0, $or$cond$i43$i = 0, $or$cond$i50 = 0, $or$cond$i53$i = 0, $or$cond$i57 = 0, $or$cond$i60$i = 0, $or$cond$i64 = 0, $or$cond$i72 = 0, $or$cond$i73$i = 0, $or$cond$i75 = 0, $or$cond$i94$i = 0, $or$cond19$i = 0, $or$cond19315$i = 0, $or$cond23$i = 0, $or$cond29$i = 0, $or$cond29174$i = 0, $or$cond3$i = 0;
 var $or$cond30$i = 0, $p$0 = 0, $p$1 = 0, $p$2 = 0, $p$2$ = 0, $p$4296 = 0, $p$5 = 0, $pad$i = 0, $pl$0 = 0, $pl$0$i = 0, $pl$1 = 0, $pl$1$i = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$0$$i = 0, $prefix$0$i = 0, $prefix$1 = 0, $prefix$2 = 0, $r$0$a$7$i = 0, $re$0$i = 0;
 var $re$1166$i = 0, $round$0165$i = 0.0, $round6$1$i = 0.0, $s$0$i = 0, $s$0$us$i = 0, $s$0$us$us$i = 0, $s$0$us159$i = 0, $s$1$i = 0, $s$1$lcssa$i = 0, $s$1$us$i = 0, $s$1$us$us$i = 0, $s$1$us161$i = 0, $s1$0$i = 0, $s7$0181$i = 0, $s7$1$i = 0, $s8$0$lcssa$i = 0, $s8$0170$i = 0, $s9$0$i = 0, $s9$1189$i = 0, $s9$2$i = 0;
 var $sext = 0, $sext86 = 0, $small$0$i = 0.0, $small$1$i = 0.0, $st$0 = 0, $storemerge = 0, $storemerge13 = 0, $storemerge8100 = 0, $storemerge8105 = 0, $t$0 = 0, $t$1 = 0, $w$$i = 0, $w$0 = 0, $w$1 = 0, $w$18$i = 0, $w$2 = 0, $w$31$i = 0, $wc = 0, $ws$0170 = 0, $ws$1176 = 0;
 var $y$03$i = 0, $y$03$i$i = 0, $y$03$i110$i = 0, $y$03$i119$i = 0, $y$03$i134$i = 0, $y$03$i87$i = 0, $z$0$i = 0, $z$0$lcssa = 0, $z$095 = 0, $z$1$lcssa$i = 0, $z$1256$i = 0, $z$2 = 0, $z$2$i = 0, $z$2316$i = 0, $z$2317$i = 0, $z$3$lcssa$i = 0, $z$3244$i = 0, $z$3244$us$i = 0, $z$4$i = 0, $z$4$us$i = 0;
 var $z$5$i = 0, $z$6$i = 0, $z$7$$i = 0, $z$7$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 832|0;
 $big$i = sp + 16|0;
 $e2$i = sp;
 $buf$i = sp + 808|0;
 $0 = $buf$i;
 $ebuf0$i = sp + 792|0;
 $pad$i = sp + 496|0;
 $buf = sp + 752|0;
 $wc = sp + 8|0;
 $mb = sp + 804|0;
 $1 = ($f|0)!=(0|0);
 $2 = (($buf) + 40|0);
 $3 = $2;
 $4 = (($buf) + 39|0);
 $5 = (($wc) + 4|0);
 $6 = (($ebuf0$i) + 12|0);
 $7 = (($ebuf0$i) + 11|0);
 $8 = $6;
 $9 = (($8) - ($0))|0;
 $10 = (-2 - ($0))|0;
 $11 = (($8) + 2)|0;
 $12 = (($big$i) + 264|0);
 $13 = (($buf$i) + 9|0);
 $14 = $13;
 $15 = (($buf$i) + 8|0);
 $1048 = 0;$1049 = 0;$22 = $fmt;$cnt$0 = 0;$l$0 = 0;$l10n$0 = 0;
 L1: while(1) {
  $16 = ($cnt$0|0)>(-1);
  do {
   if ($16) {
    $17 = (2147483647 - ($cnt$0))|0;
    $18 = ($l$0|0)>($17|0);
    if ($18) {
     $19 = (___errno_location()|0);
     HEAP32[$19>>2] = 75;
     $cnt$1 = -1;
     break;
    } else {
     $20 = (($l$0) + ($cnt$0))|0;
     $cnt$1 = $20;
     break;
    }
   } else {
    $cnt$1 = $cnt$0;
   }
  } while(0);
  $21 = HEAP8[$22>>0]|0;
  $23 = ($21<<24>>24)==(0);
  if ($23) {
   label = 339;
   break;
  } else {
   $1050 = $21;$25 = $22;
  }
  while(1) {
   if ((($1050<<24>>24) == 37)) {
    $27 = $25;$z$095 = $25;
    label = 9;
    break;
   } else if ((($1050<<24>>24) == 0)) {
    $$lcssa94 = $25;$z$0$lcssa = $25;
    break;
   }
   $24 = (($25) + 1|0);
   $$pre = HEAP8[$24>>0]|0;
   $1050 = $$pre;$25 = $24;
  }
  L12: do {
   if ((label|0) == 9) {
    while(1) {
     label = 0;
     $26 = (($27) + 1|0);
     $28 = HEAP8[$26>>0]|0;
     $29 = ($28<<24>>24)==(37);
     if (!($29)) {
      $$lcssa94 = $27;$z$0$lcssa = $z$095;
      break L12;
     }
     $30 = (($z$095) + 1|0);
     $31 = (($27) + 2|0);
     $32 = HEAP8[$31>>0]|0;
     $33 = ($32<<24>>24)==(37);
     if ($33) {
      $27 = $31;$z$095 = $30;
      label = 9;
     } else {
      $$lcssa94 = $31;$z$0$lcssa = $30;
      break;
     }
    }
   }
  } while(0);
  $34 = $z$0$lcssa;
  $35 = $22;
  $36 = (($34) - ($35))|0;
  if ($1) {
   (___fwritex($22,$36,$f)|0);
  }
  $37 = ($z$0$lcssa|0)==($22|0);
  if (!($37)) {
   $l10n$0$phi = $l10n$0;$1049$phi = $1049;$1048$phi = $1048;$22 = $$lcssa94;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$0$phi;$1049 = $1049$phi;$1048 = $1048$phi;
   continue;
  }
  $38 = (($$lcssa94) + 1|0);
  $39 = HEAP8[$38>>0]|0;
  $40 = $39 << 24 >> 24;
  $isdigittmp = (($40) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   $41 = (($$lcssa94) + 2|0);
   $42 = HEAP8[$41>>0]|0;
   $43 = ($42<<24>>24)==(36);
   if ($43) {
    $44 = (($$lcssa94) + 3|0);
    $$pre291 = HEAP8[$44>>0]|0;
    $46 = $$pre291;$argpos$0 = $isdigittmp;$l10n$1 = 1;$storemerge = $44;
   } else {
    $46 = $39;$argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $38;
   }
  } else {
   $46 = $39;$argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $38;
  }
  $45 = $46 << 24 >> 24;
  $47 = (($45) + -32)|0;
  $48 = ($47>>>0)<(32);
  L25: do {
   if ($48) {
    $50 = $45;$55 = $46;$fl$0106 = 0;$storemerge8105 = $storemerge;
    while(1) {
     $49 = (($50) + -32)|0;
     $51 = 1 << $49;
     $52 = $51 & 75913;
     $53 = ($52|0)==(0);
     if ($53) {
      $65 = $55;$fl$0102 = $fl$0106;$storemerge8100 = $storemerge8105;
      break L25;
     }
     $54 = $55 << 24 >> 24;
     $56 = (($54) + -32)|0;
     $57 = 1 << $56;
     $58 = $57 | $fl$0106;
     $59 = (($storemerge8105) + 1|0);
     $60 = HEAP8[$59>>0]|0;
     $61 = $60 << 24 >> 24;
     $62 = (($61) + -32)|0;
     $63 = ($62>>>0)<(32);
     if ($63) {
      $50 = $61;$55 = $60;$fl$0106 = $58;$storemerge8105 = $59;
     } else {
      $65 = $60;$fl$0102 = $58;$storemerge8100 = $59;
      break;
     }
    }
   } else {
    $65 = $46;$fl$0102 = 0;$storemerge8100 = $storemerge;
   }
  } while(0);
  $64 = ($65<<24>>24)==(42);
  do {
   if ($64) {
    $66 = (($storemerge8100) + 1|0);
    $67 = HEAP8[$66>>0]|0;
    $68 = $67 << 24 >> 24;
    $isdigittmp11 = (($68) + -48)|0;
    $isdigit12 = ($isdigittmp11>>>0)<(10);
    if ($isdigit12) {
     $69 = (($storemerge8100) + 2|0);
     $70 = HEAP8[$69>>0]|0;
     $71 = ($70<<24>>24)==(36);
     if ($71) {
      $72 = (($nl_type) + ($isdigittmp11<<2)|0);
      HEAP32[$72>>2] = 10;
      $73 = HEAP8[$66>>0]|0;
      $74 = $73 << 24 >> 24;
      $75 = (($74) + -48)|0;
      $76 = (($nl_arg) + ($75<<3)|0);
      $77 = $76;
      $78 = $77;
      $79 = HEAP32[$78>>2]|0;
      $80 = (($77) + 4)|0;
      $81 = $80;
      $82 = HEAP32[$81>>2]|0;
      $83 = (($storemerge8100) + 3|0);
      $l10n$2 = 1;$storemerge13 = $83;$w$0 = $79;
     } else {
      label = 24;
     }
    } else {
     label = 24;
    }
    if ((label|0) == 24) {
     label = 0;
     $84 = ($l10n$1|0)==(0);
     if (!($84)) {
      $$0 = -1;
      label = 357;
      break L1;
     }
     if (!($1)) {
      $100 = $66;$fl$1 = $fl$0102;$l10n$3 = 0;$w$1 = 0;
      break;
     }
     $arglist_current = HEAP32[$ap>>2]|0;
     $85 = HEAP32[$arglist_current>>2]|0;
     $arglist_next = (($arglist_current) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     $l10n$2 = 0;$storemerge13 = $66;$w$0 = $85;
    }
    $86 = ($w$0|0)<(0);
    if ($86) {
     $87 = $fl$0102 | 8192;
     $88 = (0 - ($w$0))|0;
     $100 = $storemerge13;$fl$1 = $87;$l10n$3 = $l10n$2;$w$1 = $88;
    } else {
     $100 = $storemerge13;$fl$1 = $fl$0102;$l10n$3 = $l10n$2;$w$1 = $w$0;
    }
   } else {
    $89 = $65 << 24 >> 24;
    $isdigittmp1$i = (($89) + -48)|0;
    $isdigit2$i = ($isdigittmp1$i>>>0)<(10);
    if ($isdigit2$i) {
     $92 = $89;$95 = $storemerge8100;$i$03$i = 0;
     while(1) {
      $90 = ($i$03$i*10)|0;
      $91 = (($92) + -48)|0;
      $93 = (($91) + ($90))|0;
      $94 = (($95) + 1|0);
      $96 = HEAP8[$94>>0]|0;
      $97 = $96 << 24 >> 24;
      $isdigittmp$i = (($97) + -48)|0;
      $isdigit$i = ($isdigittmp$i>>>0)<(10);
      if ($isdigit$i) {
       $92 = $97;$95 = $94;$i$03$i = $93;
      } else {
       break;
      }
     }
     $98 = ($93|0)<(0);
     if ($98) {
      $$0 = -1;
      label = 357;
      break L1;
     } else {
      $100 = $94;$fl$1 = $fl$0102;$l10n$3 = $l10n$1;$w$1 = $93;
     }
    } else {
     $100 = $storemerge8100;$fl$1 = $fl$0102;$l10n$3 = $l10n$1;$w$1 = 0;
    }
   }
  } while(0);
  $99 = HEAP8[$100>>0]|0;
  $101 = ($99<<24>>24)==(46);
  L46: do {
   if ($101) {
    $102 = (($100) + 1|0);
    $103 = HEAP8[$102>>0]|0;
    $104 = ($103<<24>>24)==(42);
    if (!($104)) {
     $125 = $103 << 24 >> 24;
     $isdigittmp1$i21 = (($125) + -48)|0;
     $isdigit2$i22 = ($isdigittmp1$i21>>>0)<(10);
     if ($isdigit2$i22) {
      $128 = $125;$131 = $102;$i$03$i23 = 0;
     } else {
      $1051 = $102;$p$0 = 0;
      break;
     }
     while(1) {
      $126 = ($i$03$i23*10)|0;
      $127 = (($128) + -48)|0;
      $129 = (($127) + ($126))|0;
      $130 = (($131) + 1|0);
      $132 = HEAP8[$130>>0]|0;
      $133 = $132 << 24 >> 24;
      $isdigittmp$i24 = (($133) + -48)|0;
      $isdigit$i25 = ($isdigittmp$i24>>>0)<(10);
      if ($isdigit$i25) {
       $128 = $133;$131 = $130;$i$03$i23 = $129;
      } else {
       $1051 = $130;$p$0 = $129;
       break L46;
      }
     }
    }
    $105 = (($100) + 2|0);
    $106 = HEAP8[$105>>0]|0;
    $107 = $106 << 24 >> 24;
    $isdigittmp9 = (($107) + -48)|0;
    $isdigit10 = ($isdigittmp9>>>0)<(10);
    if ($isdigit10) {
     $108 = (($100) + 3|0);
     $109 = HEAP8[$108>>0]|0;
     $110 = ($109<<24>>24)==(36);
     if ($110) {
      $111 = (($nl_type) + ($isdigittmp9<<2)|0);
      HEAP32[$111>>2] = 10;
      $112 = HEAP8[$105>>0]|0;
      $113 = $112 << 24 >> 24;
      $114 = (($113) + -48)|0;
      $115 = (($nl_arg) + ($114<<3)|0);
      $116 = $115;
      $117 = $116;
      $118 = HEAP32[$117>>2]|0;
      $119 = (($116) + 4)|0;
      $120 = $119;
      $121 = HEAP32[$120>>2]|0;
      $122 = (($100) + 4|0);
      $1051 = $122;$p$0 = $118;
      break;
     }
    }
    $123 = ($l10n$3|0)==(0);
    if (!($123)) {
     $$0 = -1;
     label = 357;
     break L1;
    }
    if ($1) {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $124 = HEAP32[$arglist_current2>>2]|0;
     $arglist_next3 = (($arglist_current2) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $1051 = $105;$p$0 = $124;
    } else {
     $1051 = $105;$p$0 = 0;
    }
   } else {
    $1051 = $100;$p$0 = -1;
   }
  } while(0);
  $135 = $1051;$st$0 = 0;
  while(1) {
   $134 = HEAP8[$135>>0]|0;
   $136 = $134 << 24 >> 24;
   $137 = (($136) + -65)|0;
   $138 = ($137>>>0)>(57);
   if ($138) {
    $$0 = -1;
    label = 357;
    break L1;
   }
   $139 = (($135) + 1|0);
   $140 = ((31000 + (($st$0*58)|0)|0) + ($137)|0);
   $141 = HEAP8[$140>>0]|0;
   $142 = $141&255;
   $143 = (($142) + -1)|0;
   $144 = ($143>>>0)<(8);
   if ($144) {
    $135 = $139;$st$0 = $142;
   } else {
    break;
   }
  }
  $145 = ($141<<24>>24)==(0);
  if ($145) {
   $$0 = -1;
   label = 357;
   break;
  }
  $146 = ($141<<24>>24)==(19);
  $147 = ($argpos$0|0)>(-1);
  L65: do {
   if ($146) {
    if ($147) {
     $$0 = -1;
     label = 357;
     break L1;
    }
    if ($1) {
     $198 = $134;$206 = $1049;$228 = $1048;
    } else {
     $1049$phi = $1049;$1048$phi = $1048;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;$1049 = $1049$phi;$1048 = $1048$phi;
     continue L1;
    }
   } else {
    L69: do {
     if ($147) {
      $148 = (($nl_type) + ($argpos$0<<2)|0);
      HEAP32[$148>>2] = $142;
      $149 = (($nl_arg) + ($argpos$0<<3)|0);
      $150 = $149;
      $151 = $150;
      $152 = HEAP32[$151>>2]|0;
      $153 = (($150) + 4)|0;
      $154 = $153;
      $155 = HEAP32[$154>>2]|0;
      $$sink = $152;$$sink300$off32 = $155;
      label = 64;
     } else {
      if (!($1)) {
       $$0 = 0;
       label = 357;
       break L1;
      }
      $156 = ($141&255)>(20);
      if ($156) {
       $198 = $134;$206 = $1049;$228 = $1048;
       break L65;
      }
      do {
       switch ($142|0) {
       case 13:  {
        $arglist_current17 = HEAP32[$ap>>2]|0;
        $171 = HEAP32[$arglist_current17>>2]|0;
        $arglist_next18 = (($arglist_current17) + 4|0);
        HEAP32[$ap>>2] = $arglist_next18;
        $172 = $171&65535;
        $173 = $172 << 16 >> 16;
        $174 = ($173|0)<(0);
        $175 = $174 << 31 >> 31;
        $sext86 = $171 << 16;
        $176 = $sext86 >> 16;
        $177 = $176;
        $1052 = $177;$1053 = $175;
        break L69;
        break;
       }
       case 10:  {
        $arglist_current8 = HEAP32[$ap>>2]|0;
        $158 = HEAP32[$arglist_current8>>2]|0;
        $arglist_next9 = (($arglist_current8) + 4|0);
        HEAP32[$ap>>2] = $arglist_next9;
        $159 = ($158|0)<(0);
        $160 = $159 << 31 >> 31;
        $161 = $158;
        $1052 = $161;$1053 = $160;
        break L69;
        break;
       }
       case 12:  {
        $arglist_current14 = HEAP32[$ap>>2]|0;
        $164 = $arglist_current14;
        $165 = $164;
        $166 = HEAP32[$165>>2]|0;
        $167 = (($164) + 4)|0;
        $168 = $167;
        $169 = HEAP32[$168>>2]|0;
        $arglist_next15 = (($arglist_current14) + 8|0);
        HEAP32[$ap>>2] = $arglist_next15;
        $170 = $166;
        $1052 = $170;$1053 = $169;
        break L69;
        break;
       }
       case 11:  {
        $arglist_current11 = HEAP32[$ap>>2]|0;
        $162 = HEAP32[$arglist_current11>>2]|0;
        $arglist_next12 = (($arglist_current11) + 4|0);
        HEAP32[$ap>>2] = $arglist_next12;
        $163 = $162;
        $1052 = $163;$1053 = 0;
        break L69;
        break;
       }
       case 14:  {
        $arglist_current20 = HEAP32[$ap>>2]|0;
        $178 = HEAP32[$arglist_current20>>2]|0;
        $arglist_next21 = (($arglist_current20) + 4|0);
        HEAP32[$ap>>2] = $arglist_next21;
        $$mask1$i30 = $178 & 65535;
        $179 = $$mask1$i30;
        $1052 = $179;$1053 = 0;
        break L69;
        break;
       }
       case 9:  {
        $arglist_current5 = HEAP32[$ap>>2]|0;
        $157 = HEAP32[$arglist_current5>>2]|0;
        $arglist_next6 = (($arglist_current5) + 4|0);
        HEAP32[$ap>>2] = $arglist_next6;
        $1052 = $157;$1053 = $1048;
        break L69;
        break;
       }
       case 15:  {
        $arglist_current23 = HEAP32[$ap>>2]|0;
        $180 = HEAP32[$arglist_current23>>2]|0;
        $arglist_next24 = (($arglist_current23) + 4|0);
        HEAP32[$ap>>2] = $arglist_next24;
        $181 = $180&255;
        $182 = $181 << 24 >> 24;
        $183 = ($182|0)<(0);
        $184 = $183 << 31 >> 31;
        $sext = $180 << 24;
        $185 = $sext >> 24;
        $186 = $185;
        $1052 = $186;$1053 = $184;
        break L69;
        break;
       }
       case 16:  {
        $arglist_current26 = HEAP32[$ap>>2]|0;
        $187 = HEAP32[$arglist_current26>>2]|0;
        $arglist_next27 = (($arglist_current26) + 4|0);
        HEAP32[$ap>>2] = $arglist_next27;
        $$mask$i31 = $187 & 255;
        $188 = $$mask$i31;
        $1052 = $188;$1053 = 0;
        break L69;
        break;
       }
       case 17:  {
        $arglist_current29 = HEAP32[$ap>>2]|0;
        HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current29>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current29+4>>2];$189 = +HEAPF64[tempDoublePtr>>3];
        $arglist_next30 = (($arglist_current29) + 8|0);
        HEAP32[$ap>>2] = $arglist_next30;
        HEAPF64[tempDoublePtr>>3] = $189;$190 = HEAP32[tempDoublePtr>>2]|0;
        $191 = HEAP32[tempDoublePtr+4>>2]|0;
        $192 = $190;
        $1052 = $192;$1053 = $191;
        break L69;
        break;
       }
       case 18:  {
        $arglist_current32 = HEAP32[$ap>>2]|0;
        HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current32>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current32+4>>2];$193 = +HEAPF64[tempDoublePtr>>3];
        $arglist_next33 = (($arglist_current32) + 8|0);
        HEAP32[$ap>>2] = $arglist_next33;
        HEAPF64[tempDoublePtr>>3] = $193;$194 = HEAP32[tempDoublePtr>>2]|0;
        $195 = HEAP32[tempDoublePtr+4>>2]|0;
        $$sink = $194;$$sink300$off32 = $195;
        label = 64;
        break L69;
        break;
       }
       default: {
        $1052 = $1049;$1053 = $1048;
        break L69;
       }
       }
      } while(0);
     }
    } while(0);
    if ((label|0) == 64) {
     label = 0;
     $196 = $$sink;
     if ($1) {
      $1052 = $196;$1053 = $$sink300$off32;
     } else {
      $1048 = $$sink300$off32;$1049 = $196;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
      continue L1;
     }
    }
    $$pre292 = HEAP8[$135>>0]|0;
    $198 = $$pre292;$206 = $1052;$228 = $1053;
   }
  } while(0);
  $197 = $198 << 24 >> 24;
  $199 = ($st$0|0)==(0);
  if ($199) {
   $t$0 = $197;
  } else {
   $200 = $197 & 15;
   $201 = ($200|0)==(3);
   $202 = $197 & -33;
   $$ = $201 ? $202 : $197;
   $t$0 = $$;
  }
  $203 = $fl$1 & 8192;
  $204 = ($203|0)==(0);
  $205 = $fl$1 & -65537;
  $fl$1$ = $204 ? $fl$1 : $205;
  L92: do {
   switch ($t$0|0) {
   case 88: case 120:  {
    $fl$3 = $fl$1$;$p$1 = $p$0;$t$1 = $t$0;
    label = 78;
    break;
   }
   case 109:  {
    $320 = (___errno_location()|0);
    $321 = HEAP32[$320>>2]|0;
    $322 = (_strerror(($321|0))|0);
    $a$1 = $322;
    label = 100;
    break;
   }
   case 112:  {
    $221 = ($p$0>>>0)>(8);
    $222 = $221 ? $p$0 : 8;
    $223 = $fl$1$ | 8;
    $fl$3 = $223;$p$1 = $222;$t$1 = 120;
    label = 78;
    break;
   }
   case 105: case 100:  {
    $266 = $206;
    $267 = ($228|0)<(0);
    if ($267) {
     $268 = (_i64Subtract(0,0,($266|0),($228|0))|0);
     $269 = tempRet0;
     $270 = $268;
     $276 = $270;$278 = $269;$pl$0 = 1;$prefix$0 = 31464;
     label = 90;
     break L92;
    }
    $271 = $fl$1$ & 2048;
    $272 = ($271|0)==(0);
    if ($272) {
     $273 = $fl$1$ & 1;
     $274 = ($273|0)==(0);
     $$16 = $274 ? 31464 : ((31464 + 2|0));
     $276 = $206;$278 = $228;$pl$0 = $273;$prefix$0 = $$16;
     label = 90;
    } else {
     $276 = $206;$278 = $228;$pl$0 = 1;$prefix$0 = ((31464 + 1|0));
     label = 90;
    }
    break;
   }
   case 115:  {
    $323 = ($206|0)==(0|0);
    $$18 = $323 ? 31480 : $206;
    $a$1 = $$18;
    label = 100;
    break;
   }
   case 99:  {
    $318 = $206;
    $319 = $318&255;
    HEAP8[$4>>0] = $319;
    $1054 = $228;$1055 = $206;$a$2 = $4;$fl$6 = $205;$p$5 = 1;$pl$2 = 0;$prefix$2 = 31464;$z$2 = $2;
    break;
   }
   case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
    $367 = $206;
    HEAP32[tempDoublePtr>>2] = $367;HEAP32[tempDoublePtr+4>>2] = $228;$368 = +HEAPF64[tempDoublePtr>>3];
    HEAP32[$e2$i>>2] = 0;
    $369 = ($228|0)<(0);
    if ($369) {
     $370 = -$368;
     $$06$i = $370;$pl$0$i = 1;$prefix$0$i = 31488;
    } else {
     $371 = $fl$1$ & 2048;
     $372 = ($371|0)==(0);
     if ($372) {
      $373 = $fl$1$ & 1;
      $374 = ($373|0)==(0);
      $$$i = $374 ? ((31488 + 1|0)) : ((31488 + 6|0));
      $$06$i = $368;$pl$0$i = $373;$prefix$0$i = $$$i;
     } else {
      $$06$i = $368;$pl$0$i = 1;$prefix$0$i = ((31488 + 3|0));
     }
    }
    HEAPF64[tempDoublePtr>>3] = $$06$i;$375 = HEAP32[tempDoublePtr>>2]|0;
    $376 = HEAP32[tempDoublePtr+4>>2]|0;
    $377 = $376 & 2146435072;
    $378 = ($377>>>0)<(2146435072);
    $379 = ($377|0)==(2146435072);
    $380 = (0)<(0);
    $381 = $379 & $380;
    $382 = $378 | $381;
    if (!($382)) {
     $383 = $t$0 & 32;
     $384 = ($383|0)!=(0);
     $385 = $384 ? 31512 : 31520;
     $386 = ($$06$i != $$06$i) | (0.0 != 0.0);
     if ($386) {
      $387 = $384 ? 31528 : 31536;
      $pl$1$i = 0;$s1$0$i = $387;
     } else {
      $pl$1$i = $pl$0$i;$s1$0$i = $385;
     }
     $388 = (($pl$1$i) + 3)|0;
     $389 = $fl$1$ & 8192;
     $390 = ($389|0)==(0);
     $391 = ($388|0)<($w$1|0);
     $or$cond$i36$i = $390 & $391;
     if ($or$cond$i36$i) {
      $392 = (($w$1) - ($388))|0;
      $393 = ($392>>>0)>(256);
      $394 = $393 ? 256 : $392;
      _memset(($pad$i|0),32,($394|0))|0;
      $395 = ($392>>>0)>(255);
      if ($395) {
       $$01$i37$i = $392;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $396 = (($$01$i37$i) + -256)|0;
        $397 = ($396>>>0)>(255);
        if ($397) {
         $$01$i37$i = $396;
        } else {
         $$0$lcssa$i39$i = $396;
         break;
        }
       }
      } else {
       $$0$lcssa$i39$i = $392;
      }
      (___fwritex($pad$i,$$0$lcssa$i39$i,$f)|0);
     }
     (___fwritex($prefix$0$i,$pl$1$i,$f)|0);
     (___fwritex($s1$0$i,3,$f)|0);
     $398 = $fl$1$ & 73728;
     $399 = ($398|0)==(8192);
     $or$cond$i43$i = $399 & $391;
     if ($or$cond$i43$i) {
      $400 = (($w$1) - ($388))|0;
      $401 = ($400>>>0)>(256);
      $402 = $401 ? 256 : $400;
      _memset(($pad$i|0),32,($402|0))|0;
      $403 = ($400>>>0)>(255);
      if ($403) {
       $$01$i44$i = $400;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $404 = (($$01$i44$i) + -256)|0;
        $405 = ($404>>>0)>(255);
        if ($405) {
         $$01$i44$i = $404;
        } else {
         $$0$lcssa$i46$i = $404;
         break;
        }
       }
      } else {
       $$0$lcssa$i46$i = $400;
      }
      (___fwritex($pad$i,$$0$lcssa$i46$i,$f)|0);
     }
     $w$$i = $391 ? $w$1 : $388;
     $1048 = $228;$1049 = $206;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $w$$i;$l10n$0 = $l10n$3;
     continue L1;
    }
    $406 = (+_frexpl($$06$i,$e2$i));
    $407 = $406 * 2.0;
    $408 = $407 != 0.0;
    if ($408) {
     $409 = HEAP32[$e2$i>>2]|0;
     $410 = (($409) + -1)|0;
     HEAP32[$e2$i>>2] = $410;
    }
    $411 = $t$0 | 32;
    $412 = ($411|0)==(97);
    if ($412) {
     $413 = $t$0 & 32;
     $414 = ($413|0)==(0);
     $415 = (($prefix$0$i) + 9|0);
     $prefix$0$$i = $414 ? $prefix$0$i : $415;
     $416 = $pl$0$i | 2;
     $417 = ($p$0>>>0)>(11);
     $418 = (12 - ($p$0))|0;
     $re$0$i = $417 ? 0 : $418;
     $419 = ($re$0$i|0)==(0);
     do {
      if ($419) {
       $$1$i = $407;
      } else {
       $re$1166$i = $re$0$i;$round$0165$i = 8.0;
       while(1) {
        $420 = (($re$1166$i) + -1)|0;
        $421 = $round$0165$i * 16.0;
        $422 = ($420|0)==(0);
        if ($422) {
         break;
        } else {
         $re$1166$i = $420;$round$0165$i = $421;
        }
       }
       $423 = HEAP8[$prefix$0$$i>>0]|0;
       $424 = ($423<<24>>24)==(45);
       if ($424) {
        $425 = -$407;
        $426 = $425 - $421;
        $427 = $421 + $426;
        $428 = -$427;
        $$1$i = $428;
        break;
       } else {
        $429 = $407 + $421;
        $430 = $429 - $421;
        $$1$i = $430;
        break;
       }
      }
     } while(0);
     $431 = HEAP32[$e2$i>>2]|0;
     $432 = ($431|0)<(0);
     $433 = (0 - ($431))|0;
     $434 = $432 ? $433 : $431;
     $435 = ($434|0)<(0);
     if ($435) {
      $436 = ($434|0)<(0);
      $437 = $436 << 31 >> 31;
      $$05$i$i = $6;$438 = $434;$439 = $437;
      while(1) {
       $440 = (___uremdi3(($438|0),($439|0),10,0)|0);
       $441 = tempRet0;
       $442 = $440 | 48;
       $443 = $442&255;
       $444 = (($$05$i$i) + -1|0);
       HEAP8[$444>>0] = $443;
       $445 = (___udivdi3(($438|0),($439|0),10,0)|0);
       $446 = tempRet0;
       $447 = ($439>>>0)>(9);
       $448 = ($439|0)==(9);
       $449 = ($438>>>0)>(4294967295);
       $450 = $448 & $449;
       $451 = $447 | $450;
       if ($451) {
        $$05$i$i = $444;$438 = $445;$439 = $446;
       } else {
        break;
       }
      }
      $$0$lcssa$i49$i = $444;$$01$lcssa$off0$i$i = $445;
     } else {
      $$0$lcssa$i49$i = $6;$$01$lcssa$off0$i$i = $434;
     }
     $452 = ($$01$lcssa$off0$i$i|0)==(0);
     if ($452) {
      $$1$lcssa$i$i = $$0$lcssa$i49$i;
     } else {
      $$12$i$i = $$0$lcssa$i49$i;$y$03$i$i = $$01$lcssa$off0$i$i;
      while(1) {
       $453 = (($y$03$i$i>>>0) % 10)&-1;
       $454 = $453 | 48;
       $455 = $454&255;
       $456 = (($$12$i$i) + -1|0);
       HEAP8[$456>>0] = $455;
       $457 = (($y$03$i$i>>>0) / 10)&-1;
       $458 = ($y$03$i$i>>>0)<(10);
       if ($458) {
        $$1$lcssa$i$i = $456;
        break;
       } else {
        $$12$i$i = $456;$y$03$i$i = $457;
       }
      }
     }
     $459 = ($$1$lcssa$i$i|0)==($6|0);
     if ($459) {
      HEAP8[$7>>0] = 48;
      $estr$0$i = $7;
     } else {
      $estr$0$i = $$1$lcssa$i$i;
     }
     $460 = HEAP32[$e2$i>>2]|0;
     $461 = $460 >> 31;
     $462 = $461 & 2;
     $463 = (($462) + 43)|0;
     $464 = $463&255;
     $465 = (($estr$0$i) + -1|0);
     HEAP8[$465>>0] = $464;
     $466 = (($t$0) + 15)|0;
     $467 = $466&255;
     $468 = (($estr$0$i) + -2|0);
     HEAP8[$468>>0] = $467;
     $469 = ($p$0|0)>(0);
     $470 = $fl$1$ & 8;
     $471 = ($470|0)==(0);
     if ($469) {
      if ($471) {
       $$2$us$us$i = $$1$i;$s$0$us$us$i = $buf$i;
       while(1) {
        $472 = (~~(($$2$us$us$i)));
        $473 = (31544 + ($472)|0);
        $474 = HEAP8[$473>>0]|0;
        $475 = $474&255;
        $476 = $475 | $413;
        $477 = $476&255;
        $478 = (($s$0$us$us$i) + 1|0);
        HEAP8[$s$0$us$us$i>>0] = $477;
        $479 = (+($472|0));
        $480 = $$2$us$us$i - $479;
        $481 = $480 * 16.0;
        $482 = $478;
        $483 = (($482) - ($0))|0;
        $484 = ($483|0)==(1);
        if ($484) {
         $485 = (($s$0$us$us$i) + 2|0);
         HEAP8[$478>>0] = 46;
         $s$1$us$us$i = $485;
        } else {
         $s$1$us$us$i = $478;
        }
        $486 = $481 != 0.0;
        if ($486) {
         $$2$us$us$i = $481;$s$0$us$us$i = $s$1$us$us$i;
        } else {
         $s$1$lcssa$i = $s$1$us$us$i;
         break;
        }
       }
      } else {
       $$2$us$i = $$1$i;$s$0$us$i = $buf$i;
       while(1) {
        $487 = (~~(($$2$us$i)));
        $488 = (31544 + ($487)|0);
        $489 = HEAP8[$488>>0]|0;
        $490 = $489&255;
        $491 = $490 | $413;
        $492 = $491&255;
        $493 = (($s$0$us$i) + 1|0);
        HEAP8[$s$0$us$i>>0] = $492;
        $494 = (+($487|0));
        $495 = $$2$us$i - $494;
        $496 = $495 * 16.0;
        $497 = $493;
        $498 = (($497) - ($0))|0;
        $499 = ($498|0)==(1);
        if ($499) {
         $500 = (($s$0$us$i) + 2|0);
         HEAP8[$493>>0] = 46;
         $s$1$us$i = $500;
        } else {
         $s$1$us$i = $493;
        }
        $501 = $496 != 0.0;
        if ($501) {
         $$2$us$i = $496;$s$0$us$i = $s$1$us$i;
        } else {
         $s$1$lcssa$i = $s$1$us$i;
         break;
        }
       }
      }
     } else {
      if ($471) {
       $$2$us160$i = $$1$i;$s$0$us159$i = $buf$i;
       while(1) {
        $502 = (~~(($$2$us160$i)));
        $503 = (31544 + ($502)|0);
        $504 = HEAP8[$503>>0]|0;
        $505 = $504&255;
        $506 = $505 | $413;
        $507 = $506&255;
        $508 = (($s$0$us159$i) + 1|0);
        HEAP8[$s$0$us159$i>>0] = $507;
        $509 = (+($502|0));
        $510 = $$2$us160$i - $509;
        $511 = $510 * 16.0;
        $512 = $508;
        $513 = (($512) - ($0))|0;
        $514 = ($513|0)==(1);
        $515 = $511 != 0.0;
        $or$cond$i72 = $514 & $515;
        if ($or$cond$i72) {
         $516 = (($s$0$us159$i) + 2|0);
         HEAP8[$508>>0] = 46;
         $s$1$us161$i = $516;
        } else {
         $s$1$us161$i = $508;
        }
        if ($515) {
         $$2$us160$i = $511;$s$0$us159$i = $s$1$us161$i;
        } else {
         $s$1$lcssa$i = $s$1$us161$i;
         break;
        }
       }
      } else {
       $$2$i = $$1$i;$s$0$i = $buf$i;
       while(1) {
        $517 = (~~(($$2$i)));
        $518 = (31544 + ($517)|0);
        $519 = HEAP8[$518>>0]|0;
        $520 = $519&255;
        $521 = $520 | $413;
        $522 = $521&255;
        $523 = (($s$0$i) + 1|0);
        HEAP8[$s$0$i>>0] = $522;
        $524 = (+($517|0));
        $525 = $$2$i - $524;
        $526 = $525 * 16.0;
        $527 = $523;
        $528 = (($527) - ($0))|0;
        $529 = ($528|0)==(1);
        if ($529) {
         $530 = (($s$0$i) + 2|0);
         HEAP8[$523>>0] = 46;
         $s$1$i = $530;
        } else {
         $s$1$i = $523;
        }
        $531 = $526 != 0.0;
        if ($531) {
         $$2$i = $526;$s$0$i = $s$1$i;
        } else {
         $s$1$lcssa$i = $s$1$i;
         break;
        }
       }
      }
     }
     $532 = ($p$0|0)==(0);
     $$pre312$i = $s$1$lcssa$i;
     do {
      if ($532) {
       label = 174;
      } else {
       $533 = (($10) + ($$pre312$i))|0;
       $534 = ($533|0)<($p$0|0);
       if (!($534)) {
        label = 174;
        break;
       }
       $535 = $468;
       $536 = (($11) + ($p$0))|0;
       $537 = (($536) - ($535))|0;
       $l$0$i = $537;
      }
     } while(0);
     if ((label|0) == 174) {
      label = 0;
      $538 = $468;
      $539 = (($9) - ($538))|0;
      $540 = (($539) + ($$pre312$i))|0;
      $l$0$i = $540;
     }
     $541 = (($l$0$i) + ($416))|0;
     $542 = $fl$1$ & 73728;
     $543 = ($542|0)==(0);
     $544 = ($541|0)<($w$1|0);
     $or$cond$i53$i = $543 & $544;
     if ($or$cond$i53$i) {
      $545 = (($w$1) - ($541))|0;
      $546 = ($545>>>0)>(256);
      $547 = $546 ? 256 : $545;
      _memset(($pad$i|0),32,($547|0))|0;
      $548 = ($545>>>0)>(255);
      if ($548) {
       $$01$i54$i = $545;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $549 = (($$01$i54$i) + -256)|0;
        $550 = ($549>>>0)>(255);
        if ($550) {
         $$01$i54$i = $549;
        } else {
         $$0$lcssa$i56$i = $549;
         break;
        }
       }
      } else {
       $$0$lcssa$i56$i = $545;
      }
      (___fwritex($pad$i,$$0$lcssa$i56$i,$f)|0);
     }
     (___fwritex($prefix$0$$i,$416,$f)|0);
     $551 = ($542|0)==(65536);
     $or$cond$i60$i = $551 & $544;
     if ($or$cond$i60$i) {
      $552 = (($w$1) - ($541))|0;
      $553 = ($552>>>0)>(256);
      $554 = $553 ? 256 : $552;
      _memset(($pad$i|0),48,($554|0))|0;
      $555 = ($552>>>0)>(255);
      if ($555) {
       $$01$i61$i = $552;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $556 = (($$01$i61$i) + -256)|0;
        $557 = ($556>>>0)>(255);
        if ($557) {
         $$01$i61$i = $556;
        } else {
         $$0$lcssa$i63$i = $556;
         break;
        }
       }
      } else {
       $$0$lcssa$i63$i = $552;
      }
      (___fwritex($pad$i,$$0$lcssa$i63$i,$f)|0);
     }
     $558 = (($$pre312$i) - ($0))|0;
     (___fwritex($buf$i,$558,$f)|0);
     $559 = $468;
     $560 = (($8) - ($559))|0;
     $561 = (($l$0$i) - ($560))|0;
     $562 = (($561) - ($558))|0;
     $563 = ($562|0)>(0);
     if ($563) {
      $564 = ($562>>>0)>(256);
      $565 = $564 ? 256 : $562;
      _memset(($pad$i|0),48,($565|0))|0;
      $566 = ($562>>>0)>(255);
      if ($566) {
       $$01$i67$i = $562;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $567 = (($$01$i67$i) + -256)|0;
        $568 = ($567>>>0)>(255);
        if ($568) {
         $$01$i67$i = $567;
        } else {
         $$0$lcssa$i69$i = $567;
         break;
        }
       }
      } else {
       $$0$lcssa$i69$i = $562;
      }
      (___fwritex($pad$i,$$0$lcssa$i69$i,$f)|0);
     }
     (___fwritex($468,$560,$f)|0);
     $569 = ($542|0)==(8192);
     $or$cond$i73$i = $569 & $544;
     if ($or$cond$i73$i) {
      $570 = (($w$1) - ($541))|0;
      $571 = ($570>>>0)>(256);
      $572 = $571 ? 256 : $570;
      _memset(($pad$i|0),32,($572|0))|0;
      $573 = ($570>>>0)>(255);
      if ($573) {
       $$01$i74$i = $570;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $574 = (($$01$i74$i) + -256)|0;
        $575 = ($574>>>0)>(255);
        if ($575) {
         $$01$i74$i = $574;
        } else {
         $$0$lcssa$i76$i = $574;
         break;
        }
       }
      } else {
       $$0$lcssa$i76$i = $570;
      }
      (___fwritex($pad$i,$$0$lcssa$i76$i,$f)|0);
     }
     $w$18$i = $544 ? $w$1 : $541;
     $1048 = $228;$1049 = $206;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $w$18$i;$l10n$0 = $l10n$3;
     continue L1;
    }
    $576 = ($p$0|0)<(0);
    $$p$i = $576 ? 6 : $p$0;
    if ($408) {
     $577 = $407 * 268435456.0;
     $578 = HEAP32[$e2$i>>2]|0;
     $579 = (($578) + -28)|0;
     HEAP32[$e2$i>>2] = $579;
     $$3$i = $577;$581 = $579;
    } else {
     $$pre$i = HEAP32[$e2$i>>2]|0;
     $$3$i = $407;$581 = $$pre$i;
    }
    $580 = ($581|0)<(0);
    $$32$i = $580 ? $big$i : $12;
    $$4$i = $$3$i;$z$0$i = $$32$i;
    while(1) {
     $582 = (~~(($$4$i))>>>0);
     HEAP32[$z$0$i>>2] = $582;
     $583 = (($z$0$i) + 4|0);
     $584 = (+($582>>>0));
     $585 = $$4$i - $584;
     $586 = $585 * 1.0E+9;
     $587 = $586 != 0.0;
     if ($587) {
      $$4$i = $586;$z$0$i = $583;
     } else {
      break;
     }
    }
    $$pr$i = HEAP32[$e2$i>>2]|0;
    $588 = ($$pr$i|0)>(0);
    if ($588) {
     $590 = $$pr$i;$a$1257$i = $$32$i;$z$1256$i = $583;
     while(1) {
      $589 = ($590|0)>(29);
      $591 = $589 ? 29 : $590;
      $592 = (($z$1256$i) + -4|0);
      $593 = ($592>>>0)<($a$1257$i>>>0);
      do {
       if ($593) {
        $594 = HEAP32[$592>>2]|0;
        $595 = ($594|0)==(0);
        $596 = ($z$1256$i>>>0)>($a$1257$i>>>0);
        $or$cond19315$i = $595 & $596;
        $z$2316$i = $or$cond19315$i ? $592 : $z$1256$i;
        $a$2$i = $a$1257$i;$z$2317$i = $z$2316$i;
       } else {
        $carry$0250$i = 0;$d$0251$i = $592;
        while(1) {
         $597 = HEAP32[$d$0251$i>>2]|0;
         $598 = (_bitshift64Shl(($597|0),0,($591|0))|0);
         $599 = tempRet0;
         $600 = (_i64Add(($598|0),($599|0),($carry$0250$i|0),0)|0);
         $601 = tempRet0;
         $602 = (___uremdi3(($600|0),($601|0),1000000000,0)|0);
         $603 = tempRet0;
         HEAP32[$d$0251$i>>2] = $602;
         $604 = (___udivdi3(($600|0),($601|0),1000000000,0)|0);
         $605 = tempRet0;
         $606 = (($d$0251$i) + -4|0);
         $607 = ($606>>>0)<($a$1257$i>>>0);
         if ($607) {
          break;
         } else {
          $carry$0250$i = $604;$d$0251$i = $606;
         }
        }
        $608 = HEAP32[$592>>2]|0;
        $609 = ($608|0)==(0);
        $610 = ($z$1256$i>>>0)>($a$1257$i>>>0);
        $or$cond19$i = $609 & $610;
        $z$2$i = $or$cond19$i ? $592 : $z$1256$i;
        $611 = ($604|0)==(0);
        if ($611) {
         $a$2$i = $a$1257$i;$z$2317$i = $z$2$i;
         break;
        }
        $612 = (($a$1257$i) + -4|0);
        HEAP32[$612>>2] = $604;
        $a$2$i = $612;$z$2317$i = $z$2$i;
       }
      } while(0);
      $613 = HEAP32[$e2$i>>2]|0;
      $614 = (($613) - ($591))|0;
      HEAP32[$e2$i>>2] = $614;
      $615 = ($614|0)>(0);
      if ($615) {
       $590 = $614;$a$1257$i = $a$2$i;$z$1256$i = $z$2317$i;
      } else {
       $$pr147$i = $614;$a$1$lcssa$i = $a$2$i;$z$1$lcssa$i = $z$2317$i;
       break;
      }
     }
    } else {
     $$pr147$i = $$pr$i;$a$1$lcssa$i = $$32$i;$z$1$lcssa$i = $583;
    }
    $616 = ($$pr147$i|0)<(0);
    L234: do {
     if ($616) {
      $617 = ($411|0)==(102);
      $618 = (($$p$i|0) / 9)&-1;
      $619 = (($618) + 2)|0;
      if ($617) {
       $620 = $$32$i;
       $621 = (($$32$i) + ($619<<2)|0);
       $623 = $$pr147$i;$a$3245$us$i = $a$1$lcssa$i;$z$3244$us$i = $z$1$lcssa$i;
       while(1) {
        $622 = (0 - ($623))|0;
        $624 = ($622|0)>(9);
        $$20$us$i = $624 ? 9 : $622;
        $625 = ($a$3245$us$i>>>0)<($z$3244$us$i>>>0);
        do {
         if ($625) {
          $650 = 1 << $$20$us$i;
          $644 = (($650) + -1)|0;
          $647 = 1000000000 >>> $$20$us$i;
          $carry3$0239$us$i = 0;$d$1238$us$i = $a$3245$us$i;
          while(1) {
           $642 = HEAP32[$d$1238$us$i>>2]|0;
           $643 = $642 & $644;
           $645 = $642 >>> $$20$us$i;
           $646 = (($645) + ($carry3$0239$us$i))|0;
           HEAP32[$d$1238$us$i>>2] = $646;
           $633 = Math_imul($643, $647)|0;
           $648 = (($d$1238$us$i) + 4|0);
           $649 = ($648>>>0)<($z$3244$us$i>>>0);
           if ($649) {
            $carry3$0239$us$i = $633;$d$1238$us$i = $648;
           } else {
            break;
           }
          }
          $629 = HEAP32[$a$3245$us$i>>2]|0;
          $630 = ($629|0)==(0);
          $631 = (($a$3245$us$i) + 4|0);
          $$a$3$us$i = $630 ? $631 : $a$3245$us$i;
          $632 = ($633|0)==(0);
          if ($632) {
           $$a$3$us320$i = $$a$3$us$i;$z$4$us$i = $z$3244$us$i;
           break;
          }
          $634 = (($z$3244$us$i) + 4|0);
          HEAP32[$z$3244$us$i>>2] = $633;
          $$a$3$us320$i = $$a$3$us$i;$z$4$us$i = $634;
         } else {
          $626 = HEAP32[$a$3245$us$i>>2]|0;
          $627 = ($626|0)==(0);
          $628 = (($a$3245$us$i) + 4|0);
          $$a$3$us319$i = $627 ? $628 : $a$3245$us$i;
          $$a$3$us320$i = $$a$3$us319$i;$z$4$us$i = $z$3244$us$i;
         }
        } while(0);
        $635 = $z$4$us$i;
        $636 = (($635) - ($620))|0;
        $637 = $636 >> 2;
        $638 = ($637|0)>($619|0);
        $$z$4$us$i = $638 ? $621 : $z$4$us$i;
        $639 = HEAP32[$e2$i>>2]|0;
        $640 = (($639) + ($$20$us$i))|0;
        HEAP32[$e2$i>>2] = $640;
        $641 = ($640|0)<(0);
        if ($641) {
         $623 = $640;$a$3245$us$i = $$a$3$us320$i;$z$3244$us$i = $$z$4$us$i;
        } else {
         $a$3$lcssa$i = $$a$3$us320$i;$z$3$lcssa$i = $$z$4$us$i;
         break L234;
        }
       }
      } else {
       $652 = $$pr147$i;$a$3245$i = $a$1$lcssa$i;$z$3244$i = $z$1$lcssa$i;
      }
      while(1) {
       $651 = (0 - ($652))|0;
       $653 = ($651|0)>(9);
       $$20$i = $653 ? 9 : $651;
       $654 = ($a$3245$i>>>0)<($z$3244$i>>>0);
       do {
        if ($654) {
         $658 = 1 << $$20$i;
         $659 = (($658) + -1)|0;
         $660 = 1000000000 >>> $$20$i;
         $carry3$0239$i = 0;$d$1238$i = $a$3245$i;
         while(1) {
          $661 = HEAP32[$d$1238$i>>2]|0;
          $662 = $661 & $659;
          $663 = $661 >>> $$20$i;
          $664 = (($663) + ($carry3$0239$i))|0;
          HEAP32[$d$1238$i>>2] = $664;
          $665 = Math_imul($662, $660)|0;
          $666 = (($d$1238$i) + 4|0);
          $667 = ($666>>>0)<($z$3244$i>>>0);
          if ($667) {
           $carry3$0239$i = $665;$d$1238$i = $666;
          } else {
           break;
          }
         }
         $668 = HEAP32[$a$3245$i>>2]|0;
         $669 = ($668|0)==(0);
         $670 = (($a$3245$i) + 4|0);
         $$a$3$i = $669 ? $670 : $a$3245$i;
         $671 = ($665|0)==(0);
         if ($671) {
          $$a$3322$i = $$a$3$i;$z$4$i = $z$3244$i;
          break;
         }
         $672 = (($z$3244$i) + 4|0);
         HEAP32[$z$3244$i>>2] = $665;
         $$a$3322$i = $$a$3$i;$z$4$i = $672;
        } else {
         $655 = HEAP32[$a$3245$i>>2]|0;
         $656 = ($655|0)==(0);
         $657 = (($a$3245$i) + 4|0);
         $$a$3321$i = $656 ? $657 : $a$3245$i;
         $$a$3322$i = $$a$3321$i;$z$4$i = $z$3244$i;
        }
       } while(0);
       $673 = $z$4$i;
       $674 = $$a$3322$i;
       $675 = (($673) - ($674))|0;
       $676 = $675 >> 2;
       $677 = ($676|0)>($619|0);
       if ($677) {
        $678 = (($$a$3322$i) + ($619<<2)|0);
        $z$5$i = $678;
       } else {
        $z$5$i = $z$4$i;
       }
       $679 = HEAP32[$e2$i>>2]|0;
       $680 = (($679) + ($$20$i))|0;
       HEAP32[$e2$i>>2] = $680;
       $681 = ($680|0)<(0);
       if ($681) {
        $652 = $680;$a$3245$i = $$a$3322$i;$z$3244$i = $z$5$i;
       } else {
        $a$3$lcssa$i = $$a$3322$i;$z$3$lcssa$i = $z$5$i;
        break;
       }
      }
     } else {
      $a$3$lcssa$i = $a$1$lcssa$i;$z$3$lcssa$i = $z$1$lcssa$i;
     }
    } while(0);
    $682 = ($a$3$lcssa$i>>>0)<($z$3$lcssa$i>>>0);
    $683 = $$32$i;
    do {
     if ($682) {
      $684 = $a$3$lcssa$i;
      $685 = (($683) - ($684))|0;
      $686 = $685 >> 2;
      $687 = ($686*9)|0;
      $688 = HEAP32[$a$3$lcssa$i>>2]|0;
      $689 = ($688>>>0)<(10);
      if ($689) {
       $e$1$i = $687;
       break;
      } else {
       $e$0233$i = $687;$i$0234$i = 10;
      }
      while(1) {
       $690 = ($i$0234$i*10)|0;
       $691 = (($e$0233$i) + 1)|0;
       $692 = ($688>>>0)<($690>>>0);
       if ($692) {
        $e$1$i = $691;
        break;
       } else {
        $e$0233$i = $691;$i$0234$i = $690;
       }
      }
     } else {
      $e$1$i = 0;
     }
    } while(0);
    $693 = ($411|0)!=(102);
    $694 = $693 ? $e$1$i : 0;
    $695 = (($$p$i) - ($694))|0;
    $696 = ($411|0)==(103);
    $697 = ($$p$i|0)!=(0);
    $$21$i = $696 & $697;
    $$neg152$i = $$21$i << 31 >> 31;
    $698 = (($695) + ($$neg152$i))|0;
    $699 = $z$3$lcssa$i;
    $700 = (($699) - ($683))|0;
    $701 = $700 >> 2;
    $702 = ($701*9)|0;
    $703 = (($702) + -9)|0;
    $704 = ($698|0)<($703|0);
    if ($704) {
     $705 = (($698) + 9216)|0;
     $706 = (($705|0) / 9)&-1;
     $$sum$i = (($706) + -1023)|0;
     $707 = (($$32$i) + ($$sum$i<<2)|0);
     $708 = (($705|0) % 9)&-1;
     $j$0225$i = (($708) + 1)|0;
     $709 = ($j$0225$i|0)<(9);
     if ($709) {
      $i$1226$i = 10;$j$0227$i = $j$0225$i;
      while(1) {
       $710 = ($i$1226$i*10)|0;
       $j$0$i = (($j$0227$i) + 1)|0;
       $exitcond$i = ($j$0$i|0)==(9);
       if ($exitcond$i) {
        $i$1$lcssa$i = $710;
        break;
       } else {
        $i$1226$i = $710;$j$0227$i = $j$0$i;
       }
      }
     } else {
      $i$1$lcssa$i = 10;
     }
     $711 = HEAP32[$707>>2]|0;
     $712 = (($711>>>0) % ($i$1$lcssa$i>>>0))&-1;
     $713 = ($712|0)==(0);
     if ($713) {
      $$sum14$i = (($706) + -1022)|0;
      $714 = (($$32$i) + ($$sum14$i<<2)|0);
      $715 = ($714|0)==($z$3$lcssa$i|0);
      if ($715) {
       $a$6$i = $a$3$lcssa$i;$d$3$i = $707;$e$3$i = $e$1$i;
      } else {
       label = 232;
      }
     } else {
      label = 232;
     }
     do {
      if ((label|0) == 232) {
       label = 0;
       $716 = (($711>>>0) / ($i$1$lcssa$i>>>0))&-1;
       $717 = $716 & 1;
       $718 = ($717|0)==(0);
       $$22$i = $718 ? 9007199254740992.0 : 9007199254740994.0;
       $719 = (($i$1$lcssa$i|0) / 2)&-1;
       $720 = ($712>>>0)<($719>>>0);
       do {
        if ($720) {
         $small$0$i = 0.5;
        } else {
         $721 = ($712|0)==($719|0);
         if ($721) {
          $$sum15$i = (($706) + -1022)|0;
          $722 = (($$32$i) + ($$sum15$i<<2)|0);
          $723 = ($722|0)==($z$3$lcssa$i|0);
          if ($723) {
           $small$0$i = 1.0;
           break;
          }
         }
         $small$0$i = 1.5;
        }
       } while(0);
       $724 = ($pl$0$i|0)==(0);
       do {
        if ($724) {
         $round6$1$i = $$22$i;$small$1$i = $small$0$i;
        } else {
         $725 = HEAP8[$prefix$0$i>>0]|0;
         $726 = ($725<<24>>24)==(45);
         if (!($726)) {
          $round6$1$i = $$22$i;$small$1$i = $small$0$i;
          break;
         }
         $727 = $$22$i * -1.0;
         $728 = $small$0$i * -1.0;
         $round6$1$i = $727;$small$1$i = $728;
        }
       } while(0);
       $729 = (($711) - ($712))|0;
       HEAP32[$707>>2] = $729;
       $730 = $round6$1$i + $small$1$i;
       $731 = $730 != $round6$1$i;
       if (!($731)) {
        $a$6$i = $a$3$lcssa$i;$d$3$i = $707;$e$3$i = $e$1$i;
        break;
       }
       $732 = (($729) + ($i$1$lcssa$i))|0;
       HEAP32[$707>>2] = $732;
       $733 = ($732>>>0)>(999999999);
       if ($733) {
        $d$2220$i = $707;
        while(1) {
         $734 = (($d$2220$i) + -4|0);
         HEAP32[$d$2220$i>>2] = 0;
         $735 = HEAP32[$734>>2]|0;
         $736 = (($735) + 1)|0;
         HEAP32[$734>>2] = $736;
         $737 = ($736>>>0)>(999999999);
         if ($737) {
          $d$2220$i = $734;
         } else {
          $d$2$lcssa$i = $734;
          break;
         }
        }
       } else {
        $d$2$lcssa$i = $707;
       }
       $738 = ($d$2$lcssa$i>>>0)<($a$3$lcssa$i>>>0);
       $d$2$a$3$i = $738 ? $d$2$lcssa$i : $a$3$lcssa$i;
       $739 = $d$2$a$3$i;
       $740 = (($683) - ($739))|0;
       $741 = $740 >> 2;
       $742 = ($741*9)|0;
       $743 = HEAP32[$d$2$a$3$i>>2]|0;
       $744 = ($743>>>0)<(10);
       if ($744) {
        $a$6$i = $d$2$a$3$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $742;
        break;
       } else {
        $e$2215$i = $742;$i$2216$i = 10;
       }
       while(1) {
        $745 = ($i$2216$i*10)|0;
        $746 = (($e$2215$i) + 1)|0;
        $747 = ($743>>>0)<($745>>>0);
        if ($747) {
         $a$6$i = $d$2$a$3$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $746;
         break;
        } else {
         $e$2215$i = $746;$i$2216$i = $745;
        }
       }
      }
     } while(0);
     $748 = (($d$3$i) + 4|0);
     $749 = ($z$3$lcssa$i>>>0)>($748>>>0);
     $$z$3$i = $749 ? $748 : $z$3$lcssa$i;
     $z$6$i = $$z$3$i;
     while(1) {
      $750 = (($z$6$i) + -4|0);
      $751 = HEAP32[$750>>2]|0;
      $752 = ($751|0)==(0);
      $753 = ($z$6$i>>>0)>($a$6$i>>>0);
      $or$cond23$i = $752 & $753;
      if ($or$cond23$i) {
       $z$6$i = $750;
      } else {
       $a$7$i = $a$6$i;$e$4$i = $e$3$i;$z$7$i = $z$6$i;
       break;
      }
     }
    } else {
     $a$7$i = $a$3$lcssa$i;$e$4$i = $e$1$i;$z$7$i = $z$3$lcssa$i;
    }
    $754 = (0 - ($e$4$i))|0;
    do {
     if ($696) {
      $755 = ($$p$i|0)==(0);
      $756 = $755&1;
      $$$p$i = (($756) + ($$p$i))|0;
      $757 = ($$$p$i|0)>($e$4$i|0);
      $758 = ($e$4$i|0)>(-5);
      $or$cond3$i = $757 & $758;
      if ($or$cond3$i) {
       $759 = (($t$0) + -1)|0;
       $$neg153$i = (($$$p$i) + -1)|0;
       $760 = (($$neg153$i) - ($e$4$i))|0;
       $$012$i73 = $759;$$29$i = $760;
      } else {
       $761 = (($t$0) + -2)|0;
       $762 = (($$$p$i) + -1)|0;
       $$012$i73 = $761;$$29$i = $762;
      }
      $763 = $fl$1$ & 8;
      $764 = ($763|0)==(0);
      if (!($764)) {
       $$113$i = $$012$i73;$$310$i = $$29$i;
       break;
      }
      $765 = ($z$7$i>>>0)>($a$7$i>>>0);
      do {
       if ($765) {
        $766 = (($z$7$i) + -4|0);
        $767 = HEAP32[$766>>2]|0;
        $768 = ($767|0)==(0);
        if ($768) {
         $j$2$i = 9;
         break;
        }
        $769 = (($767>>>0) % 10)&-1;
        $770 = ($769|0)==(0);
        if ($770) {
         $i$3210$i = 10;$j$1211$i = 0;
        } else {
         $j$2$i = 0;
         break;
        }
        while(1) {
         $771 = ($i$3210$i*10)|0;
         $772 = (($j$1211$i) + 1)|0;
         $773 = (($767>>>0) % ($771>>>0))&-1;
         $774 = ($773|0)==(0);
         if ($774) {
          $i$3210$i = $771;$j$1211$i = $772;
         } else {
          $j$2$i = $772;
          break;
         }
        }
       } else {
        $j$2$i = 9;
       }
      } while(0);
      $775 = $$012$i73 | 32;
      $776 = ($775|0)==(102);
      $777 = $z$7$i;
      $778 = (($777) - ($683))|0;
      $779 = $778 >> 2;
      $780 = ($779*9)|0;
      $781 = (($780) + -9)|0;
      if ($776) {
       $782 = (($781) - ($j$2$i))|0;
       $783 = ($782|0)<(0);
       $$24$i = $783 ? 0 : $782;
       $784 = ($$29$i|0)<($$24$i|0);
       $$29$$24$i = $784 ? $$29$i : $$24$i;
       $$113$i = $$012$i73;$$310$i = $$29$$24$i;
       break;
      } else {
       $785 = (($781) + ($e$4$i))|0;
       $786 = (($785) - ($j$2$i))|0;
       $787 = ($786|0)<(0);
       $$26$i = $787 ? 0 : $786;
       $788 = ($$29$i|0)<($$26$i|0);
       $$29$$26$i = $788 ? $$29$i : $$26$i;
       $$113$i = $$012$i73;$$310$i = $$29$$26$i;
       break;
      }
     } else {
      $$113$i = $t$0;$$310$i = $$p$i;
     }
    } while(0);
    $789 = ($$310$i|0)!=(0);
    if ($789) {
     $793 = 1;
    } else {
     $790 = $fl$1$ & 8;
     $791 = ($790|0)!=(0);
     $793 = $791;
    }
    $792 = $793&1;
    $794 = $$113$i | 32;
    $795 = ($794|0)==(102);
    if ($795) {
     $796 = ($e$4$i|0)>(0);
     $797 = $796 ? $e$4$i : 0;
     $$pn$i = $797;$estr$2$i = 0;
    } else {
     $798 = ($e$4$i|0)<(0);
     $799 = $798 ? $754 : $e$4$i;
     $800 = ($799|0)<(0);
     if ($800) {
      $801 = ($799|0)<(0);
      $802 = $801 << 31 >> 31;
      $$05$i80$i = $6;$803 = $799;$804 = $802;
      while(1) {
       $805 = (___uremdi3(($803|0),($804|0),10,0)|0);
       $806 = tempRet0;
       $807 = $805 | 48;
       $808 = $807&255;
       $809 = (($$05$i80$i) + -1|0);
       HEAP8[$809>>0] = $808;
       $810 = (___udivdi3(($803|0),($804|0),10,0)|0);
       $811 = tempRet0;
       $812 = ($804>>>0)>(9);
       $813 = ($804|0)==(9);
       $814 = ($803>>>0)>(4294967295);
       $815 = $813 & $814;
       $816 = $812 | $815;
       if ($816) {
        $$05$i80$i = $809;$803 = $810;$804 = $811;
       } else {
        break;
       }
      }
      $$0$lcssa$i85$i = $809;$$01$lcssa$off0$i86$i = $810;
     } else {
      $$0$lcssa$i85$i = $6;$$01$lcssa$off0$i86$i = $799;
     }
     $817 = ($$01$lcssa$off0$i86$i|0)==(0);
     if ($817) {
      $estr$1$ph$i = $$0$lcssa$i85$i;
     } else {
      $$12$i88$i = $$0$lcssa$i85$i;$y$03$i87$i = $$01$lcssa$off0$i86$i;
      while(1) {
       $818 = (($y$03$i87$i>>>0) % 10)&-1;
       $819 = $818 | 48;
       $820 = $819&255;
       $821 = (($$12$i88$i) + -1|0);
       HEAP8[$821>>0] = $820;
       $822 = (($y$03$i87$i>>>0) / 10)&-1;
       $823 = ($y$03$i87$i>>>0)<(10);
       if ($823) {
        $estr$1$ph$i = $821;
        break;
       } else {
        $$12$i88$i = $821;$y$03$i87$i = $822;
       }
      }
     }
     $824 = $estr$1$ph$i;
     $825 = (($8) - ($824))|0;
     $826 = ($825|0)<(2);
     if ($826) {
      $estr$1201$i = $estr$1$ph$i;
      while(1) {
       $827 = (($estr$1201$i) + -1|0);
       HEAP8[$827>>0] = 48;
       $828 = $827;
       $829 = (($8) - ($828))|0;
       $830 = ($829|0)<(2);
       if ($830) {
        $estr$1201$i = $827;
       } else {
        $estr$1$lcssa$i = $827;
        break;
       }
      }
     } else {
      $estr$1$lcssa$i = $estr$1$ph$i;
     }
     $831 = $e$4$i >> 31;
     $832 = $831 & 2;
     $833 = (($832) + 43)|0;
     $834 = $833&255;
     $835 = (($estr$1$lcssa$i) + -1|0);
     HEAP8[$835>>0] = $834;
     $836 = $$113$i&255;
     $837 = (($estr$1$lcssa$i) + -2|0);
     HEAP8[$837>>0] = $836;
     $838 = $837;
     $839 = (($8) - ($838))|0;
     $$pn$i = $839;$estr$2$i = $837;
    }
    $840 = (($pl$0$i) + 1)|0;
    $841 = (($840) + ($$310$i))|0;
    $l$1$i = (($841) + ($792))|0;
    $842 = (($l$1$i) + ($$pn$i))|0;
    $843 = $fl$1$ & 73728;
    $844 = ($843|0)==(0);
    $845 = ($842|0)<($w$1|0);
    $or$cond$i94$i = $844 & $845;
    if ($or$cond$i94$i) {
     $846 = (($w$1) - ($842))|0;
     $847 = ($846>>>0)>(256);
     $848 = $847 ? 256 : $846;
     _memset(($pad$i|0),32,($848|0))|0;
     $849 = ($846>>>0)>(255);
     if ($849) {
      $$01$i95$i = $846;
      while(1) {
       (___fwritex($pad$i,256,$f)|0);
       $850 = (($$01$i95$i) + -256)|0;
       $851 = ($850>>>0)>(255);
       if ($851) {
        $$01$i95$i = $850;
       } else {
        $$0$lcssa$i97$i = $850;
        break;
       }
      }
     } else {
      $$0$lcssa$i97$i = $846;
     }
     (___fwritex($pad$i,$$0$lcssa$i97$i,$f)|0);
    }
    (___fwritex($prefix$0$i,$pl$0$i,$f)|0);
    $852 = ($843|0)==(65536);
    $or$cond$i101$i = $852 & $845;
    if ($or$cond$i101$i) {
     $853 = (($w$1) - ($842))|0;
     $854 = ($853>>>0)>(256);
     $855 = $854 ? 256 : $853;
     _memset(($pad$i|0),48,($855|0))|0;
     $856 = ($853>>>0)>(255);
     if ($856) {
      $$01$i102$i = $853;
      while(1) {
       (___fwritex($pad$i,256,$f)|0);
       $857 = (($$01$i102$i) + -256)|0;
       $858 = ($857>>>0)>(255);
       if ($858) {
        $$01$i102$i = $857;
       } else {
        $$0$lcssa$i104$i = $857;
        break;
       }
      }
     } else {
      $$0$lcssa$i104$i = $853;
     }
     (___fwritex($pad$i,$$0$lcssa$i104$i,$f)|0);
    }
    do {
     if ($795) {
      $859 = ($a$7$i>>>0)>($$32$i>>>0);
      $r$0$a$7$i = $859 ? $$32$i : $a$7$i;
      $d$4184$i = $r$0$a$7$i;
      while(1) {
       $860 = HEAP32[$d$4184$i>>2]|0;
       $861 = ($860|0)==(0);
       if ($861) {
        $$1$lcssa$i113$i = $13;
       } else {
        $$12$i111$i = $13;$y$03$i110$i = $860;
        while(1) {
         $862 = (($y$03$i110$i>>>0) % 10)&-1;
         $863 = $862 | 48;
         $864 = $863&255;
         $865 = (($$12$i111$i) + -1|0);
         HEAP8[$865>>0] = $864;
         $866 = (($y$03$i110$i>>>0) / 10)&-1;
         $867 = ($y$03$i110$i>>>0)<(10);
         if ($867) {
          $$1$lcssa$i113$i = $865;
          break;
         } else {
          $$12$i111$i = $865;$y$03$i110$i = $866;
         }
        }
       }
       $868 = ($d$4184$i|0)==($r$0$a$7$i|0);
       do {
        if ($868) {
         $872 = ($$1$lcssa$i113$i|0)==($13|0);
         if (!($872)) {
          $s7$1$i = $$1$lcssa$i113$i;
          break;
         }
         HEAP8[$15>>0] = 48;
         $s7$1$i = $15;
        } else {
         $869 = ($$1$lcssa$i113$i>>>0)>($buf$i>>>0);
         if ($869) {
          $s7$0181$i = $$1$lcssa$i113$i;
         } else {
          $s7$1$i = $$1$lcssa$i113$i;
          break;
         }
         while(1) {
          $870 = (($s7$0181$i) + -1|0);
          HEAP8[$870>>0] = 48;
          $871 = ($870>>>0)>($buf$i>>>0);
          if ($871) {
           $s7$0181$i = $870;
          } else {
           $s7$1$i = $870;
           break;
          }
         }
        }
       } while(0);
       $873 = $s7$1$i;
       $874 = (($14) - ($873))|0;
       (___fwritex($s7$1$i,$874,$f)|0);
       $875 = (($d$4184$i) + 4|0);
       $876 = ($875>>>0)>($$32$i>>>0);
       if ($876) {
        break;
       } else {
        $d$4184$i = $875;
       }
      }
      if (!($789)) {
       $877 = $fl$1$ & 8;
       $878 = ($877|0)==(0);
       if ($878) {
        break;
       }
      }
      (___fwritex(31560,1,$f)|0);
      $879 = ($875>>>0)<($z$7$i>>>0);
      $880 = ($$310$i|0)>(0);
      $or$cond29174$i = $879 & $880;
      if ($or$cond29174$i) {
       $$411176$i = $$310$i;$d$5175$i = $875;
       while(1) {
        $881 = HEAP32[$d$5175$i>>2]|0;
        $882 = ($881|0)==(0);
        if ($882) {
         $s8$0170$i = $13;
         label = 295;
        } else {
         $$12$i120$i = $13;$y$03$i119$i = $881;
         while(1) {
          $883 = (($y$03$i119$i>>>0) % 10)&-1;
          $884 = $883 | 48;
          $885 = $884&255;
          $886 = (($$12$i120$i) + -1|0);
          HEAP8[$886>>0] = $885;
          $887 = (($y$03$i119$i>>>0) / 10)&-1;
          $888 = ($y$03$i119$i>>>0)<(10);
          if ($888) {
           break;
          } else {
           $$12$i120$i = $886;$y$03$i119$i = $887;
          }
         }
         $889 = ($886>>>0)>($buf$i>>>0);
         if ($889) {
          $s8$0170$i = $886;
          label = 295;
         } else {
          $s8$0$lcssa$i = $886;
         }
        }
        if ((label|0) == 295) {
         while(1) {
          label = 0;
          $890 = (($s8$0170$i) + -1|0);
          HEAP8[$890>>0] = 48;
          $891 = ($890>>>0)>($buf$i>>>0);
          if ($891) {
           $s8$0170$i = $890;
           label = 295;
          } else {
           $s8$0$lcssa$i = $890;
           break;
          }
         }
        }
        $892 = ($$411176$i|0)>(9);
        $893 = $892 ? 9 : $$411176$i;
        (___fwritex($s8$0$lcssa$i,$893,$f)|0);
        $894 = (($d$5175$i) + 4|0);
        $895 = (($$411176$i) + -9)|0;
        $896 = ($894>>>0)<($z$7$i>>>0);
        $897 = ($895|0)>(0);
        $or$cond29$i = $896 & $897;
        if ($or$cond29$i) {
         $$411176$i = $895;$d$5175$i = $894;
        } else {
         $$411$lcssa$i = $895;
         break;
        }
       }
      } else {
       $$411$lcssa$i = $$310$i;
      }
      $898 = ($$411$lcssa$i|0)>(0);
      if (!($898)) {
       break;
      }
      $899 = ($$411$lcssa$i>>>0)>(256);
      $900 = $899 ? 256 : $$411$lcssa$i;
      _memset(($pad$i|0),48,($900|0))|0;
      $901 = ($$411$lcssa$i>>>0)>(255);
      if ($901) {
       $$01$i126$i = $$411$lcssa$i;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $902 = (($$01$i126$i) + -256)|0;
        $903 = ($902>>>0)>(255);
        if ($903) {
         $$01$i126$i = $902;
        } else {
         $$0$lcssa$i128$i = $902;
         break;
        }
       }
      } else {
       $$0$lcssa$i128$i = $$411$lcssa$i;
      }
      (___fwritex($pad$i,$$0$lcssa$i128$i,$f)|0);
     } else {
      $904 = ($z$7$i>>>0)>($a$7$i>>>0);
      $905 = (($a$7$i) + 4|0);
      $z$7$$i = $904 ? $z$7$i : $905;
      $906 = ($$310$i|0)>(-1);
      do {
       if ($906) {
        $907 = $fl$1$ & 8;
        $$not$i = ($907|0)!=(0);
        $$5194$i = $$310$i;$d$6193$i = $a$7$i;
        while(1) {
         $908 = HEAP32[$d$6193$i>>2]|0;
         $909 = ($908|0)==(0);
         if ($909) {
          label = 306;
         } else {
          $$12$i135$i = $13;$y$03$i134$i = $908;
          while(1) {
           $910 = (($y$03$i134$i>>>0) % 10)&-1;
           $911 = $910 | 48;
           $912 = $911&255;
           $913 = (($$12$i135$i) + -1|0);
           HEAP8[$913>>0] = $912;
           $914 = (($y$03$i134$i>>>0) / 10)&-1;
           $915 = ($y$03$i134$i>>>0)<(10);
           if ($915) {
            break;
           } else {
            $$12$i135$i = $913;$y$03$i134$i = $914;
           }
          }
          $916 = ($913|0)==($13|0);
          if ($916) {
           label = 306;
          } else {
           $s9$0$i = $913;
          }
         }
         if ((label|0) == 306) {
          label = 0;
          HEAP8[$15>>0] = 48;
          $s9$0$i = $15;
         }
         $917 = ($d$6193$i|0)==($a$7$i|0);
         do {
          if ($917) {
           $921 = (($s9$0$i) + 1|0);
           (___fwritex($s9$0$i,1,$f)|0);
           $922 = ($$5194$i|0)>(0);
           $brmerge$i = $922 | $$not$i;
           if (!($brmerge$i)) {
            $s9$2$i = $921;
            break;
           }
           (___fwritex(31560,1,$f)|0);
           $s9$2$i = $921;
          } else {
           $918 = ($s9$0$i>>>0)>($buf$i>>>0);
           if ($918) {
            $s9$1189$i = $s9$0$i;
           } else {
            $s9$2$i = $s9$0$i;
            break;
           }
           while(1) {
            $919 = (($s9$1189$i) + -1|0);
            HEAP8[$919>>0] = 48;
            $920 = ($919>>>0)>($buf$i>>>0);
            if ($920) {
             $s9$1189$i = $919;
            } else {
             $s9$2$i = $919;
             break;
            }
           }
          }
         } while(0);
         $923 = $s9$2$i;
         $924 = (($14) - ($923))|0;
         $925 = ($924|0)<($$5194$i|0);
         $$$5$i = $925 ? $924 : $$5194$i;
         (___fwritex($s9$2$i,$$$5$i,$f)|0);
         $926 = (($$5194$i) - ($924))|0;
         $927 = (($d$6193$i) + 4|0);
         $928 = ($927>>>0)<($z$7$$i>>>0);
         $929 = ($926|0)>(-1);
         $or$cond30$i = $928 & $929;
         if ($or$cond30$i) {
          $$5194$i = $926;$d$6193$i = $927;
         } else {
          break;
         }
        }
        $930 = ($926|0)>(0);
        if (!($930)) {
         break;
        }
        $931 = ($926>>>0)>(256);
        $932 = $931 ? 256 : $926;
        _memset(($pad$i|0),48,($932|0))|0;
        $933 = ($926>>>0)>(255);
        if ($933) {
         $$01$i141$i = $926;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $934 = (($$01$i141$i) + -256)|0;
          $935 = ($934>>>0)>(255);
          if ($935) {
           $$01$i141$i = $934;
          } else {
           $$0$lcssa$i143$i = $934;
           break;
          }
         }
        } else {
         $$0$lcssa$i143$i = $926;
        }
        (___fwritex($pad$i,$$0$lcssa$i143$i,$f)|0);
       }
      } while(0);
      $936 = $estr$2$i;
      $937 = (($8) - ($936))|0;
      (___fwritex($estr$2$i,$937,$f)|0);
     }
    } while(0);
    $938 = ($843|0)==(8192);
    $or$cond$i$i = $938 & $845;
    if ($or$cond$i$i) {
     $939 = (($w$1) - ($842))|0;
     $940 = ($939>>>0)>(256);
     $941 = $940 ? 256 : $939;
     _memset(($pad$i|0),32,($941|0))|0;
     $942 = ($939>>>0)>(255);
     if ($942) {
      $$01$i$i = $939;
      while(1) {
       (___fwritex($pad$i,256,$f)|0);
       $943 = (($$01$i$i) + -256)|0;
       $944 = ($943>>>0)>(255);
       if ($944) {
        $$01$i$i = $943;
       } else {
        $$0$lcssa$i$i = $943;
        break;
       }
      }
     } else {
      $$0$lcssa$i$i = $939;
     }
     (___fwritex($pad$i,$$0$lcssa$i$i,$f)|0);
    }
    $w$31$i = $845 ? $w$1 : $842;
    $1048 = $228;$1049 = $206;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $w$31$i;$l10n$0 = $l10n$3;
    continue L1;
    break;
   }
   case 83:  {
    $331 = ($p$0|0)==(0);
    if ($331) {
     $1058 = $206;$1059 = $206;$i$0167 = 0;
     label = 111;
    } else {
     $1056 = $206;$1057 = $206;$p$4296 = $p$0;
     label = 105;
    }
    break;
   }
   case 67:  {
    $330 = $206;
    HEAP32[$wc>>2] = $330;
    HEAP32[$5>>2] = 0;
    $1056 = $wc;$1057 = $wc;$p$4296 = -1;
    label = 105;
    break;
   }
   case 117:  {
    $276 = $206;$278 = $228;$pl$0 = 0;$prefix$0 = 31464;
    label = 90;
    break;
   }
   case 111:  {
    $248 = $206;
    $249 = ($248|0)==(0);
    $250 = ($228|0)==(0);
    $251 = $249 & $250;
    if ($251) {
     $$0$lcssa$i44 = $2;
    } else {
     $$03$i41 = $2;$253 = $248;$257 = $228;
     while(1) {
      $252 = $253 & 7;
      $254 = $252 | 48;
      $255 = $254&255;
      $256 = (($$03$i41) + -1|0);
      HEAP8[$256>>0] = $255;
      $258 = (_bitshift64Lshr(($253|0),($257|0),3)|0);
      $259 = tempRet0;
      $260 = ($258|0)==(0);
      $261 = ($259|0)==(0);
      $262 = $260 & $261;
      if ($262) {
       $$0$lcssa$i44 = $256;
       break;
      } else {
       $$03$i41 = $256;$253 = $258;$257 = $259;
      }
     }
    }
    $263 = $fl$1$ & 8;
    $264 = ($263|0)==(0);
    if ($264) {
     $307 = $206;$310 = $228;$a$0 = $$0$lcssa$i44;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = 0;$prefix$1 = 31464;
     label = 95;
    } else {
     $$14 = $251 ? 31464 : ((31464 + 5|0));
     $265 = $251&1;
     $$15 = $265 ^ 1;
     $307 = $206;$310 = $228;$a$0 = $$0$lcssa$i44;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $$15;$prefix$1 = $$14;
     label = 95;
    }
    break;
   }
   case 110:  {
    switch ($st$0|0) {
    case 6:  {
     HEAP32[$206>>2] = $cnt$1;
     $1048 = $228;$1049 = $206;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 0:  {
     HEAP32[$206>>2] = $cnt$1;
     $1048 = $228;$1049 = $206;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 7:  {
     $215 = ($cnt$1|0)<(0);
     $216 = $215 << 31 >> 31;
     $217 = $206;
     $218 = $217;
     HEAP32[$218>>2] = $cnt$1;
     $219 = (($217) + 4)|0;
     $220 = $219;
     HEAP32[$220>>2] = $216;
     $1048 = $228;$1049 = $206;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 4:  {
     $214 = $cnt$1&255;
     HEAP8[$206>>0] = $214;
     $1048 = $228;$1049 = $206;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 2:  {
     $207 = ($cnt$1|0)<(0);
     $208 = $207 << 31 >> 31;
     $209 = $206;
     $210 = $209;
     HEAP32[$210>>2] = $cnt$1;
     $211 = (($209) + 4)|0;
     $212 = $211;
     HEAP32[$212>>2] = $208;
     $1048 = $228;$1049 = $206;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 1:  {
     HEAP32[$206>>2] = $cnt$1;
     $1048 = $228;$1049 = $206;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 3:  {
     $213 = $cnt$1&65535;
     HEAP16[$206>>1] = $213;
     $1048 = $228;$1049 = $206;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    default: {
     $1048 = $228;$1049 = $206;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
    }
    }
    break;
   }
   default: {
    $1054 = $228;$1055 = $206;$a$2 = $22;$fl$6 = $fl$1$;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 31464;$z$2 = $2;
   }
   }
  } while(0);
  L437: do {
   if ((label|0) == 78) {
    label = 0;
    $224 = $206;
    $225 = $t$1 & 32;
    $226 = ($224|0)==(0);
    $227 = ($228|0)==(0);
    $229 = $226 & $227;
    if ($229) {
     $307 = $206;$310 = $228;$a$0 = $2;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 31464;
     label = 95;
    } else {
     $$012$i = $2;$231 = $224;$238 = $228;
     while(1) {
      $230 = $231 & 15;
      $232 = (31544 + ($230)|0);
      $233 = HEAP8[$232>>0]|0;
      $234 = $233&255;
      $235 = $234 | $225;
      $236 = $235&255;
      $237 = (($$012$i) + -1|0);
      HEAP8[$237>>0] = $236;
      $239 = (_bitshift64Lshr(($231|0),($238|0),4)|0);
      $240 = tempRet0;
      $241 = ($239|0)==(0);
      $242 = ($240|0)==(0);
      $243 = $241 & $242;
      if ($243) {
       break;
      } else {
       $$012$i = $237;$231 = $239;$238 = $240;
      }
     }
     $244 = $fl$3 & 8;
     $245 = ($244|0)==(0);
     if ($245) {
      $307 = $206;$310 = $228;$a$0 = $237;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 31464;
      label = 95;
     } else {
      $246 = $t$1 >> 4;
      $247 = (31464 + ($246)|0);
      $307 = $206;$310 = $228;$a$0 = $237;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 2;$prefix$1 = $247;
      label = 95;
     }
    }
   }
   else if ((label|0) == 90) {
    label = 0;
    $275 = $276;
    $277 = ($278>>>0)>(0);
    $279 = ($278|0)==(0);
    $280 = ($275>>>0)>(4294967295);
    $281 = $279 & $280;
    $282 = $277 | $281;
    if ($282) {
     $$05$i = $2;$283 = $275;$284 = $278;
     while(1) {
      $285 = (___uremdi3(($283|0),($284|0),10,0)|0);
      $286 = tempRet0;
      $287 = $285 | 48;
      $288 = $287&255;
      $289 = (($$05$i) + -1|0);
      HEAP8[$289>>0] = $288;
      $290 = (___udivdi3(($283|0),($284|0),10,0)|0);
      $291 = tempRet0;
      $292 = ($284>>>0)>(9);
      $293 = ($284|0)==(9);
      $294 = ($283>>>0)>(4294967295);
      $295 = $293 & $294;
      $296 = $292 | $295;
      if ($296) {
       $$05$i = $289;$283 = $290;$284 = $291;
      } else {
       break;
      }
     }
     $$0$lcssa$i46 = $289;$$01$lcssa$off0$i = $290;
    } else {
     $$0$lcssa$i46 = $2;$$01$lcssa$off0$i = $275;
    }
    $297 = ($$01$lcssa$off0$i|0)==(0);
    if ($297) {
     $307 = $276;$310 = $278;$a$0 = $$0$lcssa$i46;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
     label = 95;
    } else {
     $$12$i = $$0$lcssa$i46;$y$03$i = $$01$lcssa$off0$i;
     while(1) {
      $298 = (($y$03$i>>>0) % 10)&-1;
      $299 = $298 | 48;
      $300 = $299&255;
      $301 = (($$12$i) + -1|0);
      HEAP8[$301>>0] = $300;
      $302 = (($y$03$i>>>0) / 10)&-1;
      $303 = ($y$03$i>>>0)<(10);
      if ($303) {
       $307 = $276;$310 = $278;$a$0 = $301;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
       label = 95;
       break;
      } else {
       $$12$i = $301;$y$03$i = $302;
      }
     }
    }
   }
   else if ((label|0) == 100) {
    label = 0;
    $324 = (_memchr($a$1,0,$p$0)|0);
    $325 = ($324|0)==(0|0);
    if ($325) {
     $326 = (($a$1) + ($p$0)|0);
     $1054 = $228;$1055 = $206;$a$2 = $a$1;$fl$6 = $205;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 31464;$z$2 = $326;
     break;
    } else {
     $327 = $324;
     $328 = $a$1;
     $329 = (($327) - ($328))|0;
     $1054 = $228;$1055 = $206;$a$2 = $a$1;$fl$6 = $205;$p$5 = $329;$pl$2 = 0;$prefix$2 = 31464;$z$2 = $324;
     break;
    }
   }
   else if ((label|0) == 105) {
    label = 0;
    $i$0169 = 0;$l$1168 = 0;$ws$0170 = $1056;
    while(1) {
     $335 = HEAP32[$ws$0170>>2]|0;
     $336 = ($335|0)==(0);
     if ($336) {
      $i$0$lcssa = $i$0169;$l$1$lcssa = $l$1168;
      break;
     }
     $337 = (_wctomb($mb,$335)|0);
     $338 = ($337|0)>(-1);
     if (!($338)) {
      $$0 = -1;
      label = 357;
      break L1;
     }
     $339 = (($p$4296) - ($i$0169))|0;
     $340 = ($337>>>0)>($339>>>0);
     $334 = (($337) + ($i$0169))|0;
     if ($340) {
      $1058 = $1056;$1059 = $1057;$i$0167 = $i$0169;
      label = 111;
      break L437;
     }
     $332 = (($ws$0170) + 4|0);
     $333 = ($334>>>0)<($p$4296>>>0);
     if ($333) {
      $i$0169 = $334;$l$1168 = $337;$ws$0170 = $332;
     } else {
      $i$0$lcssa = $334;$l$1$lcssa = $337;
      break;
     }
    }
    $341 = ($l$1$lcssa|0)<(0);
    if ($341) {
     $$0 = -1;
     label = 357;
     break L1;
    } else {
     $1058 = $1056;$1059 = $1057;$i$0167 = $i$0$lcssa;
     label = 111;
    }
   }
  } while(0);
  if ((label|0) == 95) {
   label = 0;
   $304 = ($p$2|0)>(-1);
   $305 = $fl$4 & -65537;
   $$fl$4 = $304 ? $305 : $fl$4;
   $306 = $307;
   $308 = ($306|0)==(0);
   $309 = ($310|0)==(0);
   $311 = $308 & $309;
   $312 = ($p$2|0)==(0);
   $or$cond = $311 & $312;
   if ($or$cond) {
    $1054 = $310;$1055 = $307;$a$2 = $2;$fl$6 = $$fl$4;$p$5 = 0;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $2;
   } else {
    $313 = $a$0;
    $314 = (($3) - ($313))|0;
    $315 = $311&1;
    $316 = (($315) + ($314))|0;
    $317 = ($p$2|0)>($316|0);
    $p$2$ = $317 ? $p$2 : $316;
    $1054 = $310;$1055 = $307;$a$2 = $a$0;$fl$6 = $$fl$4;$p$5 = $p$2$;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $2;
   }
  }
  else if ((label|0) == 111) {
   label = 0;
   $342 = $fl$1$ & 73728;
   $343 = ($342|0)==(0);
   $344 = ($i$0167|0)<($w$1|0);
   $or$cond$i57 = $343 & $344;
   if ($or$cond$i57) {
    $345 = (($w$1) - ($i$0167))|0;
    $346 = ($345>>>0)>(256);
    $347 = $346 ? 256 : $345;
    _memset(($pad$i|0),32,($347|0))|0;
    $348 = ($345>>>0)>(255);
    if ($348) {
     $$01$i58 = $345;
     while(1) {
      (___fwritex($pad$i,256,$f)|0);
      $349 = (($$01$i58) + -256)|0;
      $350 = ($349>>>0)>(255);
      if ($350) {
       $$01$i58 = $349;
      } else {
       $$0$lcssa$i60 = $349;
       break;
      }
     }
    } else {
     $$0$lcssa$i60 = $345;
    }
    (___fwritex($pad$i,$$0$lcssa$i60,$f)|0);
   }
   $351 = ($i$0167|0)==(0);
   L473: do {
    if (!($351)) {
     $i$1175 = 0;$ws$1176 = $1058;
     while(1) {
      $352 = HEAP32[$ws$1176>>2]|0;
      $353 = ($352|0)==(0);
      if ($353) {
       break L473;
      }
      $354 = (_wctomb($mb,$352)|0);
      $355 = (($354) + ($i$1175))|0;
      $356 = ($355|0)>($i$0167|0);
      if ($356) {
       break L473;
      }
      $357 = (($ws$1176) + 4|0);
      (___fwritex($mb,$354,$f)|0);
      $358 = ($355>>>0)<($i$0167>>>0);
      if ($358) {
       $i$1175 = $355;$ws$1176 = $357;
      } else {
       break;
      }
     }
    }
   } while(0);
   $359 = ($342|0)==(8192);
   $or$cond$i64 = $359 & $344;
   if ($or$cond$i64) {
    $360 = (($w$1) - ($i$0167))|0;
    $361 = ($360>>>0)>(256);
    $362 = $361 ? 256 : $360;
    _memset(($pad$i|0),32,($362|0))|0;
    $363 = ($360>>>0)>(255);
    if ($363) {
     $$01$i65 = $360;
     while(1) {
      (___fwritex($pad$i,256,$f)|0);
      $364 = (($$01$i65) + -256)|0;
      $365 = ($364>>>0)>(255);
      if ($365) {
       $$01$i65 = $364;
      } else {
       $$0$lcssa$i67 = $364;
       break;
      }
     }
    } else {
     $$0$lcssa$i67 = $360;
    }
    (___fwritex($pad$i,$$0$lcssa$i67,$f)|0);
   }
   $366 = $344 ? $w$1 : $i$0167;
   $1048 = $228;$1049 = $1059;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $366;$l10n$0 = $l10n$3;
   continue;
  }
  $945 = $z$2;
  $946 = $a$2;
  $947 = (($945) - ($946))|0;
  $948 = ($p$5|0)<($947|0);
  $$p$5 = $948 ? $947 : $p$5;
  $949 = (($pl$2) + ($$p$5))|0;
  $950 = ($w$1|0)<($949|0);
  $w$2 = $950 ? $949 : $w$1;
  $951 = $fl$6 & 73728;
  $952 = ($951|0)==(0);
  $953 = ($949|0)<($w$2|0);
  $or$cond$i75 = $952 & $953;
  if ($or$cond$i75) {
   $954 = (($w$2) - ($949))|0;
   $955 = ($954>>>0)>(256);
   $956 = $955 ? 256 : $954;
   _memset(($pad$i|0),32,($956|0))|0;
   $957 = ($954>>>0)>(255);
   if ($957) {
    $$01$i76 = $954;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $958 = (($$01$i76) + -256)|0;
     $959 = ($958>>>0)>(255);
     if ($959) {
      $$01$i76 = $958;
     } else {
      $$0$lcssa$i78 = $958;
      break;
     }
    }
   } else {
    $$0$lcssa$i78 = $954;
   }
   (___fwritex($pad$i,$$0$lcssa$i78,$f)|0);
  }
  (___fwritex($prefix$2,$pl$2,$f)|0);
  $960 = ($951|0)==(65536);
  $or$cond$i50 = $960 & $953;
  if ($or$cond$i50) {
   $961 = (($w$2) - ($949))|0;
   $962 = ($961>>>0)>(256);
   $963 = $962 ? 256 : $961;
   _memset(($pad$i|0),48,($963|0))|0;
   $964 = ($961>>>0)>(255);
   if ($964) {
    $$01$i51 = $961;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $965 = (($$01$i51) + -256)|0;
     $966 = ($965>>>0)>(255);
     if ($966) {
      $$01$i51 = $965;
     } else {
      $$0$lcssa$i53 = $965;
      break;
     }
    }
   } else {
    $$0$lcssa$i53 = $961;
   }
   (___fwritex($pad$i,$$0$lcssa$i53,$f)|0);
  }
  $967 = ($947|0)<($$p$5|0);
  if ($967) {
   $968 = (($$p$5) - ($947))|0;
   $969 = ($968>>>0)>(256);
   $970 = $969 ? 256 : $968;
   _memset(($pad$i|0),48,($970|0))|0;
   $971 = ($968>>>0)>(255);
   if ($971) {
    $$01$i36 = $968;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $972 = (($$01$i36) + -256)|0;
     $973 = ($972>>>0)>(255);
     if ($973) {
      $$01$i36 = $972;
     } else {
      $$0$lcssa$i38 = $972;
      break;
     }
    }
   } else {
    $$0$lcssa$i38 = $968;
   }
   (___fwritex($pad$i,$$0$lcssa$i38,$f)|0);
  }
  (___fwritex($a$2,$947,$f)|0);
  $974 = ($951|0)==(8192);
  $or$cond$i = $974 & $953;
  if (!($or$cond$i)) {
   $1048 = $1054;$1049 = $1055;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $w$2;$l10n$0 = $l10n$3;
   continue;
  }
  $975 = (($w$2) - ($949))|0;
  $976 = ($975>>>0)>(256);
  $977 = $976 ? 256 : $975;
  _memset(($pad$i|0),32,($977|0))|0;
  $978 = ($975>>>0)>(255);
  if ($978) {
   $$01$i = $975;
   while(1) {
    (___fwritex($pad$i,256,$f)|0);
    $979 = (($$01$i) + -256)|0;
    $980 = ($979>>>0)>(255);
    if ($980) {
     $$01$i = $979;
    } else {
     $$0$lcssa$i = $979;
     break;
    }
   }
  } else {
   $$0$lcssa$i = $975;
  }
  (___fwritex($pad$i,$$0$lcssa$i,$f)|0);
  $1048 = $1054;$1049 = $1055;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $w$2;$l10n$0 = $l10n$3;
 }
 if ((label|0) == 339) {
  $981 = ($f|0)==(0|0);
  if (!($981)) {
   $$0 = $cnt$1;
   STACKTOP = sp;return ($$0|0);
  }
  $982 = ($l10n$0|0)==(0);
  if ($982) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $i$291 = 1;
  }
  while(1) {
   $983 = (($nl_type) + ($i$291<<2)|0);
   $984 = HEAP32[$983>>2]|0;
   $985 = ($984|0)==(0);
   if ($985) {
    $i$390 = $i$291;
    break;
   }
   $986 = (($nl_arg) + ($i$291<<3)|0);
   $987 = ($984>>>0)>(20);
   L528: do {
    if (!($987)) {
     do {
      switch ($984|0) {
      case 15:  {
       $arglist_current53 = HEAP32[$ap>>2]|0;
       $1025 = HEAP32[$arglist_current53>>2]|0;
       $arglist_next54 = (($arglist_current53) + 4|0);
       HEAP32[$ap>>2] = $arglist_next54;
       $1026 = $1025&255;
       $1027 = $1026 << 24 >> 24;
       $1028 = ($1027|0)<(0);
       $1029 = $1028 << 31 >> 31;
       $1030 = $986;
       $1031 = $1030;
       HEAP32[$1031>>2] = $1027;
       $1032 = (($1030) + 4)|0;
       $1033 = $1032;
       HEAP32[$1033>>2] = $1029;
       break L528;
       break;
      }
      case 18:  {
       $arglist_current62 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current62>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current62+4>>2];$1040 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next63 = (($arglist_current62) + 8|0);
       HEAP32[$ap>>2] = $arglist_next63;
       HEAPF64[$986>>3] = $1040;
       break L528;
       break;
      }
      case 17:  {
       $arglist_current59 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current59>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current59+4>>2];$1039 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next60 = (($arglist_current59) + 8|0);
       HEAP32[$ap>>2] = $arglist_next60;
       HEAPF64[$986>>3] = $1039;
       break L528;
       break;
      }
      case 16:  {
       $arglist_current56 = HEAP32[$ap>>2]|0;
       $1034 = HEAP32[$arglist_current56>>2]|0;
       $arglist_next57 = (($arglist_current56) + 4|0);
       HEAP32[$ap>>2] = $arglist_next57;
       $$mask$i = $1034 & 255;
       $1035 = $986;
       $1036 = $1035;
       HEAP32[$1036>>2] = $$mask$i;
       $1037 = (($1035) + 4)|0;
       $1038 = $1037;
       HEAP32[$1038>>2] = 0;
       break L528;
       break;
      }
      case 9:  {
       $arglist_current35 = HEAP32[$ap>>2]|0;
       $988 = HEAP32[$arglist_current35>>2]|0;
       $arglist_next36 = (($arglist_current35) + 4|0);
       HEAP32[$ap>>2] = $arglist_next36;
       HEAP32[$986>>2] = $988;
       break L528;
       break;
      }
      case 14:  {
       $arglist_current50 = HEAP32[$ap>>2]|0;
       $1020 = HEAP32[$arglist_current50>>2]|0;
       $arglist_next51 = (($arglist_current50) + 4|0);
       HEAP32[$ap>>2] = $arglist_next51;
       $$mask1$i = $1020 & 65535;
       $1021 = $986;
       $1022 = $1021;
       HEAP32[$1022>>2] = $$mask1$i;
       $1023 = (($1021) + 4)|0;
       $1024 = $1023;
       HEAP32[$1024>>2] = 0;
       break L528;
       break;
      }
      case 13:  {
       $arglist_current47 = HEAP32[$ap>>2]|0;
       $1011 = HEAP32[$arglist_current47>>2]|0;
       $arglist_next48 = (($arglist_current47) + 4|0);
       HEAP32[$ap>>2] = $arglist_next48;
       $1012 = $1011&65535;
       $1013 = $1012 << 16 >> 16;
       $1014 = ($1013|0)<(0);
       $1015 = $1014 << 31 >> 31;
       $1016 = $986;
       $1017 = $1016;
       HEAP32[$1017>>2] = $1013;
       $1018 = (($1016) + 4)|0;
       $1019 = $1018;
       HEAP32[$1019>>2] = $1015;
       break L528;
       break;
      }
      case 12:  {
       $arglist_current44 = HEAP32[$ap>>2]|0;
       $1001 = $arglist_current44;
       $1002 = $1001;
       $1003 = HEAP32[$1002>>2]|0;
       $1004 = (($1001) + 4)|0;
       $1005 = $1004;
       $1006 = HEAP32[$1005>>2]|0;
       $arglist_next45 = (($arglist_current44) + 8|0);
       HEAP32[$ap>>2] = $arglist_next45;
       $1007 = $986;
       $1008 = $1007;
       HEAP32[$1008>>2] = $1003;
       $1009 = (($1007) + 4)|0;
       $1010 = $1009;
       HEAP32[$1010>>2] = $1006;
       break L528;
       break;
      }
      case 10:  {
       $arglist_current38 = HEAP32[$ap>>2]|0;
       $989 = HEAP32[$arglist_current38>>2]|0;
       $arglist_next39 = (($arglist_current38) + 4|0);
       HEAP32[$ap>>2] = $arglist_next39;
       $990 = ($989|0)<(0);
       $991 = $990 << 31 >> 31;
       $992 = $986;
       $993 = $992;
       HEAP32[$993>>2] = $989;
       $994 = (($992) + 4)|0;
       $995 = $994;
       HEAP32[$995>>2] = $991;
       break L528;
       break;
      }
      case 11:  {
       $arglist_current41 = HEAP32[$ap>>2]|0;
       $996 = HEAP32[$arglist_current41>>2]|0;
       $arglist_next42 = (($arglist_current41) + 4|0);
       HEAP32[$ap>>2] = $arglist_next42;
       $997 = $986;
       $998 = $997;
       HEAP32[$998>>2] = $996;
       $999 = (($997) + 4)|0;
       $1000 = $999;
       HEAP32[$1000>>2] = 0;
       break L528;
       break;
      }
      default: {
       break L528;
      }
      }
     } while(0);
    }
   } while(0);
   $1041 = (($i$291) + 1)|0;
   $1042 = ($1041|0)<(10);
   if ($1042) {
    $i$291 = $1041;
   } else {
    $$0 = 1;
    label = 357;
    break;
   }
  }
  if ((label|0) == 357) {
   STACKTOP = sp;return ($$0|0);
  }
  while(1) {
   $1045 = (($nl_type) + ($i$390<<2)|0);
   $1046 = HEAP32[$1045>>2]|0;
   $1047 = ($1046|0)==(0);
   $1044 = (($i$390) + 1)|0;
   if (!($1047)) {
    $$0 = -1;
    label = 357;
    break;
   }
   $1043 = ($1044|0)<(10);
   if ($1043) {
    $i$390 = $1044;
   } else {
    $$0 = 1;
    label = 357;
    break;
   }
  }
  if ((label|0) == 357) {
   STACKTOP = sp;return ($$0|0);
  }
 }
 else if ((label|0) == 357) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _vsnprintf($s,$n,$fmt,$ap) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$$02 = 0, $$0 = 0, $$01 = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $f = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $b = sp + 112|0;
 $f = sp;
 dest=$f+0|0; src=31568+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $0 = (($n) + -1)|0;
 $1 = ($0>>>0)>(2147483646);
 if ($1) {
  $2 = ($n|0)==(0);
  if ($2) {
   $$01 = $b;$$02 = 1;
  } else {
   $3 = (___errno_location()|0);
   HEAP32[$3>>2] = 75;
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
 } else {
  $$01 = $s;$$02 = $n;
 }
 $4 = $$01;
 $5 = (-2 - ($4))|0;
 $6 = ($$02>>>0)>($5>>>0);
 $$$02 = $6 ? $5 : $$02;
 $7 = (($f) + 48|0);
 HEAP32[$7>>2] = $$$02;
 $8 = (($f) + 20|0);
 HEAP32[$8>>2] = $$01;
 $9 = (($f) + 44|0);
 HEAP32[$9>>2] = $$01;
 $10 = (($$01) + ($$$02)|0);
 $11 = (($f) + 16|0);
 HEAP32[$11>>2] = $10;
 $12 = (($f) + 28|0);
 HEAP32[$12>>2] = $10;
 $13 = (_MUSL_vfprintf($f,$fmt,$ap)|0);
 $14 = ($$$02|0)==(0);
 if ($14) {
  $$0 = $13;
  STACKTOP = sp;return ($$0|0);
 }
 $15 = HEAP32[$8>>2]|0;
 $16 = HEAP32[$11>>2]|0;
 $17 = ($15|0)==($16|0);
 $18 = $17 << 31 >> 31;
 $19 = (($15) + ($18)|0);
 HEAP8[$19>>0] = 0;
 $$0 = $13;
 STACKTOP = sp;return ($$0|0);
}
function _sn_write($f,$s,$l) {
 $f = $f|0;
 $s = $s|0;
 $l = $l|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($f) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = ($6>>>0)>($l>>>0);
 $l$ = $7 ? $l : $6;
 _memcpy(($3|0),($s|0),($l$|0))|0;
 $8 = HEAP32[$2>>2]|0;
 $9 = (($8) + ($l$)|0);
 HEAP32[$2>>2] = $9;
 STACKTOP = sp;return ($l|0);
}
function _vsprintf($s,$fmt,$ap) {
 $s = $s|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_vsnprintf($s,2147483647,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _atof($s) {
 $s = $s|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_strtod($s,0));
 STACKTOP = sp;return (+$0);
}
function _atoi($s) {
 $s = $s|0;
 var $$0 = 0, $$1$ph = 0, $$12 = 0, $$neg1 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n$0$lcssa = 0, $n$03 = 0, $neg$0 = 0, $neg$1$ph = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $s;
 while(1) {
  $0 = HEAP8[$$0>>0]|0;
  $1 = $0 << 24 >> 24;
  $2 = (_isspace($1)|0);
  $3 = ($2|0)==(0);
  $4 = (($$0) + 1|0);
  if ($3) {
   break;
  } else {
   $$0 = $4;
  }
 }
 $5 = HEAP8[$$0>>0]|0;
 $6 = $5 << 24 >> 24;
 if ((($6|0) == 45)) {
  $neg$0 = 1;
  label = 5;
 } else if ((($6|0) == 43)) {
  $neg$0 = 0;
  label = 5;
 } else {
  $$1$ph = $$0;$8 = $5;$neg$1$ph = 0;
 }
 if ((label|0) == 5) {
  $$pre = HEAP8[$4>>0]|0;
  $$1$ph = $4;$8 = $$pre;$neg$1$ph = $neg$0;
 }
 $7 = $8 << 24 >> 24;
 $9 = (_isdigit($7)|0);
 $10 = ($9|0)==(0);
 if ($10) {
  $n$0$lcssa = 0;
  $20 = ($neg$1$ph|0)!=(0);
  $21 = (0 - ($n$0$lcssa))|0;
  $22 = $20 ? $n$0$lcssa : $21;
  STACKTOP = sp;return ($22|0);
 } else {
  $$12 = $$1$ph;$n$03 = 0;
 }
 while(1) {
  $11 = ($n$03*10)|0;
  $12 = (($$12) + 1|0);
  $13 = HEAP8[$$12>>0]|0;
  $14 = $13 << 24 >> 24;
  $$neg1 = (($11) + 48)|0;
  $15 = (($$neg1) - ($14))|0;
  $16 = HEAP8[$12>>0]|0;
  $17 = $16 << 24 >> 24;
  $18 = (_isdigit($17)|0);
  $19 = ($18|0)==(0);
  if ($19) {
   $n$0$lcssa = $15;
   break;
  } else {
   $$12 = $12;$n$03 = $15;
  }
 }
 $20 = ($neg$1$ph|0)!=(0);
 $21 = (0 - ($n$0$lcssa))|0;
 $22 = $20 ? $n$0$lcssa : $21;
 STACKTOP = sp;return ($22|0);
}
function _strtod($s,$p) {
 $s = $s|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f$i = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $f$i = sp;
 dest=$f$i+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = (($f$i) + 4|0);
 HEAP32[$0>>2] = $s;
 $1 = (($f$i) + 8|0);
 HEAP32[$1>>2] = (-1);
 $2 = (($f$i) + 44|0);
 HEAP32[$2>>2] = $s;
 $3 = (($f$i) + 76|0);
 HEAP32[$3>>2] = -1;
 ___shlim($f$i,0);
 $4 = (+___floatscan($f$i,1,1));
 $5 = (($f$i) + 108|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$0>>2]|0;
 $8 = HEAP32[$1>>2]|0;
 $9 = $7;
 $10 = $8;
 $11 = (($9) - ($10))|0;
 $12 = (($11) + ($6))|0;
 $13 = ($p|0)==(0|0);
 if ($13) {
  STACKTOP = sp;return (+$4);
 }
 $14 = ($12|0)==(0);
 if ($14) {
  $16 = $s;
 } else {
  $15 = (($s) + ($12)|0);
  $16 = $15;
 }
 HEAP32[$p>>2] = $16;
 STACKTOP = sp;return (+$4);
}
function _strtol($s,$p,$base) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $f$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $f$i = sp;
 HEAP32[$f$i>>2] = 0;
 $0 = (($f$i) + 4|0);
 HEAP32[$0>>2] = $s;
 $1 = (($f$i) + 44|0);
 HEAP32[$1>>2] = $s;
 $2 = ($s|0)<(0|0);
 if ($2) {
  $3 = (($f$i) + 8|0);
  HEAP32[$3>>2] = (-1);
 } else {
  $4 = (($s) + 2147483647|0);
  $5 = (($f$i) + 8|0);
  HEAP32[$5>>2] = $4;
 }
 $6 = (($f$i) + 76|0);
 HEAP32[$6>>2] = -1;
 ___shlim($f$i,0);
 $7 = (___intscan($f$i,$base,1,-2147483648,0)|0);
 $8 = tempRet0;
 $9 = ($p|0)==(0|0);
 if ($9) {
  STACKTOP = sp;return ($7|0);
 }
 $10 = (($f$i) + 108|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = HEAP32[$0>>2]|0;
 $13 = (($f$i) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $12;
 $16 = $14;
 $17 = (($15) + ($11))|0;
 $18 = (($17) - ($16))|0;
 $19 = (($s) + ($18)|0);
 HEAP32[$p>>2] = $19;
 STACKTOP = sp;return ($7|0);
}
function _memchr($src,$c,$n) {
 $src = $src|0;
 $c = $c|0;
 $n = $n|0;
 var $$0$lcssa = 0, $$0$lcssa34 = 0, $$013 = 0, $$1$lcssa = 0, $$17 = 0, $$24 = 0, $$3 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond12 = 0, $s$0$lcssa = 0, $s$0$lcssa33 = 0, $s$014 = 0, $s$15 = 0, $s$2 = 0, $w$0$lcssa = 0, $w$08 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = $src;
 $2 = $1 & 3;
 $3 = ($2|0)==(0);
 $4 = ($n|0)==(0);
 $or$cond12 = $3 | $4;
 L1: do {
  if ($or$cond12) {
   $$0$lcssa = $n;$$lcssa = $4;$s$0$lcssa = $src;
   label = 5;
  } else {
   $5 = $c&255;
   $$013 = $n;$s$014 = $src;
   while(1) {
    $6 = HEAP8[$s$014>>0]|0;
    $7 = ($6<<24>>24)==($5<<24>>24);
    if ($7) {
     $$0$lcssa34 = $$013;$s$0$lcssa33 = $s$014;
     label = 6;
     break L1;
    }
    $8 = (($s$014) + 1|0);
    $9 = (($$013) + -1)|0;
    $10 = $8;
    $11 = $10 & 3;
    $12 = ($11|0)==(0);
    $13 = ($9|0)==(0);
    $or$cond = $12 | $13;
    if ($or$cond) {
     $$0$lcssa = $9;$$lcssa = $13;$s$0$lcssa = $8;
     label = 5;
     break;
    } else {
     $$013 = $9;$s$014 = $8;
    }
   }
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$3 = 0;$s$2 = $s$0$lcssa;
  } else {
   $$0$lcssa34 = $$0$lcssa;$s$0$lcssa33 = $s$0$lcssa;
   label = 6;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $14 = HEAP8[$s$0$lcssa33>>0]|0;
   $15 = $c&255;
   $16 = ($14<<24>>24)==($15<<24>>24);
   if ($16) {
    $$3 = $$0$lcssa34;$s$2 = $s$0$lcssa33;
   } else {
    $17 = Math_imul($0, 16843009)|0;
    $18 = ($$0$lcssa34>>>0)>(3);
    L11: do {
     if ($18) {
      $$17 = $$0$lcssa34;$w$08 = $s$0$lcssa33;
      while(1) {
       $19 = HEAP32[$w$08>>2]|0;
       $20 = $19 ^ $17;
       $21 = (($20) + -16843009)|0;
       $22 = $20 & -2139062144;
       $23 = $22 ^ -2139062144;
       $24 = $23 & $21;
       $25 = ($24|0)==(0);
       if (!($25)) {
        $$1$lcssa = $$17;$w$0$lcssa = $w$08;
        break L11;
       }
       $26 = (($w$08) + 4|0);
       $27 = (($$17) + -4)|0;
       $28 = ($27>>>0)>(3);
       if ($28) {
        $$17 = $27;$w$08 = $26;
       } else {
        $$1$lcssa = $27;$w$0$lcssa = $26;
        break;
       }
      }
     } else {
      $$1$lcssa = $$0$lcssa34;$w$0$lcssa = $s$0$lcssa33;
     }
    } while(0);
    $29 = ($$1$lcssa|0)==(0);
    if ($29) {
     $$3 = 0;$s$2 = $w$0$lcssa;
    } else {
     $$24 = $$1$lcssa;$s$15 = $w$0$lcssa;
     while(1) {
      $30 = HEAP8[$s$15>>0]|0;
      $31 = ($30<<24>>24)==($15<<24>>24);
      if ($31) {
       $$3 = $$24;$s$2 = $s$15;
       break L8;
      }
      $32 = (($s$15) + 1|0);
      $33 = (($$24) + -1)|0;
      $34 = ($33|0)==(0);
      if ($34) {
       $$3 = 0;$s$2 = $32;
       break;
      } else {
       $$24 = $33;$s$15 = $32;
      }
     }
    }
   }
  }
 } while(0);
 $35 = ($$3|0)!=(0);
 $36 = $35 ? $s$2 : 0;
 STACKTOP = sp;return ($36|0);
}
function _memcmp($vl,$vr,$n) {
 $vl = $vl|0;
 $vr = $vr|0;
 $n = $n|0;
 var $$03 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$04 = 0, $r$05 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 L1: do {
  if ($0) {
   $11 = 0;
  } else {
   $$03 = $n;$l$04 = $vl;$r$05 = $vr;
   while(1) {
    $1 = HEAP8[$l$04>>0]|0;
    $2 = HEAP8[$r$05>>0]|0;
    $3 = ($1<<24>>24)==($2<<24>>24);
    if (!($3)) {
     break;
    }
    $4 = (($$03) + -1)|0;
    $5 = (($l$04) + 1|0);
    $6 = (($r$05) + 1|0);
    $7 = ($4|0)==(0);
    if ($7) {
     $11 = 0;
     break L1;
    } else {
     $$03 = $4;$l$04 = $5;$r$05 = $6;
    }
   }
   $8 = $1&255;
   $9 = $2&255;
   $10 = (($8) - ($9))|0;
   $11 = $10;
  }
 } while(0);
 STACKTOP = sp;return ($11|0);
}
function _strcmp($l,$r) {
 $l = $l|0;
 $r = $r|0;
 var $$027 = 0, $$08 = 0, $$lcssa = 0, $$lcssa4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0;
 var $or$cond3 = 0, $or$cond36 = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$l>>0]|0;
 $1 = HEAP8[$r>>0]|0;
 $2 = ($0<<24>>24)!=($1<<24>>24);
 $3 = ($0<<24>>24)==(0);
 $or$cond5 = $2 | $3;
 $4 = ($1<<24>>24)==(0);
 $or$cond36 = $or$cond5 | $4;
 if ($or$cond36) {
  $$lcssa = $0;$$lcssa4 = $1;
  $12 = $$lcssa&255;
  $13 = $$lcssa4&255;
  $14 = (($12) - ($13))|0;
  STACKTOP = sp;return ($14|0);
 } else {
  $$027 = $l;$$08 = $r;
 }
 while(1) {
  $5 = (($$027) + 1|0);
  $6 = (($$08) + 1|0);
  $7 = HEAP8[$5>>0]|0;
  $8 = HEAP8[$6>>0]|0;
  $9 = ($7<<24>>24)!=($8<<24>>24);
  $10 = ($7<<24>>24)==(0);
  $or$cond = $9 | $10;
  $11 = ($8<<24>>24)==(0);
  $or$cond3 = $or$cond | $11;
  if ($or$cond3) {
   $$lcssa = $7;$$lcssa4 = $8;
   break;
  } else {
   $$027 = $5;$$08 = $6;
  }
 }
 $12 = $$lcssa&255;
 $13 = $$lcssa4&255;
 $14 = (($12) - ($13))|0;
 STACKTOP = sp;return ($14|0);
}
function _strncmp($_l,$_r,$n) {
 $_l = $_l|0;
 $_r = $_r|0;
 $n = $n|0;
 var $$03 = 0, $$08 = 0, $$08$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$06 = 0, $notlhs = 0;
 var $notrhs = 0, $or$cond$not = 0, $or$cond4 = 0, $r$0$lcssa = 0, $r$07 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if ($0) {
  $$03 = 0;
  STACKTOP = sp;return ($$03|0);
 }
 $1 = HEAP8[$_l>>0]|0;
 $2 = ($1<<24>>24)==(0);
 L4: do {
  if ($2) {
   $11 = 0;$r$0$lcssa = $_r;
  } else {
   $$08$in = $n;$5 = $1;$l$06 = $_l;$r$07 = $_r;
   while(1) {
    $$08 = (($$08$in) + -1)|0;
    $3 = HEAP8[$r$07>>0]|0;
    $notlhs = ($3<<24>>24)!=(0);
    $notrhs = ($$08|0)!=(0);
    $or$cond$not = $notrhs & $notlhs;
    $4 = ($5<<24>>24)==($3<<24>>24);
    $or$cond4 = $or$cond$not & $4;
    if (!($or$cond4)) {
     $11 = $5;$r$0$lcssa = $r$07;
     break L4;
    }
    $6 = (($l$06) + 1|0);
    $7 = (($r$07) + 1|0);
    $8 = HEAP8[$6>>0]|0;
    $9 = ($8<<24>>24)==(0);
    if ($9) {
     $11 = 0;$r$0$lcssa = $7;
     break;
    } else {
     $$08$in = $$08;$5 = $8;$l$06 = $6;$r$07 = $7;
    }
   }
  }
 } while(0);
 $10 = $11&255;
 $12 = HEAP8[$r$0$lcssa>>0]|0;
 $13 = $12&255;
 $14 = (($10) - ($13))|0;
 $$03 = $14;
 STACKTOP = sp;return ($$03|0);
}
function runPostSets() {
 HEAP32[7662] = __ZTISt9exception;
}
function _rand_r(seedp) {
    seedp = seedp|0; 
    var val = 0;
    val = ((Math_imul(((HEAP32[((seedp)>>2)])|0), 31010991)|0) + 0x676e6177 ) & 2147483647; // assumes RAND_MAX is in bit mask form (power of 2 minus 1)
    HEAP32[((seedp)>>2)]=val;
    return val|0;
}
function _rand() {
    return _rand_r(___rand_seed)|0;
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _strlen(ptr) {
    ptr = ptr|0;
    var curr = 0;
    curr = ptr;
    while (((HEAP8[((curr)>>0)])|0)) {
      curr = (curr + 1)|0;
    }
    return (curr - ptr)|0;
}
function _strncpy(pdest, psrc, num) {
    pdest = pdest|0; psrc = psrc|0; num = num|0;
    var padding = 0, curr = 0, i = 0;
    while ((i|0) < (num|0)) {
      curr = padding ? 0 : ((HEAP8[(((psrc)+(i))>>0)])|0);
      HEAP8[(((pdest)+(i))>>0)]=curr;
      padding = padding ? 1 : (((HEAP8[(((psrc)+(i))>>0)])|0) == 0);
      i = (i+1)|0;
    }
    return pdest|0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _memcpy(dest, src, num) {

    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[((ptr)>>0)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function _strcat(pdest, psrc) {
    pdest = pdest|0; psrc = psrc|0;
    var i = 0;
    var pdestEnd = 0;
    pdestEnd = (pdest + (_strlen(pdest)|0))|0;
    do {
      HEAP8[((pdestEnd+i)>>0)]=HEAP8[((psrc+i)>>0)];
      i = (i+1)|0;
    } while (((HEAP8[(((psrc)+(i-1))>>0)])|0));
    return pdest|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _strcpy(pdest, psrc) {
    pdest = pdest|0; psrc = psrc|0;
    var i = 0;
    do {
      HEAP8[(((pdest+i)|0)>>0)]=HEAP8[(((psrc+i)|0)>>0)];
      i = (i+1)|0;
    } while (((HEAP8[(((psrc)+(i-1))>>0)])|0));
    return pdest|0;
}
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
  }
function _llvm_ctlz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((ctlz_i8)+(x >>> 24))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((ctlz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((ctlz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((ctlz_i8)+(x&0xff))>>0)])|0) + 24)|0;
  }

function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
  }

// ======== compiled code from system/lib/compiler-rt , see readme therein
function ___muldsi3($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
  $1 = $a & 65535;
  $2 = $b & 65535;
  $3 = Math_imul($2, $1) | 0;
  $6 = $a >>> 16;
  $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
  $11 = $b >>> 16;
  $12 = Math_imul($11, $1) | 0;
  return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  $7$0 = $2$0 ^ $1$0;
  $7$1 = $2$1 ^ $1$1;
  $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
  $10$0 = _i64Subtract($8$0 ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
  return (tempRet0 = tempRet0, $10$0) | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
  $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
  $10$1 = tempRet0;
  STACKTOP = __stackBase__;
  return (tempRet0 = $10$1, $10$0) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
  $x_sroa_0_0_extract_trunc = $a$0;
  $y_sroa_0_0_extract_trunc = $b$0;
  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
  $1$1 = tempRet0;
  $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
  return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0;
  $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
  return (tempRet0 = tempRet0, $1$0) | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
  STACKTOP = __stackBase__;
  return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  $rem = $rem | 0;
  var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
  $n_sroa_0_0_extract_trunc = $a$0;
  $n_sroa_1_4_extract_shift$0 = $a$1;
  $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
  $d_sroa_0_0_extract_trunc = $b$0;
  $d_sroa_1_4_extract_shift$0 = $b$1;
  $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
  if (($n_sroa_1_4_extract_trunc | 0) == 0) {
    $4 = ($rem | 0) != 0;
    if (($d_sroa_1_4_extract_trunc | 0) == 0) {
      if ($4) {
        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
        HEAP32[$rem + 4 >> 2] = 0;
      }
      $_0$1 = 0;
      $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$4) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    }
  }
  $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
  do {
    if (($d_sroa_0_0_extract_trunc | 0) == 0) {
      if ($17) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      if (($n_sroa_0_0_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0;
          HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
      if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
        }
        $_0$1 = 0;
        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $49 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
      $51 = $49 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
      if ($51 >>> 0 <= 30) {
        $57 = $51 + 1 | 0;
        $58 = 31 - $51 | 0;
        $sr_1_ph = $57;
        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
        $q_sroa_0_1_ph = 0;
        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
        break;
      }
      if (($rem | 0) == 0) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = 0 | $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$17) {
        $117 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
        $119 = $117 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($119 >>> 0 <= 31) {
          $125 = $119 + 1 | 0;
          $126 = 31 - $119 | 0;
          $130 = $119 - 31 >> 31;
          $sr_1_ph = $125;
          $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
      if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
        $86 = (_llvm_ctlz_i32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
        $88 = $86 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        $89 = 64 - $88 | 0;
        $91 = 32 - $88 | 0;
        $92 = $91 >> 31;
        $95 = $88 - 32 | 0;
        $105 = $95 >> 31;
        $sr_1_ph = $88;
        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
        break;
      }
      if (($rem | 0) != 0) {
        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
        HEAP32[$rem + 4 >> 2] = 0;
      }
      if (($d_sroa_0_0_extract_trunc | 0) == 1) {
        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$0 = 0 | $a$0 & -1;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
  } while (0);
  if (($sr_1_ph | 0) == 0) {
    $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
    $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
    $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
    $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = 0;
  } else {
    $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
    $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
    $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0, $d_sroa_0_0_insert_insert99$1, -1, -1) | 0;
    $137$1 = tempRet0;
    $q_sroa_1_1198 = $q_sroa_1_1_ph;
    $q_sroa_0_1199 = $q_sroa_0_1_ph;
    $r_sroa_1_1200 = $r_sroa_1_1_ph;
    $r_sroa_0_1201 = $r_sroa_0_1_ph;
    $sr_1202 = $sr_1_ph;
    $carry_0203 = 0;
    while (1) {
      $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
      $149 = $carry_0203 | $q_sroa_0_1199 << 1;
      $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
      $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
      _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
      $150$1 = tempRet0;
      $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
      $152 = $151$0 & 1;
      $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
      $r_sroa_0_0_extract_trunc = $154$0;
      $r_sroa_1_4_extract_trunc = tempRet0;
      $155 = $sr_1202 - 1 | 0;
      if (($155 | 0) == 0) {
        break;
      } else {
        $q_sroa_1_1198 = $147;
        $q_sroa_0_1199 = $149;
        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
        $sr_1202 = $155;
        $carry_0203 = $152;
      }
    }
    $q_sroa_1_1_lcssa = $147;
    $q_sroa_0_1_lcssa = $149;
    $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = $152;
  }
  $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
  $q_sroa_0_0_insert_ext75$1 = 0;
  $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
  if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
    HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
  }
  $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
  $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
}
// =======================================================================



// EMSCRIPTEN_END_FUNCS

    
    function dynCall_iiii(index,a1,a2,a3) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0;
      return FUNCTION_TABLE_iiii[index&255](a1|0,a2|0,a3|0)|0;
    }
  

    function dynCall_d(index) {
      index = index|0;
      
      return +FUNCTION_TABLE_d[index&63]();
    }
  

    function dynCall_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
      FUNCTION_TABLE_viiiiiii[index&63](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0);
    }
  

    function dynCall_viiiii(index,a1,a2,a3,a4,a5) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
      FUNCTION_TABLE_viiiii[index&15](a1|0,a2|0,a3|0,a4|0,a5|0);
    }
  

    function dynCall_i(index) {
      index = index|0;
      
      return FUNCTION_TABLE_i[index&127]()|0;
    }
  

    function dynCall_vi(index,a1) {
      index = index|0;
      a1=a1|0;
      FUNCTION_TABLE_vi[index&255](a1|0);
    }
  

    function dynCall_dd(index,a1) {
      index = index|0;
      a1=+a1;
      return +FUNCTION_TABLE_dd[index&63](+a1);
    }
  

    function dynCall_vii(index,a1,a2) {
      index = index|0;
      a1=a1|0; a2=a2|0;
      FUNCTION_TABLE_vii[index&255](a1|0,a2|0);
    }
  

    function dynCall_ii(index,a1) {
      index = index|0;
      a1=a1|0;
      return FUNCTION_TABLE_ii[index&255](a1|0)|0;
    }
  

    function dynCall_viii(index,a1,a2,a3) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0;
      FUNCTION_TABLE_viii[index&255](a1|0,a2|0,a3|0);
    }
  

    function dynCall_v(index) {
      index = index|0;
      
      FUNCTION_TABLE_v[index&255]();
    }
  

    function dynCall_iiiii(index,a1,a2,a3,a4) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
      return FUNCTION_TABLE_iiiii[index&255](a1|0,a2|0,a3|0,a4|0)|0;
    }
  

    function dynCall_viiiiii(index,a1,a2,a3,a4,a5,a6) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
      FUNCTION_TABLE_viiiiii[index&15](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
    }
  

    function dynCall_iii(index,a1,a2) {
      index = index|0;
      a1=a1|0; a2=a2|0;
      return FUNCTION_TABLE_iii[index&255](a1|0,a2|0)|0;
    }
  

    function dynCall_iiiiii(index,a1,a2,a3,a4,a5) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
      return FUNCTION_TABLE_iiiiii[index&255](a1|0,a2|0,a3|0,a4|0,a5|0)|0;
    }
  

    function dynCall_viiii(index,a1,a2,a3,a4) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
      FUNCTION_TABLE_viiii[index&127](a1|0,a2|0,a3|0,a4|0);
    }
  
function b0(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(0);return 0; }
  function _strncpy__wrapper(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; return _strncpy(p0|0,p1|0,p2|0)|0; }
  function b1() { ; nullFunc_d(1);return +0; }
  function b2(p0,p1,p2,p3,p4,p5,p6) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_viiiiiii(2); }
  function b3(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(3); }
  function b4() { ; nullFunc_i(4);return 0; }
  function b5(p0) { p0 = p0|0; nullFunc_vi(5); }
  function b6(p0) { p0 = +p0; nullFunc_dd(6);return +0; }
  function b7(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(7); }
  function b8(p0) { p0 = p0|0; nullFunc_ii(8);return 0; }
  function b9(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(9); }
  function ___cxa_throw__wrapper(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; ___cxa_throw(p0|0,p1|0,p2|0); }
  function b10() { ; nullFunc_v(10); }
  function ___cxa_end_catch__wrapper() { ; ___cxa_end_catch(); }
  function b11(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(11);return 0; }
  function b12(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(12); }
  function b13(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(13);return 0; }
  function _strcpy__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; return _strcpy(p0|0,p1|0)|0; }
  function b14(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(14);return 0; }
  function b15(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(15); }
  // EMSCRIPTEN_END_FUNCS
  var FUNCTION_TABLE_iiii = [b0,b0,b0,b0,b0,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,b0,b0,b0,b0,__ZNK10__cxxabiv116__enum_type_info9can_catchEPKNS_16__shim_type_infoERPv,b0,b0,b0,b0,b0,b0,b0,_sn_write,b0,b0,b0,__ZL16code_cnv_reallocP4PValii,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,_sprintf,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,_strncpy__wrapper,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZL12GetBlockSizeP4PValPPvPi,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,__ZL12GetBlockSizeP4PValPPvPi189,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,__ZL12GetBlockSizeP4PValPPvPi195,b0,b0,b0,b0,b0,b0,b0,__ZL12GetBlockSizeP4PValPPvPi204,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZL12GetBlockSizeP4PValPPvPi210,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0];
  var FUNCTION_TABLE_d = [b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,__Z9code_getdv,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1];
  var FUNCTION_TABLE_viiiiiii = [b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,__Z17HspVarCoreDimFlexP4PValiiiiii,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2];
  var FUNCTION_TABLE_viiiii = [b3,b3,b3,b3,b3,b3,b3,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b3,b3,b3,b3,b3,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b3,b3];
  var FUNCTION_TABLE_i = [b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZL13code_cnv_getvv,b4,b4,b4,__Z9code_getiv,b4,__Z9code_getsv,b4
  ,b4,b4,b4,b4,__ZL12code_cnv_getv,__Z11code_getlb2v,__Z12code_getpvalv,b4,b4,b4,b4,b4,b4,b4,__Z11code_addirqv,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__Z18code_getdebug_linev,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,__Z8code_getv,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4];
  var FUNCTION_TABLE_vi = [b5,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,b5,b5,b5,b5,__ZN10__cxxabiv116__enum_type_infoD0Ev,b5,__ZN10__cxxabiv120__si_class_type_infoD0Ev,b5,b5,b5,__ZNSt9bad_allocD2Ev,__ZNSt9bad_allocD0Ev,b5,b5,b5,__Z16code_def_msgfuncP6HSPCTX,b5,b5,b5,b5,b5,b5,b5,b5
  ,__Z13code_puterror8HSPERROR,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__Z6sbFreePv,b5,b5,b5,b5,__Z10code_setpcPKt,__Z9code_callPKt,b5,b5,b5,b5,b5,b5,b5,__Z13code_dbgclosePc,b5,b5,b5
  ,b5,b5,b5,b5,b5,__Z18code_delstruct_allP4PVal,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZN6HspWndC2Ev,__ZN5MMManC2Ev,b5,b5,b5,b5,__ZN5MMManD2Ev,__ZN6HspWndD2Ev,b5,__ZN8CStrNoteD2Ev,b5,b5,b5,b5,__ZN11CAutoSbFreeD2Ev
  ,b5,b5,b5,b5,b5,b5,b5,b5,__Z14HspVarInt_InitP10HspVarProc,__Z14HspVarStr_InitP10HspVarProc,__Z17HspVarDouble_InitP10HspVarProc,__Z17HspVarStruct_InitP10HspVarProc,_HspVarLabel_Init,b5,b5,b5,b5,b5,b5,b5,b5,__ZL17HspVarDouble_FreeP4PVal,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZL14HspVarInt_FreeP4PVal,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,__ZL16HspVarLabel_FreeP4PVal,b5,b5,b5,b5,b5,b5,b5,__ZL14HspVarStr_FreeP4PVal,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZL17HspVarStruct_FreeP4PVal,__ZN5BmscrD2Ev,__ZN5BmscrC2Ev,__ZL17Object_ButtonDrawP10HSPOBJINFO,b5,__ZN4Hsp3C2Ev,__Z16hsp3dish_msgfuncP6HSPCTX
  ,b5,b5,b5,b5,b5,__ZN4Hsp3D2Ev,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5];
  var FUNCTION_TABLE_dd = [b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__Z10code_getddd,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6];
  var FUNCTION_TABLE_vii = [b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__Z22HspVarCoreRegisterTypeiPFvP10HspVarProcE,b7,b7,b7,b7,__Z15HspVarCoreArrayP4PVali,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__Z7ex_mrefP4PVali,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZL18HspVarDouble_AllocP4PValPKS_,b7,__ZL17HspVarDouble_AddIPPvPKv,__ZL17HspVarDouble_SubIPPvPKv,__ZL17HspVarDouble_MulIPPvPKv,__ZL17HspVarDouble_DivIPPvPKv,__ZL17HspVarDouble_ModIPPvPKv,__ZL16HspVarDouble_EqIPPvPKv,__ZL16HspVarDouble_NeIPPvPKv,__ZL16HspVarDouble_GtIPPvPKv
  ,__ZL16HspVarDouble_LtIPPvPKv,__ZL18HspVarDouble_GtEqIPPvPKv,__ZL18HspVarDouble_LtEqIPPvPKv,b7,b7,b7,b7,b7,b7,__ZL15HspVarInt_AllocP4PValPKS_,b7,__ZL14HspVarInt_AddIPPvPKv,__ZL14HspVarInt_SubIPPvPKv,__ZL14HspVarInt_MulIPPvPKv,__ZL14HspVarInt_DivIPPvPKv,__ZL14HspVarInt_ModIPPvPKv,__ZL14HspVarInt_AndIPPvPKv,__ZL13HspVarInt_OrIPPvPKv,__ZL14HspVarInt_XorIPPvPKv,__ZL13HspVarInt_EqIPPvPKv,__ZL13HspVarInt_NeIPPvPKv,__ZL13HspVarInt_GtIPPvPKv,__ZL13HspVarInt_LtIPPvPKv,__ZL15HspVarInt_GtEqIPPvPKv,__ZL15HspVarInt_LtEqIPPvPKv,__ZL13HspVarInt_RrIPPvPKv,__ZL13HspVarInt_LrIPPvPKv,b7,b7,b7
  ,b7,b7,b7,__ZL17HspVarLabel_AllocP4PValPKS_,b7,b7,b7,b7,b7,b7,b7,__ZL15HspVarStr_AllocP4PValPKS_,b7,__ZL14HspVarStr_AddIPPvPKv,__ZL13HspVarStr_EqIPPvPKv,__ZL13HspVarStr_NeIPPvPKv,b7,b7,b7,b7,b7,b7,__ZL18HspVarStruct_AllocP4PValPKS_,b7,b7,b7,b7,__ZL16Object_JumpEventP10HSPOBJINFOi,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7];
  var FUNCTION_TABLE_ii = [b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZNKSt9bad_alloc4whatEv,b8,__ZL15cmdfunc_defaulti,b8,b8,b8,b8,__Z9dpm_existPc,b8,__Z10code_getdii,b8,__Z10code_getdsPKc
  ,b8,__ZL15HspFunc_getproci,__Z18HspVarCoreSeekProcPKc,b8,b8,b8,b8,__Z10code_getvaPP4PVal,b8,b8,b8,__Z7sbAlloci,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,__Z21code_getdebug_varnamei,__Z21code_getdebug_seekvarPKc,__Z13code_dbgvaluei,b8,b8,b8,__Z11code_dbgseti,__ZL11cmdfunc_vari
  ,__ZL12cmdfunc_progi,__ZL13cmdfunc_ifcmdi,b8,__ZL14cmdfunc_customi,b8,b8,__ZL13code_callfunci,b8,b8,__Z10code_isirqi,b8,b8,b8,b8,b8,b8,b8,__ZL14cmdfunc_extcmdi,__ZL15termfunc_extcmdi,__Z11ex_getbmscri,b8,b8,b8,b8,b8,__ZL14cmdfunc_intcmdi,__ZL15termfunc_intcmdi,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,__Z9code_stmpi,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZL19HspVarDouble_GetPtrP4PVal,__ZL20HspVarDouble_GetSizePKPv,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,__ZL16HspVarInt_GetPtrP4PVal,__ZL17HspVarInt_GetSizePKPv,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZL18HspVarLabel_GetPtrP4PVal,__ZL19HspVarLabel_GetSizePKPv
  ,__ZL20HspVarLabel_GetUsingPKPv,b8,b8,b8,b8,b8,b8,__ZL16HspVarStr_GetPtrP4PVal,__ZL17HspVarStr_GetSizePKPv,b8,b8,b8,b8,b8,b8,b8,b8,__ZL19HspVarStruct_GetPtrP4PVal,__ZL20HspVarStruct_GetSizePKPv,__ZL21HspVarStruct_GetUsingPKPv,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,__ZL16hsp3dish_devinfoPc,b8,b8,b8,b8,b8,b8,b8,b8,b8,__Znwj,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8];
  var FUNCTION_TABLE_viii = [b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__Z15HspVarCoreReDimP4PValii,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZL18code_dbgvarinf_extP4PValPvPc,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,___cxa_throw__wrapper,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZL16HspVarDouble_SetP4PValPPvPKv,b9,b9,b9,b9,__ZL10AllocBlockP4PValPPvi,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,__ZL13HspVarInt_SetP4PValPPvPKv,b9,b9,b9,b9,__ZL10AllocBlockP4PValPPvi190,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZL15HspVarLabel_SetP4PValPPvPKv,b9,b9
  ,b9,b9,__ZL10AllocBlockP4PValPPvi196,b9,b9,__ZL13HspVarStr_SetP4PValPPvPKv,b9,b9,b9,b9,__ZL10AllocBlockP4PValPPvi205,b9,b9,b9,b9,b9,__ZL16HspVarStruct_SetP4PValPPvPKv,b9,b9,b9,b9,__ZL10AllocBlockP4PValPPvi211,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9];
  var FUNCTION_TABLE_v = [b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,__Z9code_nextv,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__Z14code_dbgcurinfv,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,__Z13code_dbgtracev,__ZL14cmdfunc_returnv,b10,b10,b10,b10,b10,___cxa_end_catch__wrapper,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZL10PutInvalidv,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,__Z14hsp3dish_errorv,b10,__Z17hsp3dish_exec_onev,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10];
  var FUNCTION_TABLE_iiiii = [b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,__Z8dpm_readPcPvii,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,__Z10code_eventiiiPv,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,__Z12code_sendirqiiii,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,_snprintf,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,__ZL19hsp3dish_devcontrolPciii,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11];
  var FUNCTION_TABLE_viiiiii = [b12,b12,b12,b12,b12,b12,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b12,b12,b12,b12,b12,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b12,b12,b12];
  var FUNCTION_TABLE_iii = [b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,__Z8sbExpandPci,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,__Z14code_dbgvarinfPci,b13,b13,b13,b13
  ,b13,b13,__ZL14reffunc_sysvarPii,b13,__ZL14reffunc_customPii,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,__ZL14reffunc_sysvarPii139,b13,b13,b13,__ZL15reffunc_intfuncPii,b13,b13
  ,_strspn,b13,b13,b13,__Z16HspVarCoreCnvPtrP4PVali,b13,b13,_strcpy__wrapper,b13,b13,b13,b13,b13,b13,b13,__ZL16HspVarDouble_CnvPKvi,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,__ZL13HspVarInt_CnvPKvi,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,__ZL13HspVarStr_CnvPKvi,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,__ZL15hsp3dish_devprmPcS_,b13,b13,__ZL17hsp3dish_devinfoiPcPi,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13];
  var FUNCTION_TABLE_iiiiii = [b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,__ZL14resample_row_1PhS_S_ii,__ZL16resample_row_v_2PhS_S_ii,__ZL16resample_row_h_2PhS_S_ii,__ZL17resample_row_hv_2PhS_S_ii,__ZL20resample_row_genericPhS_S_ii,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14];
  var FUNCTION_TABLE_viiii = [b15,b15,b15,b15,b15,b15,b15,b15,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b15,b15,b15,b15,b15,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,__Z10code_setvaP4PValiiPKv,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZL16cnvformat_expandPPcPiii,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15];

    return { _i64Subtract: _i64Subtract, _strcat: _strcat, _free: _free, _main: _main, _rand_r: _rand_r, _realloc: _realloc, _i64Add: _i64Add, _memmove: _memmove, _strlen: _strlen, _memset: _memset, _malloc: _malloc, _strncpy: _strncpy, _memcpy: _memcpy, _bitshift64Lshr: _bitshift64Lshr, _rand: _rand, _strcpy: _strcpy, _calloc: _calloc, _bitshift64Shl: _bitshift64Shl, __GLOBAL__I_a: __GLOBAL__I_a, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_iiii: dynCall_iiii, dynCall_d: dynCall_d, dynCall_viiiiiii: dynCall_viiiiiii, dynCall_viiiii: dynCall_viiiii, dynCall_i: dynCall_i, dynCall_vi: dynCall_vi, dynCall_dd: dynCall_dd, dynCall_vii: dynCall_vii, dynCall_ii: dynCall_ii, dynCall_viii: dynCall_viii, dynCall_v: dynCall_v, dynCall_iiiii: dynCall_iiiii, dynCall_viiiiii: dynCall_viiiiii, dynCall_iii: dynCall_iii, dynCall_iiiiii: dynCall_iiiiii, dynCall_viiii: dynCall_viiii };
  })
  // EMSCRIPTEN_END_ASM
  ({ "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array }, { "abort": abort, "assert": assert, "asmPrintInt": asmPrintInt, "asmPrintFloat": asmPrintFloat, "min": Math_min, "nullFunc_iiii": nullFunc_iiii, "nullFunc_d": nullFunc_d, "nullFunc_viiiiiii": nullFunc_viiiiiii, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_i": nullFunc_i, "nullFunc_vi": nullFunc_vi, "nullFunc_dd": nullFunc_dd, "nullFunc_vii": nullFunc_vii, "nullFunc_ii": nullFunc_ii, "nullFunc_viii": nullFunc_viii, "nullFunc_v": nullFunc_v, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_viiiiii": nullFunc_viiiiii, "nullFunc_iii": nullFunc_iii, "nullFunc_iiiiii": nullFunc_iiiiii, "nullFunc_viiii": nullFunc_viiii, "invoke_iiii": invoke_iiii, "invoke_d": invoke_d, "invoke_viiiiiii": invoke_viiiiiii, "invoke_viiiii": invoke_viiiii, "invoke_i": invoke_i, "invoke_vi": invoke_vi, "invoke_dd": invoke_dd, "invoke_vii": invoke_vii, "invoke_ii": invoke_ii, "invoke_viii": invoke_viii, "invoke_v": invoke_v, "invoke_iiiii": invoke_iiiii, "invoke_viiiiii": invoke_viiiiii, "invoke_iii": invoke_iii, "invoke_iiiiii": invoke_iiiiii, "invoke_viiii": invoke_viiii, "_glUseProgram": _glUseProgram, "_fabs": _fabs, "_exp": _exp, "_Mix_Playing": _Mix_Playing, "_fread": _fread, "__ZSt9terminatev": __ZSt9terminatev, "_fmodl": _fmodl, "___assert_fail": ___assert_fail, "_glDeleteProgram": _glDeleteProgram, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "_glBindBuffer": _glBindBuffer, "_Mix_Volume": _Mix_Volume, "_fsync": _fsync, "_SDL_GetError": _SDL_GetError, "_sbrk": _sbrk, "_glBlendFunc": _glBlendFunc, "_glDisableVertexAttribArray": _glDisableVertexAttribArray, "___cxa_begin_catch": ___cxa_begin_catch, "_glCreateShader": _glCreateShader, "_sysconf": _sysconf, "_close": _close, "_Mix_PlayMusic": _Mix_PlayMusic, "_cos": _cos, "_readdir": _readdir, "_glLoadIdentity": _glLoadIdentity, "_glMatrixMode": _glMatrixMode, "_write": _write, "_ftell": _ftell, "_glShaderSource": _glShaderSource, "__ZNSt9exceptionD2Ev": __ZNSt9exceptionD2Ev, "___cxa_atexit": ___cxa_atexit, "___cxa_does_inherit": ___cxa_does_inherit, "_glVertexPointer": _glVertexPointer, "_glOrtho": _glOrtho, "_Mix_HaltMusic": _Mix_HaltMusic, "_mknod": _mknod, "_mkdir": _mkdir, "_closedir": _closedir, "_llvm_trap": _llvm_trap, "_SDL_RWFromFile": _SDL_RWFromFile, "_glVertexAttribPointer": _glVertexAttribPointer, "_glHint": _glHint, "__reallyNegative": __reallyNegative, "_send": _send, "_SDL_GL_SetAttribute": _SDL_GL_SetAttribute, "_atan2": _atan2, "___cxa_is_number_type": ___cxa_is_number_type, "_Mix_CloseAudio": _Mix_CloseAudio, "___cxa_free_exception": ___cxa_free_exception, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "_opendir": _opendir, "_SDL_LockSurface": _SDL_LockSurface, "_strerror_r": _strerror_r, "_glViewport": _glViewport, "_glGetBooleanv": _glGetBooleanv, "___setErrNo": ___setErrNo, "_glDeleteTextures": _glDeleteTextures, "___resumeException": ___resumeException, "_srand": _srand, "___cxa_call_unexpected": ___cxa_call_unexpected, "_glEnable": _glEnable, "_printf": _printf, "_glGenTextures": _glGenTextures, "_glGetIntegerv": _glGetIntegerv, "_glGetString": _glGetString, "_localtime": _localtime, "_emscripten_get_now": _emscripten_get_now, "_stat": _stat, "_glAttachShader": _glAttachShader, "_read": _read, "_clock_gettime": _clock_gettime, "_SDL_SetVideoMode": _SDL_SetVideoMode, "_fwrite": _fwrite, "_time": _time, "_fprintf": _fprintf, "_glDetachShader": _glDetachShader, "_gettimeofday": _gettimeofday, "_pwrite": _pwrite, "_exit": _exit, "_readdir_r": _readdir_r, "_putenv": _putenv, "_llvm_pow_f64": _llvm_pow_f64, "_getcwd": _getcwd, "_IMG_Load": _IMG_Load, "_fmod": _fmod, "_lseek": _lseek, "___cxa_allocate_exception": ___cxa_allocate_exception, "_getchar": _getchar, "___buildEnvironment": ___buildEnvironment, "_glEnableClientState": _glEnableClientState, "_chdir": _chdir, "_localtime_r": _localtime_r, "_tzset": _tzset, "_open": _open, "_glClearColor": _glClearColor, "_glIsEnabled": _glIsEnabled, "_SDL_Init": _SDL_Init, "___cxa_end_catch": ___cxa_end_catch, "_glGetFloatv": _glGetFloatv, "_Mix_PlayChannel": _Mix_PlayChannel, "_Mix_Init": _Mix_Init, "_glDrawArrays": _glDrawArrays, "_TTF_RenderText_Solid": _TTF_RenderText_Solid, "_fseek": _fseek, "_getenv": _getenv, "_fclose": _fclose, "_SDL_UpperBlit": _SDL_UpperBlit, "_log": _log, "_glActiveTexture": _glActiveTexture, "_glTexCoordPointer": _glTexCoordPointer, "_recv": _recv, "_tan": _tan, "_fgetc": _fgetc, "_glCompileShader": _glCompileShader, "_glEnableVertexAttribArray": _glEnableVertexAttribArray, "_abort": _abort, "_Mix_PlayChannelTimed": _Mix_PlayChannelTimed, "_abs": _abs, "_glTexImage2D": _glTexImage2D, "_fopen": _fopen, "_Mix_ReserveChannels": _Mix_ReserveChannels, "_glDisableClientState": _glDisableClientState, "_Mix_LoadWAV_RW": _Mix_LoadWAV_RW, "_sin": _sin, "_SDL_GetTicks": _SDL_GetTicks, "_SDL_CloseAudio": _SDL_CloseAudio, "___gxx_personality_v0": ___gxx_personality_v0, "_emscripten_asm_const_int": _emscripten_asm_const_int, "_glTexParameteri": _glTexParameteri, "_ungetc": _ungetc, "_glLinkProgram": _glLinkProgram, "_SDL_FreeRW": _SDL_FreeRW, "_glColorPointer": _glColorPointer, "_SDL_PauseAudio": _SDL_PauseAudio, "_llvm_eh_typeid_for": _llvm_eh_typeid_for, "_SDL_PollEvent": _SDL_PollEvent, "_Mix_OpenAudio": _Mix_OpenAudio, "_strerror": _strerror, "_glClear": _glClear, "_fileno": _fileno, "_Mix_FreeChunk": _Mix_FreeChunk, "_glBindTexture": _glBindTexture, "__exit": __exit, "_IMG_Load_RW": _IMG_Load_RW, "_glBindAttribLocation": _glBindAttribLocation, "_glPixelStorei": _glPixelStorei, "_unlink": _unlink, "_Mix_HaltChannel": _Mix_HaltChannel, "_pread": _pread, "_mkport": _mkport, "_fflush": _fflush, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_emscripten_set_main_loop": _emscripten_set_main_loop, "___errno_location": ___errno_location, "_copysign": _copysign, "___cxa_throw": ___cxa_throw, "_Mix_Quit": _Mix_Quit, "_copysignl": _copysignl, "_SDL_GL_SwapBuffers": _SDL_GL_SwapBuffers, "_glDisable": _glDisable, "_modf": _modf, "_emscripten_cancel_main_loop": _emscripten_cancel_main_loop, "__formatString": __formatString, "_atexit": _atexit, "_sqrt": _sqrt, "_SDL_RWFromConstMem": _SDL_RWFromConstMem, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8, "ctlz_i8": ctlz_i8, "___rand_seed": ___rand_seed, "NaN": NaN, "Infinity": Infinity, "__ZTISt9exception": __ZTISt9exception, "___dso_handle": ___dso_handle, "_stdin": _stdin }, buffer);
  var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _strcat = Module["_strcat"] = asm["_strcat"];
var _free = Module["_free"] = asm["_free"];
var _main = Module["_main"] = asm["_main"];
var _rand_r = Module["_rand_r"] = asm["_rand_r"];
var _realloc = Module["_realloc"] = asm["_realloc"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _strlen = Module["_strlen"] = asm["_strlen"];
var _memset = Module["_memset"] = asm["_memset"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _strncpy = Module["_strncpy"] = asm["_strncpy"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _rand = Module["_rand"] = asm["_rand"];
var _strcpy = Module["_strcpy"] = asm["_strcpy"];
var _calloc = Module["_calloc"] = asm["_calloc"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var __GLOBAL__I_a = Module["__GLOBAL__I_a"] = asm["__GLOBAL__I_a"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_d = Module["dynCall_d"] = asm["dynCall_d"];
var dynCall_viiiiiii = Module["dynCall_viiiiiii"] = asm["dynCall_viiiiiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_dd = Module["dynCall_dd"] = asm["dynCall_dd"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
  
  Runtime.stackAlloc = asm['stackAlloc'];
  Runtime.stackSave = asm['stackSave'];
  Runtime.stackRestore = asm['stackRestore'];
  Runtime.setTempRet0 = asm['setTempRet0'];
  Runtime.getTempRet0 = asm['getTempRet0'];
  

// TODO: strip out parts of this we do not need

//======= begin closure i64 code =======

// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Defines a Long class for representing a 64-bit two's-complement
 * integer value, which faithfully simulates the behavior of a Java "long". This
 * implementation is derived from LongLib in GWT.
 *
 */

var i64Math = (function() { // Emscripten wrapper
  var goog = { math: {} };


  /**
   * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
   * values as *signed* integers.  See the from* functions below for more
   * convenient ways of constructing Longs.
   *
   * The internal representation of a long is the two given signed, 32-bit values.
   * We use 32-bit pieces because these are the size of integers on which
   * Javascript performs bit-operations.  For operations like addition and
   * multiplication, we split each number into 16-bit pieces, which can easily be
   * multiplied within Javascript's floating-point representation without overflow
   * or change in sign.
   *
   * In the algorithms below, we frequently reduce the negative case to the
   * positive case by negating the input(s) and then post-processing the result.
   * Note that we must ALWAYS check specially whether those values are MIN_VALUE
   * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
   * a positive number, it overflows back into a negative).  Not handling this
   * case would often result in infinite recursion.
   *
   * @param {number} low  The low (signed) 32 bits of the long.
   * @param {number} high  The high (signed) 32 bits of the long.
   * @constructor
   */
  goog.math.Long = function(low, high) {
    /**
     * @type {number}
     * @private
     */
    this.low_ = low | 0;  // force into 32 signed bits.

    /**
     * @type {number}
     * @private
     */
    this.high_ = high | 0;  // force into 32 signed bits.
  };


  // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
  // from* methods on which they depend.


  /**
   * A cache of the Long representations of small integer values.
   * @type {!Object}
   * @private
   */
  goog.math.Long.IntCache_ = {};


  /**
   * Returns a Long representing the given (32-bit) integer value.
   * @param {number} value The 32-bit integer in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromInt = function(value) {
    if (-128 <= value && value < 128) {
      var cachedObj = goog.math.Long.IntCache_[value];
      if (cachedObj) {
        return cachedObj;
      }
    }

    var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
    if (-128 <= value && value < 128) {
      goog.math.Long.IntCache_[value] = obj;
    }
    return obj;
  };


  /**
   * Returns a Long representing the given value, provided that it is a finite
   * number.  Otherwise, zero is returned.
   * @param {number} value The number in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromNumber = function(value) {
    if (isNaN(value) || !isFinite(value)) {
      return goog.math.Long.ZERO;
    } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MAX_VALUE;
    } else if (value < 0) {
      return goog.math.Long.fromNumber(-value).negate();
    } else {
      return new goog.math.Long(
          (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,
          (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);
    }
  };


  /**
   * Returns a Long representing the 64-bit integer that comes by concatenating
   * the given high and low bits.  Each is assumed to use 32 bits.
   * @param {number} lowBits The low 32-bits.
   * @param {number} highBits The high 32-bits.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromBits = function(lowBits, highBits) {
    return new goog.math.Long(lowBits, highBits);
  };


  /**
   * Returns a Long representation of the given string, written using the given
   * radix.
   * @param {string} str The textual representation of the Long.
   * @param {number=} opt_radix The radix in which the text is written.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromString = function(str, opt_radix) {
    if (str.length == 0) {
      throw Error('number format error: empty string');
    }

    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (str.charAt(0) == '-') {
      return goog.math.Long.fromString(str.substring(1), radix).negate();
    } else if (str.indexOf('-') >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }

    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));

    var result = goog.math.Long.ZERO;
    for (var i = 0; i < str.length; i += 8) {
      var size = Math.min(8, str.length - i);
      var value = parseInt(str.substring(i, i + size), radix);
      if (size < 8) {
        var power = goog.math.Long.fromNumber(Math.pow(radix, size));
        result = result.multiply(power).add(goog.math.Long.fromNumber(value));
      } else {
        result = result.multiply(radixToPower);
        result = result.add(goog.math.Long.fromNumber(value));
      }
    }
    return result;
  };


  // NOTE: the compiler should inline these constant values below and then remove
  // these variables, so there should be no runtime penalty for these.


  /**
   * Number used repeated below in calculations.  This must appear before the
   * first call to any from* function below.
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_32_DBL_ =
      goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_31_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ / 2;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_48_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_64_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_63_DBL_ =
      goog.math.Long.TWO_PWR_64_DBL_ / 2;


  /** @type {!goog.math.Long} */
  goog.math.Long.ZERO = goog.math.Long.fromInt(0);


  /** @type {!goog.math.Long} */
  goog.math.Long.ONE = goog.math.Long.fromInt(1);


  /** @type {!goog.math.Long} */
  goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);


  /** @type {!goog.math.Long} */
  goog.math.Long.MAX_VALUE =
      goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);


  /** @type {!goog.math.Long} */
  goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);


  /**
   * @type {!goog.math.Long}
   * @private
   */
  goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);


  /** @return {number} The value, assuming it is a 32-bit integer. */
  goog.math.Long.prototype.toInt = function() {
    return this.low_;
  };


  /** @return {number} The closest floating-point representation to this value. */
  goog.math.Long.prototype.toNumber = function() {
    return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +
           this.getLowBitsUnsigned();
  };


  /**
   * @param {number=} opt_radix The radix in which the text should be written.
   * @return {string} The textual representation of this value.
   */
  goog.math.Long.prototype.toString = function(opt_radix) {
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (this.isZero()) {
      return '0';
    }

    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        // We need to change the Long value before it can be negated, so we remove
        // the bottom-most digit in this base and then recurse to do the rest.
        var radixLong = goog.math.Long.fromNumber(radix);
        var div = this.div(radixLong);
        var rem = div.multiply(radixLong).subtract(this);
        return div.toString(radix) + rem.toInt().toString(radix);
      } else {
        return '-' + this.negate().toString(radix);
      }
    }

    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));

    var rem = this;
    var result = '';
    while (true) {
      var remDiv = rem.div(radixToPower);
      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
      var digits = intval.toString(radix);

      rem = remDiv;
      if (rem.isZero()) {
        return digits + result;
      } else {
        while (digits.length < 6) {
          digits = '0' + digits;
        }
        result = '' + digits + result;
      }
    }
  };


  /** @return {number} The high 32-bits as a signed value. */
  goog.math.Long.prototype.getHighBits = function() {
    return this.high_;
  };


  /** @return {number} The low 32-bits as a signed value. */
  goog.math.Long.prototype.getLowBits = function() {
    return this.low_;
  };


  /** @return {number} The low 32-bits as an unsigned value. */
  goog.math.Long.prototype.getLowBitsUnsigned = function() {
    return (this.low_ >= 0) ?
        this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
  };


  /**
   * @return {number} Returns the number of bits needed to represent the absolute
   *     value of this Long.
   */
  goog.math.Long.prototype.getNumBitsAbs = function() {
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        return 64;
      } else {
        return this.negate().getNumBitsAbs();
      }
    } else {
      var val = this.high_ != 0 ? this.high_ : this.low_;
      for (var bit = 31; bit > 0; bit--) {
        if ((val & (1 << bit)) != 0) {
          break;
        }
      }
      return this.high_ != 0 ? bit + 33 : bit + 1;
    }
  };


  /** @return {boolean} Whether this value is zero. */
  goog.math.Long.prototype.isZero = function() {
    return this.high_ == 0 && this.low_ == 0;
  };


  /** @return {boolean} Whether this value is negative. */
  goog.math.Long.prototype.isNegative = function() {
    return this.high_ < 0;
  };


  /** @return {boolean} Whether this value is odd. */
  goog.math.Long.prototype.isOdd = function() {
    return (this.low_ & 1) == 1;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long equals the other.
   */
  goog.math.Long.prototype.equals = function(other) {
    return (this.high_ == other.high_) && (this.low_ == other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long does not equal the other.
   */
  goog.math.Long.prototype.notEquals = function(other) {
    return (this.high_ != other.high_) || (this.low_ != other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than the other.
   */
  goog.math.Long.prototype.lessThan = function(other) {
    return this.compare(other) < 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than or equal to the other.
   */
  goog.math.Long.prototype.lessThanOrEqual = function(other) {
    return this.compare(other) <= 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than the other.
   */
  goog.math.Long.prototype.greaterThan = function(other) {
    return this.compare(other) > 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than or equal to the other.
   */
  goog.math.Long.prototype.greaterThanOrEqual = function(other) {
    return this.compare(other) >= 0;
  };


  /**
   * Compares this Long with the given one.
   * @param {goog.math.Long} other Long to compare against.
   * @return {number} 0 if they are the same, 1 if the this is greater, and -1
   *     if the given one is greater.
   */
  goog.math.Long.prototype.compare = function(other) {
    if (this.equals(other)) {
      return 0;
    }

    var thisNeg = this.isNegative();
    var otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) {
      return -1;
    }
    if (!thisNeg && otherNeg) {
      return 1;
    }

    // at this point, the signs are the same, so subtraction will not overflow
    if (this.subtract(other).isNegative()) {
      return -1;
    } else {
      return 1;
    }
  };


  /** @return {!goog.math.Long} The negation of this value. */
  goog.math.Long.prototype.negate = function() {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      return this.not().add(goog.math.Long.ONE);
    }
  };


  /**
   * Returns the sum of this and the given Long.
   * @param {goog.math.Long} other Long to add to this one.
   * @return {!goog.math.Long} The sum of this and the given Long.
   */
  goog.math.Long.prototype.add = function(other) {
    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns the difference of this and the given Long.
   * @param {goog.math.Long} other Long to subtract from this.
   * @return {!goog.math.Long} The difference of this and the given Long.
   */
  goog.math.Long.prototype.subtract = function(other) {
    return this.add(other.negate());
  };


  /**
   * Returns the product of this and the given long.
   * @param {goog.math.Long} other Long to multiply with this.
   * @return {!goog.math.Long} The product of this and the other.
   */
  goog.math.Long.prototype.multiply = function(other) {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    } else if (other.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().multiply(other.negate());
      } else {
        return this.negate().multiply(other).negate();
      }
    } else if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }

    // If both longs are small, use float multiplication
    if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&
        other.lessThan(goog.math.Long.TWO_PWR_24_)) {
      return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
    }

    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns this Long divided by the given one.
   * @param {goog.math.Long} other Long by which to divide.
   * @return {!goog.math.Long} This Long divided by the given one.
   */
  goog.math.Long.prototype.div = function(other) {
    if (other.isZero()) {
      throw Error('division by zero');
    } else if (this.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      if (other.equals(goog.math.Long.ONE) ||
          other.equals(goog.math.Long.NEG_ONE)) {
        return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
      } else if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().div(other.negate());
      } else {
        return this.negate().div(other).negate();
      }
    } else if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }

    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    var res = goog.math.Long.ZERO;
    var rem = this;
    while (rem.greaterThanOrEqual(other)) {
      // Approximate the result of division. This may be a little greater or
      // smaller than the actual value.
      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));

      // We will tweak the approximate result by changing it in the 48-th digit or
      // the smallest non-fractional digit, whichever is larger.
      var log2 = Math.ceil(Math.log(approx) / Math.LN2);
      var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);

      // Decrease the approximation until it is smaller than the remainder.  Note
      // that if it is too large, the product overflows and is negative.
      var approxRes = goog.math.Long.fromNumber(approx);
      var approxRem = approxRes.multiply(other);
      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
        approx -= delta;
        approxRes = goog.math.Long.fromNumber(approx);
        approxRem = approxRes.multiply(other);
      }

      // We know the answer can't be zero... and actually, zero would cause
      // infinite recursion since we would make no progress.
      if (approxRes.isZero()) {
        approxRes = goog.math.Long.ONE;
      }

      res = res.add(approxRes);
      rem = rem.subtract(approxRem);
    }
    return res;
  };


  /**
   * Returns this Long modulo the given one.
   * @param {goog.math.Long} other Long by which to mod.
   * @return {!goog.math.Long} This Long modulo the given one.
   */
  goog.math.Long.prototype.modulo = function(other) {
    return this.subtract(this.div(other).multiply(other));
  };


  /** @return {!goog.math.Long} The bitwise-NOT of this value. */
  goog.math.Long.prototype.not = function() {
    return goog.math.Long.fromBits(~this.low_, ~this.high_);
  };


  /**
   * Returns the bitwise-AND of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to AND.
   * @return {!goog.math.Long} The bitwise-AND of this and the other.
   */
  goog.math.Long.prototype.and = function(other) {
    return goog.math.Long.fromBits(this.low_ & other.low_,
                                   this.high_ & other.high_);
  };


  /**
   * Returns the bitwise-OR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to OR.
   * @return {!goog.math.Long} The bitwise-OR of this and the other.
   */
  goog.math.Long.prototype.or = function(other) {
    return goog.math.Long.fromBits(this.low_ | other.low_,
                                   this.high_ | other.high_);
  };


  /**
   * Returns the bitwise-XOR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to XOR.
   * @return {!goog.math.Long} The bitwise-XOR of this and the other.
   */
  goog.math.Long.prototype.xor = function(other) {
    return goog.math.Long.fromBits(this.low_ ^ other.low_,
                                   this.high_ ^ other.high_);
  };


  /**
   * Returns this Long with bits shifted to the left by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the left by the given amount.
   */
  goog.math.Long.prototype.shiftLeft = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var low = this.low_;
      if (numBits < 32) {
        var high = this.high_;
        return goog.math.Long.fromBits(
            low << numBits,
            (high << numBits) | (low >>> (32 - numBits)));
      } else {
        return goog.math.Long.fromBits(0, low << (numBits - 32));
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount.
   */
  goog.math.Long.prototype.shiftRight = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >> numBits);
      } else {
        return goog.math.Long.fromBits(
            high >> (numBits - 32),
            high >= 0 ? 0 : -1);
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount, with
   * the new top bits matching the current sign bit.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount, with
   *     zeros placed into the new leading bits.
   */
  goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >>> numBits);
      } else if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> (numBits - 32), 0);
      }
    }
  };

  //======= begin jsbn =======

  var navigator = { appName: 'Modern Browser' }; // polyfill a little

  // Copyright (c) 2005  Tom Wu
  // All Rights Reserved.
  // http://www-cs-students.stanford.edu/~tjw/jsbn/

  /*
   * Copyright (c) 2003-2005  Tom Wu
   * All Rights Reserved.
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
   * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
   * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
   *
   * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
   * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
   * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
   * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
   * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   *
   * In addition, the following condition applies:
   *
   * All redistributions must retain an intact copy of this copyright notice
   * and disclaimer.
   */

  // Basic JavaScript BN library - subset useful for RSA encryption.

  // Bits per digit
  var dbits;

  // JavaScript engine analysis
  var canary = 0xdeadbeefcafe;
  var j_lm = ((canary&0xffffff)==0xefcafe);

  // (public) Constructor
  function BigInteger(a,b,c) {
    if(a != null)
      if("number" == typeof a) this.fromNumber(a,b,c);
      else if(b == null && "string" != typeof a) this.fromString(a,256);
      else this.fromString(a,b);
  }

  // return new, unset BigInteger
  function nbi() { return new BigInteger(null); }

  // am: Compute w_j += (x*this_i), propagate carries,
  // c is initial carry, returns final carry.
  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
  // We need to select the fastest one that works in this environment.

  // am1: use a single mult and divide to get the high bits,
  // max digit bits should be 26 because
  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
  function am1(i,x,w,j,c,n) {
    while(--n >= 0) {
      var v = x*this[i++]+w[j]+c;
      c = Math.floor(v/0x4000000);
      w[j++] = v&0x3ffffff;
    }
    return c;
  }
  // am2 avoids a big mult-and-extract completely.
  // Max digit bits should be <= 30 because we do bitwise ops
  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
  function am2(i,x,w,j,c,n) {
    var xl = x&0x7fff, xh = x>>15;
    while(--n >= 0) {
      var l = this[i]&0x7fff;
      var h = this[i++]>>15;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
      c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
      w[j++] = l&0x3fffffff;
    }
    return c;
  }
  // Alternately, set max digit bits to 28 since some
  // browsers slow down when dealing with 32-bit numbers.
  function am3(i,x,w,j,c,n) {
    var xl = x&0x3fff, xh = x>>14;
    while(--n >= 0) {
      var l = this[i]&0x3fff;
      var h = this[i++]>>14;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x3fff)<<14)+w[j]+c;
      c = (l>>28)+(m>>14)+xh*h;
      w[j++] = l&0xfffffff;
    }
    return c;
  }
  if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
    BigInteger.prototype.am = am2;
    dbits = 30;
  }
  else if(j_lm && (navigator.appName != "Netscape")) {
    BigInteger.prototype.am = am1;
    dbits = 26;
  }
  else { // Mozilla/Netscape seems to prefer am3
    BigInteger.prototype.am = am3;
    dbits = 28;
  }

  BigInteger.prototype.DB = dbits;
  BigInteger.prototype.DM = ((1<<dbits)-1);
  BigInteger.prototype.DV = (1<<dbits);

  var BI_FP = 52;
  BigInteger.prototype.FV = Math.pow(2,BI_FP);
  BigInteger.prototype.F1 = BI_FP-dbits;
  BigInteger.prototype.F2 = 2*dbits-BI_FP;

  // Digit conversions
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = new Array();
  var rr,vv;
  rr = "0".charCodeAt(0);
  for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
  rr = "a".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  rr = "A".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

  function int2char(n) { return BI_RM.charAt(n); }
  function intAt(s,i) {
    var c = BI_RC[s.charCodeAt(i)];
    return (c==null)?-1:c;
  }

  // (protected) copy this to r
  function bnpCopyTo(r) {
    for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
  }

  // (protected) set from integer value x, -DV <= x < DV
  function bnpFromInt(x) {
    this.t = 1;
    this.s = (x<0)?-1:0;
    if(x > 0) this[0] = x;
    else if(x < -1) this[0] = x+DV;
    else this.t = 0;
  }

  // return bigint initialized to value
  function nbv(i) { var r = nbi(); r.fromInt(i); return r; }

  // (protected) set from string and radix
  function bnpFromString(s,b) {
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 256) k = 8; // byte array
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else { this.fromRadix(s,b); return; }
    this.t = 0;
    this.s = 0;
    var i = s.length, mi = false, sh = 0;
    while(--i >= 0) {
      var x = (k==8)?s[i]&0xff:intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-") mi = true;
        continue;
      }
      mi = false;
      if(sh == 0)
        this[this.t++] = x;
      else if(sh+k > this.DB) {
        this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
        this[this.t++] = (x>>(this.DB-sh));
      }
      else
        this[this.t-1] |= x<<sh;
      sh += k;
      if(sh >= this.DB) sh -= this.DB;
    }
    if(k == 8 && (s[0]&0x80) != 0) {
      this.s = -1;
      if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
    }
    this.clamp();
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) clamp off excess high words
  function bnpClamp() {
    var c = this.s&this.DM;
    while(this.t > 0 && this[this.t-1] == c) --this.t;
  }

  // (public) return string representation in given radix
  function bnToString(b) {
    if(this.s < 0) return "-"+this.negate().toString(b);
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else return this.toRadix(b);
    var km = (1<<k)-1, d, m = false, r = "", i = this.t;
    var p = this.DB-(i*this.DB)%k;
    if(i-- > 0) {
      if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
      while(i >= 0) {
        if(p < k) {
          d = (this[i]&((1<<p)-1))<<(k-p);
          d |= this[--i]>>(p+=this.DB-k);
        }
        else {
          d = (this[i]>>(p-=k))&km;
          if(p <= 0) { p += this.DB; --i; }
        }
        if(d > 0) m = true;
        if(m) r += int2char(d);
      }
    }
    return m?r:"0";
  }

  // (public) -this
  function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }

  // (public) |this|
  function bnAbs() { return (this.s<0)?this.negate():this; }

  // (public) return + if this > a, - if this < a, 0 if equal
  function bnCompareTo(a) {
    var r = this.s-a.s;
    if(r != 0) return r;
    var i = this.t;
    r = i-a.t;
    if(r != 0) return (this.s<0)?-r:r;
    while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
    return 0;
  }

  // returns bit length of the integer x
  function nbits(x) {
    var r = 1, t;
    if((t=x>>>16) != 0) { x = t; r += 16; }
    if((t=x>>8) != 0) { x = t; r += 8; }
    if((t=x>>4) != 0) { x = t; r += 4; }
    if((t=x>>2) != 0) { x = t; r += 2; }
    if((t=x>>1) != 0) { x = t; r += 1; }
    return r;
  }

  // (public) return the number of bits in "this"
  function bnBitLength() {
    if(this.t <= 0) return 0;
    return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
  }

  // (protected) r = this << n*DB
  function bnpDLShiftTo(n,r) {
    var i;
    for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
    for(i = n-1; i >= 0; --i) r[i] = 0;
    r.t = this.t+n;
    r.s = this.s;
  }

  // (protected) r = this >> n*DB
  function bnpDRShiftTo(n,r) {
    for(var i = n; i < this.t; ++i) r[i-n] = this[i];
    r.t = Math.max(this.t-n,0);
    r.s = this.s;
  }

  // (protected) r = this << n
  function bnpLShiftTo(n,r) {
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<cbs)-1;
    var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
    for(i = this.t-1; i >= 0; --i) {
      r[i+ds+1] = (this[i]>>cbs)|c;
      c = (this[i]&bm)<<bs;
    }
    for(i = ds-1; i >= 0; --i) r[i] = 0;
    r[ds] = c;
    r.t = this.t+ds+1;
    r.s = this.s;
    r.clamp();
  }

  // (protected) r = this >> n
  function bnpRShiftTo(n,r) {
    r.s = this.s;
    var ds = Math.floor(n/this.DB);
    if(ds >= this.t) { r.t = 0; return; }
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<bs)-1;
    r[0] = this[ds]>>bs;
    for(var i = ds+1; i < this.t; ++i) {
      r[i-ds-1] |= (this[i]&bm)<<cbs;
      r[i-ds] = this[i]>>bs;
    }
    if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
    r.t = this.t-ds;
    r.clamp();
  }

  // (protected) r = this - a
  function bnpSubTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]-a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c -= a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c -= a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c -= a.s;
    }
    r.s = (c<0)?-1:0;
    if(c < -1) r[i++] = this.DV+c;
    else if(c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
  }

  // (protected) r = this * a, r != this,a (HAC 14.12)
  // "this" should be the larger one if appropriate.
  function bnpMultiplyTo(a,r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i+y.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
    r.s = 0;
    r.clamp();
    if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
  }

  // (protected) r = this^2, r != this (HAC 14.16)
  function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2*x.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < x.t-1; ++i) {
      var c = x.am(i,x[i],r,2*i,0,1);
      if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
        r[i+x.t] -= x.DV;
        r[i+x.t+1] = 1;
      }
    }
    if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
    r.s = 0;
    r.clamp();
  }

  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
  // r != q, this != m.  q or r may be null.
  function bnpDivRemTo(m,q,r) {
    var pm = m.abs();
    if(pm.t <= 0) return;
    var pt = this.abs();
    if(pt.t < pm.t) {
      if(q != null) q.fromInt(0);
      if(r != null) this.copyTo(r);
      return;
    }
    if(r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus
    if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
    else { pm.copyTo(y); pt.copyTo(r); }
    var ys = y.t;
    var y0 = y[ys-1];
    if(y0 == 0) return;
    var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
    var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
    var i = r.t, j = i-ys, t = (q==null)?nbi():q;
    y.dlShiftTo(j,t);
    if(r.compareTo(t) >= 0) {
      r[r.t++] = 1;
      r.subTo(t,r);
    }
    BigInteger.ONE.dlShiftTo(ys,t);
    t.subTo(y,y);	// "negative" y so we can replace sub with am later
    while(y.t < ys) y[y.t++] = 0;
    while(--j >= 0) {
      // Estimate quotient digit
      var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
      if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
        y.dlShiftTo(j,t);
        r.subTo(t,r);
        while(r[i] < --qd) r.subTo(t,r);
      }
    }
    if(q != null) {
      r.drShiftTo(ys,q);
      if(ts != ms) BigInteger.ZERO.subTo(q,q);
    }
    r.t = ys;
    r.clamp();
    if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
    if(ts < 0) BigInteger.ZERO.subTo(r,r);
  }

  // (public) this mod a
  function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a,null,r);
    if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
    return r;
  }

  // Modular reduction using "classic" algorithm
  function Classic(m) { this.m = m; }
  function cConvert(x) {
    if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
    else return x;
  }
  function cRevert(x) { return x; }
  function cReduce(x) { x.divRemTo(this.m,null,x); }
  function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  Classic.prototype.convert = cConvert;
  Classic.prototype.revert = cRevert;
  Classic.prototype.reduce = cReduce;
  Classic.prototype.mulTo = cMulTo;
  Classic.prototype.sqrTo = cSqrTo;

  // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
  // justification:
  //         xy == 1 (mod m)
  //         xy =  1+km
  //   xy(2-xy) = (1+km)(1-km)
  // x[y(2-xy)] = 1-k^2m^2
  // x[y(2-xy)] == 1 (mod m^2)
  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
  // JS multiply "overflows" differently from C/C++, so care is needed here.
  function bnpInvDigit() {
    if(this.t < 1) return 0;
    var x = this[0];
    if((x&1) == 0) return 0;
    var y = x&3;		// y == 1/x mod 2^2
    y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
    y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
    y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return (y>0)?this.DV-y:-y;
  }

  // Montgomery reduction
  function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp&0x7fff;
    this.mph = this.mp>>15;
    this.um = (1<<(m.DB-15))-1;
    this.mt2 = 2*m.t;
  }

  // xR mod m
  function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t,r);
    r.divRemTo(this.m,null,r);
    if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
    return r;
  }

  // x/R mod m
  function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
  }

  // x = x/R mod m (HAC 14.32)
  function montReduce(x) {
    while(x.t <= this.mt2)	// pad x so am has enough room later
      x[x.t++] = 0;
    for(var i = 0; i < this.m.t; ++i) {
      // faster way of calculating u0 = x[i]*mp mod DV
      var j = x[i]&0x7fff;
      var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
      // use am to combine the multiply-shift-add into one call
      j = i+this.m.t;
      x[j] += this.m.am(0,u0,x,i,0,this.m.t);
      // propagate carry
      while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
    }
    x.clamp();
    x.drShiftTo(this.m.t,x);
    if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
  }

  // r = "x^2/R mod m"; x != r
  function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  // r = "xy/R mod m"; x,y != r
  function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

  Montgomery.prototype.convert = montConvert;
  Montgomery.prototype.revert = montRevert;
  Montgomery.prototype.reduce = montReduce;
  Montgomery.prototype.mulTo = montMulTo;
  Montgomery.prototype.sqrTo = montSqrTo;

  // (protected) true iff this is even
  function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }

  // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
  function bnpExp(e,z) {
    if(e > 0xffffffff || e < 1) return BigInteger.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
    g.copyTo(r);
    while(--i >= 0) {
      z.sqrTo(r,r2);
      if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
      else { var t = r; r = r2; r2 = t; }
    }
    return z.revert(r);
  }

  // (public) this^e % m, 0 <= e < 2^32
  function bnModPowInt(e,m) {
    var z;
    if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
    return this.exp(e,z);
  }

  // protected
  BigInteger.prototype.copyTo = bnpCopyTo;
  BigInteger.prototype.fromInt = bnpFromInt;
  BigInteger.prototype.fromString = bnpFromString;
  BigInteger.prototype.clamp = bnpClamp;
  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
  BigInteger.prototype.drShiftTo = bnpDRShiftTo;
  BigInteger.prototype.lShiftTo = bnpLShiftTo;
  BigInteger.prototype.rShiftTo = bnpRShiftTo;
  BigInteger.prototype.subTo = bnpSubTo;
  BigInteger.prototype.multiplyTo = bnpMultiplyTo;
  BigInteger.prototype.squareTo = bnpSquareTo;
  BigInteger.prototype.divRemTo = bnpDivRemTo;
  BigInteger.prototype.invDigit = bnpInvDigit;
  BigInteger.prototype.isEven = bnpIsEven;
  BigInteger.prototype.exp = bnpExp;

  // public
  BigInteger.prototype.toString = bnToString;
  BigInteger.prototype.negate = bnNegate;
  BigInteger.prototype.abs = bnAbs;
  BigInteger.prototype.compareTo = bnCompareTo;
  BigInteger.prototype.bitLength = bnBitLength;
  BigInteger.prototype.mod = bnMod;
  BigInteger.prototype.modPowInt = bnModPowInt;

  // "constants"
  BigInteger.ZERO = nbv(0);
  BigInteger.ONE = nbv(1);

  // jsbn2 stuff

  // (protected) convert from radix string
  function bnpFromRadix(s,b) {
    this.fromInt(0);
    if(b == null) b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
    for(var i = 0; i < s.length; ++i) {
      var x = intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
        continue;
      }
      w = b*w+x;
      if(++j >= cs) {
        this.dMultiply(d);
        this.dAddOffset(w,0);
        j = 0;
        w = 0;
      }
    }
    if(j > 0) {
      this.dMultiply(Math.pow(b,j));
      this.dAddOffset(w,0);
    }
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) return x s.t. r^x < DV
  function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }

  // (public) 0 if this == 0, 1 if this > 0
  function bnSigNum() {
    if(this.s < 0) return -1;
    else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
    else return 1;
  }

  // (protected) this *= n, this >= 0, 1 < n < DV
  function bnpDMultiply(n) {
    this[this.t] = this.am(0,n-1,this,0,0,this.t);
    ++this.t;
    this.clamp();
  }

  // (protected) this += n << w words, this >= 0
  function bnpDAddOffset(n,w) {
    if(n == 0) return;
    while(this.t <= w) this[this.t++] = 0;
    this[w] += n;
    while(this[w] >= this.DV) {
      this[w] -= this.DV;
      if(++w >= this.t) this[this.t++] = 0;
      ++this[w];
    }
  }

  // (protected) convert to radix string
  function bnpToRadix(b) {
    if(b == null) b = 10;
    if(this.signum() == 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b,cs);
    var d = nbv(a), y = nbi(), z = nbi(), r = "";
    this.divRemTo(d,y,z);
    while(y.signum() > 0) {
      r = (a+z.intValue()).toString(b).substr(1) + r;
      y.divRemTo(d,y,z);
    }
    return z.intValue().toString(b) + r;
  }

  // (public) return value as integer
  function bnIntValue() {
    if(this.s < 0) {
      if(this.t == 1) return this[0]-this.DV;
      else if(this.t == 0) return -1;
    }
    else if(this.t == 1) return this[0];
    else if(this.t == 0) return 0;
    // assumes 16 < DB < 32
    return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
  }

  // (protected) r = this + a
  function bnpAddTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]+a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c += a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c += a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += a.s;
    }
    r.s = (c<0)?-1:0;
    if(c > 0) r[i++] = c;
    else if(c < -1) r[i++] = this.DV+c;
    r.t = i;
    r.clamp();
  }

  BigInteger.prototype.fromRadix = bnpFromRadix;
  BigInteger.prototype.chunkSize = bnpChunkSize;
  BigInteger.prototype.signum = bnSigNum;
  BigInteger.prototype.dMultiply = bnpDMultiply;
  BigInteger.prototype.dAddOffset = bnpDAddOffset;
  BigInteger.prototype.toRadix = bnpToRadix;
  BigInteger.prototype.intValue = bnIntValue;
  BigInteger.prototype.addTo = bnpAddTo;

  //======= end jsbn =======

  // Emscripten wrapper
  var Wrapper = {
    abs: function(l, h) {
      var x = new goog.math.Long(l, h);
      var ret;
      if (x.isNegative()) {
        ret = x.negate();
      } else {
        ret = x;
      }
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    ensureTemps: function() {
      if (Wrapper.ensuredTemps) return;
      Wrapper.ensuredTemps = true;
      Wrapper.two32 = new BigInteger();
      Wrapper.two32.fromString('4294967296', 10);
      Wrapper.two64 = new BigInteger();
      Wrapper.two64.fromString('18446744073709551616', 10);
      Wrapper.temp1 = new BigInteger();
      Wrapper.temp2 = new BigInteger();
    },
    lh2bignum: function(l, h) {
      var a = new BigInteger();
      a.fromString(h.toString(), 10);
      var b = new BigInteger();
      a.multiplyTo(Wrapper.two32, b);
      var c = new BigInteger();
      c.fromString(l.toString(), 10);
      var d = new BigInteger();
      c.addTo(b, d);
      return d;
    },
    stringify: function(l, h, unsigned) {
      var ret = new goog.math.Long(l, h).toString();
      if (unsigned && ret[0] == '-') {
        // unsign slowly using jsbn bignums
        Wrapper.ensureTemps();
        var bignum = new BigInteger();
        bignum.fromString(ret, 10);
        ret = new BigInteger();
        Wrapper.two64.addTo(bignum, ret);
        ret = ret.toString(10);
      }
      return ret;
    },
    fromString: function(str, base, min, max, unsigned) {
      Wrapper.ensureTemps();
      var bignum = new BigInteger();
      bignum.fromString(str, base);
      var bigmin = new BigInteger();
      bigmin.fromString(min, 10);
      var bigmax = new BigInteger();
      bigmax.fromString(max, 10);
      if (unsigned && bignum.compareTo(BigInteger.ZERO) < 0) {
        var temp = new BigInteger();
        bignum.addTo(Wrapper.two64, temp);
        bignum = temp;
      }
      var error = false;
      if (bignum.compareTo(bigmin) < 0) {
        bignum = bigmin;
        error = true;
      } else if (bignum.compareTo(bigmax) > 0) {
        bignum = bigmax;
        error = true;
      }
      var ret = goog.math.Long.fromString(bignum.toString()); // min-max checks should have clamped this to a range goog.math.Long can handle well
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
      if (error) throw 'range error';
    }
  };
  return Wrapper;
})();

//======= end closure i64 code =======



// === Auto-generated postamble setup entry stuff ===

if (memoryInitializer) {
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, STATIC_BASE);
  } else {
    addRunDependency('memory initializer');
    Browser.asyncLoad(memoryInitializer, function(data) {
      for (var i = 0; i < data.length; i++) {
        assert(HEAPU8[STATIC_BASE + i] === 0, "area for memory initializer should not have been touched before it's loaded");
      }
      HEAPU8.set(data, STATIC_BASE);
      removeRunDependency('memory initializer');
    }, function(data) {
      throw 'could not load memory initializer ' + memoryInitializer;
    });
  }
}

function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun'] && shouldRunNow) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram'] || '/bin/this.program'), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);

  initialStackTop = STACKTOP;

  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    if (!Module['noExitRuntime']) {
      exit(ret);
    }
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['_main'] && shouldRunNow) {
      Module['callMain'](args);
    }

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      if (!ABORT) doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status) {
  ABORT = true;
  EXITSTATUS = status;
  STACKTOP = initialStackTop;

  // exit the runtime
  exitRuntime();

  // TODO We should handle this differently based on environment.
  // In the browser, the best we can do is throw an exception
  // to halt execution, but in node we could process.exit and
  // I'd imagine SM shell would have something equivalent.
  // This would let us set a proper exit status (which
  // would be great for checking test exit statuses).
  // https://github.com/kripken/emscripten/issues/1371

  // throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

function abort(text) {
  if (text) {
    Module.print(text);
    Module.printErr(text);
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  throw 'abort() at ' + stackTrace() + extra;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}



//# sourceMappingURL=tmp.js.map