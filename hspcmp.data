
;============================================================
;                                                 2008/08/29
;	Artlet2D for HSP 3.0 / GDI+
;	Version 1.01
;                    S.Programs http://sprocket.babyblue.jp/
;============================================================

#ifndef alInitModule

;============================================================
#module a2d

#define IMGS_MAX 512 ; Number of Image IDs

;-----------------------------------------------------------
; declare func / const

; GDI+ Token
#uselib "gdiplus"
#func GdiplusStartup	"GdiplusStartup"	int, int, int
#func GdiplusShutdown	"GdiplusShutdown"	int

; Image Object
#uselib "gdiplus"
#func GdipCreateBitmapFromScan0	"GdipCreateBitmapFromScan0"	int, int, int, int, int, int
#func GdipCreateBitmapFromGdiDib "GdipCreateBitmapFromGdiDib"	int, int, int
#func GdipLoadImageFromFile	"GdipLoadImageFromFile"	wstr, int
#func GdipDisposeImage		"GdipDisposeImage"	int
#func GdipBitmapLockBits	"GdipBitmapLockBits"	int, int, int, int, int
#func GdipBitmapUnlockBits	"GdipBitmapUnlockBits"	int, int
#func GdipGetImageWidth		"GdipGetImageWidth"	int, int
#func GdipGetImageHeight	"GdipGetImageHeight"	int, int
#func GdipBitmapGetPixel	"GdipBitmapGetPixel"	int, int, int, int
#func GdipBitmapSetPixel	"GdipBitmapSetPixel"	int, int, int, int
#func GdipSaveImageToFile	"GdipSaveImageToFile"	int, wstr, int, int

; Graphics Object
#uselib "gdiplus"
#func GdipGetImageGraphicsContext "GdipGetImageGraphicsContext" int, int
#func GdipCreateFromHDC		"GdipCreateFromHDC"	int, int
#func GdipDeleteGraphics	"GdipDeleteGraphics"	int
#func GdipSetSmoothingMode	"GdipSetSmoothingMode"	int, int
#func GdipSetPixelOffsetMode	"GdipSetPixelOffsetMode"	int, int
#func GdipSetCompositingQuality	"GdipSetCompositingQuality"	int, int
#func GdipSetTextRenderingHint	"GdipSetTextRenderingHint"	int, int
#func GdipSetCompositingMode	"GdipSetCompositingMode"	int, int
#func GdipSetWorldTransform	"GdipSetWorldTransform"	int, int
#func GdipResetWorldTransform	"GdipResetWorldTransform" int
#func GdipSetClipRectI		"GdipSetClipRectI"	int, int, int, int, int, int
#func GdipResetClip		"GdipResetClip"		int

; Brush Object
#uselib "gdiplus"
#func GdipCreateSolidFill	"GdipCreateSolidFill"	int, int
#func GdipCreateLineBrushI	"GdipCreateLineBrushI"	int, int, int, int, int, int
#func GdipCreateTexture		"GdipCreateTexture"	int, int, int
#func GdipDeleteBrush		"GdipDeleteBrush"	int

; Pen Object
#uselib "gdiplus"
#func GdipCreatePen1		"GdipCreatePen1"	int, float, int, int
#func GdipCreatePen2		"GdipCreatePen2"	int, float, int, int
#func GdipDeletePen		"GdipDeletePen"		int
#func GdipGetPenWidth		"GdipGetPenWidth"	int, int
#func GdipSetPenWidth		"GdipSetPenWidth"	int, int
#func GdipGetPenDashStyle	"GdipGetPenDashStyle"	int, int
#func GdipSetPenDashStyle	"GdipSetPenDashStyle"	int, int
#func GdipSetPenMode		"GdipSetPenMode"	int, int

; Font Object
#uselib "gdiplus"
#func GdipCreateFontFromDC	"GdipCreateFontFromDC"	int, int
#func GdipDeleteFont		"GdipDeleteFont"	int

; DrawImage
#uselib "gdiplus"
#func GdipDrawImageI		"GdipDrawImageI"		int, int, int, int
#func GdipDrawImagePointRectI	"GdipDrawImagePointRectI"	int, int, int, int, int, int, int, int, int
#func GdipDrawImageRectRectI	"GdipDrawImageRectRectI"	int, int, int, int, int, int, int, int, int, int, int, int, int, int
#func GdipDrawImagePointsI	"GdipDrawImagePointsI"		int, int, int, int

; PixelFormat
#const	PixelFormatGDI          0x00020000 // Is a GDI-supported format
#const	PixelFormatAlpha        0x00040000 // Has an alpha component
#const	PixelFormatCanonical    0x00200000
#const	PixelFormat24bppRGB        (8 | (24 << 8) | PixelFormatGDI)
#const	PixelFormat32bppARGB       (10 | (32 << 8) | PixelFormatAlpha | PixelFormatGDI | PixelFormatCanonical)

;enum DashStyle
#enum global	DashStyleSolid	= 0
#enum global	DashStyleDash
#enum global	DashStyleDot
#enum global	DashStyleDashDot
#enum global	DashStyleDashDotDot
#enum global	DashStyleCustom

;enum WrapMode
#enum global	WrapModeTile	= 0
#enum global	WrapModeTileFlipX
#enum global	WrapModeTileFlipY
#enum global	WrapModeTileFlipXY
#enum global	WrapModeClamp

;enum Unit
#enum	UnitWorld = 0	// 0 -- World coordinate (non-physical unit)
#enum	UnitDisplay	// 1 -- Variable -- for PageTransform only
#enum	UnitPixel	// 2 -- Each unit is one device pixel.

;-----------------------------------------------------------
; tools

; misc
#uselib "kernel32"
#cfunc alWstrlen "lstrlenW" wptr

; tool
#defcfunc alFloat double p1
	temp = p1
	return ((p1 < 0) << 31) | (lpeek(temp,4) - 0x38000000 << 3) * (p1 ! 0) | (lpeek(temp,0) >> 29 & 7)

; ginfo
#define gf_sel ginfo(3)
#define gf_r ginfo(16)
#define gf_g ginfo(17)
#define gf_b ginfo(18)
#define gf_intid ginfo(24)

; ARGB Macro
#define global ctype RGBA(%1=0, %2=0, %3=0, %4=255) (((%4)<<24)|((%1)<<16)|((%2)<<8)|(%3))
#define global ctype ARGB(%1=255, %2=0, %3=0, %4=0) (((%1)<<24)|((%2)<<16)|((%3)<<8)|(%4))
#define global ctype ARGB_A(%1) (((%1)>>24)&255)
#define global ctype ARGB_R(%1) (((%1)>>16)&255)
#define global ctype ARGB_G(%1) (((%1)>>8)&255)
#define global ctype ARGB_B(%1) ((%1)&255)

; 命令名
; ・命令名に Image を含むものは引数に Image ID を受け取る / そうでない命令は含んではいけない
; ・命令名に Screen を含むものは引数に HSP Screen ID を受け取る / そうでない命令は含んではいけない
; ・命令名に File を含むものは引数にファイル名を受け取る / そうでない命令は含んではいけない



;============================================================
;	イメージ管理
;============================================================

;-----------------------------------------------------------
#deffunc alInitModule
	; Initialize
	if gdiplusToken = 0 {
		; Image セットバッファ 作成
		; 1 つの Image セットは、
		; Valid, Width, Height, objImage, objGraphics, objBrush, objPen, objFont
		; のセットである

		; img プロパティ
		dim imgValidArr, IMGS_MAX	; 有効フラグ
		dim imgWidthArr, IMGS_MAX	; Image Width
		dim imgHeightArr, IMGS_MAX	; Image Height

		; img object
		dim imgImageArr, IMGS_MAX
		dim imgGraphicsArr, IMGS_MAX
		dim imgBrushArr, IMGS_MAX
		dim imgPenArr, IMGS_MAX
		dim imgFontArr, IMGS_MAX

		if varptr(GdiplusStartup) {
			gsi = 1, 0, 0, 0
			GdiplusStartup varptr(gdiplusToken), varptr(gsi), 0	; GDI+ 開始
			return
		}
	}
	return

;-----------------------------------------------------------
#deffunc alSelectImage int p1

	if (p1 < 0) | (p1 >= IMGS_MAX) : return -1
	alInitModule

	if imgValidArr(p1) { ; 有効な Image ID ならコンテキスト切り替え
		imgID = p1

		; Image プロパティ
		dup imgValid,	imgValidArr(imgID)
		dup imgWidth,	imgWidthArr(imgID)
		dup imgHeight,	imgHeightArr(imgID)

		; Image object
		dup imgImage,	imgImageArr(imgID)
		dup imgGraphics,imgGraphicsArr(imgID)
		dup imgBrush,	imgBrushArr(imgID)
		dup imgPen,	imgPenArr(imgID)
		dup imgFont,	imgFontArr(imgID)

		return 0
	}
	return -1

;-----------------------------------------------------------
#deffunc alDeleteImage int p1, int p2

	if (p1 < 0) | (p1 >= IMGS_MAX) : return -1
	alInitModule

	if imgValidArr(p1) {
		; Image ID の開放
		imgValidArr(p1) = 0

		; リソースの開放
		if imgImageArr(p1) {
			GdipDisposeImage imgImageArr(p1)	; Image を処分
			imgImageArr(p1) = 0
		}
		if imgGraphicsArr(p1) {
			GdipDeleteGraphics imgGraphicsArr(p1)	; Graphics を削除
			imgGraphicsArr(p1) = 0
		}
		if imgBrushArr(p1) {
			GdipDeleteBrush imgBrushArr(p1)		; Brush を削除
			imgBrushArr(p1) = 0
		}
		if imgPenArr(p1) {
			GdipDeletePen imgPenArr(p1)		; Pen を削除
			imgPenArr(p1) = 0
		}
		if imgFontArr(p1) {
			GdipDeleteFont imgFontArr(p1)		; Font を削除
			imgFontArr(p1) = 0
		}

		if p2 ! 1 { ; p2 = 1 の場合、GDI+ を終了しない
			; すべての Image が開放されたら: GDI+ 終了
			repeat IMGS_MAX + 1
				if cnt = IMGS_MAX {
					GdiplusShutdown gdiplusToken ; GDI+ 終了
					gdiplusToken = 0
					break
				}
				if imgValidArr(cnt) {
					break
				}
			loop
		}

		return 0
	}
	return -1

;-----------------------------------------------------------
#deffunc alCreateImage_ int p1, int pw, int ph

	if (p1 < 0) | (p1 >= IMGS_MAX) : return -1
	alInitModule

	if gdiplusToken {
		; 有効化
		alDeleteImage p1, 1	; Image ID 削除
		imgValidArr(p1) = 1	; Image ID を有効化
		alSelectImage p1	; 選択 (dup-context change)

		; プロパティ 設定
		imgWidth  = pw
		imgHeight = ph

		; オフスクリーンバッファ Image / Graphics 作成
		GdipCreateBitmapFromScan0 imgWidth, imgHeight, 0, PixelFormat32bppARGB, 0, varptr(imgImage)
		GdipGetImageGraphicsContext imgImage, varptr(imgGraphics)

		; デフォルト Brush / Pen 作成
		GdipCreateSolidFill 0xff000000, varptr(imgBrush)
		GdipCreatePen2 imgBrush, 1, UnitPixel, varptr(imgPen) ; (default PenWidth = 1px)

		; Graphics 高画質モードに設定
		GdipSetSmoothingMode imgGraphics, 2	; SmoothingModeHighQuality = QualityModeHigh
		GdipSetPixelOffsetMode imgGraphics, 2	; PixelOffsetModeHighQuality = QualityModeHigh
		GdipSetTextRenderingHint imgGraphics, 4	; TextRenderingHintAntiAlias
	;	GdipSetCompositingQuality imgGraphics, 2 ; CompositingQualityHighQuality = QualityModeHigh

		return 0
	}
	return -1

#define global alCreateImage(%1=0, %2=640, %3=480)	alCreateImage_ %1, %2, %3

;-----------------------------------------------------------
#deffunc alDeleteAll  onexit
	if gdiplusToken {
		repeat IMGS_MAX
			alDeleteImage cnt
		loop
		return 0
	}
	return -1

;-----------------------------------------------------------
#defcfunc alGetID
	if imgValid : return imgID
	return -1

#defcfunc alGetWidth
	if imgValid : return imgWidth
	return -1

#defcfunc alGetHeight
	if imgValid : return imgHeight
	return -1



;============================================================
;	クリッピング
;============================================================

;-----------------------------------------------------------
#deffunc alClipModeRect int px, int py, int pw, int ph
	if imgValid : GdipSetClipRectI imgGraphics, px, py, pw, ph, 0
	return

;-----------------------------------------------------------
#deffunc alResetClipMode
	if imgValid : GdipResetClip imgGraphics
	return



;============================================================
;	コピーモード
;============================================================

; ImageAttributes Object
#uselib "gdiplus"
#func GdipCreateImageAttributes		"GdipCreateImageAttributes"	int
#func GdipDisposeImageAttributes	"GdipDisposeImageAttributes"	int
#func GdipSetImageAttributesColorMatrix	"GdipSetImageAttributesColorMatrix"	int, int, int, int, int, int
#func GdipSetImageAttributesColorKeys	"GdipSetImageAttributesColorKeys"	int, int, int, int, int
#func GdipSetImageAttributesGamma	"GdipSetImageAttributesGamma"		int, int, int, float

;-----------------------------------------------------------
#deffunc alResetCopyMode
	if pImageAttr {
		GdipDisposeImageAttributes pImageAttr
		pImageAttr = 0
		return 0
	}
	return -1

;-----------------------------------------------------------
#deffunc alCopyModeColorMatrix array v
	if gdiplusToken {
		alResetCopyMode
		GdipCreateImageAttributes varptr(pImageAttr)

		; Color Matrix (float)
		; 行列転置 + ダミー列追加
		repeat 25
			if cnt = 24 {
				arr(cnt) = alFloat(1)
			} else:if cnt \ 5 = 4 {
				arr(cnt) = 0
			} else {
				arr(cnt) = alFloat(v(cnt\5*5+cnt/5))
			}
		loop

		; ColorMatrixFlagsDefault = 0
		; ColorAdjustTypeBitmap = 1
		GdipSetImageAttributesColorMatrix pImageAttr, 1, 1, varptr(arr), 0, 0
	}
	return 0

#define global MAT_R 0
#define global MAT_G 5
#define global MAT_B 10
#define global MAT_A 15

;-----------------------------------------------------------
#deffunc alCopyModeAlpha double p1
	cmatrix(MAT_R) = 1.0, 0.0, 0.0
	cmatrix(MAT_G) = 0.0, 1.0, 0.0
	cmatrix(MAT_B) = 0.0, 0.0, 1.0
	cmatrix(MAT_A) = 0.0, 0.0, 0.0, limitf(p1, 0, 1), 0.0
	alCopyModeColorMatrix cmatrix
	return 0

;-----------------------------------------------------------
#deffunc alCopyModeGamma double p1
	if gdiplusToken {
		alResetCopyMode
		GdipCreateImageAttributes varptr(pImageAttr)
		GdipSetImageAttributesGamma pImageAttr, 1, 1, p1
	}
	return 0

;-----------------------------------------------------------
#deffunc alCopyModeColorKey int p1, int p2
	if gdiplusToken {
		alResetCopyMode
		GdipCreateImageAttributes varptr(pImageAttr)
		GdipSetImageAttributesColorKeys pImageAttr, 0, 1, p1, p2 ; (ColorAdjustTypeDefault = 0)
	}
	return 0



;============================================================
;	コピー・ズーム
;============================================================

;-----------------------------------------------------------
#deffunc alStretchImageToImage int p2, int p1,  int psx, int psy, int psw, int psh,  int pdx, int pdy, int pdw, int pdh
	if imgValidArr(p1) & imgValidArr(p2) {
		GdipDrawImageRectRectI imgGraphicsArr(p1), imgImageArr(p2), pdx, pdy, pdw, pdh, psx, psy, psw, psh, UnitPixel, pImageAttr, 0, 0
		return 0
	}
	return -1

;-----------------------------------------------------------
#deffunc alStretchImageToScreen int p2, int p1,  int psx, int psy, int psw, int psh,  int pdx, int pdy, int pdw, int pdh
	if imgValidArr(p2) {
		; HSP オフスクリーンバッファの Graphics 作成
		gsel p1
		GdipCreateFromHDC hdc, varptr(tmpGraphics)

		if tmpGraphics {
			GdipDrawImageRectRectI tmpGraphics, imgImageArr(p2), pdx, pdy, pdw, pdh, psx, psy, psw, psh, UnitPixel, pImageAttr, 0, 0
			GdipDeleteGraphics tmpGraphics	; tmpGraphics を削除
			tmpGraphics = 0
			return 0
		}
	}
	return -1

;-----------------------------------------------------------
#deffunc alStretchScreenToImage int p2, int p1,  int psx, int psy, int psw, int psh,  int pdx, int pdy, int pdw, int pdh
	if imgValidArr(p1) {
		; HSP オフスクリーンバッファの Image 作成
		gsel p2
		mref v, 67
		GdipCreateBitmapFromGdiDib v.6, v.5, varptr(tmpImage)

		if tmpImage {
			GdipDrawImageRectRectI imgGraphicsArr(p1), tmpImage, pdx, pdy, pdw, pdh, psx, psy, psw, psh, UnitPixel, pImageAttr, 0, 0
			GdipDisposeImage tmpImage	; Image を処分
			tmpImage = 0
			return 0
		}
	}
	return -1

;-----------------------------------------------------------
; Copy (prm : srcID, destID, destX, destY, width, height, srcX, srcY)
#define global alCopyImageToImage(%1=0, %2=0, %3=0, %4=0, %5=9999, %6=9999, %7=0, %8=0)		alStretchImageToImage %1, %2, %7, %8, %5, %6, %3, %4, %5, %6
#define global alCopyImageToScreen(%1=0, %2=0, %3=0, %4=0, %5=9999, %6=9999, %7=0, %8=0)	alStretchImageToScreen %1, %2, %7, %8, %5, %6, %3, %4, %5, %6
#define global alCopyScreenToImage(%1=0, %2=0, %3=0, %4=0, %5=9999, %6=9999, %7=0, %8=0)	alStretchScreenToImage %1, %2, %7, %8, %5, %6, %3, %4, %5, %6

/*
;-----------------------------------------------------------
#deffunc al3PointsImageToImage int p2, int p1, array va
	if imgValidArr(p1) & imgValidArr(p2) {
		GdipDrawImagePointsI imgGraphicsArr(p1), imgImageArr(p2), varptr(va), 3
		return 0
	}
	return -1
*/



;============================================================
;	ピクセル操作
;============================================================

;-----------------------------------------------------------
#defcfunc alGetPixel int px, int py
	if imgValid {
		a = 0
		GdipBitmapGetPixel imgImage, px, py, varptr(a)
		return a
	}
	return 0

;-----------------------------------------------------------
#deffunc alSetPixel int px, int py, int p1
	if imgValid : GdipBitmapSetPixel imgImage, px, py, p1
	return 0

;-----------------------------------------------------------
#deffunc alGetBitmapVData var ps, var pv ; size, vvar
	if imgValid {
		; LockBits して bitmap image へのポインタを得る
		rect = 0, 0, imgWidth, imgHeight
		dim BitmapData, 8
		GdipBitmapLockBits imgImage, varptr(rect), 3, PixelFormat32bppARGB, varptr(BitmapData)
		GdipBitmapUnlockBits imgImage, varptr(BitmapData)

		ps = BitmapData(0) * BitmapData(1) * 4  ; Width * Height * ByPP
		dupptr pv, BitmapData(4), ps
		return 0
	}
	return -1

;-----------------------------------------------------------
#deffunc alErase
	if imgValid {
		alGetBitmapVData size, v

		; ゼロクリア
		memset v, 0, size
		return 0
	}
	return -1



;============================================================
;	ファイル操作
;============================================================

; ImageEncoder
#uselib "gdiplus"
#func GdipGetImageEncodersSize	"GdipGetImageEncodersSize"	int, int
#func GdipGetImageEncoders	"GdipGetImageEncoders"	int, int, int

;-----------------------------------------------------------
#deffunc alLoadFile str p1, int pdx, int pdy  ; filename, point
	if imgValid {
		GdipLoadImageFromFile p1, varptr(tmpImage) ; ファイルから Image をコンストラクト
		if tmpImage {
			GdipGetImageWidth  tmpImage, varptr(w)
			GdipGetImageHeight tmpImage, varptr(h)
			GdipDrawImageRectRectI imgGraphics, tmpImage, pdx, pdy, w, h, 0, 0, w, h, UnitPixel, 0, 0, 0
			GdipDisposeImage tmpImage	; Image を処分
			tmpImage = 0
			return 0
		}
	}
	return -1

;-----------------------------------------------------------
#deffunc alSaveFile_ str p1, str p2, int px, int py, int pw, int ph  ; filename, mime, rect
	if imgValid {
		dim CLSID, 4

		; GetEncoderClsid() HSP Version
		GdipGetImageEncodersSize varptr(numEncoders), varptr(size)
		if size {
			dim ImageCodecInfo, size / 4 ; ImageCodecInfo 構造体の配列を取得する var

			GdipGetImageEncoders numEncoders, size, varptr(ImageCodecInfo)

			; sizeof(ImageCodecInfo)         == 19int
			; ImageCodecInfo.CLSID offset    == 0int
			; ImageCodecInfo.MimeType offset == 12int
			repeat numEncoders ; 全エンコーダから目的のものを探す
				dupptr v, ImageCodecInfo(cnt * 19 + 12), 128 ; MimeType 名が入った wchar[]
				if cnvwtos(v) = p2 { ; 目的の MimeType (p2) があったらば
					memcpy CLSID, ImageCodecInfo(cnt * 19), 16 ; それをコピーして
					break ; 探索終了
				}
			loop
		}

		if CLSID {
			; rect で切り取られた領域を temp Image に作成して Save
			GdipCreateBitmapFromScan0 pw, ph, 0, PixelFormat32bppARGB, 0, varptr(tmpImage)	; temp Image 作成
			GdipGetImageGraphicsContext tmpImage, varptr(tmpGraphics)			; temp Graphics 作成

			GdipDrawImageI tmpGraphics, imgImage, -px, -py		; メイン Image から転送
			GdipSaveImageToFile tmpImage, p1, varptr(CLSID), 0	; Save tmpImage

			GdipDeleteGraphics tmpGraphics	; tmp Graphics を削除
			tmpGraphics = 0
			GdipDisposeImage tmpImage	; tmp Image を処分
			tmpImage = 0
			return 0
		}
	}
	return -1

#define global alSaveFile(%1, %2="image/png", %3=0, %4=0, %5=imgWidth@a2d, %6=imgHeight@a2d)	alSaveFile_ %1, %2, %3, %4, %5, %6
; MIME : image/bmp image/jpeg image/gif image/tiff image/png

;-----------------------------------------------------------
#deffunc alGetFileWidth str p1, var vx, var vy  ; filename, width, height
	alInitModule
	if gdiplusToken {
		GdipLoadImageFromFile p1, varptr(tmpImage) ; ファイルから Image をコンストラクト
		if tmpImage {
			GdipGetImageWidth  tmpImage, varptr(vx)
			GdipGetImageHeight tmpImage, varptr(vy)

			GdipDisposeImage tmpImage	; Image を処分
			tmpImage = 0
			return 0
		}
	}
	return -1

;-----------------------------------------------------------
#deffunc alCreateImageByFile int p1, str p2 ; ID, filename
	alGetFileWidth p2, w, h
	if stat = 0 {
		alCreateImage p1, w, h	; 強制的に 32bpp にするために 2 pass でロード
		alLoadFile p2
		return 0
	}
	return -1



;============================================================
;	ブラシ設定
;============================================================
; (Pen と Brush はモジュール外からは区別しない)

;-----------------------------------------------------------
#deffunc alPenWidth int p1
	if imgValid : GdipSetPenWidth imgPen, alFloat(p1)
	return

;-----------------------------------------------------------
#deffunc alPenStyle int p1
	if imgValid : GdipSetPenDashStyle imgPen, p1
	return

;-----------------------------------------------------------
#deffunc alRenewPen
	if imgValid {
		GdipGetPenDashStyle imgPen, varptr(a)	; 旧ペンのスタイルを保存
		GdipGetPenWidth imgPen, varptr(b)	; 旧ペンの Width を保存

		GdipDeletePen imgPen		; 旧ペンを削除
		;imgPen = 0
		GdipCreatePen2 imgBrush, 1, UnitPixel, varptr(imgPen)	; ペンを作成

		GdipSetPenDashStyle imgPen, a	; 旧ペンのスタイルを復元
		GdipSetPenWidth imgPen, b	; 旧ペンの Width を復元

		GdipSetCompositingMode imgGraphics, 0 ; (default:SourceOver = 0, SourceCopy = 1)
	}
	return

;-----------------------------------------------------------
#deffunc alColorAlpha_ int p1
	if imgValid {
		GdipDeleteBrush imgBrush	; 旧ブラシを削除
		;imgBrush = 0
		GdipCreateSolidFill RGBA(gf_r, gf_g, gf_b, p1), varptr(imgBrush)	; ブラシを作成
		alRenewPen
	}
	return

; color 系命令
#define global alColor(%1=0, %2=0, %3=0, %4=255)	color %1, %2, %3 : alColorAlpha_ %4
#define global alHsvColor(%1=0, %2=0, %3=0, %4=255)	hsvcolor %1, %2, %3 : alColorAlpha_ %4
#define global alSysColor(%1=0, %2=255)			syscolor %1 : alColorAlpha_ %2

;-----------------------------------------------------------
#deffunc alGradientColor_ int px1, int py1, int px2, int py2, int pc1, int pc2, int p1
	if imgValid {
		GdipDeleteBrush imgBrush	; 旧ブラシを削除
		;imgBrush = 0
		point1 = px1, py1
		point2 = px2, py2
		GdipCreateLineBrushI varptr(point1), varptr(point2), pc1, pc2, p1, varptr(imgBrush)
		alRenewPen
	}
	return

#define global alGradientColor(%1=0, %2=0, %3=imgWidth@a2d, %4=imgHeight@a2d, %5=0xff000000, %6=0xff000000, %7=WrapModeTile)	alGradientColor_ %1, %2, %3, %4, %5, %6, %7

;-----------------------------------------------------------
#deffunc alTextureImage_ int p1, int p2
	if imgValid & imgValidArr(p1) {
		GdipDeleteBrush imgBrush	; 旧ブラシを削除
		;imgBrush = 0
		GdipCreateTexture imgImageArr(p1), p2, varptr(imgBrush)
		alRenewPen
		return 0
	}
	return -1

#define global alTextureImage(%1=0, %2=WrapModeTile)	alTextureImage_ %1, %2

;-----------------------------------------------------------
#deffunc alEraserBrush
	if imgValid {
		GdipDeleteBrush imgBrush	; 旧ブラシを削除
		;imgBrush = 0
		GdipCreateSolidFill 0, varptr(imgBrush)	; ブラシを作成
		alRenewPen
		GdipSetCompositingMode imgGraphics, 1 ; (SourceOver = 0, SourceCopy = 1)
	}
	return

;-----------------------------------------------------------
#deffunc alFont_ str p1, int p2, int p3
	if imgValid {
		font p1, p2, p3
		if imgFont {
			GdipDeleteFont imgFont	; 旧フォントを削除
			;imgFont = 0
		}
		GdipCreateFontFromDC hdc, varptr(imgFont)	; HSP オフスクリーン dc からフォントをコンストラクト
	}
	return

#define global alFont(%1="Arial", %2=16, %3=0)	alFont_ %1, %2, %3



;============================================================
;	図形描画
;============================================================

; String Format Object
#uselib "gdiplus"
#func GdipCreateStringFormat	"GdipCreateStringFormat"	int, int, int
#func GdipDeleteStringFormat	"GdipDeleteStringFormat"	int
#func GdipSetStringFormatAlign	"GdipSetStringFormatAlign"	int, int
#func GdipSetStringFormatLineAlign "GdipSetStringFormatLineAlign"	int, int

; Graphics Object -> Draw / Fill
#uselib "gdiplus"
#func GdipDrawLineI		"GdipDrawLineI"		int, int, int, int, int, int
#func GdipDrawEllipseI		"GdipDrawEllipseI"	int, int, int, int, int, int
#func GdipFillEllipseI		"GdipFillEllipseI"	int, int, int, int, int, int
#func GdipDrawRectangleI	"GdipDrawRectangleI"	int, int, int, int, int, int
#func GdipFillRectangleI	"GdipFillRectangleI"	int, int, int, int, int, int
#func GdipDrawLinesI		"GdipDrawLinesI"	int, int, int, int
#func GdipDrawPolygonI		"GdipDrawPolygonI"	int, int, int, int
#func GdipFillPolygonI		"GdipFillPolygonI"	int, int, int, int, int
#func GdipDrawCurve2I		"GdipDrawCurve2I"	int, int, int, int, float
#func GdipDrawClosedCurve2I	"GdipDrawClosedCurve2I"	int, int, int, int, float
#func GdipFillClosedCurve2I	"GdipFillClosedCurve2I"	int, int, int, int, float, int
#func GdipDrawArcI		"GdipDrawArcI"		int, int, int, int, int, int, float, float
#func GdipDrawPieI		"GdipDrawPieI"		int, int, int, int, int, int, float, float
#func GdipFillPieI		"GdipFillPieI"		int, int, int, int, int, int, float, float
#func GdipDrawString		"GdipDrawString"	int, wstr, int, int, int, int, int

;-----------------------------------------------------------
#deffunc alDrawText_ str p1, int px, int py, int pw, int ph, int pah, int pav
	if imgFont {
		GdipCreateStringFormat 0, 0, varptr(tmpFormat) ; アラインメント用 Format オブジェクト
		GdipSetStringFormatAlign tmpFormat, pah
		GdipSetStringFormatLineAlign tmpFormat, pav

		rectf = alFloat(px), alFloat(py), alFloat(pw), alFloat(ph)
		GdipDrawString imgGraphics, p1, alWstrlen(p1), imgFont, varptr(rectf), tmpFormat, imgBrush

		GdipDeleteStringFormat tmpFormat ; Format オブジェクト 削除
		tmpFormat = 0
	}
	return

#define global alDrawText(%1="", %2=0, %3=0, %4=9999, %5=9999, %6=0, %7=0)	alDrawText_ %1, %2, %3, %4, %5, %6, %7

;-----------------------------------------------------------
#deffunc alDrawLine int p1, int p2, int p3, int p4
	if imgValid : GdipDrawLineI imgGraphics, imgPen,  p1, p2, p3, p4
	return

;-----------------------------------------------------------
#deffunc alDrawRect_ int p1, int p2, int p3, int p4
	if imgValid : GdipDrawRectangleI imgGraphics, imgPen,  p1, p2, p3, p4
	return

#deffunc alFillRect_ int p1, int p2, int p3, int p4
	if imgValid : GdipFillRectangleI imgGraphics, imgBrush,  p1, p2, p3, p4
	return

#deffunc alDrawEllip_ int p1, int p2, int p3, int p4
	if imgValid : GdipDrawEllipseI imgGraphics, imgPen,  p1, p2, p3, p4
	return

#deffunc alFillEllip_ int p1, int p2, int p3, int p4
	if imgValid : GdipFillEllipseI imgGraphics, imgBrush,  p1, p2, p3, p4
	return

#define global alDrawRect(%1=0, %2=0, %3=imgWidth@a2d, %4=imgHeight@a2d)	alDrawRect_ %1, %2, %3, %4
#define global alFillRect(%1=0, %2=0, %3=imgWidth@a2d, %4=imgHeight@a2d)	alFillRect_ %1, %2, %3, %4
#define global alDrawEllip(%1=0, %2=0, %3=imgWidth@a2d, %4=imgHeight@a2d)	alDrawEllip_ %1, %2, %3, %4
#define global alFillEllip(%1=0, %2=0, %3=imgWidth@a2d, %4=imgHeight@a2d)	alFillEllip_ %1, %2, %3, %4

;-----------------------------------------------------------
#deffunc alDrawLines var p1, int p2
	if imgValid : GdipDrawLinesI imgGraphics, imgPen,  varptr(p1), p2
	return

#deffunc alDrawPoly var p1, int p2
	if imgValid : GdipDrawPolygonI imgGraphics, imgPen,  varptr(p1), p2
	return

#deffunc alFillPoly var p1, int p2
	if imgValid : GdipFillPolygonI imgGraphics, imgBrush,  varptr(p1), p2, 1;FillModeWinding
	return

#deffunc alDrawCurve_ var p1, int p2, double p3
	if imgValid : GdipDrawCurve2I imgGraphics, imgPen,  varptr(p1), p2, p3
	return

#deffunc alDrawClosedCurve_ var p1, int p2, double p3
	if imgValid : GdipDrawClosedCurve2I imgGraphics, imgPen,  varptr(p1), p2, p3
	return

#deffunc alFillClosedCurve_ var p1, int p2, double p3
	if imgValid : GdipFillClosedCurve2I imgGraphics, imgBrush,  varptr(p1), p2, p3, 1;FillModeWinding
	return

#define global alDrawCurve(%1, %2, %3=0.5)	alDrawCurve_ %1, %2, %3
#define global alDrawClosedCurve(%1, %2, %3=0.5)	alDrawClosedCurve_ %1, %2, %3
#define global alFillClosedCurve(%1, %2, %3=0.5)	alFillClosedCurve_ %1, %2, %3

;-----------------------------------------------------------
#deffunc alDrawArc_ int p1, int p2, int p3, int p4, double p5, double p6
	if imgValid : GdipDrawArcI imgGraphics, imgPen,  p1, p2, p3, p4, p5, p6
	return

#deffunc alDrawPie_ int p1, int p2, int p3, int p4, double p5, double p6
	if imgValid : GdipDrawPieI imgGraphics, imgPen,  p1, p2, p3, p4, p5, p6
	return

#deffunc alFillPie_ int p1, int p2, int p3, int p4, double p5, double p6
	if imgValid : GdipFillPieI imgGraphics, imgBrush,  p1, p2, p3, p4, p5, p6
	return

#define global alDrawArc(%1=0, %2=0, %3=imgWidth@a2d, %4=imgHeight@a2d, %5=0, %6=0)	alDrawArc_ %1, %2, %3, %4, %5, %6
#define global alDrawPie(%1=0, %2=0, %3=imgWidth@a2d, %4=imgHeight@a2d, %5=0, %6=0)	alDrawPie_ %1, %2, %3, %4, %5, %6
#define global alFillPie(%1=0, %2=0, %3=imgWidth@a2d, %4=imgHeight@a2d, %5=0, %6=0)	alFillPie_ %1, %2, %3, %4, %5, %6



;============================================================
;	座標変換モード
;============================================================

; Matrix Object
#uselib "gdiplus"
#func GdipCreateMatrix		"GdipCreateMatrix"	int
#func GdipCreateMatrix2		"GdipCreateMatrix2"	float, float, float, float, float, float, int
#func GdipDeleteMatrix		"GdipDeleteMatrix"	int
#func GdipTranslateMatrix	"GdipTranslateMatrix"	int, float, float, int
#func GdipRotateMatrix		"GdipRotateMatrix"	int, float, int
#func GdipScaleMatrix		"GdipScaleMatrix"	int, float, float, int

;-----------------------------------------------------------
#deffunc alResetTransMode
	if imgValid : GdipResetWorldTransform imgGraphics
	return

;-----------------------------------------------------------
#deffunc alTransModeMatrix double m11, double m12, double m21, double m22, double dx, double dy
	if imgValid {
		GdipCreateMatrix2 m11, m12, m21, m22, dx, dy, varptr(tmpMatrix)

		GdipSetWorldTransform imgGraphics, tmpMatrix
		GdipDeleteMatrix tmpMatrix
		tmpMatrix = 0
	}
	return

;-----------------------------------------------------------
#deffunc alTransModeOffsetRotateZoom_ int dx, int dy, double pa, double sx, double sy
	if imgValid {
		GdipCreateMatrix varptr(tmpMatrix)
		GdipTranslateMatrix tmpMatrix, dx, dy, 0 ; order = MatrixOrderPrepend = 0
		GdipRotateMatrix tmpMatrix, pa, 0
		GdipScaleMatrix tmpMatrix, sx, sy, 0

		GdipSetWorldTransform imgGraphics, tmpMatrix
		GdipDeleteMatrix tmpMatrix
		tmpMatrix = 0
	}
	return

#define global alTransModeOffsetRotateZoom(%1=0, %2=0, %3=0, %4=1, %5=1)	alTransModeOffsetRotateZoom_ %1, %2, %3, %4, %5

;-----------------------------------------------------------
#deffunc alTransModeRotateAt double pa, int px, int py
	if imgValid {
		GdipCreateMatrix varptr(tmpMatrix)
		GdipTranslateMatrix tmpMatrix, px, py, 0 ; order = MatrixOrderPrepend = 0
		GdipRotateMatrix tmpMatrix, pa, 0
		GdipTranslateMatrix tmpMatrix, -px, -py, 0

		GdipSetWorldTransform imgGraphics, tmpMatrix
		GdipDeleteMatrix tmpMatrix
		tmpMatrix = 0
	}
	return

#global
#endif
;(advapi32.as)
#ifdef __hsp30__
#ifndef __ADVAPI32__
	#define global __ADVAPI32__
	#uselib "ADVAPI32.DLL"
	#define global AbortSystemShutdown AbortSystemShutdownA
	#func global AbortSystemShutdownA "AbortSystemShutdownA" sptr
	#func global AbortSystemShutdownW "AbortSystemShutdownW" wptr
	#func global AccessCheck "AccessCheck" sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#define global AccessCheckAndAuditAlarm AccessCheckAndAuditAlarmA
	#func global AccessCheckAndAuditAlarmA "AccessCheckAndAuditAlarmA" sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global AccessCheckAndAuditAlarmW "AccessCheckAndAuditAlarmW" wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr
	#func global AccessCheckByType "AccessCheckByType" sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#define global AccessCheckByTypeAndAuditAlarm AccessCheckByTypeAndAuditAlarmA
	#func global AccessCheckByTypeAndAuditAlarmA "AccessCheckByTypeAndAuditAlarmA" sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global AccessCheckByTypeAndAuditAlarmW "AccessCheckByTypeAndAuditAlarmW" wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr
	#func global AccessCheckByTypeResultList "AccessCheckByTypeResultList" sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#define global AccessCheckByTypeResultListAndAuditAlarm AccessCheckByTypeResultListAndAuditAlarmA
	#func global AccessCheckByTypeResultListAndAuditAlarmA "AccessCheckByTypeResultListAndAuditAlarmA" sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#define global AccessCheckByTypeResultListAndAuditAlarmByHandle AccessCheckByTypeResultListAndAuditAlarmByHandleA
	#func global AccessCheckByTypeResultListAndAuditAlarmByHandleA "AccessCheckByTypeResultListAndAuditAlarmByHandleA" sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global AccessCheckByTypeResultListAndAuditAlarmByHandleW "AccessCheckByTypeResultListAndAuditAlarmByHandleW" wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr
	#func global AccessCheckByTypeResultListAndAuditAlarmW "AccessCheckByTypeResultListAndAuditAlarmW" wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr
	#func global AddAccessAllowedAce "AddAccessAllowedAce" sptr,sptr,sptr,sptr
	#func global AddAccessAllowedAceEx "AddAccessAllowedAceEx" sptr,sptr,sptr,sptr,sptr
	#func global AddAccessAllowedObjectAce "AddAccessAllowedObjectAce" sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global AddAccessDeniedAce "AddAccessDeniedAce" sptr,sptr,sptr,sptr
	#func global AddAccessDeniedAceEx "AddAccessDeniedAceEx" sptr,sptr,sptr,sptr,sptr
	#func global AddAccessDeniedObjectAce "AddAccessDeniedObjectAce" sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global AddAce "AddAce" sptr,sptr,sptr,sptr,sptr
	#func global AddAuditAccessAce "AddAuditAccessAce" sptr,sptr,sptr,sptr,sptr,sptr
	#func global AddAuditAccessAceEx "AddAuditAccessAceEx" sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global AddAuditAccessObjectAce "AddAuditAccessObjectAce" sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global AddUsersToEncryptedFile "AddUsersToEncryptedFile" sptr,sptr
	#func global AdjustTokenGroups "AdjustTokenGroups" sptr,sptr,sptr,sptr,sptr,sptr
	#func global AdjustTokenPrivileges "AdjustTokenPrivileges" sptr,sptr,sptr,sptr,sptr,sptr
	#func global AllocateAndInitializeSid "AllocateAndInitializeSid" sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global AllocateLocallyUniqueId "AllocateLocallyUniqueId" sptr
	#func global AreAllAccessesGranted "AreAllAccessesGranted" sptr,sptr
	#func global AreAnyAccessesGranted "AreAnyAccessesGranted" sptr,sptr
	#define global BackupEventLog BackupEventLogA
	#func global BackupEventLogA "BackupEventLogA" sptr,sptr
	#func global BackupEventLogW "BackupEventLogW" wptr,wptr
	#define global BuildExplicitAccessWithName BuildExplicitAccessWithNameA
	#func global BuildExplicitAccessWithNameA "BuildExplicitAccessWithNameA" sptr,sptr,sptr,sptr,sptr
	#func global BuildExplicitAccessWithNameW "BuildExplicitAccessWithNameW" wptr,wptr,wptr,wptr,wptr
	#define global BuildImpersonateExplicitAccessWithName BuildImpersonateExplicitAccessWithNameA
	#func global BuildImpersonateExplicitAccessWithNameA "BuildImpersonateExplicitAccessWithNameA" sptr,sptr,sptr,sptr,sptr,sptr
	#func global BuildImpersonateExplicitAccessWithNameW "BuildImpersonateExplicitAccessWithNameW" wptr,wptr,wptr,wptr,wptr,wptr
	#define global BuildImpersonateTrustee BuildImpersonateTrusteeA
	#func global BuildImpersonateTrusteeA "BuildImpersonateTrusteeA" sptr,sptr
	#func global BuildImpersonateTrusteeW "BuildImpersonateTrusteeW" wptr,wptr
	#define global BuildSecurityDescriptor BuildSecurityDescriptorA
	#func global BuildSecurityDescriptorA "BuildSecurityDescriptorA" sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global BuildSecurityDescriptorW "BuildSecurityDescriptorW" wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr
	#define global BuildTrusteeWithName BuildTrusteeWithNameA
	#func global BuildTrusteeWithNameA "BuildTrusteeWithNameA" sptr,sptr
	#func global BuildTrusteeWithNameW "BuildTrusteeWithNameW" wptr,wptr
	#define global BuildTrusteeWithObjectsAndName BuildTrusteeWithObjectsAndNameA
	#func global BuildTrusteeWithObjectsAndNameA "BuildTrusteeWithObjectsAndNameA" sptr,sptr,sptr,sptr,sptr,sptr
	#func global BuildTrusteeWithObjectsAndNameW "BuildTrusteeWithObjectsAndNameW" wptr,wptr,wptr,wptr,wptr,wptr
	#define global BuildTrusteeWithObjectsAndSid BuildTrusteeWithObjectsAndSidA
	#func global BuildTrusteeWithObjectsAndSidA "BuildTrusteeWithObjectsAndSidA" sptr,sptr,sptr,sptr,sptr
	#func global BuildTrusteeWithObjectsAndSidW "BuildTrusteeWithObjectsAndSidW" wptr,wptr,wptr,wptr,wptr
	#define global BuildTrusteeWithSid BuildTrusteeWithSidA
	#func global BuildTrusteeWithSidA "BuildTrusteeWithSidA" sptr,sptr
	#func global BuildTrusteeWithSidW "BuildTrusteeWithSidW" wptr,wptr
	#func global CancelOverlappedAccess "CancelOverlappedAccess" sptr
	#define global ChangeServiceConfig2 ChangeServiceConfig2A
	#func global ChangeServiceConfig2A "ChangeServiceConfig2A" sptr,sptr,sptr
	#func global ChangeServiceConfig2W "ChangeServiceConfig2W" wptr,wptr,wptr
	#define global ChangeServiceConfig ChangeServiceConfigA
	#func global ChangeServiceConfigA "ChangeServiceConfigA" sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global ChangeServiceConfigW "ChangeServiceConfigW" wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr
	#func global CheckTokenMembership "CheckTokenMembership" sptr,sptr,sptr
	#define global ClearEventLog ClearEventLogA
	#func global ClearEventLogA "ClearEventLogA" sptr,sptr
	#func global ClearEventLogW "ClearEventLogW" wptr,wptr
	#func global CloseCodeAuthzLevel "CloseCodeAuthzLevel" sptr
	#func global CloseEncryptedFileRaw "CloseEncryptedFileRaw" sptr
	#func global CloseEventLog "CloseEventLog" sptr
	#func global CloseServiceHandle "CloseServiceHandle" sptr
	#func global CloseTrace "CloseTrace" sptr,sptr
	#func global CommandLineFromMsiDescriptor "CommandLineFromMsiDescriptor" sptr,sptr,sptr
	#func global ComputeAccessTokenFromCodeAuthzLevel "ComputeAccessTokenFromCodeAuthzLevel" sptr,sptr,sptr,sptr,sptr
	#func global ControlService "ControlService" sptr,sptr,sptr
	#define global ControlTrace ControlTraceA
	#func global ControlTraceA "ControlTraceA" sptr,sptr,sptr,sptr,sptr
	#func global ControlTraceW "ControlTraceW" wptr,wptr,wptr,wptr,wptr
	#define global ConvertAccessToSecurityDescriptor ConvertAccessToSecurityDescriptorA
	#func global ConvertAccessToSecurityDescriptorA "ConvertAccessToSecurityDescriptorA" sptr,sptr,sptr,sptr,sptr
	#func global ConvertAccessToSecurityDescriptorW "ConvertAccessToSecurityDescriptorW" wptr,wptr,wptr,wptr,wptr
	#define global ConvertSDToStringSDRootDomain ConvertSDToStringSDRootDomainA
	#func global ConvertSDToStringSDRootDomainA "ConvertSDToStringSDRootDomainA" sptr,sptr,sptr,sptr,sptr,sptr
	#func global ConvertSDToStringSDRootDomainW "ConvertSDToStringSDRootDomainW" wptr,wptr,wptr,wptr,wptr,wptr
	#define global ConvertSecurityDescriptorToAccess ConvertSecurityDescriptorToAccessA
	#func global ConvertSecurityDescriptorToAccessA "ConvertSecurityDescriptorToAccessA" sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#define global ConvertSecurityDescriptorToAccessNamed ConvertSecurityDescriptorToAccessNamedA
	#func global ConvertSecurityDescriptorToAccessNamedA "ConvertSecurityDescriptorToAccessNamedA" sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global ConvertSecurityDescriptorToAccessNamedW "ConvertSecurityDescriptorToAccessNamedW" wptr,wptr,wptr,wptr,wptr,wptr,wptr
	#func global ConvertSecurityDescriptorToAccessW "ConvertSecurityDescriptorToAccessW" wptr,wptr,wptr,wptr,wptr,wptr,wptr
	#define global ConvertSecurityDescriptorToStringSecurityDescriptor ConvertSecurityDescriptorToStringSecurityDescriptorA
	#func global ConvertSecurityDescriptorToStringSecurityDescriptorA "ConvertSecurityDescriptorToStringSecurityDescriptorA" sptr,sptr,sptr,sptr,sptr
	#func global ConvertSecurityDescriptorToStringSecurityDescriptorW "ConvertSecurityDescriptorToStringSecurityDescriptorW" wptr,wptr,wptr,wptr,wptr
	#define global ConvertSidToStringSid ConvertSidToStringSidA
	#func global ConvertSidToStringSidA "ConvertSidToStringSidA" sptr,sptr
	#func global ConvertSidToStringSidW "ConvertSidToStringSidW" wptr,wptr
	#define global ConvertStringSDToSDDomain ConvertStringSDToSDDomainA
	#func global ConvertStringSDToSDDomainA "ConvertStringSDToSDDomainA" sptr,sptr,sptr,sptr,sptr,sptr
	#func global ConvertStringSDToSDDomainW "ConvertStringSDToSDDomainW" wptr,wptr,wptr,wptr,wptr,wptr
	#define global ConvertStringSDToSDRootDomain ConvertStringSDToSDRootDomainA
	#func global ConvertStringSDToSDRootDomainA "ConvertStringSDToSDRootDomainA" sptr,sptr,sptr,sptr,sptr
	#func global ConvertStringSDToSDRootDomainW "ConvertStringSDToSDRootDomainW" wptr,wptr,wptr,wptr,wptr
	#define global ConvertStringSecurityDescriptorToSecurityDescriptor ConvertStringSecurityDescriptorToSecurityDescriptorA
	#func global ConvertStringSecurityDescriptorToSecurityDescriptorA "ConvertStringSecurityDescriptorToSecurityDescriptorA" sptr,sptr,sptr,sptr
	#func global ConvertStringSecurityDescriptorToSecurityDescriptorW "ConvertStringSecurityDescriptorToSecurityDescriptorW" wptr,wptr,wptr,wptr
	#define global ConvertStringSidToSid ConvertStringSidToSidA
	#func global ConvertStringSidToSidA "ConvertStringSidToSidA" sptr,sptr
	#func global ConvertStringSidToSidW "ConvertStringSidToSidW" wptr,wptr
	#func global ConvertToAutoInheritPrivateObjectSecurity "ConvertToAutoInheritPrivateObjectSecurity" sptr,sptr,sptr,sptr,sptr,sptr
	#func global CopySid "CopySid" sptr,sptr,sptr
	#func global CreateCodeAuthzLevel "CreateCodeAuthzLevel" sptr,sptr,sptr,sptr,sptr
	#func global CreatePrivateObjectSecurity "CreatePrivateObjectSecurity" sptr,sptr,sptr,sptr,sptr,sptr
	#func global CreatePrivateObjectSecurityEx "CreatePrivateObjectSecurityEx" sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global CreatePrivateObjectSecurityWithMultipleInheritance "CreatePrivateObjectSecurityWithMultipleInheritance" sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#define global CreateProcessAsUser CreateProcessAsUserA
	#func global CreateProcessAsUserA "CreateProcessAsUserA" sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global CreateProcessAsUserW "CreateProcessAsUserW" wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr
	#func global CreateProcessWithLogonW "CreateProcessWithLogonW" wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr
	#func global CreateProcessWithTokenW "CreateProcessWithTokenW" wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr
	#func global CreateRestrictedToken "CreateRestrictedToken" sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#define global CreateService CreateServiceA
	#func global CreateServiceA "CreateServiceA" sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global CreateServiceW "CreateServiceW" wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr
	#func global CreateTraceInstanceId "CreateTraceInstanceId" sptr,sptr
	#func global CreateWellKnownSid "CreateWellKnownSid" sptr,sptr,sptr,sptr
	#define global CredDelete CredDeleteA
	#func global CredDeleteA "CredDeleteA" sptr,sptr,sptr
	#func global CredDeleteW "CredDeleteW" wptr,wptr,wptr
	#define global CredEnumerate CredEnumerateA
	#func global CredEnumerateA "CredEnumerateA" sptr,sptr,sptr,sptr
	#func global CredEnumerateW "CredEnumerateW" wptr,wptr,wptr,wptr
	#func global CredFree "CredFree" sptr
	#func global CredGetSessionTypes "CredGetSessionTypes" sptr,sptr
	#define global CredGetTargetInfo CredGetTargetInfoA
	#func global CredGetTargetInfoA "CredGetTargetInfoA" sptr,sptr,sptr
	#func global CredGetTargetInfoW "CredGetTargetInfoW" wptr,wptr,wptr
	#define global CredIsMarshaledCredential CredIsMarshaledCredentialA
	#func global CredIsMarshaledCredentialA "CredIsMarshaledCredentialA" sptr
	#func global CredIsMarshaledCredentialW "CredIsMarshaledCredentialW" wptr
	#define global CredMarshalCredential CredMarshalCredentialA
	#func global CredMarshalCredentialA "CredMarshalCredentialA" sptr,sptr,sptr
	#func global CredMarshalCredentialW "CredMarshalCredentialW" wptr,wptr,wptr
	#define global CredRead CredReadA
	#func global CredReadA "CredReadA" sptr,sptr,sptr,sptr
	#define global CredReadDomainCredentials CredReadDomainCredentialsA
	#func global CredReadDomainCredentialsA "CredReadDomainCredentialsA" sptr,sptr,sptr,sptr
	#func global CredReadDomainCredentialsW "CredReadDomainCredentialsW" wptr,wptr,wptr,wptr
	#func global CredReadW "CredReadW" wptr,wptr,wptr,wptr
	#define global CredRename CredRenameA
	#func global CredRenameA "CredRenameA" sptr,sptr,sptr,sptr
	#func global CredRenameW "CredRenameW" wptr,wptr,wptr,wptr
	#define global CredUnmarshalCredential CredUnmarshalCredentialA
	#func global CredUnmarshalCredentialA "CredUnmarshalCredentialA" sptr,sptr,sptr
	#func global CredUnmarshalCredentialW "CredUnmarshalCredentialW" wptr,wptr,wptr
	#define global CredWrite CredWriteA
	#func global CredWriteA "CredWriteA" sptr,sptr
	#define global CredWriteDomainCredentials CredWriteDomainCredentialsA
	#func global CredWriteDomainCredentialsA "CredWriteDomainCredentialsA" sptr,sptr,sptr
	#func global CredWriteDomainCredentialsW "CredWriteDomainCredentialsW" wptr,wptr,wptr
	#func global CredWriteW "CredWriteW" wptr,wptr
	#define global CryptAcquireContext CryptAcquireContextA
	#func global CryptAcquireContextA "CryptAcquireContextA" sptr,sptr,sptr,sptr,sptr
	#func global CryptAcquireContextW "CryptAcquireContextW" wptr,wptr,wptr,wptr,wptr
	#func global CryptContextAddRef "CryptContextAddRef" sptr,sptr,sptr
	#func global CryptCreateHash "CryptCreateHash" sptr,sptr,sptr,sptr,sptr
	#func global CryptDecrypt "CryptDecrypt" sptr,sptr,sptr,sptr,sptr,sptr
	#func global CryptDeriveKey "CryptDeriveKey" sptr,sptr,sptr,sptr,sptr
	#func global CryptDestroyHash "CryptDestroyHash" sptr
	#func global CryptDestroyKey "CryptDestroyKey" sptr
	#func global CryptDuplicateHash "CryptDuplicateHash" sptr,sptr,sptr,sptr
	#func global CryptDuplicateKey "CryptDuplicateKey" sptr,sptr,sptr,sptr
	#func global CryptEncrypt "CryptEncrypt" sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#define global CryptEnumProviderTypes CryptEnumProviderTypesA
	#func global CryptEnumProviderTypesA "CryptEnumProviderTypesA" sptr,sptr,sptr,sptr,sptr,sptr
	#func global CryptEnumProviderTypesW "CryptEnumProviderTypesW" wptr,wptr,wptr,wptr,wptr,wptr
	#define global CryptEnumProviders CryptEnumProvidersA
	#func global CryptEnumProvidersA "CryptEnumProvidersA" sptr,sptr,sptr,sptr,sptr,sptr
	#func global CryptEnumProvidersW "CryptEnumProvidersW" wptr,wptr,wptr,wptr,wptr,wptr
	#func global CryptExportKey "CryptExportKey" sptr,sptr,sptr,sptr,sptr,sptr
	#func global CryptGenKey "CryptGenKey" sptr,sptr,sptr,sptr
	#func global CryptGenRandom "CryptGenRandom" sptr,sptr,sptr
	#define global CryptGetDefaultProvider CryptGetDefaultProviderA
	#func global CryptGetDefaultProviderA "CryptGetDefaultProviderA" sptr,sptr,sptr,sptr,sptr
	#func global CryptGetDefaultProviderW "CryptGetDefaultProviderW" wptr,wptr,wptr,wptr,wptr
	#func global CryptGetHashParam "CryptGetHashParam" sptr,sptr,sptr,sptr,sptr
	#func global CryptGetKeyParam "CryptGetKeyParam" sptr,sptr,sptr,sptr,sptr
	#func global CryptGetProvParam "CryptGetProvParam" sptr,sptr,sptr,sptr,sptr
	#func global CryptGetUserKey "CryptGetUserKey" sptr,sptr,sptr
	#func global CryptHashData "CryptHashData" sptr,sptr,sptr,sptr
	#func global CryptHashSessionKey "CryptHashSessionKey" sptr,sptr,sptr
	#func global CryptImportKey "CryptImportKey" sptr,sptr,sptr,sptr,sptr,sptr
	#func global CryptReleaseContext "CryptReleaseContext" sptr,sptr
	#func global CryptSetHashParam "CryptSetHashParam" sptr,sptr,sptr,sptr
	#func global CryptSetKeyParam "CryptSetKeyParam" sptr,sptr,sptr,sptr
	#func global CryptSetProvParam "CryptSetProvParam" sptr,sptr,sptr,sptr
	#define global CryptSetProvider CryptSetProviderA
	#func global CryptSetProviderA "CryptSetProviderA" sptr,sptr
	#define global CryptSetProviderEx CryptSetProviderExA
	#func global CryptSetProviderExA "CryptSetProviderExA" sptr,sptr,sptr,sptr
	#func global CryptSetProviderExW "CryptSetProviderExW" wptr,wptr,wptr,wptr
	#func global CryptSetProviderW "CryptSetProviderW" wptr,wptr
	#define global CryptSignHash CryptSignHashA
	#func global CryptSignHashA "CryptSignHashA" sptr,sptr,sptr,sptr,sptr,sptr
	#func global CryptSignHashW "CryptSignHashW" wptr,wptr,wptr,wptr,wptr,wptr
	#define global CryptVerifySignature CryptVerifySignatureA
	#func global CryptVerifySignatureA "CryptVerifySignatureA" sptr,sptr,sptr,sptr,sptr,sptr
	#func global CryptVerifySignatureW "CryptVerifySignatureW" wptr,wptr,wptr,wptr,wptr,wptr
	#define global DecryptFile DecryptFileA
	#func global DecryptFileA "DecryptFileA" sptr,sptr
	#func global DecryptFileW "DecryptFileW" wptr,wptr
	#func global DeleteAce "DeleteAce" sptr,sptr
	#func global DeleteService "DeleteService" sptr
	#func global DeregisterEventSource "DeregisterEventSource" sptr
	#func global DestroyPrivateObjectSecurity "DestroyPrivateObjectSecurity" sptr
	#func global DuplicateEncryptionInfoFile "DuplicateEncryptionInfoFile" sptr,sptr,sptr,sptr,sptr
	#func global DuplicateToken "DuplicateToken" sptr,sptr,sptr
	#func global DuplicateTokenEx "DuplicateTokenEx" sptr,sptr,sptr,sptr,sptr,sptr
	#define global ElfBackupEventLogFile ElfBackupEventLogFileA
	#func global ElfBackupEventLogFileA "ElfBackupEventLogFileA" sptr,sptr
	#func global ElfBackupEventLogFileW "ElfBackupEventLogFileW" wptr,wptr
	#func global ElfChangeNotify "ElfChangeNotify" sptr,sptr
	#define global ElfClearEventLogFile ElfClearEventLogFileA
	#func global ElfClearEventLogFileA "ElfClearEventLogFileA" sptr,sptr
	#func global ElfClearEventLogFileW "ElfClearEventLogFileW" wptr,wptr
	#func global ElfCloseEventLog "ElfCloseEventLog" sptr
	#func global ElfDeregisterEventSource "ElfDeregisterEventSource" sptr
	#func global ElfFlushEventLog "ElfFlushEventLog" sptr
	#func global ElfNumberOfRecords "ElfNumberOfRecords" sptr,sptr
	#func global ElfOldestRecord "ElfOldestRecord" sptr,sptr
	#define global ElfOpenBackupEventLog ElfOpenBackupEventLogA
	#func global ElfOpenBackupEventLogA "ElfOpenBackupEventLogA" sptr,sptr,sptr
	#func global ElfOpenBackupEventLogW "ElfOpenBackupEventLogW" wptr,wptr,wptr
	#define global ElfOpenEventLog ElfOpenEventLogA
	#func global ElfOpenEventLogA "ElfOpenEventLogA" sptr,sptr,sptr
	#func global ElfOpenEventLogW "ElfOpenEventLogW" wptr,wptr,wptr
	#define global ElfReadEventLog ElfReadEventLogA
	#func global ElfReadEventLogA "ElfReadEventLogA" sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global ElfReadEventLogW "ElfReadEventLogW" wptr,wptr,wptr,wptr,wptr,wptr,wptr
	#define global ElfRegisterEventSource ElfRegisterEventSourceA
	#func global ElfRegisterEventSourceA "ElfRegisterEventSourceA" sptr,sptr,sptr
	#func global ElfRegisterEventSourceW "ElfRegisterEventSourceW" wptr,wptr,wptr
	#define global ElfReportEvent ElfReportEventA
	#func global ElfReportEventA "ElfReportEventA" sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global ElfReportEventW "ElfReportEventW" wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr
	#func global EnableTrace "EnableTrace" sptr,sptr,sptr,sptr,sptr,sptr
	#define global EncryptFile EncryptFileA
	#func global EncryptFileA "EncryptFileA" sptr
	#func global EncryptFileW "EncryptFileW" wptr
	#func global EncryptedFileKeyInfo "EncryptedFileKeyInfo" sptr,sptr,sptr
	#func global EncryptionDisable "EncryptionDisable" sptr,sptr
	#define global EnumDependentServices EnumDependentServicesA
	#func global EnumDependentServicesA "EnumDependentServicesA" sptr,sptr,sptr,sptr,sptr,sptr
	#func global EnumDependentServicesW "EnumDependentServicesW" wptr,wptr,wptr,wptr,wptr,wptr
	#func global EnumServiceGroupW "EnumServiceGroupW" wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr
	#define global EnumServicesStatus EnumServicesStatusA
	#func global EnumServicesStatusA "EnumServicesStatusA" sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#define global EnumServicesStatusEx EnumServicesStatusExA
	#func global EnumServicesStatusExA "EnumServicesStatusExA" sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global EnumServicesStatusExW "EnumServicesStatusExW" wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr
	#func global EnumServicesStatusW "EnumServicesStatusW" wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr
	#func global EnumerateTraceGuids "EnumerateTraceGuids" sptr,sptr,sptr
	#func global EqualDomainSid "EqualDomainSid" sptr,sptr,sptr
	#func global EqualPrefixSid "EqualPrefixSid" sptr,sptr
	#func global EqualSid "EqualSid" sptr,sptr
	#define global FileEncryptionStatus FileEncryptionStatusA
	#func global FileEncryptionStatusA "FileEncryptionStatusA" sptr,sptr
	#func global FileEncryptionStatusW "FileEncryptionStatusW" wptr,wptr
	#func global FindFirstFreeAce "FindFirstFreeAce" sptr,sptr
	#define global FlushTrace FlushTraceA
	#func global FlushTraceA "FlushTraceA" sptr,sptr,sptr,sptr
	#func global FlushTraceW "FlushTraceW" wptr,wptr,wptr,wptr
	#func global FreeEncryptedFileKeyInfo "FreeEncryptedFileKeyInfo" sptr
	#func global FreeEncryptionCertificateHashList "FreeEncryptionCertificateHashList" sptr
	#func global FreeInheritedFromArray "FreeInheritedFromArray" sptr,sptr,sptr
	#func global FreeSid "FreeSid" sptr
	#define global GetAccessPermissionsForObject GetAccessPermissionsForObjectA
	#func global GetAccessPermissionsForObjectA "GetAccessPermissionsForObjectA" sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global GetAccessPermissionsForObjectW "GetAccessPermissionsForObjectW" wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr
	#func global GetAce "GetAce" sptr,sptr,sptr
	#func global GetAclInformation "GetAclInformation" sptr,sptr,sptr,sptr
	#define global GetAuditedPermissionsFromAcl GetAuditedPermissionsFromAclA
	#func global GetAuditedPermissionsFromAclA "GetAuditedPermissionsFromAclA" sptr,sptr,sptr,sptr
	#func global GetAuditedPermissionsFromAclW "GetAuditedPermissionsFromAclW" wptr,wptr,wptr,wptr
	#define global GetCurrentHwProfile GetCurrentHwProfileA
	#func global GetCurrentHwProfileA "GetCurrentHwProfileA" sptr
	#func global GetCurrentHwProfileW "GetCurrentHwProfileW" wptr
	#define global GetEffectiveRightsFromAcl GetEffectiveRightsFromAclA
	#func global GetEffectiveRightsFromAclA "GetEffectiveRightsFromAclA" sptr,sptr,sptr
	#func global GetEffectiveRightsFromAclW "GetEffectiveRightsFromAclW" wptr,wptr,wptr
	#func global GetEventLogInformation "GetEventLogInformation" sptr,sptr,sptr,sptr,sptr
	#define global GetExplicitEntriesFromAcl GetExplicitEntriesFromAclA
	#func global GetExplicitEntriesFromAclA "GetExplicitEntriesFromAclA" sptr,sptr,sptr
	#func global GetExplicitEntriesFromAclW "GetExplicitEntriesFromAclW" wptr,wptr,wptr
	#define global GetFileSecurity GetFileSecurityA
	#func global GetFileSecurityA "GetFileSecurityA" sptr,sptr,sptr,sptr,sptr
	#func global GetFileSecurityW "GetFileSecurityW" wptr,wptr,wptr,wptr,wptr
	#func global GetInformationCodeAuthzLevelW "GetInformationCodeAuthzLevelW" wptr,wptr,wptr,wptr,wptr
	#func global GetInformationCodeAuthzPolicyW "GetInformationCodeAuthzPolicyW" wptr,wptr,wptr,wptr,wptr,wptr
	#define global GetInheritanceSource GetInheritanceSourceA
	#func global GetInheritanceSourceA "GetInheritanceSourceA" sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global GetInheritanceSourceW "GetInheritanceSourceW" wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr
	#func global GetKernelObjectSecurity "GetKernelObjectSecurity" sptr,sptr,sptr,sptr,sptr
	#func global GetLengthSid "GetLengthSid" sptr
	#func global GetLocalManagedApplicationData "GetLocalManagedApplicationData" sptr,sptr,sptr
	#func global GetLocalManagedApplications "GetLocalManagedApplications" sptr,sptr,sptr
	#func global GetManagedApplicationCategories "GetManagedApplicationCategories" sptr,sptr
	#func global GetManagedApplications "GetManagedApplications" sptr,sptr,sptr,sptr,sptr
	#define global GetMultipleTrustee GetMultipleTrusteeA
	#func global GetMultipleTrusteeA "GetMultipleTrusteeA" sptr
	#define global GetMultipleTrusteeOperation GetMultipleTrusteeOperationA
	#func global GetMultipleTrusteeOperationA "GetMultipleTrusteeOperationA" sptr
	#func global GetMultipleTrusteeOperationW "GetMultipleTrusteeOperationW" wptr
	#func global GetMultipleTrusteeW "GetMultipleTrusteeW" wptr
	#define global GetNamedSecurityInfo GetNamedSecurityInfoA
	#func global GetNamedSecurityInfoA "GetNamedSecurityInfoA" sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#define global GetNamedSecurityInfoEx GetNamedSecurityInfoExA
	#func global GetNamedSecurityInfoExA "GetNamedSecurityInfoExA" sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global GetNamedSecurityInfoExW "GetNamedSecurityInfoExW" wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr
	#func global GetNamedSecurityInfoW "GetNamedSecurityInfoW" wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr
	#func global GetNumberOfEventLogRecords "GetNumberOfEventLogRecords" sptr,sptr
	#func global GetOldestEventLogRecord "GetOldestEventLogRecord" sptr,sptr
	#func global GetOverlappedAccessResults "GetOverlappedAccessResults" sptr,sptr,sptr,sptr
	#func global GetPrivateObjectSecurity "GetPrivateObjectSecurity" sptr,sptr,sptr,sptr,sptr
	#func global GetSecurityDescriptorControl "GetSecurityDescriptorControl" sptr,sptr,sptr
	#func global GetSecurityDescriptorDacl "GetSecurityDescriptorDacl" sptr,sptr,sptr,sptr
	#func global GetSecurityDescriptorGroup "GetSecurityDescriptorGroup" sptr,sptr,sptr
	#func global GetSecurityDescriptorLength "GetSecurityDescriptorLength" sptr
	#func global GetSecurityDescriptorOwner "GetSecurityDescriptorOwner" sptr,sptr,sptr
	#func global GetSecurityDescriptorRMControl "GetSecurityDescriptorRMControl" sptr,sptr
	#func global GetSecurityDescriptorSacl "GetSecurityDescriptorSacl" sptr,sptr,sptr,sptr
	#func global GetSecurityInfo "GetSecurityInfo" sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#define global GetSecurityInfoEx GetSecurityInfoExA
	#func global GetSecurityInfoExA "GetSecurityInfoExA" sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global GetSecurityInfoExW "GetSecurityInfoExW" wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr
	#define global GetServiceDisplayName GetServiceDisplayNameA
	#func global GetServiceDisplayNameA "GetServiceDisplayNameA" sptr,sptr,sptr,sptr
	#func global GetServiceDisplayNameW "GetServiceDisplayNameW" wptr,wptr,wptr,wptr
	#define global GetServiceKeyName GetServiceKeyNameA
	#func global GetServiceKeyNameA "GetServiceKeyNameA" sptr,sptr,sptr,sptr
	#func global GetServiceKeyNameW "GetServiceKeyNameW" wptr,wptr,wptr,wptr
	#func global GetSidIdentifierAuthority "GetSidIdentifierAuthority" sptr
	#func global GetSidLengthRequired "GetSidLengthRequired" sptr
	#func global GetSidSubAuthority "GetSidSubAuthority" sptr,sptr
	#func global GetSidSubAuthorityCount "GetSidSubAuthorityCount" sptr
	#func global GetTokenInformation "GetTokenInformation" sptr,sptr,sptr,sptr,sptr
	#func global GetTraceEnableFlags "GetTraceEnableFlags" sptr,sptr
	#func global GetTraceEnableLevel "GetTraceEnableLevel" sptr,sptr
	#func global GetTraceLoggerHandle "GetTraceLoggerHandle" sptr
	#define global GetTrusteeForm GetTrusteeFormA
	#func global GetTrusteeFormA "GetTrusteeFormA" sptr
	#func global GetTrusteeFormW "GetTrusteeFormW" wptr
	#define global GetTrusteeName GetTrusteeNameA
	#func global GetTrusteeNameA "GetTrusteeNameA" sptr
	#func global GetTrusteeNameW "GetTrusteeNameW" wptr
	#define global GetTrusteeType GetTrusteeTypeA
	#func global GetTrusteeTypeA "GetTrusteeTypeA" sptr
	#func global GetTrusteeTypeW "GetTrusteeTypeW" wptr
	#define global GetUserName GetUserNameA
	#func global GetUserNameA "GetUserNameA" sptr,sptr
	#func global GetUserNameW "GetUserNameW" wptr,wptr
	#func global GetWindowsAccountDomainSid "GetWindowsAccountDomainSid" sptr,sptr,sptr
	#define global I_ScSetServiceBits I_ScSetServiceBitsA
	#func global I_ScSetServiceBitsA "I_ScSetServiceBitsA" sptr,sptr,sptr,sptr,sptr
	#func global I_ScSetServiceBitsW "I_ScSetServiceBitsW" wptr,wptr,wptr,wptr,wptr
	#func global IdentifyCodeAuthzLevelW "IdentifyCodeAuthzLevelW" wptr,wptr,wptr,wptr
	#func global ImpersonateAnonymousToken "ImpersonateAnonymousToken" sptr
	#func global ImpersonateLoggedOnUser "ImpersonateLoggedOnUser" sptr
	#func global ImpersonateNamedPipeClient "ImpersonateNamedPipeClient" sptr
	#func global ImpersonateSelf "ImpersonateSelf" sptr
	#func global InitializeAcl "InitializeAcl" sptr,sptr,sptr
	#func global InitializeSecurityDescriptor "InitializeSecurityDescriptor" sptr,sptr
	#func global InitializeSid "InitializeSid" sptr,sptr,sptr
	#define global InitiateSystemShutdown InitiateSystemShutdownA
	#func global InitiateSystemShutdownA "InitiateSystemShutdownA" sptr,sptr,sptr,sptr,sptr
	#define global InitiateSystemShutdownEx InitiateSystemShutdownExA
	#func global InitiateSystemShutdownExA "InitiateSystemShutdownExA" sptr,sptr,sptr,sptr,sptr,sptr
	#func global InitiateSystemShutdownExW "InitiateSystemShutdownExW" wptr,wptr,wptr,wptr,wptr,wptr
	#func global InitiateSystemShutdownW "InitiateSystemShutdownW" wptr,wptr,wptr,wptr,wptr
	#func global InstallApplication "InstallApplication" sptr
	#func global IsTextUnicode "IsTextUnicode" sptr,sptr,sptr
	#func global IsTokenRestricted "IsTokenRestricted" sptr
	#func global IsTokenUntrusted "IsTokenUntrusted" sptr
	#func global IsValidAcl "IsValidAcl" sptr
	#func global IsValidSecurityDescriptor "IsValidSecurityDescriptor" sptr
	#func global IsValidSid "IsValidSid" sptr
	#func global IsWellKnownSid "IsWellKnownSid" sptr,sptr
	#func global LockServiceDatabase "LockServiceDatabase" sptr
	#define global LogonUser LogonUserA
	#func global LogonUserA "LogonUserA" sptr,sptr,sptr,sptr,sptr,sptr
	#define global LogonUserEx LogonUserExA
	#func global LogonUserExA "LogonUserExA" sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global LogonUserExW "LogonUserExW" wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr
	#func global LogonUserW "LogonUserW" wptr,wptr,wptr,wptr,wptr,wptr
	#define global LookupAccountName LookupAccountNameA
	#func global LookupAccountNameA "LookupAccountNameA" sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global LookupAccountNameW "LookupAccountNameW" wptr,wptr,wptr,wptr,wptr,wptr,wptr
	#define global LookupAccountSid LookupAccountSidA
	#func global LookupAccountSidA "LookupAccountSidA" sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global LookupAccountSidW "LookupAccountSidW" wptr,wptr,wptr,wptr,wptr,wptr,wptr
	#define global LookupPrivilegeDisplayName LookupPrivilegeDisplayNameA
	#func global LookupPrivilegeDisplayNameA "LookupPrivilegeDisplayNameA" sptr,sptr,sptr,sptr,sptr
	#func global LookupPrivilegeDisplayNameW "LookupPrivilegeDisplayNameW" wptr,wptr,wptr,wptr,wptr
	#define global LookupPrivilegeName LookupPrivilegeNameA
	#func global LookupPrivilegeNameA "LookupPrivilegeNameA" sptr,sptr,sptr,sptr
	#func global LookupPrivilegeNameW "LookupPrivilegeNameW" wptr,wptr,wptr,wptr
	#define global LookupPrivilegeValue LookupPrivilegeValueA
	#func global LookupPrivilegeValueA "LookupPrivilegeValueA" sptr,sptr,sptr
	#func global LookupPrivilegeValueW "LookupPrivilegeValueW" wptr,wptr,wptr
	#define global LookupSecurityDescriptorParts LookupSecurityDescriptorPartsA
	#func global LookupSecurityDescriptorPartsA "LookupSecurityDescriptorPartsA" sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global LookupSecurityDescriptorPartsW "LookupSecurityDescriptorPartsW" wptr,wptr,wptr,wptr,wptr,wptr,wptr
	#func global LsaAddAccountRights "LsaAddAccountRights" sptr,sptr,sptr,sptr
	#func global LsaAddPrivilegesToAccount "LsaAddPrivilegesToAccount" sptr,sptr
	#func global LsaClearAuditLog "LsaClearAuditLog" sptr
	#func global LsaClose "LsaClose" sptr
	#func global LsaCreateAccount "LsaCreateAccount" sptr,sptr,sptr,sptr
	#func global LsaCreateSecret "LsaCreateSecret" sptr,sptr,sptr,sptr
	#func global LsaCreateTrustedDomain "LsaCreateTrustedDomain" sptr,sptr,sptr,sptr
	#func global LsaCreateTrustedDomainEx "LsaCreateTrustedDomainEx" sptr,sptr,sptr,sptr,sptr
	#func global LsaDelete "LsaDelete" sptr
	#func global LsaDeleteTrustedDomain "LsaDeleteTrustedDomain" sptr,sptr
	#func global LsaEnumerateAccountRights "LsaEnumerateAccountRights" sptr,sptr,sptr,sptr
	#func global LsaEnumerateAccounts "LsaEnumerateAccounts" sptr,sptr,sptr,sptr,sptr
	#func global LsaEnumerateAccountsWithUserRight "LsaEnumerateAccountsWithUserRight" sptr,sptr,sptr,sptr
	#func global LsaEnumeratePrivileges "LsaEnumeratePrivileges" sptr,sptr,sptr,sptr,sptr
	#func global LsaEnumeratePrivilegesOfAccount "LsaEnumeratePrivilegesOfAccount" sptr,sptr
	#func global LsaEnumerateTrustedDomains "LsaEnumerateTrustedDomains" sptr,sptr,sptr,sptr,sptr
	#func global LsaEnumerateTrustedDomainsEx "LsaEnumerateTrustedDomainsEx" sptr,sptr,sptr,sptr,sptr
	#func global LsaFreeMemory "LsaFreeMemory" sptr
	#func global LsaGetQuotasForAccount "LsaGetQuotasForAccount" sptr,sptr
	#func global LsaGetRemoteUserName "LsaGetRemoteUserName" sptr,sptr,sptr
	#func global LsaGetSystemAccessAccount "LsaGetSystemAccessAccount" sptr,sptr
	#func global LsaGetUserName "LsaGetUserName" sptr,sptr
	#func global LsaICLookupNames "LsaICLookupNames" sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global LsaICLookupNamesWithCreds "LsaICLookupNamesWithCreds" sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global LsaICLookupSids "LsaICLookupSids" sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global LsaICLookupSidsWithCreds "LsaICLookupSidsWithCreds" sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global LsaLookupNames2 "LsaLookupNames2" sptr,sptr,sptr,sptr,sptr,sptr
	#func global LsaLookupNames "LsaLookupNames" sptr,sptr,sptr,sptr,sptr
	#func global LsaLookupPrivilegeDisplayName "LsaLookupPrivilegeDisplayName" sptr,sptr,sptr,sptr
	#func global LsaLookupPrivilegeName "LsaLookupPrivilegeName" sptr,sptr,sptr
	#func global LsaLookupPrivilegeValue "LsaLookupPrivilegeValue" sptr,sptr,sptr
	#func global LsaLookupSids "LsaLookupSids" sptr,sptr,sptr,sptr,sptr
	#func global LsaNtStatusToWinError "LsaNtStatusToWinError" sptr
	#func global LsaOpenAccount "LsaOpenAccount" sptr,sptr,sptr,sptr
	#func global LsaOpenPolicy "LsaOpenPolicy" sptr,sptr,sptr,sptr
	#func global LsaOpenPolicySce "LsaOpenPolicySce" sptr,sptr,sptr,sptr
	#func global LsaOpenSecret "LsaOpenSecret" sptr,sptr,sptr,sptr
	#func global LsaOpenTrustedDomain "LsaOpenTrustedDomain" sptr,sptr,sptr,sptr
	#func global LsaOpenTrustedDomainByName "LsaOpenTrustedDomainByName" sptr,sptr,sptr,sptr
	#func global LsaQueryDomainInformationPolicy "LsaQueryDomainInformationPolicy" sptr,sptr,sptr
	#func global LsaQueryForestTrustInformation "LsaQueryForestTrustInformation" sptr,sptr,sptr
	#func global LsaQueryInfoTrustedDomain "LsaQueryInfoTrustedDomain" sptr,sptr,sptr
	#func global LsaQueryInformationPolicy "LsaQueryInformationPolicy" sptr,sptr,sptr
	#func global LsaQuerySecret "LsaQuerySecret" sptr,sptr,sptr,sptr,sptr
	#func global LsaQuerySecurityObject "LsaQuerySecurityObject" sptr,sptr,sptr
	#func global LsaQueryTrustedDomainInfo "LsaQueryTrustedDomainInfo" sptr,sptr,sptr,sptr
	#func global LsaQueryTrustedDomainInfoByName "LsaQueryTrustedDomainInfoByName" sptr,sptr,sptr,sptr
	#func global LsaRemoveAccountRights "LsaRemoveAccountRights" sptr,sptr,sptr,sptr,sptr
	#func global LsaRemovePrivilegesFromAccount "LsaRemovePrivilegesFromAccount" sptr,sptr,sptr
	#func global LsaRetrievePrivateData "LsaRetrievePrivateData" sptr,sptr,sptr
	#func global LsaSetDomainInformationPolicy "LsaSetDomainInformationPolicy" sptr,sptr,sptr
	#func global LsaSetForestTrustInformation "LsaSetForestTrustInformation" sptr,sptr,sptr,sptr,sptr
	#func global LsaSetInformationPolicy "LsaSetInformationPolicy" sptr,sptr,sptr
	#func global LsaSetInformationTrustedDomain "LsaSetInformationTrustedDomain" sptr,sptr,sptr
	#func global LsaSetQuotasForAccount "LsaSetQuotasForAccount" sptr,sptr
	#func global LsaSetSecret "LsaSetSecret" sptr,sptr,sptr
	#func global LsaSetSecurityObject "LsaSetSecurityObject" sptr,sptr,sptr
	#func global LsaSetSystemAccessAccount "LsaSetSystemAccessAccount" sptr,sptr
	#func global LsaSetTrustedDomainInfoByName "LsaSetTrustedDomainInfoByName" sptr,sptr,sptr,sptr
	#func global LsaSetTrustedDomainInformation "LsaSetTrustedDomainInformation" sptr,sptr,sptr,sptr
	#func global LsaStorePrivateData "LsaStorePrivateData" sptr,sptr,sptr
	#func global MSChapSrvChangePassword2 "MSChapSrvChangePassword2" sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global MSChapSrvChangePassword "MSChapSrvChangePassword" sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global MakeAbsoluteSD2 "MakeAbsoluteSD2" sptr,sptr
	#func global MakeAbsoluteSD "MakeAbsoluteSD" sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global MakeSelfRelativeSD "MakeSelfRelativeSD" sptr,sptr,sptr
	#func global MapGenericMask "MapGenericMask" sptr,sptr
	#func global NotifyBootConfigStatus "NotifyBootConfigStatus" sptr
	#func global NotifyChangeEventLog "NotifyChangeEventLog" sptr,sptr
	#define global ObjectCloseAuditAlarm ObjectCloseAuditAlarmA
	#func global ObjectCloseAuditAlarmA "ObjectCloseAuditAlarmA" sptr,sptr,sptr
	#func global ObjectCloseAuditAlarmW "ObjectCloseAuditAlarmW" wptr,wptr,wptr
	#define global ObjectDeleteAuditAlarm ObjectDeleteAuditAlarmA
	#func global ObjectDeleteAuditAlarmA "ObjectDeleteAuditAlarmA" sptr,sptr,sptr
	#func global ObjectDeleteAuditAlarmW "ObjectDeleteAuditAlarmW" wptr,wptr,wptr
	#define global ObjectOpenAuditAlarm ObjectOpenAuditAlarmA
	#func global ObjectOpenAuditAlarmA "ObjectOpenAuditAlarmA" sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global ObjectOpenAuditAlarmW "ObjectOpenAuditAlarmW" wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr
	#define global ObjectPrivilegeAuditAlarm ObjectPrivilegeAuditAlarmA
	#func global ObjectPrivilegeAuditAlarmA "ObjectPrivilegeAuditAlarmA" sptr,sptr,sptr,sptr,sptr,sptr
	#func global ObjectPrivilegeAuditAlarmW "ObjectPrivilegeAuditAlarmW" wptr,wptr,wptr,wptr,wptr,wptr
	#define global OpenBackupEventLog OpenBackupEventLogA
	#func global OpenBackupEventLogA "OpenBackupEventLogA" sptr,sptr
	#func global OpenBackupEventLogW "OpenBackupEventLogW" wptr,wptr
	#define global OpenEncryptedFileRaw OpenEncryptedFileRawA
	#func global OpenEncryptedFileRawA "OpenEncryptedFileRawA" sptr,sptr,sptr
	#func global OpenEncryptedFileRawW "OpenEncryptedFileRawW" wptr,wptr,wptr
	#define global OpenEventLog OpenEventLogA
	#func global OpenEventLogA "OpenEventLogA" sptr,sptr
	#func global OpenEventLogW "OpenEventLogW" wptr,wptr
	#func global OpenProcessToken "OpenProcessToken" sptr,sptr,sptr
	#define global OpenSCManager OpenSCManagerA
	#func global OpenSCManagerA "OpenSCManagerA" sptr,sptr,sptr
	#func global OpenSCManagerW "OpenSCManagerW" wptr,wptr,wptr
	#define global OpenService OpenServiceA
	#func global OpenServiceA "OpenServiceA" sptr,sptr,sptr
	#func global OpenServiceW "OpenServiceW" wptr,wptr,wptr
	#func global OpenThreadToken "OpenThreadToken" sptr,sptr,sptr,sptr
	#define global OpenTrace OpenTraceA
	#func global OpenTraceA "OpenTraceA" sptr
	#func global OpenTraceW "OpenTraceW" wptr
	#func global PrivilegeCheck "PrivilegeCheck" sptr,sptr,sptr
	#define global PrivilegedServiceAuditAlarm PrivilegedServiceAuditAlarmA
	#func global PrivilegedServiceAuditAlarmA "PrivilegedServiceAuditAlarmA" sptr,sptr,sptr,sptr,sptr
	#func global PrivilegedServiceAuditAlarmW "PrivilegedServiceAuditAlarmW" wptr,wptr,wptr,wptr,wptr
	#func global ProcessTrace "ProcessTrace" sptr,sptr,sptr,sptr
	#define global QueryAllTraces QueryAllTracesA
	#func global QueryAllTracesA "QueryAllTracesA" sptr,sptr,sptr
	#func global QueryAllTracesW "QueryAllTracesW" wptr,wptr,wptr
	#func global QueryRecoveryAgentsOnEncryptedFile "QueryRecoveryAgentsOnEncryptedFile" sptr,sptr
	#define global QueryServiceConfig2 QueryServiceConfig2A
	#func global QueryServiceConfig2A "QueryServiceConfig2A" sptr,sptr,sptr,sptr,sptr
	#func global QueryServiceConfig2W "QueryServiceConfig2W" wptr,wptr,wptr,wptr,wptr
	#define global QueryServiceConfig QueryServiceConfigA
	#func global QueryServiceConfigA "QueryServiceConfigA" sptr,sptr,sptr,sptr
	#func global QueryServiceConfigW "QueryServiceConfigW" wptr,wptr,wptr,wptr
	#define global QueryServiceLockStatus QueryServiceLockStatusA
	#func global QueryServiceLockStatusA "QueryServiceLockStatusA" sptr,sptr,sptr,sptr
	#func global QueryServiceLockStatusW "QueryServiceLockStatusW" wptr,wptr,wptr,wptr
	#func global QueryServiceObjectSecurity "QueryServiceObjectSecurity" sptr,sptr,sptr,sptr,sptr
	#func global QueryServiceStatus "QueryServiceStatus" sptr,sptr
	#func global QueryServiceStatusEx "QueryServiceStatusEx" sptr,sptr,sptr,sptr,sptr
	#define global QueryTrace QueryTraceA
	#func global QueryTraceA "QueryTraceA" sptr,sptr,sptr,sptr
	#func global QueryTraceW "QueryTraceW" wptr,wptr,wptr,wptr
	#func global QueryUsersOnEncryptedFile "QueryUsersOnEncryptedFile" sptr,sptr
	#func global ReadEncryptedFileRaw "ReadEncryptedFileRaw" sptr,sptr,sptr
	#define global ReadEventLog ReadEventLogA
	#func global ReadEventLogA "ReadEventLogA" sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global ReadEventLogW "ReadEventLogW" wptr,wptr,wptr,wptr,wptr,wptr,wptr
	#func global RegCloseKey "RegCloseKey" sptr
	#define global RegConnectRegistry RegConnectRegistryA
	#func global RegConnectRegistryA "RegConnectRegistryA" sptr,sptr,sptr
	#func global RegConnectRegistryW "RegConnectRegistryW" wptr,wptr,wptr
	#define global RegCreateKey RegCreateKeyA
	#func global RegCreateKeyA "RegCreateKeyA" sptr,sptr,sptr
	#define global RegCreateKeyEx RegCreateKeyExA
	#func global RegCreateKeyExA "RegCreateKeyExA" sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global RegCreateKeyExW "RegCreateKeyExW" wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr
	#func global RegCreateKeyW "RegCreateKeyW" wptr,wptr,wptr
	#define global RegDeleteKey RegDeleteKeyA
	#func global RegDeleteKeyA "RegDeleteKeyA" sptr,sptr
	#func global RegDeleteKeyW "RegDeleteKeyW" wptr,wptr
	#define global RegDeleteValue RegDeleteValueA
	#func global RegDeleteValueA "RegDeleteValueA" sptr,sptr
	#func global RegDeleteValueW "RegDeleteValueW" wptr,wptr
	#func global RegDisablePredefinedCache "RegDisablePredefinedCache"
	#define global RegEnumKey RegEnumKeyA
	#func global RegEnumKeyA "RegEnumKeyA" sptr,sptr,sptr,sptr
	#define global RegEnumKeyEx RegEnumKeyExA
	#func global RegEnumKeyExA "RegEnumKeyExA" sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global RegEnumKeyExW "RegEnumKeyExW" wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr
	#func global RegEnumKeyW "RegEnumKeyW" wptr,wptr,wptr,wptr
	#define global RegEnumValue RegEnumValueA
	#func global RegEnumValueA "RegEnumValueA" sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global RegEnumValueW "RegEnumValueW" wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr
	#func global RegFlushKey "RegFlushKey" sptr
	#func global RegGetKeySecurity "RegGetKeySecurity" sptr,sptr,sptr,sptr
	#define global RegLoadKey RegLoadKeyA
	#func global RegLoadKeyA "RegLoadKeyA" sptr,sptr,sptr
	#func global RegLoadKeyW "RegLoadKeyW" wptr,wptr,wptr
	#func global RegNotifyChangeKeyValue "RegNotifyChangeKeyValue" sptr,sptr,sptr,sptr,sptr
	#func global RegOpenCurrentUser "RegOpenCurrentUser" sptr,sptr
	#define global RegOpenKey RegOpenKeyA
	#func global RegOpenKeyA "RegOpenKeyA" sptr,sptr,sptr
	#define global RegOpenKeyEx RegOpenKeyExA
	#func global RegOpenKeyExA "RegOpenKeyExA" sptr,sptr,sptr,sptr,sptr
	#func global RegOpenKeyExW "RegOpenKeyExW" wptr,wptr,wptr,wptr,wptr
	#func global RegOpenKeyW "RegOpenKeyW" wptr,wptr,wptr
	#func global RegOpenUserClassesRoot "RegOpenUserClassesRoot" sptr,sptr,sptr,sptr
	#func global RegOverridePredefKey "RegOverridePredefKey" sptr,sptr
	#define global RegQueryInfoKey RegQueryInfoKeyA
	#func global RegQueryInfoKeyA "RegQueryInfoKeyA" sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global RegQueryInfoKeyW "RegQueryInfoKeyW" wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr
	#define global RegQueryMultipleValues RegQueryMultipleValuesA
	#func global RegQueryMultipleValuesA "RegQueryMultipleValuesA" sptr,sptr,sptr,sptr,sptr
	#func global RegQueryMultipleValuesW "RegQueryMultipleValuesW" wptr,wptr,wptr,wptr,wptr
	#define global RegQueryValue RegQueryValueA
	#func global RegQueryValueA "RegQueryValueA" sptr,sptr,sptr,sptr
	#define global RegQueryValueEx RegQueryValueExA
	#func global RegQueryValueExA "RegQueryValueExA" sptr,sptr,sptr,sptr,sptr,sptr
	#func global RegQueryValueExW "RegQueryValueExW" wptr,wptr,wptr,wptr,wptr,wptr
	#func global RegQueryValueW "RegQueryValueW" wptr,wptr,wptr,wptr
	#define global RegReplaceKey RegReplaceKeyA
	#func global RegReplaceKeyA "RegReplaceKeyA" sptr,sptr,sptr,sptr
	#func global RegReplaceKeyW "RegReplaceKeyW" wptr,wptr,wptr,wptr
	#define global RegRestoreKey RegRestoreKeyA
	#func global RegRestoreKeyA "RegRestoreKeyA" sptr,sptr,sptr
	#func global RegRestoreKeyW "RegRestoreKeyW" wptr,wptr,wptr
	#define global RegSaveKey RegSaveKeyA
	#func global RegSaveKeyA "RegSaveKeyA" sptr,sptr,sptr
	#define global RegSaveKeyEx RegSaveKeyExA
	#func global RegSaveKeyExA "RegSaveKeyExA" sptr,sptr,sptr,sptr
	#func global RegSaveKeyExW "RegSaveKeyExW" wptr,wptr,wptr,wptr
	#func global RegSaveKeyW "RegSaveKeyW" wptr,wptr,wptr
	#func global RegSetKeySecurity "RegSetKeySecurity" sptr,sptr,sptr
	#define global RegSetValue RegSetValueA
	#func global RegSetValueA "RegSetValueA" sptr,sptr,sptr,sptr,sptr
	#define global RegSetValueEx RegSetValueExA
	#func global RegSetValueExA "RegSetValueExA" sptr,sptr,sptr,sptr,sptr,sptr
	#func global RegSetValueExW "RegSetValueExW" wptr,wptr,wptr,wptr,wptr,wptr
	#func global RegSetValueW "RegSetValueW" wptr,wptr,wptr,wptr,wptr
	#define global RegUnLoadKey RegUnLoadKeyA
	#func global RegUnLoadKeyA "RegUnLoadKeyA" sptr,sptr
	#func global RegUnLoadKeyW "RegUnLoadKeyW" wptr,wptr
	#define global RegisterEventSource RegisterEventSourceA
	#func global RegisterEventSourceA "RegisterEventSourceA" sptr,sptr
	#func global RegisterEventSourceW "RegisterEventSourceW" wptr,wptr
	#define global RegisterServiceCtrlHandler RegisterServiceCtrlHandlerA
	#func global RegisterServiceCtrlHandlerA "RegisterServiceCtrlHandlerA" sptr,sptr
	#define global RegisterServiceCtrlHandlerEx RegisterServiceCtrlHandlerExA
	#func global RegisterServiceCtrlHandlerExA "RegisterServiceCtrlHandlerExA" sptr,sptr,sptr
	#func global RegisterServiceCtrlHandlerExW "RegisterServiceCtrlHandlerExW" wptr,wptr,wptr
	#func global RegisterServiceCtrlHandlerW "RegisterServiceCtrlHandlerW" wptr,wptr
	#define global RegisterTraceGuids RegisterTraceGuidsA
	#func global RegisterTraceGuidsA "RegisterTraceGuidsA" sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global RegisterTraceGuidsW "RegisterTraceGuidsW" wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr
	#func global RemoveTraceCallback "RemoveTraceCallback" sptr
	#func global RemoveUsersFromEncryptedFile "RemoveUsersFromEncryptedFile" sptr,sptr
	#define global ReportEvent ReportEventA
	#func global ReportEventA "ReportEventA" sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global ReportEventW "ReportEventW" wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr
	#func global RevertToSelf "RevertToSelf"
	#func global SaferCloseLevel "SaferCloseLevel" sptr
	#func global SaferComputeTokenFromLevel "SaferComputeTokenFromLevel" sptr,sptr,sptr,sptr,sptr
	#func global SaferCreateLevel "SaferCreateLevel" sptr,sptr,sptr,sptr,sptr
	#func global SaferGetLevelInformation "SaferGetLevelInformation" sptr,sptr,sptr,sptr,sptr
	#func global SaferGetPolicyInformation "SaferGetPolicyInformation" sptr,sptr,sptr,sptr,sptr,sptr
	#func global SaferIdentifyLevel "SaferIdentifyLevel" sptr,sptr,sptr,sptr
	#func global SaferRecordEventLogEntry "SaferRecordEventLogEntry" sptr,sptr,sptr
	#func global SaferSetLevelInformation "SaferSetLevelInformation" sptr,sptr,sptr,sptr
	#func global SaferSetPolicyInformation "SaferSetPolicyInformation" sptr,sptr,sptr,sptr,sptr
	#func global SetAclInformation "SetAclInformation" sptr,sptr,sptr,sptr
	#define global SetEntriesInAccessList SetEntriesInAccessListA
	#func global SetEntriesInAccessListA "SetEntriesInAccessListA" sptr,sptr,sptr,sptr,sptr,sptr
	#func global SetEntriesInAccessListW "SetEntriesInAccessListW" wptr,wptr,wptr,wptr,wptr,wptr
	#define global SetEntriesInAcl SetEntriesInAclA
	#func global SetEntriesInAclA "SetEntriesInAclA" sptr,sptr,sptr,sptr
	#func global SetEntriesInAclW "SetEntriesInAclW" wptr,wptr,wptr,wptr
	#define global SetEntriesInAuditList SetEntriesInAuditListA
	#func global SetEntriesInAuditListA "SetEntriesInAuditListA" sptr,sptr,sptr,sptr,sptr,sptr
	#func global SetEntriesInAuditListW "SetEntriesInAuditListW" wptr,wptr,wptr,wptr,wptr,wptr
	#define global SetFileSecurity SetFileSecurityA
	#func global SetFileSecurityA "SetFileSecurityA" sptr,sptr,sptr
	#func global SetFileSecurityW "SetFileSecurityW" wptr,wptr,wptr
	#func global SetInformationCodeAuthzLevelW "SetInformationCodeAuthzLevelW" wptr,wptr,wptr,wptr
	#func global SetInformationCodeAuthzPolicyW "SetInformationCodeAuthzPolicyW" wptr,wptr,wptr,wptr,wptr
	#func global SetKernelObjectSecurity "SetKernelObjectSecurity" sptr,sptr,sptr
	#define global SetNamedSecurityInfo SetNamedSecurityInfoA
	#func global SetNamedSecurityInfoA "SetNamedSecurityInfoA" sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#define global SetNamedSecurityInfoEx SetNamedSecurityInfoExA
	#func global SetNamedSecurityInfoExA "SetNamedSecurityInfoExA" sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global SetNamedSecurityInfoExW "SetNamedSecurityInfoExW" wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr
	#func global SetNamedSecurityInfoW "SetNamedSecurityInfoW" wptr,wptr,wptr,wptr,wptr,wptr,wptr
	#func global SetPrivateObjectSecurity "SetPrivateObjectSecurity" sptr,sptr,sptr,sptr,sptr
	#func global SetPrivateObjectSecurityEx "SetPrivateObjectSecurityEx" sptr,sptr,sptr,sptr,sptr,sptr
	#func global SetSecurityDescriptorControl "SetSecurityDescriptorControl" sptr,sptr,sptr
	#func global SetSecurityDescriptorDacl "SetSecurityDescriptorDacl" sptr,sptr,sptr,sptr
	#func global SetSecurityDescriptorGroup "SetSecurityDescriptorGroup" sptr,sptr,sptr
	#func global SetSecurityDescriptorOwner "SetSecurityDescriptorOwner" sptr,sptr,sptr
	#func global SetSecurityDescriptorRMControl "SetSecurityDescriptorRMControl" sptr,sptr
	#func global SetSecurityDescriptorSacl "SetSecurityDescriptorSacl" sptr,sptr,sptr,sptr
	#func global SetSecurityInfo "SetSecurityInfo" sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#define global SetSecurityInfoEx SetSecurityInfoExA
	#func global SetSecurityInfoExA "SetSecurityInfoExA" sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global SetSecurityInfoExW "SetSecurityInfoExW" wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr
	#func global SetServiceBits "SetServiceBits" sptr,sptr,sptr,sptr
	#func global SetServiceObjectSecurity "SetServiceObjectSecurity" sptr,sptr,sptr
	#func global SetServiceStatus "SetServiceStatus" sptr,sptr
	#func global SetThreadToken "SetThreadToken" sptr,sptr
	#func global SetTokenInformation "SetTokenInformation" sptr,sptr,sptr,sptr
	#func global SetTraceCallback "SetTraceCallback" sptr,sptr
	#func global SetUserFileEncryptionKey "SetUserFileEncryptionKey" sptr
	#define global StartService StartServiceA
	#func global StartServiceA "StartServiceA" sptr,sptr,sptr
	#define global StartServiceCtrlDispatcher StartServiceCtrlDispatcherA
	#func global StartServiceCtrlDispatcherA "StartServiceCtrlDispatcherA" sptr
	#func global StartServiceCtrlDispatcherW "StartServiceCtrlDispatcherW" wptr
	#func global StartServiceW "StartServiceW" wptr,wptr,wptr
	#define global StartTrace StartTraceA
	#func global StartTraceA "StartTraceA" sptr,sptr,sptr
	#func global StartTraceW "StartTraceW" wptr,wptr,wptr
	#define global StopTrace StopTraceA
	#func global StopTraceA "StopTraceA" sptr,sptr,sptr,sptr
	#func global StopTraceW "StopTraceW" wptr,wptr,wptr,wptr
	#func global SystemFunction001 "SystemFunction001" sptr,sptr,sptr
	#func global SystemFunction002 "SystemFunction002" sptr,sptr,sptr
	#func global SystemFunction003 "SystemFunction003" sptr,sptr
	#func global SystemFunction004 "SystemFunction004" sptr,sptr,sptr
	#func global SystemFunction005 "SystemFunction005" sptr,sptr,sptr
	#func global SystemFunction006 "SystemFunction006" sptr,sptr
	#func global SystemFunction007 "SystemFunction007" sptr,sptr
	#func global SystemFunction008 "SystemFunction008" sptr,sptr,sptr
	#func global SystemFunction009 "SystemFunction009" sptr,sptr,sptr
	#func global SystemFunction010 "SystemFunction010" sptr,sptr,sptr
	#func global SystemFunction011 "SystemFunction011" sptr,sptr,sptr
	#func global SystemFunction012 "SystemFunction012" sptr,sptr,sptr
	#func global SystemFunction013 "SystemFunction013" sptr,sptr,sptr
	#func global SystemFunction014 "SystemFunction014" sptr,sptr,sptr
	#func global SystemFunction015 "SystemFunction015" sptr,sptr,sptr
	#func global SystemFunction016 "SystemFunction016" sptr,sptr,sptr
	#func global SystemFunction017 "SystemFunction017" sptr,sptr,sptr
	#func global SystemFunction018 "SystemFunction018" sptr,sptr,sptr
	#func global SystemFunction019 "SystemFunction019" sptr,sptr,sptr
	#func global SystemFunction020 "SystemFunction020" sptr,sptr,sptr
	#func global SystemFunction021 "SystemFunction021" sptr,sptr,sptr
	#func global SystemFunction022 "SystemFunction022" sptr,sptr,sptr
	#func global SystemFunction023 "SystemFunction023" sptr,sptr,sptr
	#func global SystemFunction024 "SystemFunction024" sptr,sptr,sptr
	#func global SystemFunction025 "SystemFunction025" sptr,sptr,sptr
	#func global SystemFunction026 "SystemFunction026" sptr,sptr,sptr
	#func global SystemFunction027 "SystemFunction027" sptr,sptr,sptr
	#func global SystemFunction028 "SystemFunction028" sptr,sptr
	#func global SystemFunction029 "SystemFunction029" sptr,sptr
	#func global SystemFunction030 "SystemFunction030" sptr,sptr
	#func global SystemFunction031 "SystemFunction031" sptr,sptr
	#func global SystemFunction032 "SystemFunction032" sptr,sptr
	#func global SystemFunction033 "SystemFunction033" sptr,sptr
	#func global SystemFunction034 "SystemFunction034" sptr,sptr,sptr
	#func global SystemFunction036 "SystemFunction036" sptr,sptr
	#func global SystemFunction040 "SystemFunction040" sptr,sptr,sptr
	#func global SystemFunction041 "SystemFunction041" sptr,sptr,sptr
	#func global TraceEvent "TraceEvent" sptr,sptr,sptr
	#func global TraceEventInstance "TraceEventInstance" sptr,sptr,sptr,sptr,sptr
	#func global TraceMessage "TraceMessage" sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global TraceMessageVa "TraceMessageVa" sptr,sptr,sptr,sptr,sptr,sptr
	#define global TreeResetNamedSecurityInfo TreeResetNamedSecurityInfoA
	#func global TreeResetNamedSecurityInfoA "TreeResetNamedSecurityInfoA" sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global TreeResetNamedSecurityInfoW "TreeResetNamedSecurityInfoW" wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr
	#define global TrusteeAccessToObject TrusteeAccessToObjectA
	#func global TrusteeAccessToObjectA "TrusteeAccessToObjectA" sptr,sptr,sptr,sptr,sptr,sptr
	#func global TrusteeAccessToObjectW "TrusteeAccessToObjectW" wptr,wptr,wptr,wptr,wptr,wptr
	#func global UninstallApplication "UninstallApplication" sptr,sptr
	#func global UnlockServiceDatabase "UnlockServiceDatabase" sptr
	#func global UnregisterTraceGuids "UnregisterTraceGuids" sptr,sptr
	#define global UpdateTrace UpdateTraceA
	#func global UpdateTraceA "UpdateTraceA" sptr,sptr,sptr,sptr
	#func global UpdateTraceW "UpdateTraceW" wptr,wptr,wptr,wptr
	#func global Wow64Win32ApiEntry "Wow64Win32ApiEntry" sptr,sptr,sptr
	#func global WriteEncryptedFileRaw "WriteEncryptedFileRaw" sptr,sptr,sptr
#endif
#endif
;(comctl32.as)
#ifdef __hsp30__
#ifndef __COMCTL32__
#define global __COMCTL32__
#uselib "COMCTL32.DLL"
	#func global CreateMappedBitmap "CreateMappedBitmap" sptr,sptr,sptr,sptr,sptr
	#func global CreatePropertySheetPage "CreatePropertySheetPage" sptr
	#func global CreatePropertySheetPageA "CreatePropertySheetPageA" sptr
	#func global CreatePropertySheetPageW "CreatePropertySheetPageW" wptr
	#func global CreateStatusWindow "CreateStatusWindow" sptr,sptr,sptr,sptr
	#func global CreateStatusWindowA "CreateStatusWindowA" sptr,sptr,sptr,sptr
	#func global CreateStatusWindowW "CreateStatusWindowW" wptr,wptr,wptr,wptr
	#func global CreateToolbar "CreateToolbar" sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global CreateToolbarEx "CreateToolbarEx" sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global CreateUpDownControl "CreateUpDownControl" sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global DestroyPropertySheetPage "DestroyPropertySheetPage" sptr
	#func global DrawInsert "DrawInsert" sptr,sptr,sptr
	#func global DrawStatusText "DrawStatusText" sptr,sptr,sptr,sptr
	#func global DrawStatusTextA "DrawStatusTextA" sptr,sptr,sptr,sptr
	#func global DrawStatusTextW "DrawStatusTextW" wptr,wptr,wptr,wptr
	#func global FlatSB_EnableScrollBar "FlatSB_EnableScrollBar" sptr,sptr,sptr
	#func global FlatSB_GetScrollInfo "FlatSB_GetScrollInfo" sptr,sptr,sptr
	#func global FlatSB_GetScrollPos "FlatSB_GetScrollPos" sptr,sptr
	#func global FlatSB_GetScrollProp "FlatSB_GetScrollProp" sptr,sptr,sptr
	#func global FlatSB_GetScrollRange "FlatSB_GetScrollRange" sptr,sptr,sptr,sptr
	#func global FlatSB_SetScrollInfo "FlatSB_SetScrollInfo" sptr,sptr,sptr,sptr
	#func global FlatSB_SetScrollPos "FlatSB_SetScrollPos" sptr,sptr,sptr,sptr
	#func global FlatSB_SetScrollProp "FlatSB_SetScrollProp" sptr,sptr,sptr,sptr
	#func global FlatSB_SetScrollRange "FlatSB_SetScrollRange" sptr,sptr,sptr,sptr,sptr
	#func global FlatSB_ShowScrollBar "FlatSB_ShowScrollBar" sptr,sptr,sptr
	#func global GetEffectiveClientRect "GetEffectiveClientRect" sptr,sptr,sptr
	#func global ImageList_Add "ImageList_Add" sptr,sptr,sptr
	#func global ImageList_AddIcon "ImageList_AddIcon" sptr,sptr
	#func global ImageList_AddMasked "ImageList_AddMasked" sptr,sptr,sptr
	#func global ImageList_BeginDrag "ImageList_BeginDrag" sptr,sptr,sptr,sptr
	#func global ImageList_Copy "ImageList_Copy" sptr,sptr,sptr,sptr,sptr
	#func global ImageList_Create "ImageList_Create" sptr,sptr,sptr,sptr,sptr
	#func global ImageList_Destroy "ImageList_Destroy" sptr
	#func global ImageList_DragEnter "ImageList_DragEnter" sptr,sptr,sptr
	#func global ImageList_DragLeave "ImageList_DragLeave" sptr
	#func global ImageList_DragMove "ImageList_DragMove" sptr,sptr
	#func global ImageList_DragShowNolock "ImageList_DragShowNolock" sptr
	#func global ImageList_Draw "ImageList_Draw" sptr,sptr,sptr,sptr,sptr,sptr
	#func global ImageList_DrawEx "ImageList_DrawEx" sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global ImageList_DrawIndirect "ImageList_DrawIndirect" sptr
	#func global ImageList_Duplicate "ImageList_Duplicate" sptr
	#func global ImageList_EndDrag "ImageList_EndDrag"
	#func global ImageList_GetBkColor "ImageList_GetBkColor" sptr
	#func global ImageList_GetDragImage "ImageList_GetDragImage" sptr,sptr
	#func global ImageList_GetIcon "ImageList_GetIcon" sptr,sptr,sptr
	#func global ImageList_GetIconSize "ImageList_GetIconSize" sptr,sptr,sptr
	#func global ImageList_GetImageCount "ImageList_GetImageCount" sptr
	#func global ImageList_GetImageInfo "ImageList_GetImageInfo" sptr,sptr,sptr
	#func global ImageList_GetImageRect "ImageList_GetImageRect" sptr,sptr,sptr
	#func global ImageList_LoadImage "ImageList_LoadImage" sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global ImageList_LoadImageA "ImageList_LoadImageA" sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global ImageList_LoadImageW "ImageList_LoadImageW" wptr,wptr,wptr,wptr,wptr,wptr,wptr
	#func global ImageList_Merge "ImageList_Merge" sptr,sptr,sptr,sptr,sptr,sptr
	#func global ImageList_Read "ImageList_Read" sptr
	#func global ImageList_Remove "ImageList_Remove" sptr,sptr
	#func global ImageList_Replace "ImageList_Replace" sptr,sptr,sptr,sptr
	#func global ImageList_ReplaceIcon "ImageList_ReplaceIcon" sptr,sptr,sptr
	#func global ImageList_SetBkColor "ImageList_SetBkColor" sptr,sptr
	#func global ImageList_SetDragCursorImage "ImageList_SetDragCursorImage" sptr,sptr,sptr,sptr
	#func global ImageList_SetFilter "ImageList_SetFilter" sptr,sptr,sptr
	#func global ImageList_SetIconSize "ImageList_SetIconSize" sptr,sptr,sptr
	#func global ImageList_SetImageCount "ImageList_SetImageCount" sptr,sptr
	#func global ImageList_SetOverlayImage "ImageList_SetOverlayImage" sptr,sptr,sptr
	#func global ImageList_Write "ImageList_Write" sptr,sptr
	#func global InitCommonControls "InitCommonControls"
	#func global InitCommonControlsEx "InitCommonControlsEx" sptr
	#func global InitializeFlatSB "InitializeFlatSB" sptr
	#func global LBItemFromPt "LBItemFromPt" sptr,sptr,sptr,sptr
	#func global MakeDragList "MakeDragList" sptr
	#func global MenuHelp "MenuHelp" sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global PropertySheet "PropertySheet" sptr
	#func global PropertySheetA "PropertySheetA" sptr
	#func global PropertySheetW "PropertySheetW" wptr
	#func global ShowHideMenuCtl "ShowHideMenuCtl" sptr,sptr,sptr
	#func global _TrackMouseEvent "TrackMouseEvent" sptr
	#func global UninitializeFlatSB "UninitializeFlatSB" sptr
#endif
#endif
;(comdlg32.as)
#ifdef __hsp30__
#ifndef __COMDLG32__
#define global __COMDLG32__
#uselib "COMDLG32.DLL"
	#func global ArrowBtnWndProc "ArrowBtnWndProc" sptr,sptr,sptr,sptr
	#define global ChooseColor ChooseColorA
	#func global ChooseColorA "ChooseColorA" sptr
	#func global ChooseColorW "ChooseColorW" wptr
	#define global ChooseFont ChooseFontA
	#func global ChooseFontA "ChooseFontA" sptr
	#func global ChooseFontW "ChooseFontW" wptr
	#func global ColorDlgProc "ColorDlgProc" sptr,sptr,sptr,sptr
	#func global CommDlgExtendedError "CommDlgExtendedError"
	#func global EditIntegerOnly "EditIntegerOnly" sptr,sptr,sptr,sptr
	#func global FileOpenDlgProc "FileOpenDlgProc" sptr,sptr,sptr,sptr
	#func global FileSaveDlgProc "FileSaveDlgProc" sptr,sptr,sptr,sptr
	#func global FindReplaceDlgProc "FindReplaceDlgProc" sptr,sptr,sptr,sptr
	#define global FindText FindTextA
	#func global FindTextA "FindTextA" sptr
	#func global FindTextW "FindTextW" wptr
	#func global FontFamilyEnumProc "FontFamilyEnumProc" sptr,sptr,sptr,sptr
	#func global FontStyleEnumProc "FontStyleEnumProc" sptr,sptr,sptr,sptr
	#func global FormatCharDlgProc "FormatCharDlgProc" sptr,sptr,sptr,sptr
	#define global GetFileTitle GetFileTitleA
	#func global GetFileTitleA "GetFileTitleA" sptr,sptr,sptr
	#func global GetFileTitleW "GetFileTitleW" wptr,wptr,wptr
	#define global GetOpenFileName GetOpenFileNameA
	#func global GetOpenFileNameA "GetOpenFileNameA" sptr
	#func global GetOpenFileNameW "GetOpenFileNameW" wptr
	#define global GetSaveFileName GetSaveFileNameA
	#func global GetSaveFileNameA "GetSaveFileNameA" sptr
	#func global GetSaveFileNameW "GetSaveFileNameW" wptr
	#func global LoadAlterBitmap "LoadAlterBitmap" sptr,sptr,sptr
	#define global PageSetupDlg PageSetupDlgA
	#func global PageSetupDlgA "PageSetupDlgA" sptr
	#func global PageSetupDlgW "PageSetupDlgW" wptr
	#define global PrintDlg PrintDlgA
	#func global PrintDlgA "PrintDlgA" sptr
	#func global PrintDlgProc "PrintDlgProc" sptr,sptr,sptr,sptr
	#func global PrintDlgW "PrintDlgW" wptr
	#func global PrintSetupDlgProc "PrintSetupDlgProc" sptr,sptr,sptr,sptr
	#define global ReplaceText ReplaceTextA
	#func global ReplaceTextA "ReplaceTextA" sptr
	#func global ReplaceTextW "ReplaceTextW" wptr
	#func global WantArrows "WantArrows" sptr,sptr,sptr,sptr
	#func global dwLBSubclass "dwLBSubclass" sptr,sptr,sptr,sptr
	#func global dwOKSubclass "dwOKSubclass" sptr,sptr,sptr,sptr
#endif
#endif

;	このディレクトリに置かれたasファイルは、
;	「#include」命令で読み込むことができます。


;============================================================
;                                                 2008/05/01
;	S.Programs d3module 1.67
;	Simple, Stupid 3D module for HSP3
;                               http://sprocket.babyblue.jp/
;============================================================

#ifndef d3setcam
#module "d3m"

;===========================================================
;	数学サポートモジュール
;===========================================================

; d3dist 距離 (ベクトル) の絶対値を求める (x, y, z)
;-----------------------------------------------------------
#define global ctype d3dist(%1,%2=0,%3=0)  sqrt((%1) * (%1) + (%2) * (%2) + (%3) * (%3))


; d3rotate 平面座標回転演算 (x1, y1,  x0, y0,  va)
; 出力変数 x1 y1, 入力値 x0 y0, 回転角度 va
;-----------------------------------------------------------
#deffunc d3rotate var x1, var y1, double x0, double y0, double va

	x1 = x0 * cos(va) - y0 * sin(va)
	y1 = x0 * sin(va) + y0 * cos(va)

	return


; d3vrotate 任意軸周りの空間回転演算 (x1, y1, z1,  x0, y0, z0,  vx, vy, vz,  va)
; 出力変数 x1 y1 z1, 入力値 x0 y0 z0, 回転軸ベクトル vx vy vz, 回転角度 va
;-----------------------------------------------------------
#deffunc d3vrotate var x1, var y1, var z1,  double x0, double y0, double z0,  double vx, double vy, double vz,  double va

	; 回転軸の単位ベクトル化
	r = d3dist(vx, vy, vz)
	ax = vx/r : ay = vy/r : az = vz/r

	; 回転演算
	sin1   = sin(va)
	cos1   = cos(va)
	l_cos1 = 1.0 - cos1

	x1 = (ax*ax*l_cos1+cos1)*x0 + (ax*ay*l_cos1-az*sin1)*y0 + (az*ax*l_cos1+ay*sin1)*z0
	y1 = (ax*ay*l_cos1+az*sin1)*x0 + (ay*ay*l_cos1+cos1)*y0 + (ay*az*l_cos1-ax*sin1)*z0
	z1 = (az*ax*l_cos1-ay*sin1)*x0 + (ay*az*l_cos1+ax*sin1)*y0 + (az*az*l_cos1+cos1)*z0

	return



;===========================================================
;	3D 制御モジュール
;===========================================================

; 座標変換パラメータ変数の外部公開
;-----------------------------------------------------------
#define global d3wincx wincx@d3m
#define global d3wincy wincy@d3m


; d3setlocalmx ローカル座標系設定 平行移動量 + 3x3 変形マトリクス (px, py, pz,  m00, m01, m02,  m10, m11, m12,  m20, m21, m22)
;-----------------------------------------------------------
#deffunc d3setlocalmx double LGmpx, double LGmpy, double LGmpz,  double LGm00, double LGm10, double LGm20,  double LGm01, double LGm11, double LGm21,  double LGm02, double LGm12, double LGm22

	; Local->Global->Screen Matrix Setup
	; 座標変換演算用マトリクス設定 (Local->Global Matrix と Global->Screen Matrix を合成演算)

	LGSm00 = GSm00*LGm00 + GSm10*LGm01 ;+ GSm20*LGm02 // GSm20 == 0
	LGSm10 = GSm00*LGm10 + GSm10*LGm11 ;+ GSm20*LGm12
	LGSm20 = GSm00*LGm20 + GSm10*LGm21 ;+ GSm20*LGm22
	LGSmpx = GSm00*LGmpx + GSm10*LGmpy + GSmpx ;+ GSm20*LGmpz

	LGSm01 = GSm01*LGm00 + GSm11*LGm01 + GSm21*LGm02
	LGSm11 = GSm01*LGm10 + GSm11*LGm11 + GSm21*LGm12
	LGSm21 = GSm01*LGm20 + GSm11*LGm21 + GSm21*LGm22
	LGSmpy = GSm01*LGmpx + GSm11*LGmpy + GSm21*LGmpz + GSmpy

	LGSm02 = GSm02*LGm00 + GSm12*LGm01 + GSm22*LGm02
	LGSm12 = GSm02*LGm10 + GSm12*LGm11 + GSm22*LGm12
	LGSm22 = GSm02*LGm20 + GSm12*LGm21 + GSm22*LGm22
	LGSmpz = GSm02*LGmpx + GSm12*LGmpy + GSm22*LGmpz + GSmpz

	return


; d3setcamx カメラ位置設定 (cx, cy, cz,  tx, ty, tz)
;-----------------------------------------------------------
#deffunc d3setcamx double cpx, double cpy, double cpz,  double ppx, double ppy, double ppz, double ppv

	; 座標変換結果を stat に返すようにする
	mref df, 64

	; パラメータ設定
	wincx = ginfo_winx / 2
	wincy = ginfo_winy / 2

	; カメラ方向三角比計算
	ax = cpx - ppx
	ay = cpy - ppy
	az = cpz - ppz

	r0 = sqrt(ax*ax + ay*ay)
	r1 = sqrt(r0*r0 + az*az)

	if r0 ! 0.0 {
		cos0 = -ax / r0
		sin0 = -ay / r0
	}
	if r1 ! 0.0 {
		cos1 = r0 / r1
		sin1 = az / r1
	}

	; Global->Screen Matrix Setup
	; グローバル座標 → スクリーン座標 変換マトリクス

	az = ppv / (0.01 + ginfo_winy) ; 視野角

	GSm00 = sin0         : GSm10 = -cos0       ; : GSm20 =  0.0
	GSm01 = cos0*cos1*az : GSm11 =  sin0*cos1*az : GSm21 = -sin1*az
	GSm02 = cos0*sin1    : GSm12 =  sin0*sin1    : GSm22 =  cos1

	GSmpx = -(GSm00*cpx + GSm10*cpy)
	GSmpy = -(GSm01*cpx + GSm11*cpy + GSm21*cpz)
	GSmpz = -(GSm02*cpx + GSm12*cpy + GSm22*cpz)


	; Local->Global->Screen Matrix Setup
	; 座標変換演算用マトリクス設定 (Global->Screen Matrix で初期化)

	d3setlocalmx 0,0,0, 1,0,0, 0,1,0, 0,0,1

	return


; d3setcam カメラ位置設定 (cx, cy, cz,  tx, ty, tz)
; パラメータ省略用マクロ
;-----------------------------------------------------------
#define global d3setcam(%1=0, %2=0, %3=0, %4=0, %5=0, %6=0, %7=1)  d3setcamx %1, %2, %3, %4, %5, %6, %7


; d3setlocal ローカル座標系設定 (px, py, pz,  m00, m01, m02,  m10, m11, m12,  m20, m21, m22)
; パラメータ省略用マクロ (パラメータを省略した場合、ローカル座標系 == グローバル座標系となる)
;-----------------------------------------------------------
#define global d3setlocal(%1=0,%2=0,%3=0, %4=1,%5=0,%6=0, %7=0,%8=1,%9=0, %10=0,%11=0,%12=1)  d3setlocalmx %1,%2,%3, %4,%5,%6, %7,%8,%9, %10,%11,%12


; d3trans 座標変換 macro (inx, iny, inz,  oux, ouy, ouz, ouf)
;-----------------------------------------------------------
#define d3trans(%1, %2, %3,  %4=dx, %5=dy, %6=dz, %7=df) \
\
	%6 = (LGSm01*%1 + LGSm11*%2 + LGSm21*%3 + LGSmpy) : \
	%7 = 0 : \
\
	if %6 > 0 { \
		%4 = wincx + (LGSm00*%1 + LGSm10*%2 + LGSm20*%3 + LGSmpx) / %6 : \
		%5 = wincy - (LGSm02*%1 + LGSm12*%2 + LGSm22*%3 + LGSmpz) / %6 : \
		%7 = (%4/8000 | %5/8000) = 0 \
	}


; d3vpos 座標変換 (x, y, z) -> dx, dy, dz, df
;-----------------------------------------------------------
#deffunc d3vpos  double v01, double v02, double v03

	; bkup last-data
	ex = dx
	ey = dy
	ef = df

	d3trans v01, v02, v03

	return



;===========================================================
;	描画制御モジュール
;===========================================================

; memo : 描画命令実行後は前回描画情報 dx, dy, dz, df を必ず保持する

; d3getpos 座標変換結果を返す (vx, vy,  x, y, z)
;-----------------------------------------------------------
#define global d3getpos(%1, %2, %3=0, %4=0, %5=0)  d3vpos %3, %4, %5 : if df@d3m { %1 = dx@d3m : %2 = dy@d3m }


; d3pos カレントポジション移動 (x, y, z)
;-----------------------------------------------------------
#define global d3pos(%1=0, %2=0, %3=0)  d3vpos %1, %2, %3 : if df@d3m { pos dx@d3m, dy@d3m }


; d3initlineto  d3lineto / d3ribbonto 使用前の初期化 (カレントポジション無効化)
;-----------------------------------------------------------
#define global d3initlineto  df@d3m = 0



;===========================================================
;	ベーシック描画モジュール
;===========================================================

; d3pset 点を描画 (x, y, z)
;-----------------------------------------------------------
#define global d3pset(%1=0, %2=0, %3=0)  d3vpos %1, %2, %3 : if df@d3m { pset dx@d3m, dy@d3m }


; d3lineto 連続線の描画 (x, y, z)
;-----------------------------------------------------------
#define global d3lineto(%1=0,%2=0,%3=0)  d3vpos %1, %2, %3 : if df@d3m & ef@d3m { line dx@d3m, dy@d3m, ex@d3m, ey@d3m }


; d3line ライン描画 (x1, y1, z1,  x2, y2, z2) / クリッピングあり
;-----------------------------------------------------------
#deffunc d3line double ppx, double ppy, double ppz,  double ssx, double ssy, double ssz

	d3vpos ssx, ssy, ssz ; , ex, ey, ez, ef
	d3vpos ppx, ppy, ppz ; , dx, dy, dz, df

	; クリップ不要
	if df & ef {
		line dx, dy, ex, ey
		return
	}

	; 二分探索でクリッピング
	if df | ef {
		if df {
			pos dx, dy
			ax = ppx : ay = ppy : az = ppz
			bx = ssx : by = ssy : bz = ssz
		} else {
			pos ex, ey
			ax = ssx : ay = ssy : az = ssz
			bx = ppx : by = ppy : bz = ppz
		}
		repeat 10
			cx = (ax + bx) / 2
			cy = (ay + by) / 2
			cz = (az + bz) / 2
			d3trans cx, cy, cz,  ex, ey, ez, af
			if af {
				ax = cx : ay = cy : az = cz
				line ex, ey
			} else {
				bx = cx : by = cy : bz = cz
			}
		loop
	}

	return


; d3arrow 矢印を描画 (x1, y1, z1,  x2, y2, z2)
;-----------------------------------------------------------
#deffunc d3arrow double v11, double v12, double v13,  double v14, double v15, double v16

	d3line v11, v12, v13,  v14, v15, v16

	if df & ef {
		; vector of arrow
		a = atan(dy-ey, dx-ex)

		; pos
		d3vpos (v11*6+v14)/7, (v12*6+v15)/7, (v13*6+v16)/7

		; size of arrow
		r = d3dist(v11-v14, v12-v15, v13-v16) / dz / 25
		bx = cos(a) * r
		by = sin(a) * r

		; draw
		line ex, ey,  dx - by, dy + bx
		line ex, ey,  dx + by, dy - bx
	}

	return


; d3box ボックスを描画 (x1, y1, z1,  x2, y2, z2)
;-----------------------------------------------------------
#deffunc d3box double v11, double v12, double v13,  double v14, double v15, double v16

	d3line v11, v12, v13,  v11, v12, v16
	d3line v11, v12, v16,  v11, v15, v16
	d3line v11, v15, v16,  v11, v15, v13
	d3line v11, v15, v13,  v11, v12, v13

	d3line v14, v12, v13,  v14, v15, v13
	d3line v14, v15, v13,  v14, v15, v16
	d3line v14, v15, v16,  v14, v12, v16
	d3line v14, v12, v16,  v14, v12, v13

	d3line v11, v12, v13,  v14, v12, v13
	d3line v11, v12, v16,  v14, v12, v16
	d3line v11, v15, v16,  v14, v15, v16
	d3line v11, v15, v13,  v14, v15, v13

	return


; d3circle 円を描画 (x, y, z,  r,  flg)
;-----------------------------------------------------------
#deffunc d3circle double ppx, double ppy, double ppz, double ppr, int ppf

	d3vpos ppx, ppy, ppz

	if df {
		r = ppr / dz
		if r >= 1 {
			circle dx-r, dy-r, dx+(r+0.5), dy+(r+0.5), ppf
		} else {
			pset dx, dy
		}
	}
	return


; d3mes 文字列を表示 (str,  x, y, z)
;-----------------------------------------------------------
#deffunc d3mes str pmsg, double ppx, double ppy, double ppz

	d3vpos ppx, ppy, ppz

	if df {
		pos 0, -32000
		mes pmsg
		pos dx - ginfo_mesx/2, dy - ginfo_mesy/2
		mes pmsg
	}
	return



;===========================================================
;	パーティクル描画モジュール
;===========================================================

#const	PCACHE_D	18				; 縮小キャッシュ 最大直径
#const	PTS_D		(PCACHE_D + 1) * PCACHE_D / 2	; パーティクルバッファ 直径
#const	PTS_DM1		(PTS_D - 1)			;  PTS_D - 1
#const	TMP_R		PTS_D				; パーティクル画像作成スクリーン 半径
#const	TMP_D		TMP_R * 2			;  同 直径 // ↑d3mkparticle の画質/速度バランスに相当

; 縮小キャッシュ最大径はパーティクルバッファ径に制限を受ける
; PTS_D[MIN] == (PCACHE_D + 1) * PCACHE_D / 2
;  PCACHE_D  10, 11, 12, 13,  14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24
;  PTS_D     55, 66, 78, 91, 105, 120, 136, 153, 171, 190, 210, 231, 253, 276, 300


; d3mkparticle 球状パーティクル作成 (pid,  r, g, b,  pseq)
;-----------------------------------------------------------
#define global d3mkparticle(%1=0, %2=0, %3=0, %4=0, %5=ptcdef@d3m)  d3createptc %1, %2, %3, %4, %5


; d3ldparticle パーティクル画像ロード (pid,  sid,  x, y, w, h)
;-----------------------------------------------------------
#define global d3ldparticle(%1=0, %2=0, %3=0, %4=0, %5=1, %6=1)  tmp@d3m = %5 : d3createptc %1, %2, %3, %4, tmp@d3m, %6


; d3createptc パーティクル画像作成 (pid,  p2, p3, p4, p5, p6)
;-----------------------------------------------------------
#deffunc d3createptc int ppi, int v02, int v03, int v04, array v05, int v06

	; init
	b = ginfo_sel
	x = PTS_D * ppi

	; パーティクル用スクリーン作成 (wid スワップで自動拡張)
	if ppi >= ppi_max {
		a = ppi + 4 ; 拡張後の ppi_max (最大 pid)

		; パーティクル/TEMP バッファの wid 設定
		if SCR_TMP = 29 {
			SCR_TMP = 27
			SCR_PTC = 29
		} else {
			SCR_TMP = 29
			SCR_PTC = 27
		}

		; 新 パーティクルバッファ
		buffer SCR_PTC, PTS_D * a, PTS_D + PCACHE_D

		; 従来使用していたバッファがあれば内容引継ぎ
		if ppi_max : gcopy SCR_TMP, 0, 0, PTS_D * ppi_max, PTS_D + PCACHE_D

		; 新 TEMP バッファ
		buffer SCR_TMP, TMP_D, TMP_D

		ppi_max = a
	}

	; (パラメータによって動作分け)
	if v06 {
		; パーティクル画像ロード (d3ldparticle)
		gsel SCR_PTC
		pos x, 0
		gzoom PTS_D, PTS_D, v02, v03, v04, v05, v06, 1

	} else {
		; パーティクル画像作成 (d3mkparticle)
		gsel SCR_TMP
		color : boxf

		; Poly Particle Processor (d3m 1.65)
		; pseq : n_repeat, l_seq, seq[0], seq[1], ... , seq[l-1]

		#define pseq v05

		polys = pseq * pseq(1)
		n = TMP_R * polys

		repeat n
			f = (1.0 + cnt) / n		; linear
		;	f = f * f			; parabola
			f = (f * f + f) / 2		; blend

			color limit(f * v02, 0, 255), limit(f * v03, 0, 255), limit(f * v04, 0, 255)

			f = 6.2831853 * cnt / polys
			r = TMP_R * (n - cnt) * pseq(cnt\pseq(1)+2) / 100 / n

			line TMP_R + sin(f)*r, TMP_R - cos(f)*r
		loop

		; patch
		pos 0, 0 : gmode 2, TMP_D, TMP_D : gcopy SCR_TMP, 1

		; パーティクル画像ロード
		gsel SCR_PTC
		pos x, 0
		gzoom PTS_D, PTS_D,  SCR_TMP,  0, 0,  TMP_D, TMP_D,  1
	}

	; 高速化用 縮小済みキャッシュ作成
	repeat PCACHE_D, 1
		pos (cnt-1)*cnt/2 + x, PTS_D
		gzoom cnt, cnt,  SCR_PTC,  x, 0,  PTS_D, PTS_D,  1

		; sharp patch
		gmode 3, , , 56
		pos cnt*cnt/2 + x, PTS_D + cnt/2
		gcopy SCR_PTC, PTS_D/2 + x, PTS_D/2, 1, 1
	loop

	; 固定パラメータ (コピー元 ar-y)
	pfy = 0, 0, PTS_DM1, PTS_DM1

	; 描画先を戻す
	gsel b

	return


; d3particle 位置指定, パーティクル描画 (pid,  x, y, z,  r)
;-----------------------------------------------------------
#define global d3particle(%1=0,%2=0,%3=0,%4=0,%5=0)  d3vpos %2, %3, %4 : d3particlem %1, %5


; d3particlem パーティクル描画 (pid, r) @ dx, dy, dz
;-----------------------------------------------------------
#deffunc d3particlem int ppi, double ppr

	if df {
		d = int(ppr * 2 / dz)
		if d >= 1 {
			if d <= PCACHE_D {
				; 高速版 : 縮小済みキャッシュからコピー
				pos dx - d/2, dy - d/2
				gcopy SCR_PTC,  ppi*PTS_D + (d-1)*d/2, PTS_D,  d, d
			} else {
				; 標準版 : パーティクルソースから倍変コピー
				r = d / 2
				pdx = dx - r, dx + r, dx + r, pdx
				pdy = dy - r, pdy, dy + r, dy + r
				x = ppi*PTS_D
				psx = x, x+PTS_DM1, x+PTS_DM1, x
				gsquare SCR_PTC, pdx, pdy, psx, pfy
			}
		}
	}

	return


; d3particler 位置, 回転角度指定 パーティクル描画 (pid,  x, y, z,  r, a)
;-----------------------------------------------------------
#define global d3particler(%1=0,%2=0,%3=0,%4=0,%5=0,%6=0)  d3vpos %2, %3, %4 : d3particlemr %1, %5, %6


; d3particlemr 回転角度指定 パーティクル描画 (pid,  r, a)
;-----------------------------------------------------------
#deffunc d3particlemr int ppi, double ppr, double ppa

	if df {
		r = ppr / dz * 1.41421356
		if r >= 1 {
			; パーティクルソースから回転/倍変コピー

			c = cos(ppa - 0.78539816) * r
			s = sin(ppa - 0.78539816) * r

			pdx = dx + s, dx + c, dx - s, dx - c
			pdy = dy - c, dy + s, dy + c, dy - s

			x = ppi*PTS_D
			psx = x, x+PTS_DM1, x+PTS_DM1, x
			gsquare SCR_PTC, pdx, pdy, psx, pfy
		}
	}

	return



;===========================================================
;	面描画モジュール
;===========================================================

; d3square 四角形面を塗りつぶし描画 (x-ary, y-ary, z-ary)
;-----------------------------------------------------------
#deffunc d3square array aryx, array aryy, array aryz

	; 4 隅を座標変換 (ary は double, int 両対応)
	repeat 4
		vx = aryx(cnt)
		vy = aryy(cnt)
		vz = aryz(cnt)
		d3trans  vx, vy, vz

		if df = 0 : break ; 座標変換範囲外

		pdx(cnt) = dx
		pdy(cnt) = dy
	loop

	if df : gsquare -1, pdx, pdy

	return


; d3ribbon リボン状に連なる面を連続描画
;-----------------------------------------------------------
#deffunc d3ribbonto double x1, double y1, double z1, double x2, double y2, double z2

	; 前回描画位置
	pdx = dx, ex
	pdy = dy, ey

	a = ef & df ; 前回描画フラグ

	d3vpos x1, y1, z1 ; -> ef
	d3vpos x2, y2, z2 ; -> df

	if a & ef & df {
		pdx(2) = ex, dx
		pdy(2) = ey, dy

		gsquare -1, pdx, pdy
	}

	return


; d3texture 四角形面に画像を貼り付け (x-ary, y-ary, z-ary,  wid,  x, y, w, h,  div)
;-----------------------------------------------------------
#deffunc d3texture array aryx, array aryy, array aryz, int ppi, int ppx, int ppy, int ppw, int pph, int div

	; 面を分割しない場合 (default)

	if div <= 1 {
		; 4 隅を座標変換 (ary は double, int 両対応)
		repeat 4
			vx = aryx(cnt)
			vy = aryy(cnt)
			vz = aryz(cnt)
			d3trans  vx, vy, vz

			if df = 0 : break ; 座標変換範囲外

			pdx(cnt) = dx
			pdy(cnt) = dy
		loop

		if df {
			psx = ppx, ppx+ppw-1, ppx+ppw-1, ppx
			psy = ppy, ppy,       ppy+pph-1, ppy+pph-1
			gsquare ppi, pdx, pdy, psx, psy
		}
		return
	}


	; 面を分割して座標変換 & 描画
	; Original code by Yuki

	pc = div + 1	; 一辺の点の数(point count)
	fc = div * div	; 分割した面の数(face count)

	; 分割された各面の頂点を求める
	repeat pc * pc
		x = cnt\pc
		y = cnt/pc

		; 各頂点の重み( factor 0, 1, 2, 3 )
		; memo
		;   f0      f1      f2      f3      sum
		;  4 2 0   0 2 4   0 0 0   0 0 0   4 4 4
		;  2 1 0   0 1 2   0 1 2   2 1 0   4 4 4
		;  0 0 0   0 0 0   0 2 4   4 2 0   4 4 4

		f0 = (div-x) * (div-y)
		f1 = x * (div-y)
		f2 = x * y
		f3 = (div-x) * y

		; 頂点の座標( vertex x,y,z )
		vx = (aryx(0)*f0 + aryx(1)*f1 + aryx(2)*f2 + aryx(3)*f3) / fc
		vy = (aryy(0)*f0 + aryy(1)*f1 + aryy(2)*f2 + aryy(3)*f3) / fc
		vz = (aryz(0)*f0 + aryz(1)*f1 + aryz(2)*f2 + aryz(3)*f3) / fc

		; 頂点を座標変換( tranceformed vertex x,y,flg )
		d3trans vx, vy, vz,  tvx(cnt), tvy(cnt), dz,  tvf(cnt)
	loop

	; 各面を描画

	pw = ppw - 1
	ph = pph - 1

	repeat div
		y = cnt

		; 描画元 y 座標( paint source y )
		psy = y*ph/div + ppy, psy(0), (y+1)*ph/div + ppy, psy(2)

		repeat div
			x = cnt

			; 面の各頂点を表す、tvx,y 上のインデックス( point 0, 1, 2, 3 )
			p0 = y * pc + x
			p1 = p0 + 1
			p2 = p1 + pc
			p3 = p0 + pc

			; 全ての点が変換に成功していれば描画
			if tvf(p0) & tvf(p1) & tvf(p2) & tvf(p3) {

				; 描画先座標( paint destination x,y )
				pdx = tvx(p0), tvx(p1), tvx(p2), tvx(p3)
				pdy = tvy(p0), tvy(p1), tvy(p2), tvy(p3)

				; 描画元 x 座標( paint source x )
				psx = x*pw/div + ppx, (x+1)*pw/div + ppx, psx(1), psx(0)

				gsquare ppi, pdx, pdy, psx, psy
			}
		loop
	loop

	return



;===========================================================
;	タイマー機能モジュール
;===========================================================


#ifdef _HSP3DISH

#defcfunc d3timer
	getreq _timevalue,SYSREQ_TIMER
	return _timevalue

#else
; ms タイマー
;-----------------------------------------------------------
#uselib "winmm.dll"
#cfunc global d3timer "timeGetTime"
#endif



; d3getfps fps 取得 (カウント 1000ms, 更新 200ms)
;-----------------------------------------------------------
#defcfunc d3getfps

	a = d3timer() / 200

	fpss(a&31)++ ; フレームカウント

	if bktp ! a {
		bktp = a
		cfps = 0

		; 過去 1000ms 分のカウントを集計
		repeat 5, 1
			cfps += fpss((a-cnt)&31)
		loop

		; 先 4000ms 分のカウントをリセット
		repeat 20, 1
			fpss((a+cnt)&31) = 0
		loop
	}

	return cfps



#global

	; init
	dim fpss@d3m, 32

	ptcdef@d3m = 20, 1, 100 ; default particle code


#endif
;
; Character Codepage Encode module

#ifndef __ENCODE_AS__
#define global __ENCODE_AS__

#module "mod_encode"

#const global CODEPAGE_S_JIS            932 ; Shift-JIS
#const global CODEPAGE_EUC_JP         51932 ; EUC-JP
#const global CODEPAGE_JIS            50220 ; iso-2022-jp(JIS)
#const global CODEPAGE_UTF_7          65000 ; utf-7
#const global CODEPAGE_UTF_8          65001 ; utf-8
#const global CODEPAGE_UNICODE         1200 ; Unicode
#const global CODEPAGE_UNICODE_BE      1201 ; Unicode(Big-Endian)
#const global CODEPAGE_AUTODET_ALL    50001 ; auto detect all
#const global CODEPAGE_AUTODET        50932 ; auto detect

#usecom IMultiLanguage@mod_encode	"{275c23e1-3747-11d0-9fea-00aa003f8646}" \
									"{275c23e2-3747-11d0-9fea-00aa003f8646}"
#comfunc MuLang_ConvertString 9 var, int, int, var, var, var, var

#deffunc _encode_init
	newcom ml, IMultiLanguage
	return

#deffunc _encode_term onexit
	delcom ml
	return

#deffunc __FromSJIS@mod_encode str _src, int srcCodepage, var dest, int destCodepage, local src, local srcSize, local destSize, local pdwMode
	pdwMode = 0
	srcSize = -1
	destSize= 0
	src		= _src
	sdim dest
	MuLang_ConvertString ml, pdwMode, srcCodepage, destCodepage, src, srcSize, dest, destSize
	sdim dest, destSize + 1
	MuLang_ConvertString ml, pdwMode, srcCodepage, destCodepage, src, srcSize, dest, destSize
	return destSize

#defcfunc _ToSJIS@mod_encode var src, int srcCodepage, int destCodepage, local dest
	__FromSJIS src, srcCodepage, dest, destCodepage
	return dest

#define _FromSJIS __FromSJIS@mod_encode

#global

_encode_init

; SJIS -> other char code 
#define			sjis2eucjp(%1, %2)	_FromSJIS@mod_encode %2, CODEPAGE_S_JIS, %1, CODEPAGE_EUC_JP
#define			sjis2jis(%1, %2)	_FromSJIS@mod_encode %2, CODEPAGE_S_JIS, %1, CODEPAGE_JIS
#define			sjis2utf7n(%1, %2)	_FromSJIS@mod_encode %2, CODEPAGE_S_JIS, %1, CODEPAGE_UTF_7
#define			sjis2utf8n(%1, %2)	_FromSJIS@mod_encode %2, CODEPAGE_S_JIS, %1, CODEPAGE_UTF_8

; other char code -> SJIS
#define ctype	eucjp2sjis(%1)		_ToSJIS@mod_encode(%1, CODEPAGE_EUC_JP, CODEPAGE_S_JIS)
#define ctype	jis2sjis(%1)		_ToSJIS@mod_encode(%1, CODEPAGE_JIS,    CODEPAGE_S_JIS)
#define ctype	utf7n2sjis(%1)		_ToSJIS@mod_encode(%1, CODEPAGE_UTF_7,  CODEPAGE_S_JIS)
#define ctype	utf8n2sjis(%1)		_ToSJIS@mod_encode(%1, CODEPAGE_UTF_8,  CODEPAGE_S_JIS)

#endif

;	form_decodeモジュール
;	form_decode命令を使用するには以下の行を最初に入れてください
;
;	#include "form_decode.as"
;
#module
	;	form_decode命令
	;	form_decode 文字変数1, 文字変数2, 変換スイッチ
	;
	;	送信用にエンコードされたテキストを元の日本語にデコードします。
	;	文字変数2の内容をデコードして文字変数1に格納します。
	;	変換スイッチの効果は以下のとおりです。
	;		1にすると'&'を改行に変換
	;		2にすると'+'を空白に変換
	;		3にすると両方とも変換
	;
/*
	2008/02/01 変更点
		コードを整理・若干高速化。
	既知の不具合
		第1引数（cnvbf）が充分に確保されていないと
		バッファオーバーフローを引き起こす可能性があります。
*/
#deffunc form_decode var cnvbf,var txtbf,int sw
	i = 0                  		// テキストの読み出し位置
	txtsize = strlen(txtbf)		// テキストの長さ
	code = -1              		// 読みだした文字コード
	repeat
		if (code == 0)|(i >= txtsize) : break
		code = peek(txtbf, i)
		i+
		if code == '%' {
			// 日本語変換
			code = int("$" + strmid(txtbf, i, 2))
			i += 2
		}
		if sw & (code == '&') {
			// '&'は改行に
			wpoke cnvbf, cnt, $0A0D
			continue cnt + 2
		}
		if (sw >> 1) & (code == '+') {
			// '+'は空白に
			code = 32
		}
		poke cnvbf, cnt, code
	loop
	return

#global
;(gdi32.as)
#ifdef __hsp30__
#ifndef __GDI32__
#define global __GDI32__
#uselib "GDI32.DLL"
	#func global AbortDoc "AbortDoc" sptr
	#func global AbortPath "AbortPath" sptr
	#func global AddFontMemResourceEx "AddFontMemResourceEx" sptr,sptr,sptr,sptr
	#define global AddFontResource AddFontResourceA
	#func global AddFontResourceA "AddFontResourceA" sptr
	#define global AddFontResourceEx AddFontResourceExA
	#func global AddFontResourceExA "AddFontResourceExA" sptr,sptr,sptr
	#func global AddFontResourceExW "AddFontResourceExW" wptr,wptr,wptr
	#func global AddFontResourceW "AddFontResourceW" wptr
	#func global AngleArc "AngleArc" sptr,sptr,sptr,sptr,float,float

	#func global AnimatePalette "AnimatePalette" sptr,sptr,sptr,sptr
	#func global Arc "Arc" sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global ArcTo "ArcTo" sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global BeginPath "BeginPath" sptr
	#func global BitBlt "BitBlt" sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global CancelDC "CancelDC" sptr
	#func global CheckColorsInGamut "CheckColorsInGamut" sptr,sptr,sptr,sptr
	#func global ChoosePixelFormat "ChoosePixelFormat" sptr,sptr
	#func global Chord "Chord" sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global CloseEnhMetaFile "CloseEnhMetaFile" sptr
	#func global CloseFigure "CloseFigure" sptr
	#func global CloseMetaFile "CloseMetaFile" sptr
	#func global ColorCorrectPalette "ColorCorrectPalette" sptr,sptr,sptr,sptr
	#func global ColorMatchToTarget "ColorMatchToTarget" sptr,sptr,sptr
	#func global CombineRgn "CombineRgn" sptr,sptr,sptr,sptr
	#func global CombineTransform "CombineTransform" sptr,sptr,sptr
	#define global CopyEnhMetaFile CopyEnhMetaFileA
	#func global CopyEnhMetaFileA "CopyEnhMetaFileA" sptr,sptr
	#func global CopyEnhMetaFileW "CopyEnhMetaFileW" wptr,wptr
	#define global CopyMetaFile CopyMetaFileA
	#func global CopyMetaFileA "CopyMetaFileA" sptr,sptr
	#func global CopyMetaFileW "CopyMetaFileW" wptr,wptr
	#func global CreateBitmap "CreateBitmap" sptr,sptr,sptr,sptr,sptr
	#func global CreateBitmapIndirect "CreateBitmapIndirect" sptr
	#func global CreateBrushIndirect "CreateBrushIndirect" sptr
	#define global CreateColorSpace CreateColorSpaceA
	#func global CreateColorSpaceA "CreateColorSpaceA" sptr
	#func global CreateColorSpaceW "CreateColorSpaceW" wptr
	#func global CreateCompatibleBitmap "CreateCompatibleBitmap" sptr,sptr,sptr
	#func global CreateCompatibleDC "CreateCompatibleDC" sptr
	#define global CreateDC CreateDCA
	#func global CreateDCA "CreateDCA" sptr,sptr,sptr,sptr
	#func global CreateDCW "CreateDCW" wptr,wptr,wptr,wptr
	#func global CreateDIBPatternBrush "CreateDIBPatternBrush" sptr,sptr
	#func global CreateDIBPatternBrushPt "CreateDIBPatternBrushPt" sptr,sptr
	#func global CreateDIBSection "CreateDIBSection" sptr,sptr,sptr,sptr,sptr,sptr
	#func global CreateDIBitmap "CreateDIBitmap" sptr,sptr,sptr,sptr,sptr,sptr
	#func global CreateDiscardableBitmap "CreateDiscardableBitmap" sptr,sptr,sptr
	#func global CreateEllipticRgn "CreateEllipticRgn" sptr,sptr,sptr,sptr
	#func global CreateEllipticRgnIndirect "CreateEllipticRgnIndirect" sptr
	#define global CreateEnhMetaFile CreateEnhMetaFileA
	#func global CreateEnhMetaFileA "CreateEnhMetaFileA" sptr,sptr,sptr,sptr
	#func global CreateEnhMetaFileW "CreateEnhMetaFileW" wptr,wptr,wptr,wptr
	#define global CreateFont CreateFontA
	#func global CreateFontA "CreateFontA" sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#define global CreateFontIndirect CreateFontIndirectA
	#func global CreateFontIndirectA "CreateFontIndirectA" sptr
	#define global CreateFontIndirectEx CreateFontIndirectExA
	#func global CreateFontIndirectExA "CreateFontIndirectExA" sptr
	#func global CreateFontIndirectExW "CreateFontIndirectExW" wptr
	#func global CreateFontIndirectW "CreateFontIndirectW" wptr
	#func global CreateFontW "CreateFontW" wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr
	#func global CreateHalftonePalette "CreateHalftonePalette" sptr
	#func global CreateHatchBrush "CreateHatchBrush" sptr,sptr
	#define global CreateIC CreateICA
	#func global CreateICA "CreateICA" sptr,sptr,sptr,sptr
	#func global CreateICW "CreateICW" wptr,wptr,wptr,wptr
	#define global CreateMetaFile CreateMetaFileA
	#func global CreateMetaFileA "CreateMetaFileA" sptr
	#func global CreateMetaFileW "CreateMetaFileW" wptr
	#func global CreatePalette "CreatePalette" sptr
	#func global CreatePatternBrush "CreatePatternBrush" sptr
	#func global CreatePen "CreatePen" sptr,sptr,sptr
	#func global CreatePenIndirect "CreatePenIndirect" sptr
	#func global CreatePolyPolygonRgn "CreatePolyPolygonRgn" sptr,sptr,sptr,sptr
	#func global CreatePolygonRgn "CreatePolygonRgn" sptr,sptr,sptr
	#func global CreateRectRgn "CreateRectRgn" sptr,sptr,sptr,sptr
	#func global CreateRectRgnIndirect "CreateRectRgnIndirect" sptr
	#func global CreateRoundRectRgn "CreateRoundRectRgn" sptr,sptr,sptr,sptr,sptr,sptr
	#define global CreateScalableFontResource CreateScalableFontResourceA
	#func global CreateScalableFontResourceA "CreateScalableFontResourceA" sptr,sptr,sptr,sptr
	#func global CreateScalableFontResourceW "CreateScalableFontResourceW" wptr,wptr,wptr,wptr
	#func global CreateSolidBrush "CreateSolidBrush" sptr
	#func global DPtoLP "DPtoLP" sptr,sptr,sptr
	#func global DeleteColorSpace "DeleteColorSpace" sptr
	#func global DeleteDC "DeleteDC" sptr
	#func global DeleteEnhMetaFile "DeleteEnhMetaFile" sptr
	#func global DeleteMetaFile "DeleteMetaFile" sptr
	#func global DeleteObject "DeleteObject" sptr
	#func global DescribePixelFormat "DescribePixelFormat" sptr,sptr,sptr,sptr
	#define global DeviceCapabilitiesEx DeviceCapabilitiesExA
	#func global DeviceCapabilitiesExA "DeviceCapabilitiesExA" sptr,sptr,sptr,sptr,sptr,sptr
	#func global DeviceCapabilitiesExW "DeviceCapabilitiesExW" wptr,wptr,wptr,wptr,wptr,wptr
	#func global DrawEscape "DrawEscape" sptr,sptr,sptr,sptr
	#func global Ellipse "Ellipse" sptr,sptr,sptr,sptr,sptr
	#func global EnableEUDC "EnableEUDC" sptr
	#func global EndDoc "EndDoc" sptr
	#func global EndFormPage "EndFormPage" sptr
	#func global EndPage "EndPage" sptr
	#func global EndPath "EndPath" sptr
	#func global EnumEnhMetaFile "EnumEnhMetaFile" sptr,sptr,sptr,sptr,sptr
	#define global EnumFontFamilies EnumFontFamiliesA
	#func global EnumFontFamiliesA "EnumFontFamiliesA" sptr,sptr,sptr,sptr
	#define global EnumFontFamiliesEx EnumFontFamiliesExA
	#func global EnumFontFamiliesExA "EnumFontFamiliesExA" sptr,sptr,sptr,sptr,sptr
	#func global EnumFontFamiliesExW "EnumFontFamiliesExW" wptr,wptr,wptr,wptr,wptr
	#func global EnumFontFamiliesW "EnumFontFamiliesW" wptr,wptr,wptr,wptr
	#define global EnumFonts EnumFontsA
	#func global EnumFontsA "EnumFontsA" sptr,sptr,sptr,sptr
	#func global EnumFontsW "EnumFontsW" wptr,wptr,wptr,wptr
	#define global EnumICMProfiles EnumICMProfilesA
	#func global EnumICMProfilesA "EnumICMProfilesA" sptr,sptr,sptr
	#func global EnumICMProfilesW "EnumICMProfilesW" wptr,wptr,wptr
	#func global EnumMetaFile "EnumMetaFile" sptr,sptr,sptr,sptr
	#func global EnumObjects "EnumObjects" sptr,sptr,sptr,sptr
	#func global EqualRgn "EqualRgn" sptr,sptr
	#func global Escape "Escape" sptr,sptr,sptr,sptr,sptr
	#func global EudcLoadLinkW "EudcLoadLinkW" wptr,wptr,wptr,wptr
	#func global EudcUnloadLinkW "EudcUnloadLinkW" wptr,wptr
	#func global ExcludeClipRect "ExcludeClipRect" sptr,sptr,sptr,sptr,sptr
	#func global ExtCreatePen "ExtCreatePen" sptr,sptr,sptr,sptr,sptr
	#func global ExtCreateRegion "ExtCreateRegion" sptr,sptr,sptr
	#func global ExtEscape "ExtEscape" sptr,sptr,sptr,sptr,sptr,sptr
	#func global ExtFloodFill "ExtFloodFill" sptr,sptr,sptr,sptr,sptr
	#func global ExtSelectClipRgn "ExtSelectClipRgn" sptr,sptr,sptr
	#define global ExtTextOut ExtTextOutA
	#func global ExtTextOutA "ExtTextOutA" sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global ExtTextOutW "ExtTextOutW" wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr
	#func global FillPath "FillPath" sptr
	#func global FillRgn "FillRgn" sptr,sptr,sptr
	#func global FixBrushOrgEx "FixBrushOrgEx" sptr,sptr,sptr,sptr
	#func global FlattenPath "FlattenPath" sptr
	#func global FloodFill "FloodFill" sptr,sptr,sptr,sptr
	#func global FrameRgn "FrameRgn" sptr,sptr,sptr,sptr,sptr
	#func global GdiArtificialDecrementDriver "GdiArtificialDecrementDriver" sptr,sptr
	#func global GdiComment "GdiComment" sptr,sptr,sptr
	#func global GdiDeleteSpoolFileHandle "GdiDeleteSpoolFileHandle" sptr
	#func global GdiEndDocEMF "GdiEndDocEMF" sptr
	#func global GdiEndPageEMF "GdiEndPageEMF" sptr,sptr
	#func global GdiFlush "GdiFlush"
	#func global GdiGetBatchLimit "GdiGetBatchLimit"
	#func global GdiGetDC "GdiGetDC" sptr
	#func global GdiGetDevmodeForPage "GdiGetDevmodeForPage" sptr,sptr,sptr,sptr
	#func global GdiGetPageCount "GdiGetPageCount" sptr
	#func global GdiGetPageHandle "GdiGetPageHandle" sptr,sptr,sptr
	#func global GdiGetSpoolFileHandle "GdiGetSpoolFileHandle" sptr,sptr,sptr
	#func global GdiPlayDCScript "GdiPlayDCScript" sptr,sptr,sptr,sptr,sptr,sptr
	#func global GdiPlayEMF "GdiPlayEMF" sptr,sptr,sptr,sptr,sptr
	#func global GdiPlayJournal "GdiPlayJournal" sptr,sptr,sptr,sptr,sptr
	#func global GdiPlayPageEMF "GdiPlayPageEMF" sptr,sptr,sptr,sptr,sptr
	#func global GdiPlayPrivatePageEMF "GdiPlayPrivatePageEMF" sptr,sptr,sptr
	#func global GdiPlayScript "GdiPlayScript" sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global GdiResetDCEMF "GdiResetDCEMF" sptr,sptr
	#func global GdiSetBatchLimit "GdiSetBatchLimit" sptr
	#func global GdiStartDocEMF "GdiStartDocEMF" sptr,sptr
	#func global GdiStartPageEMF "GdiStartPageEMF" sptr
	#func global GetArcDirection "GetArcDirection" sptr
	#func global GetAspectRatioFilterEx "GetAspectRatioFilterEx" sptr,sptr
	#func global GetBitmapBits "GetBitmapBits" sptr,sptr,sptr
	#func global GetBitmapDimensionEx "GetBitmapDimensionEx" sptr,sptr
	#func global GetBkColor "GetBkColor" sptr
	#func global GetBkMode "GetBkMode" sptr
	#func global GetBoundsRect "GetBoundsRect" sptr,sptr,sptr
	#func global GetBrushOrgEx "GetBrushOrgEx" sptr,sptr
	#define global GetCharABCWidths GetCharABCWidthsA
	#func global GetCharABCWidthsA "GetCharABCWidthsA" sptr,sptr,sptr,sptr
	#define global GetCharABCWidthsFloat GetCharABCWidthsFloatA
	#func global GetCharABCWidthsFloatA "GetCharABCWidthsFloatA" sptr,sptr,sptr,sptr
	#func global GetCharABCWidthsFloatW "GetCharABCWidthsFloatW" wptr,wptr,wptr,wptr
	#func global GetCharABCWidthsI "GetCharABCWidthsI" sptr,sptr,sptr,sptr,sptr
	#func global GetCharABCWidthsW "GetCharABCWidthsW" wptr,wptr,wptr,wptr
	#define global GetCharWidth32 GetCharWidth32A
	#func global GetCharWidth32A "GetCharWidth32A" sptr,sptr,sptr,sptr
	#func global GetCharWidth32W "GetCharWidth32W" wptr,wptr,wptr,wptr
	#define global GetCharWidth GetCharWidthA
	#func global GetCharWidthA "GetCharWidthA" sptr,sptr,sptr,sptr
	#define global GetCharWidthFloat GetCharWidthFloatA
	#func global GetCharWidthFloatA "GetCharWidthFloatA" sptr,sptr,sptr,sptr
	#func global GetCharWidthFloatW "GetCharWidthFloatW" wptr,wptr,wptr,wptr
	#func global GetCharWidthI "GetCharWidthI" sptr,sptr,sptr,sptr,sptr
	#func global GetCharWidthW "GetCharWidthW" wptr,wptr,wptr,wptr
	#define global GetCharacterPlacement GetCharacterPlacementA
	#func global GetCharacterPlacementA "GetCharacterPlacementA" sptr,sptr,sptr,sptr,sptr,sptr
	#func global GetCharacterPlacementW "GetCharacterPlacementW" wptr,wptr,wptr,wptr,wptr,wptr
	#func global GetClipBox "GetClipBox" sptr,sptr
	#func global GetClipRgn "GetClipRgn" sptr,sptr
	#func global GetColorAdjustment "GetColorAdjustment" sptr,sptr
	#func global GetColorSpace "GetColorSpace" sptr
	#func global GetCurrentObject "GetCurrentObject" sptr,sptr
	#func global GetCurrentPositionEx "GetCurrentPositionEx" sptr,sptr
	#func global GetDCBrushColor "GetDCBrushColor" sptr
	#func global GetDCOrgEx "GetDCOrgEx" sptr,sptr
	#func global GetDCPenColor "GetDCPenColor" sptr
	#func global GetDIBColorTable "GetDIBColorTable" sptr,sptr,sptr,sptr
	#func global GetDIBits "GetDIBits" sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global GetDeviceCaps "GetDeviceCaps" sptr,sptr
	#func global GetDeviceGammaRamp "GetDeviceGammaRamp" sptr,sptr
	#define global GetEnhMetaFile GetEnhMetaFileA
	#func global GetEnhMetaFileA "GetEnhMetaFileA" sptr
	#func global GetEnhMetaFileBits "GetEnhMetaFileBits" sptr,sptr,sptr
	#define global GetEnhMetaFileDescription GetEnhMetaFileDescriptionA
	#func global GetEnhMetaFileDescriptionA "GetEnhMetaFileDescriptionA" sptr,sptr,sptr
	#func global GetEnhMetaFileDescriptionW "GetEnhMetaFileDescriptionW" wptr,wptr,wptr
	#func global GetEnhMetaFileHeader "GetEnhMetaFileHeader" sptr,sptr,sptr
	#func global GetEnhMetaFilePaletteEntries "GetEnhMetaFilePaletteEntries" sptr,sptr,sptr
	#func global GetEnhMetaFilePixelFormat "GetEnhMetaFilePixelFormat" sptr,sptr,sptr
	#func global GetEnhMetaFileW "GetEnhMetaFileW" wptr
	#func global GetFontAssocStatus "GetFontAssocStatus" sptr
	#func global GetFontData "GetFontData" sptr,sptr,sptr,sptr,sptr
	#func global GetFontLanguageInfo "GetFontLanguageInfo" sptr
	#func global GetFontResourceInfoW "GetFontResourceInfoW" wptr,wptr,wptr,wptr
	#func global GetFontUnicodeRanges "GetFontUnicodeRanges" sptr,sptr
	#define global GetGlyphIndices GetGlyphIndicesA
	#func global GetGlyphIndicesA "GetGlyphIndicesA" sptr,sptr,sptr,sptr,sptr
	#func global GetGlyphIndicesW "GetGlyphIndicesW" wptr,wptr,wptr,wptr,wptr
	#func global GetGlyphOutline "GetGlyphOutline" sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global GetGlyphOutlineA "GetGlyphOutlineA" sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global GetGlyphOutlineW "GetGlyphOutlineW" wptr,wptr,wptr,wptr,wptr,wptr,wptr
	#func global GetGraphicsMode "GetGraphicsMode" sptr
	#define global GetICMProfile GetICMProfileA
	#func global GetICMProfileA "GetICMProfileA" sptr,sptr,sptr
	#func global GetICMProfileW "GetICMProfileW" wptr,wptr,wptr
	#func global GetKerningPairs "GetKerningPairs" sptr,sptr,sptr
	#func global GetKerningPairsA "GetKerningPairsA" sptr,sptr,sptr
	#func global GetKerningPairsW "GetKerningPairsW" wptr,wptr,wptr
	#func global GetLayout "GetLayout" sptr
	#define global GetLogColorSpace GetLogColorSpaceA
	#func global GetLogColorSpaceA "GetLogColorSpaceA" sptr,sptr,sptr
	#func global GetLogColorSpaceW "GetLogColorSpaceW" wptr,wptr,wptr
	#func global GetMapMode "GetMapMode" sptr
	#define global GetMetaFile GetMetaFileA
	#func global GetMetaFileA "GetMetaFileA" sptr
	#func global GetMetaFileBitsEx "GetMetaFileBitsEx" sptr,sptr,sptr
	#func global GetMetaFileW "GetMetaFileW" wptr
	#func global GetMetaRgn "GetMetaRgn" sptr,sptr
	#func global GetMiterLimit "GetMiterLimit" sptr,sptr
	#func global GetNearestColor "GetNearestColor" sptr,sptr
	#func global GetNearestPaletteIndex "GetNearestPaletteIndex" sptr,sptr
	#define global GetObject GetObjectA
	#func global GetObjectA "GetObjectA" sptr,sptr,sptr
	#func global GetObjectType "GetObjectType" sptr
	#func global GetObjectW "GetObjectW" wptr,wptr,wptr
	#define global GetOutlineTextMetrics GetOutlineTextMetricsA
	#func global GetOutlineTextMetricsA "GetOutlineTextMetricsA" sptr,sptr,sptr
	#func global GetOutlineTextMetricsW "GetOutlineTextMetricsW" wptr,wptr,wptr
	#func global GetPaletteEntries "GetPaletteEntries" sptr,sptr,sptr,sptr
	#func global _GetPath "GetPath" sptr,sptr,sptr,sptr
	#func global GetPixel "GetPixel" sptr,sptr,sptr
	#func global GetPixelFormat "GetPixelFormat" sptr
	#func global GetPolyFillMode "GetPolyFillMode" sptr
	#func global GetROP2 "GetROP2" sptr
	#func global GetRandomRgn "GetRandomRgn" sptr,sptr,sptr
	#func global GetRasterizerCaps "GetRasterizerCaps" sptr,sptr
	#func global GetRegionData "GetRegionData" sptr,sptr,sptr
	#func global GetRelAbs "GetRelAbs" sptr,sptr
	#func global GetRgnBox "GetRgnBox" sptr,sptr
	#func global GetStockObject "GetStockObject" sptr
	#func global GetStretchBltMode "GetStretchBltMode" sptr
	#func global GetSystemPaletteEntries "GetSystemPaletteEntries" sptr,sptr,sptr,sptr
	#func global GetSystemPaletteUse "GetSystemPaletteUse" sptr
	#func global GetTextAlign "GetTextAlign" sptr
	#func global GetTextCharacterExtra "GetTextCharacterExtra" sptr
	#func global GetTextCharset "GetTextCharset" sptr
	#func global GetTextCharsetInfo "GetTextCharsetInfo" sptr,sptr,sptr
	#func global GetTextColor "GetTextColor" sptr
	#define global GetTextExtentExPoint GetTextExtentExPointA
	#func global GetTextExtentExPointA "GetTextExtentExPointA" sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global GetTextExtentExPointI "GetTextExtentExPointI" sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global GetTextExtentExPointW "GetTextExtentExPointW" wptr,wptr,wptr,wptr,wptr,wptr,wptr
	#define global GetTextExtentPoint32 GetTextExtentPoint32A
	#func global GetTextExtentPoint32A "GetTextExtentPoint32A" sptr,sptr,sptr,sptr
	#func global GetTextExtentPoint32W "GetTextExtentPoint32W" wptr,wptr,wptr,wptr
	#define global GetTextExtentPoint GetTextExtentPointA
	#func global GetTextExtentPointA "GetTextExtentPointA" sptr,sptr,sptr,sptr
	#func global GetTextExtentPointI "GetTextExtentPointI" sptr,sptr,sptr,sptr
	#func global GetTextExtentPointW "GetTextExtentPointW" wptr,wptr,wptr,wptr
	#define global GetTextFace GetTextFaceA
	#func global GetTextFaceA "GetTextFaceA" sptr,sptr,sptr
	#func global GetTextFaceW "GetTextFaceW" wptr,wptr,wptr
	#define global GetTextMetrics GetTextMetricsA
	#func global GetTextMetricsA "GetTextMetricsA" sptr,sptr
	#func global GetTextMetricsW "GetTextMetricsW" wptr,wptr
	#func global GetViewportExtEx "GetViewportExtEx" sptr,sptr
	#func global GetViewportOrgEx "GetViewportOrgEx" sptr,sptr
	#func global GetWinMetaFileBits "GetWinMetaFileBits" sptr,sptr,sptr,sptr,sptr
	#func global GetWindowExtEx "GetWindowExtEx" sptr,sptr
	#func global GetWindowOrgEx "GetWindowOrgEx" sptr,sptr
	#func global GetWorldTransform "GetWorldTransform" sptr,sptr
	#func global IntersectClipRect "IntersectClipRect" sptr,sptr,sptr,sptr,sptr
	#func global InvertRgn "InvertRgn" sptr,sptr
	#func global LPtoDP "LPtoDP" sptr,sptr,sptr
	#define global LineDD LineDDA
	#func global LineDDA "LineDDA" sptr,sptr,sptr,sptr,sptr,sptr
	#func global LineTo "LineTo" sptr,sptr,sptr
	#func global MaskBlt "MaskBlt" sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global ModifyWorldTransform "ModifyWorldTransform" sptr,sptr,sptr
	#func global MoveToEx "MoveToEx" sptr,sptr,sptr,sptr
	#func global OffsetClipRgn "OffsetClipRgn" sptr,sptr,sptr
	#func global OffsetRgn "OffsetRgn" sptr,sptr,sptr
	#func global OffsetViewportOrgEx "OffsetViewportOrgEx" sptr,sptr,sptr,sptr
	#func global OffsetWindowOrgEx "OffsetWindowOrgEx" sptr,sptr,sptr,sptr
	#func global PaintRgn "PaintRgn" sptr,sptr
	#func global PatBlt "PatBlt" sptr,sptr,sptr,sptr,sptr,sptr
	#func global PathToRegion "PathToRegion" sptr
	#func global Pie "Pie" sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global PlayEnhMetaFile "PlayEnhMetaFile" sptr,sptr,sptr
	#func global PlayEnhMetaFileRecord "PlayEnhMetaFileRecord" sptr,sptr,sptr,sptr
	#func global PlayMetaFile "PlayMetaFile" sptr,sptr
	#func global PlayMetaFileRecord "PlayMetaFileRecord" sptr,sptr,sptr,sptr
	#func global PlgBlt "PlgBlt" sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global PolyBezier "PolyBezier" sptr,sptr,sptr
	#func global PolyBezierTo "PolyBezierTo" sptr,sptr,sptr
	#func global PolyDraw "PolyDraw" sptr,sptr,sptr,sptr
	#func global PolyPolygon "PolyPolygon" sptr,sptr,sptr,sptr
	#func global PolyPolyline "PolyPolyline" sptr,sptr,sptr,sptr
	#define global PolyTextOut PolyTextOutA
	#func global PolyTextOutA "PolyTextOutA" sptr,sptr,sptr
	#func global PolyTextOutW "PolyTextOutW" wptr,wptr,wptr
	#func global Polygon "Polygon" sptr,sptr,sptr
	#func global Polyline "Polyline" sptr,sptr,sptr
	#func global PolylineTo "PolylineTo" sptr,sptr,sptr
	#func global PtInRegion "PtInRegion" sptr,sptr,sptr
	#func global PtVisible "PtVisible" sptr,sptr,sptr
	#func global RealizePalette "RealizePalette" sptr
	#func global RectInRegion "RectInRegion" sptr,sptr
	#func global RectVisible "RectVisible" sptr,sptr
	#func global Rectangle "Rectangle" sptr,sptr,sptr,sptr,sptr
	#func global RemoveFontMemResourceEx "RemoveFontMemResourceEx" sptr
	#define global RemoveFontResource RemoveFontResourceA
	#func global RemoveFontResourceA "RemoveFontResourceA" sptr
	#define global RemoveFontResourceEx RemoveFontResourceExA
	#func global RemoveFontResourceExA "RemoveFontResourceExA" sptr,sptr,sptr
	#func global RemoveFontResourceExW "RemoveFontResourceExW" wptr,wptr,wptr
	#func global RemoveFontResourceW "RemoveFontResourceW" wptr
	#define global ResetDC ResetDCA
	#func global ResetDCA "ResetDCA" sptr,sptr
	#func global ResetDCW "ResetDCW" wptr,wptr
	#func global ResizePalette "ResizePalette" sptr,sptr
	#func global RestoreDC "RestoreDC" sptr,sptr
	#func global RoundRect "RoundRect" sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global SaveDC "SaveDC" sptr
	#func global ScaleViewportExtEx "ScaleViewportExtEx" sptr,sptr,sptr,sptr,sptr,sptr
	#func global ScaleWindowExtEx "ScaleWindowExtEx" sptr,sptr,sptr,sptr,sptr,sptr
	#func global SelectBrushLocal "SelectBrushLocal" sptr,sptr
	#func global SelectClipPath "SelectClipPath" sptr,sptr
	#func global SelectClipRgn "SelectClipRgn" sptr,sptr
	#func global SelectFontLocal "SelectFontLocal" sptr,sptr
	#func global SelectObject "SelectObject" sptr,sptr
	#func global SelectPalette "SelectPalette" sptr,sptr,sptr
	#func global SetAbortProc "SetAbortProc" sptr,sptr
	#func global SetArcDirection "SetArcDirection" sptr,sptr
	#func global SetBitmapBits "SetBitmapBits" sptr,sptr,sptr
	#func global SetBitmapDimensionEx "SetBitmapDimensionEx" sptr,sptr,sptr,sptr
	#func global SetBkColor "SetBkColor" sptr,sptr
	#func global SetBkMode "SetBkMode" sptr,sptr
	#func global SetBoundsRect "SetBoundsRect" sptr,sptr,sptr
	#func global SetBrushOrgEx "SetBrushOrgEx" sptr,sptr,sptr,sptr
	#func global SetColorAdjustment "SetColorAdjustment" sptr,sptr
	#func global SetColorSpace "SetColorSpace" sptr,sptr
	#func global SetDCBrushColor "SetDCBrushColor" sptr,sptr
	#func global SetDCPenColor "SetDCPenColor" sptr,sptr
	#func global SetDIBColorTable "SetDIBColorTable" sptr,sptr,sptr,sptr
	#func global SetDIBits "SetDIBits" sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global SetDIBitsToDevice "SetDIBitsToDevice" sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global SetDeviceGammaRamp "SetDeviceGammaRamp" sptr,sptr
	#func global SetEnhMetaFileBits "SetEnhMetaFileBits" sptr,sptr
	#func global SetFontEnumeration "SetFontEnumeration" sptr
	#func global SetGraphicsMode "SetGraphicsMode" sptr,sptr
	#func global SetICMMode "SetICMMode" sptr,sptr
	#define global SetICMProfile SetICMProfileA
	#func global SetICMProfileA "SetICMProfileA" sptr,sptr
	#func global SetICMProfileW "SetICMProfileW" wptr,wptr
	#func global SetLayout "SetLayout" sptr,sptr
	#func global SetMagicColors "SetMagicColors" sptr,sptr,sptr
	#func global SetMapMode "SetMapMode" sptr,sptr
	#func global SetMapperFlags "SetMapperFlags" sptr,sptr
	#func global SetMetaFileBitsEx "SetMetaFileBitsEx" sptr,sptr
	#func global SetMetaRgn "SetMetaRgn" sptr
	#func global SetMiterLimit "SetMiterLimit" sptr,sptr,sptr
	#func global SetPaletteEntries "SetPaletteEntries" sptr,sptr,sptr,sptr
	#func global SetPixel "SetPixel" sptr,sptr,sptr,sptr
	#func global SetPixelFormat "SetPixelFormat" sptr,sptr,sptr
	#func global SetPixelV "SetPixelV" sptr,sptr,sptr,sptr
	#func global SetPolyFillMode "SetPolyFillMode" sptr,sptr
	#func global SetROP2 "SetROP2" sptr,sptr
	#func global SetRectRgn "SetRectRgn" sptr,sptr,sptr,sptr,sptr
	#func global SetRelAbs "SetRelAbs" sptr,sptr
	#func global SetStretchBltMode "SetStretchBltMode" sptr,sptr
	#func global SetSystemPaletteUse "SetSystemPaletteUse" sptr,sptr
	#func global SetTextAlign "SetTextAlign" sptr,sptr
	#func global SetTextCharacterExtra "SetTextCharacterExtra" sptr,sptr
	#func global SetTextColor "SetTextColor" sptr,sptr
	#func global SetTextJustification "SetTextJustification" sptr,sptr,sptr
	#func global SetViewportExtEx "SetViewportExtEx" sptr,sptr,sptr,sptr
	#func global SetViewportOrgEx "SetViewportOrgEx" sptr,sptr,sptr,sptr
	#func global SetWinMetaFileBits "SetWinMetaFileBits" sptr,sptr,sptr,sptr
	#func global SetWindowExtEx "SetWindowExtEx" sptr,sptr,sptr,sptr
	#func global SetWindowOrgEx "SetWindowOrgEx" sptr,sptr,sptr,sptr
	#func global SetWorldTransform "SetWorldTransform" sptr,sptr
	#define global StartDoc StartDocA
	#func global StartDocA "StartDocA" sptr,sptr
	#func global StartDocW "StartDocW" wptr,wptr
	#func global StartFormPage "StartFormPage" sptr
	#func global StartPage "StartPage" sptr
	#func global StretchBlt "StretchBlt" sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global StretchDIBits "StretchDIBits" sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global StrokeAndFillPath "StrokeAndFillPath" sptr
	#func global StrokePath "StrokePath" sptr
	#func global SwapBuffers "SwapBuffers" sptr
	#define global TextOut TextOutA
	#func global TextOutA "TextOutA" sptr,sptr,sptr,sptr,sptr
	#func global TextOutW "TextOutW" wptr,wptr,wptr,wptr,wptr
	#func global TranslateCharsetInfo "TranslateCharsetInfo" sptr,sptr,sptr
	#func global UnrealizeObject "UnrealizeObject" sptr
	#func global UpdateColors "UpdateColors" sptr
	#define global UpdateICMRegKey UpdateICMRegKeyA
	#func global UpdateICMRegKeyA "UpdateICMRegKeyA" sptr,sptr,sptr,sptr
	#func global UpdateICMRegKeyW "UpdateICMRegKeyW" wptr,wptr,wptr,wptr
	#func global WidenPath "WidenPath" sptr
	#func global gdiPlaySpoolStream "gdiPlaySpoolStream" sptr,sptr,sptr,sptr,sptr,sptr
#endif
#endif

;	hgimg.dll header
;	(for HSP3.0 or later)
;

#uselib "hgimg.dll"
#func _hgini hgini 2
#func hgsrc hgsrc 2
#func hgdst hgdst 2
#func hgdraw hgdraw 0
#func hgsync hgsync 2
#func hgbye hgbye $100
#func getsync getsync 1
#func sync sync 0
#func getdebug getdebug 1
#func hgsetreq hgsetreq 0
#func hggetreq hggetreq 1

#func setborder setborder 0
#func clscolor clscolor 0
#func clstex clstex 0
#func setfont setfont 0
#func fprt fprt 6

#func objset1 objset1 0
#func objadd1 objadd1 0
#func objmov1 objmov1 0
#func objsetf1 objsetf1 int,float,int,int
#func objaddf1 objaddf1 int,float,int,int
#func objmovf1 objmovf1 int,int,float,int
#func objcheck objcheck 1
#func objmovmode objmovmode 0
#func objmovopt objmovopt 0

#func objset2 objset2 0
#func objadd2 objadd2 0
#func objmov2 objmov2 0
#func objsetf2 objsetf2 int,float,float,int
#func objaddf2 objaddf2 int,float,float,int
#func objmovf2 objmovf2 int,int,float,float

#func objset3 objset3 0
#func objadd3 objadd3 0
#func objmov3 objmov3 0
#func objsetf3 objsetf3 float,float,float,int
#func objaddf3 objaddf3 float,float,float,int
#func objmovf3 objmovf3 int,float,float,float

#func selmoc selmoc 0
#func selpos selpos 0
#func selang selang 0
#func selscale selscale 0
#func seldir seldir 0

#func objgetfv objgetfv 1
#func objgetv objgetv 1
#func objsetfv objsetfv 1
#func objsetv objsetv 1
#func objaddfv objaddfv 1
#func objmovfv objmovfv 1
#func objgetstr objgetstr 1
#func objact objact 0

#func fvset fvset var,float,float,float
#func fvseti fvseti 1
#func fvadd fvadd var,float,float,float
#func fvsub fvsub var,float,float,float
#func fvmul fvmul var,float,float,float
#func fvdiv fvdiv var,float,float,float
#func fvdir fvdir var,float,float,float
#func fvget fvget var,float,float,float
#func fvmin fvmin var,float,float,float
#func fvmax fvmax var,float,float,float
#func fvouter fvouter var,float,float,float
#func fvinner fvinner var,float,float,float
#func fvunit fvunit var,float,float,float
#func fvface fvface var,float,float,float
#func fv2str fv2str $11
#func f2str f2str $11
#func str2f str2f 5
#func str2fv str2fv 5
#func f2i f2i 1
#func fsin fsin var,float,int,int
#func fcos fcos var,float,int,int
#func fsqr fsqr var,float,int,int
#func fadd fadd var,float,int,int
#func fsub fsub var,float,int,int
#func fmul fmul var,float,int,int
#func fdiv fdiv var,float,int,int
#func fcmp fcmp var,float,float,int
#func froti froti 1

#func setuv setuv 0
#func setsizef setsizef float,float,int,int
#func setbg setbg 0
#func getbg getbg $83
#func setmap setmap 0
#func addbox addbox 1
#func addplate addplate 1
#func addspr addspr 1
#func addbg addbg 1
#func regobj regobj 1
#func delobj delobj 0
#func setobjm setobjm 0
#func uvanim uvanim 0
#func setmode setmode 0
#func settimer settimer 0
#func setobjmode setobjmode 0
#func setcoli setcoli 0
#func getcoli getcoli var,int,float,int
#func findobj findobj 0
#func nextobj nextobj 1

#func evmodel evmodel 0
#func setmtex setmtex 0
#func getmtex getmtex 1

#func cammode cammode 0
#func selcam selcam 0
#func selcpos selcpos 0
#func selcang selcang 0
#func selcint selcint 0

#func copybuf copybuf 2

#func mxsend mxsend 1
#func mxconv mxconv 1
#func mxaconv mxaconv 1
#func mxgetpoly mxgetpoly 1
#func mxgetname mxgetname 1
#func settex settex 2
#func gettex gettex 1

#func addmesh addmesh 1

;
;	new function on 2.6
;
#func modelmovef modelmovef int,float,float,float
#func modelshade modelshade 0
#func dxfconv dxfconv 1
#func dxfgetpoly dxfgetpoly 1
#func objscanf2 objscanf2 var,float,float,int
#func objscan2 objscan2 1
#func mxsave mxsave 6
#func setmchild setmchild 0
#func setmsibling setmsibling 0
#func getmchild getmchild 1
#func getmsibling getmsibling 1
#func setmfv setmfv 1
#func getmfv getmfv 1
#func getmodel getmodel 1
#func putmodel putmodel 1
#func dupnode dupnode $83
#func gettree gettree 1
#func hgreset hgreset 2
#func mxtex mxtex 1
#func setmuv setmuv 1
#func getmuv getmuv 1
#func nodemax nodemax 1
#func getmpoly getmpoly 1
#func setmpoly setmpoly 1

#func objset1r objset1r 0
#func objmov1r objmov1r 0
#func objset2r objset2r 0
#func objmov2r objmov2r 0
#func objset3r objset3r 0
#func objmov3r objmov3r 0

#func sellight sellight 0
#func sellpos sellpos 0
#func sellang sellang 0
#func sellcolor sellcolor 0
#func selefx selefx 0
#func falpha falpha 0
#func setcolor setcolor 0
#func clsblur clsblur 0

;
;	new function on 2.61
;
#func modelscalef modelscalef int,float,float,float

;
;	camera mode
;
#define CAM_MODE_NORMAL 0
#define CAM_MODE_LOOKAT 1

;
;	object mode
;
#define OBJ_HIDE 1
#define OBJ_TREE 2
#define OBJ_XFRONT 4
#define OBJ_UVANIM 8
#define OBJ_UVANIM_1SHOT 16
#define OBJ_MOVE 32
#define OBJ_FLIP 64
#define OBJ_BORDER 0x80
#define OBJ_2D 0x100
#define OBJ_TIMER 0x200
#define OBJ_WIPEBOM 0x400
#define OBJ_NOSORT 0x800
#define OBJ_GRAVITY 0x1000
#define OBJ_SKY 0x2000
#define OBJ_GROUND 0x4000

#define OBJMOV_STATIC 1
#define OBJMOV_LINEAR 2
#define OBJMOV_SPLINE 16

#define OBJMOV_OPT_AUTOKEY 0x400
#define OBJMOV_OPT_PARENT 0x2000
#define OBJMOV_OPT_REVERSE 0x4000
#define OBJMOV_OPT_ETERNAL 0x8000

;
;	model create mode
;
#define MODEL_TEXRGB0 1
#define MODEL_SHADE 2

;
;	model shade mode
;
#define SHADE_NONE 0
#define SHADE_FLAT 1
#define SHADE_GOURAUD 2

;
;	node mode
;
#define NODE_ATTR_COLKEY 0x8000

;
;	system request
;
#define SYSREQ_NONE 0
#define SYSREQ_MAXMODEL 1
#define SYSREQ_MAXOBJ 2
#define SYSREQ_MAXTEX 3
#define SYSREQ_MAXMOC 4
#define SYSREQ_DXMODE 5
#define SYSREQ_DXHWND 6
#define SYSREQ_DXWIDTH 7
#define SYSREQ_DXHEIGHT 8
#define SYSREQ_COLORKEY 9
#define SYSREQ_PKTSIZE 12


#module "HGIMG"

#deffunc hgini int,int

	;	initalize
	;
	mref p1,0
	mref p2,1
	mref bm,67
	hgmode = bm.3
	_hgini@ hgmode,p1,p2
	return


#deffunc texload str fn

	;	texture reg
	;
	buffer 3,100,100,hgmode
	picload fn
	settex@ ginfo(12),ginfo(13)
	if stat : dialog "Texture Error("+stat+")" : return
	return


#deffunc texloadbg str fn

	;	texture reg
	;
	buffer 3,100,100,hgmode
	picload fn
	clstex@
	settex@ ginfo(12),ginfo(13),1
	if stat : dialog "Texture Error("+stat+")" : return
	return


#deffunc mxload str fn,int

	;	model load
	;
	mref p2,1
	mref _mdid,64
	fname = fn+".mx"
	exist fname
	if strsize<0 : dialog "file error ["+fname+"]" : end
	sdim buf,strsize
	s1=""
	bload fname,buf
	mxsend@ buf,p2
	buffer 3,100,100,hgmode
	repeat
		mxgetname@ s1,cnt : if s1="" : break
		exist s1+".bmp"
		if strsize<0 : dialog "No file ["+s1+"]" : end
		texload s1+".bmp"
	loop
	mxconv@ mdid@		; コンバート開始
	mxgetpoly@ polys@	; ポリゴン数を得る
	sdim buf,64
	_mdid = mdid@
	return


#deffunc maload str fn
	;	model animation load
	;
	fname = fn+".ma"
	exist fname
	if strsize<0 : dialog "file error ["+fname+"]" : end
	sdim buf,strsize
	bload fname,buf
	mxaconv@ buf
	sdim buf,64
	return


#deffunc dxfload str fn

	;	DXF model load
	;
	mref _mdid,64
	fname = fn+".dxf"
	exist fname
	if strsize<0 : dialog "file error ["+fname+"]" : end
	sdim buf,strsize
	s1=""
	bload fname,buf
	dxfconv@ buf
	mdid@ = stat
	dxfgetpoly@ polys@	; ポリゴン数を得る
	_mdid = mdid@
	return



#global

;
; HGIMG3.21 define and macros
;
#ifndef __hgimg3__
#define __hgimg3__
#runtime "hsp3hg"

#const global FLAG_NONE 0
#const global FLAG_ENTRY 1
#const global FLAG_VISIBLE 2
#const global FLAG_MOVING 4

#const global OBJ_HIDE 1
#const global OBJ_TREE 2
#const global OBJ_XFRONT 4
#const global OBJ_MOVE 32
#const global OBJ_FLIP 64
#const global OBJ_BORDER 0x80
#const global OBJ_2D 0x100
#const global OBJ_SORT 0x400
#const global OBJ_STATIC 0x800
#const global OBJ_GRAVITY 0x1000
#const global OBJ_LATE 0x4000
#const global OBJ_FIRST 0x8000

#const global OBJ_STAND 0x10000
#const global OBJ_GROUND 0x20000
#const global OBJ_LAND 0x40000
#const global OBJ_LOOKAT 0x80000

#const global OBJ_BOUND 0x100000
#const global OBJ_ALIEN 0x200000
#const global OBJ_WALKCLIP 0x400000
#const global OBJ_EMITTER 0x800000

#const global SHADE_LINES	0x80
#const global SHADE_NOLIGHT	0x100
#const global SHADE_TOON	0x200

#enum global PRMSET_MODE = 0
#enum global PRMSET_FLAG
#enum global PRMSET_SHADE
#enum global PRMSET_TIMER
#enum global PRMSET_MYGROUP
#enum global PRMSET_COLGROUP

#const global HGOBJ_CAMERA 0
#const global HGOBJ_LIGHT 1

#const global CAM_MODE_NORMAL 0
#const global CAM_MODE_LOOKAT 1
#const global CAM_MODE_LOOKOBJ 2
#const global CAM_MODE_AUTOMOVE 3

#const global HGMODEL_ROTORDER_ZYX 0
#const global HGMODEL_ROTORDER_XYZ 1
#const global HGMODEL_ROTORDER_YXZ 2

#const global EPRIM_CIRCLE 0
#const global EPRIM_CIRCLE2 1
#const global EPRIM_SQUARE 2
#const global EPRIM_FAN 3
#const global EPRIM_LINE 4

#const global MOVEMODE_LINEAR 0
#const global MOVEMODE_SPLINE 1
#const global MOVEMODE_LINEAR_REL 2
#const global MOVEMODE_SPLINE_REL 3
#const global MOVEMODE_FROMWORK 16

;
;	system request
;
#define global SYSREQ_NONE 0
#define global SYSREQ_MAXMODEL 1
#define global SYSREQ_MAXOBJ 2
#define global SYSREQ_MAXTEX 3
#define global SYSREQ_MAXMOC 4
#define global SYSREQ_DXMODE 5
#define global SYSREQ_DXHWND 6
#define global SYSREQ_DXWIDTH 7
#define global SYSREQ_DXHEIGHT 8
#define global SYSREQ_COLORKEY 9
#define global SYSREQ_RESULT 10
#define global SYSREQ_RESVMODE 11
#define global SYSREQ_PKTSIZE 12
#define global SYSREQ_MAXEVENT 13
#define global SYSREQ_PTRD3D 14
#define global SYSREQ_PTRD3DDEV 15
#define global SYSREQ_MDLANIM 16
#define global SYSREQ_2DFILTER 18
#define global SYSREQ_3DFILTER 19
#define global SYSREQ_OLDCAM 20
#define global SYSREQ_QUATALG 21
#define global SYSREQ_DXVSYNC 22
#define global SYSREQ_DEFTIMER 23
#define global SYSREQ_NOMIPMAP 24
#define global SYSREQ_DEVLOST 25
#define global SYSREQ_MAXEMITTER 26
#define global SYSREQ_THROUGHFLAG 27
#define global SYSREQ_OBAQMATBUF 28
#define global SYSREQ_2DFILTER2 29
#define global SYSREQ_FPUPRESERVE 30
#define global SYSREQ_DSSOFTWARE 31
#define global SYSREQ_DSGLOBAL 32
#define global SYSREQ_DSBUFSEC 33
#define global SYSREQ_DEBUG $10000

#define global event_delobj(%1) event_prmset %1,PRMSET_FLAG,0

#regcmd 18
#cmd _hgini $00
#cmd hgreset $01
#cmd hgbye $02
#cmd hgsetreq $03
#cmd hggetreq $04
#cmd hgdraw $05
#cmd hgsync $06
#cmd hgrect $07
#cmd hgrotate $08
#cmd settex $0a
#cmd setfont $0b
#cmd falpha $0c
#cmd fprt $0d
#cmd setsizef $0e
#cmd setbg $0f
#cmd clscolor $10
#cmd clsblur $11
#cmd clstex $12
#cmd texmake $13
#cmd texcls $14
#cmd texmes $15
#cmd texdel $16
#cmd setuv $17
#cmd addspr $18
#cmd regobj $19
#cmd delobj $1a
#cmd addplate $1b
#cmd addsplate $1c
#cmd setcolor $1d
#cmd addbox $1e
#cmd addmesh $1f

#cmd setpos $20
#cmd setang $21
#cmd setscale $22
#cmd setdir $23
#cmd setefx $24
#cmd setwork $25

#cmd addpos $28
#cmd addang $29
#cmd addscale $2a
#cmd adddir $2b
#cmd addefx $2c
#cmd addwork $2d

#cmd getpos $30
#cmd getang $31
#cmd getscale $32
#cmd getdir $33
#cmd getefx $34
#cmd getwork $35

#cmd getposi $38
#cmd getangi $39
#cmd getscalei $3a
#cmd getdiri $3b
#cmd getefxi $3c
#cmd getworki $3d

#cmd selpos $40
#cmd selang $41
#cmd selscale $42
#cmd seldir $43
#cmd selefx $44
#cmd selwork $45

#define selcpos selpos HGOBJ_CAMERA
#define selcang selang HGOBJ_CAMERA
#define selcint seldir HGOBJ_CAMERA

#define sellpos selpos HGOBJ_LIGHT
#define sellang selang HGOBJ_LIGHT
#define sellcolor selscale HGOBJ_LIGHT
#define sellambient seldir HGOBJ_LIGHT

#cmd objset1 $48
#cmd objsetf1 $48
#cmd objset1r $49
#cmd objset2 $4a
#cmd objsetf2 $4a
#cmd objset2r $4b
#cmd objset3 $4c
#cmd objsetf3 $4c
#cmd objset3r $4d
#cmd objadd1 $4e
#cmd objaddf1 $4e
#cmd objadd1r $4f
#cmd objadd2 $50
#cmd objaddf2 $50
#cmd objadd2r $51
#cmd objadd3 $52
#cmd objaddf3 $52
#cmd objadd3r $53

#cmd adddxf $60
#cmd modelscale $61
#cmd texload2 $62

#cmd event_wait $63
#cmd event_jump $64
#cmd event_prmset $65
#cmd event_prmon $66
#cmd event_prmoff $67
#cmd event_pos $68
#cmd event_ang $69
#cmd event_scale $6a
#cmd event_dir $6b
#cmd event_efx $6c
#cmd event_work $6d
#cmd event_angr $6f
#cmd event_addpos $70
#cmd event_addang $71
#cmd event_addscale $72
#cmd event_adddir $73
#cmd event_addefx $74
#cmd event_addwork $75
#cmd event_addtarget $76
#cmd event_addangr $77
#cmd event_setpos $78
#cmd event_setang $79
#cmd event_setscale $7a
#cmd event_setdir $7b
#cmd event_setefx $7c
#cmd event_setwork $7d
#cmd event_setangr $7f

#cmd setevent $80
#cmd delevent $81
#cmd cammode $82
#cmd addxfile $83
#cmd getmdiffuse $84
#cmd settoon $85
#cmd setmonotoon $86
#cmd settoonedge $87
#cmd event_uv $88
#cmd newevent $89
#cmd setangr $8a
#cmd addangr $8b
#cmd getangr $8c
#cmd setobjmode $8d
#cmd setobjmodel $8e
#cmd setcoli $8f
#cmd enumobj $90
#cmd getenum $91
#cmd bindxfile $92
#cmd addtexanim $93
#cmd settexanimfile $94
#cmd settexanimmode $95
#cmd hgcnvaxis $96


#cmd event_wpos $98
#cmd event_wang $99
#cmd event_wscale $9a
#cmd event_wdir $9b
#cmd event_wefx $9c
#cmd event_wwait $9d


#cmd fvset $9e
#cmd fvseti $9e
#cmd fvadd $9f
#cmd fvsub $a0
#cmd fvmul $a1
#cmd fvdiv $a2
#cmd fvdir $a3
#cmd fvmin $a4
#cmd fvmax $a5
#cmd fvunit $a6
#cmd fvouter $a7
#cmd fvinner $a8
#cmd fvface $a9

#define fsin(%1,%2) %1=sin(%2)
#define fcos(%1,%2) %1=cos(%2)
#define fsqr(%1,%2) %1=sqrt(%2)
#define froti(%1,%2) %1=%2/6433.98175455188992

#cmd fv2str $aa
#cmd f2str $ab
#cmd str2fv $ac
#cmd str2f $ad

#cmd objgetstr $ae
#cmd objgetfv $af
#cmd objgetv $b0
#cmd objsetfv $b1
#cmd objsetv $b2
#cmd objaddfv $b3

#cmd selmoc $b4
#cmd setborder $b5
#cmd findobj $b6
#cmd nextobj $b7
#cmd getcoli $b8
#cmd addxanim $b9
#cmd objact $ba
#cmd objspeed $bb
#cmd getanim $bc
#cmd modelspeed $bd
#cmd hgline $be
#cmd hgcapture $bf
#cmd reglight $c0
#cmd objlight $c1
#cmd getxinfo $c2
#cmd setxinfo $c3
#cmd getobjcoli $c4
#cmd getobjmodel $c5
#cmd setcolvec $c6
#cmd setcolscale $c6
#cmd modelcols $c7
#cmd objexist $c8
#cmd modelshade $c9
#cmd modelorder $ca
#cmd addeprim $cb
#cmd seteprim $cc
#cmd objproj $cd
#cmd event_regobj $ce
#cmd objchild $cf
#cmd event_eprim $d0
#cmd event_aim $d1
#cmd objaim $d2
#cmd hgprm $d3
#cmd event_objact $d4
#cmd texopt $d5
#cmd hgview $d6
#cmd hggettime $d7
#cmd hgsettime $d8
#cmd meshmap $d9
#cmd getvarmap $da
#cmd objwalk $db
#cmd objfloor $dc
#cmd getcolvec $dd
#cmd getnearobj $de
#cmd delmodel $df

#cmd dmmini $e0
#cmd dmmbye $e1
#cmd dmmreset $e2
#cmd dmmdel $e3
#cmd dmmvol $e4
#cmd dmmpan $e5
#cmd dmmloop $e6
#cmd dmmload $e7
#cmd dmmplay $e8
#cmd dmmstop $e9
#cmd dmmstat $ea

#cmd fire_init $100
#cmd fire_exec $101
#cmd fire_set $102
#cmd wave_init $103
#cmd wave_apply $104
#cmd wave_set $105
#cmd mosaic_draw $106
#cmd mosaic_set $107

#cmd hgobaq $108
#cmd hgceldiv $109
#const global mat_wire3 5
#const global mat_spr3 6

#define global EMITMODE_NONE	0
#define global EMITMODE_STATIC	1
#define global EMITMODE_CIRCLE	2
#define global EMITMODE_RANDOM	3
#define global EMITMODE_LOOKAT	16

#cmd newemit $10a
#cmd delemit $10b
#cmd emit_size $10c
#cmd emit_speed $10d
#cmd emit_angmul $10e
#cmd emit_angopt $10f
#cmd emit_model $110
#cmd emit_event $111
#cmd emit_num $112
#cmd emit_group $113
#cmd hgemit $114
#cmd setobjemit $115
#cmd groupmod $116
#cmd addobaq3d $117
#cmd obaqmat $118
#cmd hgqview $119
#cmd hgqcnvaxis $11a
#cmd addline $11b
#cmd hgcnvline $11c

#module "HGIMG"
#define global WORKSCR 3

#deffunc hgini int p1,int p2

	;	initalize
	;
	mref bm,67
	hgmode = bm.3
	_hgini p1,p2
	;
	hgsel=ginfo(3)
	buffer WORKSCR,128,128,hgmode
	gsel hgsel
	return


#deffunc texload str fn

	;	texture reg
	;
	gsel WORKSCR
	picload fn
	winx=ginfo(12):winy=ginfo(13)

	px=1:repeat 12
	if px>=winx : break
	px=px<<1:loop
	py=1:repeat 12
	if py>=winy : break
	py=py<<1:loop
	if ( px!=winx )|( py!=winy ) {	; 2^nサイズでない時は補正
		buffer WORKSCR,px,py,hgmode
		cls 4
		picload fn,1
	}
	settex winx,winy
	if stat<0 : dialog "Texture Error("+stat+")" { gsel hgsel : return }
	i=stat
	await 0
	gsel hgsel
	return i


#deffunc loadtoon int p1,str fn

	;	Apply Toon Texture
	;
	gsel WORKSCR
	if fn!="" : picload fn
	winx=ginfo(12):winy=ginfo(13)
	settex winx,winy
	if stat<0 : dialog "Texture Error("+stat+")" : gsel hgsel : return
	texid=stat

	dim coltable,256
	maxcolor=(winy/8)
	repeat maxcolor
		y=cnt*8:pget 0,y
		coltable.cnt=(ginfo(16)<<16)|(ginfo(17)<<8)|ginfo(18)
		;dialog strf("#%x",coltable.cnt)
	loop
	settoon p1,coltable,maxcolor,texid
	gsel hgsel
	return


#deffunc preloadtoon str fn

	;	Apply Toon Texture
	;
	gsel WORKSCR
	picload fn
	winx=ginfo(12):winy=ginfo(13)
	settex winx,winy
	if stat<0 : dialog "Texture Error("+stat+")" : gsel hgsel : return
	texid=stat
	dim coltable,256
	maxcolor=(winy/8)
	repeat maxcolor
		y=cnt*8:pget 0,y
		coltable.cnt=(ginfo(16)<<16)|(ginfo(17)<<8)|ginfo(18)
		;dialog strf("#%x",coltable.cnt)
	loop
	gsel hgsel
	return


#deffunc presettoon int p1, int p2
	setmonotoon p1, $ffffff, p2, texid
	return


#deffunc maketoon int p1,int p2

	;	Make a Toon Texture
	;
	dim coltable,1024
	getmdiffuse coltable, p1
	maxcolor=stat
	i=maxcolor*8
	py=1:repeat 12
	if py>=i : break
	py=py<<1:loop
	if py<128 : py=128

	buffer WORKSCR,128,py,0
	;screen 2,128,py,0
	cls 1

	i=0:x1=40:x2=128
	repeat maxcolor
		y=i*8:col=coltable.cnt
		repeat cnt
		if col=coltable.cnt : y=-1
		loop
		if y>=0 {
			;cstr=0:cstr=col:str cstr,8+16
			;wbuf+="#"+i+":"+cstr+"\n"
			c1=col&255:c2=(col>>8)&255:c3=(col>>16)&255
			color c3>>1,c2>>1,c1>>1
			boxf 0,y+4,x1,y+8
			color c3,c2,c1
			boxf x1,y+4,x2,y+8
			boxf 0,y,x2,y+3
			i++
		}
	loop
	;bsave "a.txt",wbuf

	if p2&1 {
		settex 128,py
		if stat<0 : dialog "Texture Error("+stat+")" : gsel hgsel : return
		texid=stat
		maxcolor=(py/8)
		repeat maxcolor
			y=cnt*8:pget 0,y
			coltable.cnt=(ginfo(16)<<16)|(ginfo(17)<<8)|ginfo(18)
		loop
		settoon p1,coltable,maxcolor,texid
	}
	if p2&2 {
		bmpsave "toon.bmp"
	}

	gsel hgsel
	return


#deffunc dxfload str fn,int p1

	;	DXF model load
	;
	exist fn
	if strsize<0 : dialog "No file:"+fname : end
	sdim dxfbuf,strsize
	bload fn,dxfbuf
	_dxfcolor = p1
	if _dxfcolor = 0 {
		_dxfcolor = -1
	}
	adddxf _dxfmdl, dxfbuf, _dxfcolor
	sdim dxfbuf,64
	return _dxfmdl


#global


#endif

;
; HGIMG4 Default define and macros
;
#ifndef __hgimg4__
#define __hgimg4__
#define __hsp3dish__
#define global _HSP3DISH
#define global _HGIMG4

#runtime "hsp3gp"

#const global FILTER_NONE 0
#const global FILTER_LINEAR 1
#const global FILTER_LINEAR2 2

#const global CLSMODE_NONE 0
#const global CLSMODE_SOLID 1
#const global CLSMODE_TEXTURE 2
#const global CLSMODE_BLUR 3

#const global OBJ_HIDE 1
#const global OBJ_CLIP 2
#const global OBJ_XFRONT 4
#const global OBJ_WIRE 8
#const global OBJ_MOVE 32
#const global OBJ_FLIP 64
#const global OBJ_BORDER 0x80
#const global OBJ_2D 0x100
#const global OBJ_TIMER 0x200
#const global OBJ_SORT 0x400
#const global OBJ_LATE 0x4000

#const global GPOBJ_SCENE  0x100001
#const global GPOBJ_CAMERA 0x100002
#const global GPOBJ_LIGHT  0x100003

#const global GPOBJ_MATOPT_NOLIGHT (1)
#const global GPOBJ_MATOPT_NOMIPMAP (2)
#const global GPOBJ_MATOPT_NOCULL (4)
#const global GPOBJ_MATOPT_NOZTEST (8)
#const global GPOBJ_MATOPT_NOZWRITE (16)
#const global GPOBJ_MATOPT_BLENDADD (32)

#enum global PRMSET_FLAG = 0
#enum global PRMSET_MODE
#enum global PRMSET_ID
#enum global PRMSET_TIMER
#enum global PRMSET_ALPHA
#enum global PRMSET_MYGROUP
#enum global PRMSET_COLGROUP
#enum global PRMSET_SHAPE
#enum global PRMSET_USEGPMAT
#enum global PRMSET_USEGPPHY
#enum global PRMSET_COLILOG
#enum global PRMSET_SPRID = 0x100
#enum global PRMSET_SPRCELID
#enum global PRMSET_SPRGMODE

#define GPOBJ_LGTOPT_NORMAL (0)
#define GPOBJ_LGTOPT_POINT (1)
#define GPOBJ_LGTOPT_SPOT (2)

#enum global GPPSET_ENABLE = 0
#enum global GPPSET_FRICTION
#enum global GPPSET_DAMPING
#enum global GPPSET_KINEMATIC
#enum global GPPSET_ANISOTROPIC_FRICTION
#enum global GPPSET_GRAVITY
#enum global GPPSET_LINEAR_FACTOR
#enum global GPPSET_ANGULAR_FACTOR
#enum global GPPSET_ANGULAR_VELOCITY
#enum global GPPSET_LINEAR_VELOCITY

#const global GPPAPPLY_FORCE (0)
#const global GPPAPPLY_IMPULSE (1)
#const global GPPAPPLY_TORQUE (2)
#const global GPPAPPLY_TORQUE_IMPULSE (3)

#const global GPDRAW_OPT_OBJUPDATE (1)
#const global GPDRAW_OPT_DRAWSCENE (2)
#const global GPDRAW_OPT_DRAW2D (4)
#const global GPDRAW_OPT_DRAWSCENE_LATE (8)
#const global GPDRAW_OPT_DRAW2D_LATE (16)


;
;	system request
;
#enum global SYSREQ_MAXMODEL=1
#enum global SYSREQ_MAXOBJ
#enum global SYSREQ_MAXTEX
#enum global SYSREQ_MAXMOC
#enum global SYSREQ_DXMODE
#enum global SYSREQ_DXHWND
#enum global SYSREQ_DXWIDTH
#enum global SYSREQ_DXHEIGHT
#enum global SYSREQ_COLORKEY
#enum global SYSREQ_RESULT
#enum global SYSREQ_RESVMODE
#enum global SYSREQ_PKTSIZE
#enum global SYSREQ_MAXEVENT
#enum global SYSREQ_PTRD3D
#enum global SYSREQ_PTRD3DDEV
#enum global SYSREQ_MDLANIM
#enum global SYSREQ_CALCNORMAL
#enum global SYSREQ_2DFILTER
#enum global SYSREQ_3DFILTER
#enum global SYSREQ_OLDCAM
#enum global SYSREQ_QUATALG
#enum global SYSREQ_DXVSYNC
#enum global SYSREQ_DEFTIMER
#enum global SYSREQ_NOMIPMAP
#enum global SYSREQ_DEVLOST
#enum global SYSREQ_MAXEMITTER
#enum global SYSREQ_THROUGHFLAG
#enum global SYSREQ_OBAQMATBUF
#enum global SYSREQ_2DFILTER2
#enum global SYSREQ_FPUPRESERVE
#enum global SYSREQ_CLSMODE
#enum global SYSREQ_CLSCOLOR
#enum global SYSREQ_CLSTEX
#enum global SYSREQ_TIMER
#enum global SYSREQ_PLATFORM
#enum global SYSREQ_FPS
#enum global SYSREQ_VSYNC
#enum global SYSREQ_MAXMATERIAL

#define global ginfo_accx ginfo(0x100)
#define global ginfo_accy ginfo(0x101)
#define global ginfo_accz ginfo(0x102)

#define global SYSREQ_DEBUG $10000

#regcmd 9
#cmd gfilter $3f
#cmd setreq $40
#cmd getreq $41
#cmd mmvol $42
#cmd mmpan $43
#cmd mmstat $44
#cmd mtlist $45
#cmd mtinfo $46
#cmd devinfo $47
#cmd devinfoi $48
#cmd devprm $49
#cmd devcontrol $4a
#cmd setcls $4b
#cmd celputm $4c

#cmd gpreset $60
#cmd gpdraw $61
#cmd gpusescene $62
#cmd gpsetprm $63
#cmd gpgetprm $64
#cmd gppostefx $65
#cmd gpuselight $66
#cmd gpusecamera $67
#cmd gpmatprm $68
#cmd gpmatstate $69
#cmd gpviewport $6a
#cmd setobjname $6b
#cmd getobjname $6c
#cmd setborder $6d
#cmd findobj $6e
#cmd nextobj $6f

#cmd delobj $70
#cmd gpcolormat $71
#cmd gptexmat $72
#cmd gpusermat $73
#cmd gpclone $74
#cmd gpload $75
#cmd gpplate $76
#cmd gpfloor $77
#cmd gpbox $78
#cmd gpspr $79
#cmd gplight $7a
#cmd setobjmode $7b
#cmd gplookat $7c
#cmd gppbind $7d
#cmd gpcamera $7e
#cmd gpnull $7f

#cmd getpos $80
#cmd getquat $81
#cmd getscale $82
#cmd getdir $83
#cmd getefx $84
#cmd getcolor $85
#cmd getwork $86
#cmd getwork2 $87

#cmd getposi $90
#cmd getquati $91
#cmd getscalei $92
#cmd getdiri $93
#cmd getefxi $94
#cmd getcolori $95
#cmd getworki $96
#cmd getwork2i $97

#cmd selpos $a0
#cmd selquat $a1
#cmd selscale $a2
#cmd seldir $a3
#cmd selefx $a4
#cmd selcolor $a5
#cmd selwork $a6
#cmd selwork2 $a7

#cmd setpos $b0
#cmd setquat $b1
#cmd setscale $b2
#cmd setdir $b3
#cmd setefx $b4
#cmd setcolor $b5
#cmd setwork $b6
#cmd setwork2 $b7
#cmd setaxang $b8
#cmd setang $b9
#cmd setangy $ba
#cmd setangz $bb

#cmd addpos $c0
#cmd addquat $c1
#cmd addscale $c2
#cmd adddir $c3
#cmd addefx $c4
#cmd addcolor $c5
#cmd addwork $c6
#cmd addwork2 $c7
#cmd addaxang $c8
#cmd addang $c9
#cmd addangy $ca
#cmd addangz $cc

#cmd objsetf3 $d0
#cmd objaddf3 $d1
#cmd objsetfv $d2
#cmd objaddfv $d3
#cmd objgetfv $d4
#cmd setangr $d5
#cmd addangr $d6
#cmd selmoc $d7
#cmd gpcnvaxis $d8
#cmd getcoli $d9
#cmd setcoli $da
#cmd getobjcoli $db
#cmd objexist $dc

#cmd fvset $e0
#cmd fvadd $e1
#cmd fvsub $e2
#cmd fvmul $e3
#cmd fvdiv $e4
#cmd fvdir $e5
#cmd fvmin $e6
#cmd fvmax $e7
#cmd fvunit $e8
#cmd fvouter $e9
#cmd fvinner $ea
#cmd fvface $eb
#cmd fv2str $ec
#cmd f2str $ed
#cmd str2fv $ee
#cmd str2f $ef

#cmd gppset $f0
#cmd gpobjpool $f1
#cmd gppapply $f2
#cmd setalpha $f3
#cmd gpmatprm1 $f4
#cmd gpmatprm4 $f5

#define fsin(%1,%2) %1=sin(%2)
#define fcos(%1,%2) %1=cos(%2)
#define fsqr(%1,%2) %1=sqrt(%2)
#define froti(%1,%2) %1=%2/6433.98175455188992



#endif


;	hgimgx.dll header
;	(for HSP3.0 or later)
;

#uselib "hgimgx.dll"
#func _hgini hgini 2
#func hgsrc hgsrc 2
#func hgdst hgdst 2
#func hgdraw hgdraw 0
#func hgsync hgsync 2
#func hgbye hgbye $100
#func getsync getsync 1
#func sync sync 0
#func getdebug getdebug 1
#func hgsetreq hgsetreq 0
#func hggetreq hggetreq 1

#func setborder setborder 0
#func clscolor clscolor 0
#func clstex clstex 0
#func setfont setfont 0
#func fprt fprt 6

#func objset1 objset1 0
#func objadd1 objadd1 0
#func objmov1 objmov1 0
#func objsetf1 objsetf1 int,float,int,int
#func objaddf1 objaddf1 int,float,int,int
#func objmovf1 objmovf1 int,int,float,int
#func objcheck objcheck 1
#func objmovmode objmovmode 0
#func objmovopt objmovopt 0

#func objset2 objset2 0
#func objadd2 objadd2 0
#func objmov2 objmov2 0
#func objsetf2 objsetf2 int,float,float,int
#func objaddf2 objaddf2 int,float,float,int
#func objmovf2 objmovf2 int,int,float,float

#func objset3 objset3 0
#func objadd3 objadd3 0
#func objmov3 objmov3 0
#func objsetf3 objsetf3 float,float,float,int
#func objaddf3 objaddf3 float,float,float,int
#func objmovf3 objmovf3 int,float,float,float

#func selmoc selmoc 0
#func selpos selpos 0
#func selang selang 0
#func selscale selscale 0
#func seldir seldir 0

#func objgetfv objgetfv 1
#func objgetv objgetv 1
#func objsetfv objsetfv 1
#func objsetv objsetv 1
#func objaddfv objaddfv 1
#func objmovfv objmovfv 1
#func objgetstr objgetstr 1
#func objact objact 0

#func fvset fvset var,float,float,float
#func fvseti fvseti 1
#func fvadd fvadd var,float,float,float
#func fvsub fvsub var,float,float,float
#func fvmul fvmul var,float,float,float
#func fvdiv fvdiv var,float,float,float
#func fvdir fvdir var,float,float,float
#func fvget fvget var,float,float,float
#func fvmin fvmin var,float,float,float
#func fvmax fvmax var,float,float,float
#func fvouter fvouter var,float,float,float
#func fvinner fvinner var,float,float,float
#func fvunit fvunit var,float,float,float
#func fvface fvface var,float,float,float
#func fv2str fv2str $11
#func f2str f2str $11
#func str2f str2f 5
#func str2fv str2fv 5
#func f2i f2i 1
#func fsin fsin var,float,int,int
#func fcos fcos var,float,int,int
#func fsqr fsqr var,float,int,int
#func fadd fadd var,float,int,int
#func fsub fsub var,float,int,int
#func fmul fmul var,float,int,int
#func fdiv fdiv var,float,int,int
#func fcmp fcmp var,float,float,int
#func froti froti 1

#func setuv setuv 0
#func setsizef setsizef float,float,int,int
#func setbg setbg 0
#func getbg getbg $83
#func setmap setmap 0
#func addbox addbox 1
#func addplate addplate 1
#func addspr addspr 1
#func addbg addbg 1
#func regobj regobj 1
#func delobj delobj 0
#func setobjm setobjm 0
#func uvanim uvanim 0
#func setmode setmode 0
#func settimer settimer 0
#func setobjmode setobjmode 0
#func setcoli setcoli 0
#func getcoli getcoli var,int,float,int
#func findobj findobj 0
#func nextobj nextobj 1

#func evmodel evmodel 0
#func setmtex setmtex 0
#func getmtex getmtex 1

#func cammode cammode 0
#func selcam selcam 0
#func selcpos selcpos 0
#func selcang selcang 0
#func selcint selcint 0

#func copybuf copybuf 2

#func mxsend mxsend 1
#func mxconv mxconv 1
#func mxaconv mxaconv 1
#func mxgetpoly mxgetpoly 1
#func mxgetname mxgetname 1
#func settex settex 2
#func gettex gettex 1

#func addmesh addmesh 1

;
;	new function on 2.6
;
#func modelmovef modelmovef int,float,float,float
#func modelshade modelshade 0
#func dxfconv dxfconv 1
#func dxfgetpoly dxfgetpoly 1
#func objscanf2 objscanf2 var,float,float,int
#func objscan2 objscan2 1
#func mxsave mxsave 6
#func setmchild setmchild 0
#func setmsibling setmsibling 0
#func getmchild getmchild 1
#func getmsibling getmsibling 1
#func setmfv setmfv 1
#func getmfv getmfv 1
#func getmodel getmodel 1
#func putmodel putmodel 1
#func dupnode dupnode $83
#func gettree gettree 1
#func hgreset hgreset 2
#func mxtex mxtex 1
#func setmuv setmuv 1
#func getmuv getmuv 1
#func nodemax nodemax 1
#func getmpoly getmpoly 1
#func setmpoly setmpoly 1

#func objset1r objset1r 0
#func objmov1r objmov1r 0
#func objset2r objset2r 0
#func objmov2r objmov2r 0
#func objset3r objset3r 0
#func objmov3r objmov3r 0

#func sellight sellight 0
#func sellpos sellpos 0
#func sellang sellang 0
#func sellcolor sellcolor 0
#func selefx selefx 0
#func falpha falpha 0
#func setcolor setcolor 0
#func clsblur clsblur 0

;
;	new function on 2.61
;
#func modelscalef modelscalef int,float,float,float

;
;	camera mode
;
#define CAM_MODE_NORMAL 0
#define CAM_MODE_LOOKAT 1

;
;	object mode
;
#define OBJ_HIDE 1
#define OBJ_TREE 2
#define OBJ_XFRONT 4
#define OBJ_UVANIM 8
#define OBJ_UVANIM_1SHOT 16
#define OBJ_MOVE 32
#define OBJ_FLIP 64
#define OBJ_BORDER 0x80
#define OBJ_2D 0x100
#define OBJ_TIMER 0x200
#define OBJ_WIPEBOM 0x400
#define OBJ_NOSORT 0x800
#define OBJ_GRAVITY 0x1000
#define OBJ_SKY 0x2000
#define OBJ_GROUND 0x4000

#define OBJMOV_STATIC 1
#define OBJMOV_LINEAR 2
#define OBJMOV_SPLINE 16

#define OBJMOV_OPT_AUTOKEY 0x400
#define OBJMOV_OPT_PARENT 0x2000
#define OBJMOV_OPT_REVERSE 0x4000
#define OBJMOV_OPT_ETERNAL 0x8000

;
;	model create mode
;
#define MODEL_TEXRGB0 1
#define MODEL_SHADE 2

;
;	model shade mode
;
#define SHADE_NONE 0
#define SHADE_FLAT 1
#define SHADE_GOURAUD 2

;
;	node mode
;
#define NODE_ATTR_COLKEY 0x8000


;
;	system request
;
#define SYSREQ_NONE 0
#define SYSREQ_MAXMODEL 1
#define SYSREQ_MAXOBJ 2
#define SYSREQ_MAXTEX 3
#define SYSREQ_MAXMOC 4
#define SYSREQ_DXMODE 5
#define SYSREQ_DXHWND 6
#define SYSREQ_DXWIDTH 7
#define SYSREQ_DXHEIGHT 8
#define SYSREQ_COLORKEY 9
#define SYSREQ_PKTSIZE 12



#module "HGIMG"

#deffunc hgini int,int

	;	initalize
	;
	mref p1,0
	mref p2,1
	mref bm,67
	hgmode = bm.3
	_hgini@ hgmode,p1,p2
	return


#deffunc texload str fn

	;	texture reg
	;
	buffer 3,100,100,hgmode
	picload fn
	sx=ginfo(12):sy=ginfo(13)
	px=1:repeat 12
	if px>=ginfo(12) : break
	px=px<<1:loop
	py=1:repeat 12
	if py>=ginfo(13) : break
	py=py<<1:loop
	if ( px!=ginfo(12) )|( py!=ginfo(13) ) {	; 2^nサイズでない時は補正
		buffer 4,px,py,hgmode
		cls 4
		gmode 0,sx,sy:gcopy 3,0,0
	}
	settex@ sx,sy
	if stat : dialog "Texture Error("+stat+")" : return
	return


#deffunc texloadbg str fn

	;	texture reg
	;
	;buffer 3,100,100,hgmode
	;picload fn
	;clstex@
	;settex@ winx,winy,1
	return


#deffunc mxload str fn,int

	;	model load
	;
	mref p2,1
	mref _mdid,64
	fname = fn+".mx"
	exist fname
	if strsize<0 : dialog "file error ["+fname+"]" : end
	sdim buf,strsize
	s1=""
	bload fname,buf
	mxsend@ buf,p2
	buffer 3,100,100,hgmode
	repeat
		mxgetname@ s1,cnt : if s1="" : break
		exist s1+".bmp"
		if strsize<0 : dialog "No file ["+s1+"]" : end
		texload s1+".bmp"
	loop
	mxconv@ mdid@		; コンバート開始
	mxgetpoly@ polys@	; ポリゴン数を得る
	sdim buf,64
	_mdid = mdid@
	return


#deffunc maload str fn
	;	model animation load
	;
	fname = fn+".ma"
	exist fname
	if strsize<0 : dialog "file error ["+fname+"]" : end
	sdim buf,strsize
	bload fname,buf
	mxaconv@ buf
	sdim buf,64
	return


#deffunc dxfload str fn

	;	DXF model load
	;
	mref _mdid,64
	fname = fn+".dxf"
	exist fname
	if strsize<0 : dialog "file error ["+fname+"]" : end
	sdim buf,strsize
	s1=""
	bload fname,buf
	dxfconv@ buf
	mdid@ = stat
	dxfgetpoly@ polys@	; ポリゴン数を得る
	_mdid = mdid@
	return



#global

#uselib "hidmon.dll"
#func global ArrowBtnWndProc "ArrowBtnWndProc" sptr,sptr,sptr,sptr
#func global UsbExit "UsbExit@0"
#func global UsbInit "UsbInit@4" sptr
#func global UsbPoke "UsbPoke@16" int,int,int,int
#cfunc global UsbPeek "UsbPeek@8" int,int
#cfunc global PortAddress "PortAddress@4" sptr

;*********************************************************************
;   サポートしているHIDMON関数は以下の5つです。
;*********************************************************************
;DLLmon のサポート関数:
;	UsbInit "string"	;初期化.(戻り値=stat)
;	UsbExit			;終了.(戻り値=stat)
;	UsbPoke int adr,int arena,int data,int mask ; 書き込み
;	戻り値=UsbPeek( int adr,int arena )	; 1バイト読み出し
;	戻り値=PortAddress( "string" )	;ATtiny2313のポート名称をアドレスに変換する.
;
;*********************************************************************

#define	global S_PINB	"pinb"
#define	global S_PORTB	"portb"
#define	global S_PIND	"pind"
#define	global S_PORTD	"portd"
#define	global S_DDRB	"ddrb"
#define	global S_DDRD	"ddrd"

#define global RAM_IO	0
#define global SERIAL "*"

#define global hidpoke(%1,%2,%3=0) usbpoke (%1),RAM_IO,(%2),(%3)
#define global ctype hidpeek(%1) usbpeek((%1),RAM_IO)

#module
#deffunc _hidinit str _p1

	;	hidmon初期化
	hidflag=0

	UsbInit _p1
	if stat<0 : return -1
	hidflag=1

	portb@=PortAddress(S_PORTB)
	portd@=PortAddress(S_PORTD)
	pinb@=PortAddress(S_PINB)
	pind@=PortAddress(S_PIND)
	ddrb@=PortAddress(S_DDRB)
	ddrd@=PortAddress(S_DDRD)

	usbpoke ddrb@, RAM_IO, 0xff, 0 ; Bポート全てを出力ポートにする

	return 0

#deffunc hidbye onexit

	;	hidmon終了処理
	if hidflag {
		;	HIDaspxの標準モードに戻す
		usbpoke portd@, RAM_IO, 0x67, 0
		usbpoke ddrd@, RAM_IO, 0x20, 0

		;	hidmon終了
		UsbExit
		hidflag=0

	}
	return

#global

#define hidinit(%1="*") _hidinit %1

#ifndef __hsedsdk__
#define global __hsedsdk__

#module "hsedsdk"

//
// Win32API 関数
#uselib "user32.dll"
#func FindWindow@hsedsdk "FindWindowA" sptr, sptr
#func GetWindowThreadProcessId@hsedsdk "GetWindowThreadProcessId" int, var

#func OpenClipboard@hsedsdk "OpenClipboard" int
#cfunc IsClipboardFormatAvailable@hsedsdk "IsClipboardFormatAvailable" int
#func  CloseClipboard@hsedsdk "CloseClipboard"
#cfunc GetClipboardData@hsedsdk "GetClipboardData" int
#func  EmptyClipboard@hsedsdk "EmptyClipboard"
#func  SetClipboardData@hsedsdk "SetClipboardData" int,int

#uselib "kernel32.dll"
#func OpenProcess@hsedsdk "OpenProcess" int, int, int
#func GetCurrentProcess@hsedsdk "GetCurrentProcess"
#func DuplicateHandle@hsedsdk "DuplicateHandle" int, int, int, var, int, int, int
#func CloseHandle@hsedsdk "CloseHandle" int
#func CreatePipe@hsedsdk "CreatePipe" var, var, int, int
#func ReadFile@hsedsdk "ReadFile" int, var, int, var, int
#func WriteFile@hsedsdk "WriteFile" int, var, int, var, int
#func PeekNamedPipe@hsedsdk "PeekNamedPipe" int, int, int, int, var, int

#cfunc  GlobalLock@hsedsdk "GlobalLock" int
#cfunc  GlobalSize@hsedsdk "GlobalSize" int
#func   GlobalUnlock@hsedsdk "GlobalUnlock" int
#cfunc  GlobalAlloc@hsedsdk "GlobalAlloc" int,int
#cfunc  lstrcpy@hsedsdk "lstrcpy" int,int

// Win32API 定数(ウィンドウ メッセージを除く)
#const PROCESS_ALL_ACCESS@hsedsdk    0x001F0FFF
#const DUPLICATE_SAME_ACCESS@hsedsdk 0x00000002
#define  CF_OEMTEXT       $00000007

//
// 文字列定数
#define HSED_INTERFACE_NAME "HspEditorInterface"

//
// ウィンドウ メッセージ
#const WM_APP@hsedsdk 0x00008000
#const _HSED_GETVER          (WM_APP + 0x000)
#const _HSED_GETWND          (WM_APP + 0x100)
#const _HSED_GETPATH         (WM_APP + 0x101)

#const _HSED_GETTABCOUNT     (WM_APP + 0x200)
#const _HSED_GETTABID        (WM_APP + 0x201)
#const _HSED_GETFOOTYID      (WM_APP + 0x202)
#const _HSED_GETACTTABID     (WM_APP + 0x203)
#const _HSED_GETACTFOOTYID   (WM_APP + 0x204)

#const _HSED_CANCOPY         (WM_APP + 0x300)
#const _HSED_CANPASTE        (WM_APP + 0x301)
#const _HSED_CANUNDO         (WM_APP + 0x302)
#const _HSED_CANREDO         (WM_APP + 0x303)
#const _HSED_GETMODIFY       (WM_APP + 0x304)

#const _HSED_COPY            (WM_APP + 0x310)
#const _HSED_CUT             (WM_APP + 0x311)
#const _HSED_PASTE           (WM_APP + 0x312)
#const _HSED_UNDO            (WM_APP + 0x313)
#const _HSED_REDO            (WM_APP + 0x314)
#const _HSED_INDENT          (WM_APP + 0x315)
#const _HSED_UNINDENT        (WM_APP + 0x316)
#const _HSED_SELECTALL       (WM_APP + 0x317)

#const _HSED_SETTEXT         (WM_APP + 0x320)
#const _HSED_GETTEXT         (WM_APP + 0x321)
#const _HSED_GETTEXTLENGTH   (WM_APP + 0x322)
#const _HSED_GETLINES        (WM_APP + 0x323)
#const _HSED_SETSELTEXT      (WM_APP + 0x324)
#const _HSED_GETSELTEXT      (WM_APP + 0x325)
#const _HSED_GETLINETEXT     (WM_APP + 0x326)
#const _HSED_GETLINELENGTH   (WM_APP + 0x327)
#const _HSED_GETLINECODE     (WM_APP + 0x328)

#const _HSED_SETSELA         (WM_APP + 0x330)
#const _HSED_SETSELB         (WM_APP + 0x331)
#const _HSED_GETSELA         (WM_APP + 0x332)
#const _HSED_GETSELB         (WM_APP + 0x333)

#const _HSED_GETCARETLINE    (WM_APP + 0x340)
#const _HSED_GETCARETPOS     (WM_APP + 0x341)
#const _HSED_GETCARETTHROUGH (WM_APP + 0x342)
#const _HSED_GETCARETVPOS    (WM_APP + 0x343)
#const _HSED_SETCARETLINE    (WM_APP + 0x344)
#const _HSED_SETCARETPOS     (WM_APP + 0x345)
#const _HSED_SETCARETTHROUGH (WM_APP + 0x346)

#const _HSED_SETMARK         (WM_APP + 0x350)
#const _HSED_GETMARK         (WM_APP + 0x351)
#const _HSED_SETHIGHLIGHT    (WM_APP + 0x352)

//
// HSED_GETVER用の定数
#const global HGV_PUBLICVER    0
#const global HGV_PRIVATEVER   1
#const global HGV_HSPCMPVER    2
#const global HGV_FOOTYVER     3
#const global HGV_FOOTYBETAVER 4

//
// HSED_GETWND用の定数
#const global HGW_MAIN      0
#const global HGW_CLIENT    1
#const global HGW_TAB       2
#const global HGW_EDIT      3
#const global HGW_TOOLBAR   4
#const global HGW_STATUSBAR 5

//
// マクロ
#define global ctype hsed_getmajorver(%1) (%1 >> 16 & 0xFFFF)
#define global ctype hsed_getminorver(%1) (%1 >> 8 & 0xFF)
#define global ctype hsed_getbetaver(%1)  (%1 & 0xFF)

//
// パイプ ハンドルの解放
#deffunc hsed_uninitduppipe
	if hReadPipe:  CloseHandle hReadPipe:  hReadPipe  = 0
	if hWritePipe: CloseHandle hWritePipe: hWritePipe = 0

	if hDupReadPipe:  CloseHandle hDupReadPipe:  hDupReadPipe  = 0
	if hDupWritePipe: CloseHandle hDupWritePipe: hDupWritePipe = 0
	return

//
// パイプ ハンドルの作成
#deffunc hsed_initduppipe int nSize
	CreatePipe@hsedsdk hReadPipe, hWritePipe, 0, nSize
	if hReadPipe == 0 || hWritePipe == 0: return 1

	GetWindowThreadProcessID@hsedsdk hIF, dwProcessID
	OpenProcess@hsedsdk PROCESS_ALL_ACCESS@hsedsdk, 0, dwProcessID
	hHsedProc = stat

	GetCurrentProcess@hsedsdk
	hCurProc = stat

	DuplicateHandle@hsedsdk hCurProc, hReadPipe,  hHsedProc, hDupReadPipe,  0, 0, DUPLICATE_SAME_ACCESS@hsedsdk
	DuplicateHandle@hsedsdk hCurProc, hWritePipe, hHsedProc, hDupWritePipe, 0, 0, DUPLICATE_SAME_ACCESS@hsedsdk

	CloseHandle@hsedsdk hHsedProc
	if hDupReadPipe == 0 | hDupWritePipe == 0: hsed_uninitduppipe: return 1
	return 0

//
// スクリプト エディタのAPIウィンドウの捕捉
#deffunc hsed_capture
	FindWindow@hsedsdk HSED_INTERFACE_NAME, HSED_INTERFACE_NAME
	hIF = stat
	if hIF == 0: return 1
	return 0

//
// スクリプト エディタが起動しているかチェック
#deffunc hsed_exist
	hsed_capture
	return stat == 0

//
// スクリプト エディタのバージョンを取得
#deffunc hsed_getver var ret, int nType
	hsed_capture
	if stat: ret = 0: return 1

	if(nType == HGV_HSPCMPVER){

		hsed_initduppipe 4096
		if stat: return 2

		sendmsg hIF, _HSED_GETVER, nType, hDupWritePipe
		if stat < 0: ret = "Error": hsed_uninitduppipe: return 3
		
		PeekNamedPipe hReadPipe, 0, 0, 0, dwTotalBytesAvail, 0
		if stat == 0: hsed_uninitduppipe: return 4
		
		sdim ret, dwTotalBytesAvail + 1
		if dwTotalBytesAvail > 0 {
			ReadFile hReadPipe, ret, dwTotalBytesAvail, dwNumberOfBytesRead, 0
		}
		hsed_uninitduppipe

	} else {
		sendmsg hIF, _HSED_GETVER, nType, 0
		ret = stat
		if ret < 0: return 3
	}
	return 0

//
// スクリプト エディタの各種ハンドルを取得
#deffunc hsed_getwnd var ret, int nType, int nID
	hsed_capture
	if stat: ret = 0: return 1

	if nType == HGW_EDIT{
		sendmsg hIF, _HSED_GETWND, nType, nID
	} else {
		sendmsg hIF, _HSED_GETWND, nType, 0
	}
	ret = stat
	if ret = 0: return 2: else: return 0

//
// ファイルパスを取得
#deffunc hsed_getpath var ret, int nTabID
	hsed_capture
	if stat: return 1

	hsed_initduppipe 260
	if stat: return 2

	sendmsg hIF, _HSED_GETPATH, nTabID, hDupWritePipe
	if stat < 0: ret = "Error": hsed_uninitduppipe: return 3

	PeekNamedPipe hReadPipe, 0, 0, 0, dwTotalBytesAvail, 0
	if stat == 0: hsed_uninitduppipe: return 4

	sdim ret, dwTotalBytesAvail + 1
	if dwTotalBytesAvail > 0 {
		ReadFile hReadPipe, ret, dwTotalBytesAvail, dwNumberOfBytesRead, 0
	}
	hsed_uninitduppipe
	return 0

//
// バージョンの数値を文字列に変換
#deffunc hsed_cnvverstr int nVersion
	sdim _refstr, 4096
	_refstr = "" + hsed_getmajorver(nVersion) + "." + strf("%02d", hsed_getminorver(nVersion))
	if hsed_getbetaver(nVersion): _refstr += "b" + hsed_getbetaver(nVersion)
	return _refstr

//
// タブ数の取得
#deffunc hsed_gettabcount var ret
	hsed_capture
	if stat: ret = -1: return 1

	sendmsg hIF, _HSED_GETTABCOUNT
	ret = stat
	return 0

//
// FootyのIDからタブのIDを取得
#deffunc hsed_gettabid var ret, int nFootyID
	hsed_capture
	if stat: ret = -1: return 1

	sendmsg hIF, _HSED_GETTABID, nFootyID
	if ret < 0{
		ret = -1
		return 2
	} else {
		ret = stat
		return 0
	}

//
// タブのIDからFootyのIDを取得
#deffunc hsed_getfootyid var ret, int nTabID
	hsed_capture
	if stat: ret = -1: return 1

	sendmsg hIF, _HSED_GETFOOTYID, nTabID
	if ret < 0{
		ret = -1
		return 2
	} else {
		ret = stat
		return 0
	}

//
// コピーの可否を取得
#deffunc hsed_cancopy var ret, int nFootyID
	hsed_capture
	if stat: ret = -1: return 1

	sendmsg hIF, _HSED_CANCOPY, nFootyID
	ret = stat
	if ret < 0: return 2: else: return 0

//
// 貼り付けの可否を取得
#deffunc hsed_canpaste var ret
	hsed_capture
	if stat: ret = -1: return 1

	sendmsg hIF, _HSED_CANPASTE
	ret = stat
	return 0

//
// アンドゥの可否を取得
#deffunc hsed_canundo var ret, int nFootyID
	hsed_capture
	if stat: ret = -1: return 1

	sendmsg hIF, _HSED_CANUNDO, nFootyID
	ret = stat
	if ret < 0: return 2: else: return 0

//
// リドゥの可否を取得
#deffunc hsed_canredo var ret, int nFootyID
	hsed_capture
	if stat: ret = -1: return 1

	sendmsg hIF, _HSED_CANREDO, nFootyID
	ret = stat
	if ret < 0: return 2: else: return 0

//
// 変更フラグを取得
#deffunc hsed_getmodify var ret, int nFootyID
	hsed_capture
	if stat: ret = -1: return 1

	sendmsg hIF, _HSED_GETMODIFY, nFootyID
	ret = stat
	if ret < 0: return 2: else: return 0

//
// コピー
#deffunc hsed_copy int nFootyID
	hsed_capture
	if stat: return 1

	sendmsg hIF, _HSED_COPY, nFootyID
	if stat == -1: return 0: else: return

//
// 切り取り
#deffunc hsed_cut int nFootyID
	hsed_capture
	if stat: return 1

	sendmsg hIF, _HSED_CUT, nFootyID
	if stat == -1: return 0: else: return

//
// 貼り付け
#deffunc hsed_paste int nFootyID
	hsed_capture
	if stat: return 1

	sendmsg hIF, _HSED_PASTE, nFootyID
	if stat == -1: return 0: else: return

//
// アンドゥ
#deffunc hsed_undo int nFootyID
	hsed_capture
	if stat: return 1

	sendmsg hIF, _HSED_UNDO, nFootyID
	if stat == -1: return 0: else: return

//
// リドゥ
#deffunc hsed_redo int nFootyID
	hsed_capture
	if stat: return 1

	sendmsg hIF, _HSED_REDO, nFootyID
	if stat == -1: return 0: else: return

//
// インデント
#deffunc hsed_indent int nFootyID
	hsed_capture
	if stat: return 1

	sendmsg hIF, _HSED_INDENT, nFootyID
	if stat == -1: return 0: else: return

//
// アンインデント
#deffunc hsed_unindent int nFootyID
	hsed_capture
	if stat: return 1

	sendmsg hIF, _HSED_UNINDENT, nFootyID
	if stat == -1: return 0: else: return

//
// すべて選択
#deffunc hsed_selectall int nFootyID
	hsed_capture
	if stat: return 1

	sendmsg hIF, _HSED_SELECTALL, nFootyID
	if stat == -1: return 0: else: return

//
// 文字列長を取得
#deffunc hsed_gettextlength var ret, int nFootyID
	hsed_capture
	if stat: return 1

	sendmsg hIF, _HSED_GETTEXTLENGTH, nFootyID
	if stat < 0: return 1: else: ret = stat: return 0

//
// 行数を取得
#deffunc hsed_getlines var ret, int nFootyID
	hsed_capture
	if stat: return 1

	sendmsg hIF, _HSED_GETLINES, nFootyID
	if stat < 0: return 1: else: ret = stat: return 0

//
// 行の文字列長を取得
#deffunc hsed_getlinelength var ret, int nFootyID, int nLine
	hsed_capture
	if stat: return 1

	sendmsg hIF, _HSED_GETLINELENGTH, nFootyID, nLine
	if stat < 0: return 1: else: ret = stat: return 0

//
// 改行コードの取得
#deffunc hsed_getlinecode var ret, int nFootyID
	hsed_capture
	if stat: return 1

	sendmsg hIF, _HSED_GETLINECODE, nFootyID
	if stat == -5{
		ret = -1
		return 1
	} else {
		ret = stat
		return 0
	}

//
// 文字列の取得
#deffunc hsed_gettext var ret, int nFootyID
	hsed_capture
	if stat: return 1

	hsed_gettextlength nLength, nFootyID
	if stat: return 2

	sdim ret, nLength + 1
	if nLength == 0 : return 0
	hsed_initduppipe nLength + 1
	if stat: return 3

	sendmsg hIF, _HSED_GETTEXT, nFootyID, hDupWritePipe
	if stat < 0: ret = "Error": hsed_uninitduppipe: return 4

	ReadFile hReadPipe, ret, nLength, dwNumberOfBytesRead, 0
	hsed_uninitduppipe
	return 0

#deffunc hsed_sendtext_msg int nFootyID, int msg, var sText
	hsed_capture
	if stat: return 1

	nLength = strlen(sText)

	hsed_initduppipe nLength + 1
	if stat: return 3

	WriteFile hWritePipe, sText, nLength + 1, dwNumberOfBytesWritten, 0

	sendmsg hIF, msg, nFootyID, hDupReadPipe
	if stat < 0: hsed_uninitduppipe: return 4
	
	hsed_uninitduppipe
	return 0

#deffunc hsed_settext int nFootyID, str sText
	vText = sText
	hsed_sendtext_msg nFootyID, _HSED_SETTEXT, vText
	sdim vText
	return

//
// アクティブなFootyのIDの取得
#deffunc hsed_getactfootyid var ret
	hsed_capture
	if stat: ret = -1: return 1

	sendmsg hIF, _HSED_GETACTFOOTYID
	ret = stat
	return 0


//
// アクティブなタブのIDの取得
#deffunc hsed_getacttabid var ret
	hsed_capture
	if stat: ret = -1: return 1

	sendmsg hIF, _HSED_GETACTTABID
	ret = stat
	return 0


//
// 指定された文字列をエディタに送る
#deffunc hsed_sendstr var _p1
	hsed_getactfootyid actid
	if stat : return 1

	vinfo=sysinfo(0)
	if instr(vinfo,0,"WindowsNT")<0 : goto *sendbyclip
	vdbl=0.0+strmid(vinfo,13,8)
	if vdbl<5.1 : goto *sendbyclip

	;	直接文字列データを送信する
	hsed_sendtext_msg actid, _HSED_SETSELTEXT, _p1
	return
*sendbyclip
	;	クリップボード経由で文字列を送信する
	;	(WindowsXPより前の環境用)
	OpenClipboard
	ret=stat : if ret!0 : EmptyClipboard

	;クリップボードにテキストデータを設定
	ls=strlen(_p1)+1
	lngHwnd=GlobalAlloc(2,ls)
	if lngHwnd!0 {
		lngMem=GlobalLock(lngHwnd)
		if lngMem!0 {
			ret=lstrcpy(lngMem,varptr(_p1))
			if ret!0 {
				SetClipboardData CF_OEMTEXT,lngHwnd
			}
			GlobalUnlock lngHwnd : lngRet=stat
		}
	}
	CloseClipboard
	sendmsg hIF, _HSED_PASTE,-1, 0
	return


#global

#endif;
; HSP2.61 Compatible macros
;
#ifndef __hsp261cmp__
#define __hsp261cmp__

;	システム変数
#undef curdir
#define global curdir dirinfo(0)
#undef exedir
#define global exedir dirinfo(1)
#define global windir dirinfo(2)
#define global sysdir dirinfo(3)
#undef winx
#define global winx ginfo@hsp(12)
#undef winy
#define global winy ginfo@hsp(13)
#define global rval ginfo@hsp(16)
#define global gval ginfo@hsp(17)
#define global bval ginfo@hsp(18)
#define global paluse ginfo@hsp(19)
#define global dispx ginfo@hsp(20)
#define global dispy ginfo@hsp(21)
#define global csrx ginfo@hsp(22)
#define global csry ginfo@hsp(23)

#undef rnd
#define rnd(%1,%2) %1=rnd@hsp(%2)
#undef gettime
#define gettime(%1,%2) %1=gettime@hsp(%2)
#undef wpeek
#define wpeek(%1,%2,%3) %1=wpeek@hsp(%2,%3)
#undef peek
#define peek(%1,%2,%3) %1=peek@hsp(%2,%3)
#undef notemax
#define notemax(%1) %1=noteinfo@hsp(0)
#undef strlen
#define strlen(%1,%2) %1=strlen@hsp(%2)
#undef sysinfo
#define sysinfo(%1,%2) %1=sysinfo@hsp(%2)
#undef getpath
#define getpath(%1,%2,%3) %1=getpath@hsp(%2,%3)
#undef strmid
#define strmid(%1,%2,%3,%4) %1=strmid@hsp(%2,%3,%4)
#undef instr
#define instr(%1,%2,%3,%4) %1=instr@hsp(%2,%4,%3)

;	マルチメディア制御命令
#define global sndload mmload
#define global snd     mmplay
#define global sndoff  mmstop

;	パレット関連
#define global getpal  palcolor

;	objsend
#define global objsend(%1 = 0, %2 = 0, %3 = 0, %4 = 0, %5 = 0) \
        if (%2) == -1 { \
                objsel %1 \
        } else { \
                if %5 { \
                        sendmsg objinfo(%1,2), %2, %3, %4 \
                } else { \
                        sendmsg objinfo(%1,2), %2, %3, varptr(%4) \
                } \
        }


;	互換命令
#undef ginfo
#module _hsp261cmp

#deffunc ginfo int p1
	prmx@=ginfo@hsp(p1*2)
	prmy@=ginfo@hsp(p1*2+1)
	return

#deffunc palcopy int p1
	return

#global

#ifndef alloc
#define global alloc sdim
#endif

#endif
;
; HSP3DISH Default define and macros
;
#ifndef __hsp3dish__
#define __hsp3dish__
#define global _HSP3DISH

#runtime "hsp3dish"

#const global FILTER_NONE 0
#const global FILTER_LINEAR 1
#const global FILTER_LINEAR2 2

;
;	system request
;
#enum global SYSREQ_MAXMODEL=1
#enum global SYSREQ_MAXOBJ
#enum global SYSREQ_MAXTEX
#enum global SYSREQ_MAXMOC
#enum global SYSREQ_DXMODE
#enum global SYSREQ_DXHWND
#enum global SYSREQ_DXWIDTH
#enum global SYSREQ_DXHEIGHT
#enum global SYSREQ_COLORKEY
#enum global SYSREQ_RESULT
#enum global SYSREQ_RESVMODE
#enum global SYSREQ_PKTSIZE
#enum global SYSREQ_MAXEVENT
#enum global SYSREQ_PTRD3D
#enum global SYSREQ_PTRD3DDEV
#enum global SYSREQ_MDLANIM
#enum global SYSREQ_CALCNORMAL
#enum global SYSREQ_2DFILTER
#enum global SYSREQ_3DFILTER
#enum global SYSREQ_OLDCAM
#enum global SYSREQ_QUATALG
#enum global SYSREQ_DXVSYNC
#enum global SYSREQ_DEFTIMER
#enum global SYSREQ_NOMIPMAP
#enum global SYSREQ_DEVLOST
#enum global SYSREQ_MAXEMITTER
#enum global SYSREQ_THROUGHFLAG
#enum global SYSREQ_OBAQMATBUF
#enum global SYSREQ_2DFILTER2
#enum global SYSREQ_FPUPRESERVE
#enum global SYSREQ_CLSMODE
#enum global SYSREQ_CLSCOLOR
#enum global SYSREQ_CLSTEX
#enum global SYSREQ_TIMER
#enum global SYSREQ_PLATFORM
#enum global SYSREQ_FPS
#enum global SYSREQ_VSYNC
#enum global SYSREQ_MAXMATERIAL
#enum global SYSREQ_PHYSICS_RATE
#enum global SYSREQ_MAXOBAQ
#enum global SYSREQ_MAXLOG
#enum global SYSREQ_DEFAULT_WEIGHT
#enum global SYSREQ_DEFAULT_MOMENT
#enum global SYSREQ_DEFAULT_DAMPER
#enum global SYSREQ_DEFAULT_FRICTION
#enum global SYSREQ_MESCACHE_MAX

#const global PLATFORM_WINDOWS 0
#const global PLATFORM_IOS 1
#const global PLATFORM_ANDROID 2

#define global SYSREQ_DEBUG $10000

#define global ginfo_accx ginfo(0x100)
#define global ginfo_accy ginfo(0x101)
#define global ginfo_accz ginfo(0x102)

#regcmd 9
#cmd gfilter $3f
#cmd setreq $40
#cmd getreq $41
#cmd mmvol $42
#cmd mmpan $43
#cmd mmstat $44
#cmd mtlist $45
#cmd mtinfo $46
#cmd devinfo $47
#cmd devinfoi $48
#cmd devprm $49
#cmd devcontrol $4a

#endif

;
;	obaq header for HSP3Dish
;
#ifndef __obaq__
#define __obaq__

#regcmd 16
#cmd qreset $00							// qreset
#cmd qterm $01							// qterm
#cmd qexec $02							// qexec
#cmd qdraw $03							// qdraw
#cmd qview $04							// qview
#cmd qsetreq $05						// qsetreq
#cmd qgetreq $06						// qgetreq
#cmd qborder $07						// qborder
#cmd qgravity $08						// qgravity
#cmd qcnvaxis $09						// qcnvaxis
#cmd qgetaxis $0a						// qgetaxis
#cmd qaddpoly $0b						// qaddpoly
#cmd qdel $0c							// qdel
#cmd qpos $0d							// qpos
#cmd qgetpos $0e						// qgetpos
#cmd qweight $0f						// qweight
#cmd qgetweight $10						// qgetweight
#cmd qspeed $11							// qspeed
#cmd qgetspeed $12						// qgetspeed
#cmd qgroup $13							// qgroup
#cmd qgetgroup $14						// qgetgroup
#cmd qtype $15							// qtype
#cmd qgettype $16						// qgettype
#cmd qstat $17							// qstat
#cmd qgetstat $18						// qgetstat
#cmd qcollision $19						// qcollision
#cmd qgetcol $1a						// qgetcol
#cmd qgetcol2 $1b						// qgetcol2
#cmd qgetcol3 $1c						// qgetcol3
#cmd qmat $1d							// qmat
#cmd qmat2 $1e							// qmat2
#cmd qmat3 $1f							// qmat3
#cmd qgetmat $20						// qgetmat
#cmd qgetmat2 $21						// qgetmat2
#cmd qgetmat3 $22						// qgetmat3
#cmd quser $23							// quser
#cmd quser2 $24							// quser2
#cmd qgetuser $25						// qgetuser
#cmd qgetuser2 $26						// qgetuser2
#cmd qdamper $27						// qdamper
#cmd qgetdamper $28						// qgetdamper
#cmd qpush $29							// qpush
#cmd qblast $2a							// qblast
#cmd qaddmodel $2b						// qaddmodel
#cmd qfind $2c							// qfind
#cmd qnext $2d							// qnext
#cmd qinertia $2e						// qinertia
#cmd qgetinertia $2f						// qgetinertia
#cmd qgetversion $30						// qgetversion
#cmd qinner $31							// qinner

;
;	type define
;
#const global type_normal 0
#const global type_inner 1
#const global type_bindX 0x40
#const global type_bindY 0x80
#const global type_bindR 0x100
#const global type_bind 0x1c0
#const global type_nest 0x20000
#const global type_autowipe 0x100000

;
;	stat define
;
#const global stat_reserve 0
#const global stat_sleep 1
#const global stat_active 2

;
;	collision check
;
#const global colsw_none 0
#const global colsw_active 1
#const global colsw_all 2
#const global colsw_nest 3

;
;	material type
;
#const global mat_none 0
#const global mat_spr 1
#const global mat_spr2 2
#const global mat_wire 3
#const global mat_wire2 4
#const global mat_delay 0x1000

;
;	system request
;
#define global REQ_NONE 0
#define global REQ_PHYSICS_RATE (SYSREQ_PHYSICS_RATE)
#define global REQ_MAXOBJ (SYSREQ_MAXOBAQ)
#define global REQ_MAXLOG (SYSREQ_MAXLOG)
#define global REQ_DEFAULT_WEIGHT (SYSREQ_DEFAULT_WEIGHT)
#define global REQ_DEFAULT_MOMENT (SYSREQ_DEFAULT_MOMENT)
#define global REQ_DEFAULT_DAMPER (SYSREQ_DEFAULT_DAMPER)
#define global REQ_DEFAULT_FRICTION (SYSREQ_DEFAULT_FRICTION)


#endif


;	hsp3imp.dll header

#uselib "hsp3imp.dll"
#func global hspini hspini 0
#func global hspbye hspbye 0
#func global hspprm hspprm 0
#func global hspexec hspexec 0
;
; HSP3.1 Utility macros and functions
;
#ifndef __hsp3util__
#define __hsp3util__

#module "hsp3util"

#define WS_VISIBLE 0x10000000
#define WS_CHILD 0x40000000

#define PBM_SETSTEP	1028
#define PBM_STEPIT	1029

#define SBM_SETPOS 224
#define SBM_GETPOS 225
#define SBM_SETRANGE 226
#define SBM_SETRANGEREDRAW 230

;--------------------------------------------------------------------------------

#deffunc bmppalette str _fname

	;	8bitBMPファイルのパレットを取り出す
	;	bmppalette "BMPファイル名"
	;
	exist _fname :if strsize<1078 :return
	dim a,270 : bload _fname,a,1078			;BMPヘッダー読み出し

	if peek(a,$1c)>8	:return			;8bitBMPでなかったらreturn
	if wpeek(a,0)!$4d42	:return			;"BM"チェック：強制終了は避ける
	cols=lpeek(a,$2e)	:if cols=0:cols=256	;色数：cols=0は 256色

	i=$36
	repeat cols
		palette cnt,peek(a,i+2),peek(a,i+1),peek(a,i),cnt=cols-1
		i+=4
	loop
	dim a,0
	return

#deffunc gettimestr var _p1

	;	"hh:mm:ss"の形式で時刻を得て変数に代入する
	;	gettimestr 変数名
	;
	_p1 = strf("%02d:%02d:%02d",gettime(4),gettime(5),gettime(6))
	return

#deffunc getdatestr var _p1

	;	"yyyy/mm/dd"の形式で日付を得て変数に代入する
	;	getdatestr 変数名
	;
	_p1 = strf("%02d/%02d/%02d",gettime(0),gettime(1),gettime(3))
	return

;--------------------------------------------------------------------------------

#deffunc text int _p1

	;	emes命令で表示される文字の待ち時間を設定する
	;	text 表示待ち時間(ms)
	;
	stwait=_p1
	return

#deffunc textmode int _p1, int _p2

	;	emes命令で表示される文字の修飾を設定する
	;	textmode モード, 調整パラメーター
	;		モード0 : 通常の表示
	;		モード1 : 影付き表示
	;		モード2 : 輪郭付き表示
	;		(モード1,2の場合は現在設定されている色が適用されます)
	;		(調整パラメーターを設定すると影や輪郭の距離を修正する
	;		ことができます)
	;
	stmode=_p1
	if stmode<=0 : return
	strval=ginfo_r
	stgval=ginfo_g
	stbval=ginfo_b
	stdiff=1+_p2
	return

#deffunc emes str _p1

	;	１文字づつゆっくりと文字列を表示する
	;	(mes命令と同様の動作)
	;	emes 表示テキスト
	;
	mesmax=strlen(_p1)
	if mesmax<=0 : return
	mestmp=_p1
	messg=""
	mescur=0
	a=0
	orgx=ginfo_cx
	if ( stmode ) {
		strval2=ginfo_r
		stgval2=ginfo_g
		stbval2=ginfo_b
	}

	if stwait<=0 {
		x=ginfo_cx:y=ginfo_cy
		messg=mestmp
		gosub *emes_aft
		return
	}

	repeat
		if mescur>=mesmax : break
		x=ginfo_cx:y=ginfo_cy
		a=peek(mestmp,mescur)
		mescur++
		if a<32 {
			if a=13 {
				if peek(mestmp,mescur)=10 : mescur++
				mes "":pos orgx
			}
			continue
		}
		poke messg,0,a
		poke messg,1,0
		if a>=128 {
			poke messg,1,peek(mestmp,mescur)
			poke messg,2,0
			mescur++
		}
		gosub *emes_aft
		pos x+ginfo_mesx,y
		await stwait
	loop

	mes "":pos orgx
	return

*emes_aft
	if stmode=0 {
		mes messg
		return
	}
	if stmode=1 {
		pos x+stdiff,y+stdiff
		color strval,stgval,stbval
		mes messg
		pos x,y
		color strval2,stgval2,stbval2
		mes messg
		return
	}
	if stmode=2 {
		color strval,stgval,stbval:
		pos x+stdiff,y:mes messg
		pos x-stdiff,y:mes messg
		pos x,y-stdiff:mes messg
		pos x,y+stdiff:mes messg
		pos x,y
		color strval2,stgval2,stbval2
		mes messg
		return
	}
	return


#deffunc gfade int _p1,int _p2,int _p3,int _p4,int _p5

	;
	;	画面のフェードを行なう
	;	(colorで設定された色にフェードする)
	;	gfade レベル, x,y,sx,sy
	;	レベル  = 0〜256でレベルを指定する
	;	(x,y)   = フェードを行なう左上
	;	          (省略時は0,0)
	;	(sx,sy) = フェードを行なうサイズ
	;	          (省略時は画面全体)
	;
	x=_p4:if x=0 : x=ginfo_winx
	y=_p5:if y=0 : y=ginfo_winy
	gmode 3,x,y,_p1
	x=_p2+(x/2):y=_p3+(y/2)
	grect x,y,0
	return


#deffunc gfade2 int _src,int _p1,int _p2,int _p3,int _p4,int _p5

	;
	;	画面のフェードを行なう
	;	(設定された画面イメージにフェードする)
	;	gfade src,レベル, x,y,sx,sy
	;	src = フェード元のバッファID
	;	レベル  = 0〜256でレベルを指定する
	;	(x,y)   = フェードを行なう左上
	;	          (省略時は0,0)
	;	(sx,sy) = フェードを行なうサイズ
	;	          (省略時は画面全体)
	;
	x=_p4:if x=0 : x=ginfo_winx
	y=_p5:if y=0 : y=ginfo_winy
	gmode 3,x,y,_p1
	pos _p2,_p3:gcopy _src,0,0
	return


;--------------------------------------------------------------------------------

#deffunc statictext str _p1, int _p2, int _p3

	;
	;	スタティックテキストを配置オブジェクトとして生成する
	;	statictext "テキスト",Xサイズ,Yサイズ
	;	(posで指定した位置に表示されます)
	;
	winobj "STATIC",_p1,0,WS_VISIBLE|WS_CHILD,_p2,_p3
	return stat

#deffunc statictext_set int _p1, str _p2

	;
	;	スタティックテキストの内容を書き換える
	;	statictext_set オブジェクトID,"テキスト"
	;
	sendmsg objinfo_hwnd(_p1),$c,0,_p2
	return stat

#deffunc scrollbar int _p1, int _p2

	;
	;	スクロールバーを配置オブジェクトとして生成する
	;	scrollbar Xサイズ,Yサイズ
	;	(posで指定した位置に表示されます)
	;
	winobj "SCROLLBAR","",0,WS_VISIBLE|WS_CHILD,_p1,_p2
	return stat


#deffunc progbar int _p1, int _p2

	;
	;	プログレスバーを配置オブジェクトとして生成する
	;	progbar Xサイズ,Yサイズ
	;	(posで指定した位置に表示されます)
	;
	winobj "msctls_progress32","",0,WS_VISIBLE|WS_CHILD,_p1,_p2
	return stat

#deffunc progbar_step int _p1

	;
	;	プログレスバーを1ステップ進める
	;	progbar_step オブジェクトID
	;
	sendmsg objinfo_hwnd(_p1),PBM_STEPIT,0,0
	return

#deffunc progbar_set int _p1, int _p2

	;
	;	プログレスバーのステップ増分を設定する
	;	progbar_step オブジェクトID, 増分
	;
	sendmsg objinfo_hwnd(_p1),PBM_SETSTEP,_p2,0
	return

;--------------------------------------------------------------------------------

#deffunc note2array array _p1, str _p2;, local mestmp

	;
	;	複数行の文字列を行ごとに配列変数に代入する
	;	note2array 変数,"文字列"
	;	("文字列"で指定した内容を配列変数に変換します)
	;	(配列は１次元配列になります)
	;
	;	notegetを利用したスクリプトからgetstrを利用した者に変更すると
	;	より高速になりますが、1行あたりの文字列の長さに制限がかかります。
	;	どちらが良いでしょうか？
	mestmp = _p2
	notesel mestmp
	_notemax = notemax
	if _notemax<=1 : _p1 = _p2 : return
	sdim _p1, 64, _notemax
	repeat _notemax
		noteget _p1(cnt), cnt
	loop
	noteunsel
	return

#deffunc array2note var _p1, array _p2

	;
	;	文字列型の配列変数を複数行文字列として取得する
	;	array2note 変数1,変数2
	;	(変数2で指定した１次元の配列変数を変数1(複数行文字列)に変換します)
	;	(扱える配列は１次元配列のみになります)
	;
	if length2(_p2) > 0 : dialog "array2note:error" : return

	index = 0 : len = 1
	foreach _p2
		len += strlen(_p2(cnt)) + 2
	loop
	sdim _p1, len
	foreach _p2
		poke _p1, index, _p2(cnt)
		index += strsize
		poke _p1, index, "\n"
		index += 2
	loop
	return

#deffunc arraysave str _p1, array _p2, local stmp

	;
	;	文字列型の配列変数をファイルにセーブする
	;	arraysave "ファイル名",変数
	;	(複数行文字列に変換してセーブします)
	;	(扱える配列は１次元配列のみになります)
	;
	array2note stmp, _p2
	notesel stmp
	notesave _p1
	noteunsel
	return

#deffunc arrayload str _p1, array _p2, local stmp

	;
	;	テキストファイルを文字列型の配列変数に読み込む
	;	arrayload "ファイル名",変数
	;	(複数行文字列の行を配列要素に変換してセーブします)
	;	(扱える配列は１次元配列のみになります)
	;
	notesel stmp
	noteload _p1
	noteunsel
	note2array _p2,stmp
	return


;--------------------------------------------------------------------------------

#global


#endif

;	hspcmp.dll header

#define AHTMODE_QUOTATION	1	// ダブルクォートで囲む
#define AHTMODE_OUTPUT_PURE 2		// 出力時はクォートなし
#define AHTMODE_READ_ONLY 4		// 修正不可
#define AHTMODE_WITH_ID 8		// デフォルトでIDを付加する

#uselib "hspcmp.dll"
#func hsc_ini hsc_ini 6
#func hsc_refname hsc_refname 6
#func hsc_objname hsc_objname 6
#func hsc_compath hsc_compath 6
#func hsc_comp "_hsc_comp@16" int,int,int,int
#func hsc_getmes hsc_getmes 1
#func hsc_clrmes hsc_clrmes 0
#func hsc_ver hsc_ver $10
#func hsc_bye hsc_bye $100

#func hsc3_getsym hsc3_getsym 0
#func hsc3_messize hsc3_messize 1
#func hsc3_make hsc3_make 6
#func hsc3_getruntime hsc3_getruntime 5
#func hsc3_run hsc3_run 1

#func pack_ini pack_ini 6
#func pack_view pack_view 0
#func pack_make pack_make 0
#func pack_exe pack_exe 0
#func pack_opt pack_opt 0
#func pack_rt pack_rt 6
#func pack_get pack_get 6

#func aht_ini aht_ini 6
#func aht_stdbuf aht_stdbuf 1
#func aht_stdsize aht_stdsize 1
#func aht_source aht_source $202
#func aht_makeinit aht_makeinit 0
#func aht_make aht_make 5
#func aht_makeend aht_makeend 6
#func aht_makeput aht_makeput 6

#func aht_getopt aht_getopt 5
#func aht_prjsave aht_prjsave 6
#func aht_prjload aht_prjload 6
#func aht_getprjsrc aht_getprjsrc $202
#func aht_getprjmax aht_getprjmax $202
#func aht_prjload2 aht_prjload2 $202
#func aht_prjloade aht_prjloade $202
#func aht_getpage aht_getpage $202
#func aht_setpage aht_setpage 0
#func aht_parts aht_parts $202
#func aht_getparts aht_getparts $202
#func aht_findstart aht_findstart $202
#func aht_findparts aht_findparts $202
#func aht_findend aht_findend $202
#func aht_listparts aht_listparts $202
#func aht_propupdate aht_propupdate $202
#func aht_getexid aht_getexid $202

#func aht_getpropcnt aht_getpropcnt 1
#func aht_getprop aht_getprop 1
#func aht_getpropid aht_getpropid 5
#func aht_getproptype aht_getproptype 1
#func aht_getpropmode aht_getpropmode 1
#func aht_setprop aht_setprop 6
#func aht_sendstr aht_sendstr 1
#func aht_getmodcnt aht_getmodcnt 1
#func aht_getmodaxis aht_getmodaxis 1
#func aht_setmodaxis aht_setmodaxis 0
#func aht_delmod aht_delmod 0
#func aht_linkmod aht_linkmod 0
#func aht_unlinkmod aht_unlinkmod 0

;
;	hspcv.dll header
;
#ifndef __hspcv__
#define __hspcv__

#enum global CVOBJ_INFO_SIZEX = 0
#enum global CVOBJ_INFO_SIZEY
#enum global CVOBJ_INFO_CHANNEL
#enum global CVOBJ_INFO_BIT

#define global CV_INTER_NN        0
#define global CV_INTER_LINEAR    1
#define global CV_INTER_CUBIC     2
#define global CV_INTER_AREA      3

#define global CV_WARP_FILL_OUTLIERS 8
#define global CV_WARP_INVERSE_MAP  16

#define global CV_BLUR_NO_SCALE 0
#define global CV_BLUR  1
#define global CV_GAUSSIAN  2
#define global CV_MEDIAN 3
#define global CV_BILATERAL 4

#define global CV_THRESH_BINARY      0
#define global CV_THRESH_BINARY_INV  1
#define global CV_THRESH_TRUNC       2
#define global CV_THRESH_TOZERO      3
#define global CV_THRESH_TOZERO_INV  4
#define global CV_THRESH_MASK        7
#define global CV_THRESH_OTSU        8

#define global CVCOPY_SET 0
#define global CVCOPY_ADD 1
#define global CVCOPY_SUB 2
#define global CVCOPY_MUL 3
#define global CVCOPY_DIF 4
#define global CVCOPY_AND 5

#define global CV_TM_SQDIFF        0
#define global CV_TM_SQDIFF_NORMED 1
#define global CV_TM_CCORR         2
#define global CV_TM_CCORR_NORMED  3
#define global CV_TM_CCOEFF        4
#define global CV_TM_CCOEFF_NORMED 5


#uselib "hspcv.dll"
#func global cvreset cvreset 0
#func global cvsel cvsel 0
#func global cvbuffer cvbuffer 0
#func global cvresize cvresize $202
#func global _cvgetimg cvgetimg $202
#func global cvputimg cvputimg $202
#func global cvload cvload $202
#func global cvsave cvsave $202
#func global cvj2opt cvj2opt $202
#func global cvgetinfo cvgetinfo $202
#func global cvsmooth cvsmooth $202
#func global cvthreshold cvthreshold $202
#func global cvrotate cvrotate $202
#func global cvarea cvarea $202
#func global cvcopy cvcopy $202
#func global cvxors cvxors $202
#func global cvflip cvflip $202
#func global cvloadxml cvloadxml $202
#func global cvfacedetect cvfacedetect $202
#func global cvgetface cvgetface $202
#func global cvmatch cvmatch $202
#func global cvconvert cvconvert $202


; for video
#define global CV_CAP_ANY      0   //何でも
#define global CV_CAP_MIL      100 //Matrox Imaging Library
#define global CV_CAP_VFW      200 //Video for Windows
#define global CV_CAP_IEEE1394 300 //IEEE1394

#func global cvcapture cvcapture $202
#func global cvgetcapture cvgetcapture $202
#func global cvendcapture cvendcapture $202
#func global cvopenavi cvopenavi $202
#func global cvgetavi cvgetavi $202
#func global cvcloseavi cvcloseavi $202

#func global cvmakeavi cvmakeavi $202
#func global cvputavi cvputavi $202
#func global cvendavi cvendavi $202

#module hspcv

#deffunc cvgetimg int _p1, int _p2

	cvgetinfo sx, _p1, CVOBJ_INFO_SIZEX
	cvgetinfo sy, _p1, CVOBJ_INFO_SIZEY
	if _p2&1 {
		screen ginfo(3),sx,sy
	}
	_cvgetimg _p1
	redraw
	return

#global



;	hspda.dll header
;
#cmpopt varname 1

#uselib "hspda.dll"
#func sortval sortval $202
#func sortstr sortstr $202
#func sortnote sortnote $202
#func sortget sortget $202
#func sortbye sortbye $100

#func csvstr csvstr $202
#func csvnote csvnote $87

#func xnotesel xnotesel $202
#func xnoteadd xnoteadd $202

#func rndf_ini rndf_ini $202
#func rndf_get rndf_get $202
#func rndf_geti rndf_geti $202

#func csvsel csvsel 1
#func csvres csvres $83
#func csvflag csvflag 0
#func csvopt csvopt 0
#func csvfind csvfind 6

#define CCSV_OPT_NOCASE 1
#define CCSV_OPT_ANDMATCH 2
#define CCSV_OPT_ZENKAKU 4
#define CCSV_OPT_ADDLINE 8
#define CCSV_OPT_EXPRESSION 128

#func getvarid getvarid $202
#func getvarname getvarname $202
#func getmaxvar getmaxvar $202
#func vsave vsave $202
#func vload vload $202
#func vsave_start vsave_start $202
#func vsave_put vsave_put $202
#func vsave_end vsave_end $202
#func vload_start vload_start $202
#func vload_get vload_get $202
#func vload_end vload_end $202


;	hspdb.dll header(3.0)

#uselib "hspdb.dll"
#func dbini dbini $0
#func dbbye dbbye $100
#func dbopen dbopen $202
#func dbclose dbclose $0
#func dbstat dbstat $0
#func dbspchr dbspchr $0
#func dbsend dbsend $202
#func dbgets dbgets $202

;
; HSP3.0 Default define and macros
;
#ifdef __hsp30__
#ifndef __hspdef__
#define __hspdef__
#addition "userdef.as"

#define global and &
#define global or |
#define global xor ^
#define global not !

#define global screen_normal (0)
#define global screen_palette (1)
#define global screen_hide (2)
#define global screen_fixedsize (4)
#define global screen_tool (8)
#define global screen_frame (16)

#define global gmode_gdi (0)
#define global gmode_mem (1)
#define global gmode_rgb0 (2)
#define global gmode_alpha (3)
#define global gmode_rgb0alpha (4)
#define global gmode_add (5)
#define global gmode_sub (6)
#define global gmode_pixela (7)

#define global ginfo_mx ginfo(0)
#define global ginfo_my ginfo(1)
#define global ginfo_act ginfo(2)
#define global ginfo_sel ginfo(3)
#define global ginfo_wx1 ginfo(4)
#define global ginfo_wy1 ginfo(5)
#define global ginfo_wx2 ginfo(6)
#define global ginfo_wy2 ginfo(7)
#define global ginfo_vx ginfo(8)
#define global ginfo_vy ginfo(9)
#define global ginfo_sizex ginfo(10)
#define global ginfo_sizey ginfo(11)
#define global ginfo_winx ginfo(12)
#define global ginfo_winy ginfo(13)
#define global ginfo_mesx ginfo(14)
#define global ginfo_mesy ginfo(15)
#define global ginfo_r ginfo(16)
#define global ginfo_g ginfo(17)
#define global ginfo_b ginfo(18)
#define global ginfo_paluse ginfo(19)
#define global ginfo_dispx ginfo(20)
#define global ginfo_dispy ginfo(21)
#define global ginfo_cx ginfo(22)
#define global ginfo_cy ginfo(23)
#define global ginfo_intid ginfo(24)
#define global ginfo_newid ginfo(25)
#define global ginfo_sx ginfo(26)
#define global ginfo_sy ginfo(27)

#define global ctype objinfo_mode(%1) objinfo(%1,0)
#define global ctype objinfo_bmscr(%1) objinfo(%1,1)
#define global ctype objinfo_hwnd(%1) objinfo(%1,2)

#define global notemax noteinfo(0)
#define global notesize noteinfo(1)

#define global dir_cur dirinfo(0)
#define global dir_exe dirinfo(1)
#define global dir_win dirinfo(2)
#define global dir_sys dirinfo(3)
#define global dir_cmdline dirinfo(4)
#define global dir_desktop dirinfo($10000)
#define global dir_mydoc dirinfo($10005)
#define global dir_tv dirinfo(5)

#define global font_normal (0)
#define global font_bold (1)
#define global font_italic (2)
#define global font_underline (4)
#define global font_strikeout (8)
#define global font_antialias (16)

#define global objmode_normal (0)
#define global objmode_guifont (1)
#define global objmode_usefont (2)

#define global gsquare_grad (-257)

#define global msgothic "ＭＳ ゴシック"
#define global msmincho "ＭＳ 明朝"

#define global do  %tbreak %i0 %tcontinue %i0 %tdo *%i
#define global until(%1=1) %tcontinue *%o : %tdo if (%1)=0 { goto *%o } %tbreak *%o
#define global while(%1=1) %tcontinue %i0 %twhile *%i :%tbreak if (%1)=0 { goto *%i }
#define global wend %tcontinue *%o : %twhile goto *%o: %tbreak *%o
#define global for(%1,%2=0,%3=0,%4=1) %tcontinue %i0 %tfor %1=%2:*%i %s4 %s1 :%tbreak exgoto %1,%4,%3,*%i
#define global next %tcontinue *%o :%tfor %o +=%o :goto *%o :%tbreak *%o
#define global _break %tbreak goto *%p
#define global _continue %tcontinue goto *%p

#define global switch(%1) %tswitch %i0 %s1 _switch_val=%p : if 0 {
#define global case(%1) %tswitch _switch_sw++} if _switch_val == (%1) | _switch_sw { _switch_sw = 0

#define global default %tswitch } if 1 {
#define global swbreak %tswitch goto *%p1
#define global swend %tswitch %o0 } *%o

#define global ddim(%1,%2,%3=0,%4=0,%5=0) dimtype %1,3,%2,%3,%4,%5
#define global ldim(%1,%2,%3=0,%4=0,%5=0) dimtype %1,1,%2,%3,%4,%5
#define global alloc sdim

#define global M_PI	3.14159265358979323846
#define global ctype rad2deg(%1)       (57.295779513082320877*(%1))
#define global ctype deg2rad(%1)       (0.017453292519943295769*(%1))

#define global ease_linear (0)
#define global ease_quad_in (1)
#define global ease_quad_out (2)
#define global ease_quad_inout (3)
#define global ease_cubic_in (4)
#define global ease_cubic_out (5)
#define global ease_cubic_inout (6)
#define global ease_quartic_in (7)
#define global ease_quartic_out (8)
#define global ease_quartic_inout (9)
#define global ease_bounce_in (10)
#define global ease_bounce_out (11)
#define global ease_bounce_inout (12)
#define global ease_shake_in (13)
#define global ease_shake_out (14)
#define global ease_shake_inout (15)
#define global ease_loop (4096)


#ifndef _DEBUG
#undef assert
#define global assert(%1) :
#undef logmes
#define global logmes(%1) :
#endif

#endif

#else
#addition "hsp261cmp.as"

#endif

;	hspdx.dll header

#define global HSPDXFIX_VERSION 19

#ifdef HSPDXFIX_DEBUG
	;デバッグモード
	#uselib "hspdx.dbg"
	#define global HSPDXFIX_EXEMDOE 0
#else
	;リリースモード
	#uselib "hspdx.dll"
	#define global HSPDXFIX_EXEMDOE 1
#endif

;---

#func global es_ini		es_ini			$202
#func global es_bye		es_bye			$102
#func global es_release	es_release		$202
#func global es_screen		es_screen		$202
#func global es_buffer		es_buffer		$202
#func global es_window		es_window		$202
#func global es_area		es_area			$202
#func global es_sync		es_sync			$202
#func global es_caps		es_caps			$202
#func global es_opt		es_opt			0

#func global es_palfade	es_palfade		$202
#func global es_boxf		es_boxf			$202
#func global es_copy		es_copy			$202
#func global es_zoom		es_zoom			$202
#func global es_fmes		es_fmes			$202
#func global es_mes		es_mes			$202
#func global es_cls		es_cls			$202
#func global es_put		es_put			$202
#func global es_fmesbuf	es_fmesbuf		$202
#func global es_mesbuf		es_mesbuf		$202

#func global es_size		es_size			$202
#func global es_pat		es_pat			$202
#func global es_link		es_link			$202

#func global es_clear		es_clear		$202
#func global es_new		es_new			$202
#func global es_get		es_get			$202
#func global es_setp		es_setp			$202
#func global es_find		es_find			$202
#func global es_check		es_check		$202
#func global es_offset		es_offset		$202
#func global es_set		es_set			$202
#func global es_flag		es_flag			$202
#func global es_chr		es_chr			$202
#func global es_type		es_type			$202
#func global es_kill		es_kill			$202
#func global es_pos		es_pos			$202
#func global es_posd		es_posd			0
#func global es_apos		es_apos			$202
#func global es_aposd		es_aposd		$202
#func global es_adir		es_adir			$202
#func global es_aim		es_aim			$202
#func global es_draw		es_draw			$202

#func global es_getbuf		es_getbuf		$202
#func global es_palset		es_palset		$202
#func global es_xfer		es_xfer			$202
#func global es_fill		es_fill			$202

#func global es_debug		es_debug		$202

#func global es_buffer_np	es_buffer_np	2
#func global es_buffer_pm	es_buffer_pm	2
#func global es_palcopy	es_palcopy		$202
#func global es_gdi		es_gdi			$202

#func global es_timer		es_timer		$202
#func global es_getfps		es_getfps		$202
#func global es_ang		es_ang			$202
#func global es_sin		es_sin			$202
#func global es_cos		es_cos			$202
#func global es_dist		es_dist			$202
#func global es_saver		es_saver		$202
#func global es_exnew		es_exnew		$202
#func global es_showdia	es_showdia		$202
#func global es_cursor		es_cursor		$202
#func global es_await		es_await		$202

#func global es_gravity	es_gravity		$202
#func global es_bound		es_bound		$202
#func global es_blink		es_blink		$202
#func global es_effect		es_effect		$202
#func global es_move		es_move			$202
#func global es_setpri		es_setpri		$202

#func global es_excopy		es_excopy		$202
#func global es_exboxf		es_exboxf		$202
#func global es_exput		es_exput		$202

#func global es_d3dopt		es_d3dopt		$202
#func global es_clip		es_clip			$202
#func global es_gsel		es_gsel			$202

#func global es_d3dcheck	es_d3dcheck		$202

;---

#define global ESB_ZERO 0
#define global ESB_ONE 1
#define global ESB_SRCCOLOR 2
#define global ESB_INVSRCCOLOR 3
#define global ESB_SRCALPHA 4
#define global ESB_INVSRCALPHA 5
#define global ESB_DESTALPHA 6
#define global ESB_INVDESTALPHA 7
#define global ESB_DESTCOLOR 8
#define global ESB_INVDESTCOLOR 9
#define global ESB_SRCALPHASAT 10

#define global ESB_ALPHA 59
#define global ESB_ADD 15
#define global ESB_SHADOW 55
#define global ESB_NEGATIVE 9
#define global ESB_MULTIPLE 8

#define global ESI_FLAG_LOW 0
#define global ESI_FLAG_HIGH 1
#define global ESI_POSX_DEC 2
#define global ESI_POSX_INT 3
#define global ESI_POSY_DEC 4
#define global ESI_POSY_INT 5
#define global ESI_SPDX_DEC 6
#define global ESI_SPDX_INT 7
#define global ESI_SPDY_DEC 8
#define global ESI_SPDY_INT 9
#define global ESI_PRGCOUNT 10
#define global ESI_ANIMECOUNT 11
#define global ESI_CHRNO 12
#define global ESI_TYPE 13
#define global ESI_EXECPTR_LOW 14
#define global ESI_EXECPTR_HIGH 15
#define global ESI_ACCELX 16
#define global ESI_ACCELY 17
#define global ESI_BOUNCEPOW 18
#define global ESI_BOUNCEFLAG 19
#define global ESI_BLINKFLAG 20
#define global ESI_BLINKCOUNT_LOW 22
#define global ESI_BLINKCOUNT_HIGH 23
#define global ESI_D3DFLAG 24
#define global ESI_DISPX 25
#define global ESI_DISPY 26
#define global ESI_ROTX 27
#define global ESI_ROTY 28
#define global ESI_ROTZ 29
#define global ESI_BLENDFACTOR 30
#define global ESI_ALPHA 31
#define global ESI_DISPFLAG 32
#define global ESI_LIGHT_LOW 34
#define global ESI_LIGHT_HIGH 35
#define global ESI_PRIORITY 36

;---

#define global es_excopy2(%1,%2,%3,%4,%5,%6,%7) es_excopy %1,%2.0,%2.1,%3.0,%3.1,%4.0,%4.1,%5.0,%5.1,%5.2,%6.0,%6.1,%7
#define global ctype es_bfcalc(%1,%2) %2*11+%1
#define global ctype es_rgbcalc(%1,%2,%3) (%1<<16)+(%2<<8)+%3
#define global es_effect2(%1,%2,%3,%4,%5) es_effect %1,%2.0,%2.1,%3.0,%3.1,%3.2,%4.0,%4.1,%5
#define global es_expat(%1,%2,%3,%4,%5) es_pat %1,%3,%4,%5,%2
#define global es_dialog(%1,%2,%3) es_cursor 1:es_showdia:dialog %1,%2,%3:esr_stat=stat:es_cursor 0
#define global es_exput2(%1,%2,%3,%4,%5,%6) es_exput %1.0,%1.1,%2,%3.0,%3.1,%4.0,%4.1,%4.2,%5.0,%5.1,%6

;---

	#func global es_islost		es_islost		$202
;#ifndef HSPDXFIX_IN_MODULE
	;モジュールの中でHSPDXFIXを使用するときには宣言しない
	#module "hspdxfix_module"


	#deffunc es_bufcheck
		mref ret,64
		ret=0
		#ifdef __hsp30__
			prmx=ginfo(2)
		#else
			ginfo 1
		#endif
		if prmx=0 : return
		repeat
			#ifdef __hsp30__
				prmx=ginfo(2)
			#else
				ginfo 1
			#endif
			wait 1
			if prmx=0 : break
		loop
		;バッファがロストしてないか調べる
		es_islost
		ret=stat
	return

	#global
;#else
;	#undef HSPDXFIX_IN_MODULE
;#endif

;	hspext.dll header

#uselib "hspext.dll"
#func regkey regkey 4
#func regkill regkill 4
#func getreg getreg 5
#func setreg setreg 5
#func reglist reglist 1
#func regdone regdone $100

#func comopen comopen 4
#func comclose comclose 0
#func comput comput 6
#func computc computc 0
#func comget comget 1
#func comgetc comgetc 1
#func comstat comstat 1
#func comcontrol comcontrol 0

#func gfini gfini 2
#func gfdec gfdec 0
#func gfinc gfinc 0
#func gfcopy gfcopy 2

#func emath emath 0
#func emstr emstr 1
#func emcnv emcnv 5
#func emint emint 1
#func emsin emsin 1
#func emcos emcos 1
#func ematan ematan 1
#func emsqr emsqr 1

#func sysexit sysexit 0

#func fxcopy fxcopy 5
#func fxren fxren 5
#func fxinfo fxinfo 1
#func fxaset fxaset 6
#func fxaget fxaget 5
#func fxtget fxtget 5
#func fxtset fxtset 5
#func fxshort fxshort 5
#func fxlink fxlink 5
#func fxdir fxdir 1

#func clipset clipset 6
#func clipget clipget 1
#func clipsetg clipsetg 2

#func aplsel aplsel $16
#func aplobj aplobj $16
#func aplact aplact $10
#func aplstr aplstr 6
#func aplkey aplkey 2
#func aplkeyu aplkeyu 2
#func aplkeyd aplkeyd 2
#func aplfocus aplfocus 2
#func aplget aplget 1
#func apledit apledit $11

#func selfolder selfolder $15

#func lzcopy lzcopy $16
#func lzdist lzdist 6

#func pipeexec pipeexec 5
#func pipeput pipeput 0
#func pipeget pipeget $83

#func dirlist2 dirlist2 5
#func dirlist2r dirlist2r 1
#func dirlist2h dirlist2h 0
;
;	hspinet.dll header
;
#ifndef __hspinet__
#define __hspinet__

#uselib "hspinet.dll"
#func netinit netinit 0
#func netterm netterm $100
#func netexec netexec 1
#func netmode netmode 1
#func netsize netsize 1
#func neterror neterror $202
#func neturl neturl 6
#func netdlname netdlname 6
#func netproxy netproxy 6
#func netagent netagent 6
#func netheader netheader 6
#func netrequest netrequest 6
#func netfileinfo netfileinfo $202

#func netgetv netgetv $202
#func netrequest_get netrequest_get $202
#func netrequest_post netrequest_post $202

#func filecrc filecrc $202
#func filemd5 filemd5 $202

#func ftpopen ftpopen $202
#func ftpclose ftpclose $202
#func ftpresult ftpresult $202
#func ftpdir ftpdir $202
#func ftpdirlist ftpdirlist $202
#func ftpdirlist2 ftpdirlist2 $202
#func ftpcmd ftpcmd $202
#func ftprmdir ftprmdir $202
#func ftpmkdir ftpmkdir $202
#func ftpget ftpget $202
#func ftpput ftpput $202
#func ftprename ftprename $202
#func ftpdelete ftpdelete $202

#func varmd5 varmd5 $202
#func b64encode b64encode $202
#func b64decode b64decode $202
#func rc4encode rc4encode $202
#func urlencode urlencode $202
#func urldecode urldecode $202

#func jsonopen jsonopen $202
#func jsonclose jsonclose $202
#func jsonout jsonout $202
#func jsongetobj jsongetobj $202
#func jsongeti jsongeti $202
#func jsongets jsongets $202
#func jsonnext jsonnext $202
#func jsonnewobj jsonnewobj $202
#func jsonputs jsonputs $202
#func jsonputi jsonputi $202
#func jsonsetprm jsonsetprm $202
#func jsondelobj jsondelobj $202
#func jsonnkf jsonnkf $202

#func nkfcnv nkfcnv $202
#func nkfguess nkfguess $202
#func GetNkfVersion "GetNkfVersion" var
#func SetNkfOption "SetNkfOption" sptr
#func NkfConvert "NkfConvert" var,sptr
#func ToHankaku "ToHankaku" var
#func ToZenkakuKana "ToZenkakuKana" var,sptr
#func EncodeSubject "EncodeSubject" var,sptr

#enum INET_MODE_NONE = 0
#enum INET_MODE_READY
#enum INET_MODE_REQUEST
#enum INET_MODE_REQSEND
#enum INET_MODE_DATAWAIT
#enum INET_MODE_DATAEND
#enum INET_MODE_INFOREQ
#enum INET_MODE_INFORECV
#enum INET_MODE_FTPREADY
#enum INET_MODE_FTPDIR
#enum INET_MODE_FTPREAD
#enum INET_MODE_FTPWRITE
#enum INET_MODE_FTPCMD
#enum INET_MODE_FTPRESULT
#enum INET_MODE_ERROR

#func getenv getenv2 $202
#func getenvprm getenvprm $202
#func getctime getctime $202

#module

#deffunc netload str _p1

	netrequest@ _p1

	repeat
	netexec@ res
	if res : break
	await 50
	loop

	if res > 0 : return

	neterror@ estr
	dialog "エラー:"+estr
	return

#global

#endif

#ifndef INC__MATH_AS
#define INC__MATH_AS

// 定数
#define M_E                     2.7182818284590452354           ; e
#define M_LOG2E         1.4426950408889634074           ; log_2(e)
#define M_LOG10E        0.43429448190325182765          ; log_10(e)
#define M_LN2           0.69314718055994530942          ; log_e(2)
#define M_LN10          2.30258509299404568402          ; log_e(10)
#define M_SQRTPI        1.77245385090551602792981       ; √π
#define M_SQRT2         1.41421356237309504880          ; √2
#define M_SQRT3         1.73205080756887719000          ; √3

// doubleの限度
#const  DBL_DIG                 15                                              ; 10進数で有効な桁数
#define DBL_EPSILON             0.00000000000000022204460492503131      ; 1.0とその次に大きい値との差
#const  DBL_MANT_DIG    53                                              ; 仮数部のbit数
#define DBL_MAX                 double("1.7976931348623158e+308")       ; 最大値
#const  DBL_MAX_10_EXP  308                                             ; 10進数での指数部の最大値
#const  DBL_MAX_EXP             1024                                    ; 2進数での指数部の最大値
#define DBL_MIN                 double("2.2250738585072014e-308")       ; 0を超える最小の値
#const  DBL_MIN_10_EXP  -307                                    ; 10進数での指数部の最小値
#const  DBL_MIN_EXP             -1021                                   ; 2進数での指数部の最小値

// intの限度
#const  INT_DIGIT               32                                              ; 2進数で有効な桁数
#const  INT_DIGIT10             9                                               ; 10進数で有効な桁数
#const  INT_MAX                 2147483647                              ; 最大値
#const  INT_MIN                 -INT_MAX-1                              ; 最小値

#define ctype pow(%1,%2)        powf((%1),(%2))	; x^y
#define ctype log10(%1)         (logf(%1)/logf(10))     ; log_10(x)
#define ctype log2(%1)          (logf(%1)/logf(2))      ; log_2(x)

#define ctype asin(%1)          atan((%1),sqrt(1.0-double(%1)*(%1)))    ; sin(y)=xとなるy
#define ctype acos(%1)          atan(sqrt(1.0-double(%1)*(%1)),(%1))    ; cos(y)=xとなるy

#define ctype sinh(%1)          ((expf(%1)-expf(-(%1)))/2)              ; sinh(x)
#define ctype cosh(%1)          ((expf(%1)+expf(-(%1)))/2)              ; cosh(x)
#define ctype tanh(%1)          (sinh(%1)/cosh(%1))                             ; tanh(x)

#define ctype asinh(%1)         logf(sqrt(double(%1)*(%1)+1.0)+(%1))    ; sinh(y)=xとなるy
#define ctype acosh(%1)         logf(sqrt(double(%1)*(%1)-1.0)+(%1))    ; cosh(y)=xとなるy
#define ctype atanh(%1)         (logf((1.0+(%1)) / (1.0-(%1)))/2.0)             ; tanh(y)=xとなるy

#define ctype isfinite(%1)      ((%1)*0=0)                              ; 有限／無限･非数の判定
#define ctype isnan(%1)         ((%1)!(%1))                             ; 非数の判定

#define ctype round(%1)         double(strf("%%0.0f", %1))              ; 四捨五入
#define ctype sgn(%1)           (((%1)>0) - ((%1)<0))                   ; 符号
#define ctype intf(%1)          round((-0.5)*sgn(%1)+(%1))              ; 0の方向へ丸め
#define ctype floor(%1)         ((intf(%1)-((%1)<intf(%1))))    ; 負の方向へ丸め
#define ctype ceil(%1)          (-floor(-(%1)))                                 ; 正の方向へ丸め
#define ctype fmod(%1,%2)       ((%1)\(%2))         ; モジュロ

#define ctype distance2(%1,%2)  sqrt((double(%1)-%2)*(double(%1)-%2)+(double(%1(1))-%2(1))*(double(%1(1))-%2(1)))       ; 2次元距離

#endif  ; !defined(INC__MATH_AS)
;
; HSPOGG define and macros
;
#ifndef __hspogg__
#define __hspogg__

#uselib "hspogg.dll"
#func global dmmini dmmini 2
#func global dmmbye onexit dmmbye 0
#func global dmmreset dmmreset 0
#func global dmmdel dmmdel $202
#func global dmmvol dmmvol $202
#func global dmmpan dmmpan $202
#func global dmmloop dmmloop $202
#func global dmmload dmmload $202
#func global dmmplay dmmplay $202
#func global dmmstop dmmstop $202
#func global dmmstat dmmstat $202

#endif

;
;	hspprint.dll header
;
#ifndef __hspprint__
#define __hspprint__

#uselib "hspprint.dll"

#const PRINTER_ENUM_LOCAL 2
#const PRINTER_ENUM_CONNECTIONS 4
#const PRINTER_ENUM_SHARED 32

#func prnflags prnflags $202
#func enumprn enumprn $202
#func propprn propprn $202
#func execprn execprn $202
#func getdefprn getdefprn $202
#func prndialog prndialog $202

#endif


;	hspsock.dll header

#uselib "hspsock.dll"
#func sockopen sockopen 4
#func sockclose sockclose 0
#func sockget sockget 1
#func sockgetc sockgetc 1
#func sockput sockput 6
#func sockputc sockputc 2
#func sockmake sockmake $10
#func sockgetb sockgetb 1
#func sockputb sockputb 1
#func ipget ipget $10

#func sockcheck sockcheck 0
#func sockwait sockwait $10
#func sockbye sockbye $100

;
; HSPTV define and macros
;
#ifndef __hsptv__
#define __hsptv__
#runtime "hsptv"
#regcmd 18
#cmd hsptv_send $00

#module hsptv
#define global HSPTV_RANK_MAX 30

#deffunc hsptv_up int _p1, str _p2, int _p3

	;	HSPTVデータを更新します
	;	hsptv_up score,"comment",option
	;	score,comment情報を反映させて最新データを取得します。
	;	(scoreがマイナス値の場合は最新データのみ取得します)
	;
	buf=""
	hsptv_send buf,_p1,_p2,_p3
	return

#deffunc hsptv_getrank var _p1, var _p2, var _p3, int _p4

	;	HSPTVデータを取得します
	;	hsptv_getrank var1,var2,var3,rank
	;	(変数var1にrankで指定した順位のスコア情報を代入します)
	;	(変数var2にrankで指定した順位のユーザー名を代入します)
	;	(変数var3にrankで指定した順位のコメント情報を代入します)
	;	(rankは0が1位、29が30位となる)
	;	(var1は数値型、var2,var3は文字列型となります)
	;	(最新データの更新はhsptv_upで行なってください)
	;
	notesel buf
	i=_p4*3
	noteget _p2, i
	_p1=0+_p2
	noteget _p2, i+1
	noteget _p3, i+2
	noteunsel
	return

#global
#endif
;
;	hsptvapp.dll header
;
#ifndef __hsptvapp__
#define __hsptvapp__

#uselib "hsptvapp.dll"
#func hsptv_start hsptv_start $202
#func hsptv_send hsptv_send $202
#func hsptv_setini hsptv_setini $202
#func hsptv_getini hsptv_getini $202
#func hsptv_saveini hsptv_saveini $202

#module hsptv
#define global HSPTV_RANK_MAX 30

#deffunc hsptv_up int _p1, str _p2, int _p3

	;	HSPTVデータを更新します
	;	hsptv_up score,"comment",option
	;	score,comment情報を反映させて最新データを取得します。
	;	(scoreがマイナス値の場合は最新データのみ取得します)
	;
	buf=""
	hsptv_send@ buf,_p1,_p2,_p3
	return

#deffunc hsptv_getrank var _p1, var _p2, var _p3, int _p4

	;	HSPTVデータを取得します
	;	hsptv_getrank var1,var2,var3,rank
	;	(変数var1にrankで指定した順位のスコア情報を代入します)
	;	(変数var2にrankで指定した順位のユーザー名を代入します)
	;	(変数var3にrankで指定した順位のコメント情報を代入します)
	;	(rankは0が1位、29が30位となる)
	;	(var1は数値型、var2,var3は文字列型となります)
	;	(最新データの更新はhsptv_upで行なってください)
	;
	notesel buf
	i=_p4*3
	noteget _p2, i
	_p1=0+_p2
	noteget _p2, i+1
	noteget _p3, i+2
	noteunsel
	return

#global
#endif

;// USB-IO header file
#uselib "hspusbio.dll"
#func uio_out uio_out 0
#func uio_inp uio_inp 1
#func uio_find uio_find 0
#func uio_free uio_free 0x100
#func uio_getdevs uio_getdevs 0
#func uio_seldev uio_seldev 0
;(kernel32.as)
#ifdef __hsp30__
#ifndef __KERNEL32__
#define global __KERNEL32__
#uselib "KERNEL32.DLL"
	#define global AddAtom AddAtomA
	#func global AddAtomA "AddAtomA" sptr
	#func global AddAtomW "AddAtomW" wptr
	#func global AllocConsole "AllocConsole"
	#func global AllocateUserPhysicalPages "AllocateUserPhysicalPages" sptr,sptr,sptr
	#func global AreFileApisANSI "AreFileApisANSI"
	#func global AssignProcessToJobObject "AssignProcessToJobObject" sptr,sptr
	#func global BackupRead "BackupRead" sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global BackupSeek "BackupSeek" sptr,sptr,sptr,sptr,sptr,sptr
	#func global BackupWrite "BackupWrite" sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global Beep "Beep" sptr,sptr
	#define global BeginUpdateResource BeginUpdateResourceA
	#func global BeginUpdateResourceA "BeginUpdateResourceA" sptr,sptr
	#func global BeginUpdateResourceW "BeginUpdateResourceW" wptr,wptr
	#func global BindIoCompletionCallback "BindIoCompletionCallback" sptr,sptr,sptr
	#define global BuildCommDCB BuildCommDCBA
	#func global BuildCommDCBA "BuildCommDCBA" sptr,sptr
	#define global BuildCommDCBAndTimeouts BuildCommDCBAndTimeoutsA
	#func global BuildCommDCBAndTimeoutsA "BuildCommDCBAndTimeoutsA" sptr,sptr,sptr
	#func global BuildCommDCBAndTimeoutsW "BuildCommDCBAndTimeoutsW" wptr,wptr,wptr
	#func global BuildCommDCBW "BuildCommDCBW" wptr,wptr
	#define global CallNamedPipe CallNamedPipeA
	#func global CallNamedPipeA "CallNamedPipeA" sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global CallNamedPipeW "CallNamedPipeW" wptr,wptr,wptr,wptr,wptr,wptr,wptr
	#func global CancelDeviceWakeupRequest "CancelDeviceWakeupRequest" sptr
	#func global CancelIo "CancelIo" sptr
	#func global CancelTimerQueueTimer "CancelTimerQueueTimer" sptr,sptr
	#func global CancelWaitableTimer "CancelWaitableTimer" sptr
	#func global ChangeTimerQueueTimer "ChangeTimerQueueTimer" sptr,sptr,sptr,sptr
	#func global ClearCommBreak "ClearCommBreak" sptr
	#func global ClearCommError "ClearCommError" sptr,sptr,sptr
	#func global CloseHandle "CloseHandle" sptr
	#define global CommConfigDialog CommConfigDialogA
	#func global CommConfigDialogA "CommConfigDialogA" sptr,sptr,sptr
	#func global CommConfigDialogW "CommConfigDialogW" wptr,wptr,wptr
	#func global CompareFileTime "CompareFileTime" sptr,sptr
	#define global CompareString CompareStringA
	#func global CompareStringA "CompareStringA" sptr,sptr,sptr,sptr,sptr,sptr
	#func global CompareStringW "CompareStringW" wptr,wptr,wptr,wptr,wptr,wptr
	#func global ConnectNamedPipe "ConnectNamedPipe" sptr,sptr
	#func global ContinueDebugEvent "ContinueDebugEvent" sptr,sptr,sptr
	#func global ConvertDefaultLocale "ConvertDefaultLocale" sptr
	#func global ConvertThreadToFiber "ConvertThreadToFiber" sptr
	#define global CopyFile CopyFileA
	#func global CopyFileA "CopyFileA" sptr,sptr,sptr
	#define global CopyFileEx CopyFileExA
	#func global CopyFileExA "CopyFileExA" sptr,sptr,sptr,sptr,sptr,sptr
	#func global CopyFileExW "CopyFileExW" wptr,wptr,wptr,wptr,wptr,wptr
	#func global CopyFileW "CopyFileW" wptr,wptr,wptr
	#func global CreateConsoleScreenBuffer "CreateConsoleScreenBuffer" sptr,sptr,sptr,sptr,sptr
	#define global CreateDirectory CreateDirectoryA
	#func global CreateDirectoryA "CreateDirectoryA" sptr,sptr
	#define global CreateDirectoryEx CreateDirectoryExA
	#func global CreateDirectoryExA "CreateDirectoryExA" sptr,sptr,sptr
	#func global CreateDirectoryExW "CreateDirectoryExW" wptr,wptr,wptr
	#func global CreateDirectoryW "CreateDirectoryW" wptr,wptr
	#define global CreateEvent CreateEventA
	#func global CreateEventA "CreateEventA" sptr,sptr,sptr,sptr
	#func global CreateEventW "CreateEventW" wptr,wptr,wptr,wptr
	#func global CreateFiber "CreateFiber" sptr,sptr,sptr
	#define global CreateFile CreateFileA
	#func global CreateFileA "CreateFileA" sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#define global CreateFileMapping CreateFileMappingA
	#func global CreateFileMappingA "CreateFileMappingA" sptr,sptr,sptr,sptr,sptr,sptr
	#func global CreateFileMappingW "CreateFileMappingW" wptr,wptr,wptr,wptr,wptr,wptr
	#func global CreateFileW "CreateFileW" wptr,wptr,wptr,wptr,wptr,wptr,wptr
	#define global CreateHardLink CreateHardLinkA
	#func global CreateHardLinkA "CreateHardLinkA" sptr,sptr,sptr
	#func global CreateHardLinkW "CreateHardLinkW" wptr,wptr,wptr
	#func global CreateIoCompletionPort "CreateIoCompletionPort" sptr,sptr,sptr,sptr
	#define global CreateJobObject CreateJobObjectA
	#func global CreateJobObjectA "CreateJobObjectA" sptr,sptr
	#func global CreateJobObjectW "CreateJobObjectW" wptr,wptr
	#define global CreateMailslot CreateMailslotA
	#func global CreateMailslotA "CreateMailslotA" sptr,sptr,sptr,sptr
	#func global CreateMailslotW "CreateMailslotW" wptr,wptr,wptr,wptr
	#define global CreateMutex CreateMutexA
	#func global CreateMutexA "CreateMutexA" sptr,sptr,sptr
	#func global CreateMutexW "CreateMutexW" wptr,wptr,wptr
	#define global CreateNamedPipe CreateNamedPipeA
	#func global CreateNamedPipeA "CreateNamedPipeA" sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global CreateNamedPipeW "CreateNamedPipeW" wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr
	#func global CreatePipe "CreatePipe" sptr,sptr,sptr,sptr
	#define global CreateProcess CreateProcessA
	#func global CreateProcessA "CreateProcessA" sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global CreateProcessW "CreateProcessW" wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr
	#func global CreateRemoteThread "CreateRemoteThread" sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#define global CreateSemaphore CreateSemaphoreA
	#func global CreateSemaphoreA "CreateSemaphoreA" sptr,sptr,sptr,sptr
	#func global CreateSemaphoreW "CreateSemaphoreW" wptr,wptr,wptr,wptr
	#func global CreateTapePartition "CreateTapePartition" sptr,sptr,sptr,sptr
	#func global CreateThread "CreateThread" sptr,sptr,sptr,sptr,sptr,sptr
	#func global CreateTimerQueue "CreateTimerQueue"
	#func global CreateTimerQueueTimer "CreateTimerQueueTimer" sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global CreateToolhelp32Snapshot "CreateToolhelp32Snapshot" sptr,sptr
	#define global CreateWaitableTimer CreateWaitableTimerA
	#func global CreateWaitableTimerA "CreateWaitableTimerA" sptr,sptr,sptr
	#func global CreateWaitableTimerW "CreateWaitableTimerW" wptr,wptr,wptr
	#func global DebugActiveProcess "DebugActiveProcess" sptr
	#func global DebugBreak "DebugBreak"
	#define global DefineDosDevice DefineDosDeviceA
	#func global DefineDosDeviceA "DefineDosDeviceA" sptr,sptr,sptr
	#func global DefineDosDeviceW "DefineDosDeviceW" wptr,wptr,wptr
	#func global DeleteAtom "DeleteAtom" sptr
	#func global DeleteCriticalSection "DeleteCriticalSection" sptr
	#func global DeleteFiber "DeleteFiber" sptr
	#define global DeleteFile DeleteFileA
	#func global DeleteFileA "DeleteFileA" sptr
	#func global DeleteFileW "DeleteFileW" wptr
	#func global DeleteTimerQueue "DeleteTimerQueue" sptr
	#func global DeleteTimerQueueEx "DeleteTimerQueueEx" sptr,sptr
	#func global DeleteTimerQueueTimer "DeleteTimerQueueTimer" sptr,sptr,sptr
	#define global DeleteVolumeMountPoint DeleteVolumeMountPointA
	#func global DeleteVolumeMountPointA "DeleteVolumeMountPointA" sptr
	#func global DeleteVolumeMountPointW "DeleteVolumeMountPointW" wptr
	#func global DeviceIoControl "DeviceIoControl" sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global DisableThreadLibraryCalls "DisableThreadLibraryCalls" sptr
	#func global DisconnectNamedPipe "DisconnectNamedPipe" sptr
	#define global DnsHostnameToComputerName DnsHostnameToComputerNameA
	#func global DnsHostnameToComputerNameA "DnsHostnameToComputerNameA" sptr,sptr,sptr
	#func global DnsHostnameToComputerNameW "DnsHostnameToComputerNameW" wptr,wptr,wptr
	#func global DosDateTimeToFileTime "DosDateTimeToFileTime" sptr,sptr,sptr
	#func global DuplicateHandle "DuplicateHandle" sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#define global EndUpdateResource EndUpdateResourceA
	#func global EndUpdateResourceA "EndUpdateResourceA" sptr,sptr
	#func global EndUpdateResourceW "EndUpdateResourceW" wptr,wptr
	#func global EnterCriticalSection "EnterCriticalSection" sptr
	#define global EnumCalendarInfo EnumCalendarInfoA
	#func global EnumCalendarInfoA "EnumCalendarInfoA" sptr,sptr,sptr,sptr
	#define global EnumCalendarInfoEx EnumCalendarInfoExA
	#func global EnumCalendarInfoExA "EnumCalendarInfoExA" sptr,sptr,sptr,sptr
	#func global EnumCalendarInfoExW "EnumCalendarInfoExW" wptr,wptr,wptr,wptr
	#func global EnumCalendarInfoW "EnumCalendarInfoW" wptr,wptr,wptr,wptr
	#define global EnumDateFormats EnumDateFormatsA
	#func global EnumDateFormatsA "EnumDateFormatsA" sptr,sptr,sptr
	#define global EnumDateFormatsEx EnumDateFormatsExA
	#func global EnumDateFormatsExA "EnumDateFormatsExA" sptr,sptr,sptr
	#func global EnumDateFormatsExW "EnumDateFormatsExW" wptr,wptr,wptr
	#func global EnumDateFormatsW "EnumDateFormatsW" wptr,wptr,wptr
	#define global EnumLanguageGroupLocales EnumLanguageGroupLocalesA
	#func global EnumLanguageGroupLocalesA "EnumLanguageGroupLocalesA" sptr,sptr,sptr,sptr
	#func global EnumLanguageGroupLocalesW "EnumLanguageGroupLocalesW" wptr,wptr,wptr,wptr
	#define global EnumResourceLanguages EnumResourceLanguagesA
	#func global EnumResourceLanguagesA "EnumResourceLanguagesA" sptr,sptr,sptr,sptr,sptr
	#func global EnumResourceLanguagesW "EnumResourceLanguagesW" wptr,wptr,wptr,wptr,wptr
	#define global EnumResourceNames EnumResourceNamesA
	#func global EnumResourceNamesA "EnumResourceNamesA" sptr,sptr,sptr,sptr
	#func global EnumResourceNamesW "EnumResourceNamesW" wptr,wptr,wptr,wptr
	#define global EnumResourceTypes EnumResourceTypesA
	#func global EnumResourceTypesA "EnumResourceTypesA" sptr,sptr,sptr
	#func global EnumResourceTypesW "EnumResourceTypesW" wptr,wptr,wptr
	#define global EnumSystemCodePages EnumSystemCodePagesA
	#func global EnumSystemCodePagesA "EnumSystemCodePagesA" sptr,sptr
	#func global EnumSystemCodePagesW "EnumSystemCodePagesW" wptr,wptr
	#define global EnumSystemLanguageGroups EnumSystemLanguageGroupsA
	#func global EnumSystemLanguageGroupsA "EnumSystemLanguageGroupsA" sptr,sptr,sptr
	#func global EnumSystemLanguageGroupsW "EnumSystemLanguageGroupsW" wptr,wptr,wptr
	#define global EnumSystemLocales EnumSystemLocalesA
	#func global EnumSystemLocalesA "EnumSystemLocalesA" sptr,sptr
	#func global EnumSystemLocalesW "EnumSystemLocalesW" wptr,wptr
	#define global EnumTimeFormats EnumTimeFormatsA
	#func global EnumTimeFormatsA "EnumTimeFormatsA" sptr,sptr,sptr
	#func global EnumTimeFormatsW "EnumTimeFormatsW" wptr,wptr,wptr
	#define global EnumUILanguages EnumUILanguagesA
	#func global EnumUILanguagesA "EnumUILanguagesA" sptr,sptr,sptr
	#func global EnumUILanguagesW "EnumUILanguagesW" wptr,wptr,wptr
	#func global EraseTape "EraseTape" sptr,sptr,sptr
	#func global EscapeCommFunction "EscapeCommFunction" sptr,sptr
	#func global ExitProcess "ExitProcess" sptr
	#func global ExitThread "ExitThread" sptr
	#define global ExpandEnvironmentStrings ExpandEnvironmentStringsA
	#func global ExpandEnvironmentStringsA "ExpandEnvironmentStringsA" sptr,sptr,sptr
	#func global ExpandEnvironmentStringsW "ExpandEnvironmentStringsW" wptr,wptr,wptr
	#define global FatalAppExit FatalAppExitA
	#func global FatalAppExitA "FatalAppExitA" sptr,sptr
	#func global FatalAppExitW "FatalAppExitW" wptr,wptr
	#func global FatalExit "FatalExit" sptr
	#func global FileTimeToDosDateTime "FileTimeToDosDateTime" sptr,sptr,sptr
	#func global FileTimeToLocalFileTime "FileTimeToLocalFileTime" sptr,sptr
	#func global FileTimeToSystemTime "FileTimeToSystemTime" sptr,sptr
	#func global FillConsoleOutputAttribute "FillConsoleOutputAttribute" sptr,sptr,sptr,sptr,sptr
	#define global FillConsoleOutputCharacter FillConsoleOutputCharacterA
	#func global FillConsoleOutputCharacterA "FillConsoleOutputCharacterA" sptr,sptr,sptr,sptr,sptr
	#func global FillConsoleOutputCharacterW "FillConsoleOutputCharacterW" wptr,wptr,wptr,wptr,wptr
	#define global FindAtom FindAtomA
	#func global FindAtomA "FindAtomA" sptr
	#func global FindAtomW "FindAtomW" wptr
	#func global FindClose "FindClose" sptr
	#func global FindCloseChangeNotification "FindCloseChangeNotification" sptr
	#define global FindFirstChangeNotification FindFirstChangeNotificationA
	#func global FindFirstChangeNotificationA "FindFirstChangeNotificationA" sptr,sptr,sptr
	#func global FindFirstChangeNotificationW "FindFirstChangeNotificationW" wptr,wptr,wptr
	#define global FindFirstFile FindFirstFileA
	#func global FindFirstFileA "FindFirstFileA" sptr,sptr
	#define global FindFirstFileEx FindFirstFileExA
	#func global FindFirstFileExA "FindFirstFileExA" sptr,sptr,sptr,sptr,sptr,sptr
	#func global FindFirstFileExW "FindFirstFileExW" wptr,wptr,wptr,wptr,wptr,wptr
	#func global FindFirstFileW "FindFirstFileW" wptr,wptr
	#define global FindFirstVolume FindFirstVolumeA
	#func global FindFirstVolumeA "FindFirstVolumeA" sptr,sptr
	#define global FindFirstVolumeMountPoint FindFirstVolumeMountPointA
	#func global FindFirstVolumeMountPointA "FindFirstVolumeMountPointA" sptr,sptr,sptr
	#func global FindFirstVolumeMountPointW "FindFirstVolumeMountPointW" wptr,wptr,wptr
	#func global FindFirstVolumeW "FindFirstVolumeW" wptr,wptr
	#func global FindNextChangeNotification "FindNextChangeNotification" sptr
	#define global FindNextFile FindNextFileA
	#func global FindNextFileA "FindNextFileA" sptr,sptr
	#func global FindNextFileW "FindNextFileW" wptr,wptr
	#define global FindNextVolume FindNextVolumeA
	#func global FindNextVolumeA "FindNextVolumeA" sptr,sptr,sptr
	#define global FindNextVolumeMountPoint FindNextVolumeMountPointA
	#func global FindNextVolumeMountPointA "FindNextVolumeMountPointA" sptr,sptr,sptr
	#func global FindNextVolumeMountPointW "FindNextVolumeMountPointW" wptr,wptr,wptr
	#func global FindNextVolumeW "FindNextVolumeW" wptr,wptr,wptr
	#define global FindResource FindResourceA
	#func global FindResourceA "FindResourceA" sptr,sptr,sptr
	#define global FindResourceEx FindResourceExA
	#func global FindResourceExA "FindResourceExA" sptr,sptr,sptr,sptr
	#func global FindResourceExW "FindResourceExW" wptr,wptr,wptr,wptr
	#func global FindResourceW "FindResourceW" wptr,wptr,wptr
	#func global FindVolumeClose "FindVolumeClose" sptr
	#func global FindVolumeMountPointClose "FindVolumeMountPointClose" sptr
	#func global FlushConsoleInputBuffer "FlushConsoleInputBuffer" sptr
	#func global FlushFileBuffers "FlushFileBuffers" sptr
	#func global FlushInstructionCache "FlushInstructionCache" sptr,sptr,sptr
	#func global FlushViewOfFile "FlushViewOfFile" sptr,sptr
	#define global FoldString FoldStringA
	#func global FoldStringA "FoldStringA" sptr,sptr,sptr,sptr,sptr
	#func global FoldStringW "FoldStringW" wptr,wptr,wptr,wptr,wptr
	#define global FormatMessage FormatMessageA
	#func global FormatMessageA "FormatMessageA" sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global FormatMessageW "FormatMessageW" wptr,wptr,wptr,wptr,wptr,wptr,wptr
	#func global FreeConsole "FreeConsole"
	#define global FreeEnvironmentStrings FreeEnvironmentStringsA
	#func global FreeEnvironmentStringsA "FreeEnvironmentStringsA" sptr
	#func global FreeEnvironmentStringsW "FreeEnvironmentStringsW" wptr
	#func global FreeLibrary "FreeLibrary" sptr
	#func global FreeLibraryAndExitThread "FreeLibraryAndExitThread" sptr,sptr
	#func global FreeResource "FreeResource" sptr
	#func global FreeUserPhysicalPages "FreeUserPhysicalPages" sptr,sptr,sptr
	#func global GenerateConsoleCtrlEvent "GenerateConsoleCtrlEvent" sptr,sptr
	#func global GetACP "GetACP"
	#define global GetAtomName GetAtomNameA
	#func global GetAtomNameA "GetAtomNameA" sptr,sptr,sptr
	#func global GetAtomNameW "GetAtomNameW" wptr,wptr,wptr
	#func global GetBinaryType "GetBinaryType" sptr,sptr
	#func global GetBinaryTypeA "GetBinaryTypeA" sptr,sptr
	#func global GetBinaryTypeW "GetBinaryTypeW" wptr,wptr
	#func global GetCPInfo "GetCPInfo" sptr,sptr
	#define global GetCPInfoEx GetCPInfoExA
	#func global GetCPInfoExA "GetCPInfoExA" sptr,sptr,sptr
	#func global GetCPInfoExW "GetCPInfoExW" wptr,wptr,wptr
	#define global GetCalendarInfo GetCalendarInfoA
	#func global GetCalendarInfoA "GetCalendarInfoA" sptr,sptr,sptr,sptr,sptr,sptr
	#func global GetCalendarInfoW "GetCalendarInfoW" wptr,wptr,wptr,wptr,wptr,wptr
	#func global GetCommConfig "GetCommConfig" sptr,sptr,sptr
	#func global GetCommMask "GetCommMask" sptr,sptr
	#func global GetCommModemStatus "GetCommModemStatus" sptr,sptr
	#func global GetCommProperties "GetCommProperties" sptr,sptr
	#func global GetCommState "GetCommState" sptr,sptr
	#func global GetCommTimeouts "GetCommTimeouts" sptr,sptr
	#define global GetCommandLine GetCommandLineA
	#func global GetCommandLineA "GetCommandLineA"
	#func global GetCommandLineW "GetCommandLineW"
	#define global GetCompressedFileSize GetCompressedFileSizeA
	#func global GetCompressedFileSizeA "GetCompressedFileSizeA" sptr,sptr
	#func global GetCompressedFileSizeW "GetCompressedFileSizeW" wptr,wptr
	#define global GetComputerName GetComputerNameA
	#func global GetComputerNameA "GetComputerNameA" sptr,sptr
	#define global GetComputerNameEx GetComputerNameExA
	#func global GetComputerNameExA "GetComputerNameExA" sptr,sptr,sptr
	#func global GetComputerNameExW "GetComputerNameExW" wptr,wptr,wptr
	#func global GetComputerNameW "GetComputerNameW" wptr,wptr
	#func global GetConsoleCP "GetConsoleCP"
	#func global GetConsoleCursorInfo "GetConsoleCursorInfo" sptr,sptr
	#func global GetConsoleMode "GetConsoleMode" sptr,sptr
	#func global GetConsoleOutputCP "GetConsoleOutputCP"
	#func global GetConsoleScreenBufferInfo "GetConsoleScreenBufferInfo" sptr,sptr
	#define global GetConsoleTitle GetConsoleTitleA
	#func global GetConsoleTitleA "GetConsoleTitleA" sptr,sptr
	#func global GetConsoleTitleW "GetConsoleTitleW" wptr,wptr
	#define global GetCurrencyFormat GetCurrencyFormatA
	#func global GetCurrencyFormatA "GetCurrencyFormatA" sptr,sptr,sptr,sptr,sptr,sptr
	#func global GetCurrencyFormatW "GetCurrencyFormatW" wptr,wptr,wptr,wptr,wptr,wptr
	#define global GetCurrentDirectory GetCurrentDirectoryA
	#func global GetCurrentDirectoryA "GetCurrentDirectoryA" sptr,sptr
	#func global GetCurrentDirectoryW "GetCurrentDirectoryW" wptr,wptr
	#func global GetCurrentProcess "GetCurrentProcess"
	#func global GetCurrentProcessId "GetCurrentProcessId"
	#func global GetCurrentThread "GetCurrentThread"
	#func global GetCurrentThreadId "GetCurrentThreadId"
	#define global GetDateFormat GetDateFormatA
	#func global GetDateFormatA "GetDateFormatA" sptr,sptr,sptr,sptr,sptr,sptr
	#func global GetDateFormatW "GetDateFormatW" wptr,wptr,wptr,wptr,wptr,wptr
	#define global GetDefaultCommConfig GetDefaultCommConfigA
	#func global GetDefaultCommConfigA "GetDefaultCommConfigA" sptr,sptr,sptr
	#func global GetDefaultCommConfigW "GetDefaultCommConfigW" wptr,wptr,wptr
	#func global GetDevicePowerState "GetDevicePowerState" sptr,sptr
	#define global GetDiskFreeSpace GetDiskFreeSpaceA
	#func global GetDiskFreeSpaceA "GetDiskFreeSpaceA" sptr,sptr,sptr,sptr,sptr
	#define global GetDiskFreeSpaceEx GetDiskFreeSpaceExA
	#func global GetDiskFreeSpaceExA "GetDiskFreeSpaceExA" sptr,sptr,sptr,sptr
	#func global GetDiskFreeSpaceExW "GetDiskFreeSpaceExW" wptr,wptr,wptr,wptr
	#func global GetDiskFreeSpaceW "GetDiskFreeSpaceW" wptr,wptr,wptr,wptr,wptr
	#define global GetDriveType GetDriveTypeA
	#func global GetDriveTypeA "GetDriveTypeA" sptr
	#func global GetDriveTypeW "GetDriveTypeW" wptr
	#func global GetEnvironmentStrings "GetEnvironmentStrings"
	#func global GetEnvironmentStringsA "GetEnvironmentStringsA"
	#func global GetEnvironmentStringsW "GetEnvironmentStringsW"
	#define global GetEnvironmentVariable GetEnvironmentVariableA
	#func global GetEnvironmentVariableA "GetEnvironmentVariableA" sptr,sptr,sptr
	#func global GetEnvironmentVariableW "GetEnvironmentVariableW" wptr,wptr,wptr
	#func global GetExitCodeProcess "GetExitCodeProcess" sptr,sptr
	#func global GetExitCodeThread "GetExitCodeThread" sptr,sptr
	#define global GetFileAttributes GetFileAttributesA
	#func global GetFileAttributesA "GetFileAttributesA" sptr
	#define global GetFileAttributesEx GetFileAttributesExA
	#func global GetFileAttributesExA "GetFileAttributesExA" sptr,sptr,sptr
	#func global GetFileAttributesExW "GetFileAttributesExW" wptr,wptr,wptr
	#func global GetFileAttributesW "GetFileAttributesW" wptr
	#func global GetFileInformationByHandle "GetFileInformationByHandle" sptr,sptr
	#func global GetFileSize "GetFileSize" sptr,sptr
	#func global GetFileSizeEx "GetFileSizeEx" sptr,sptr
	#func global GetFileTime "GetFileTime" sptr,sptr,sptr,sptr
	#func global GetFileType "GetFileType" sptr
	#define global GetFullPathName GetFullPathNameA
	#func global GetFullPathNameA "GetFullPathNameA" sptr,sptr,sptr,sptr
	#func global GetFullPathNameW "GetFullPathNameW" wptr,wptr,wptr,wptr
	#func global GetHandleInformation "GetHandleInformation" sptr,sptr
	#func global GetLargestConsoleWindowSize "GetLargestConsoleWindowSize" sptr
	#func global GetLastError "GetLastError"
	#func global GetLocalTime "GetLocalTime" sptr
	#define global GetLocaleInfo GetLocaleInfoA
	#func global GetLocaleInfoA "GetLocaleInfoA" sptr,sptr,sptr,sptr
	#func global GetLocaleInfoW "GetLocaleInfoW" wptr,wptr,wptr,wptr
	#define global GetLogicalDriveStrings GetLogicalDriveStringsA
	#func global GetLogicalDriveStringsA "GetLogicalDriveStringsA" sptr,sptr
	#func global GetLogicalDriveStringsW "GetLogicalDriveStringsW" wptr,wptr
	#func global GetLogicalDrives "GetLogicalDrives"
	#define global GetLongPathName GetLongPathNameA
	#func global GetLongPathNameA "GetLongPathNameA" sptr,sptr,sptr
	#func global GetLongPathNameW "GetLongPathNameW" wptr,wptr,wptr
	#func global GetMailslotInfo "GetMailslotInfo" sptr,sptr,sptr,sptr,sptr
	#define global GetModuleFileName GetModuleFileNameA
	#func global GetModuleFileNameA "GetModuleFileNameA" sptr,sptr,sptr
	#func global GetModuleFileNameW "GetModuleFileNameW" wptr,wptr,wptr
	#define global GetModuleHandle GetModuleHandleA
	#func global GetModuleHandleA "GetModuleHandleA" sptr
	#func global GetModuleHandleW "GetModuleHandleW" wptr
	#define global GetNamedPipeHandleState GetNamedPipeHandleStateA
	#func global GetNamedPipeHandleStateA "GetNamedPipeHandleStateA" sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global GetNamedPipeHandleStateW "GetNamedPipeHandleStateW" wptr,wptr,wptr,wptr,wptr,wptr,wptr
	#func global GetNamedPipeInfo "GetNamedPipeInfo" sptr,sptr,sptr,sptr,sptr
	#define global GetNumberFormat GetNumberFormatA
	#func global GetNumberFormatA "GetNumberFormatA" sptr,sptr,sptr,sptr,sptr,sptr
	#func global GetNumberFormatW "GetNumberFormatW" wptr,wptr,wptr,wptr,wptr,wptr
	#func global GetNumberOfConsoleInputEvents "GetNumberOfConsoleInputEvents" sptr,sptr
	#func global GetNumberOfConsoleMouseButtons "GetNumberOfConsoleMouseButtons" sptr
	#func global GetOEMCP "GetOEMCP"
	#func global GetOverlappedResult "GetOverlappedResult" sptr,sptr,sptr,sptr
	#func global GetPriorityClass "GetPriorityClass" sptr
	#define global GetPrivateProfileInt GetPrivateProfileIntA
	#func global GetPrivateProfileIntA "GetPrivateProfileIntA" sptr,sptr,sptr,sptr
	#func global GetPrivateProfileIntW "GetPrivateProfileIntW" wptr,wptr,wptr,wptr
	#define global GetPrivateProfileSection GetPrivateProfileSectionA
	#func global GetPrivateProfileSectionA "GetPrivateProfileSectionA" sptr,sptr,sptr,sptr
	#define global GetPrivateProfileSectionNames GetPrivateProfileSectionNamesA
	#func global GetPrivateProfileSectionNamesA "GetPrivateProfileSectionNamesA" sptr,sptr,sptr
	#func global GetPrivateProfileSectionNamesW "GetPrivateProfileSectionNamesW" wptr,wptr,wptr
	#func global GetPrivateProfileSectionW "GetPrivateProfileSectionW" wptr,wptr,wptr,wptr
	#define global GetPrivateProfileString GetPrivateProfileStringA
	#func global GetPrivateProfileStringA "GetPrivateProfileStringA" sptr,sptr,sptr,sptr,sptr,sptr
	#func global GetPrivateProfileStringW "GetPrivateProfileStringW" wptr,wptr,wptr,wptr,wptr,wptr
	#define global GetPrivateProfileStruct GetPrivateProfileStructA
	#func global GetPrivateProfileStructA "GetPrivateProfileStructA" sptr,sptr,sptr,sptr,sptr
	#func global GetPrivateProfileStructW "GetPrivateProfileStructW" wptr,wptr,wptr,wptr,wptr
	#func global GetProcAddress "GetProcAddress" sptr,sptr
	#func global GetProcessAffinityMask "GetProcessAffinityMask" sptr,sptr,sptr
	#func global GetProcessHeap "GetProcessHeap"
	#func global GetProcessHeaps "GetProcessHeaps" sptr,sptr
	#func global GetProcessIoCounters "GetProcessIoCounters" sptr,sptr
	#func global GetProcessPriorityBoost "GetProcessPriorityBoost" sptr,sptr
	#func global GetProcessShutdownParameters "GetProcessShutdownParameters" sptr,sptr
	#func global GetProcessTimes "GetProcessTimes" sptr,sptr,sptr,sptr,sptr
	#func global GetProcessVersion "GetProcessVersion" sptr
	#func global GetProcessWorkingSetSize "GetProcessWorkingSetSize" sptr,sptr,sptr
	#define global GetProfileInt GetProfileIntA
	#func global GetProfileIntA "GetProfileIntA" sptr,sptr,sptr
	#func global GetProfileIntW "GetProfileIntW" wptr,wptr,wptr
	#define global GetProfileSection GetProfileSectionA
	#func global GetProfileSectionA "GetProfileSectionA" sptr,sptr,sptr
	#func global GetProfileSectionW "GetProfileSectionW" wptr,wptr,wptr
	#define global GetProfileString GetProfileStringA
	#func global GetProfileStringA "GetProfileStringA" sptr,sptr,sptr,sptr,sptr
	#func global GetProfileStringW "GetProfileStringW" wptr,wptr,wptr,wptr,wptr
	#func global GetQueuedCompletionStatus "GetQueuedCompletionStatus" sptr,sptr,sptr,sptr,sptr
	#define global GetShortPathName GetShortPathNameA
	#func global GetShortPathNameA "GetShortPathNameA" sptr,sptr,sptr
	#func global GetShortPathNameW "GetShortPathNameW" wptr,wptr,wptr
	#define global GetStartupInfo GetStartupInfoA
	#func global GetStartupInfoA "GetStartupInfoA" sptr
	#func global GetStartupInfoW "GetStartupInfoW" wptr
	#func global GetStdHandle "GetStdHandle" sptr
	#define global GetStringType GetStringTypeA
	#func global GetStringTypeA "GetStringTypeA" sptr,sptr,sptr,sptr,sptr
	#define global GetStringTypeEx GetStringTypeExA
	#func global GetStringTypeExA "GetStringTypeExA" sptr,sptr,sptr,sptr,sptr
	#func global GetStringTypeExW "GetStringTypeExW" wptr,wptr,wptr,wptr,wptr
	#func global GetStringTypeW "GetStringTypeW" wptr,wptr,wptr,wptr
	#func global GetSystemDefaultLCID "GetSystemDefaultLCID"
	#func global GetSystemDefaultLangID "GetSystemDefaultLangID"
	#func global GetSystemDefaultUILanguage "GetSystemDefaultUILanguage"
	#define global GetSystemDirectory GetSystemDirectoryA
	#func global GetSystemDirectoryA "GetSystemDirectoryA" sptr,sptr
	#func global GetSystemDirectoryW "GetSystemDirectoryW" wptr,wptr
	#func global GetSystemInfo "GetSystemInfo" sptr
	#func global GetSystemPowerStatus "GetSystemPowerStatus" sptr
	#func global GetSystemTime "GetSystemTime" sptr
	#func global GetSystemTimeAdjustment "GetSystemTimeAdjustment" sptr,sptr,sptr
	#func global GetSystemTimeAsFileTime "GetSystemTimeAsFileTime" sptr
	#define global GetSystemWindowsDirectory GetSystemWindowsDirectoryA
	#func global GetSystemWindowsDirectoryA "GetSystemWindowsDirectoryA" sptr,sptr
	#func global GetSystemWindowsDirectoryW "GetSystemWindowsDirectoryW" wptr,wptr
	#func global GetTapeParameters "GetTapeParameters" sptr,sptr,sptr,sptr
	#func global GetTapePosition "GetTapePosition" sptr,sptr,sptr,sptr,sptr
	#func global GetTapeStatus "GetTapeStatus" sptr
	#define global GetTempFileName GetTempFileNameA
	#func global GetTempFileNameA "GetTempFileNameA" sptr,sptr,sptr,sptr
	#func global GetTempFileNameW "GetTempFileNameW" wptr,wptr,wptr,wptr
	#define global GetTempPath GetTempPathA
	#func global GetTempPathA "GetTempPathA" sptr,sptr
	#func global GetTempPathW "GetTempPathW" wptr,wptr
	#func global GetThreadContext "GetThreadContext" sptr,sptr
	#func global GetThreadLocale "GetThreadLocale"
	#func global GetThreadPriority "GetThreadPriority" sptr
	#func global GetThreadPriorityBoost "GetThreadPriorityBoost" sptr,sptr
	#func global GetThreadSelectorEntry "GetThreadSelectorEntry" sptr,sptr,sptr
	#func global GetThreadTimes "GetThreadTimes" sptr,sptr,sptr,sptr,sptr
	#func global GetTickCount "GetTickCount"
	#define global GetTimeFormat GetTimeFormatA
	#func global GetTimeFormatA "GetTimeFormatA" sptr,sptr,sptr,sptr,sptr,sptr
	#func global GetTimeFormatW "GetTimeFormatW" wptr,wptr,wptr,wptr,wptr,wptr
	#func global GetTimeZoneInformation "GetTimeZoneInformation" sptr
	#func global GetUserDefaultLCID "GetUserDefaultLCID"
	#func global GetUserDefaultLangID "GetUserDefaultLangID"
	#func global GetUserDefaultUILanguage "GetUserDefaultUILanguage"
	#func global GetVersion "GetVersion"
	#define global GetVersionEx GetVersionExA
	#func global GetVersionExA "GetVersionExA" sptr
	#func global GetVersionExW "GetVersionExW" wptr
	#define global GetVolumeInformation GetVolumeInformationA
	#func global GetVolumeInformationA "GetVolumeInformationA" sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global GetVolumeInformationW "GetVolumeInformationW" wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr
	#define global GetVolumeNameForVolumeMountPoint GetVolumeNameForVolumeMountPointA
	#func global GetVolumeNameForVolumeMountPointA "GetVolumeNameForVolumeMountPointA" sptr,sptr,sptr
	#func global GetVolumeNameForVolumeMountPointW "GetVolumeNameForVolumeMountPointW" wptr,wptr,wptr
	#define global GetVolumePathName GetVolumePathNameA
	#func global GetVolumePathNameA "GetVolumePathNameA" sptr,sptr,sptr
	#func global GetVolumePathNameW "GetVolumePathNameW" wptr,wptr,wptr
	#define global GetWindowsDirectory GetWindowsDirectoryA
	#func global GetWindowsDirectoryA "GetWindowsDirectoryA" sptr,sptr
	#func global GetWindowsDirectoryW "GetWindowsDirectoryW" wptr,wptr
	#func global GetWriteWatch "GetWriteWatch" sptr,sptr,sptr,sptr,sptr,sptr
	#define global GlobalAddAtom GlobalAddAtomA
	#func global GlobalAddAtomA "GlobalAddAtomA" sptr
	#func global GlobalAddAtomW "GlobalAddAtomW" wptr
	#func global GlobalAlloc "GlobalAlloc" sptr,sptr
	#func global GlobalCompact "GlobalCompact" sptr
	#func global GlobalDeleteAtom "GlobalDeleteAtom" sptr
	#define global GlobalFindAtom GlobalFindAtomA
	#func global GlobalFindAtomA "GlobalFindAtomA" sptr
	#func global GlobalFindAtomW "GlobalFindAtomW" wptr
	#func global GlobalFix "GlobalFix" sptr
	#func global GlobalFlags "GlobalFlags" sptr
	#func global GlobalFree "GlobalFree" sptr
	#define global GlobalGetAtomName GlobalGetAtomNameA
	#func global GlobalGetAtomNameA "GlobalGetAtomNameA" sptr,sptr,sptr
	#func global GlobalGetAtomNameW "GlobalGetAtomNameW" wptr,wptr,wptr
	#func global GlobalHandle "GlobalHandle" sptr
	#func global GlobalLock "GlobalLock" sptr
	#func global GlobalMemoryStatus "GlobalMemoryStatus" sptr
	#func global GlobalMemoryStatusEx "GlobalMemoryStatusEx" sptr
	#func global GlobalReAlloc "GlobalReAlloc" sptr,sptr,sptr
	#func global GlobalSize "GlobalSize" sptr
	#func global GlobalUnWire "GlobalUnWire" sptr
	#func global GlobalUnfix "GlobalUnfix" sptr
	#func global GlobalUnlock "GlobalUnlock" sptr
	#func global GlobalWire "GlobalWire" sptr
	#func global Heap32First "Heap32First" sptr,sptr,sptr
	#func global Heap32ListFirst "Heap32ListFirst" sptr,sptr
	#func global Heap32ListNext "Heap32ListNext" sptr,sptr
	#func global Heap32Next "Heap32Next" sptr
	#func global HeapAlloc "HeapAlloc" sptr,sptr,sptr
	#func global HeapCompact "HeapCompact" sptr,sptr
	#func global HeapCreate "HeapCreate" sptr,sptr,sptr
	#func global HeapDestroy "HeapDestroy" sptr
	#func global HeapFree "HeapFree" sptr,sptr,sptr
	#func global HeapLock "HeapLock" sptr
	#func global HeapReAlloc "HeapReAlloc" sptr,sptr,sptr,sptr
	#func global HeapSize "HeapSize" sptr,sptr,sptr
	#func global HeapUnlock "HeapUnlock" sptr
	#func global HeapValidate "HeapValidate" sptr,sptr,sptr
	#func global HeapWalk "HeapWalk" sptr,sptr
	#func global InitAtomTable "InitAtomTable" sptr
	#func global InitializeCriticalSection "InitializeCriticalSection" sptr
	#func global InitializeCriticalSectionAndSpinCount "InitializeCriticalSectionAndSpinCount" sptr,sptr
	#func global InterlockedCompareExchange "InterlockedCompareExchange" sptr,sptr,sptr
	#func global InterlockedDecrement "InterlockedDecrement" sptr
	#func global InterlockedExchange "InterlockedExchange" sptr,sptr
	#func global InterlockedExchangeAdd "InterlockedExchangeAdd" sptr,sptr
	#func global InterlockedIncrement "InterlockedIncrement" sptr
	#func global IsBadCodePtr "IsBadCodePtr" sptr
	#func global IsBadHugeReadPtr "IsBadHugeReadPtr" sptr,sptr
	#func global IsBadHugeWritePtr "IsBadHugeWritePtr" sptr,sptr
	#func global IsBadReadPtr "IsBadReadPtr" sptr,sptr
	#define global IsBadStringPtr IsBadStringPtrA
	#func global IsBadStringPtrA "IsBadStringPtrA" sptr,sptr
	#func global IsBadStringPtrW "IsBadStringPtrW" wptr,wptr
	#func global IsBadWritePtr "IsBadWritePtr" sptr,sptr
	#func global IsDBCSLeadByte "IsDBCSLeadByte" sptr
	#func global IsDBCSLeadByteEx "IsDBCSLeadByteEx" sptr,sptr
	#func global IsDebuggerPresent "IsDebuggerPresent"
	#func global IsProcessorFeaturePresent "IsProcessorFeaturePresent" sptr
	#func global IsSystemResumeAutomatic "IsSystemResumeAutomatic"
	#func global IsValidCodePage "IsValidCodePage" sptr
	#func global IsValidLanguageGroup "IsValidLanguageGroup" sptr,sptr
	#func global IsValidLocale "IsValidLocale" sptr,sptr
	#define global LCMapString LCMapStringA
	#func global LCMapStringA "LCMapStringA" sptr,sptr,sptr,sptr,sptr,sptr
	#func global LCMapStringW "LCMapStringW" wptr,wptr,wptr,wptr,wptr,wptr
	#func global LeaveCriticalSection "LeaveCriticalSection" sptr
	#define global LoadLibrary LoadLibraryA
	#func global LoadLibraryA "LoadLibraryA" sptr
	#define global LoadLibraryEx LoadLibraryExA
	#func global LoadLibraryExA "LoadLibraryExA" sptr,sptr,sptr
	#func global LoadLibraryExW "LoadLibraryExW" wptr,wptr,wptr
	#func global LoadLibraryW "LoadLibraryW" wptr
	#func global LoadModule "LoadModule" sptr,sptr
	#func global LoadResource "LoadResource" sptr,sptr
	#func global LocalAlloc "LocalAlloc" sptr,sptr
	#func global LocalCompact "LocalCompact" sptr
	#func global LocalFileTimeToFileTime "LocalFileTimeToFileTime" sptr,sptr
	#func global LocalFlags "LocalFlags" sptr
	#func global LocalFree "LocalFree" sptr
	#func global LocalHandle "LocalHandle" sptr
	#func global LocalLock "LocalLock" sptr
	#func global LocalReAlloc "LocalReAlloc" sptr,sptr,sptr
	#func global LocalShrink "LocalShrink" sptr,sptr
	#func global LocalSize "LocalSize" sptr
	#func global LocalUnlock "LocalUnlock" sptr
	#func global LockFile "LockFile" sptr,sptr,sptr,sptr,sptr
	#func global LockFileEx "LockFileEx" sptr,sptr,sptr,sptr,sptr,sptr
	#func global LockResource "LockResource" sptr
	#func global MapUserPhysicalPages "MapUserPhysicalPages" sptr,sptr,sptr
	#func global MapUserPhysicalPagesScatter "MapUserPhysicalPagesScatter" sptr,sptr,sptr
	#func global MapViewOfFile "MapViewOfFile" sptr,sptr,sptr,sptr,sptr
	#func global MapViewOfFileEx "MapViewOfFileEx" sptr,sptr,sptr,sptr,sptr,sptr
	#func global Module32First "Module32First" sptr,sptr
	#func global Module32FirstW "Module32FirstW" wptr,wptr
	#func global Module32Next "Module32Next" sptr,sptr
	#func global Module32NextW "Module32NextW" wptr,wptr
	#define global MoveFile MoveFileA
	#func global MoveFileA "MoveFileA" sptr,sptr
	#define global MoveFileEx MoveFileExA
	#func global MoveFileExA "MoveFileExA" sptr,sptr,sptr
	#func global MoveFileExW "MoveFileExW" wptr,wptr,wptr
	#func global MoveFileW "MoveFileW" wptr,wptr
	#define global MoveFileWithProgress MoveFileWithProgressA
	#func global MoveFileWithProgressA "MoveFileWithProgressA" sptr,sptr,sptr,sptr,sptr
	#func global MoveFileWithProgressW "MoveFileWithProgressW" wptr,wptr,wptr,wptr,wptr
	#func global MulDiv "MulDiv" sptr,sptr,sptr
	#func global MultiByteToWideChar "MultiByteToWideChar" sptr,sptr,sptr,sptr,sptr,sptr
	#define global OpenEvent OpenEventA
	#func global OpenEventA "OpenEventA" sptr,sptr,sptr
	#func global OpenEventW "OpenEventW" wptr,wptr,wptr
	#func global OpenFile "OpenFile" sptr,sptr,sptr
	#define global OpenFileMapping OpenFileMappingA
	#func global OpenFileMappingA "OpenFileMappingA" sptr,sptr,sptr
	#func global OpenFileMappingW "OpenFileMappingW" wptr,wptr,wptr
	#define global OpenJobObject OpenJobObjectA
	#func global OpenJobObjectA "OpenJobObjectA" sptr,sptr,sptr
	#func global OpenJobObjectW "OpenJobObjectW" wptr,wptr,wptr
	#define global OpenMutex OpenMutexA
	#func global OpenMutexA "OpenMutexA" sptr,sptr,sptr
	#func global OpenMutexW "OpenMutexW" wptr,wptr,wptr
	#func global OpenProcess "OpenProcess" sptr,sptr,sptr
	#define global OpenSemaphore OpenSemaphoreA
	#func global OpenSemaphoreA "OpenSemaphoreA" sptr,sptr,sptr
	#func global OpenSemaphoreW "OpenSemaphoreW" wptr,wptr,wptr
	#func global OpenThread "OpenThread" sptr,sptr,sptr
	#define global OpenWaitableTimer OpenWaitableTimerA
	#func global OpenWaitableTimerA "OpenWaitableTimerA" sptr,sptr,sptr
	#func global OpenWaitableTimerW "OpenWaitableTimerW" wptr,wptr,wptr
	#define global OutputDebugString OutputDebugStringA
	#func global OutputDebugStringA "OutputDebugStringA" sptr
	#func global OutputDebugStringW "OutputDebugStringW" wptr
	#define global PeekConsoleInput PeekConsoleInputA
	#func global PeekConsoleInputA "PeekConsoleInputA" sptr,sptr,sptr,sptr
	#func global PeekConsoleInputW "PeekConsoleInputW" wptr,wptr,wptr,wptr
	#func global PeekNamedPipe "PeekNamedPipe" sptr,sptr,sptr,sptr,sptr,sptr
	#func global PostQueuedCompletionStatus "PostQueuedCompletionStatus" sptr,sptr,sptr,sptr
	#func global PrepareTape "PrepareTape" sptr,sptr,sptr
	#func global Process32First "Process32First" sptr,sptr
	#func global Process32FirstW "Process32FirstW" wptr,wptr
	#func global Process32Next "Process32Next" sptr,sptr
	#func global Process32NextW "Process32NextW" wptr,wptr
	#func global ProcessIdToSessionId "ProcessIdToSessionId" sptr,sptr
	#func global PulseEvent "PulseEvent" sptr
	#func global PurgeComm "PurgeComm" sptr,sptr
	#define global QueryDosDevice QueryDosDeviceA
	#func global QueryDosDeviceA "QueryDosDeviceA" sptr,sptr,sptr
	#func global QueryDosDeviceW "QueryDosDeviceW" wptr,wptr,wptr
	#func global QueryInformationJobObject "QueryInformationJobObject" sptr,sptr,sptr,sptr,sptr
	#func global QueryPerformanceCounter "QueryPerformanceCounter" sptr
	#func global QueryPerformanceFrequency "QueryPerformanceFrequency" sptr
	#func global QueueUserAPC "QueueUserAPC" sptr,sptr,sptr
	#func global QueueUserWorkItem "QueueUserWorkItem" sptr,sptr,sptr
	#func global RaiseException "RaiseException" sptr,sptr,sptr,sptr
	#define global ReadConsole ReadConsoleA
	#func global ReadConsoleA "ReadConsoleA" sptr,sptr,sptr,sptr,sptr
	#define global ReadConsoleInput ReadConsoleInputA
	#func global ReadConsoleInputA "ReadConsoleInputA" sptr,sptr,sptr,sptr
	#func global ReadConsoleInputW "ReadConsoleInputW" wptr,wptr,wptr,wptr
	#define global ReadConsoleOutput ReadConsoleOutputA
	#func global ReadConsoleOutputA "ReadConsoleOutputA" sptr,sptr,sptr,sptr,sptr
	#func global ReadConsoleOutputAttribute "ReadConsoleOutputAttribute" sptr,sptr,sptr,sptr,sptr
	#define global ReadConsoleOutputCharacter ReadConsoleOutputCharacterA
	#func global ReadConsoleOutputCharacterA "ReadConsoleOutputCharacterA" sptr,sptr,sptr,sptr,sptr
	#func global ReadConsoleOutputCharacterW "ReadConsoleOutputCharacterW" wptr,wptr,wptr,wptr,wptr
	#func global ReadConsoleOutputW "ReadConsoleOutputW" wptr,wptr,wptr,wptr,wptr
	#func global ReadConsoleW "ReadConsoleW" wptr,wptr,wptr,wptr,wptr
	#func global ReadDirectoryChangesW "ReadDirectoryChangesW" wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr
	#func global ReadFile "ReadFile" sptr,sptr,sptr,sptr,sptr
	#func global ReadFileEx "ReadFileEx" sptr,sptr,sptr,sptr,sptr
	#func global ReadFileScatter "ReadFileScatter" sptr,sptr,sptr,sptr,sptr
	#func global ReadProcessMemory "ReadProcessMemory" sptr,sptr,sptr,sptr,sptr
	#func global RegisterWaitForSingleObject "RegisterWaitForSingleObject" sptr,sptr,sptr,sptr,sptr,sptr
	#func global RegisterWaitForSingleObjectEx "RegisterWaitForSingleObjectEx" sptr,sptr,sptr,sptr,sptr
	#func global ReleaseMutex "ReleaseMutex" sptr
	#func global ReleaseSemaphore "ReleaseSemaphore" sptr,sptr,sptr
	#define global RemoveDirectory RemoveDirectoryA
	#func global RemoveDirectoryA "RemoveDirectoryA" sptr
	#func global RemoveDirectoryW "RemoveDirectoryW" wptr
	#func global ReplaceFile "ReplaceFile" sptr,sptr,sptr,sptr,sptr,sptr
	#func global ReplaceFileA "ReplaceFileA" sptr,sptr,sptr,sptr,sptr,sptr
	#func global ReplaceFileW "ReplaceFileW" wptr,wptr,wptr,wptr,wptr,wptr
	#func global RequestDeviceWakeup "RequestDeviceWakeup" sptr
	#func global RequestWakeupLatency "RequestWakeupLatency" sptr
	#func global ResetEvent "ResetEvent" sptr
	#func global ResetWriteWatch "ResetWriteWatch" sptr,sptr
	#func global ResumeThread "ResumeThread" sptr
	#func global RtlFillMemory "RtlFillMemory" sptr,sptr,sptr
	#func global RtlMoveMemory "RtlMoveMemory" sptr,sptr,sptr
	#func global RtlUnwind "RtlUnwind" sptr,sptr,sptr,sptr
	#func global RtlZeroMemory "RtlZeroMemory" sptr,sptr
	#define global ScrollConsoleScreenBuffer ScrollConsoleScreenBufferA
	#func global ScrollConsoleScreenBufferA "ScrollConsoleScreenBufferA" sptr,sptr,sptr,sptr,sptr
	#func global ScrollConsoleScreenBufferW "ScrollConsoleScreenBufferW" wptr,wptr,wptr,wptr,wptr
	#define global SearchPath SearchPathA
	#func global SearchPathA "SearchPathA" sptr,sptr,sptr,sptr,sptr,sptr
	#func global SearchPathW "SearchPathW" wptr,wptr,wptr,wptr,wptr,wptr
	#define global SetCalendarInfo SetCalendarInfoA
	#func global SetCalendarInfoA "SetCalendarInfoA" sptr,sptr,sptr,sptr
	#func global SetCalendarInfoW "SetCalendarInfoW" wptr,wptr,wptr,wptr
	#func global SetCommBreak "SetCommBreak" sptr
	#func global SetCommConfig "SetCommConfig" sptr,sptr,sptr
	#func global SetCommMask "SetCommMask" sptr,sptr
	#func global SetCommState "SetCommState" sptr,sptr
	#func global SetCommTimeouts "SetCommTimeouts" sptr,sptr
	#define global SetComputerName SetComputerNameA
	#func global SetComputerNameA "SetComputerNameA" sptr
	#define global SetComputerNameEx SetComputerNameExA
	#func global SetComputerNameExA "SetComputerNameExA" sptr,sptr
	#func global SetComputerNameExW "SetComputerNameExW" wptr,wptr
	#func global SetComputerNameW "SetComputerNameW" wptr
	#func global SetConsoleActiveScreenBuffer "SetConsoleActiveScreenBuffer" sptr
	#func global SetConsoleCP "SetConsoleCP" sptr
	#func global SetConsoleCtrlHandler "SetConsoleCtrlHandler" sptr,sptr
	#func global SetConsoleCursor "SetConsoleCursor" sptr,sptr
	#func global SetConsoleCursorInfo "SetConsoleCursorInfo" sptr,sptr
	#func global SetConsoleCursorPosition "SetConsoleCursorPosition" sptr,sptr
	#func global SetConsoleMode "SetConsoleMode" sptr,sptr
	#func global SetConsoleOutputCP "SetConsoleOutputCP" sptr
	#func global SetConsoleScreenBufferSize "SetConsoleScreenBufferSize" sptr,sptr
	#func global SetConsoleTextAttribute "SetConsoleTextAttribute" sptr,sptr
	#define global SetConsoleTitle SetConsoleTitleA
	#func global SetConsoleTitleA "SetConsoleTitleA" sptr
	#func global SetConsoleTitleW "SetConsoleTitleW" wptr
	#func global SetConsoleWindowInfo "SetConsoleWindowInfo" sptr,sptr,sptr
	#func global SetCriticalSectionSpinCount "SetCriticalSectionSpinCount" sptr,sptr
	#define global SetCurrentDirectory SetCurrentDirectoryA
	#func global SetCurrentDirectoryA "SetCurrentDirectoryA" sptr
	#func global SetCurrentDirectoryW "SetCurrentDirectoryW" wptr
	#define global SetDefaultCommConfig SetDefaultCommConfigA
	#func global SetDefaultCommConfigA "SetDefaultCommConfigA" sptr,sptr,sptr
	#func global SetDefaultCommConfigW "SetDefaultCommConfigW" wptr,wptr,wptr
	#func global SetEndOfFile "SetEndOfFile" sptr
	#define global SetEnvironmentVariable SetEnvironmentVariableA
	#func global SetEnvironmentVariableA "SetEnvironmentVariableA" sptr,sptr
	#func global SetEnvironmentVariableW "SetEnvironmentVariableW" wptr,wptr
	#func global SetErrorMode "SetErrorMode" sptr
	#func global SetEvent "SetEvent" sptr
	#func global SetFileApisToANSI "SetFileApisToANSI"
	#func global SetFileApisToOEM "SetFileApisToOEM"
	#define global SetFileAttributes SetFileAttributesA
	#func global SetFileAttributesA "SetFileAttributesA" sptr,sptr
	#func global SetFileAttributesW "SetFileAttributesW" wptr,wptr
	#func global SetFilePointer "SetFilePointer" sptr,sptr,sptr,sptr
	#func global SetFilePointerEx "SetFilePointerEx" sptr,sptr,sptr,sptr,sptr
	#func global SetFileTime "SetFileTime" sptr,sptr,sptr,sptr
	#func global SetHandleCount "SetHandleCount" sptr
	#func global SetHandleInformation "SetHandleInformation" sptr,sptr,sptr
	#func global SetInformationJobObject "SetInformationJobObject" sptr,sptr,sptr,sptr
	#func global SetLastError "SetLastError" sptr
	#func global SetLocalTime "SetLocalTime" sptr
	#define global SetLocaleInfo SetLocaleInfoA
	#func global SetLocaleInfoA "SetLocaleInfoA" sptr,sptr,sptr
	#func global SetLocaleInfoW "SetLocaleInfoW" wptr,wptr,wptr
	#func global SetMailslotInfo "SetMailslotInfo" sptr,sptr
	#func global SetMessageWaitingIndicator "SetMessageWaitingIndicator" sptr,sptr
	#func global SetNamedPipeHandleState "SetNamedPipeHandleState" sptr,sptr,sptr,sptr
	#func global SetPriorityClass "SetPriorityClass" sptr,sptr
	#func global SetProcessAffinityMask "SetProcessAffinityMask" sptr,sptr
	#func global SetProcessPriorityBoost "SetProcessPriorityBoost" sptr,sptr
	#func global SetProcessShutdownParameters "SetProcessShutdownParameters" sptr,sptr
	#func global SetProcessWorkingSetSize "SetProcessWorkingSetSize" sptr,sptr,sptr
	#func global SetStdHandle "SetStdHandle" sptr,sptr
	#func global SetSystemPowerState "SetSystemPowerState" sptr,sptr
	#func global SetSystemTime "SetSystemTime" sptr
	#func global SetSystemTimeAdjustment "SetSystemTimeAdjustment" sptr,sptr
	#func global SetTapeParameters "SetTapeParameters" sptr,sptr,sptr
	#func global SetTapePosition "SetTapePosition" sptr,sptr,sptr,sptr,sptr,sptr
	#func global SetThreadAffinityMask "SetThreadAffinityMask" sptr,sptr
	#func global SetThreadContext "SetThreadContext" sptr,sptr
	#func global SetThreadExecutionState "SetThreadExecutionState" sptr
	#func global SetThreadIdealProcessor "SetThreadIdealProcessor" sptr,sptr
	#func global SetThreadLocale "SetThreadLocale" sptr
	#func global SetThreadPriority "SetThreadPriority" sptr,sptr
	#func global SetThreadPriorityBoost "SetThreadPriorityBoost" sptr,sptr
	#func global SetTimeZoneInformation "SetTimeZoneInformation" sptr
	#func global SetTimerQueueTimer "SetTimerQueueTimer" sptr,sptr,sptr,sptr,sptr,sptr
	#func global SetUnhandledExceptionFilter "SetUnhandledExceptionFilter" sptr
	#define global SetVolumeLabel SetVolumeLabelA
	#func global SetVolumeLabelA "SetVolumeLabelA" sptr,sptr
	#func global SetVolumeLabelW "SetVolumeLabelW" wptr,wptr
	#define global SetVolumeMountPoint SetVolumeMountPointA
	#func global SetVolumeMountPointA "SetVolumeMountPointA" sptr,sptr
	#func global SetVolumeMountPointW "SetVolumeMountPointW" wptr,wptr
	#func global SetWaitableTimer "SetWaitableTimer" sptr,sptr,sptr,sptr,sptr,sptr
	#func global SetupComm "SetupComm" sptr,sptr,sptr
	#func global SignalObjectAndWait "SignalObjectAndWait" sptr,sptr,sptr,sptr
	#func global SizeofResource "SizeofResource" sptr,sptr
	#func global Sleep "Sleep" sptr
	#func global SleepEx "SleepEx" sptr,sptr
	#func global SuspendThread "SuspendThread" sptr
	#func global SwitchToFiber "SwitchToFiber" sptr
	#func global SwitchToThread "SwitchToThread"
	#func global SystemTimeToFileTime "SystemTimeToFileTime" sptr,sptr
	#func global SystemTimeToTzSpecificLocalTime "SystemTimeToTzSpecificLocalTime" sptr,sptr,sptr
	#func global TerminateJobObject "TerminateJobObject" sptr,sptr
	#func global TerminateProcess "TerminateProcess" sptr,sptr
	#func global TerminateThread "TerminateThread" sptr,sptr
	#func global Thread32First "Thread32First" sptr,sptr
	#func global Thread32Next "Thread32Next" sptr,sptr
	#func global TlsAlloc "TlsAlloc"
	#func global TlsFree "TlsFree" sptr
	#func global TlsGetValue "TlsGetValue" sptr
	#func global TlsSetValue "TlsSetValue" sptr,sptr
	#func global Toolhelp32ReadProcessMemory "Toolhelp32ReadProcessMemory" sptr,sptr,sptr,sptr,sptr
	#func global TransactNamedPipe "TransactNamedPipe" sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global TransmitCommChar "TransmitCommChar" sptr,sptr
	#func global TryEnterCriticalSection "TryEnterCriticalSection" sptr
	#func global UnhandledExceptionFilter "UnhandledExceptionFilter" sptr
	#func global UnlockFile "UnlockFile" sptr,sptr,sptr,sptr,sptr
	#func global UnlockFileEx "UnlockFileEx" sptr,sptr,sptr,sptr,sptr
	#func global UnmapViewOfFile "UnmapViewOfFile" sptr
	#func global UnregisterWait "UnregisterWait" sptr
	#func global UnregisterWaitEx "UnregisterWaitEx" sptr,sptr
	#define global UpdateResource UpdateResourceA
	#func global UpdateResourceA "UpdateResourceA" sptr,sptr,sptr,sptr,sptr,sptr
	#func global UpdateResourceW "UpdateResourceW" wptr,wptr,wptr,wptr,wptr,wptr
	#define global VerLanguageName VerLanguageNameA
	#func global VerLanguageNameA "VerLanguageNameA" sptr,sptr,sptr
	#func global VerLanguageNameW "VerLanguageNameW" wptr,wptr,wptr
	#func global VerSetConditionMask "VerSetConditionMask" sptr,sptr,sptr,sptr
	#define global VerifyVersionInfo VerifyVersionInfoA
	#func global VerifyVersionInfoA "VerifyVersionInfoA" sptr,sptr,sptr,sptr
	#func global VerifyVersionInfoW "VerifyVersionInfoW" wptr,wptr,wptr,wptr
	#func global VirtualAlloc "VirtualAlloc" sptr,sptr,sptr,sptr
	#func global VirtualAllocEx "VirtualAllocEx" sptr,sptr,sptr,sptr,sptr
	#func global VirtualFree "VirtualFree" sptr,sptr,sptr
	#func global VirtualFreeEx "VirtualFreeEx" sptr,sptr,sptr,sptr
	#func global VirtualLock "VirtualLock" sptr,sptr
	#func global VirtualProtect "VirtualProtect" sptr,sptr,sptr,sptr
	#func global VirtualProtectEx "VirtualProtectEx" sptr,sptr,sptr,sptr,sptr
	#func global VirtualQuery "VirtualQuery" sptr,sptr,sptr
	#func global VirtualQueryEx "VirtualQueryEx" sptr,sptr,sptr,sptr
	#func global VirtualUnlock "VirtualUnlock" sptr,sptr
	#func global WaitCommEvent "WaitCommEvent" sptr,sptr,sptr
	#func global WaitForDebugEvent "WaitForDebugEvent" sptr,sptr
	#func global WaitForMultipleObjects "WaitForMultipleObjects" sptr,sptr,sptr,sptr
	#func global WaitForMultipleObjectsEx "WaitForMultipleObjectsEx" sptr,sptr,sptr,sptr,sptr
	#func global WaitForSingleObject "WaitForSingleObject" sptr,sptr
	#func global WaitForSingleObjectEx "WaitForSingleObjectEx" sptr,sptr,sptr
	#define global WaitNamedPipe WaitNamedPipeA
	#func global WaitNamedPipeA "WaitNamedPipeA" sptr,sptr
	#func global WaitNamedPipeW "WaitNamedPipeW" wptr,wptr
	#func global WideCharToMultiByte "WideCharToMultiByte" sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global WinExec "WinExec" sptr,sptr
	#define global WriteConsole WriteConsoleA
	#func global WriteConsoleA "WriteConsoleA" sptr,sptr,sptr,sptr,sptr
	#define global WriteConsoleInput WriteConsoleInputA
	#func global WriteConsoleInputA "WriteConsoleInputA" sptr,sptr,sptr,sptr
	#func global WriteConsoleInputW "WriteConsoleInputW" wptr,wptr,wptr,wptr
	#define global WriteConsoleOutput WriteConsoleOutputA
	#func global WriteConsoleOutputA "WriteConsoleOutputA" sptr,sptr,sptr,sptr,sptr
	#func global WriteConsoleOutputAttribute "WriteConsoleOutputAttribute" sptr,sptr,sptr,sptr,sptr
	#define global WriteConsoleOutputCharacter WriteConsoleOutputCharacterA
	#func global WriteConsoleOutputCharacterA "WriteConsoleOutputCharacterA" sptr,sptr,sptr,sptr,sptr
	#func global WriteConsoleOutputCharacterW "WriteConsoleOutputCharacterW" wptr,wptr,wptr,wptr,wptr
	#func global WriteConsoleOutputW "WriteConsoleOutputW" wptr,wptr,wptr,wptr,wptr
	#func global WriteConsoleW "WriteConsoleW" wptr,wptr,wptr,wptr,wptr
	#func global WriteFile "WriteFile" sptr,sptr,sptr,sptr,sptr
	#func global WriteFileEx "WriteFileEx" sptr,sptr,sptr,sptr,sptr
	#func global WriteFileGather "WriteFileGather" sptr,sptr,sptr,sptr,sptr
	#define global WritePrivateProfileSection WritePrivateProfileSectionA
	#func global WritePrivateProfileSectionA "WritePrivateProfileSectionA" sptr,sptr,sptr
	#func global WritePrivateProfileSectionW "WritePrivateProfileSectionW" wptr,wptr,wptr
	#define global WritePrivateProfileString WritePrivateProfileStringA
	#func global WritePrivateProfileStringA "WritePrivateProfileStringA" sptr,sptr,sptr,sptr
	#func global WritePrivateProfileStringW "WritePrivateProfileStringW" wptr,wptr,wptr,wptr
	#define global WritePrivateProfileStruct WritePrivateProfileStructA
	#func global WritePrivateProfileStructA "WritePrivateProfileStructA" sptr,sptr,sptr,sptr,sptr
	#func global WritePrivateProfileStructW "WritePrivateProfileStructW" wptr,wptr,wptr,wptr,wptr
	#func global WriteProcessMemory "WriteProcessMemory" sptr,sptr,sptr,sptr,sptr
	#define global WriteProfileSection WriteProfileSectionA
	#func global WriteProfileSectionA "WriteProfileSectionA" sptr,sptr
	#func global WriteProfileSectionW "WriteProfileSectionW" wptr,wptr
	#define global WriteProfileString WriteProfileStringA
	#func global WriteProfileStringA "WriteProfileStringA" sptr,sptr,sptr
	#func global WriteProfileStringW "WriteProfileStringW" wptr,wptr,wptr
	#func global WriteTapemark "WriteTapemark" sptr,sptr,sptr,sptr
	#func global _hread "_hread" sptr,sptr,sptr
	#func global _hwrite "_hwrite" sptr,sptr,sptr
	#func global _lclose "_lclose" sptr
	#func global _lcreat "_lcreat" sptr,sptr
	#func global _llseek "_llseek" sptr,sptr,sptr
	#func global _lopen "_lopen" sptr,sptr
	#func global _lread "_lread" sptr,sptr,sptr
	#func global _lwrite "_lwrite" sptr,sptr,sptr
	#func global lstrcat "lstrcat" sptr,sptr
	#func global lstrcatA "lstrcatA" sptr,sptr
	#func global lstrcatW "lstrcatW" wptr,wptr
	#func global lstrcmp "lstrcmp" sptr,sptr
	#func global lstrcmpA "lstrcmpA" sptr,sptr
	#func global lstrcmpW "lstrcmpW" wptr,wptr
	#func global lstrcmpi "lstrcmpi" sptr,sptr
	#func global lstrcmpiA "lstrcmpiA" sptr,sptr
	#func global lstrcmpiW "lstrcmpiW" wptr,wptr
	#func global lstrcpy "lstrcpy" sptr,sptr
	#func global lstrcpyA "lstrcpyA" sptr,sptr
	#func global lstrcpyW "lstrcpyW" wptr,wptr
	#func global lstrcpyn "lstrcpyn" sptr,sptr,sptr
	#func global lstrcpynA "lstrcpynA" sptr,sptr,sptr
	#func global lstrcpynW "lstrcpynW" wptr,wptr,wptr
	#func global lstrlen "lstrlen" sptr
	#func global lstrlenA "lstrlenA" sptr
	#func global lstrlenW "lstrlenW" wptr
#endif
#endif

	;	module for AHT
	;
#include "mod_fontdlg.as"

#module ahtmod
#define APPNAME "Peas ver1.1"
#include "hspcmp.as"

#enum AHTTYPE_EDIT_INT = 0	// 入力枠(結果=int,sub=最小,sub2=最大)
#enum AHTTYPE_EDIT_DOUBLE	// 入力枠(結果=double,sub=最小,sub2=最大)
#enum AHTTYPE_EDIT_STRING	// 入力枠(結果=str,sub=文字数,sub2=option)
#enum AHTTYPE_CBOX_STRING	// コンボボックス(結果=str,sub=選択肢,sub2=選択肢テキスト)
#enum AHTTYPE_CHKB_INT		// チェックボックス(0or1、sub=テキスト)
#enum AHTTYPE_COLS_INT		// 色選択(結果=int)
#enum AHTTYPE_FONT_STRING	// フォント選択(結果=str)
#enum AHTTYPE_FILE_STRING	// ファイル選択(sub=拡張子,sub2=選択名)
#enum AHTTYPE_EXTF_STRING	// 外部ツール起動(sub=拡張子,sub2=ツール名)
#enum AHTTYPE_PARTS_INT,	// パーツID(sub=クラス名,sub2=参照名)
#enum AHTTYPE_PARTS_PROP_STRING,// パーツIDのプロパティ(sub=プロパティ名)
#enum AHTTYPE_PARTS_OPT_STRING,	// パーツIDのオプション(sub=オプション名)
#enum AHTTYPE_MAX

#uselib "user32.dll"
#func EnableWindow "EnableWindow" int,int

;-------------------------------------------------------------------------

#deffunc tminit
	;	AHTシステム初期化
	;
	sdim class, 128
	sdim author, 64
	sdim ver, 64
	sdim fname, 260
	sdim icon, 64
	sdim mflag, 64
	sdim glid, 64
	sdim exp, 1024
	sdim helpkw, 256

	dim maxis, 8
	dim maxis2, 8

	aht_ini "test"

	return


#deffunc tmload var _p1, str _p2, str _p3, int _p4

	;	モデル読み込み
	;	tmload 変数, "ファイル名","パス名",モデルID
	;	(モデルIDがマイナスの場合は自動的にID割り当て)
	;	(変数に割り当てられたIDが代入される)
	;
	_p1 = -1
	aht_source m, _p2,_p3,_p4
	tmload_res=stat

	;mes "ModelID="+m

	aht_stdsize size
	sdim stdbuf, size
	aht_stdbuf stdbuf

	if tmload_res != 0 : return

	;mesbox stdbuf,640,200,0
	;aht_getopt class,"class",m,128
	;aht_getopt author,"author",m,64
	;aht_getopt ver,"ver",m,64
	;aht_getopt icon,"icon",m,64
	;aht_getopt fname,"source",m,260
	;aht_getopt exp,"exp",m,1024
	;mes "Class["+class+"] Author["+author+"] Ver["+ver+"] File["+fname+"] Icon["+icon+"]"
	;mes "Exp="+exp

	x=128:y=128
	if clsel>=0 {
		aht_getmodaxis maxis, clsel
		x=maxis(0)+80
		y=maxis(1)
	}
	aht_setmodaxis m, x, y, clpage

	_p1 = m
	clsel = m

	return


#deffunc tmdelete int _p1

	;	モデル削除
	;
	clsel = -1
	aht_delmod _p1
	return


#deffunc tmlink int _p1, int _p2

	;	モデル接続
	;
	aht_linkmod _p1, _p2
	return


#deffunc tmunlink int _p1

	;	モデル切断
	;
	aht_unlinkmod _p1
	return


#deffunc tmprops int _p1

	;
	;	プロパティ編集オブジェクト作成
	;
	aht_getpropcnt pmax, _p1
	aht_getpropcnt plmax, _p1,1
	;
	sdim p_name, 512
	sdim p_help, 512
	sdim p_def2, 4096
	sdim p_def3, 4096
	sdim p_def, 1024, pmax
	dim p_defi, pmax
	ddim p_defd, pmax
	dim p_xx, pmax
	dim p_yy, pmax
	dim p_obj, pmax
	;
	sdim deftmp, 1024
	;
	pscr=1
	mymodel = _p1
	ox=160:oy=22:py=oy+4
	sx=320:sy=plmax*py+48+24
	screen pscr,sx,sy,8,ginfo_wx2,ginfo_wy1
	aht_getopt fname,"name",_p1,256
	title "プロパティ - "+getpath(fname,9)
	syscolor 15:boxf
	sysfont 17:color 0,0,0
	x=4:y=4

	aht_propupdate mymodel	; 動的プロパティの更新
	repeat pmax
		curprop=cnt
		aht_getproptype p_type, cnt, _p1
		aht_getpropmode p_mode, cnt, _p1
		aht_getprop p_name, 0, cnt, _p1
		aht_getprop p_help, 1, cnt, _p1
		aht_getprop p_def2, 3, cnt, _p1
		aht_getprop p_def3, 4, cnt, _p1
		aht_getprop p_def(cnt), 2, cnt, _p1
		pos x,y+2:mes p_name
		p_xx(cnt) = x+ginfo_mesx+8
		p_yy(cnt) = y
		p_obj(cnt) = -1
		pos p_xx(cnt),p_yy(cnt)
		on p_type gosub *ptype_0,*ptype_1,*ptype_2,*ptype_3,*ptype_4,*ptype_5,*ptype_6,*ptype_7,*ptype_8,*ptype_9,*ptype_10,*ptype_11
		if p_mode&AHTMODE_READ_ONLY : EnableWindow objinfo_hwnd(p_obj(cnt)),0
		y+=py
	loop
	;
	if pmax>0 : objsel 0
	;
	aht_getopt class,"class",_p1,128
	aht_getopt author,"author",_p1,64
	aht_getopt ver,"ver",_p1,64
	aht_getopt icon,"icon",_p1,64
	aht_getopt mflag,"flag",_p1,64
	aht_getopt glid,"glid",_p1,64
	aht_getopt fname,"source",_p1,260
	aht_getopt exp,"exp",_p1,1024
	aht_getopt helpkw,"helpkw",_p1,256
	;
	y+=24
	pos x,y
	mes "Class:"+class
	mes "Author:"+author+" Ver:"+ver
	mes "Flag:"+mflag+" PartsID:"+_p1+"/"+glid
	pos sx-128,y+14:objsize 120,24
	return

*ptype_0
	;	AHTTYPE_EDIT_INT
	objsize 64,oy
	i=ginfo_cx+72
	p_defi(cnt)=0+p_def(cnt)
	input p_defi(cnt)
	p_obj(cnt) = stat
	goto *afthelp
*ptype_1
	;	AHTTYPE_EDIT_DOUBLE
	objsize 64,oy
	i=ginfo_cx+72
	p_defd(cnt)=0.0+p_def(cnt)
	input p_defd(cnt)
	p_obj(cnt) = stat
	goto *afthelp
*ptype_2
	;	AHTTYPE_EDIT_STRING
	if peek(p_def3,0)='m' {
		mesbox p_def(cnt),310-ginfo_cx,py*4,1
		p_obj(cnt) = stat
		y+=py*3
		goto *afthelp2
	}
	if peek(p_def3,0)='w' {
		objsize 310-ginfo_cx,oy
		input p_def(cnt)
		p_obj(cnt) = stat
		goto *afthelp2
	}
*ptype_2x
	objsize ox,oy
	i=ginfo_cx+ox+8
	input p_def(cnt)
	p_obj(cnt) = stat
	goto *afthelp

*ptype_3
	;	AHTTYPE_CBOX_STRING
	;
	if p_def3="" : p_def3 = p_def2
	i=ginfo_cx+ox+8
	objsize 310-ginfo_cx,oy
	cbindex=0
	notesel p_def2
	repeat notemax
	noteget deftmp,cnt
	if p_def(curprop)=deftmp : cbindex=cnt
	loop
	;
	p_defi(cnt)=cbindex
	combox p_defi(cnt),100,p_def3
	p_obj(cnt) = stat
	goto *afthelp2

*ptype_4
	;	AHTTYPE_CHKB_INT	// チェックボックス(0or1、sub=テキスト)
	;
	i=ginfo_cx+ox+8
	objsize ox,oy
	p_defi(cnt)=0+p_def(cnt)
	chkbox p_def2,p_defi(cnt)
	p_obj(cnt) = stat
	goto *afthelp

*ptype_5
	;	AHTTYPE_COLS_INT	// 色選択(結果=int)
	;
	objsize 64,oy
	i=ginfo_cx+68
	input p_def(cnt)
	p_obj(cnt) = stat
	pos i,y:objsize 36,oy
	button gosub "選択",*btn_colset
	i+=44
	goto *afthelp

*ptype_6
	;	AHTTYPE_FONT_STRING	// フォント選択(結果=str)
	;
	objsize 270-ginfo_cx,oy
	i=280
	input p_def(cnt)
	p_obj(cnt) = stat
	pos i,y:objsize 36,oy
	button gosub "選択",*btn_fontset
	goto *afthelp2

*ptype_7
	;	AHTTYPE_FILE_STRING	// ファイル選択(sub=拡張子,sub2=選択名)
	;
	objsize 270-ginfo_cx,oy
	i=280
	input p_def(cnt)
	p_obj(cnt) = stat
	pos i,y:objsize 36,oy
	button gosub "選択",*btn_fileset
	goto *afthelp2

*ptype_8
	;	AHTTYPE_EXTF_STRING	// 外部ツール起動(sub=拡張子,sub2=ツール名)
	;
	objsize 310-ginfo_cx,oy
	input p_def(cnt)
	p_obj(cnt) = stat
	goto *afthelp2

*ptype_9
	;	AHTTYPE_PARTS_INT		// パーツID(sub=クラス名)
	aht_listparts p_def3, p_def2
	;
	objsize 310-ginfo_cx,oy
	cbindex=0
	i_defid = 0 + p_def(curprop)
	notesel p_def3
	repeat notemax
	noteget deftmp,cnt
	if i_defid = (0+deftmp) : cbindex=cnt
	loop
	;
	p_defi(cnt)=cbindex
	combox p_defi(cnt),100,p_def3
	p_obj(cnt) = stat
	goto *afthelp2

*ptype_10
	;	AHTTYPE_PARTS_PROP_STRING	// パーツIDのプロパティ(sub=プロパティ名)
	goto *ptype_2x

*ptype_11
	;	AHTTYPE_PARTS_OPT_STRING	// パーツIDのオプション(sub=オプション名)
	goto *ptype_2x


*afthelp
	;	パーツの右側にヘルプを表示
	pos i,y+2:mes p_help
	return
*afthelp2
	;	パーツの下にヘルプを表示
	if p_help="" : return
	y+=py
	pos x+48,y+4:mes p_help
	return

*btn_colset
	;	カラー選択
	objid = stat-1
	gosub *obj_getid
	if myid<0 : return
	;
	gsel pscr,1
	dialog "",33
	if stat {
		objprm p_obj(myid),"$"+strf("%02x",ginfo_r)+strf("%02x",ginfo_g)+strf("%02x",ginfo_b)
		aht_getprop p_def3, 4, myid, mymodel
		if p_def3="rgb" {
			objprm p_obj(myid+1),ginfo_r
			objprm p_obj(myid+2),ginfo_g
			objprm p_obj(myid+3),ginfo_b
		}
	}
	return

*btn_fontset
	;	フォント選択
	objid = stat-1
	gosub *obj_getid
	if myid<0 : return
	;
	gsel pscr,1
	dim n,8
	fontdlg n,$100
	if stat {
		gsel 1
		objprm p_obj(myid),refstr
		objprm p_obj(myid+1),n(2)
		objprm p_obj(myid+2),n(1)
	}
	return

*btn_fileset
	;	ファイル選択
	objid = stat-1
	gosub *obj_getid
	if myid<0 : return
	;
	aht_getprop p_def2, 3, myid, mymodel
	aht_getprop p_def3, 4, myid, mymodel
	curbak = getpath(dir_cur,16)+"\\"

	gsel pscr,1
	dialog p_def2,16,p_def3
	if stat {
		gsel 1
		fname=getpath(refstr,32+16)
		objprm p_obj(myid),getpath(refstr,8+16)

		;	カレントからの相対パスになるか?
		if strmid(fname,0,strlen(curbak))=curbak {
			fname=strmid(fname,strlen(curbak),255)
		}
		objprm p_obj(myid+1),fname
	}
	chdir curbak
	return

*obj_getid
	;	objectID(objid)からPropertyIDを得る
	;
	myid = -1
	repeat pmax
		if p_obj(cnt)=objid : myid=cnt
	loop
	return


#deffunc tmsetprop int _p1
	;
	;	編集したプロパティを設定
	;
	repeat pmax
		aht_getproptype p_type, cnt, _p1
		if p_type=AHTTYPE_EDIT_INT : gosub *cnvi2s
		if p_type=AHTTYPE_CHKB_INT : gosub *cnvi2s
		if p_type=AHTTYPE_EDIT_DOUBLE : gosub *cnvd2s
		if p_type=AHTTYPE_CBOX_STRING {
			aht_getprop p_def2, 3, cnt, _p1
			gosub *cnv_cb2s
		}
		if p_type=AHTTYPE_PARTS_INT {
			aht_getprop p_def2, 3, cnt, _p1
			aht_listparts p_def3, p_def2
			gosub *cnv_parts2s
		}
		aht_setprop p_def(cnt), cnt, _p1
	loop
	return

*cnvi2s
	;	パラメーター(int)を文字列に変換
	p_def(cnt)=""+p_defi(cnt)
	return
*cnvd2s
	;	パラメーター(double)を文字列に変換
	p_def(cnt)=""+p_defd(cnt)
	return
*cnv_cb2s
	;	パラメーター(int)を文字列に変換
	if p_def2="" : goto *cnvi2s
	notesel p_def2
	noteget p_def(cnt), p_defi(cnt)
	return
*cnv_parts2s
	;	パラメーター(int)を文字列に変換
	notesel p_def3
	noteget p_def(cnt), p_defi(cnt)
	i_parts = 0+p_def(cnt)
	return


#deffunc tmmake int _p1, int _p2

	;
	;	AHTからソースを出力
	;	tmmake ID, mode
	;	( mode:bit0=normal/bit1=ahtout/bit2=Make buffer out)
	;
	aht_make res, "ahtout", _p1, _p2
	aht_stdsize size
	sdim stdbuf, size
	aht_stdbuf stdbuf
	return res


;-------------------------------------------------------------------------

#deffunc scrinit

	;
	;	画像の初期化
	;
	buffer 5
	picload "ahtman_wnd.bmp"
	pssx=640:pssy=384
	osx=64:osy=64
	;
	buffer 3
	picload "ahticon.bmp"
	;
	buffer 4
	picload "ahtman640.bmp"
	;
	msx=800:msy=600
	clx=22:cly=22:clsx=640:clsy=480
	clex=clsx+clx-osx
	cley=clsy+cly-osy-20
	;
	return


#deffunc scrparts_dir int _p1

	;	パーツフォルダ変更
	;
	sdim ahtlist,256
	pfolder="aht\\"
	if _p1>0 {
		notesel ahtdirs
		noteget fname, _p1
		pfolder+=fname+"\\"
	}
	dirlist ahtlist, dir_exe+"\\"+pfolder+"*.aht"
	parts_max = stat
	aht_parts dir_exe+"\\"+pfolder, ahtlist
	parts_page=0
	return


#deffunc scrparts

	;
	;	パーツ画面
	;
	screen 6,pssx,pssy
	title "Parts list"
	;
	sdim ahtdirs,256
	dirlist ahtdirs, dir_exe+"\\aht\\*.*",5
	ahtdirs="基本パーツ\n"+ahtdirs
	scrparts_dir 0
	;
	return


#deffunc scrparts_sel int _p1

	;
	;	パーツ決定
	;
	clsel_bak = clsel

	notesel ahtlist
	noteget fname, _p1

	tmload m, fname,pfolder,-1
	if tmload_res != 0 {
		dialog stdbuf
		return
	}
	;
	if clsel_bak>=0 {
		aht_linkmod clsel_bak, m
	}
	;
	return


#deffunc dlg_notice str _p1

	;	汎用ダイアログを出す
	;
	screen 6,320,120,8,ginfo_wx1,ginfo_wy1
	syscolor 15:boxf
	title ""
	sysfont 17:color 0,0,0
	pos 8,12
	mes _p1
	objsize 120,24
	pos 180,60
	return

#deffunc dlg_done

	;	汎用ダイアログを閉じる
	;
	gsel 6,-1
	gsel 0, 1
	return


#deffunc scrmain

	;
	;	メイン画面
	;
	screen 0,msx,msy
	gmode 0,msx,msy
	pos 0,0:gcopy 4,0,0
	mmax = 0
	clbtn = 0
	clsel = -1
	clcmd = 0
	clpage = 0
	clpage_max = 0

	title APPNAME
	sdim stbuf,256
	sdim prjname,256

	pos 18,520
	mesbox stbuf,648,50
	sysfont 17
	objsize 96,22,24
	pos 680,24
	button gosub "読み込み",*nocmd
	button gosub "保存",*nocmd
	button gosub "別名保存",*nocmd
	objsize 96,64
	button gosub "実行",*nocmd

	objsize 96,22,24
	pos 680,216
	button gosub "追加",*nocmd
	objsize 96,64,66
	button gosub "編集",*nocmd
	objsize 96,22,24
	button gosub "接続",*nocmd
	button gosub "切断",*nocmd
	button gosub "削除",*nocmd

	pos 680,400
	input num_page : objid_num_page = stat
	button gosub "ページ",*nocmd
	objsize 48,22,24
	pos 680,448
	button gosub "<-",*nocmd
	pos 680+48,448
	button gosub "->",*nocmd

	pos 680,472
	button gosub "Home",*nocmd
	pos 680+48,472
	button gosub "?",*nocmd

	pselflag = 1

	return

*nocmd
	clcmd = stat
	return


#deffunc objput int _p1, int _p2, int _p3, int _p4

	;
	;	モデルオブジェクトの表示
	;	objput x,y,icon,selflag
	;	(fnameにファイル名を代入しておく)
	;
	pos _p1,_p2:gmode 2,osx,osy
	gcopy 3,_p3*osx,0
	_x=_p1+32-strlen(fname)*3:
	_y=_p2+68
	color 0,0,0
	pos _x+1,_y+1:mes fname
	color 255,255,255
	pos _x,_y:mes fname

	if _p4=0 : return

	;	選択枠
	color 255,0,0
	_x=_p1+64:_y=_p2+64
	line _p1,_p2,_x,_p2
	line _p1,_y,_x,_y
	line _p1,_p2,_p1,_y
	line _x,_p2,_x,_y

	return


#deffunc selinfo int _p1

	;	パーツ選択された時の情報表示
	;
	if _p1<0 : return
	;
	aht_getopt class,"class",_p1,128
	aht_getopt fname,"name",_p1,256
	aht_getopt exp,"exp",_p1,1024
	;
	stbuf="[ "+fname+" ] (ID"+_p1+") ["+class+"]\n"+exp
	;
	gsel 0
	objprm 0,stbuf
	return


#deffunc selflag int _p1

	;	パーツ選択の許可/不許可
	;	(1=OK/0=NG)
	pselflag = _p1
	return

#deffunc scr_update

	;
	;	メイン画面更新
	;
	gsel 0
	redraw 0
	gmode 0,clsx+64,clsy+64
	pos 0,0:gcopy 4

	;	info
	fname="Page "+clpage+"/"+clpage_max
	x=580:y=cly+8
	color 0,0,0
	pos x+1,y+1:mes fname
	color 255,255,255
	pos x,y:mes fname

	;	initalize
	ptx=mousex:pty=mousey
	clcmd = 0
	cldrag=-1

	;	icon put
	aht_getmodcnt mmax
	sysfont 17
	repeat mmax
		; maxisにModel情報が代入されています
		; (0)=X座標,(1)=Y座標,(2)=ICON,(3)=ページ,(4)=NextID,(5)=PrevID
		aht_getmodaxis maxis, cnt
		if stat : continue		; Model未登録の場合はスキップ
		if clpage!=maxis(3) : continue	; ページが異なる場合はスキップ
		aht_getopt fname,"name",cnt,260
		x=maxis
		y=maxis(1)
		if (ptx>=x)&(pty>=y) {
			if (ptx<(x+64))&(pty<(y+64)) {
				cldrag=cnt
			}
		}
		objput x,y,maxis(2),cnt=clsel

		if maxis(4)>=0 {
			aht_getmodaxis maxis2, maxis(4)
			color 255,255,255
			line x+64,y+28,maxis2+4,maxis2(1)+28
		}
	loop

	redraw 1

	stick key,$3ff
	on clbtn gosub *cl_0,*cl_1

	return

*cl_0
	if (key&$100)=0 : return
	if cldrag<0 : return
	if pselflag = 0 : return
	if clsel!=cldrag : selinfo cldrag
	clbtn=1:clsel=cldrag
	aht_getmodaxis maxis, clsel
	clbtnx=ptx-maxis:clbtny=pty-maxis(1)
	return
*cl_1
	if (key&$100)=0 : clbtn=0 : return

	x=limit(ptx-clbtnx,clx,clex)
	y=limit(pty-clbtny,cly,cley)
	aht_setmodaxis clsel,x,y,clpage

	return
*cl_2
	return



#deffunc scrp_update

	;
	;	パーツ画面更新
	;
	gsel 6
	redraw 0
	gmode 0,pssx,pssy
	pos 0,0:gcopy 5,0,0
	sysfont 17
	notesel ahtlist
	ptx=mousex:pty=mousey
	cldrag=-1
	i=parts_page
	repeat 20
		if i>=parts_max : break
		x=(cnt\5)*80+40
		y=(cnt/5)*80+32
		if (ptx>=x)&(pty>=y) {
			if (ptx<(x+64))&(pty<(y+64)) {
				cldrag=i
			}
		}
		aht_getparts i, icon,fname,clsname
		objput x,y,icon,cldrag=i
		i++
	loop

	redraw 1

	return


#deffunc chg_page int _p1

	;	ページ変更
	;	(_p1=ページ相対値/0の場合は入力値)
	;
	if _p1=0 {
		clpage = num_page
		if clpage>clpage_max : clpage_max = clpage
	} else {
		clpage+=_p1
	}
	if clpage<0 : clpage=0
	if clpage>clpage_max : clpage=clpage_max
	aht_setpage clpage, clpage_max
	clsel = -1				; 選択を解除
	objprm objid_num_page, clpage
	return


#deffunc edit_src int _p1

	;
	;	ソース編集
	;
	;
	aht_getopt fname,"source",_p1,260
	exec "hsed3f aht\\"+fname
	return

#deffunc screxec int _p1

	;
	;	AHT実行
	;
	;
	if prjname = "" : dialog "プロジェクトが保存されていません。",1 : return
	;
	ahtbase=getpath(prjname,1)+".hsp"
	;
	aht_makeinit
	;
	aht_findstart
	makeerr=0
	repeat
		aht_findparts findid
		findres = stat
		if findid<0 : break

		aht_getmodaxis maxis, findid
		if stat : continue		; Model未登録の場合はスキップ

		aht_propupdate findid		; 動的プロパティの更新

		aht_getopt fname,"name",findid,255
		aht_makeput ";-------main:"+fname+"(ID"+cnt+")",0
		aht_makeput ";-------init:"+fname+"(ID"+cnt+")",1

		tmmake findid, 4
		if stat : makeerr=findid : break

		if maxis(4)<0 {			; リンクの終端か?
			if findres & 1 {
				aht_makeput "return",0
			} else {
				aht_makeput "stop",0
			}
		}

	loop
	aht_findend i
	if i : return				; エラーが発生した場合
	;
	aht_makeput ";-------entry point",1
	aht_makeput "goto _ahtstart",1
	;
	aht_makeend ahtbase
	;
	gsel 0
	objprm 0,stdbuf
	if makeerr {
		dialog "AHTファイルの変換中にエラーが発生しました。(ID"+makeerr+")"
		return
	}
	;
#ifdef EXEC_DEBUG
	exec "notepad "+ahtbase
	return
#endif
	;
	;	HSP3ソーススクリプトをコンパイルして実行する
	;	(スクリプトエディタのコンパイル+実行と同じ動作を行ないます)
	;
	sdim rtname,256
	objname="obj"			; オブジェクトファイル名
	;
	hsc_ini ahtbase
	hsc_clrmes
	hsc_objname objname
	hsc_comp 0
	res=stat

	hsc3_messize size
	sdim stdbuf, size
	hsc_getmes stdbuf

	if res!=0 {
		dialog "実行時にエラーが発生しました。\n"+stdbuf
		return
	}
	hsc3_getruntime rtname, objname
	if rtname="" : rtname="hsp3.exe"
	debug_mode=0			; デバッグウィンドウ表示フラグ
	;
	cmdexe = dir_exe+"\\"+rtname+" \""+dir_cur+"\\"+objname+"\""
	hsc3_run cmdexe, debug_mode
	;
	return


#deffunc prjload str _fname

	;
	;	プロジェクトをロード
	;	(_fnameが""の時はダイアログを出す)
	;
	sdim mdlname,256
	sdim mdlpath,256

	if _fname="" {
		dialog "peas",16,"PeaSプロジェクトファイル"
		if stat=0 : return 1
		fname = getpath(refstr,32+16)
		prjname = getpath(refstr,8+16)
	} else {
		fname = getpath(_fname,32+16)
		prjname = getpath(_fname,8+16)
	}
	chdir fname
	aht_prjload prjname
	if stat : prjname="" : dialog "プロジェクトロード時にエラーが発生しました。" : return -1
	gsel 0
	title prjname + " - " + APPNAME
	aht_getprjmax res		; パーツ数の取得
	;dialog "PARTS="+res
	repeat res
		aht_getprjsrc mdlname,mdlpath,mdlid,cnt	; パーツ名、パス名、IDの取得
		;dialog "LOAD PARTS="+mdlname+"/"+mdlpath+"/"+mdlid
		tmload i, mdlname,mdlpath,mdlid	; パーツ読み込み
		if i<0 : dialog "読み込み中にエラーが発生しました。["+mdlname+"]" : break
		;dialog "APPLY PARTS="+i
		aht_prjload2 i,cnt	; パラメーターの反映
	loop
	aht_prjloade			; あとしまつ
	aht_getpage clpage, clpage_max	; ページ情報を取得
	return


#deffunc prjsave int _p1

	;
	;	プロジェクトをセーブ
	;	(mode:0=save/1=save as)
	res = _p1
	if prjname = "" : res=1
	if res {
		dialog "peas",17,"PeaSプロジェクトファイル"
		if stat=0 : return 1
		fname = getpath(refstr,32+16)
		prjname = getpath(refstr,8+1+16)+".peas"
		chdir fname
	}
	aht_prjsave prjname
	if stat : prjname="" : return -1
	gsel 0
	title prjname + " - " + APPNAME
	return 0

;-------------------------------------------------------------------------

#global

#module
	#uselib "gdi32.dll"
	#func  GetObject "GetObjectA" int,int,var

	#uselib "COMDLG32.DLL"
	#func  ChooseFont "ChooseFontA" var

	; ・引数  Value   (array)      : 数値型配列変数
	;         nOption (int) ($100) : 0〜(0) オプション値

	#deffunc fontdlg array prm1,int prm2
	mref bmscr,67
	mref ref,65
	nOption = prm2 : if nOption<=0 : nOption=0

	dim lpObject,64   ;LOGFONT構造体
	dim chf,15        ;CHOOSEFONT構造体
	dim retval,8      ;取得値退避用

	GetObject bmscr(38),60,lpObject

	;CHOOSEFONT構造体
	chf(0)  = 60
	chf(1)  = hwnd
	chf(3)  = varptr(lpObject)
	chf(5)  = $41|nOption
	chf(6)  = bmscr(40)
	chf(12) = $2000

	ChooseFont chf
	ret=stat
	if ret!0 {
		repeat 32
			prm=peek(lpObject,28+cnt)
			poke ref,cnt,prm
			if prm=0 : break
		loop
		retval(0) = -1*lpObject(0)
		if lpObject(4)>400 : retval(1)=1 : else : retval(1)=0
		if ((lpObject(5))&&($ff))!0 : retval(1)+=2
		retval(2) = chf(4)/10
		retval(3) = peek(chf,24)
		retval(4) = peek(chf,25)
		retval(5) = peek(chf,26)
		retval(6) = peek(lpObject,21)
		retval(7) = peek(lpObject,22)
	}
	repeat 8 : prm1(cnt)=retval(cnt) : loop
	;  prm1の数値型配列変数に返される値
	;   (0)   : font size (HSPで利用する論理サイズ)
	;   (1)   : font書体
	;              -  0 = NORMAL
	;              -  1 = BOLD
	;              -  2 = ITALIC
	;              -  3 = BOLD|ITALIC
	;   (2)   : font size (pt)
	;   (3),(4),(5) : color r,g,b
	;   (6)   : 下線
	;   (7)   : 打消し線
	dim lpObject,0  : dim chf,0 : dim retval,0
	return ret
#global

;	getenvモジュール
;	getenv命令を使用するには以下の行を最初に入れてください
;
;	#include "mod_getenv.as"
;
#module
#uselib "Kernel32.dll"
#func GetEnvironmentVariable "GetEnvironmentVariableA" str,var,int

	;	getenv命令
	;	getenv 変数, "環境変数名"
	;
	;	環境変数の値を変数に取得します。
	;
#deffunc getenv var _p1,str _p2

	GetEnvironmentVariable _p2, _p1,0
	size=stat+1
	memexpand _p1,size ; バッファ確保
	_p1=""
	GetEnvironmentVariable _p2,_p1,size
	return
#global



#ifndef __mod_img__
#define __mod_img__

#module "mod_imgctx"

#define IID_IImgCtx   "{3050f3d7-98b5-11cf-bb82-00aa00bdce0b}"
#define CLSID_IImgCtx "{3050f3d6-98b5-11cf-bb82-00aa00bdce0b}"

#usecom  ImgCtx IID_IImgCtx CLSID_IImgCtx
#comfunc IImgCtx_Load 3 wstr,int
#comfunc IImgCtx_GetStateInfo 8 var,var,int
#comfunc IImgCtx_StretchBlt 12 int,int,int,int,int,int,int,int,int,int

#deffunc imgload str _p1

	;
	;	ImgCtxを利用して画像ファイルを読み込みます
	;	imgload "ファイル名"
	;	(BMP,JPEG,GIF,ICO,PNGフォーマットを読み込み可能)
	;
	fname=_p1
	fpath=getpath( fname,32 )
	if fpath="" : fname = dir_cur + "\\" + fname
	;
	newcom pImage,ImgCtx
	IImgCtx_Load pImage,fname,0

	dim size,4
	repeat
		IImgCtx_GetStateInfo pImage,flg,size,1
		if ( flg & 0x00200000 )==0 : break
		wait 4
	loop

	IImgCtx_GetStateInfo pImage,flg,size,0
	IImgCtx_StretchBlt pImage,hdc,0,0,size(0),size(1),0,0,size(0),size(1),0xCC0020
	redraw 1

	delcom pImage
	return

#global

#endif


;----------------------------------------------------------------
; ジョイスティック入力モジュール MIA 2004 / onitama 2005
;  使用に関する制限はありません。ご自由にお使いください。
;----------------------------------------------------------------

#module "joy"

#const BORDER_LOW   32768 - 4096
#const BORDER_HIGH  32768 + 4096

#uselib "winmm.dll"
#func _joyGetPosEx "joyGetPosEx" int, var

#deffunc joyGetPosEx array p1, int p2
	p1.15=0:p1=52,255
	_joyGetPosEx p2,p1
	return

#deffunc jstick var p1, int p2
	;	jstick 変数,ポート番号
	;	(stick命令互換の値を変数に返す)
	;
	jdata.15=0:jdata=52,255
	_joyGetPosEx p2,jdata
	if stat!=0 : p1=0 : return
	res=(jdata.8)<<4
	if jdata.2<BORDER_LOW : res|=1
	if jdata.2>BORDER_HIGH : res|=4
	if jdata.3<BORDER_LOW : res|=2
	if jdata.3>BORDER_HIGH : res|=8
	p1=res
	return

#global


;----------------------------------------------------------------
; サンプルコード
;----------------------------------------------------------------
;----------------------------------------------------------------
; joyGetPosEx data, ポート番号
;   stat = 0 であれば入力は正常です。
;	data.0 = 常に 52  が入ります
;	data.1 = 常に 255 が入ります
;	data.2 = 第 1 軸の状態（普通のジョイスティックの X 軸）
;	data.3 = 第 2 軸の状態（普通のジョイスティックの Y 軸）
;	data.4 = 第 3 軸の状態（スロットル等）
;	data.5 = 第 4 軸の状態
;	data.6 = 第 5 軸の状態
;	data.7 = 第 6 軸の状態
;	data.8 = ボタンの状態（最大32ボタン）
;	data.9 = 同時に押されているボタンの数
;	data.10 = POV スイッチの状態
;	data.11 = 予備情報1
;	data.12 = 予備情報2
;----------------------------------------------------------------
/*
	repeat
		redraw 0
		color 255,255,255 : boxf : color 0,0,0
		joyGetPosEx data, 0
		pos 0,0 : mes "stat = " + stat
		repeat 13 : mes data.cnt : loop
		redraw 1 : await 30
	loop
*/

; メニューバー作成モジュール
; http://quasiquote.org/hspwiki/
;       thanks ちょくと さん
;               http://yokohama.cool.ne.jp/chokuto/urawaza/menu1.html
;               http://yokohama.cool.ne.jp/chokuto/urawaza/menu2.html

#ifndef __mod_menu__
#define __mod_menu__

; DLLのロードと関数の宣言・初期化など
#uselib "user32.dll"
#func global CreateMenu         "CreateMenu"
#func global CreatePopupMenu    "CreatePopupMenu"
#func global AppendMenu         "AppendMenuA"           int, int, int, str
#func global SetMenu            "SetMenu"               int, int
#func global DrawMenuBar        "DrawMenuBar"           int
#func global PostMessage        "PostMessageA"          int, int, sptr, sptr

; ウィンドウメッセージを定義
#const global WM_CLOSE                          0x0010
#const global WM_COMMAND                        0x0111

#module "menumod"

#deffunc newmenu var _p1, int _p2
	;
	;	新しいメニューハンドルを取得する
	;
	;	newmenu p1,p2
	;		p1 : 結果を格納する変数名
	;		p2 : 0=メニュー項目用 / 1=ポップアップ項目用
	;
	if _p2=0 : CreateMenu
	if _p2=1 : CreatePopupMenu
	_p1 = stat
	return

#deffunc addmenu int _p1, str _p2, int _p3, int _p4
	;
	;	メニュー項目を追加する
	;
	;	addmenu p1,p2,p3,p4
	;		p1 : メニューハンドル
	;		p2 : メニュー文字列
	;		p3 : メニューアイテムID値
	;		p4 : メニュー項目属性
	;
        AppendMenu _p1, _p4, _p3, _p2
	return

#deffunc applymenu int _p1
	;
	;	メニューをウィンドウに割り当てる
	;
	;	applymenu p1
	;		p1 : メニューハンドル
	;
        SetMenu hwnd, _p1      ; メニューをウィンドウに割り当てる
        DrawMenuBar hwnd         ; メニューを再描画
	return

#global

#endif

#ifndef __MOD_PICFONT
#define __MOD_PICFONT

;0〜9、A〜Zなどの基本的な文字フォントを画像で持ち、
;それを表示するためのモジュールです。
;自作の文字フォントを利用する際に使用することができます。
;既存のフォントを画像に変換するサンプル(mkfont.hsp)も用意しています。

#module mod_picfont
#deffunc picfont int _p1, int _p2, int _p3, int _p4, int _p5

	;	picfont id, cx, cy, mode, offset
	;	(画像を使用したフォント表示準備)
	;	id : フォント画像のあるバッファID
	;	cx,cy : フォント１文字あたりのXYサイズ
	;	mode : 表示時のモード(gmodeのモード値)
	;	(文字は半角英数字のみ)
	;
	sx=_p2:if sx=0 : sx=16
	sy=_p3:if sy=0 : sy=16
	mode=_p4:id=_p1
	ofsx=_p5
	return

#deffunc picfprt str _p1

	;	picfprt "message"
	;	(画像を使用したフォント表示を行ないます)
	;	"message" : 表示するメッセージ
	;	表示座標は、posで指定した位置から
	;
	x=ginfo_cx:xs=x
	y=ginfo_cy
	i=0:gmode mode,sx,sy
	st=_p1

	repeat
	a1=peek(st,i):i++:if a1=0 : break
	if a1=13 {
		a1=peek(st,i)
		if a1=10 : i++
		x=xs : y+=sy : continue	; 改行
	} else {
		by=a1/16*sy:bx=a1\16*sx
		pos x,y:gcopy id,bx,by
	}
	x+=sx+ofsx
	loop

	pos xs,y+sy
	return

#global
#endif

#ifndef __mod_regexp
#define __mod_regexp
/*********************************************************************
%dll
mod_regexp
%group
正規表現検索命令
%note
Internet Explorer 5.5 以上が必要
%********************************************************************/
#module
#deffunc _endregexp onexit
	delcom oReg
	return
#deffunc _startregexp
	newcom oReg,"VBScript.RegExp"
	return
/*********************************************************************
%index
match
正規表現で検索して最初に一致した文字列を返す
%prm
(p1,p2,p3,p4)
p1:検索される文字列
p2:検索する文字列
p3(0):大文字と小文字を区別するなら1
p4(0):全体を一つの行と見なすなら1
%inst
p1の文字列からp2に一致した最初の文字列を返します。
p2には正規表現のパターンを指定します。
p3を1にすると大文字と小文字を区別します。0や省略した場合は区別しません。
p4を1にするとメタ文字 ^ と $ が改行直後・直前に対応しません。0や省略した場合は対応します。

正規表現のパターンには通常の文字の他、以下のメタ文字と呼ばれる特殊文字が使えます。
メタ文字を使う場合、HSPスクリプト上では \ は "\\" と表記する事に注意してください。
たとえば、数字と一致するパターンの表記は "\\d" となり、 \ と一致するパターン表記は "\\\\" となります。
また、HSPでの改行 "\n" は\r\nの２文字であることに注意してください。"\n" と一致するパターン表記は "\n" または "\\r\\n" となります。

html{
<center>メタ文字一覧</center>
<table border="1" style="font-family:MS UI Gothic;line-height:100%;">
<tr valign="top"><th>文字</th><th>説明</th></tr>
<tr valign="top"><td align="center" nowrap>.</td><td> \n 以外の任意の1文字に一致します。\r とは一致する事に注意してください。</td></tr>
<tr valign="top"><td align="center" nowrap>*</td><td>直前のパターンの0回以上の繰り返しに一致します。たとえば、HSP!* は "HSP" と "HSP!" と "HSP!!" いずれにも一致します。</td></tr>
<tr valign="top"><td align="center" nowrap>+</td><td>直前のパターンの1回以上の繰り返しに一致します。たとえば、HSP!+ は "HSP!" と "HSP!!" には一致しますが、"HSP" には一致しません。</td></tr>
<tr valign="top"><td align="center" nowrap>?</td><td>直前のパターンの0回または 1 回の繰り返しに一致します。たとえば、HSP!? は "HSP" と "HSP!" に一致します。</td></tr>
<tr valign="top"><td align="center" nowrap>{<em>n</em>,<em>m</em>}</td><td>直前のパターンの <em>n</em> 回以上 <em>m</em> 回以下の繰り返しに一致します。たとえば、\d{3,4} は 3桁または4桁の数字に一致しますが 2桁の数字には一致せず、5桁の数字には最初の4桁だけが一致します。<em>m</em>を省略すると<em>n</em> 回以上の繰り返しに一致し、カンマと<em>m</em>を省略すると<em>n</em> 回ちょうどの繰り返しに一致します。{0,1} は ? と同じ意味になり、{1,} は + と、{0,} は * と同じ意味になります。{ }の間には余分な空白などを入れてはいけません。</td></tr>
<tr valign="top"><td align="center">*? +? ?? {<em>n</em>,<em>m</em>}?</td><td>* + ? {<em>n</em>,<em>m</em>} のような繰り返し指定のメタ文字は通常、最も長い文字列と一致しますが、これらのメタ文字直後に ? をおくと最も短い文字列と一致します。たとえば、"&lt;abc&gt;&lt;def&gt;" という文字列をパターン &lt;.*&gt; で検索した場合、文字列全体と一致しますが &lt;.*?&gt; と検索した場合は "&lt;abc&gt;" と "&lt;def&gt;" の二つに分けて一致するようになります。</td></tr>
<tr valign="top"><td align="center" nowrap>[<em>string</em>]</td><td><em>string</em> に含まれるいずれかの一文字と一致します。たとえば、HSP[123] は "HSP1" と "HSP2" と"HSP3" に一致しますが "HSP4" には一致しません。また、二つの文字を-でつなげば範囲指定が可能です。例えば [a-z] は任意の英小文字一文字に一致し、[a-zA-Z] は任意の英字一文字に一致します。-自体を検索する場合は [-a-z] のようにします。<em>string</em>には $ などのメタ文字を使用してもメタ文字と解釈されませんが、一部を除く \ で始まるメタ文字は機能します。</td></tr>
<tr valign="top"><td align="center" nowrap>[^<em>string</em>]</td><td>[<em>string</em>] とは逆に <em>string</em> に含まれない任意の一文字と一致します。たとえば、HSP[^1-3] は "HSP4" や "HSP5" に一致しますが "HSP1" と "HSP2" と"HSP3" には一致しません。</td></tr>
<tr valign="top"><td align="center" nowrap>|</td><td>論理和(OR)検索をします。たとえば、abc|def は "abc" と "def" に一致します。| は他の文字より評価の優先順位が低いので ( ) と組み合わせるのが便利です。</td></tr>
<tr valign="top"><td align="center" nowrap>(<em>pattern</em>)</td><td><em>pattern</em> を一つのグループとします。たとえば、20(09|10) は "2009" と "2010" に一致します。また、<em>pattern</em> に一致する文字列をサブマッチとして後方参照することが出来ます(最大99個)。</td></tr>
<tr valign="top"><td align="center" nowrap>(?:<em>pattern</em>)</td><td>サブマッチとして利用できない以外は (<em>pattern</em>) といっしょです。(<em>pattern</em>)を使う場合に比べてメモリの節約になります。</td></tr>
<tr valign="top"><td align="center" nowrap>(?=<em>pattern</em>)</td><td><em>pattern</em> に一致する文字列の直前の位置に一致します。たとえば、HSP(?=2|3) は "HSP2" と "HSP3" の"HSP"に一致しますが "HSP1" の"HSP"には一致しません。また、サブマッチとしての利用は出来ません。</td></tr>
<tr valign="top"><td align="center" nowrap>(?!<em>pattern</em>)</td><td><em>pattern</em> に一致しない文字列の直前の位置に一致します。たとえば、HSP(?!2)\d は "HSP1" や "HSP3" に一致しますが "HSP2" や "HSPa" には一致しません。また、サブマッチとしての利用は出来ません。</td></tr>
<tr valign="top"><td align="center" nowrap>\<em>num</em></td><td>サブマッチと同じ文字列に一致します。一つ目のサブマッチは\1で最大\99まで指定できます。たとえば、(.)(.)\1\2 は "abab" や "0101" のような交互に繰り返す文字列に一致し、&lt;(.*?)&gt;.*&lt;/\1&gt; は "&lt;a&gt;hoge&lt;/a&gt;" や "&lt;b&gt;hoge&lt;/b&gt;" に一致します。対応するサブマッチがない場合は8進文字コードと見なされます。</td></tr>
<tr valign="top"><td align="center" nowrap>^</td><td>行頭に一致します。つまり、文字列の先頭および \n または \r の直後の位置に一致します。</td></tr>
<tr valign="top"><td align="center" nowrap>$</td><td>行末に一致します。つまり、文字列の最後および \n または \r の直前の位置に一致します。</td></tr>
<tr valign="top"><td align="center" nowrap>\</td><td>\の次にメタ文字をおくと、その文字と一致します。たとえば、\( は "(" に一致し \? は "?" に一致します。また、\\ は "\" に一致します。</td></tr>
<tr valign="top"><td align="center" nowrap>\n</td><td>改行(LF)に一致します。\x0a および \cJ と同じです。</td></tr>
<tr valign="top"><td align="center" nowrap>\r</td><td>改行(CR)に一致します。\x0d および \cM と同じです。</td></tr>
<tr valign="top"><td align="center" nowrap>\t</td><td>タブに一致します。\x09 および \cI と同じです。</td></tr>
<tr valign="top"><td align="center" nowrap>\f</td><td>フォームフィードに一致します。\x0c および \cL と同じです。</td></tr>
<tr valign="top"><td align="center" nowrap>\v</td><td>垂直タブに一致します。\x0b および \cK と同じです。</td></tr>
<tr valign="top"><td align="center" nowrap>\c</td><td>Ctrlキーで入力できる制御文字に一致します。\cに続けて英字一文字を指定します。たとえば、\cM は Ctrl + M キー(改行文字)に一致します。</td></tr>
<tr valign="top"><td align="center" nowrap>\b</td><td>単語の境界に一致します。たとえば、run\b は "run" には一致しますが "running" の "run" には一致しません。</td></tr>
<tr valign="top"><td align="center" nowrap>\B</td><td>単語の境界でない位置に一致します。たとえば、run\B は "running" の "run" には一致しますが "run" には一致しません。</td></tr>
<tr valign="top"><td align="center" nowrap>\d</td><td>数字一文字に一致します。[0-9] と同じです。</td></tr>
<tr valign="top"><td align="center" nowrap>\D</td><td>数字以外の一文字に一致します。[^0-9] と同じです。</td></tr>
<tr valign="top"><td align="center" nowrap>\s</td><td>スペースやタブなどの空白文字に一致します。[ \f\n\r\t\v] と同じです。</td></tr>
<tr valign="top"><td align="center" nowrap>\S</td><td>空白文字以外の任意の一文字に一致します。[^ \f\n\r\t\v] と同じです。</td></tr>
<tr valign="top"><td align="center" nowrap>\w</td><td>単語に使用される任意の一文字に一致します。[A-Za-z0-9_] と同じです。</td></tr>
<tr valign="top"><td align="center" nowrap>\W</td><td>単語に使用される文字以外の任意の一文字に一致します。[^A-Za-z0-9_] と同じです。</td></tr>
<tr valign="top"><td align="center" nowrap>\x</td><td>16進文字コードです。\xに続けて2桁の16進数を指定します。たとえば、\x41 は "A" に一致します。</td></tr>
<tr valign="top"><td align="center" nowrap>\</td><td>8進文字コードです。\に続けて3桁の8進数を指定します。たとえば、\101 は "A" に一致します。</td></tr>
<tr valign="top"><td align="center" nowrap>\u</td><td>Unicodeです。\uに続けて4桁の16進数を指定します。たとえば、\u3042 は "あ" に一致します。</td></tr>
</table>
}html
%sample
#include "mod_regexp.as"
a={"
	算数=50
	国語=100
	社会=70
"}
mes match(a,"国語=\\d+")

 ;--------結果-----------
 ;国語=100
%href
submatch
matches
replace
%********************************************************************/
#defcfunc match str target,str Pattern,int IgnoreCase,int Multiline
	oReg("Global") = 0
	oReg("IgnoreCase") = (IgnoreCase==0)
	oReg("Multiline") = (Multiline==0)
	oReg("Pattern") = Pattern
	comres oMatches
	oReg->"Execute" target
	if stat<0:return ""
	if oMatches("count"){
		oMatch=oMatches("item",0)
		retstr=oMatch("value")
		delcom oMatch
	}else{
		retstr=""
	}
	delcom oMatches
	return retstr
/*********************************************************************
%index
submatch
正規表現で検索して最初に一致したサブマッチ文字列を返す
%prm
(p1,p2,p3,p4)
p1:検索される文字列
p2:検索する文字列
p3(0):大文字と小文字を区別するなら1
p4(0):全体を一つの行と見なすなら1
%inst
p1の文字列からp2に一致した最初の結果のサブマッチ文字列を返します。
p2には正規表現のパターンを指定します。
p3を1にすると大文字と小文字を区別します。0や省略した場合は区別しません。
p4を1にするとメタ文字 ^ と $ が改行直後・直前に対応しません。0や省略した場合は対応します。
正規表現のパターンについてはmatchの項目を参照してください。
%sample
#include "mod_regexp.as"
a={"
	算数=50
	国語=100
	社会=70
"}
mes submatch(a,"国語=(\\d+)")

 ;--------結果-----------
 ;100
%href
match
matches
replace
%********************************************************************/
#defcfunc submatch str target,str Pattern,int IgnoreCase,int Multiline
	oReg("Global") = 0
	oReg("IgnoreCase") = (IgnoreCase==0)
	oReg("Multiline") = (Multiline==0)
	oReg("Pattern") = Pattern
	comres oMatches
	oReg->"Execute" target
	if stat<0 : return ""
	retstr=""
	if oMatches("count"){
		oMatch=oMatches("item",0)
		oSubmatches=oMatch("submatches")
		if oSubmatches("count"){
			variant=oSubmatches(".Item",0)
			variant("vartype")=8/*VT_BSTR*/
			retstr=variant("value")
			variant=0
		}
		delcom oSubmatches
		delcom oMatch
	}
	delcom oMatches
	return retstr
/*********************************************************************
%index
matches
正規表現で検索した複数の結果を取得する
%prm
p1,p2,p3,p4,p5,p6
p1:結果を受け取る変数
p2:検索される文字列
p3:検索する文字列
p4(0):大文字と小文字を区別するなら1
p5(0):最初の結果だけを取得するなら1
p6(0):全体を一つの行と見なすなら1
%inst
p2の文字列からp3に一致した複数の結果をサブマッチを含めて一度に取得します。
p3には正規表現のパターンを指定します。
p4を1にすると大文字と小文字を区別します。0や省略した場合は区別しません。
p5を1にすると最初に一致した結果だけを取得します。0や省略した場合は全ての結果を取得します。
p6を1にするとメタ文字 ^ と $ が改行直後・直前に対応しません。0や省略した場合は対応します。

p1の変数は初期化され、結果はp1の配列にセットされます。
一番目に一致した文字列はp1(0)に、二番目に一致した文字列はp1(1)に格納されます。
さらに、一番目に一致した文字列のなかの一番目のサブマッチはp1(0,1)に、二番目のサブマッチはp1(0,2)に格納されます。
statに一致した文字列の数がセットされ、0なら一つも一致していないことになります。
サブマッチの数はlength2を使って調べられます。

正規表現のパターンについてはmatchの項目を参照してください。
%sample
#include "mod_regexp.as"
a={"
	太郎：算数=50,国語=100,社会=70
	一郎：算数=30,国語=50,社会=60
	花子：算数=60,国語=40,社会=50
"}
matches b,a,"(.*)：算数=(\\d+),国語=(\\d+),社会=(\\d+)"
repeat stat
	mes b(cnt)
	mes "\t"+b(cnt,1)+"の総得点="+(0+b(cnt,2)+b(cnt,3)+b(cnt,4))
loop

 ;-------------結果------------
 ;太郎：算数=50,国語=100,社会=70
 ;	太郎の総得点=220
 ;一郎：算数=30,国語=50,社会=60
 ;	一郎の総得点=140
 ;花子：算数=60,国語=40,社会=50
 ;	花子の総得点=150
%href
match
submatch
replace
%********************************************************************/
#deffunc matches array retvar,str target,str Pattern,int IgnoreCase,int Global,int Multiline
	oReg("IgnoreCase") = (IgnoreCase==0)
	oReg("Global") = (Global==0)
	oReg("Multiline") = (Multiline==0)
	oReg("Pattern") = Pattern
	comres oMatches
	oReg->"Execute" target
	if stat<0:sdim retvar,1,1:return 0
	num1=oMatches("count")
	if num1==0:sdim retvar,1,1:	delcom oMatches:return 0
	oMatch=oMatches("item",0)
	oSubmatches=oMatch("submatches")
	num2=oSubmatches("Count")
	sdim retvar,64,num1,num2+1
	for i,0,num1,1
		oMatch=oMatches("item",i)
		retvar.i=oMatch("value")
		oSubmatches=oMatch("submatches")
		repeat num2
			variant=oSubmatches(".Item",cnt)
			variant("vartype")=8/*VT_BSTR*/
			retvar(i,cnt+1)=variant("value")
		loop
	next
	variant=0
	delcom oSubmatches
	delcom oMatch
	delcom oMatches
	return num1
/*********************************************************************
%index
replace
正規表現で文字列の置換を行う
%prm
(p1,p2,p3,p4,p5,p6)
p1:検索される文字列
p2:検索する文字列
p3:置き換える文字列
p4(0):大文字と小文字を区別するなら1
p5(0):最初に一致した部分だけを置換するなら1
p6(0):全体を一つの行と見なすなら1
%inst
p1の文字列のなかでp2に一致した部分をp3で置き換えた文字列を返します。
p2には正規表現のパターンを指定します。
p4を1にすると大文字と小文字を区別します。0や省略した場合は区別しません。
p5を1にすると最初に一致した部分だけを置換します。0や省略した場合は全ての一致した部分を置換します。
p6を1にするとメタ文字 ^ と $ が改行直後・直前に対応しません。0や省略した場合は対応します。
正規表現のパターンについてはmatchの項目を参照してください。

p3には以下の特殊文字が使用できます。
html{
<table border="1" style="font-family:MS UI Gothic;line-height:100%;">
<tr><th>文字</th><th>説明</th></tr>
<tr><td align="center" nowrap>$<em>num</em></td><td><em>num</em>番目のサブマッチ文字列に置換されます。一つ目のサブマッチは$1で最大$99まで指定できます。</td></tr>
<tr><td align="center" nowrap>$&amp;</td><td>p2に一致した文字列に置換されます。</td></tr>
<tr><td align="center" nowrap>$`</td><td>p1の中で、p2に一致した文字列よりも前方の部分に置換されます。</td></tr>
<tr><td align="center" nowrap>$'</td><td>p1の中で、p2に一致した文字列よりも後方の部分に置換されます。</td></tr>
<tr><td align="center" nowrap>$$</td><td>$に置換されます。</td></tr>
</table>
}html
%sample
#include "mod_regexp.as"
a={"
	太郎：50,100,70
	一郎：30,50,60
	花子：60,40,50
"}
mes replace(a,"：","の成績：")

 ;---------------結果--------------
 ;太郎の成績：50,100,70
 ;一郎の成績：30,50,60
 ;花子の成績：60,40,50

mes replace(a,"(.*)：(\\d+),(\\d+),(\\d+)","$1の成績：算数=$2,国語=$3,社会=$4")

 ;---------------結果--------------
 ;太郎の成績：算数=50,国語=100,社会=70
 ;一郎の成績：算数=30,国語=50,社会=60
 ;花子の成績：算数=60,国語=40,社会=50
%href
match
submatch
matches
%********************************************************************/
#defcfunc replace str target,str Pattern,str repstr,int IgnoreCase,int Global,int Multiline
	oReg("IgnoreCase") = (IgnoreCase==0)
	oReg("Global") = (Global==0)
	oReg("Multiline") = (Multiline==0)
	oReg("Pattern") = Pattern
	comres retstr
	oReg->"Replace" target,repstr
	if stat<0:return target
	return retstr
#global
_startregexp
#endif
#ifndef __mod_rss__
#define __mod_rss__

#module "rssmod"

#deffunc rssload array _v1, array _v2, str _p1, int _p2

	;
	;	XMLパーサー(MSXML)を使用してRSSを読み込む
	;	rssload 変数1,変数2,パス,個数
	;
	;	変数1,2 = 文字列型配列変数として結果が代入されます
	;	          (変数1はRSSの内容、変数2はリンク先)
	;	パス    = URLまたはファイルパスを指定します
	;	個数    = 読み込むRSSフィールドの数を指定します
	;	          (0または省略時は5個になります)
	;
	newcom oDom,"Microsoft.XMLDOM"
	oDom("async")="FALSE"		; 同期読み込みを行う
	oDom->"load" _p1
	oRoot = oDom("documentElement")
	if varuse(oRoot)=0 : return 1
	rsstag = getpath(""+oRoot("tagName"),16)
	if rsstag="rdf:rdf" : goto *rsspick
	if rsstag="rss" : goto *rsspick

	delcom oRoot
	delcom oDom
	return
*rsspick
	maxnum=_p2
	if maxnum<=0 : maxnum=5

	comres elm_ch
	oDom->"getElementsByTagName" "title"

	comres elm_link
	oDom->"getElementsByTagName" "link"

	max=elm_ch("length")
	if max>maxnum : max=maxnum

	sdim _v1, 64, max
	sdim _v2, 64, max

	repeat max
		i=cnt
		node = elm_ch("item",i)
		node2 = node("firstChild")
		_v1.i = node2("nodeValue")

		node = elm_link("item",i)
		node2 = node("firstChild")
		_v2.i = node2("nodeValue")
	loop

	delcom node
	delcom node2
	delcom elm_ch
	delcom elm_link
	delcom oRoot
	delcom oDom

	return 0

#global

#endif


#module "sprmod"

#define global ROT4096 0.00153398078125

;
;	標準命令による簡易スプライトモジュール
;

#deffunc init_sprite int _p1, int _p2, int max

	;	スプライト初期化
	;
	sprsx=_p1:sprsy=_p2
	dim sprflg,max
	dim sprx,max
	dim spry,max
	dim sprpx,max
	dim sprpy,max
	dim sprchr,max
	dim sprrot,max
	sprbuf=3
	sprgmode=2
	sprhx=sprsx/2
	sprhy=sprsy/2
	return

#deffunc opt_sprite int _p1, int _p2

	;	スプライト表示設定変更
	;	opt_sprite バッファID, コピーモード
	;
	sprbuf=_p1
	sprgmode=_p2
	return

#deffunc set_sprite int id, int _p1, int _p2, int _p3

	;	スプライト設定
	;
	sprflg.id=1
	sprx.id=_p1
	spry.id=_p2
	sprchr.id=_p3
	return

#deffunc draw_sprite int id, int _p1, int _p2, int _p3

	;	スプライト表示
	;
	gmode sprgmode,sprsx,sprsy,256
	;
	foreach sprflg
	if sprflg.cnt=0 : continue
		if sprrot.cnt=0 {
			;	回転なし
			pos sprx.cnt-sprhx,spry.cnt-sprhy
			gcopy sprbuf,0,(sprchr.cnt>>2)*sprsy
		} else {
			;	4096で一回転とする表示
			pos sprx.cnt,spry.cnt
			grotate sprbuf,0,(sprchr.cnt>>2)*sprsy,ROT4096*sprrot.cnt
		}
	loop
	return


#deffunc move_sprite1_init

	foreach sprflg
	set_sprite cnt,rnd(640),rnd(480)+480+sprhy,0
	sprpx.cnt=rnd(4096)
	sprpy.cnt=rnd(4)-4
	sprchr.cnt=rnd(64)
	loop
	return

#deffunc move_sprite1

	foreach sprflg
	if sprflg(cnt)=0 : continue

	sprx.cnt+=sin(ROT4096*sprpx.cnt)*4
	spry.cnt+=sprpy.cnt
	sprpx.cnt+=64
	if spry.cnt<-sprhy : spry.cnt=480+sprhy
	sprchr.cnt=(sprchr.cnt+1)&63

	loop
	return


#deffunc move_sprite2_init

	foreach sprflg
	set_sprite cnt,120,480+sprhy+cnt*240,0
	sprchr.cnt=cnt<<2
	loop
	return

#deffunc move_sprite2

	foreach sprflg
	if sprflg(cnt)=0 : continue
	spry.cnt-=1
	loop

	return

#global

;
; ステータスバー作成モジュール
;
#ifndef __mod_stbar__
#define __mod_stbar__

#module stbar
#uselib "user32"
#func	GetWindowRect "GetWindowRect" int, var

#deffunc stbar_bye
	; ステータスバー破棄(通常は呼ばなくてもOKです)
	act=ginfo_sel
	if sthwnd(act)=0 : return
	clrobj stbar(act)
	return

#deffunc stbar_ini
	; ステータスバー作成
	;
	act=ginfo_sel
	winobj "msctls_statusbar32","",0,$50000000
	stbar(act) = stat		; ステータスバーのオブジェクトID
	if stbar(act)<0 : dialog "ステータスバー作成に失敗しました" : return
	sthwnd(act) = objinfo(stbar(act), 2)	; ステータスバーのhWnd
	dim stsize, 4 		; RECT構造体
	GetWindowRect sthwnd, stsize
	stbar_sx(act) = stsize(2) - stsize(0)	; ステータスバーの幅
	stbar_sy(act) = stsize(3) - stsize(1)	; ステータスバーの高さ
	return

#deffunc stbar_text str _p1
	; ステータスバーにテキストを設定
	act=ginfo_sel
	if sthwnd(act)=0 : return
	msg=_p1
	sendmsg sthwnd(act), 0x0401, 0, varptr(msg) ; SB_SETTEXTを送る
	return

#deffunc stbar_resize
	; ステータスバーのリサイズメッセージ(WM_SIZE)処理
	act=ginfo_sel
	if sthwnd(act)=0 : return
	sendmsg sthwnd(act), 0x0005, 0, 0	 ; WM_SIZEを送る
	return

#global
#endif

////////////////////////////////////////////////////////////////////////////////
//  mod_usbio  USB-IO制御モジュール for HSP ver0.4
//                               Copyright(C) 2007 K.Kawahira
//                               Modified 2010/7 onitama

#module
#define MAX_DEVS 32
#define NULL 0
#uselib "kernel32.dll"
#func CreateFile "CreateFileA" str,int,int,int,int,int,nullptr
#func WriteFile "WriteFile" int,var,int,var,int
#func ReadFile "ReadFile" int,var,int,var,int
#func CloseHandle "CloseHandle" int
#uselib "hid.dll"
#func HidD_GetAttributes "HidD_GetAttributes" int,var
#func HidD_GetHidGuid "HidD_GetHidGuid" var
#func HidD_GetPreparsedData "HidD_GetPreparsedData" int,var
#func HidP_GetCaps "HidP_GetCaps" int,var
#func HidD_FreePreparsedData "HidD_FreePreparsedData" int
#uselib "setupapi.dll"
#func SetupDiGetClassDevs "SetupDiGetClassDevsA" var,int,int,int
#func SetupDiEnumDeviceInterfaces "SetupDiEnumDeviceInterfaces" int,int,var,int,var
#func SetupDiDestroyDeviceInfoList "SetupDiDestroyDeviceInfoList" int
#func SetupDiGetDeviceInterfaceDetail "SetupDiGetDeviceInterfaceDetailA" int,var,int,int,var,int
/*
typedef struct _SP_DEVICE_INTERFACE_DATA {
    DWORD cbSize;
    GUID  InterfaceClassGuid;
    DWORD Flags;
    ULONG_PTR Reserved;
} SP_DEVICE_INTERFACE_DATA, *PSP_DEVICE_INTERFACE_DATA;
*/

// 見つかったディバイスの個数を返す
#deffunc uio_getdevs
	mref _stat,64
	_stat=devs
return

// n番目のディバイス選択
#deffunc uio_seldev int n
	if (n>=devs) :return
	if (hHID) {
		CloseHandle hHID
		hHID=NULL
	}

	CreateFile devpath(dev),0xC0000000,3,NULL,3,0
	if (stat==-1) : return
	hHID=stat

	dim hPreparsedData
	dim Caps,16
	HidD_GetPreparsedData hHID,hPreparsedData
	HidP_GetCaps hPreparsedData,Caps
	HidD_FreePreparsedData hPreparsedData

	InputByte=Caps(1)&0xffff
	OutputByte=Caps(1)>>16&0xffff
return

// ディバイスを検索して一覧作成
#deffunc uio_find
	sdim devpath,256,MAX_DEVS
	sdim path,256,MAX_DEVS
	dev=0
	devs=0

	sdim HidGuid,16
	dim devData,8

	devData(0) = 28 // cbSize

	dim DeviceAttributes,4
	DeviceAttributes(0)=10 // cbSize

	HidD_GetHidGuid HidGuid
	SetupDiGetClassDevs HidGuid,0,0,0x12
	DeviceInfoSet=stat
	dim Needed

	repeat
		SetupDiEnumDeviceInterfaces DeviceInfoSet,0,HidGuid,cnt,devData
		if stat==0 : break
		SetupDiGetDeviceInterfaceDetail DeviceInfoSet,devData,NULL,0,Needed,0
		size = Needed
		sdim DevDetail,Needed+4
		lpoke DevDetail,0,5
		//DevDetail(0)=5 // size
		SetupDiGetDeviceInterfaceDetail DeviceInfoSet,devData,varptr(DevDetail),size,Needed,0
		memcpy path,DevDetail,size,0,4
		;path=strmid(DevDetail,4,size)
		CreateFile path,0xC0000000,3,NULL,3,0
		hHID=stat
		HidD_GetAttributes hHID,DeviceAttributes
		vid=DeviceAttributes(1)&0xffff
		pid=DeviceAttributes(1)>>16&0xffff
		ver=DeviceAttributes(2)&0xffff

		;print path
		;print strlen(path)
		print "path="+DevDetail+"  vid="+vid+"  pid="+pid+" (v:"+ver+")"
		if ((vid==0x0BFE && pid==0x1003) || (vid==0x12ED && pid==0x1003) || (vid==0x1352 && pid==0x100)) {
			devpath(devs)=path
			devs++
			if (devs>=MAX_DEVS) : break
		}

		CloseHandle hHID
	loop
	SetupDiDestroyDeviceInfoList DeviceInfoSet
	hHID = NULL
	if (devs) {
		uio_seldev 0
	}
	mref _stat,64
	_stat=devs==0
return

// ポート出力
#deffunc uio_out int port,int value,int mode
	if (hHID==NULL) : uio_find
	mref _stat,64
	dim sz,1
	sdim dat,10
	poke dat,0,0
	poke dat,1,1+port
	poke dat,2,value
	if (mode) {
		poke dat,1,0x10+port
	}
	WriteFile hHID,dat,OutputByte,sz,NULL
	_stat=sz!=OutputByte
return


// ポートから入力
#deffunc uio_inp var v,int port,int mode
	if (hHID==NULL) : uio_find
	mref _stat,64
	dim sz,1
	cmdid=(cmdid+1)&255
	sdim dat,10
	poke dat,0,0
	poke dat,1,3+port
	poke dat,2,0
	poke dat,7,cmdid
	if (mode) {
		poke dat,1,0x14+port
	}
	WriteFile hHID,dat,OutputByte,sz,NULL
	if (stat==0) :_stat=1: return
	f=1
	repeat 100
		ReadFile hHID,dat,InputByte,sz,NULL
		if (stat==0) :_stat=1:return
		if (peek(dat,7)==cmdid) : v=peek(dat,2):f=0:break
	loop
	_stat=f
return

// 閉じる
#deffunc uio_free onexit
	if (hHID) {
		CloseHandle hHID
		hHID=NULL
	}
	devs=0
return
#global

;
;	obaq.dll header
;
#ifndef __obaq__
#define __obaq__

#uselib "obaq.dll"
#func qreset qreset $202
#func qterm qterm 0
#func qexec qexec 0
#func qdraw qdraw 2

#func qview qview $202
#func qsetreq qsetreq $202
#func qgetreq qgetreq $202
#func qgetptr qgetptr $202

#func qborder qborder $202
#func qgravity qgravity $202
#func qcnvaxis qcnvaxis $202
#func qgetaxis qgetaxis $202

#func qdel qdel $202
#func qfind qfind $202
#func qnext qnext $202
#func qcollision qcollision $202
#func qgetcol qgetcol $202
#func qgetcol2 qgetcol2 $202
#func qgetcol3 qgetcol3 $202

#func qaddpoly qaddpoly $202
#func qaddmodel qaddmodel $202
#func qpos qpos $202
#func qgetpos qgetpos $202
#func qweight qweight $202
#func qgetweight qgetweight $202
#func qspeed qspeed $202
#func qgetspeed qgetspeed $202
#func qgroup qgroup $202
#func qgetgroup qgetgroup $202
#func qtype qtype $202
#func qgettype qgettype $202
#func qstat qstat $202
#func qgetstat qgetstat $202
#func qmat qmat $202
#func qgetmat qgetmat $202
#func qmat2 qmat2 $202
#func qgetmat2 qgetmat2 $202
#func qmat3 qmat3 $202
#func qgetmat3 qgetmat3 $202
#func quser quser $202
#func qgetuser qgetuser $202
#func quser2 quser2 $202
#func qgetuser2 qgetuser2 $202
#func qdamper qdamper $202
#func qgetdamper qgetdamper $202
#func qinertia qinertia $202
#func qgetinertia qgetinertia $202
#func qgetversion qgetversion $202

#func qpush qpush $202
#func qblast qblast $202
#func qinner qinner $202


;
;	type define
;
#const global type_normal 0
#const global type_inner 1
#const global type_bindX 0x40
#const global type_bindY 0x80
#const global type_bindR 0x100
#const global type_bind 0x1c0
#const global type_nest 0x20000
#const global type_autowipe 0x100000

;
;	stat define
;
#const global stat_reserve 0
#const global stat_sleep 1
#const global stat_active 2

;
;	collision check
;
#const global colsw_none 0
#const global colsw_active 1
#const global colsw_all 2
#const global colsw_nest 3

;
;	material type
;
#const global mat_none 0
#const global mat_spr 1
#const global mat_spr2 2
#const global mat_wire 3
#const global mat_wire2 4
#const global mat_delay 0x1000

;
;	system request
;
#define global REQ_NONE 0
#define global REQ_PHYSICS_RATE 1
#define global REQ_MAXOBJ 2
#define global REQ_MAXLOG 3
#define global REQ_DEFAULT_WEIGHT 4
#define global REQ_DEFAULT_MOMENT 5
#define global REQ_DEFAULT_DAMPER 6
#define global REQ_DEFAULT_FRICTION 7


#endif

;
; HSP3.0 Utility macros and functions
;
#ifndef __obj__
#define __obj__

#module "llmod_obj"

#uselib "user32.dll"
#func _IsWindowEnabled "IsWindowEnabled" int
#func _EnableWindow "EnableWindow" int,int
#func _GetWindowRect "GetWindowRect" int,int
#func _MoveWindow "MoveWindow" int,int,int,int,int,int
#func _ScreenToClient "ScreenToClient" int,int

#deffunc objgray int v1,int v2

	;================================================================================
	; objgray n1,n2		オブジェクトの使用可、不可設定
	;
	;  n1 : オブジェクトのID
	;  n2 : 使用可にするか不可するかのフラグ
	;================================================================================
	; buttonなどのオブジェクトを使用可にしたり、不可にしたりします。
	; n1にはbuttonやlistviewなどのIDを代入します。
	; n2を0にするとオブジェクトを使用できない状態にし、1にすると使用できる
	; 状態にします。
	; n2を-1にするとそのオブジェクトが使用可か不可かを調べます。
	;
	if v2<0 {
		_IsWindowEnabled objinfo_hwnd(v1)
	}else{
		_EnableWindow objinfo_hwnd(v1),v2
	}
	return stat


#deffunc p_scrwnd array v4

	;================================================================================
	; p_scrwnd v1			スクリーン座標系をウィンドウ座標系に変換
	;
	;  v1 : スクリーン座標系が入った数値変数
	;================================================================================
	;
	;<>説明
	; スクリーン座標系をウィンドウ座標系に変換します。
	; v1にx座標、y座標を代入しておきます。
	; 描画対象となっているウィンドを基準にします。
	;例)
	;	ginfo
	;	x=prmx,prmy
	;	p_scrwnd x	;スクリーン座標系をウィンドウ座標系に変換
	;
	mref bmscr,67
	prm=bmscr.13
	_ScreenToClient prm, varptr(v4)
	return


#deffunc getobjsize array v1,int v2

	;================================================================================
	; getobjsize v1,n2		オブジェクトのサイズと位置取得
	;
	;  v1 : オブジェクトのサイズ、位置を取得するための数値変数
	;  n2 : オブジェクトのID
	;================================================================================
	;
	;<>説明
	; オブジェクトのサイズと位置を取得します。
	; n2にはbuttonやlistviewなどのIDを代入します。
	; v1にはオブジェクトのサイズ、位置が以下のように代入されます。
	;	v1.0	幅
	;	v1.1	高さ
	;	v1.2	左上のx座標
	;	v1.3	左上のy座標
	;	v1.4	右下のx座標
	;	v1.5	右下のy座標
	; 各座標はウィンドウ座標系です。
	;
	;typedef struct _RECT {    // rc  
	;    LONG left; 
	;    LONG top; 
	;    LONG right; 
	;    LONG bottom; 
	;} RECT; 

	mref bmscr,67
	prm=bmscr.13
	v1.5=0

	_GetWindowRect objinfo_hwnd(v2), varptr(v1)+8
	res=stat
	v1=v1.4-v1.2 , v1.5-v1.3
	_ScreenToClient prm, varptr(v1)+8
	_ScreenToClient prm, varptr(v1)+16
	return res


#deffunc resizeobj int v1,array v2,int v3

	;================================================================================
	; resizeobj n1,v2,n3		オブジェクトのサイズ変更
	;
	;  n1 : オブジェクトのID
	;  v2 : サイズ、位置が入った数値変数
	;  n3 : 位置、サイズを変更しないかどうかのフラグ
	;================================================================================
	;
	;<>説明
	; オブジェクトn1のサイズを変更します。
	; v2には幅、高さ、x座標,y座表の順に代入しておきます。
	; n3を1にすると位置を変えずにサイズだけ変更します。
	; n3を2にするとサイズを変えずに位置だけ変更します。
	;
	;例)
	;	button "width*2",wx2
	;	button "height*2",hx2
	;	input s,100,20
	;	ipt_id=2
	;	;幅を40、高さを30にして(0,80)に移動する
	;	s=40,30,0,80
	;	resizeobj ipt_id,s
	;	stop
	;*wx2
	;	;幅を2倍にする
	;	getobjsize s,ipt_id
	;	s=s*2
	;	resizeobj ipt_id,s
	;	stop
	;*hx2
	;	;高さを2倍にする
	;	getobjsize s,ipt_id
	;	s.1=s.1*2
	;	resizeobj ipt_id,s
	;	stop
	;
	sx=v2(0):sy=v2(1):x=v2(2):y=v2(3)
	if v3 {			
		getobjsize m,v1		;getobjsizeでm.0からw,h,x,yが代入される
		if stat=-1 : return stat
		if v3=1 : x=m(2):y=m(3)		;位置を変更しない
		if v3=2 : sx=m:sy=m(1)		;サイズを変更しない
	}
	_MoveWindow objinfo_hwnd(v1),x,y,sx,sy,1
	return stat


#global


#endif
;(ole32.as)
#ifdef __hsp30__
#ifndef __OLE32__
	#define global __OLE32__
	#uselib "OLE32.DLL"
	#func global BindMoniker "BindMoniker" sptr,sptr,sptr,sptr
	#func global CLIPFORMAT_UserFree "CLIPFORMAT_UserFree" sptr,sptr
	#func global CLIPFORMAT_UserMarshal "CLIPFORMAT_UserMarshal" sptr,sptr,sptr
	#func global CLIPFORMAT_UserSize "CLIPFORMAT_UserSize" sptr,sptr,sptr
	#func global CLIPFORMAT_UserUnmarshal "CLIPFORMAT_UserUnmarshal" sptr,sptr,sptr
	#func global CLSIDFromProgID "CLSIDFromProgID" sptr,sptr
	#func global CLSIDFromProgIDEx "CLSIDFromProgIDEx" sptr,sptr
	#func global CLSIDFromString "CLSIDFromString" sptr,sptr
	#func global CoAddRefServerProcess "CoAddRefServerProcess"
	#func global CoAllowSetForegroundWindow "CoAllowSetForegroundWindow" sptr,sptr
	#func global CoBuildVersion "CoBuildVersion"
	#func global CoCancelCall "CoCancelCall" sptr,sptr
	#func global CoCopyProxy "CoCopyProxy" sptr,sptr
	#func global CoCreateFreeThreadedMarshaler "CoCreateFreeThreadedMarshaler" sptr,sptr
	#func global CoCreateGuid "CoCreateGuid" sptr
	#func global CoCreateInstance "CoCreateInstance" sptr,sptr,sptr,sptr,sptr
	#func global CoCreateInstanceEx "CoCreateInstanceEx" sptr,sptr,sptr,sptr,sptr,sptr
	#func global CoCreateObjectInContext "CoCreateObjectInContext" sptr,sptr,sptr,sptr
	#func global CoDeactivateObject "CoDeactivateObject" sptr,sptr
	#func global CoDisableCallCancellation "CoDisableCallCancellation" sptr
	#func global CoDisconnectObject "CoDisconnectObject" sptr,sptr
	#func global CoDosDateTimeToFileTime "CoDosDateTimeToFileTime" sptr,sptr,sptr
	#func global CoEnableCallCancellation "CoEnableCallCancellation" sptr
	#func global CoFileTimeNow "CoFileTimeNow" sptr
	#func global CoFileTimeToDosDateTime "CoFileTimeToDosDateTime" sptr,sptr,sptr
	#func global CoFreeAllLibraries "CoFreeAllLibraries"
	#func global CoFreeLibrary "CoFreeLibrary" sptr
	#func global CoFreeUnusedLibraries "CoFreeUnusedLibraries"
	#func global CoFreeUnusedLibrariesEx "CoFreeUnusedLibrariesEx" sptr,sptr
	#func global CoGetApartmentID "CoGetApartmentID" sptr,sptr
	#func global CoGetCallContext "CoGetCallContext" sptr,sptr
	#func global CoGetCallerTID "CoGetCallerTID" sptr
	#func global CoGetCancelObject "CoGetCancelObject" sptr,sptr,sptr
	#func global CoGetClassObject "CoGetClassObject" sptr,sptr,sptr,sptr,sptr
	#func global CoGetClassVersion "CoGetClassVersion" sptr,sptr,sptr
	#func global CoGetContextToken "CoGetContextToken" sptr
	#func global CoGetCurrentLogicalThreadId "CoGetCurrentLogicalThreadId" sptr
	#func global CoGetCurrentProcess "CoGetCurrentProcess"
	#func global CoGetDefaultContext "CoGetDefaultContext" sptr,sptr,sptr
	#func global CoGetInstanceFromFile "CoGetInstanceFromFile" sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global CoGetInstanceFromIStorage "CoGetInstanceFromIStorage" sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global CoGetInterceptor "CoGetInterceptor" sptr,sptr,sptr,sptr
	#func global CoGetInterceptorFromTypeInfo "CoGetInterceptorFromTypeInfo" sptr,sptr,sptr,sptr,sptr
	#func global CoGetInterfaceAndReleaseStream "CoGetInterfaceAndReleaseStream" sptr,sptr,sptr
	#func global CoGetMalloc "CoGetMalloc" sptr,sptr
	#func global CoGetMarshalSizeMax "CoGetMarshalSizeMax" sptr,sptr,sptr,sptr,sptr,sptr
	#func global CoGetObject "CoGetObject" sptr,sptr,sptr,sptr
	#func global CoGetObjectContext "CoGetObjectContext" sptr,sptr
	#func global CoGetPSClsid "CoGetPSClsid" sptr,sptr
	#func global CoGetProcessIdentifier "CoGetProcessIdentifier" sptr
	#func global CoGetStandardMarshal "CoGetStandardMarshal" sptr,sptr,sptr,sptr,sptr,sptr
	#func global CoGetState "CoGetState" sptr
	#func global CoGetStdMarshalEx "CoGetStdMarshalEx" sptr,sptr,sptr
	#func global CoGetTreatAsClass "CoGetTreatAsClass" sptr,sptr
	#func global CoImpersonateClient "CoImpersonateClient"
	#func global CoInitialize "CoInitialize" sptr
	#func global CoInitializeEx "CoInitializeEx" sptr,sptr
	#func global CoInitializeSecurity "CoInitializeSecurity" sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global CoInitializeWOW "CoInitializeWOW" wptr,wptr
	#func global CoInstall "CoInstall" sptr,sptr,sptr,sptr,sptr
	#func global CoInvalidateRemoteMachineBindings "CoInvalidateRemoteMachineBindings" sptr
	#func global CoIsHandlerConnected "CoIsHandlerConnected" sptr
	#func global CoIsOle1Class "CoIsOle1Class" sptr
	#func global CoLoadLibrary "CoLoadLibrary" sptr,sptr
	#func global CoLockObjectExternal "CoLockObjectExternal" sptr,sptr,sptr
	#func global CoMarshalHresult "CoMarshalHresult" sptr,sptr
	#func global CoMarshalInterThreadInterfaceInStream "CoMarshalInterThreadInterfaceInStream" sptr,sptr,sptr
	#func global CoMarshalInterface "CoMarshalInterface" sptr,sptr,sptr,sptr,sptr,sptr
	#func global CoQueryAuthenticationServices "CoQueryAuthenticationServices" sptr,sptr
	#func global CoQueryClientBlanket "CoQueryClientBlanket" sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global CoQueryProxyBlanket "CoQueryProxyBlanket" sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global CoQueryReleaseObject "CoQueryReleaseObject" sptr
	#func global CoReactivateObject "CoReactivateObject" sptr,sptr
	#func global CoRegisterChannelHook "CoRegisterChannelHook" sptr,sptr
	#func global CoRegisterClassObject "CoRegisterClassObject" sptr,sptr,sptr,sptr,sptr
	#func global CoRegisterInitializeSpy "CoRegisterInitializeSpy" sptr,sptr
	#func global CoRegisterMallocSpy "CoRegisterMallocSpy" sptr
	#func global CoRegisterMessageFilter "CoRegisterMessageFilter" sptr,sptr
	#func global CoRegisterPSClsid "CoRegisterPSClsid" sptr,sptr
	#func global CoRegisterSurrogate "CoRegisterSurrogate" sptr
	#func global CoRegisterSurrogateEx "CoRegisterSurrogateEx" sptr,sptr
	#func global CoReleaseMarshalData "CoReleaseMarshalData" sptr
	#func global CoReleaseServerProcess "CoReleaseServerProcess"
	#func global CoResumeClassObjects "CoResumeClassObjects"
	#func global CoRetireServer "CoRetireServer" sptr
	#func global CoRevertToSelf "CoRevertToSelf"
	#func global CoRevokeClassObject "CoRevokeClassObject" sptr
	#func global CoRevokeInitializeSpy "CoRevokeInitializeSpy" sptr,sptr
	#func global CoRevokeMallocSpy "CoRevokeMallocSpy"
	#func global CoSetCancelObject "CoSetCancelObject" sptr
	#func global CoSetProxyBlanket "CoSetProxyBlanket" sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global CoSetState "CoSetState" sptr
	#func global CoSuspendClassObjects "CoSuspendClassObjects"
	#func global CoSwitchCallContext "CoSwitchCallContext" sptr,sptr
	#func global CoTaskMemAlloc "CoTaskMemAlloc" sptr
	#func global CoTaskMemFree "CoTaskMemFree" sptr
	#func global CoTaskMemRealloc "CoTaskMemRealloc" sptr,sptr
	#func global CoTestCancel "CoTestCancel"
	#func global CoTreatAsClass "CoTreatAsClass" sptr,sptr
	#func global CoUninitialize "CoUninitialize"
	#func global CoUnloadingWOW "CoUnloadingWOW" wptr
	#func global CoUnmarshalHresult "CoUnmarshalHresult" sptr,sptr
	#func global CoUnmarshalInterface "CoUnmarshalInterface" sptr,sptr,sptr
	#func global CoWaitForMultipleHandles "CoWaitForMultipleHandles" sptr,sptr,sptr,sptr,sptr
	#func global ComPs_NdrDllCanUnloadNow "ComPs_NdrDllCanUnloadNow" sptr
	#func global ComPs_NdrDllGetClassObject "ComPs_NdrDllGetClassObject" sptr,sptr,sptr,sptr,sptr,sptr
	#func global ComPs_NdrDllRegisterProxy "ComPs_NdrDllRegisterProxy" sptr,sptr,sptr,sptr,sptr
	#func global ComPs_NdrDllUnregisterProxy "ComPs_NdrDllUnregisterProxy" sptr,sptr,sptr,sptr,sptr
	#func global CreateAntiMoniker "CreateAntiMoniker" sptr
	#func global CreateBindCtx "CreateBindCtx" sptr,sptr
	#func global CreateClassMoniker "CreateClassMoniker" sptr,sptr
	#func global CreateDataAdviseHolder "CreateDataAdviseHolder" sptr
	#func global CreateDataCache "CreateDataCache" sptr,sptr,sptr,sptr
	#func global CreateFileMoniker "CreateFileMoniker" sptr,sptr
	#func global CreateGenericComposite "CreateGenericComposite" sptr,sptr,sptr
	#func global CreateILockBytesOnHGlobal "CreateILockBytesOnHGlobal" sptr,sptr,sptr
	#func global CreateItemMoniker "CreateItemMoniker" sptr,sptr,sptr
	#func global CreateObjrefMoniker "CreateObjrefMoniker" sptr,sptr
	#func global CreateOleAdviseHolder "CreateOleAdviseHolder" sptr
	#func global CreatePointerMoniker "CreatePointerMoniker" sptr,sptr
	#func global CreateStdProgressIndicator "CreateStdProgressIndicator" sptr,sptr,sptr,sptr
	#func global CreateStreamOnHGlobal "CreateStreamOnHGlobal" sptr,sptr,sptr
	#func global DcomChannelSetHResult "DcomChannelSetHResult" sptr,sptr,sptr
	#func global DllDebugObjectRPCHook "DllDebugObjectRPCHook" sptr,sptr
	#func global DllGetClassObjectWOW "DllGetClassObjectWOW" wptr,wptr,wptr
	#func global DoDragDrop "DoDragDrop" sptr,sptr,sptr,sptr
	#func global EnableHookObject "EnableHookObject" sptr,sptr
	#func global FmtIdToPropStgName "FmtIdToPropStgName" sptr,sptr
	#func global FreePropVariantArray "FreePropVariantArray" sptr,sptr
	#func global GetClassFile "GetClassFile" sptr,sptr
	#func global GetConvertStg "GetConvertStg" sptr
	#func global GetDocumentBitStg "GetDocumentBitStg" sptr
	#func global GetHGlobalFromILockBytes "GetHGlobalFromILockBytes" sptr,sptr
	#func global GetHGlobalFromStream "GetHGlobalFromStream" sptr,sptr
	#func global GetHookInterface "GetHookInterface" sptr
	#func global GetRunningObjectTable "GetRunningObjectTable" sptr,sptr
	#func global HACCEL_UserFree "HACCEL_UserFree" sptr,sptr
	#func global HACCEL_UserMarshal "HACCEL_UserMarshal" sptr,sptr,sptr
	#func global HACCEL_UserSize "HACCEL_UserSize" sptr,sptr,sptr
	#func global HACCEL_UserUnmarshal "HACCEL_UserUnmarshal" sptr,sptr,sptr
	#func global HBITMAP_UserFree "HBITMAP_UserFree" sptr,sptr
	#func global HBITMAP_UserMarshal "HBITMAP_UserMarshal" sptr,sptr,sptr
	#func global HBITMAP_UserSize "HBITMAP_UserSize" sptr,sptr,sptr
	#func global HBITMAP_UserUnmarshal "HBITMAP_UserUnmarshal" sptr,sptr,sptr
	#func global HBRUSH_UserFree "HBRUSH_UserFree" sptr,sptr
	#func global HBRUSH_UserMarshal "HBRUSH_UserMarshal" sptr,sptr,sptr
	#func global HBRUSH_UserSize "HBRUSH_UserSize" sptr,sptr,sptr
	#func global HBRUSH_UserUnmarshal "HBRUSH_UserUnmarshal" sptr,sptr,sptr
	#func global HDC_UserFree "HDC_UserFree" sptr,sptr
	#func global HDC_UserMarshal "HDC_UserMarshal" sptr,sptr,sptr
	#func global HDC_UserSize "HDC_UserSize" sptr,sptr,sptr
	#func global HDC_UserUnmarshal "HDC_UserUnmarshal" sptr,sptr,sptr
	#func global HENHMETAFILE_UserFree "HENHMETAFILE_UserFree" sptr,sptr
	#func global HENHMETAFILE_UserMarshal "HENHMETAFILE_UserMarshal" sptr,sptr,sptr
	#func global HENHMETAFILE_UserSize "HENHMETAFILE_UserSize" sptr,sptr,sptr
	#func global HENHMETAFILE_UserUnmarshal "HENHMETAFILE_UserUnmarshal" sptr,sptr,sptr
	#func global HGLOBAL_UserFree "HGLOBAL_UserFree" sptr,sptr
	#func global HGLOBAL_UserMarshal "HGLOBAL_UserMarshal" sptr,sptr,sptr
	#func global HGLOBAL_UserSize "HGLOBAL_UserSize" sptr,sptr,sptr
	#func global HGLOBAL_UserUnmarshal "HGLOBAL_UserUnmarshal" sptr,sptr,sptr
	#func global HICON_UserFree "HICON_UserFree" sptr,sptr
	#func global HICON_UserMarshal "HICON_UserMarshal" sptr,sptr,sptr
	#func global HICON_UserSize "HICON_UserSize" sptr,sptr,sptr
	#func global HICON_UserUnmarshal "HICON_UserUnmarshal" sptr,sptr,sptr
	#func global HMENU_UserFree "HMENU_UserFree" sptr,sptr
	#func global HMENU_UserMarshal "HMENU_UserMarshal" sptr,sptr,sptr
	#func global HMENU_UserSize "HMENU_UserSize" sptr,sptr,sptr
	#func global HMENU_UserUnmarshal "HMENU_UserUnmarshal" sptr,sptr,sptr
	#func global HMETAFILEPICT_UserFree "HMETAFILEPICT_UserFree" sptr,sptr
	#func global HMETAFILEPICT_UserMarshal "HMETAFILEPICT_UserMarshal" sptr,sptr,sptr
	#func global HMETAFILEPICT_UserSize "HMETAFILEPICT_UserSize" sptr,sptr,sptr
	#func global HMETAFILEPICT_UserUnmarshal "HMETAFILEPICT_UserUnmarshal" sptr,sptr,sptr
	#func global HMETAFILE_UserFree "HMETAFILE_UserFree" sptr,sptr
	#func global HMETAFILE_UserMarshal "HMETAFILE_UserMarshal" sptr,sptr,sptr
	#func global HMETAFILE_UserSize "HMETAFILE_UserSize" sptr,sptr,sptr
	#func global HMETAFILE_UserUnmarshal "HMETAFILE_UserUnmarshal" sptr,sptr,sptr
	#func global HPALETTE_UserFree "HPALETTE_UserFree" sptr,sptr
	#func global HPALETTE_UserMarshal "HPALETTE_UserMarshal" sptr,sptr,sptr
	#func global HPALETTE_UserSize "HPALETTE_UserSize" sptr,sptr,sptr
	#func global HPALETTE_UserUnmarshal "HPALETTE_UserUnmarshal" sptr,sptr,sptr
	#func global HWND_UserFree "HWND_UserFree" sptr,sptr
	#func global HWND_UserMarshal "HWND_UserMarshal" sptr,sptr,sptr
	#func global HWND_UserSize "HWND_UserSize" sptr,sptr,sptr
	#func global HWND_UserUnmarshal "HWND_UserUnmarshal" sptr,sptr,sptr
	#func global HkOleRegisterObject "HkOleRegisterObject" sptr,sptr,sptr,sptr
	#func global IIDFromString "IIDFromString" sptr,sptr
	#func global IsAccelerator "IsAccelerator" sptr,sptr,sptr,sptr
	#func global IsEqualGUID "IsEqualGUID" sptr,sptr
	#func global IsValidIid "IsValidIid" sptr
	#func global IsValidInterface "IsValidInterface" sptr
	#func global IsValidPtrIn "IsValidPtrIn" sptr,sptr
	#func global IsValidPtrOut "IsValidPtrOut" sptr,sptr
	#func global MkParseDisplayName "MkParseDisplayName" sptr,sptr,sptr,sptr
	#func global MonikerCommonPrefixWith "MonikerCommonPrefixWith" sptr,sptr,sptr
	#func global MonikerRelativePathTo "MonikerRelativePathTo" sptr,sptr,sptr,sptr
	#func global OleBuildVersion "OleBuildVersion"
	#func global OleConvertIStorageToOLESTREAM "OleConvertIStorageToOLESTREAM" sptr,sptr
	#func global OleConvertIStorageToOLESTREAMEx "OleConvertIStorageToOLESTREAMEx" sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global OleConvertOLESTREAMToIStorage "OleConvertOLESTREAMToIStorage" sptr,sptr,sptr
	#func global OleConvertOLESTREAMToIStorageEx "OleConvertOLESTREAMToIStorageEx" sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global OleCreate "OleCreate" sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global OleCreateDefaultHandler "OleCreateDefaultHandler" sptr,sptr,sptr,sptr
	#func global OleCreateEmbeddingHelper "OleCreateEmbeddingHelper" sptr,sptr,sptr,sptr,sptr,sptr
	#func global OleCreateEx "OleCreateEx" sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global OleCreateFromData "OleCreateFromData" sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global OleCreateFromDataEx "OleCreateFromDataEx" sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global OleCreateFromFile "OleCreateFromFile" sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global OleCreateFromFileEx "OleCreateFromFileEx" sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global OleCreateLink "OleCreateLink" sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global OleCreateLinkEx "OleCreateLinkEx" sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global OleCreateLinkFromData "OleCreateLinkFromData" sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global OleCreateLinkFromDataEx "OleCreateLinkFromDataEx" sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global OleCreateLinkToFile "OleCreateLinkToFile" sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global OleCreateLinkToFileEx "OleCreateLinkToFileEx" sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global OleCreateMenuDescriptor "OleCreateMenuDescriptor" sptr,sptr
	#func global OleCreateStaticFromData "OleCreateStaticFromData" sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global OleDestroyMenuDescriptor "OleDestroyMenuDescriptor" sptr
	#func global OleDoAutoConvert "OleDoAutoConvert" sptr,sptr
	#func global OleDraw "OleDraw" sptr,sptr,sptr,sptr
	#func global OleDuplicateData "OleDuplicateData" sptr,sptr,sptr
	#func global OleFlushClipboard "OleFlushClipboard"
	#func global OleGetAutoConvert "OleGetAutoConvert" sptr,sptr
	#func global OleGetClipboard "OleGetClipboard" sptr
	#func global OleGetIconOfClass "OleGetIconOfClass" sptr,sptr,sptr
	#func global OleGetIconOfFile "OleGetIconOfFile" sptr,sptr
	#func global OleInitialize "OleInitialize" sptr
	#func global OleInitializeWOW "OleInitializeWOW" wptr,wptr
	#func global OleIsCurrentClipboard "OleIsCurrentClipboard" sptr
	#func global OleIsRunning "OleIsRunning" sptr
	#func global OleLoad "OleLoad" sptr,sptr,sptr,sptr
	#func global OleLoadFromStream "OleLoadFromStream" sptr,sptr,sptr
	#func global OleLockRunning "OleLockRunning" sptr,sptr,sptr
	#func global OleMetafilePictFromIconAndLabel "OleMetafilePictFromIconAndLabel" sptr,sptr,sptr,sptr
	#func global OleNoteObjectVisible "OleNoteObjectVisible" sptr,sptr
	#func global OleQueryCreateFromData "OleQueryCreateFromData" sptr
	#func global OleQueryLinkFromData "OleQueryLinkFromData" sptr
	#func global OleRegEnumFormatEtc "OleRegEnumFormatEtc" sptr,sptr,sptr
	#func global OleRegEnumVerbs "OleRegEnumVerbs" sptr,sptr
	#func global OleRegGetMiscStatus "OleRegGetMiscStatus" sptr,sptr,sptr
	#func global OleRegGetUserType "OleRegGetUserType" sptr,sptr,sptr
	#func global OleRun "OleRun" sptr
	#func global OleSave "OleSave" sptr,sptr,sptr
	#func global OleSaveToStream "OleSaveToStream" sptr,sptr
	#func global OleSetAutoConvert "OleSetAutoConvert" sptr,sptr
	#func global OleSetClipboard "OleSetClipboard" sptr
	#func global OleSetContainedObject "OleSetContainedObject" sptr,sptr
	#func global OleSetMenuDescriptor "OleSetMenuDescriptor" sptr,sptr,sptr,sptr,sptr
	#func global OleTranslateAccelerator "OleTranslateAccelerator" sptr,sptr,sptr
	#func global OleUninitialize "OleUninitialize"
	#func global OpenOrCreateStream "OpenOrCreateStream" sptr,sptr,sptr
	#func global ProgIDFromCLSID "ProgIDFromCLSID" sptr,sptr
	#func global PropStgNameToFmtId "PropStgNameToFmtId" sptr,sptr
	#func global PropSysAllocString "PropSysAllocString" sptr
	#func global PropSysFreeString "PropSysFreeString" sptr
	#func global PropVariantClear "PropVariantClear" sptr
	#func global PropVariantCopy "PropVariantCopy" sptr,sptr
	#func global ReadClassStg "ReadClassStg" sptr,sptr
	#func global ReadClassStm "ReadClassStm" sptr,sptr
	#func global ReadFmtUserTypeStg "ReadFmtUserTypeStg" sptr,sptr,sptr
	#func global ReadOleStg "ReadOleStg" sptr,sptr,sptr,sptr,sptr,sptr
	#func global ReadStringStream "ReadStringStream" sptr,sptr
	#func global RegisterDragDrop "RegisterDragDrop" sptr,sptr
	#func global ReleaseStgMedium "ReleaseStgMedium" sptr
	#func global RevokeDragDrop "RevokeDragDrop" sptr
	#func global SNB_UserFree "SNB_UserFree" sptr,sptr
	#func global SNB_UserMarshal "SNB_UserMarshal" sptr,sptr,sptr
	#func global SNB_UserSize "SNB_UserSize" sptr,sptr,sptr
	#func global SNB_UserUnmarshal "SNB_UserUnmarshal" sptr,sptr,sptr
	#func global STGMEDIUM_UserFree "STGMEDIUM_UserFree" sptr,sptr
	#func global STGMEDIUM_UserMarshal "STGMEDIUM_UserMarshal" sptr,sptr,sptr
	#func global STGMEDIUM_UserSize "STGMEDIUM_UserSize" sptr,sptr,sptr
	#func global STGMEDIUM_UserUnmarshal "STGMEDIUM_UserUnmarshal" sptr,sptr,sptr
	#func global SetConvertStg "SetConvertStg" sptr,sptr
	#func global SetDocumentBitStg "SetDocumentBitStg" sptr,sptr
	#func global StgConvertPropertyToVariant "StgConvertPropertyToVariant" sptr,sptr,sptr,sptr
	#func global StgConvertVariantToProperty "StgConvertVariantToProperty" sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global StgCreateDocfile "StgCreateDocfile" sptr,sptr,sptr,sptr
	#func global StgCreateDocfileOnILockBytes "StgCreateDocfileOnILockBytes" sptr,sptr,sptr,sptr
	#func global StgCreatePropSetStg "StgCreatePropSetStg" sptr,sptr,sptr
	#func global StgCreatePropStg "StgCreatePropStg" sptr,sptr,sptr,sptr,sptr,sptr
	#func global StgCreateStorageEx "StgCreateStorageEx" sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global StgGetIFillLockBytesOnFile "StgGetIFillLockBytesOnFile" sptr,sptr
	#func global StgGetIFillLockBytesOnILockBytes "StgGetIFillLockBytesOnILockBytes" sptr,sptr
	#func global StgIsStorageFile "StgIsStorageFile" sptr
	#func global StgIsStorageILockBytes "StgIsStorageILockBytes" sptr
	#func global StgOpenAsyncDocfileOnIFillLockBytes "StgOpenAsyncDocfileOnIFillLockBytes" sptr,sptr,sptr,sptr
	#func global StgOpenPropStg "StgOpenPropStg" sptr,sptr,sptr,sptr,sptr
	#func global StgOpenStorage "StgOpenStorage" sptr,sptr,sptr,sptr,sptr,sptr
	#func global StgOpenStorageEx "StgOpenStorageEx" sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global StgOpenStorageOnILockBytes "StgOpenStorageOnILockBytes" sptr,sptr,sptr,sptr,sptr,sptr
	#func global StgPropertyLengthAsVariant "StgPropertyLengthAsVariant" sptr,sptr,sptr,sptr
	#func global StgSetTimes "StgSetTimes" sptr,sptr,sptr,sptr
	#func global StringFromCLSID "StringFromCLSID" sptr,sptr
	#func global StringFromGUID2 "StringFromGUID2" sptr,sptr,sptr
	#func global StringFromIID "StringFromIID" sptr,sptr
	#func global UpdateDCOMSettings "UpdateDCOMSettings"
	#func global UtConvertDvtd16toDvtd32 "UtConvertDvtd16toDvtd32" sptr,sptr,sptr
	#func global UtConvertDvtd32toDvtd16 "UtConvertDvtd32toDvtd16" sptr,sptr,sptr
	#func global UtGetDvtd16Info "UtGetDvtd16Info" sptr,sptr
	#func global UtGetDvtd32Info "UtGetDvtd32Info" sptr,sptr
	#func global WdtpInterfacePointer_UserFree "WdtpInterfacePointer_UserFree" sptr
	#func global WdtpInterfacePointer_UserMarshal "WdtpInterfacePointer_UserMarshal" sptr,sptr,sptr,sptr,sptr
	#func global WdtpInterfacePointer_UserSize "WdtpInterfacePointer_UserSize" sptr,sptr,sptr,sptr,sptr
	#func global WdtpInterfacePointer_UserUnmarshal "WdtpInterfacePointer_UserUnmarshal" sptr,sptr,sptr,sptr
	#func global WriteClassStg "WriteClassStg" sptr,sptr
	#func global WriteClassStm "WriteClassStm" sptr,sptr
	#func global WriteFmtUserTypeStg "WriteFmtUserTypeStg" sptr,sptr,sptr
	#func global WriteOleStg "WriteOleStg" sptr,sptr,sptr,sptr
	#func global WriteStringStream "WriteStringStream" sptr,sptr
#endif
#endif
;(shell32.as)
#ifdef __hsp30__
#ifndef __SHELL32__
#define global __SHELL32__
#uselib "SHELL32.DLL"
	#func global CDefFolderMenu_Create2 "CDefFolderMenu_Create2" sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global CDefFolderMenu_Create "CDefFolderMenu_Create" sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global CallCPLEntry16 "CallCPLEntry16" sptr,sptr,sptr,sptr,sptr,sptr
	#define global CheckEscapes CheckEscapesA
	#func global CheckEscapesA "CheckEscapesA" sptr,sptr
	#func global CheckEscapesW "CheckEscapesW" wptr,wptr
	#func global CommandLineToArgvW "CommandLineToArgvW" wptr,wptr
	#func global DAD_AutoScroll "DAD_AutoScroll" sptr,sptr,sptr
	#func global DAD_DragEnterEx2 "DAD_DragEnterEx2" sptr,sptr,sptr,sptr
	#func global DAD_DragEnterEx "DAD_DragEnterEx" sptr,sptr,sptr
	#func global DAD_DragLeave "DAD_DragLeave"
	#func global DAD_DragMove "DAD_DragMove" sptr,sptr
	#func global DAD_SetDragImage "DAD_SetDragImage" sptr,sptr
	#func global DAD_ShowDragImage "DAD_ShowDragImage" sptr
	#define global DoEnvironmentSubst DoEnvironmentSubstA
	#func global DoEnvironmentSubstA "DoEnvironmentSubstA" sptr,sptr
	#func global DoEnvironmentSubstW "DoEnvironmentSubstW" wptr,wptr
	#func global DragAcceptFiles "DragAcceptFiles" sptr,sptr
	#func global DragFinish "DragFinish" sptr
	#func global DragQueryFile "DragQueryFile" sptr,sptr,sptr,sptr
	#func global DragQueryFileA "DragQueryFileA" sptr,sptr,sptr,sptr
	#func global DragQueryFileAorW "DragQueryFileAorW" wptr,wptr,wptr,wptr,wptr,wptr
	#func global DragQueryFileW "DragQueryFileW" wptr,wptr,wptr,wptr
	#func global DragQueryPoint "DragQueryPoint" sptr,sptr
	#func global DriveType "DriveType" sptr
	#func global DuplicateIcon "DuplicateIcon" sptr,sptr
	#define global ExtractAssociatedIcon ExtractAssociatedIconA
	#func global ExtractAssociatedIconA "ExtractAssociatedIconA" sptr,sptr,sptr
	#define global ExtractAssociatedIconEx ExtractAssociatedIconExA
	#func global ExtractAssociatedIconExA "ExtractAssociatedIconExA" sptr,sptr,sptr,sptr
	#func global ExtractAssociatedIconExW "ExtractAssociatedIconExW" wptr,wptr,wptr,wptr
	#func global ExtractAssociatedIconW "ExtractAssociatedIconW" wptr,wptr,wptr
	#define global ExtractIcon ExtractIconA
	#func global ExtractIconA "ExtractIconA" sptr,sptr,sptr
	#func global ExtractIconEx "ExtractIconEx" sptr,sptr,sptr,sptr,sptr
	#func global ExtractIconExA "ExtractIconExA" sptr,sptr,sptr,sptr,sptr
	#func global ExtractIconExW "ExtractIconExW" wptr,wptr,wptr,wptr,wptr
	#define global ExtractIconResInfo ExtractIconResInfoA
	#func global ExtractIconResInfoA "ExtractIconResInfoA" sptr,sptr,sptr,sptr,sptr
	#func global ExtractIconResInfoW "ExtractIconResInfoW" wptr,wptr,wptr,wptr,wptr
	#func global ExtractIconW "ExtractIconW" wptr,wptr,wptr
	#func global ExtractVersionResource16W "ExtractVersionResource16W" wptr,wptr
	#func global FindExeDlgProc "FindExeDlgProc" sptr,sptr,sptr,sptr
	#define global FindExecutable FindExecutableA
	#func global FindExecutableA "FindExecutableA" sptr,sptr,sptr
	#func global FindExecutableW "FindExecutableW" wptr,wptr,wptr
	#func global FreeIconList "FreeIconList" sptr,sptr
	#func global GetFileNameFromBrowse "GetFileNameFromBrowse" sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global ILAppendID "ILAppendID" sptr,sptr,sptr
	#func global ILClone "ILClone" sptr
	#func global ILCloneFirst "ILCloneFirst" sptr
	#func global ILCombine "ILCombine" sptr,sptr
	#func global ILCreateFromPath "ILCreateFromPath" sptr
	#func global ILCreateFromPathA "ILCreateFromPathA" sptr
	#func global ILCreateFromPathW "ILCreateFromPathW" wptr
	#func global ILFindChild "ILFindChild" sptr,sptr
	#func global ILFindLastID "ILFindLastID" sptr
	#func global ILFree "ILFree" sptr
	#func global ILGetNext "ILGetNext" sptr
	#func global ILGetSize "ILGetSize" sptr
	#func global ILIsEqual "ILIsEqual" sptr,sptr
	#func global ILIsParent "ILIsParent" sptr,sptr,sptr
	#func global ILLoadFromStream "ILLoadFromStream" sptr,sptr
	#func global ILRemoveLastID "ILRemoveLastID" sptr
	#func global ILSaveToStream "ILSaveToStream" sptr,sptr
	#define global InternalExtractIconList InternalExtractIconListA
	#func global InternalExtractIconListA "InternalExtractIconListA" sptr,sptr,sptr
	#func global InternalExtractIconListW "InternalExtractIconListW" wptr,wptr,wptr
	#func global IsLFNDrive "IsLFNDrive" sptr
	#func global IsLFNDriveA "IsLFNDriveA" sptr
	#func global IsLFNDriveW "IsLFNDriveW" wptr
	#func global IsNetDrive "IsNetDrive" sptr
	#func global IsUserAnAdmin "IsUserAnAdmin"
	#func global OpenRegStream "OpenRegStream" sptr,sptr,sptr,sptr
	#func global PathCleanupSpec "PathCleanupSpec" sptr,sptr
	#func global PathGetShortPath "PathGetShortPath" sptr
	#func global PathIsExe "PathIsExe" sptr
	#define global PathIsSlow PathIsSlowA
	#func global PathIsSlowA "PathIsSlowA" sptr,sptr
	#func global PathIsSlowW "PathIsSlowW" wptr,wptr
	#func global PathMakeUniqueName "PathMakeUniqueName" sptr,sptr,sptr,sptr,sptr
	#func global PathProcessCommand "PathProcessCommand" sptr,sptr,sptr,sptr
	#func global PathQualify "PathQualify" sptr
	#func global PathResolve "PathResolve" sptr,sptr,sptr
	#func global PathYetAnotherMakeUniqueName "PathYetAnotherMakeUniqueName" sptr,sptr,sptr,sptr
	#func global PickIconDlg "PickIconDlg" sptr,sptr,sptr,sptr
	#func global PifMgr_CloseProperties "PifMgr_CloseProperties" sptr,sptr
	#func global PifMgr_GetProperties "PifMgr_GetProperties" sptr,sptr,sptr,sptr,sptr
	#func global PifMgr_OpenProperties "PifMgr_OpenProperties" sptr,sptr,sptr,sptr
	#func global PifMgr_SetProperties "PifMgr_SetProperties" sptr,sptr,sptr,sptr,sptr
	#func global ReadCabinetState "ReadCabinetState" sptr,sptr
	#func global RealDriveType "RealDriveType" sptr,sptr
	#define global RealShellExecute RealShellExecuteA
	#func global RealShellExecuteA "RealShellExecuteA" sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#define global RealShellExecuteEx RealShellExecuteExA
	#func global RealShellExecuteExA "RealShellExecuteExA" sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global RealShellExecuteExW "RealShellExecuteExW" wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr
	#func global RealShellExecuteW "RealShellExecuteW" wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr
	#func global RegenerateUserEnvironment "RegenerateUserEnvironment" sptr,sptr
	#func global RestartDialog "RestartDialog" sptr,sptr,sptr
	#func global RestartDialogEx "RestartDialogEx" sptr,sptr,sptr,sptr
	#func global SHAddFromPropSheetExtArray "SHAddFromPropSheetExtArray" sptr,sptr,sptr
	#func global SHAddToRecentDocs "SHAddToRecentDocs" sptr,sptr
	#func global SHAlloc "SHAlloc" sptr
	#func global SHAllocShared "SHAllocShared" sptr,sptr,sptr
	#func global SHAppBarMessage "SHAppBarMessage" sptr,sptr
	#func global SHBindToParent "SHBindToParent" sptr,sptr,sptr,sptr
	#func global SHBrowseForFolder "SHBrowseForFolder" sptr
	#func global SHBrowseForFolderA "SHBrowseForFolderA" sptr
	#func global SHBrowseForFolderW "SHBrowseForFolderW" wptr
	#func global SHCLSIDFromString "SHCLSIDFromString" sptr,sptr
	#func global SHChangeNotification_Lock "SHChangeNotification_Lock" sptr,sptr,sptr,sptr
	#func global SHChangeNotification_Unlock "SHChangeNotification_Unlock" sptr
	#func global SHChangeNotify "SHChangeNotify" sptr,sptr,sptr,sptr
	#func global SHChangeNotifyDeregister "SHChangeNotifyDeregister" sptr
	#func global SHChangeNotifyRegister "SHChangeNotifyRegister" sptr,sptr,sptr,sptr,sptr,sptr
	#func global SHCloneSpecialIDList "SHCloneSpecialIDList" sptr,sptr,sptr
	#func global SHCoCreateInstance "SHCoCreateInstance" sptr,sptr,sptr,sptr,sptr
	#func global SHCreateDirectory "SHCreateDirectory" sptr,sptr
	#define global SHCreateDirectoryEx SHCreateDirectoryExA
	#func global SHCreateDirectoryExA "SHCreateDirectoryExA" sptr,sptr,sptr
	#func global SHCreateDirectoryExW "SHCreateDirectoryExW" wptr,wptr,wptr
	#func global SHCreateFileExtractIconW "SHCreateFileExtractIconW" wptr,wptr,wptr,wptr
	#func global SHCreateProcessAsUserW "SHCreateProcessAsUserW" wptr
	#func global SHCreatePropSheetExtArray "SHCreatePropSheetExtArray" sptr,sptr,sptr
	#func global SHCreateQueryCancelAutoPlayMoniker "SHCreateQueryCancelAutoPlayMoniker" sptr
	#func global SHCreateShellFolderView "SHCreateShellFolderView" sptr,sptr
	#func global SHCreateShellFolderViewEx "SHCreateShellFolderViewEx" sptr,sptr
	#func global SHCreateShellItem "SHCreateShellItem" sptr,sptr,sptr,sptr
	#func global SHCreateStdEnumFmtEtc "SHCreateStdEnumFmtEtc" sptr,sptr,sptr
	#define global SHDefExtractIcon SHDefExtractIconA
	#func global SHDefExtractIconA "SHDefExtractIconA" sptr,sptr,sptr,sptr,sptr,sptr
	#func global SHDefExtractIconW "SHDefExtractIconW" wptr,wptr,wptr,wptr,wptr,wptr
	#func global SHDestroyPropSheetExtArray "SHDestroyPropSheetExtArray" sptr
	#func global SHDoDragDrop "SHDoDragDrop" sptr,sptr,sptr,sptr,sptr
	#define global SHEmptyRecycleBin SHEmptyRecycleBinA
	#func global SHEmptyRecycleBinA "SHEmptyRecycleBinA" sptr,sptr,sptr
	#func global SHEmptyRecycleBinW "SHEmptyRecycleBinW" wptr,wptr,wptr
	#func global SHEnumerateUnreadMailAccountsW "SHEnumerateUnreadMailAccountsW" wptr,wptr,wptr,wptr
	#func global SHExtractIconsW "SHExtractIconsW" wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr
	#func global SHFileOperation "SHFileOperation" sptr
	#func global SHFileOperationA "SHFileOperationA" sptr
	#func global SHFileOperationW "SHFileOperationW" wptr
	#func global SHFindFiles "SHFindFiles" sptr,sptr
	#func global SHFind_InitMenuPopup "SHFind_InitMenuPopup" sptr,sptr,sptr,sptr
	#func global SHFlushClipboard "SHFlushClipboard"
	#func global SHFlushSFCache "SHFlushSFCache"
	#func global SHFormatDrive "SHFormatDrive" sptr,sptr,sptr,sptr
	#func global SHFree "SHFree" sptr
	#func global SHFreeNameMappings "SHFreeNameMappings" sptr
	#func global SHFreeShared "SHFreeShared" sptr,sptr
	#func global SHGetAttributesFromDataObject "SHGetAttributesFromDataObject" sptr,sptr,sptr,sptr
	#define global SHGetDataFromIDList SHGetDataFromIDListA
	#func global SHGetDataFromIDListA "SHGetDataFromIDListA" sptr,sptr,sptr,sptr,sptr
	#func global SHGetDataFromIDListW "SHGetDataFromIDListW" wptr,wptr,wptr,wptr,wptr
	#func global SHGetDesktopFolder "SHGetDesktopFolder" sptr
	#define global SHGetDiskFreeSpace SHGetDiskFreeSpaceA
	#func global SHGetDiskFreeSpaceA "SHGetDiskFreeSpaceA" sptr,sptr,sptr,sptr
	#define global SHGetDiskFreeSpaceEx SHGetDiskFreeSpaceExA
	#func global SHGetDiskFreeSpaceExA "SHGetDiskFreeSpaceExA" sptr,sptr,sptr,sptr
	#func global SHGetDiskFreeSpaceExW "SHGetDiskFreeSpaceExW" wptr,wptr,wptr,wptr
	#func global SHGetFileInfo "SHGetFileInfo" sptr,sptr,sptr,sptr,sptr
	#func global SHGetFileInfoA "SHGetFileInfoA" sptr,sptr,sptr,sptr,sptr
	#func global SHGetFileInfoW "SHGetFileInfoW" wptr,wptr,wptr,wptr,wptr
	#func global SHGetFolderLocation "SHGetFolderLocation" sptr,sptr,sptr,sptr,sptr
	#define global SHGetFolderPath SHGetFolderPathA
	#func global SHGetFolderPathA "SHGetFolderPathA" sptr,sptr,sptr,sptr,sptr
	#define global SHGetFolderPathAndSubDir SHGetFolderPathAndSubDirA
	#func global SHGetFolderPathAndSubDirA "SHGetFolderPathAndSubDirA" sptr,sptr,sptr,sptr,sptr,sptr
	#func global SHGetFolderPathAndSubDirW "SHGetFolderPathAndSubDirW" wptr,wptr,wptr,wptr,wptr,wptr
	#func global SHGetFolderPathW "SHGetFolderPathW" wptr,wptr,wptr,wptr,wptr
	#define global SHGetIconOverlayIndex SHGetIconOverlayIndexA
	#func global SHGetIconOverlayIndexA "SHGetIconOverlayIndexA" sptr,sptr
	#func global SHGetIconOverlayIndexW "SHGetIconOverlayIndexW" wptr,wptr
	#func global SHGetInstanceExplorer "SHGetInstanceExplorer" sptr
	#func global SHGetMalloc "SHGetMalloc" sptr
	#func global SHGetNewLinkInfo "SHGetNewLinkInfo" sptr,sptr,sptr,sptr,sptr
	#func global SHGetNewLinkInfoA "SHGetNewLinkInfoA" sptr,sptr,sptr,sptr,sptr
	#func global SHGetNewLinkInfoW "SHGetNewLinkInfoW" wptr,wptr,wptr,wptr,wptr
	#func global SHGetPathFromIDList "SHGetPathFromIDList" sptr,sptr
	#func global SHGetPathFromIDListA "SHGetPathFromIDListA" sptr,sptr
	#func global SHGetPathFromIDListW "SHGetPathFromIDListW" wptr,wptr
	#func global SHGetRealIDL "SHGetRealIDL" sptr,sptr,sptr
	#func global SHGetSetFolderCustomSettingsW "SHGetSetFolderCustomSettingsW" wptr,wptr,wptr
	#func global SHGetSetSettings "SHGetSetSettings" sptr,sptr,sptr
	#func global SHGetSettings "SHGetSettings" sptr,sptr
	#func global SHGetShellStyleHInstance "SHGetShellStyleHInstance"
	#func global SHGetSpecialFolderLocation "SHGetSpecialFolderLocation" sptr,sptr,sptr
	#func global SHGetSpecialFolderPath "SHGetSpecialFolderPath" sptr,sptr,sptr,sptr
	#func global SHGetSpecialFolderPathA "SHGetSpecialFolderPathA" sptr,sptr,sptr,sptr
	#func global SHGetSpecialFolderPathW "SHGetSpecialFolderPathW" wptr,wptr,wptr,wptr
	#func global SHGetUnreadMailCountW "SHGetUnreadMailCountW" wptr,wptr,wptr,wptr,wptr,wptr
	#func global SHHandleUpdateImage "SHHandleUpdateImage" sptr
	#func global SHILCreateFromPath "SHILCreateFromPath" sptr,sptr,sptr
	#define global SHInvokePrinterCommand SHInvokePrinterCommandA
	#func global SHInvokePrinterCommandA "SHInvokePrinterCommandA" sptr,sptr,sptr,sptr,sptr
	#func global SHInvokePrinterCommandW "SHInvokePrinterCommandW" wptr,wptr,wptr,wptr,wptr
	#func global SHIsFileAvailableOffline "SHIsFileAvailableOffline" sptr,sptr
	#func global SHLimitInputEdit "SHLimitInputEdit" sptr,sptr
	#func global SHLoadInProc "SHLoadInProc" sptr
	#func global SHLoadNonloadedIconOverlayIdentifiers "SHLoadNonloadedIconOverlayIdentifiers"
	#func global SHLoadOLE "SHLoadOLE" sptr
	#func global SHLockShared "SHLockShared" sptr,sptr
	#func global SHMapIDListToImageListIndexAsync "SHMapIDListToImageListIndexAsync" sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global SHMapPIDLToSystemImageListIndex "SHMapPIDLToSystemImageListIndex" sptr,sptr,sptr
	#func global SHMultiFileProperties "SHMultiFileProperties" sptr,sptr
	#func global SHObjectProperties "SHObjectProperties" sptr,sptr,sptr,sptr
	#func global SHOpenFolderAndSelectItems "SHOpenFolderAndSelectItems" sptr,sptr,sptr,sptr
	#func global SHOpenPropSheetW "SHOpenPropSheetW" wptr,wptr,wptr,wptr,wptr,wptr,wptr
	#func global SHParseDisplayName "SHParseDisplayName" sptr,sptr,sptr,sptr,sptr
	#define global SHPathPrepareForWrite SHPathPrepareForWriteA
	#func global SHPathPrepareForWriteA "SHPathPrepareForWriteA" sptr,sptr,sptr,sptr
	#func global SHPathPrepareForWriteW "SHPathPrepareForWriteW" wptr,wptr,wptr,wptr
	#func global SHPropStgCreate "SHPropStgCreate" sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global SHPropStgReadMultiple "SHPropStgReadMultiple" sptr,sptr,sptr,sptr,sptr
	#func global SHPropStgWriteMultiple "SHPropStgWriteMultiple" sptr,sptr,sptr,sptr,sptr,sptr
	#define global SHQueryRecycleBin SHQueryRecycleBinA
	#func global SHQueryRecycleBinA "SHQueryRecycleBinA" sptr,sptr
	#func global SHQueryRecycleBinW "SHQueryRecycleBinW" wptr,wptr
	#func global SHReplaceFromPropSheetExtArray "SHReplaceFromPropSheetExtArray" sptr,sptr,sptr,sptr
	#func global SHRestricted "SHRestricted" sptr
	#func global SHRunControlPanel "SHRunControlPanel" sptr,sptr
	#func global SHSetInstanceExplorer "SHSetInstanceExplorer" sptr
	#func global SHSetLocalizedName "SHSetLocalizedName" sptr,sptr,sptr
	#func global SHSetUnreadMailCountW "SHSetUnreadMailCountW" wptr,wptr,wptr
	#func global SHShellFolderView_Message "SHShellFolderView_Message" sptr,sptr,sptr
	#func global SHSimpleIDListFromPath "SHSimpleIDListFromPath" sptr
	#func global SHStartNetConnectionDialogW "SHStartNetConnectionDialogW" wptr,wptr,wptr
	#func global SHTestTokenMembership "SHTestTokenMembership" sptr,sptr
	#func global SHUnlockShared "SHUnlockShared" sptr
	#define global SHUpdateImage SHUpdateImageA
	#func global SHUpdateImageA "SHUpdateImageA" sptr,sptr,sptr,sptr
	#func global SHUpdateImageW "SHUpdateImageW" wptr,wptr,wptr,wptr
	#func global SHUpdateRecycleBinIcon "SHUpdateRecycleBinIcon"
	#func global SHValidateUNC "SHValidateUNC" sptr,sptr,sptr
	#define global SheChangeDir SheChangeDirA
	#func global SheChangeDirA "SheChangeDirA" sptr
	#define global SheChangeDirEx SheChangeDirExA
	#func global SheChangeDirExA "SheChangeDirExA" sptr
	#func global SheChangeDirExW "SheChangeDirExW" wptr
	#func global SheChangeDirW "SheChangeDirW" wptr
	#func global SheConvertPathW "SheConvertPathW" wptr,wptr,wptr
	#define global SheFullPath SheFullPathA
	#func global SheFullPathA "SheFullPathA" sptr,sptr,sptr
	#func global SheFullPathW "SheFullPathW" wptr,wptr,wptr
	#func global SheGetCurDrive "SheGetCurDrive"
	#define global SheGetDir SheGetDirA
	#func global SheGetDirA "SheGetDirA" sptr,sptr
	#func global SheGetDirExW "SheGetDirExW" wptr,wptr,wptr
	#func global SheGetDirW "SheGetDirW" wptr,wptr
	#func global SheGetPathOffsetW "SheGetPathOffsetW" wptr
	#define global SheRemoveQuotes SheRemoveQuotesA
	#func global SheRemoveQuotesA "SheRemoveQuotesA" sptr
	#func global SheRemoveQuotesW "SheRemoveQuotesW" wptr
	#func global SheSetCurDrive "SheSetCurDrive" sptr
	#define global SheShortenPath SheShortenPathA
	#func global SheShortenPathA "SheShortenPathA" sptr,sptr
	#func global SheShortenPathW "SheShortenPathW" wptr,wptr
	#define global ShellAbout ShellAboutA
	#func global ShellAboutA "ShellAboutA" sptr,sptr,sptr,sptr
	#func global ShellAboutW "ShellAboutW" wptr,wptr,wptr,wptr
	#define global ShellExecute ShellExecuteA
	#func global ShellExecuteA "ShellExecuteA" sptr,sptr,sptr,sptr,sptr,sptr
	#func global ShellExecuteEx "ShellExecuteEx" sptr
	#func global ShellExecuteExA "ShellExecuteExA" sptr
	#func global ShellExecuteExW "ShellExecuteExW" wptr
	#func global ShellExecuteW "ShellExecuteW" wptr,wptr,wptr,wptr,wptr,wptr
	#func global ShellHookProc "ShellHookProc" sptr,sptr,sptr
	#define global ShellMessageBox ShellMessageBoxA
	#func global ShellMessageBoxA "ShellMessageBoxA" sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global ShellMessageBoxW "ShellMessageBoxW" wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr
	#func global Shell_GetCachedImageIndex "Shell_GetCachedImageIndex" sptr,sptr,sptr
	#func global Shell_GetImageLists "Shell_GetImageLists" sptr,sptr
	#func global Shell_MergeMenus "Shell_MergeMenus" sptr,sptr,sptr,sptr,sptr,sptr
	#func global Shell_NotifyIcon "Shell_NotifyIcon" sptr,sptr
	#func global Shell_NotifyIconA "Shell_NotifyIconA" sptr,sptr
	#func global Shell_NotifyIconW "Shell_NotifyIconW" wptr,wptr
	#func global SignalFileOpen "SignalFileOpen" sptr
	#func global WOWShellExecute "WOWShellExecute" sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global Win32DeleteFile "Win32DeleteFile" sptr
	#func global WriteCabinetState "WriteCabinetState" sptr
#endif
#endif

;============================================================
;                                                 2009/05/09
;    SQLele 1.14 for SQLite3 (UTF-8), HSP3
;                               http://sprocket.babyblue.jp/
;============================================================

#ifndef sql_q
#module sqle

#define BUSY_TIMEOUT	60000

; const
#define SQLITE_OK           0   /* Successful result */
#define SQLITE_BUSY         5   /* The database file is locked */
#define SQLITE_ROW         100  /* sqlite3_step() has another row ready */
#define SQLITE_DONE        101  /* sqlite3_step() has finished executing */

#define global SQLITE_INTEGER  1
#define global SQLITE_FLOAT    2
#define global SQLITE_TEXT     3
#define global SQLITE_BLOB     4
#define global SQLITE_NULL     5

; apis
#uselib "sqlite3"
#func sqlite3_open		"sqlite3_open"		sptr, var
#func sqlite3_close		"sqlite3_close"		int
#func sqlite3_prepare_v2	"sqlite3_prepare_v2"	int, sptr, int, var, int
#func sqlite3_bind_int		"sqlite3_bind_int"	int, int, int
#func sqlite3_bind_double	"sqlite3_bind_double"	int, int, double
#func sqlite3_bind_text		"sqlite3_bind_text"	int, int, int, int, int
#func sqlite3_bind_blob		"sqlite3_bind_blob"	int, int, int, int, int
#func sqlite3_clear_bindings	"sqlite3_clear_bindings" int
#func sqlite3_reset		"sqlite3_reset"		int
#func sqlite3_step		"sqlite3_step"		int
#func sqlite3_finalize		"sqlite3_finalize"	int
#func sqlite3_column_count	"sqlite3_column_count"	int
#func sqlite3_column_blob	"sqlite3_column_blob"	int, int
#func sqlite3_column_name	"sqlite3_column_name"	int, int
#func sqlite3_column_text	"sqlite3_column_text"	int, int
#func sqlite3_column_bytes	"sqlite3_column_bytes"	int, int
#func sqlite3_column_type	"sqlite3_column_type"	int, int
#func sqlite3_errmsg		"sqlite3_errmsg"	int
#func sqlite3_snprintf		"sqlite3_snprintf"	int, var, sptr, sptr
#func sqlite3_busy_timeout	"sqlite3_busy_timeout"	int, int

#uselib "kernel32"
#func kSleep		"Sleep"		int
#func kRtlMoveMemory	"RtlMoveMemory"	int, int, int
#func kMultiByteToWideChar "MultiByteToWideChar" sptr, sptr, sptr, sptr, sptr, sptr
#func kWideCharToMultiByte "WideCharToMultiByte" sptr, sptr, sptr, sptr, sptr, sptr, sptr, sptr
#func win98chk		"GetLongPathNameA"

#define enddd end:end

;============================================================
; Shift_JIS <--> UTF-8 / internal
;------------------------------------------------------------
; pASCII to vUTF8
#deffunc pascii_to_vutf int p1, var v1
	kMultiByteToWideChar 0, 0, p1, -1, 0, 0
	memexpand wtmp, stat * 4
	kMultiByteToWideChar 0, 0, p1, -1, varptr(wtmp), stat

	kWideCharToMultiByte 65001, 0, varptr(wtmp), -1, 0, 0, 0, 0
	memexpand v1, stat + 16
	kWideCharToMultiByte 65001, 0, varptr(wtmp), -1, varptr(v1), stat, 0, 0
	return

; pUTF8 to vASCII
#deffunc putf_to_vascii int p1, var v1
	kMultiByteToWideChar 65001, 0, p1, -1, 0, 0
	memexpand wtmp, stat * 4
	kMultiByteToWideChar 65001, 0, p1, -1, varptr(wtmp), stat

	kWideCharToMultiByte 0, 0, varptr(wtmp), -1, 0, 0, 0, 0
	memexpand v1, stat + 16
	kWideCharToMultiByte 0, 0, varptr(wtmp), -1, varptr(v1), stat, 0, 0
	return


;============================================================
; sql_close
;------------------------------------------------------------
#deffunc sql_close  onexit
	if pdb {
		gosub *finze_stm
		sqlite3_close pdb
		pdb = 0
	}
	return


;============================================================
; binding parameter
; str = prm_bind(val, size, type)
; str = prm_f(f)
;------------------------------------------------------------
#defcfunc prm_bind int p1, int p2, int p3
	; あとで bind する情報を記録
	bind_p(binds) = p1
	bind_n(binds) = p2
	bind_t(binds) = p3
	; SQL 文には bind パラメータ ?n が挿入されるようにする
	binds++
	return strf(" ?%d ", binds)

#defcfunc prm_f double p1
	bind_f(binds) = p1
	bind_t(binds) = SQLITE_FLOAT
	binds++
	return strf(" ?%d ", binds)

;------------------------------------------------------------
; str = prm_i(int)
; str = prm_text(var)
; str = prm_blob(var, size)
;------------------------------------------------------------
#define global ctype prm_i(%1)		prm_bind(%1, 0, SQLITE_INTEGER)
#define global ctype prm_text(%1)	prm_bind(varptr(%1), strlen(%1), SQLITE_TEXT)
#define global ctype prm_blob(%1, %2)	prm_bind(varptr(%1), %2, SQLITE_BLOB)


;============================================================
; sql_q  "SQL statement", arr ; exec query / get values
;  return : int records
;------------------------------------------------------------
#define global sql_q(%1, %2=tmparr)  sql_q_ %1, %2
#deffunc sql_q_  str p1, array v1

*sql_q_retry

	if pdb = 0 {
		dialog "DB not opened.", , "SQL ERR"
		enddd
	}

	if p1 = sqls {
		; pstm リサイクル
		sqlite3_reset pstm
	} else {
		; SQL statement をパース
		gosub *finze_stm
		sqls = p1
		pascii_to_vutf varptr(sqls), atmp
		sqlite3_prepare_v2 pdb, atmp, strlen(atmp), pstm, 0
		if stat {
			errsql = "SQL : " + sqls
			goto *badend
		}
	}

	recs = 0

	if pstm {
		; バインド変数をセット
		repeat binds
			if bind_t(cnt) = SQLITE_TEXT {
				pascii_to_vutf bind_p(cnt), atmp(cnt)
				sqlite3_bind_text pstm, cnt+1, varptr(atmp(cnt)), strlen(atmp(cnt))
			} else:if bind_t(cnt) = SQLITE_INTEGER {
				sqlite3_bind_int pstm, cnt+1, bind_p(cnt)
			} else:if bind_t(cnt) = SQLITE_FLOAT {
				sqlite3_bind_double pstm, cnt+1, bind_f(cnt)
			} else:if bind_t(cnt) = SQLITE_BLOB {
				sqlite3_bind_blob pstm, cnt+1, bind_p(cnt), bind_n(cnt)
			}
		loop

		; SQL statement 実行
		sqlite3_step pstm

		; BUSY
		if stat = SQLITE_BUSY : goto *busy_handle

		; 出力がある場合 : レコードセット変数を作成
		if stat = SQLITE_ROW {
		/*
			レコードセット変数データ形式         0            4         8          12
			v1(0, 0)           : (str)Data (char)0 ? ? ? (int)Type (int)Count (int)0
			v1(*, [0〜recs-1]) : (str)Data (char)0 ? ? ? (int)Type (int)?     (int)0
			(BLOB) v1(*, *)    :           (char)0 ? ? ? (int)Type (int)?     (int)size  (blob)data
			v1(*, recs)        : (str)ColName
		*/

			; 出力アレイ作成  arr(cols, 可変recs )
			sqlite3_column_count pstm
			cols = stat
			sdim v1, 32, cols, 1

			; 全データを回収
			repeat
				repeat cols
					sqlite3_column_type pstm, cnt
					type = stat
					if type <= SQLITE_TEXT {
						; データ取得 (as text)
						sqlite3_column_text pstm, cnt
						putf_to_vascii stat, v1(cnt, recs)

						; 型 / BLOB サイズ情報
						n = strlen(v1(cnt, recs))
						lpoke v1(cnt, recs), n+4, type
						lpoke v1(cnt, recs), n+12
					} else {
						if type = SQLITE_BLOB {
							; BLOB 取得
							sqlite3_column_bytes pstm, cnt
							n = stat
							memexpand v1(cnt, recs), n+16
							sqlite3_column_blob pstm, cnt
							kRtlMoveMemory varptr(v1(cnt, recs))+16, stat, n
						} else {
							; NULL
							v1(cnt, recs) = ""
							n = 0
						}
						; 型 / BLOB サイズ情報
						lpoke v1(cnt, recs), 4, type
						lpoke v1(cnt, recs), 12, n
					}
				loop
				recs++

				sqlite3_step pstm
				if stat ! SQLITE_ROW : break
			loop

			; カラム名情報 追加
			repeat cols
				sqlite3_column_name pstm, cnt
				putf_to_vascii stat, v1(cnt, recs)
			loop

			; レコードカウンタ リセット
			lpoke v1, strlen(v1) + 8
		}
	}

	binds = 0
	return recs

;------------------------------------------------------------
; ビジー / ロック タイムアウト時の回復処理
*busy_handle
	busy_count++

	if busy_count \ 10 = 0 { ; re-open
		sql_close

		if busy_count \ 30 = 0 { ; user prompt
			dialog "Database query timed out.\n\nRetry?", 2, "SQL ERR"
			if stat = 7 : enddd
		}

		sqls = dir_cur
		chdir open_dir
		pascii_to_vutf varptr(open_fn), atmp
		sqlite3_open atmp, pdb
		chdir sqls
		sqlite3_busy_timeout pdb, BUSY_TIMEOUT
	}

	kSleep 500
	goto *sql_q_retry


;============================================================
; sql_open
;------------------------------------------------------------
#deffunc sql_open str p1
	if varptr(win98chk) = 0 {
		dialog "This program requires Windows 98/2000 or later.", , "SQL ERR"
		enddd
	}
	if varptr(sqlite3_prepare_v2) = 0 {
		dialog "sqlite3.dll not found.", , "SQL ERR"
		enddd
	}
	; init vars
	sdim wtmp, 65536
	sdim atmp, 32, 256
	ddim bind_f, 1

	; open されたファイルとディレクトリを記憶
	open_dir = dir_cur
	open_fn = p1

	; sqlite open
	sql_close
	pascii_to_vutf varptr(open_fn), atmp
	sqlite3_open atmp, pdb
	if stat {
		errsql = "FILE : " + open_fn
		goto *badend
	}
	sqlite3_busy_timeout pdb, BUSY_TIMEOUT
	return


;------------------------------------------------------------
*finze_stm
	if pstm {
		; SQL statement 終了
		sqlite3_finalize pstm
		pstm = 0
	}
	return


;------------------------------------------------------------
*badend
	sqlite3_errmsg pdb
	putf_to_vascii stat, atmp
	dialog "ERR : " + atmp + "\n\n" + strmid(errsql, 0, 999), , "SQL ERR"
	sqlite3_close pdb
	enddd


;============================================================
; id = sql_colid("Column name", arr) ; get colid
;------------------------------------------------------------
#define global ctype sql_colid(%1, %2=tmparr)  sql_colid_( %1, %2 )
#defcfunc sql_colid_  str p1, array v1
	i = -1
	recs = length2(v1) - 1
	if recs > 0 {
		; カラム名からカラム番号を検索
		repeat length(v1) ;= cols
			if p1 = v1(cnt, recs) {
				i = cnt
				break
			}
		loop
	}
	if i < 0 {
		dialog "column [" + p1 + "] does not exist.", , "SQL ERR"
		enddd
	}

	; 現在のレコードカウンタを n@sqle に、カラム番号を i@sqle に持っておく
	; 以降配列アクセスに arr(i@sqle, n@sqle) が使える (undocumented)
	n = lpeek(v1, strlen(v1) + 8)
	if n >= recs {
		dialog "record-counter overflow.", , "SQL ERR"
		enddd
	}
	return i

;------------------------------------------------------------
; var    sql_v("Column", arr)	; ref var
; val  = sql_i("Column", arr)	; get int(val)
; val  = sql_f("Column", arr)	; get double(val)
; type = sql_type("Column", arr)
; size = sql_blobsize("Column", arr)
; sql_next arr		; movenext
; sql_move id, arr	; moveto
; sql_blobcopy var, "Column", arr
;------------------------------------------------------------
#define global ctype sql_v(%1, %2=tmparr)                %2(sql_colid_(%1,%2),n@sqle)
#define global ctype sql_i(%1, %2=tmparr)           int( %2(sql_colid_(%1,%2),n@sqle) )
#define global ctype sql_f(%1, %2=tmparr)        double( %2(sql_colid_(%1,%2),n@sqle) )
#define global ctype sql_type(%1, %2=tmparr)      lpeek( %2(sql_colid_(%1,%2),n@sqle), strlen(%2(i@sqle,n@sqle))+4 )
#define global ctype sql_blobsize(%1, %2=tmparr)  lpeek( %2(sql_colid_(%1,%2),n@sqle), strlen(%2(i@sqle,n@sqle))+12 )
#define global sql_next(%1=tmparr)        lpoke %1, strlen(%1)+8, lpeek(%1,strlen(%1)+8)+1
#define global sql_move(%1=0, %2=tmparr)  lpoke %2, strlen(%2)+8, %1
#define global sql_blobcopy(%1, %2, %3=tmparr)  memcpy %1, %3(sql_colid_(%2,%3),n@sqle), lpeek(%3(i@sqle,n@sqle),strlen(%3(i@sqle,n@sqle))+12), 0, 16


;============================================================
; str = sql_collist("str", arr) ; get cols list
;------------------------------------------------------------
#define global ctype sql_collist(%1=",", %2=tmparr)  sql_collist_( %1, %2 )
#defcfunc sql_collist_  str p1, array v1
	dest = ""
	recs = length2(v1) - 1
	if recs > 0 {
		; カラム名一覧を作成
		repeat length(v1) ;= cols
			if cnt : dest += p1
			dest += v1(cnt, recs)
		loop
	}
	return dest


;============================================================
; str = sqesc("str") ; single-quotation escape ("'" -> "''")
;------------------------------------------------------------
#defcfunc sqesc str p1
	src = p1
	if instr(src, 0, "'") < 0 : return src

	len = strlen(src)
	p = 0
	repeat
		i = instr(src, p, "'")
		if i < 0 {
			a(cnt) = len
			sdim dest, len * 2 + 1
			memcpy dest, src, a
			repeat cnt
				poke dest, a(cnt)+cnt, 39
				memcpy dest, src, a(cnt+1)-a(cnt), a(cnt)+cnt+1, a(cnt)
			loop
			break
		}
		a(cnt) = p + i
		p += i + 1
	loop
	return dest

#global
#endif


;(user32.as)
#ifdef __hsp30__
#ifndef __USER32__
#define global __USER32__
#uselib "USER32.DLL"
	#func global ActivateKeyboardLayout "ActivateKeyboardLayout" sptr,sptr
	#func global AdjustWindowRect "AdjustWindowRect" sptr,sptr,sptr
	#func global AdjustWindowRectEx "AdjustWindowRectEx" sptr,sptr,sptr,sptr
	#func global AllowSetForegroundWindow "AllowSetForegroundWindow" sptr
	#func global AnimateWindow "AnimateWindow" sptr,sptr,sptr
	#func global AnyPopup "AnyPopup"
	#define global AppendMenu AppendMenuA
	#func global AppendMenuA "AppendMenuA" sptr,sptr,sptr,sptr
	#func global AppendMenuW "AppendMenuW" wptr,wptr,wptr,wptr
	#func global ArrangeIconicWindows "ArrangeIconicWindows" sptr
	#func global AttachThreadInput "AttachThreadInput" sptr,sptr,sptr
	#func global BeginDeferWindowPos "BeginDeferWindowPos" sptr
	#func global BeginPaint "BeginPaint" sptr,sptr
	#func global BlockInput "BlockInput" sptr
	#func global BringWindowToTop "BringWindowToTop" sptr
	#func global BroadcastSystemMessage "BroadcastSystemMessage" sptr,sptr,sptr,sptr,sptr
	#func global BroadcastSystemMessageA "BroadcastSystemMessageA" sptr,sptr,sptr,sptr,sptr
	#func global BroadcastSystemMessageW "BroadcastSystemMessageW" wptr,wptr,wptr,wptr,wptr
	#func global CallMsgFilter "CallMsgFilter" sptr,sptr
	#func global CallMsgFilterA "CallMsgFilterA" sptr,sptr
	#func global CallMsgFilterW "CallMsgFilterW" wptr,wptr
	#func global CallNextHookEx "CallNextHookEx" sptr,sptr,sptr,sptr
	#define global CallWindowProc CallWindowProcA
	#func global CallWindowProcA "CallWindowProcA" sptr,sptr,sptr,sptr,sptr
	#func global CallWindowProcW "CallWindowProcW" wptr,wptr,wptr,wptr,wptr
	#func global CascadeChildWindows "CascadeChildWindows" sptr,sptr
	#func global CascadeWindows "CascadeWindows" sptr,sptr,sptr,sptr,sptr
	#func global ChangeClipboardChain "ChangeClipboardChain" sptr,sptr
	#define global ChangeDisplaySettings ChangeDisplaySettingsA
	#func global ChangeDisplaySettingsA "ChangeDisplaySettingsA" sptr,sptr
	#define global ChangeDisplaySettingsEx ChangeDisplaySettingsExA
	#func global ChangeDisplaySettingsExA "ChangeDisplaySettingsExA" sptr,sptr,sptr,sptr,sptr
	#func global ChangeDisplaySettingsExW "ChangeDisplaySettingsExW" wptr,wptr,wptr,wptr,wptr
	#func global ChangeDisplaySettingsW "ChangeDisplaySettingsW" wptr,wptr
	#define global ChangeMenu ChangeMenuA
	#func global ChangeMenuA "ChangeMenuA" sptr,sptr,sptr,sptr,sptr
	#func global ChangeMenuW "ChangeMenuW" wptr,wptr,wptr,wptr,wptr
	#define global CharLower CharLowerA
	#func global CharLowerA "CharLowerA" sptr
	#define global CharLowerBuff CharLowerBuffA
	#func global CharLowerBuffA "CharLowerBuffA" sptr,sptr
	#func global CharLowerBuffW "CharLowerBuffW" wptr,wptr
	#func global CharLowerW "CharLowerW" wptr
	#define global CharNext CharNextA
	#func global CharNextA "CharNextA" sptr
	#define global CharNextEx CharNextExA
	#func global CharNextExA "CharNextExA" sptr,sptr,sptr
	#func global CharNextW "CharNextW" wptr
	#define global CharPrev CharPrevA
	#func global CharPrevA "CharPrevA" sptr,sptr
	#define global CharPrevEx CharPrevExA
	#func global CharPrevExA "CharPrevExA" sptr,sptr,sptr,sptr
	#func global CharPrevW "CharPrevW" wptr,wptr
	#define global CharToOem CharToOemA
	#func global CharToOemA "CharToOemA" sptr,sptr
	#define global CharToOemBuff CharToOemBuffA
	#func global CharToOemBuffA "CharToOemBuffA" sptr,sptr,sptr
	#func global CharToOemBuffW "CharToOemBuffW" wptr,wptr,wptr
	#func global CharToOemW "CharToOemW" wptr,wptr
	#define global CharUpper CharUpperA
	#func global CharUpperA "CharUpperA" sptr
	#define global CharUpperBuff CharUpperBuffA
	#func global CharUpperBuffA "CharUpperBuffA" sptr,sptr
	#func global CharUpperBuffW "CharUpperBuffW" wptr,wptr
	#func global CharUpperW "CharUpperW" wptr
	#func global CheckDlgButton "CheckDlgButton" sptr,sptr,sptr
	#func global CheckMenuItem "CheckMenuItem" sptr,sptr,sptr
	#func global CheckMenuRadioItem "CheckMenuRadioItem" sptr,sptr,sptr,sptr,sptr
	#func global CheckRadioButton "CheckRadioButton" sptr,sptr,sptr,sptr
	#func global ChildWindowFromPoint "ChildWindowFromPoint" sptr,sptr,sptr
	#func global ChildWindowFromPointEx "ChildWindowFromPointEx" sptr,sptr,sptr,sptr
	#func global ClientToScreen "ClientToScreen" sptr,sptr
	#func global ClipCursor "ClipCursor" sptr
	#func global CloseClipboard "CloseClipboard"
	#func global CloseDesktop "CloseDesktop" sptr
	#func global CloseWindow "CloseWindow" sptr
	#func global CloseWindowStation "CloseWindowStation" sptr
	#define global CopyAcceleratorTable CopyAcceleratorTableA
	#func global CopyAcceleratorTableA "CopyAcceleratorTableA" sptr,sptr,sptr
	#func global CopyAcceleratorTableW "CopyAcceleratorTableW" wptr,wptr,wptr
	#func global CopyIcon "CopyIcon" sptr
	#func global CopyImage "CopyImage" sptr,sptr,sptr,sptr,sptr
	#func global CopyRect "CopyRect" sptr,sptr
	#func global CountClipboardFormats "CountClipboardFormats"
	#define global CreateAcceleratorTable CreateAcceleratorTableA
	#func global CreateAcceleratorTableA "CreateAcceleratorTableA" sptr,sptr
	#func global CreateAcceleratorTableW "CreateAcceleratorTableW" wptr,wptr
	#func global CreateCaret "CreateCaret" sptr,sptr,sptr,sptr
	#func global CreateCursor "CreateCursor" sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#define global CreateDesktop CreateDesktopA
	#func global CreateDesktopA "CreateDesktopA" sptr,sptr,sptr,sptr,sptr,sptr
	#func global CreateDesktopW "CreateDesktopW" wptr,wptr,wptr,wptr,wptr,wptr
	#define global CreateDialogIndirectParam CreateDialogIndirectParamA
	#func global CreateDialogIndirectParamA "CreateDialogIndirectParamA" sptr,sptr,sptr,sptr,sptr
	#func global CreateDialogIndirectParamW "CreateDialogIndirectParamW" wptr,wptr,wptr,wptr,wptr
	#define global CreateDialogParam CreateDialogParamA
	#func global CreateDialogParamA "CreateDialogParamA" sptr,sptr,sptr,sptr,sptr
	#func global CreateDialogParamW "CreateDialogParamW" wptr,wptr,wptr,wptr,wptr
	#func global CreateIcon "CreateIcon" sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global CreateIconFromResource "CreateIconFromResource" sptr,sptr,sptr,sptr
	#func global CreateIconFromResourceEx "CreateIconFromResourceEx" sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global CreateIconIndirect "CreateIconIndirect" sptr
	#define global CreateMDIWindow CreateMDIWindowA
	#func global CreateMDIWindowA "CreateMDIWindowA" sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global CreateMDIWindowW "CreateMDIWindowW" wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr
	#func global CreateMenu "CreateMenu"
	#func global CreatePopupMenu "CreatePopupMenu"
	#define global CreateWindowEx CreateWindowExA
	#func global CreateWindowExA "CreateWindowExA" sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global CreateWindowExW "CreateWindowExW" wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr
	#define global CreateWindowStation CreateWindowStationA
	#func global CreateWindowStationA "CreateWindowStationA" sptr,sptr,sptr,sptr
	#func global CreateWindowStationW "CreateWindowStationW" wptr,wptr,wptr,wptr
	#func global DdeAbandonTransaction "DdeAbandonTransaction" sptr,sptr,sptr
	#func global DdeAccessData "DdeAccessData" sptr,sptr
	#func global DdeAddData "DdeAddData" sptr,sptr,sptr,sptr
	#func global DdeClientTransaction "DdeClientTransaction" sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global DdeCmpStringHandles "DdeCmpStringHandles" sptr,sptr
	#func global DdeConnect "DdeConnect" sptr,sptr,sptr,sptr
	#func global DdeConnectList "DdeConnectList" sptr,sptr,sptr,sptr,sptr
	#func global DdeCreateDataHandle "DdeCreateDataHandle" sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#define global DdeCreateStringHandle DdeCreateStringHandleA
	#func global DdeCreateStringHandleA "DdeCreateStringHandleA" sptr,sptr,sptr
	#func global DdeCreateStringHandleW "DdeCreateStringHandleW" wptr,wptr,wptr
	#func global DdeDisconnect "DdeDisconnect" sptr
	#func global DdeDisconnectList "DdeDisconnectList" sptr
	#func global DdeEnableCallback "DdeEnableCallback" sptr,sptr,sptr
	#func global DdeFreeDataHandle "DdeFreeDataHandle" sptr
	#func global DdeFreeStringHandle "DdeFreeStringHandle" sptr,sptr
	#func global DdeGetData "DdeGetData" sptr,sptr,sptr,sptr
	#func global DdeGetLastError "DdeGetLastError" sptr
	#func global DdeImpersonateClient "DdeImpersonateClient" sptr
	#define global DdeInitialize DdeInitializeA
	#func global DdeInitializeA "DdeInitializeA" sptr,sptr,sptr,sptr
	#func global DdeInitializeW "DdeInitializeW" wptr,wptr,wptr,wptr
	#func global DdeKeepStringHandle "DdeKeepStringHandle" sptr,sptr
	#func global DdeNameService "DdeNameService" sptr,sptr,sptr,sptr
	#func global DdePostAdvise "DdePostAdvise" sptr,sptr,sptr
	#func global DdeQueryConvInfo "DdeQueryConvInfo" sptr,sptr,sptr
	#func global DdeQueryNextServer "DdeQueryNextServer" sptr,sptr
	#define global DdeQueryString DdeQueryStringA
	#func global DdeQueryStringA "DdeQueryStringA" sptr,sptr,sptr,sptr,sptr
	#func global DdeQueryStringW "DdeQueryStringW" wptr,wptr,wptr,wptr,wptr
	#func global DdeReconnect "DdeReconnect" sptr
	#func global DdeSetQualityOfService "DdeSetQualityOfService" sptr,sptr,sptr
	#func global DdeSetUserHandle "DdeSetUserHandle" sptr,sptr,sptr
	#func global DdeUnaccessData "DdeUnaccessData" sptr
	#func global DdeUninitialize "DdeUninitialize" sptr
	#define global DefDlgProc DefDlgProcA
	#func global DefDlgProcA "DefDlgProcA" sptr,sptr,sptr,sptr
	#func global DefDlgProcW "DefDlgProcW" wptr,wptr,wptr,wptr
	#define global DefFrameProc DefFrameProcA
	#func global DefFrameProcA "DefFrameProcA" sptr,sptr,sptr,sptr,sptr
	#func global DefFrameProcW "DefFrameProcW" wptr,wptr,wptr,wptr,wptr
	#define global DefMDIChildProc DefMDIChildProcA
	#func global DefMDIChildProcA "DefMDIChildProcA" sptr,sptr,sptr,sptr
	#func global DefMDIChildProcW "DefMDIChildProcW" wptr,wptr,wptr,wptr
	#define global DefWindowProc DefWindowProcA
	#func global DefWindowProcA "DefWindowProcA" sptr,sptr,sptr,sptr
	#func global DefWindowProcW "DefWindowProcW" wptr,wptr,wptr,wptr
	#func global DeferWindowPos "DeferWindowPos" sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global DeleteMenu "DeleteMenu" sptr,sptr,sptr
	#func global DestroyAcceleratorTable "DestroyAcceleratorTable" sptr
	#func global DestroyCaret "DestroyCaret"
	#func global DestroyCursor "DestroyCursor" sptr
	#func global DestroyIcon "DestroyIcon" sptr
	#func global DestroyMenu "DestroyMenu" sptr
	#func global DestroyWindow "DestroyWindow" sptr
	#define global DialogBoxIndirectParam DialogBoxIndirectParamA
	#func global DialogBoxIndirectParamA "DialogBoxIndirectParamA" sptr,sptr,sptr,sptr,sptr
	#func global DialogBoxIndirectParamW "DialogBoxIndirectParamW" wptr,wptr,wptr,wptr,wptr
	#define global DialogBoxParam DialogBoxParamA
	#func global DialogBoxParamA "DialogBoxParamA" sptr,sptr,sptr,sptr,sptr
	#func global DialogBoxParamW "DialogBoxParamW" wptr,wptr,wptr,wptr,wptr
	#define global DispatchMessage DispatchMessageA
	#func global DispatchMessageA "DispatchMessageA" sptr
	#func global DispatchMessageW "DispatchMessageW" wptr
	#define global DlgDirList DlgDirListA
	#func global DlgDirListA "DlgDirListA" sptr,sptr,sptr,sptr,sptr
	#define global DlgDirListComboBox DlgDirListComboBoxA
	#func global DlgDirListComboBoxA "DlgDirListComboBoxA" sptr,sptr,sptr,sptr,sptr
	#func global DlgDirListComboBoxW "DlgDirListComboBoxW" wptr,wptr,wptr,wptr,wptr
	#func global DlgDirListW "DlgDirListW" wptr,wptr,wptr,wptr,wptr
	#define global DlgDirSelectComboBoxEx DlgDirSelectComboBoxExA
	#func global DlgDirSelectComboBoxExA "DlgDirSelectComboBoxExA" sptr,sptr,sptr,sptr
	#func global DlgDirSelectComboBoxExW "DlgDirSelectComboBoxExW" wptr,wptr,wptr,wptr
	#define global DlgDirSelectEx DlgDirSelectExA
	#func global DlgDirSelectExA "DlgDirSelectExA" sptr,sptr,sptr,sptr
	#func global DlgDirSelectExW "DlgDirSelectExW" wptr,wptr,wptr,wptr
	#func global DragDetect "DragDetect" sptr,sptr,sptr
	#func global DragObject "DragObject" sptr,sptr,sptr,sptr,sptr
	#func global DrawAnimatedRects "DrawAnimatedRects" sptr,sptr,sptr,sptr
	#func global DrawCaption "DrawCaption" sptr,sptr,sptr,sptr
	#func global DrawEdge "DrawEdge" sptr,sptr,sptr,sptr
	#func global DrawFocusRect "DrawFocusRect" sptr,sptr
	#func global DrawFrame "DrawFrame" sptr,sptr,sptr,sptr
	#func global DrawFrameControl "DrawFrameControl" sptr,sptr,sptr,sptr
	#func global DrawIcon "DrawIcon" sptr,sptr,sptr,sptr
	#func global DrawIconEx "DrawIconEx" sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global DrawMenuBar "DrawMenuBar" sptr
	#define global DrawState DrawStateA
	#func global DrawStateA "DrawStateA" sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global DrawStateW "DrawStateW" wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr
	#define global DrawText DrawTextA
	#func global DrawTextA "DrawTextA" sptr,sptr,sptr,sptr,sptr
	#define global DrawTextEx DrawTextExA
	#func global DrawTextExA "DrawTextExA" sptr,sptr,sptr,sptr,sptr,sptr
	#func global DrawTextExW "DrawTextExW" wptr,wptr,wptr,wptr,wptr,wptr
	#func global DrawTextW "DrawTextW" wptr,wptr,wptr,wptr,wptr
	#func global EditWndProc "EditWndProc" sptr,sptr,sptr,sptr
	#func global EmptyClipboard "EmptyClipboard"
	#func global EnableMenuItem "EnableMenuItem" sptr,sptr,sptr
	#func global EnableScrollBar "EnableScrollBar" sptr,sptr,sptr
	#func global EnableWindow "EnableWindow" sptr,sptr
	#func global EndDeferWindowPos "EndDeferWindowPos" sptr
	#func global EndDialog "EndDialog" sptr,sptr
	#func global EndMenu "EndMenu"
	#func global EndPaint "EndPaint" sptr,sptr
	#func global EnumChildWindows "EnumChildWindows" sptr,sptr,sptr
	#func global EnumClipboardFormats "EnumClipboardFormats" sptr
	#func global EnumDesktopWindows "EnumDesktopWindows" sptr,sptr,sptr
	#define global EnumDesktops EnumDesktopsA
	#func global EnumDesktopsA "EnumDesktopsA" sptr,sptr,sptr
	#func global EnumDesktopsW "EnumDesktopsW" wptr,wptr,wptr
	#define global EnumDisplayDevices EnumDisplayDevicesA
	#func global EnumDisplayDevicesA "EnumDisplayDevicesA" sptr,sptr,sptr,sptr
	#func global EnumDisplayDevicesW "EnumDisplayDevicesW" wptr,wptr,wptr,wptr
	#func global EnumDisplayMonitors "EnumDisplayMonitors" sptr,sptr,sptr,sptr
	#define global EnumDisplaySettings EnumDisplaySettingsA
	#func global EnumDisplaySettingsA "EnumDisplaySettingsA" sptr,sptr,sptr
	#define global EnumDisplaySettingsEx EnumDisplaySettingsExA
	#func global EnumDisplaySettingsExA "EnumDisplaySettingsExA" sptr,sptr,sptr,sptr
	#func global EnumDisplaySettingsExW "EnumDisplaySettingsExW" wptr,wptr,wptr,wptr
	#func global EnumDisplaySettingsW "EnumDisplaySettingsW" wptr,wptr,wptr
	#define global EnumProps EnumPropsA
	#func global EnumPropsA "EnumPropsA" sptr,sptr
	#define global EnumPropsEx EnumPropsExA
	#func global EnumPropsExA "EnumPropsExA" sptr,sptr,sptr
	#func global EnumPropsExW "EnumPropsExW" wptr,wptr,wptr
	#func global EnumPropsW "EnumPropsW" wptr,wptr
	#func global EnumThreadWindows "EnumThreadWindows" sptr,sptr,sptr
	#define global EnumWindowStations EnumWindowStationsA
	#func global EnumWindowStationsA "EnumWindowStationsA" sptr,sptr
	#func global EnumWindowStationsW "EnumWindowStationsW" wptr,wptr
	#func global EnumWindows "EnumWindows" sptr,sptr
	#func global EqualRect "EqualRect" sptr,sptr
	#func global ExcludeUpdateRgn "ExcludeUpdateRgn" sptr,sptr
	#func global ExitWindowsEx "ExitWindowsEx" sptr,sptr
	#func global FillRect "FillRect" sptr,sptr,sptr
	#define global FindWindow FindWindowA
	#func global FindWindowA "FindWindowA" sptr,sptr
	#define global FindWindowEx FindWindowExA
	#func global FindWindowExA "FindWindowExA" sptr,sptr,sptr,sptr
	#func global FindWindowExW "FindWindowExW" wptr,wptr,wptr,wptr
	#func global FindWindowW "FindWindowW" wptr,wptr
	#func global FlashWindow "FlashWindow" sptr,sptr
	#func global FlashWindowEx "FlashWindowEx" sptr
	#func global FrameRect "FrameRect" sptr,sptr,sptr
	#func global FreeDDElParam "FreeDDElParam" sptr,sptr
	#func global GetActiveWindow "GetActiveWindow"
	#func global GetAltTabInfo "GetAltTabInfo" sptr,sptr,sptr,sptr,sptr
	#func global GetAltTabInfoA "GetAltTabInfoA" sptr,sptr,sptr,sptr,sptr
	#func global GetAltTabInfoW "GetAltTabInfoW" wptr,wptr,wptr,wptr,wptr
	#func global GetAncestor "GetAncestor" sptr,sptr
	#func global GetAsyncKeyState "GetAsyncKeyState" sptr
	#func global GetCapture "GetCapture"
	#func global GetCaretBlinkTime "GetCaretBlinkTime"
	#func global GetCaretPos "GetCaretPos" sptr
	#define global GetClassInfo GetClassInfoA
	#func global GetClassInfoA "GetClassInfoA" sptr,sptr,sptr
	#define global GetClassInfoEx GetClassInfoExA
	#func global GetClassInfoExA "GetClassInfoExA" sptr,sptr,sptr
	#func global GetClassInfoExW "GetClassInfoExW" wptr,wptr,wptr
	#func global GetClassInfoW "GetClassInfoW" wptr,wptr,wptr
	#define global GetClassLong GetClassLongA
	#func global GetClassLongA "GetClassLongA" sptr,sptr
	#func global GetClassLongW "GetClassLongW" wptr,wptr
	#define global GetClassName GetClassNameA
	#func global GetClassNameA "GetClassNameA" sptr,sptr,sptr
	#func global GetClassNameW "GetClassNameW" wptr,wptr,wptr
	#func global GetClassWord "GetClassWord" sptr,sptr
	#func global GetClientRect "GetClientRect" sptr,sptr
	#func global GetClipCursor "GetClipCursor" sptr
	#func global GetClipboardData "GetClipboardData" sptr
	#define global GetClipboardFormatName GetClipboardFormatNameA
	#func global GetClipboardFormatNameA "GetClipboardFormatNameA" sptr,sptr,sptr
	#func global GetClipboardFormatNameW "GetClipboardFormatNameW" wptr,wptr,wptr
	#func global GetClipboardOwner "GetClipboardOwner"
	#func global GetClipboardSequenceNumber "GetClipboardSequenceNumber"
	#func global GetClipboardViewer "GetClipboardViewer"
	#func global GetComboBoxInfo "GetComboBoxInfo" sptr,sptr
	#func global GetCursor "GetCursor"
	#func global GetCursorInfo "GetCursorInfo" sptr
	#func global GetCursorPos "GetCursorPos" sptr
	#func global GetDC "GetDC" sptr
	#func global GetDCEx "GetDCEx" sptr,sptr,sptr
	#func global GetDesktopWindow "GetDesktopWindow"
	#func global GetDialogBaseUnits "GetDialogBaseUnits"
	#func global GetDlgCtrlID "GetDlgCtrlID" sptr
	#func global GetDlgItem "GetDlgItem" sptr,sptr
	#func global GetDlgItemInt "GetDlgItemInt" sptr,sptr,sptr,sptr
	#define global GetDlgItemText GetDlgItemTextA
	#func global GetDlgItemTextA "GetDlgItemTextA" sptr,sptr,sptr,sptr
	#func global GetDlgItemTextW "GetDlgItemTextW" wptr,wptr,wptr,wptr
	#func global GetDoubleClickTime "GetDoubleClickTime"
	#func global GetFocus "GetFocus"
	#func global GetForegroundWindow "GetForegroundWindow"
	#func global GetGUIThreadInfo "GetGUIThreadInfo" sptr,sptr
	#func global GetGuiResources "GetGuiResources" sptr,sptr
	#func global GetIconInfo "GetIconInfo" sptr,sptr
	#func global GetInputDesktop "GetInputDesktop"
	#func global GetInputState "GetInputState"
	#func global GetKBCodePage "GetKBCodePage"
	#define global GetKeyNameText GetKeyNameTextA
	#func global GetKeyNameTextA "GetKeyNameTextA" sptr,sptr,sptr
	#func global GetKeyNameTextW "GetKeyNameTextW" wptr,wptr,wptr
	#func global GetKeyState "GetKeyState" sptr
	#func global GetKeyboardLayout "GetKeyboardLayout" sptr
	#func global GetKeyboardLayoutList "GetKeyboardLayoutList" sptr,sptr
	#define global GetKeyboardLayoutName GetKeyboardLayoutNameA
	#func global GetKeyboardLayoutNameA "GetKeyboardLayoutNameA" sptr
	#func global GetKeyboardLayoutNameW "GetKeyboardLayoutNameW" wptr
	#func global GetKeyboardState "GetKeyboardState" sptr
	#func global GetKeyboardType "GetKeyboardType" sptr
	#func global GetLastActivePopup "GetLastActivePopup" sptr
	#func global GetLastInputInfo "GetLastInputInfo" sptr
	#func global GetListBoxInfo "GetListBoxInfo" sptr
	#func global GetMenu "GetMenu" sptr
	#func global GetMenuBarInfo "GetMenuBarInfo" sptr,sptr,sptr,sptr
	#func global GetMenuCheckMarkDimensions "GetMenuCheckMarkDimensions"
	#func global GetMenuContextHelpId "GetMenuContextHelpId" sptr
	#func global GetMenuDefaultItem "GetMenuDefaultItem" sptr,sptr,sptr
	#func global GetMenuInfo "GetMenuInfo" sptr,sptr
	#func global GetMenuItemCount "GetMenuItemCount" sptr
	#func global GetMenuItemID "GetMenuItemID" sptr,sptr
	#define global GetMenuItemInfo GetMenuItemInfoA
	#func global GetMenuItemInfoA "GetMenuItemInfoA" sptr,sptr,sptr,sptr
	#func global GetMenuItemInfoW "GetMenuItemInfoW" wptr,wptr,wptr,wptr
	#func global GetMenuItemRect "GetMenuItemRect" sptr,sptr,sptr,sptr
	#func global GetMenuState "GetMenuState" sptr,sptr,sptr
	#define global GetMenuString GetMenuStringA
	#func global GetMenuStringA "GetMenuStringA" sptr,sptr,sptr,sptr,sptr
	#func global GetMenuStringW "GetMenuStringW" wptr,wptr,wptr,wptr,wptr
	#define global GetMessage GetMessageA
	#func global GetMessageA "GetMessageA" sptr,sptr,sptr,sptr
	#func global GetMessageExtraInfo "GetMessageExtraInfo"
	#func global GetMessagePos "GetMessagePos"
	#func global GetMessageTime "GetMessageTime"
	#func global GetMessageW "GetMessageW" wptr,wptr,wptr,wptr
	#define global GetMonitorInfo GetMonitorInfoA
	#func global GetMonitorInfoA "GetMonitorInfoA" sptr,sptr
	#func global GetMonitorInfoW "GetMonitorInfoW" wptr,wptr
	#func global GetMouseMovePointsEx "GetMouseMovePointsEx" sptr,sptr,sptr,sptr,sptr
	#func global GetNextDlgGroupItem "GetNextDlgGroupItem" sptr,sptr,sptr
	#func global GetNextDlgTabItem "GetNextDlgTabItem" sptr,sptr,sptr
	#func global GetOpenClipboardWindow "GetOpenClipboardWindow"
	#func global GetParent "GetParent" sptr
	#func global GetPriorityClipboardFormat "GetPriorityClipboardFormat" sptr,sptr
	#func global GetProcessDefaultLayout "GetProcessDefaultLayout" sptr
	#func global GetProcessWindowStation "GetProcessWindowStation"
	#define global GetProp GetPropA
	#func global GetPropA "GetPropA" sptr,sptr
	#func global GetPropW "GetPropW" wptr,wptr
	#func global GetQueueStatus "GetQueueStatus" sptr
	#func global GetScrollBarInfo "GetScrollBarInfo" sptr,sptr,sptr
	#func global GetScrollInfo "GetScrollInfo" sptr,sptr,sptr
	#func global GetScrollPos "GetScrollPos" sptr,sptr
	#func global GetScrollRange "GetScrollRange" sptr,sptr,sptr,sptr
	#func global GetShellWindow "GetShellWindow"
	#func global GetSubMenu "GetSubMenu" sptr,sptr
	#func global GetSysColor "GetSysColor" sptr
	#func global GetSysColorBrush "GetSysColorBrush" sptr
	#func global GetSystemMenu "GetSystemMenu" sptr,sptr
	#func global GetSystemMetrics "GetSystemMetrics" sptr
	#define global GetTabbedTextExtent GetTabbedTextExtentA
	#func global GetTabbedTextExtentA "GetTabbedTextExtentA" sptr,sptr,sptr,sptr,sptr
	#func global GetTabbedTextExtentW "GetTabbedTextExtentW" wptr,wptr,wptr,wptr,wptr
	#func global GetThreadDesktop "GetThreadDesktop" sptr
	#func global GetTitleBarInfo "GetTitleBarInfo" sptr,sptr
	#func global GetTopWindow "GetTopWindow" sptr
	#func global GetUpdateRect "GetUpdateRect" sptr,sptr,sptr
	#func global GetUpdateRgn "GetUpdateRgn" sptr,sptr,sptr
	#define global GetUserObjectInformation GetUserObjectInformationA
	#func global GetUserObjectInformationA "GetUserObjectInformationA" sptr,sptr,sptr,sptr,sptr
	#func global GetUserObjectInformationW "GetUserObjectInformationW" wptr,wptr,wptr,wptr,wptr
	#func global GetUserObjectSecurity "GetUserObjectSecurity" sptr,sptr,sptr,sptr,sptr
	#func global GetWindow "GetWindow" sptr,sptr
	#func global GetWindowContextHelpId "GetWindowContextHelpId" sptr
	#func global GetWindowDC "GetWindowDC" sptr
	#func global GetWindowInfo "GetWindowInfo" sptr,sptr
	#define global GetWindowLong GetWindowLongA
	#func global GetWindowLongA "GetWindowLongA" sptr,sptr
	#func global GetWindowLongW "GetWindowLongW" wptr,wptr
	#func global GetWindowModuleFileName "GetWindowModuleFileNameA" sptr,sptr,sptr
	#func global GetWindowModuleFileNameA "GetWindowModuleFileNameA" sptr,sptr,sptr
	#func global GetWindowModuleFileNameW "GetWindowModuleFileNameW" wptr,wptr,wptr
	#func global GetWindowPlacement "GetWindowPlacement" sptr,sptr
	#func global GetWindowRect "GetWindowRect" sptr,sptr
	#func global GetWindowRgn "GetWindowRgn" sptr,sptr
	#define global GetWindowText GetWindowTextA
	#func global GetWindowTextA "GetWindowTextA" sptr,sptr,sptr
	#define global GetWindowTextLength GetWindowTextLengthA
	#func global GetWindowTextLengthA "GetWindowTextLengthA" sptr
	#func global GetWindowTextLengthW "GetWindowTextLengthW" wptr
	#func global GetWindowTextW "GetWindowTextW" wptr,wptr,wptr
	#func global GetWindowThreadProcessId "GetWindowThreadProcessId" sptr,sptr
	#func global GetWindowWord "GetWindowWord" sptr,sptr
	#define global GrayString GrayStringA
	#func global GrayStringA "GrayStringA" sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global GrayStringW "GrayStringW" wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr
	#func global HideCaret "HideCaret" sptr
	#func global HiliteMenuItem "HiliteMenuItem" sptr,sptr,sptr,sptr
	#define global IMPGetIME IMPGetIMEA
	#func global IMPGetIMEA "IMPGetIMEA" sptr,sptr
	#func global IMPGetIMEW "IMPGetIMEW" wptr,wptr
	#define global IMPQueryIME IMPQueryIMEA
	#func global IMPQueryIMEA "IMPQueryIMEA" sptr
	#func global IMPQueryIMEW "IMPQueryIMEW" wptr
	#define global IMPSetIME IMPSetIMEA
	#func global IMPSetIMEA "IMPSetIMEA" sptr,sptr
	#func global IMPSetIMEW "IMPSetIMEW" wptr,wptr
	#func global ImpersonateDdeClientWindow "ImpersonateDdeClientWindow" sptr,sptr
	#func global InSendMessage "InSendMessage"
	#func global InSendMessageEx "InSendMessageEx" sptr
	#func global InflateRect "InflateRect" sptr,sptr,sptr
	#define global InsertMenu InsertMenuA
	#func global InsertMenuA "InsertMenuA" sptr,sptr,sptr,sptr,sptr
	#define global InsertMenuItem InsertMenuItemA
	#func global InsertMenuItemA "InsertMenuItemA" sptr,sptr,sptr,sptr
	#func global InsertMenuItemW "InsertMenuItemW" wptr,wptr,wptr,wptr
	#func global InsertMenuW "InsertMenuW" wptr,wptr,wptr,wptr,wptr
	#func global IntersectRect "IntersectRect" sptr,sptr,sptr
	#func global InvalidateRect "InvalidateRect" sptr,sptr,sptr
	#func global InvalidateRgn "InvalidateRgn" sptr,sptr,sptr
	#func global InvertRect "InvertRect" sptr,sptr
	#define global IsCharAlpha IsCharAlphaA
	#func global IsCharAlphaA "IsCharAlphaA" sptr
	#define global IsCharAlphaNumeric IsCharAlphaNumericA
	#func global IsCharAlphaNumericA "IsCharAlphaNumericA" sptr
	#func global IsCharAlphaNumericW "IsCharAlphaNumericW" wptr
	#func global IsCharAlphaW "IsCharAlphaW" wptr
	#define global IsCharLower IsCharLowerA
	#func global IsCharLowerA "IsCharLowerA" sptr
	#func global IsCharLowerW "IsCharLowerW" wptr
	#define global IsCharUpper IsCharUpperA
	#func global IsCharUpperA "IsCharUpperA" sptr
	#func global IsCharUpperW "IsCharUpperW" wptr
	#func global IsChild "IsChild" sptr,sptr
	#func global IsClipboardFormatAvailable "IsClipboardFormatAvailable" sptr
	#func global IsDialogMessage "IsDialogMessage" sptr,sptr
	#func global IsDialogMessageA "IsDialogMessageA" sptr,sptr
	#func global IsDialogMessageW "IsDialogMessageW" wptr,wptr
	#func global IsDlgButtonChecked "IsDlgButtonChecked" sptr,sptr
	#func global IsIconic "IsIconic" sptr
	#func global IsMenu "IsMenu" sptr
	#func global IsRectEmpty "IsRectEmpty" sptr
	#func global IsWindow "IsWindow" sptr
	#func global IsWindowEnabled "IsWindowEnabled" sptr
	#func global IsWindowUnicode "IsWindowUnicode" sptr
	#func global IsWindowVisible "IsWindowVisible" sptr
	#func global IsZoomed "IsZoomed" sptr
	#func global KillTimer "KillTimer" sptr,sptr
	#define global LoadAccelerators LoadAcceleratorsA
	#func global LoadAcceleratorsA "LoadAcceleratorsA" sptr,sptr
	#func global LoadAcceleratorsW "LoadAcceleratorsW" wptr,wptr
	#define global LoadBitmap LoadBitmapA
	#func global LoadBitmapA "LoadBitmapA" sptr,sptr
	#func global LoadBitmapW "LoadBitmapW" wptr,wptr
	#define global LoadCursor LoadCursorA
	#func global LoadCursorA "LoadCursorA" sptr,sptr
	#define global LoadCursorFromFile LoadCursorFromFileA
	#func global LoadCursorFromFileA "LoadCursorFromFileA" sptr
	#func global LoadCursorFromFileW "LoadCursorFromFileW" wptr
	#func global LoadCursorW "LoadCursorW" wptr,wptr
	#define global LoadIcon LoadIconA
	#func global LoadIconA "LoadIconA" sptr,sptr
	#func global LoadIconW "LoadIconW" wptr,wptr
	#define global LoadImage LoadImageA
	#func global LoadImageA "LoadImageA" sptr,sptr,sptr,sptr,sptr,sptr
	#func global LoadImageW "LoadImageW" wptr,wptr,wptr,wptr,wptr,wptr
	#define global LoadKeyboardLayout LoadKeyboardLayoutA
	#func global LoadKeyboardLayoutA "LoadKeyboardLayoutA" sptr,sptr
	#func global LoadKeyboardLayoutW "LoadKeyboardLayoutW" wptr,wptr
	#define global LoadMenu LoadMenuA
	#func global LoadMenuA "LoadMenuA" sptr,sptr
	#define global LoadMenuIndirect LoadMenuIndirectA
	#func global LoadMenuIndirectA "LoadMenuIndirectA" sptr
	#func global LoadMenuIndirectW "LoadMenuIndirectW" wptr
	#func global LoadMenuW "LoadMenuW" wptr,wptr
	#define global LoadString LoadStringA
	#func global LoadStringA "LoadStringA" sptr,sptr,sptr,sptr
	#func global LoadStringW "LoadStringW" wptr,wptr,wptr,wptr
	#func global LockSetForegroundWindow "LockSetForegroundWindow" sptr
	#func global LockWindowUpdate "LockWindowUpdate" sptr
	#func global LockWorkStation "LockWorkStation"
	#func global LookupIconIdFromDirectory "LookupIconIdFromDirectory" sptr,sptr
	#func global LookupIconIdFromDirectoryEx "LookupIconIdFromDirectoryEx" sptr,sptr,sptr,sptr,sptr
	#func global MapDialogRect "MapDialogRect" sptr,sptr
	#define global MapVirtualKey MapVirtualKeyA
	#func global MapVirtualKeyA "MapVirtualKeyA" sptr,sptr
	#define global MapVirtualKeyEx MapVirtualKeyExA
	#func global MapVirtualKeyExA "MapVirtualKeyExA" sptr,sptr,sptr
	#func global MapVirtualKeyExW "MapVirtualKeyExW" wptr,wptr,wptr
	#func global MapVirtualKeyW "MapVirtualKeyW" wptr,wptr
	#func global MapWindowPoints "MapWindowPoints" sptr,sptr,sptr,sptr
	#func global MenuItemFromPoint "MenuItemFromPoint" sptr,sptr,sptr,sptr
	#func global MessageBeep "MessageBeep" sptr
	#define global MessageBox MessageBoxA
	#func global MessageBoxA "MessageBoxA" sptr,sptr,sptr,sptr
	#define global MessageBoxEx MessageBoxExA
	#func global MessageBoxExA "MessageBoxExA" sptr,sptr,sptr,sptr,sptr
	#func global MessageBoxExW "MessageBoxExW" wptr,wptr,wptr,wptr,wptr
	#define global MessageBoxIndirect MessageBoxIndirectA
	#func global MessageBoxIndirectA "MessageBoxIndirectA" sptr
	#func global MessageBoxIndirectW "MessageBoxIndirectW" wptr
	#func global MessageBoxW "MessageBoxW" wptr,wptr,wptr,wptr
	#define global ModifyMenu ModifyMenuA
	#func global ModifyMenuA "ModifyMenuA" sptr,sptr,sptr,sptr,sptr
	#func global ModifyMenuW "ModifyMenuW" wptr,wptr,wptr,wptr,wptr
	#func global MonitorFromPoint "MonitorFromPoint" sptr,sptr,sptr
	#func global MonitorFromRect "MonitorFromRect" sptr,sptr
	#func global MonitorFromWindow "MonitorFromWindow" sptr,sptr
	#func global MoveWindow "MoveWindow" sptr,sptr,sptr,sptr,sptr,sptr
	#func global MsgWaitForMultipleObjects "MsgWaitForMultipleObjects" sptr,sptr,sptr,sptr,sptr
	#func global MsgWaitForMultipleObjectsEx "MsgWaitForMultipleObjectsEx" sptr,sptr,sptr,sptr,sptr
	#func global NotifyWinEvent "NotifyWinEvent" sptr,sptr,sptr,sptr
	#func global OemKeyScan "OemKeyScan" sptr
	#define global OemToChar OemToCharA
	#func global OemToCharA "OemToCharA" sptr,sptr
	#define global OemToCharBuff OemToCharBuffA
	#func global OemToCharBuffA "OemToCharBuffA" sptr,sptr,sptr
	#func global OemToCharBuffW "OemToCharBuffW" wptr,wptr,wptr
	#func global OemToCharW "OemToCharW" wptr,wptr
	#func global OffsetRect "OffsetRect" sptr,sptr,sptr
	#func global OpenClipboard "OpenClipboard" sptr
	#define global OpenDesktop OpenDesktopA
	#func global OpenDesktopA "OpenDesktopA" sptr,sptr,sptr,sptr
	#func global OpenDesktopW "OpenDesktopW" wptr,wptr,wptr,wptr
	#func global OpenIcon "OpenIcon" sptr
	#func global OpenInputDesktop "OpenInputDesktop" sptr,sptr,sptr
	#define global OpenWindowStation OpenWindowStationA
	#func global OpenWindowStationA "OpenWindowStationA" sptr,sptr,sptr
	#func global OpenWindowStationW "OpenWindowStationW" wptr,wptr,wptr
	#func global PackDDElParam "PackDDElParam" sptr,sptr,sptr
	#func global PaintDesktop "PaintDesktop" sptr
	#define global PeekMessage PeekMessageA
	#func global PeekMessageA "PeekMessageA" sptr,sptr,sptr,sptr,sptr
	#func global PeekMessageW "PeekMessageW" wptr,wptr,wptr,wptr,wptr
	#define global PostMessage PostMessageA
	#func global PostMessageA "PostMessageA" sptr,sptr,sptr,sptr
	#func global PostMessageW "PostMessageW" wptr,wptr,wptr,wptr
	#func global PostQuitMessage "PostQuitMessage" sptr
	#define global PostThreadMessage PostThreadMessageA
	#func global PostThreadMessageA "PostThreadMessageA" sptr,sptr,sptr,sptr
	#func global PostThreadMessageW "PostThreadMessageW" wptr,wptr,wptr,wptr
	#func global PtInRect "PtInRect" sptr,sptr,sptr
	#func global RealChildWindowFromPoint "RealChildWindowFromPoint" sptr,sptr,sptr
	#func global RealGetWindowClass "RealGetWindowClass" sptr,sptr,sptr
	#func global RealGetWindowClassA "RealGetWindowClassA" sptr,sptr,sptr
	#func global RealGetWindowClassW "RealGetWindowClassW" wptr,wptr,wptr
	#func global RedrawWindow "RedrawWindow" sptr,sptr,sptr,sptr
	#define global RegisterClass RegisterClassA
	#func global RegisterClassA "RegisterClassA" sptr
	#define global RegisterClassEx RegisterClassExA
	#func global RegisterClassExA "RegisterClassExA" sptr
	#func global RegisterClassExW "RegisterClassExW" wptr
	#func global RegisterClassW "RegisterClassW" wptr
	#define global RegisterClipboardFormat RegisterClipboardFormatA
	#func global RegisterClipboardFormatA "RegisterClipboardFormatA" sptr
	#func global RegisterClipboardFormatW "RegisterClipboardFormatW" wptr
	#define global RegisterDeviceNotification RegisterDeviceNotificationA
	#func global RegisterDeviceNotificationA "RegisterDeviceNotificationA" sptr,sptr,sptr
	#func global RegisterDeviceNotificationW "RegisterDeviceNotificationW" wptr,wptr,wptr
	#func global RegisterHotKey "RegisterHotKey" sptr,sptr,sptr,sptr
	#define global RegisterWindowMessage RegisterWindowMessageA
	#func global RegisterWindowMessageA "RegisterWindowMessageA" sptr
	#func global RegisterWindowMessageW "RegisterWindowMessageW" wptr
	#func global ReleaseCapture "ReleaseCapture"
	#func global ReleaseDC "ReleaseDC" sptr,sptr
	#func global RemoveMenu "RemoveMenu" sptr,sptr,sptr
	#define global RemoveProp RemovePropA
	#func global RemovePropA "RemovePropA" sptr,sptr
	#func global RemovePropW "RemovePropW" wptr,wptr
	#func global ReplyMessage "ReplyMessage" sptr
	#func global ReuseDDElParam "ReuseDDElParam" sptr,sptr,sptr,sptr,sptr
	#func global ScreenToClient "ScreenToClient" sptr,sptr
	#func global ScrollDC "ScrollDC" sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global ScrollWindow "ScrollWindow" sptr,sptr,sptr,sptr,sptr
	#func global ScrollWindowEx "ScrollWindowEx" sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#define global SendDlgItemMessage SendDlgItemMessageA
	#func global SendDlgItemMessageA "SendDlgItemMessageA" sptr,sptr,sptr,sptr,sptr
	#func global SendDlgItemMessageW "SendDlgItemMessageW" wptr,wptr,wptr,wptr,wptr
	#define global SendIMEMessageEx SendIMEMessageExA
	#func global SendIMEMessageExA "SendIMEMessageExA" sptr,sptr
	#func global SendIMEMessageExW "SendIMEMessageExW" wptr,wptr
	#func global SendInput "SendInput" sptr,sptr,sptr
	#define global SendMessage SendMessageA
	#func global SendMessageA "SendMessageA" sptr,sptr,sptr,sptr
	#define global SendMessageCallback SendMessageCallbackA
	#func global SendMessageCallbackA "SendMessageCallbackA" sptr,sptr,sptr,sptr,sptr,sptr
	#func global SendMessageCallbackW "SendMessageCallbackW" wptr,wptr,wptr,wptr,wptr,wptr
	#define global SendMessageTimeout SendMessageTimeoutA
	#func global SendMessageTimeoutA "SendMessageTimeoutA" sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global SendMessageTimeoutW "SendMessageTimeoutW" wptr,wptr,wptr,wptr,wptr,wptr,wptr
	#func global SendMessageW "SendMessageW" wptr,wptr,wptr,wptr
	#define global SendNotifyMessage SendNotifyMessageA
	#func global SendNotifyMessageA "SendNotifyMessageA" sptr,sptr,sptr,sptr
	#func global SendNotifyMessageW "SendNotifyMessageW" wptr,wptr,wptr,wptr
	#func global SetActiveWindow "SetActiveWindow" sptr
	#func global SetCapture "SetCapture" sptr
	#func global SetCaretBlinkTime "SetCaretBlinkTime" sptr
	#func global SetCaretPos "SetCaretPos" sptr,sptr
	#define global SetClassLong SetClassLongA
	#func global SetClassLongA "SetClassLongA" sptr,sptr,sptr
	#func global SetClassLongW "SetClassLongW" wptr,wptr,wptr
	#func global SetClassWord "SetClassWord" sptr,sptr,sptr
	#func global SetClipboardData "SetClipboardData" sptr,sptr
	#func global SetClipboardViewer "SetClipboardViewer" sptr
	#func global SetCursor "SetCursor" sptr
	#func global SetCursorPos "SetCursorPos" sptr,sptr
	#func global SetDebugErrorLevel "SetDebugErrorLevel" sptr
	#func global SetDeskWallpaper "SetDeskWallpaper" sptr
	#func global SetDlgItemInt "SetDlgItemInt" sptr,sptr,sptr,sptr
	#define global SetDlgItemText SetDlgItemTextA
	#func global SetDlgItemTextA "SetDlgItemTextA" sptr,sptr,sptr
	#func global SetDlgItemTextW "SetDlgItemTextW" wptr,wptr,wptr
	#func global SetDoubleClickTime "SetDoubleClickTime" sptr
	#func global SetFocus "SetFocus" sptr
	#func global SetForegroundWindow "SetForegroundWindow" sptr
	#func global SetKeyboardState "SetKeyboardState" sptr
	#func global SetLastErrorEx "SetLastErrorEx" sptr,sptr
	#func global SetLayeredWindowAttributes "SetLayeredWindowAttributes" sptr,sptr,sptr,sptr
	#func global SetMenu "SetMenu" sptr,sptr
	#func global SetMenuContextHelpId "SetMenuContextHelpId" sptr,sptr
	#func global SetMenuDefaultItem "SetMenuDefaultItem" sptr,sptr,sptr
	#func global SetMenuInfo "SetMenuInfo" sptr,sptr
	#func global SetMenuItemBitmaps "SetMenuItemBitmaps" sptr,sptr,sptr,sptr,sptr
	#define global SetMenuItemInfo SetMenuItemInfoA
	#func global SetMenuItemInfoA "SetMenuItemInfoA" sptr,sptr,sptr,sptr
	#func global SetMenuItemInfoW "SetMenuItemInfoW" wptr,wptr,wptr,wptr
	#func global SetMessageExtraInfo "SetMessageExtraInfo" sptr
	#func global SetMessageQueue "SetMessageQueue" sptr
	#func global SetParent "SetParent" sptr,sptr
	#func global SetProcessDefaultLayout "SetProcessDefaultLayout" sptr
	#func global SetProcessWindowStation "SetProcessWindowStation" sptr
	#define global SetProp SetPropA
	#func global SetPropA "SetPropA" sptr,sptr,sptr
	#func global SetPropW "SetPropW" wptr,wptr,wptr
	#func global SetRect "SetRect" sptr,sptr,sptr,sptr,sptr
	#func global SetRectEmpty "SetRectEmpty" sptr
	#func global SetScrollInfo "SetScrollInfo" sptr,sptr,sptr,sptr
	#func global SetScrollPos "SetScrollPos" sptr,sptr,sptr,sptr
	#func global SetScrollRange "SetScrollRange" sptr,sptr,sptr,sptr,sptr
	#func global SetShellWindow "SetShellWindow" sptr
	#func global SetSysColors "SetSysColors" sptr,sptr,sptr
	#func global SetSystemCursor "SetSystemCursor" sptr,sptr
	#func global SetThreadDesktop "SetThreadDesktop" sptr
	#func global SetTimer "SetTimer" sptr,sptr,sptr,sptr
	#define global SetUserObjectInformation SetUserObjectInformationA
	#func global SetUserObjectInformationA "SetUserObjectInformationA" sptr,sptr,sptr,sptr
	#func global SetUserObjectInformationW "SetUserObjectInformationW" wptr,wptr,wptr,wptr
	#func global SetUserObjectSecurity "SetUserObjectSecurity" sptr,sptr,sptr
	#func global SetWinEventHook "SetWinEventHook" sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global SetWindowContextHelpId "SetWindowContextHelpId" sptr,sptr
	#define global SetWindowLong SetWindowLongA
	#func global SetWindowLongA "SetWindowLongA" sptr,sptr,sptr
	#func global SetWindowLongW "SetWindowLongW" wptr,wptr,wptr
	#func global SetWindowPlacement "SetWindowPlacement" sptr,sptr
	#func global SetWindowPos "SetWindowPos" sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global SetWindowRgn "SetWindowRgn" sptr,sptr,sptr
	#define global SetWindowText SetWindowTextA
	#func global SetWindowTextA "SetWindowTextA" sptr,sptr
	#func global SetWindowTextW "SetWindowTextW" wptr,wptr
	#func global SetWindowWord "SetWindowWord" sptr,sptr,sptr
	#define global SetWindowsHook SetWindowsHookA
	#func global SetWindowsHookA "SetWindowsHookA" sptr,sptr
	#define global SetWindowsHookEx SetWindowsHookExA
	#func global SetWindowsHookExA "SetWindowsHookExA" sptr,sptr,sptr,sptr
	#func global SetWindowsHookExW "SetWindowsHookExW" wptr,wptr,wptr,wptr
	#func global SetWindowsHookW "SetWindowsHookW" wptr,wptr
	#func global ShowCaret "ShowCaret" sptr
	#func global ShowCursor "ShowCursor" sptr
	#func global ShowOwnedPopups "ShowOwnedPopups" sptr,sptr
	#func global ShowScrollBar "ShowScrollBar" sptr,sptr,sptr
	#func global ShowWindow "ShowWindow" sptr,sptr
	#func global ShowWindowAsync "ShowWindowAsync" sptr,sptr
	#func global SubtractRect "SubtractRect" sptr,sptr,sptr
	#func global SwapMouseButton "SwapMouseButton" sptr
	#func global SwitchDesktop "SwitchDesktop" sptr
	#define global SystemParametersInfo SystemParametersInfoA
	#func global SystemParametersInfoA "SystemParametersInfoA" sptr,sptr,sptr,sptr
	#func global SystemParametersInfoW "SystemParametersInfoW" wptr,wptr,wptr,wptr
	#define global TabbedTextOut TabbedTextOutA
	#func global TabbedTextOutA "TabbedTextOutA" sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global TabbedTextOutW "TabbedTextOutW" wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr
	#func global TileChildWindows "TileChildWindows" sptr,sptr
	#func global TileWindows "TileWindows" sptr,sptr,sptr,sptr,sptr
	#func global ToAscii "ToAscii" sptr,sptr,sptr,sptr,sptr
	#func global ToAsciiEx "ToAsciiEx" sptr,sptr,sptr,sptr,sptr,sptr
	#func global ToUnicode "ToUnicode" sptr,sptr,sptr,sptr,sptr,sptr
	#func global ToUnicodeEx "ToUnicodeEx" sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global TrackMouseEvent "TrackMouseEvent" sptr
	#func global TrackPopupMenu "TrackPopupMenu" sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global TrackPopupMenuEx "TrackPopupMenuEx" sptr,sptr,sptr,sptr,sptr,sptr
	#func global TranslateAccelerator "TranslateAccelerator" sptr,sptr,sptr
	#func global TranslateAcceleratorA "TranslateAcceleratorA" sptr,sptr,sptr
	#func global TranslateAcceleratorW "TranslateAcceleratorW" wptr,wptr,wptr
	#func global TranslateMDISysAccel "TranslateMDISysAccel" sptr,sptr
	#func global TranslateMessage "TranslateMessage" sptr
	#func global UnhookWinEvent "UnhookWinEvent" sptr
	#func global UnhookWindowsHook "UnhookWindowsHook" sptr,sptr
	#func global UnhookWindowsHookEx "UnhookWindowsHookEx" sptr
	#func global UnionRect "UnionRect" sptr,sptr,sptr
	#func global UnloadKeyboardLayout "UnloadKeyboardLayout" sptr
	#func global UnpackDDElParam "UnpackDDElParam" sptr,sptr,sptr,sptr
	#define global UnregisterClass UnregisterClassA
	#func global UnregisterClassA "UnregisterClassA" sptr,sptr
	#func global UnregisterClassW "UnregisterClassW" wptr,wptr
	#func global UnregisterDeviceNotification "UnregisterDeviceNotification" sptr
	#func global UnregisterHotKey "UnregisterHotKey" sptr,sptr
	#func global UpdateLayeredWindow "UpdateLayeredWindow" sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global UpdateWindow "UpdateWindow" sptr
	#func global UserHandleGrantAccess "UserHandleGrantAccess" sptr,sptr,sptr
	#func global ValidateRect "ValidateRect" sptr,sptr
	#func global ValidateRgn "ValidateRgn" sptr,sptr
	#define global VkKeyScan VkKeyScanA
	#func global VkKeyScanA "VkKeyScanA" sptr
	#define global VkKeyScanEx VkKeyScanExA
	#func global VkKeyScanExA "VkKeyScanExA" sptr,sptr
	#func global VkKeyScanExW "VkKeyScanExW" wptr,wptr
	#func global VkKeyScanW "VkKeyScanW" wptr
	#func global WINNLSEnableIME "WINNLSEnableIME" sptr,sptr
	#func global WINNLSGetEnableStatus "WINNLSGetEnableStatus" sptr
	#func global WINNLSGetIMEHotkey "WINNLSGetIMEHotkey" sptr
	#func global WaitForInputIdle "WaitForInputIdle" sptr,sptr
	#func global WaitMessage "WaitMessage"
	#func global Win32PoolAllocationStats "Win32PoolAllocationStats" sptr,sptr,sptr,sptr,sptr,sptr
	#define global WinHelp WinHelpA
	#func global WinHelpA "WinHelpA" sptr,sptr,sptr,sptr
	#func global WinHelpW "WinHelpW" wptr,wptr,wptr,wptr
	#func global WindowFromDC "WindowFromDC" sptr
	#func global WindowFromPoint "WindowFromPoint" sptr,sptr
	#func global keybd_event "keybd_event" sptr,sptr,sptr,sptr
	#func global mouse_event "mouse_event" sptr,sptr,sptr,sptr,sptr
	#define global wsprintf wsprintfA
	#func global wsprintfA "wsprintfA" sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global wsprintfW "wsprintfW" wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr,wptr
	#define global wvsprintf wvsprintfA
	#func global wvsprintfA "wvsprintfA" sptr,sptr,sptr
	#func global wvsprintfW "wvsprintfW" wptr,wptr,wptr
#endif
#endif
;(winmm.as)
#ifdef __hsp30__
#ifndef __WINMM__
#define global __WINMM__
#uselib "WINMM.DLL"
	#func global CloseDriver "CloseDriver" sptr,sptr,sptr
	#func global DefDriverProc "DefDriverProc" sptr,sptr,sptr,sptr,sptr
	#func global DriverCallback "DriverCallback" sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global DrvGetModuleHandle "DrvGetModuleHandle" sptr
	#func global GetDriverModuleHandle "GetDriverModuleHandle" sptr
	#func global MigrateAllDrivers "MigrateAllDrivers"
	#func global MigrateMidiUser "MigrateMidiUser"
	#func global MigrateSoundEvents "MigrateSoundEvents"
	#func global NotifyCallbackData "NotifyCallbackData" sptr,sptr,sptr,sptr,sptr
	#func global OpenDriver "OpenDriver" sptr,sptr,sptr
	#func global PlaySound "PlaySound" sptr,sptr,sptr
	#func global PlaySoundA "PlaySoundA" sptr,sptr,sptr
	#func global PlaySoundW "PlaySoundW" wptr,wptr,wptr
	#func global SendDriverMessage "SendDriverMessage" sptr,sptr,sptr,sptr
	#func global WOW32DriverCallback "WOW32DriverCallback" sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global WOW32ResolveMultiMediaHandle "WOW32ResolveMultiMediaHandle" sptr,sptr,sptr,sptr,sptr,sptr
	#func global WOWAppExit "WOWAppExit" sptr
	#func global aux32Message "aux32Message" sptr,sptr,sptr,sptr,sptr
	#define global auxGetDevCaps auxGetDevCapsA
	#func global auxGetDevCapsA "auxGetDevCapsA" sptr,sptr,sptr
	#func global auxGetDevCapsW "auxGetDevCapsW" wptr,wptr,wptr
	#func global auxGetNumDevs "auxGetNumDevs"
	#func global auxGetVolume "auxGetVolume" sptr,sptr
	#func global auxOutMessage "auxOutMessage" sptr,sptr,sptr,sptr
	#func global auxSetVolume "auxSetVolume" sptr,sptr
	#func global joy32Message "joy32Message" sptr,sptr,sptr,sptr,sptr
	#func global joyConfigChanged "joyConfigChanged" sptr
	#define global joyGetDevCaps joyGetDevCapsA
	#func global joyGetDevCapsA "joyGetDevCapsA" sptr,sptr,sptr
	#func global joyGetDevCapsW "joyGetDevCapsW" wptr,wptr,wptr
	#func global joyGetNumDevs "joyGetNumDevs"
	#func global joyGetPos "joyGetPos" sptr,sptr
	#func global joyGetPosEx "joyGetPosEx" sptr,sptr
	#func global joyGetThreshold "joyGetThreshold" sptr,sptr
	#func global joyReleaseCapture "joyReleaseCapture" sptr
	#func global joySetCapture "joySetCapture" sptr,sptr,sptr,sptr
	#func global joySetThreshold "joySetThreshold" sptr,sptr
	#func global mci32Message "mci32Message" sptr,sptr,sptr,sptr,sptr
	#func global mciDriverNotify "mciDriverNotify" sptr,sptr,sptr
	#func global mciDriverYield "mciDriverYield" sptr
	#func global mciExecute "mciExecute" sptr
	#func global mciFreeCommandResource "mciFreeCommandResource" sptr
	#func global mciGetCreatorTask "mciGetCreatorTask" sptr
	#define global mciGetDeviceID mciGetDeviceIDA
	#func global mciGetDeviceIDA "mciGetDeviceIDA" sptr
	#define global mciGetDeviceIDFromElementID mciGetDeviceIDFromElementIDA
	#func global mciGetDeviceIDFromElementIDA "mciGetDeviceIDFromElementIDA" sptr,sptr
	#func global mciGetDeviceIDFromElementIDW "mciGetDeviceIDFromElementIDW" wptr,wptr
	#func global mciGetDeviceIDW "mciGetDeviceIDW" wptr
	#func global mciGetDriverData "mciGetDriverData" sptr
	#define global mciGetErrorString mciGetErrorStringA
	#func global mciGetErrorStringA "mciGetErrorStringA" sptr,sptr,sptr
	#func global mciGetErrorStringW "mciGetErrorStringW" wptr,wptr,wptr
	#func global mciGetYieldProc "mciGetYieldProc" sptr,sptr
	#func global mciLoadCommandResource "mciLoadCommandResource" sptr,sptr,sptr
	#define global mciSendCommand mciSendCommandA
	#func global mciSendCommandA "mciSendCommandA" sptr,sptr,sptr,sptr
	#func global mciSendCommandW "mciSendCommandW" wptr,wptr,wptr,wptr
	#define global mciSendString mciSendStringA
	#func global mciSendStringA "mciSendStringA" sptr,sptr,sptr,sptr
	#func global mciSendStringW "mciSendStringW" wptr,wptr,wptr,wptr
	#func global mciSetDriverData "mciSetDriverData" sptr,sptr
	#func global mciSetYieldProc "mciSetYieldProc" sptr,sptr,sptr
	#func global mid32Message "mid32Message" sptr,sptr,sptr,sptr,sptr
	#func global midiConnect "midiConnect" sptr,sptr,sptr
	#func global midiDisconnect "midiDisconnect" sptr,sptr,sptr
	#func global midiInAddBuffer "midiInAddBuffer" sptr,sptr,sptr
	#func global midiInClose "midiInClose" sptr
	#define global midiInGetDevCaps midiInGetDevCapsA
	#func global midiInGetDevCapsA "midiInGetDevCapsA" sptr,sptr,sptr
	#func global midiInGetDevCapsW "midiInGetDevCapsW" wptr,wptr,wptr
	#define global midiInGetErrorText midiInGetErrorTextA
	#func global midiInGetErrorTextA "midiInGetErrorTextA" sptr,sptr,sptr
	#func global midiInGetErrorTextW "midiInGetErrorTextW" wptr,wptr,wptr
	#func global midiInGetID "midiInGetID" sptr,sptr
	#func global midiInGetNumDevs "midiInGetNumDevs"
	#func global midiInMessage "midiInMessage" sptr,sptr,sptr,sptr
	#func global midiInOpen "midiInOpen" sptr,sptr,sptr,sptr,sptr
	#func global midiInPrepareHeader "midiInPrepareHeader" sptr,sptr,sptr
	#func global midiInReset "midiInReset" sptr
	#func global midiInStart "midiInStart" sptr
	#func global midiInStop "midiInStop" sptr
	#func global midiInUnprepareHeader "midiInUnprepareHeader" sptr,sptr,sptr
	#func global midiOutCacheDrumPatches "midiOutCacheDrumPatches" sptr,sptr,sptr,sptr
	#func global midiOutCachePatches "midiOutCachePatches" sptr,sptr,sptr,sptr
	#func global midiOutClose "midiOutClose" sptr
	#define global midiOutGetDevCaps midiOutGetDevCapsA
	#func global midiOutGetDevCapsA "midiOutGetDevCapsA" sptr,sptr,sptr
	#func global midiOutGetDevCapsW "midiOutGetDevCapsW" wptr,wptr,wptr
	#define global midiOutGetErrorText midiOutGetErrorTextA
	#func global midiOutGetErrorTextA "midiOutGetErrorTextA" sptr,sptr,sptr
	#func global midiOutGetErrorTextW "midiOutGetErrorTextW" wptr,wptr,wptr
	#func global midiOutGetID "midiOutGetID" sptr,sptr
	#func global midiOutGetNumDevs "midiOutGetNumDevs"
	#func global midiOutGetVolume "midiOutGetVolume" sptr,sptr
	#func global midiOutLongMsg "midiOutLongMsg" sptr,sptr,sptr
	#func global midiOutMessage "midiOutMessage" sptr,sptr,sptr,sptr
	#func global midiOutOpen "midiOutOpen" sptr,sptr,sptr,sptr,sptr
	#func global midiOutPrepareHeader "midiOutPrepareHeader" sptr,sptr,sptr
	#func global midiOutReset "midiOutReset" sptr
	#func global midiOutSetVolume "midiOutSetVolume" sptr,sptr
	#func global midiOutShortMsg "midiOutShortMsg" sptr,sptr
	#func global midiOutUnprepareHeader "midiOutUnprepareHeader" sptr,sptr,sptr
	#func global midiStreamClose "midiStreamClose" sptr
	#func global midiStreamOpen "midiStreamOpen" sptr,sptr,sptr,sptr,sptr,sptr
	#func global midiStreamOut "midiStreamOut" sptr,sptr,sptr
	#func global midiStreamPause "midiStreamPause" sptr
	#func global midiStreamPosition "midiStreamPosition" sptr,sptr,sptr
	#func global midiStreamProperty "midiStreamProperty" sptr,sptr,sptr
	#func global midiStreamRestart "midiStreamRestart" sptr
	#func global midiStreamStop "midiStreamStop" sptr
	#func global mixerClose "mixerClose" sptr
	#define global mixerGetControlDetails mixerGetControlDetailsA
	#func global mixerGetControlDetailsA "mixerGetControlDetailsA" sptr,sptr,sptr
	#func global mixerGetControlDetailsW "mixerGetControlDetailsW" wptr,wptr,wptr
	#define global mixerGetDevCaps mixerGetDevCapsA
	#func global mixerGetDevCapsA "mixerGetDevCapsA" sptr,sptr,sptr
	#func global mixerGetDevCapsW "mixerGetDevCapsW" wptr,wptr,wptr
	#func global mixerGetID "mixerGetID" sptr,sptr,sptr
	#define global mixerGetLineControls mixerGetLineControlsA
	#func global mixerGetLineControlsA "mixerGetLineControlsA" sptr,sptr,sptr
	#func global mixerGetLineControlsW "mixerGetLineControlsW" wptr,wptr,wptr
	#define global mixerGetLineInfo mixerGetLineInfoA
	#func global mixerGetLineInfoA "mixerGetLineInfoA" sptr,sptr,sptr
	#func global mixerGetLineInfoW "mixerGetLineInfoW" wptr,wptr,wptr
	#func global mixerGetNumDevs "mixerGetNumDevs"
	#func global mixerMessage "mixerMessage" sptr,sptr,sptr,sptr
	#func global mixerOpen "mixerOpen" sptr,sptr,sptr,sptr,sptr
	#func global mixerSetControlDetails "mixerSetControlDetails" sptr,sptr,sptr
	#func global mmDrvInstall "mmDrvInstall" sptr,sptr,sptr,sptr
	#func global mmGetCurrentTask "mmGetCurrentTask"
	#func global mmTaskBlock "mmTaskBlock" sptr
	#func global mmTaskCreate "mmTaskCreate" sptr,sptr,sptr
	#func global mmTaskSignal "mmTaskSignal" sptr
	#func global mmTaskYield "mmTaskYield"
	#func global mmioAdvance "mmioAdvance" sptr,sptr,sptr
	#func global mmioAscend "mmioAscend" sptr,sptr,sptr
	#func global mmioClose "mmioClose" sptr,sptr
	#func global mmioCreateChunk "mmioCreateChunk" sptr,sptr,sptr
	#func global mmioDescend "mmioDescend" sptr,sptr,sptr,sptr
	#func global mmioFlush "mmioFlush" sptr,sptr
	#func global mmioGetInfo "mmioGetInfo" sptr,sptr,sptr
	#define global mmioInstallIOProc mmioInstallIOProcA
	#func global mmioInstallIOProcA "mmioInstallIOProcA" sptr,sptr,sptr
	#func global mmioInstallIOProcW "mmioInstallIOProcW" wptr,wptr,wptr
	#define global mmioOpen mmioOpenA
	#func global mmioOpenA "mmioOpenA" sptr,sptr,sptr
	#func global mmioOpenW "mmioOpenW" wptr,wptr,wptr
	#func global mmioRead "mmioRead" sptr,sptr,sptr
	#define global mmioRename mmioRenameA
	#func global mmioRenameA "mmioRenameA" sptr,sptr,sptr,sptr
	#func global mmioRenameW "mmioRenameW" wptr,wptr,wptr,wptr
	#func global mmioSeek "mmioSeek" sptr,sptr,sptr
	#func global mmioSendMessage "mmioSendMessage" sptr,sptr,sptr,sptr
	#func global mmioSetBuffer "mmioSetBuffer" sptr,sptr,sptr,sptr
	#func global mmioSetInfo "mmioSetInfo" sptr,sptr,sptr
	#define global mmioStringToFOURCC mmioStringToFOURCCA
	#func global mmioStringToFOURCCA "mmioStringToFOURCCA" sptr,sptr
	#func global mmioStringToFOURCCW "mmioStringToFOURCCW" wptr,wptr
	#func global mmioWrite "mmioWrite" sptr,sptr,sptr
	#func global mmsystemGetVersion "mmsystemGetVersion"
	#func global mod32Message "mod32Message" sptr,sptr,sptr,sptr,sptr
	#func global mxd32Message "mxd32Message" sptr,sptr,sptr,sptr,sptr
	#define global sndPlaySound sndPlaySoundA
	#func global sndPlaySoundA "sndPlaySoundA" sptr,sptr
	#func global sndPlaySoundW "sndPlaySoundW" wptr,wptr
	#func global tid32Message "tid32Message" sptr,sptr,sptr,sptr,sptr
	#func global timeBeginPeriod "timeBeginPeriod" sptr
	#func global timeEndPeriod "timeEndPeriod" sptr
	#func global timeGetDevCaps "timeGetDevCaps" sptr,sptr
	#func global timeGetSystemTime "timeGetSystemTime" sptr,sptr
	#func global timeGetTime "timeGetTime"
	#func global timeKillEvent "timeKillEvent" sptr
	#func global timeSetEvent "timeSetEvent" sptr,sptr,sptr,sptr,sptr
	#func global waveInAddBuffer "waveInAddBuffer" sptr,sptr,sptr
	#func global waveInClose "waveInClose" sptr
	#define global waveInGetDevCaps waveInGetDevCapsA
	#func global waveInGetDevCapsA "waveInGetDevCapsA" sptr,sptr,sptr
	#func global waveInGetDevCapsW "waveInGetDevCapsW" wptr,wptr,wptr
	#define global waveInGetErrorText waveInGetErrorTextA
	#func global waveInGetErrorTextA "waveInGetErrorTextA" sptr,sptr,sptr
	#func global waveInGetErrorTextW "waveInGetErrorTextW" wptr,wptr,wptr
	#func global waveInGetID "waveInGetID" sptr,sptr
	#func global waveInGetNumDevs "waveInGetNumDevs"
	#func global waveInGetPosition "waveInGetPosition" sptr,sptr,sptr
	#func global waveInMessage "waveInMessage" sptr,sptr,sptr,sptr
	#func global waveInOpen "waveInOpen" sptr,sptr,sptr,sptr,sptr,sptr
	#func global waveInPrepareHeader "waveInPrepareHeader" sptr,sptr,sptr
	#func global waveInReset "waveInReset" sptr
	#func global waveInStart "waveInStart" sptr
	#func global waveInStop "waveInStop" sptr
	#func global waveInUnprepareHeader "waveInUnprepareHeader" sptr,sptr,sptr
	#func global waveOutBreakLoop "waveOutBreakLoop" sptr
	#func global waveOutClose "waveOutClose" sptr
	#define global waveOutGetDevCaps waveOutGetDevCapsA
	#func global waveOutGetDevCapsA "waveOutGetDevCapsA" sptr,sptr,sptr
	#func global waveOutGetDevCapsW "waveOutGetDevCapsW" wptr,wptr,wptr
	#define global waveOutGetErrorText waveOutGetErrorTextA
	#func global waveOutGetErrorTextA "waveOutGetErrorTextA" sptr,sptr,sptr
	#func global waveOutGetErrorTextW "waveOutGetErrorTextW" wptr,wptr,wptr
	#func global waveOutGetID "waveOutGetID" sptr,sptr
	#func global waveOutGetNumDevs "waveOutGetNumDevs"
	#func global waveOutGetPitch "waveOutGetPitch" sptr,sptr
	#func global waveOutGetPlaybackRate "waveOutGetPlaybackRate" sptr,sptr
	#func global waveOutGetPosition "waveOutGetPosition" sptr,sptr,sptr
	#func global waveOutGetVolume "waveOutGetVolume" sptr,sptr
	#func global waveOutMessage "waveOutMessage" sptr,sptr,sptr,sptr
	#func global waveOutOpen "waveOutOpen" sptr,sptr,sptr,sptr,sptr,sptr
	#func global waveOutPause "waveOutPause" sptr
	#func global waveOutPrepareHeader "waveOutPrepareHeader" sptr,sptr,sptr
	#func global waveOutReset "waveOutReset" sptr
	#func global waveOutRestart "waveOutRestart" sptr
	#func global waveOutSetPitch "waveOutSetPitch" sptr,sptr
	#func global waveOutSetPlaybackRate "waveOutSetPlaybackRate" sptr,sptr
	#func global waveOutSetVolume "waveOutSetVolume" sptr,sptr
	#func global waveOutUnprepareHeader "waveOutUnprepareHeader" sptr,sptr,sptr
	#func global waveOutWrite "waveOutWrite" sptr,sptr,sptr
	#func global wid32Message "wid32Message" sptr,sptr,sptr,sptr,sptr
	#func global winmmDbgOut "winmmDbgOut" sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr,sptr
	#func global winmmSetDebugLevel "winmmSetDebugLevel" sptr
	#func global wod32Message "wod32Message" sptr,sptr,sptr,sptr,sptr
#endif
#endif
	;================================================================================
	;モジュール about
	;ver 2.0
	;	プログラムの説明
	;	llmod3.hspが必要です
	;================================================================================

	; aboutモジュール命令一覧
	;
	; about			プログラムのバージョンを表示するダイアログを作成
	;
	; 計	1個


	;使い方
	;================================================================================
	; about "s1","s2"		プログラムのバージョンを表示するダイアログを作成
	;
	;  s1 : アプリケーション名が入った文字列変数または文字列
	;  s2 : 製作者名が入った文字列変数または文字列
	;================================================================================
	;
	;<>説明
	; プログラムのバージョンを表示する時などに使われるダイアログを表示します。
	; アプリケーション名s1を"my.exeのﾊﾞｰｼﾞｮﾝ情報#my.exe ver 1.00"
	; のように#で区切ると'Microsoft my.exe ver 1.00'という表示が加わります。
	;
	;<>例
	;	about "loadlib.dll","tom"
	;

#ifdef __hsp30__

#ifndef __about__
#define __about__

	;module始め>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	#module "_about"

	;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	;about
	;................................................................................
	#deffunc about str app,str stuff

	lcl_app = app
	lcl_stuff = stuff

	;@@@@ module handleの取得 @@@@
	_get_instance prm.0
	prm.1 = 128
	dllproc "LoadIconA",prm,2,D_USER

	prm.3 = stat

	;@@@@ active windowsの取得 @@@@
	_get_active_window prm.0

	getptr prm.1,lcl_app
	getptr prm.2,lcl_stuff

	dllproc "ShellAboutA",prm,4,D_SHELL

	return
	#global
	;module終わり>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

#endif /* __about__ */

#endif /* __hsp30__ */	;================================================================================
	;モジュール console
	;ver 2.1
	;	コンソール関連
	;	llmod3.hspが必要です
	;================================================================================

	; consoleモジュール命令一覧
	;
	; console				コンソールウィンドウの作成
	; console_end				コンソールウィンドウを閉じる
	; puts					コンソールに文字列を書き込む
	; gets					コンソールから文字列を読み込む
	; console_color				コンソールのテキストの色設定
	; console_pos				コンソールの文字表示位置設定
	;
	; 計	6個


	; このファイルの最後にHSPで作成したプログラムをコンソールプログラムに
	; 変換するスクリプトがあります。

	;使い方
	;================================================================================
	; console				コンソールウィンドウの作成
	;
	; パラメータ無し
	;================================================================================
	;
	;<>説明
	; コンソールウィンドウを作成します。
	;
	;<>この命令を呼び出した後のstatの値
	; 0	成功
	; 1	失敗
	;

	;================================================================================
	; console_end				コンソールウィンドウを閉じる
	;
	; パラメータ無し
	;================================================================================
	;
	;<>説明
	; コンソールウィンドウを閉じます。
	;
	;<>この命令を呼び出した後のstatの値
	; 0	成功
	; 1	失敗
	;


	;================================================================================
	; puts v1				コンソールに文字列を書き込む
	;
	; v1 : コンソールに表示する文字列が入った文字列変数
	;================================================================================
	;
	;<>説明
	; コンソールに文字列を表示します。
	; (putzを使うとv1に直接文字列を代入することができます。)
	;

	;================================================================================
	; gets v1,n2				コンソールから文字列を読み込む
	;
	; v1 : コンソールからの文字列を取得する変数
	; n2 : 取得する文字の数
	;================================================================================
	;
	;<>説明
	; コンソールから文字列を取得します。
	; n2を省略したときの値は63です。
	;

	;================================================================================
	; console_color n1			コンソールのテキストの色設定
	;
	; n1 : コンソールの文字列の色
	;================================================================================
	;
	;<>説明
	; コンソールに表示する文字列の色を設定します。
	; n1は以下の値を組み合わせて使います。1+4だと紫になります。
	; 1+4+8で明るい紫になります。
	;
	; n1の値	色
	; 1		青
	; 2		緑
	; 4		赤
	; 8		強調
	; $10		青(背景)
	; $20		緑(背景)
	; $40		赤(背景)
	; $80		強調(背景)
	;

	;================================================================================
	; console_pos n1,n2			コンソールの文字表示位置設定
	;
	; n1 : x座標
	; n2 : y座標
	;================================================================================
	;
	;<>説明
	; 文字列を表示する座標を設定します。
	;

#ifdef __hsp30__

	;module始め>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	#module "_console"


	;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	;console
	;Consoleの作成
	;................................................................................
	#deffunc console int v1

	if(v1 == 0) {
		dllproc "AllocConsole",prm,0,D_KERNEL
		if(stat == 0) : return 1
	}

	;#define STD_INPUT_HANDLE	0xfffffff6
	;#define STD_OUTPUT_HANDLE	0xfffffff5
	;#define STD_ERROR_HANDLE	0xfffffff4

	dim prm,3
	dim std,3

	dll_getfunc func,"GetStdHandle",D_KERNEL
	if(func == 0) : return 1

	prm = 0xfffffff6,0xfffffff5,0xfffffff4
	repeat 3
		prm = prm(cnt)
		ll_callfunc prm,1,func
		std(cnt) = dllret
	loop

	#define	S_INPUT		0
	#define	S_OUTPUT	1
	#define	S_ERROR		2

	return 0

	;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	;console_end
	;Consoleの終了
	;................................................................................
	#deffunc console_end
	dllproc "FreeConsole",prm,0,D_KERNEL
	if(stat == 0) : stt = 1 : else : stt = 0
	return stt

	;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	;console_color
	;Consoleのテキストの色設定
	;................................................................................
	#deffunc console_color int v1

	;#define FOREGROUND_BLUE		1
	;#define FOREGROUND_GREEN	2
	;#define FOREGROUND_RED		4
	;#define FOREGROUND_INTENSITY	8
	;#define BACKGROUND_BLUE		$10
	;#define BACKGROUND_GREEN	$20
	;#define BACKGROUND_RED		$40
	;#define BACKGROUND_INTENSITY	$80

	prm = std.S_OUTPUT,v1
	dllproc "SetConsoleTextAttribute",prm,2,D_KERNEL
	return

	;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	;console_pos
	;Consoleのテキストの色設定
	;................................................................................
	#deffunc console_pos int v1,int v2

	prm = std.S_OUTPUT
	prm.1 = v1 | (v2 << 16)
	dllproc "SetConsoleCursorPosition",prm,2,D_KERNEL
	return

	;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	;console_size
	;Consoleウィンドウのサイズ設定
	;................................................................................
	#deffunc console_size int v1,int v2,int v3,int v4,int v5

	prm = std.S_OUTPUT
	_v1 = v1 | (v2 << 16),v3 | (v4 << 16)
	prm.1 = v5
	getptr prm.2,_v1
	dllproc "SetConsoleWindowInfo",prm,3,D_KERNEL
	return

	;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	;console_sizeget
	;Consoleウィンドウのサイズ取得
	;................................................................................
	#deffunc console_sizeget array v1

	prm = std.S_OUTPUT
	getptr prm.1,a
	dllproc "GetConsoleScreenBufferInfo",prm,2,D_KERNEL
	repeat 11
		v1(cnt) = peek(a,cnt * 2)
	loop
	return


	;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	;puts
	;Consoleに文字列を書き込む
	;................................................................................
	#deffunc putz str v1
	s = v1
	prm = std.S_OUTPUT
	getptr prm.1,s
	prm.2 = strlen(s)
	getptr prm.3,a
	prm.4 = 0
	dllproc "WriteConsoleA",prm,5,D_KERNEL
	return prm(3)

	#deffunc puts var v1
	l = strlen(v1) : if(l >= 64) : sdim s,l + 1
	s = v1
	prm = std.S_OUTPUT
	getptr prm.1,s
	prm.2 = strlen(s)
	getptr prm.3,a
	prm.4 = 0
	dllproc "WriteConsoleA",prm,5,D_KERNEL
	return prm(3)

	;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	;gets
	;Consoleから文字列を読み込む
	;................................................................................
	#deffunc gets var v1,int v2

	_v2 = v2
	if(_v2 == 0) : _v2 = 63

	prm = std.S_INPUT
	getptr prm.1,v1
	prm.2 = _v2
	getptr prm.3,a
	prm.4 = 0
	dllproc "ReadConsoleA",prm,5,D_KERNEL
	return prm.3

	#undef	S_INPUT
	#undef	S_OUTPUT
	#undef	S_ERROR


	;module終わり>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	#global

#endif /* __hsp30__ */

;
;	;HSPで作成したプログラムをコンソールプログラムにする
;
;
;	;コンソールプログラムにした場合は
;	;	console 1
;	;を実行してから
;	;puts、putzで文字列を表示できます。
;
;	exename = "test.exe"		;変換するexeファイル
;	new_exename = "c_"+exename	;変換したexeファイルの保存名
;
;	exist exename
;	bufsize = strsize
;	if(bufsize == -1) : dialog exename+"が見つかりません" : end
;
;	;exeファイル読み込み
;	alloc buf,bufsize
;	bload exename,buf,bufsize
;
;	;new header address   offset $3C(60)
;	new_hdr_adr = buf.15
;
;	;optional header address
;	opt_hdr_adr = new_hdr_adr + 4 + 20
;
;	;subsystemを調べる
;	subsystem_adr = opt_hdr_adr + $44
;	sub = wpeek(buf,subsystem_adr)
;
;	;1にするとサブシステムを表示して停止
;	#define	CHECK_SUBSYSTEM		0
;
;	if(CHECK_SUBSYSTEM) {
;		sdim subsystem_str,64,6
;		subsystem_str.0 = "[IMAGE_SUBSYSTEM_UNKNOWN]"
;		subsystem_str.1 = "[IMAGE_SUBSYSTEM_NATIVE]"
;		subsystem_str.2 = "[IMAGE_SUBSYSTEM_WINDOWS_GUI]"	;GUI
;		subsystem_str.3 = "[IMAGE_SUBSYSTEM_WINDOWS_CUI]"	;コンソール
;		subsystem_str.4 = "[IMAGE_SUBSYSTEM_OS2_CUI]"
;		subsystem_str.5 = "[IMAGE_SUBSYSTEM_POSIX_CUI]"
;		mes subsystem_str.sub + "(" + sub + ")"
;		stop
;	}
;
;	;サブシステムをコンソールにして保存
;	sub = 3					;3 コンソール
;	wpoke buf,subsystem_adr,sub
;	bsave new_exename,buf,bufsize
;
	;================================================================================
	;モジュール dragdrop
	;ver 2.0
	;	ドラッグ&ドロップ
	;	llmod3.hspが必要です
	;	( _ddrop.mcn がいらないよう修正:2002/11/13 )
	;================================================================================

	; dragdropモジュール命令一覧
	;
	; dd_accept			ドラッグ&ドロップをできるようにする
	; dd_reject			ドラッグ&ドロップをできないようにする
	;
	; 計	2個



	;使い方
	;================================================================================
	; dd_accept v1,v2,n3		ドラッグ&ドロップをできるようにする
	;
	;  v1 : ドラッグ&ドロップされたファイル名を入れる変数
	;  v2 : ドラッグ&ドロップされたファイル数を入れる変数
	;  n3 : ウィンドウID
	;================================================================================
	;
	;<>説明
	; n3で指定したウィンドウにドラッグ&ドロップ(以下D&D)をできるようにします。
	; ただし、ウィンドウID 1は設定できません。
	; dd_acceptを実行した後、ウィンドウにファイルがD&Dされるとv1で指定した変数に
	; D&Dされたファイル名が入ります。
	; v2にはD&Dされたファイルの数、D&Dされた座標、ウィンドウIDが代入されます。
	;
	; D&Dされたファイル名は"\n"で区切られています(D&Dされたファイルが1つの場合でも)。
	; 1つのファイル名を取り出したいときはノートパッド命令を使うと便利です。
	;
	; dd_accept実行後は、v1,v2に設定した変数はalloc,dim,sdimなどに使用しないで下さい。
	;
	;<>例
	;	#include "llmod3.hsp"
	;	#include "dragdrop.as"
	;
	;	alloc buf,1024*64	;ドラッグ&ドロップされたファイル名を入れる変数
	;	dd_accept buf,a
	;
	;*@
	;	wait 1
	;	if a {
	;		cls
	;		pos 0,0
	;		mes "ドラッグ&ドロップされたファイル数:"+a
	;		mes "ドラッグ&ドロップされたファイル位置 x:"+a.1+" y:"+a.2
	;		mes "ドラッグ&ドロップされたウィンドウID :"+a.3
	;		mes buf
	;		a=0		; aをリセットしてください
	;	}
	;	goto @b
	;
	;<>例2
	;	#include "llmod3.hsp"
	;	#include "dragdrop.as"
	;
	;	alloc buf,1024*64	;ドラッグ&ドロップされたファイル名を入れる変数
	;	dd_accept buf,a
	;
	;*@
	;	wait 1
	;	if a {
	;		notesel buf
	;		repeat a
	;			noteget file,cnt
	;			exec file,16	;ドラッグ&ドロップされたファイルを実行
	;		loop
	;		a=0
	;	}
	;	goto @b
	;

	;================================================================================
	; dd_reject n1,n2		ドラッグ&ドロップをできないようにする
	;
	;  n1 : ウィンドウID
	;  n2 : フラグ
	;================================================================================
	;
	;<>説明
	; ドラッグ&ドロップをできないようにします。
	; dd_acceptを実行していない場合には効果がありません。
	; n2を1にするともう一度ドラッグ&ドロップをできるようにします。
	;

#ifdef __hsp30__

	;module始め>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	#module "dragdrop"


	;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	;_drag_accept_files
	;................................................................................
*_drag_accept_files
	dllproc "DragAcceptFiles",prm,2,D_SHELL
	return



	;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	;dd_accept
	;
	;................................................................................
	#deffunc dd_accept var v1,array v2,int v3

	v2 = 0
	#define	MCN_FILE_SIZE	192
	#define	MAX_WND_ID	32

	if(init == 0) {
		init = 1
		dim procs,MCN_FILE_SIZE * MAX_WND_ID / 4
		dim proc_org,MAX_WND_ID
		;_ddrop_mcn = "_ddrop.mcn"
	}

	;exist _ddrop_mcn : if strsize=-1 : dialog _ddrop_mcn+"が見つかりません" : return

	if(v3 == 1) : return		;scrren 1は使用しない

	getptr p,v1			;pointer to buffer
	getptr p.1,v2
	wnd_id = v3

	mref bmscr,67
	wnd_id.1 = bmscr.18	;現在アクティブなウィンドウID
	gsel wnd_id

	;プロシージャが既にセットされていればここでリターン
	if(proc_org.wnd_id) : return


	prm = hwnd,1
	gosub *_drag_accept_files 


	;プロシージャの取得
	;#define GWL_WNDPROC	-4

	prm.0 = hwnd,-4			;hwnd,GWL_WNDPROC
	setwndlong prm,1		;GetWindowLong
	proc_org.wnd_id = stat


	;プロシージャの作成
	a = MCN_FILE_SIZE / 4 * wnd_id
	dup buf,procs.a
	getptr p_proc,buf

	dll_getfunc func.0,"CallWindowProcA",D_USER
	dll_getfunc func.1,"DragQueryFileA",D_SHELL
	dll_getfunc func.2,"DragFinish",D_SHELL
	dll_getfunc func.3,"DragQueryPoint",D_SHELL

	;exist _ddrop_mcn
	;bload _ddrop_mcn,buf,strsize

	dim mcndata,MCN_FILE_SIZE / 4
	mcndata.0 = $0824448b,$0002333d,$57677500,$7c8b5556,$00be1824,$b8000000,$ffffffff,$57505050
	mcndata.8 = $000000b8,$8bd0ff00,$0000a3e8,$00b80000,$50000000,$0000b857,$d0ff0000,$000005c7
	mcndata.16 = $00000000,$684d0000,$00000104,$b8575556,$00000000,$f003d0ff,$0d06c766,$02c6830a
	mcndata.24 = $e275ed85,$570006c6,$000000b8,$5dd0ff00,$74ff5f5e,$74ff1024,$74ff1024,$74ff1024
	mcndata.32 = $00681024,$b8000000,$00000000,$10c2d0ff,$00000000
	a = MCN_FILE_SIZE * wnd_id
	memcpy procs,mcndata,MCN_FILE_SIZE,a


	#define	PK_BUF		19
	#define	PK_DQF		33
	#define	PK_BUF_N	42
	#define	PK_POINT	47
	#define	PK_DQP		54
	#define	PK_BUF_W	62
	#define	PK_WNDID	66
	#define	PK_DQF2		80
	#define	PK_DFF		105
	#define	PK_OPROC	131
	#define	PK_CWP		136

	lpoke buf,PK_BUF,p					;buffer
	lpoke buf,PK_DQF,func.1				;DragQueryFiles
	lpoke buf,PK_BUF_N,p.1				;buffer for count of files dropped
	lpoke buf,PK_POINT,p.1+4			;buffer for POINT
	lpoke buf,PK_DQP,func.3				;DragQueryPoint
	lpoke buf,PK_BUF_W,p.1+12			;buffer for hwnd
	lpoke buf,PK_WNDID,wnd_id			;HSP window ID
	lpoke buf,PK_DQF2,func.1			;DragQueryFiles
	lpoke buf,PK_DFF,func.2				;DragFinish
	lpoke buf,PK_OPROC,proc_org.wnd_id	;Original WndProc
	lpoke buf,PK_CWP,func				;CallWindowProc


	;プロシージャのセット
	prm.0 = hwnd,-4,p_proc			;hwnd,GWL_WNDPROC
	setwndlong prm

	gsel wnd_id.1

	return

	;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	;dd_reject
	;ドラッグ&ドロップをできないようにする
	;................................................................................
	#deffunc dd_reject int v1,int v2

	wnd_id = v1
	mref bmscr,67
	wnd_id.1 = bmscr.18		;現在アクティブなウィンドウID
	gsel wnd_id

	if(proc_org.v1 == 0) : return	;dd_acceptが使われていない
	prm = hwnd,v2
	gosub *_drag_accept_files
	gsel wnd_id.1
	return

	;module終わり>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	#global

#endif /* __hsp30__ */	;================================================================================
	;モジュール ime
	;ver 2.1
	;	IME
	;	llmod3.hspが必要です
	;================================================================================

	; imeモジュール命令一覧
	;
	; imeinit			IME情報を取得
	; imeopen			IMEウィンドウを開く
	; imestr			IMEに文字列を送る
	; imesend			IMEにメッセージを送る
	; linesel			mesbox内の一行を選択
	; selget			mesbox内の選択部分の文字列を取得
	;
	; 計	6個


	;使い方
	;================================================================================
	; imeinit v1,n2				IME情報を取得
	;
	;  v1 : IME情報を代入する変数
	;  n2 : mesboxのID
	;================================================================================
	;
	;<>説明
	; IME情報を取得します。
	; n2にmesboxのIDを代入します。
	;
	;<>例
	;	#include "llmod.as"
	;	#include "ime.as"
	;
	;	alloc buf,64*1024 : buf=""
	;	mesbox buf,winx,winy,1
	;	mb0_id=0
	;	imeinit mb0_ime,mb0_id
	;

	;================================================================================
	; imeopen v1,n2				IMEウィンドウを開く
	;
	;  v1 : imeinitに使用した変数
	;  n2 : 開くか閉じるかを示すフラグ
	;================================================================================
	;
	;<>説明
	; imeinitで取得したIMEを開きます。
	; n2を1にするとIMEウィンドウを閉じることができます。
	;
	;<>例
	;	#include "llmod3.as"
	;	#include "ime.as"
	;
	;	alloc buf,64 * 1024 : buf = ""
	;	mesbox buf,winx,winy,1
	;	mb0_id = 0
	;	imeinit mb0_ime,mb0_id
	;	imeopen mb0_ime
	;

	;================================================================================
	; imestr v1,"s2"			IMEに文字列を送る
	;
	;  v1 : imeinitに使用した変数
	;  s2 : IMEに送る文字列
	;================================================================================
	;
	;<>説明
	; IMEに文字列を送ります。
	; 文字列内にタブや改行があっては行けません。
	; 文字列には半角文字(英字、かな)、全角文字(英字、ひらがな、カタカナ)
	; が使用できます。
	;
	;<>例
	;	#include "llmod3.as"
	;	#include "ime.as"
	;
	;	alloc buf,64 * 1024 : buf = ""
	;	mesbox buf,winx,winy,1
	;	mb0_id = 0
	;	imeinit mb0_ime,mb0_id
	;	imeopen mb0_ime			;IMEを開く
	;	imestr  mb0_ime,"ｱｲｳｴｵ"		;文字列"ｱｲｳｴｵ"をIMEに送る
	;

	;================================================================================
	; imesend v1,n2,n3,n4			IMEにメッセージを送る
	;
	;  v1 : imeinitに使用した変数
	;  n2 : IMEに送るメッセージ
	;  n3 : パラメータ1
	;  n4 : パラメータ2
	;================================================================================
	;
	;<>説明
	; IMEのメッセージを送ります。
	;
	; n2の値
	; 0		候補ウィンドウを開く
	; 1		候補ウィンドウを閉じる
	; 2		n3ページのn4番目の候補を選択
	; 3		候補ウィンドウのn4番目のページを表示
	; 4		決定(0)、変換実行(1)、戻す(2)、キャンセル(3)(括弧内はn3の値)
	; 5		候補ウィンドウのサイズを変える(n3:0〜31)
	;
	;<>例
	;	#include "llmod3.as"
	;	#include "ime.as"
	;
	;	alloc buf,64 * 1024 : buf = ""
	;	mesbox buf,winx,winy,1
	;	mb0_id = 0
	;	imeinit mb0_ime,mb0_id
	;	imeopen mb0_ime			;IMEを開く
	;
	;	imestr  mb0_ime,"ﾅﾂﾒｿｳｾｷ"	;文字列"ﾅﾂﾒｿｳｾｷ"をIMEに送る
	;	imesend mb0_ime,4,1		;"ﾅﾂﾒｿｳｾｷ"を変換実行
	;	imesend mb0_ime,4,0		;決定
	;
	;	imestr  mb0_ime,"のいえ"	;文字列"のいえ"をIMEに送る
	;	imesend mb0_ime,4,1		;"のいえ"を変換実行
	;	imesend mb0_ime,4,0		;決定
	;
	;	imestr	mb0_ime,"ｱｵｲ"
	;	imesend mb0_ime,0		;候補ウィンドウを開く
	;

	;================================================================================
	; linesel n1.n2				mesbox内の一行を選択
	;
	;  n1 : mesboxのID
	;  n2 : 選択する行
	;================================================================================
	;
	;<>説明
	; mesbox n1 内のn2行を選択します。n2は0から数えます。
	; n2を-1にするとカーソルがある行を選択します。
	; n2を-2にするとmesbox内の文字全てを選択します。
	;
	;<>例
	;	#include "llmod3.as"
	;	#include "ime.as"
	;
	;	alloc buf,1024 : buf = "123456\n7890"
	;	mesbox buf,300,200,1
	;	mb_id = 0
	;	linesel mb_id,1		;1行目を選択(7890が選択される)
	;

	;================================================================================
	; selget v1,n2				mesbox内の選択部分の文字列を取得
	;
	;  v1 : mesbox内の選択されている部分を代入する変数
	;  n2 : mesboxのID
	;================================================================================
	;
	;<>説明
	; mesbox n2 の選択されている部分を取得します。
	;
	;<>例
	;	#include "llmod3.as"
	;	#include "ime.as"
	;
	;	alloc buf,1024 : buf = "123456\n7890"
	;	mesbox buf,300,200,1
	;	mb_id = 0
	;	linesel mb_id,1
	;	selget line_buf,mb_id
	;	dialog line_buf
	;


	; lineselとselgetはHSP標準の命令のみで作られています。
	; imeの命令と組み合わせて使用すると便利でしょう。
	; 例)
	;	#include "llmod3.as"
	;	#include "ime.as"
	;
	;	alloc linebuf,1024
	;	alloc buf,1024 * 32 : buf = ""
	;	mesbox buf,winx,winy-100,1
	;	mb_id = 0
	;	imeinit ime,mb_id
	;
	;	objsize 100,24
	;	button "選択部分変換",*do_sel_translate
	;	button "行変換",*do_line_translate
	;	stop
	;
	;*do_line_translate
	;	objsel mb_id
	;	linesel mb_id,-1
	;*do_sel_translate
	;	objsel mb_id
	;	selget linebuf,mb_id
	;	imeopen ime
	;	imestr ime,linebuf
	;	stop
	;

#ifdef __hsp30__

	;module始め>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	#module "ime"

	;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	;linesel
	;mesbox内の一行を選択
	;................................................................................
	#deffunc linesel int v1,int v2

	#define EM_LINEINDEX	187
	#define EM_LINELENGTH	193
	#define EM_SETSEL	177

	prm = 0
	sendmsg objinfo(v1,2),EM_LINEINDEX,v2,prm	: a = stat
	sendmsg objinfo(v1,2),EM_LINELENGTH,a,prm	: prm = stat + a

	if(v2 == -2) : a = 0 : prm = -1
	sendmsg objinfo(v1,2),EM_SETSEL,a,prm

	return


	;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	;selget
	;mesbox内の選択部分の文字列を取得
	;................................................................................
	#deffunc selget var v1,int v2

	#define EM_GETSEL	176

	v1 = ""
	sendmsg objinfo(v2,2),EM_GETSEL,0,0
	a = stat
	prm = wpeek(a,0)
	prm.1 = wpeek(a,2)

	#define WM_GETTEXT		13
	#define WM_GETTEXTLENGTH	14

	sendmsg objinfo(v2,2),WM_GETTEXTLENGTH,0,0
	a = stat + 1 : if(a > 64) : alloc p,a
	p = ""
	sendmsg objinfo(v2,2),WM_GETTEXT,a,varptr(p)

	a = 64
	a.1 = prm.1 - prm
	if(a.1 < a) : a = a.1

	v1 = strmid(p,prm,a)
	alloc p,64

	return


	;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	;load_immdll
	;................................................................................
*load_immdll
	ll_libload immdll,"imm32"
	return


	;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	;imeinit
	;IMEのコンテキストを取得
	;................................................................................
	#deffunc imeinit array v1,int v2

	if(immdll == 0) : gosub *load_immdll

	a = v2
	_is_wnd a : if(stat == 0) : a = objinfo(a,2)
	dllproc "ImmGetContext",a,1,immdll
	v1 = stat,a
	await
	return


	;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	;imefin
	;IMEのコンテキストを開放
	;................................................................................
	#deffunc imefin array v1
	prm = v1(1),v1(0)
	dllproc "ImmReleaseContext",prm,2,immdll
	return


	;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	;imeopen
	;IMEを開く
	;................................................................................
	#deffunc imeopen var v1,int v2
	if(v2) {
		prm = v1,0
		dllproc "ImmSetOpenStatus",prm,2,immdll
	} else {
		dllproc "ImmGetOpenStatus",v1,1,immdll
		if(stat == 0) {
			prm = v1,1
			dllproc "ImmSetOpenStatus",prm,2,immdll
		}
	}
	await
	return


	;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	;imestr
	;IMEに文字列を送る
	;................................................................................
	#deffunc imestr var v1,str v2

	#define	SCS_SETSTR 9
	#define	SCS_CHANGEATTR 18
	#define	SCS_CHANGECLAUSE $24

	a = strlen(v2) : if(a >= 64) : alloc s,a + 1
	s = v2
	getptr p,s

	prm = v1,SCS_SETSTR,0,0,p,a
	dllproc "ImmSetCompositionStringA",prm,6,immdll
	await
	return


	;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	;imesend
	;IMEにWM_IME_NOTIFYを送る
	;................................................................................
	#deffunc imesend var v1,int v2,int v3,int v4

	; 0	候補ウィンドウを開くv3ページ
	; 1	候補ウィンドウを閉じる
	; 2	v3ページのv4番目の候補を選択
	; 3	候補ウィンドウのv4番目のページを表示
	;? 4	?
	; 5	変換を決定、変換実行、戻す、キャンセル(v3:1〜4)
	;? 6	v3番目
	; 7	候補ウィンドウのサイズを変える(v3:0〜31)<-dwValueの値が使われているようだ
	;? 8	ime

	;#define	NI_OPENCANDIDATE		0x10
	;#define	NI_CLOSECANDIDATE		0x11
	;#define	NI_SELECTCANDIDATESTR		0x12
	;#define	NI_CHANGECANDIDATELIST		0x13
	;#define	NI_FINALIZECONVERSIONRESULT	0x14
	;#define	NI_COMPOSITIONSTR		0x15
	;#define	NI_SETCANDIDATE_PAGESTART	0x16
	;#define	NI_SETCANDIDATE_PAGESIZE	0x17
	;;#define	NI_IMEMENUSELECTED		0x18

	;#define	CPS_COMPLETE	1
	;#define	CPS_CONVERT	2
	;#define	CPS_REVERT	3
	;#define	CPS_CANCEL	4

	_v3 = v3
	a = 0,1,2,3,5,7
	_v2 = a(v2)
	if(_v2 == 5) : _v3++
	_v2 += $10
	prm = v1,_v2,_v3,v4
	dllproc "ImmNotifyIME",prm,4,immdll
	await
	return


	;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	;imesetwnd ?
	;................................................................................
	#deffunc imesetwnd var v1,int v2,int v3,int v4,int v5,int v6,int v7,int v8

	; immscw  imeval,  style  x,y,  x0,y0,x1,y1

	;typedef _tagCOMPOSITIONFORM {
	;    DWORD  dwStyle;       
	;    POINT  ptCurrentPos;  
	;    RECT   rcArea;        
	;} COMPOSITIONFORM;

	;style
	;#define	CFS_DEFAULT		0x0
	;#define	CFS_RECT		1
	;#define	CFS_POINT		2
	;#define	CFS_FORCE_POSITION	0x20
	;#define	CFS_CANDIDATEPOS	0x40
	;#define	CFS_EXCLUDE		0x80

	mref v2,1
	a = v2
	a(2) = v3,v4,v5,v6,v7,v8
	getptr p,a
	prm = v1,p
	dllproc "ImmSetCompositionWindow",prm,2,immdll
	await
	return



	;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	;imegetcand ?
	;................................................................................
	;例)
	;	#include "llmod.as"
	;	#include "ime.as"
	;
	;	alloc buf,64*1024 : buf=""
	;	mesbox buf,winx,winy,1
	;	mb_id=0
	;	imeinit ime,mb_id
	;	imeopen ime
	;
	;	imestr  ime,"ｶﾝ"
	;	imesend ime,0
	;	imegetcand ime,tmp,1
	;	if stat=0 : stop
	;	if stat>63 : alloc tmp,stat	;必要なサイズ
	;	imegetcand ime,tmp
	;	objprm mb_id,tmp
	;	alloc tmp,64
	;	imeopen ime,1
	;	stop
	;

	#deffunc imegetcand var v1,var v2,int v3

	prm = v1
	getptr prm.1,a
	dllproc "ImmGetCandidateListCountA",prm,2,immdll
	p = stat
	if(p >= 64) : alloc a,p + 1 : alloc s,p + 1

	prm = v1,0,0,p
	getptr prm.2,a
	dllproc "ImmGetCandidateListA",prm,4,immdll

	s = "" : ss = ""
	repeat a(2)
		p = cnt + 6
		ss = peek(a,a.p)
		s += ss + "\n"
	loop
	alloc a,64

	if(v3) : a = strlen(s) : else : v2 = s : a = 0
	alloc s,64

	return a

	#undef	EM_LINEINDEX
	#undef	EM_LINELENGTH
	#undef	EM_SETSEL

	#undef	EM_GETSEL
	#undef	WM_GETTEXT
	#undef	WM_GETTEXTLENGTH

	#undef	SCS_SETSTR
	#undef	SCS_CHANGEATTR
	#undef	SCS_CHANGECLAUSE


	;module終わり>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	#global

#endif /* __hsp30__ */	;================================================================================
	;モジュール img
	;ver 2.2
	;	イメージ(主にアイコン)関連
	;	llmod3.hspが必要です
	;================================================================================

	; imgモジュール命令一覧
	;
	; get_icon			アイコンの取得
	; draw_icon			アイコンの描画
	; get_fileicon			ファイルに使用されているアイコンの取得
	;
	; 計	4個


	;使い方
	;================================================================================
	; get_icon v1,"s2",n3,n4		アイコンの取得
	;
	;  v1 : 取得したアイコンを入れる数値変数
	;  s2 : アイコンを含むファイル名
	;  n3 : アイコンの番号
	;  n4 : 小さいアイコンを取得するかどうかのフラグ
	;================================================================================
	;
	;<>説明
	; s2に指定したファイルから、n3番目のアイコンを取得します。
	; もしn3番目のアイコンが小さいアイコンをもっているときはn4を1にすると
	; 小さいアイコンの方を取得します。
	; 取得したアイコンはdraw_iconで描画できます。
	; アイコン取得に失敗したときは変数に0が代入されます。
	;
	; n3を-1にすると、s2がもっているアイコンの数がstatに代入されます。
	; n3を-2にすると、s2がもっているアイコン全てを取得します。ただしファイルs2が
	; 16個以上のアイコンを持っているときは、変数v1を
	;	alloc v1,'アイコンの数'×4
	; として拡張しておかないとエラーになります。
	; 

	;================================================================================
	; draw_icon n1,n2,n3,n4		アイコンの描画
	;
	;  n1 : 描画するアイコン(get_iconで取得したもの)
	;  n2 : x座標
	;  n3 : y座標
	;  n4 : redrawしないかどうかのフラグ
	;================================================================================
	;
	;<>説明
	; n1で指定したアイコンを座標(x,y)に描画します。
	; この命令を使うたびにredrawを行います。複数のアイコンを描画するときは効率が悪いので
	; n4を1にして、全てのアイコンを書き終えたらredrawを実行してください。
	;

	;================================================================================
	; get_fileicon v1,"s2",n3		ファイルに使用されているアイコンの取得
	;
	;  v1 : 取得したアイコンを入れる変数
	;  s2 : ファイル名
	;  n3 : 取得するもの
	;================================================================================
	;
	;<>説明
	; s2に指定したファイルに使われるアイコンを取得します。
	;
	;<>n3の値
	; 0	s2のファイルに使われているアイコン
	; 1	s2のファイルに使われている小さいアイコン
	; 2	ツリービューで選択されているときのアイコン(s2がフォルダなどの場合)
	; 4	リストビューで選択されている状態のアイコン
	; 8	アイコンにリンクのマークを付ける
	; $10	s2のファイルに使われるアイコンが含まれているファイル名
	; $20	s2のファイルが表示されるときに使われる名前(s2に"B:\\"などを使ったとき)
	; $40	s2のファイルの種類
	;
	; 0,1,2,4,8は組み合わせて使うことができます。
	;

#ifdef __hsp30__

	;module始め>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	#module "img"


	;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	;get_icon
	;iconの抽出
	;................................................................................
	#deffunc get_icon var v1,str v2,int v3,int v4

	a = strlen(v2) : if(a >= 64) : sdim lcl_s,a + 1
	lcl_s = v2
	getptr p,lcl_s
	prm.0 = p
	prm.1 = v3

	prm.2 = 0 : prm.3 = 0
	if(v3 != -1) {
		getptr p,v1
		if(v4) {	;flagが0でないなら小さいアイコンを取得
			prm.3 = p
		} else {		;flagが0なら大きいアイコンを取得
			prm.2 = p
		}
	}

	dll_getfunc func,"ExtractIconExA",D_SHELL

	;indexを-2にすると全てのアイコンを取る
	if(v3 != -2) {
		prm.4 = 1
	} else {
		a = prm,-1,0,0,0
		getptr a,lcl_s
		ll_callfunc a,5,func
		prm.4 = dllret
		prm.1 = 0
	}

	ll_callfunc prm,5,func
	alloc lcl_s,64
	return dllret


	;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	;draw_icon
	;iconの描画
	;................................................................................
	#deffunc draw_icon int v1,int v2,int v3,int v4

	_v1 = v1
	alloc prm,68
	prm.0 = hdc,v2,v3,v1,0,0,0,0,3
	dllproc "DrawIconEx",prm,9,D_USER
	_v1 = stat
	if(v4 == 0) : redraw
	alloc prm,64

	return _v1

	;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	;get_fileicon
	;ファイルに使用されているアイコンの取得
	;................................................................................
	#deffunc get_fileicon var v1,str v2,int v3

	;#define SHGFI_ICON		0x100

	;#define SHGFI_LARGEICON	0
	;#define SHGFI_SMALLICON	1
	;#define SHGFI_OPENICON		2
	;#define SHGFI_SELECTED		0x10000
	;#define SHGFI_LINKOVERLAY	0x8000
	;#define SHGFI_ICONLOCATION	0x1000
	;#define SHGFI_DISPLAYNAME	0x200
	;#define SHGFI_TYPENAME		0x400

	;#define SHGFI_ATTRIBUTES	0x800
	;#define SHGFI_EXETYPE		0x2000
	;#define SHGFI_SYSICONINDEX	0x4000
	;#define SHGFI_SHELLICONSIZE	4
	;#define SHGFI_PIDL		8
	;#define SHGFI_USEFILEATTRIBUTES	16
	;#define SHGNLI_PIDL		1
	;#define SHGNLI_PREFIXNAME	2

	; 1 2 4      8     $10   $20  $40
	a = 1,2,$10000,$8000,$1000,$200,$400

	_v2 = v2
	_v3 = v3

	if(_v3 < $10) {
		prm = 0
		repeat 5
			if((1 << cnt) & _v3) : prm += a(cnt)
		loop
		_v3 = prm | $100
	} else {
		repeat 3,4
			if((_v3 >> cnt) & 1) : _v3 = cnt : break
		loop
		_v3 = a(_v3)
	}

	#define SIZE_OF_SHFILEINFO	352

	alloc a,SIZE_OF_SHFILEINFO		;SHFILEINFO
	prm.0 = 0,0,0,SIZE_OF_SHFILEINFO,_v3
	getptr prm.0,_v2
	getptr prm.2,a

	dllproc "SHGetFileInfoA",prm,5,D_SHELL

	if(_v3 & $1000) | (_v3 & $200) {
		memcpy v1,a,260,0,12
	} else {
		if(_v3 & $400) {
			memcpy v1,a,80,0,272
		} else {
			v1 = lpeek(a,0)
		}
	}

	alloc a,64
	return



	;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	;create_imglist
	;Image listの作成
	;................................................................................
	#deffunc create_imglist int v1,int v2,int v3,int v4

	prm = v1,v2,v3,v4,0
	dllproc "ImageList_Create",prm,5,D_COMCTL	;return handle of image list
	return

	;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	;destroy_imglist
	;Image listの消去
	;................................................................................
	#deffunc destroy_imglist array v1,int v2

	_v2 = v2
	if(_v2 == 0) : _v2 = 1
	dll_getfunc a,"ImageList_Destroy",D_COMCTL
	repeat _v2
		prm = v1(cnt)
		ll_callfunc prm,1,a
	loop
	return


	;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	;addicon_imglist
	;Image listにアイコンを加える
	;................................................................................
	#deffunc addicon_imglist int v1,int v2

	prm = v1,v2
	dllproc "ImageList_AddIcon",prm,2,D_COMCTL
	return


	;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	;draw_imglist
	;Image listの描画
	;................................................................................
	#deffunc draw_imglist int v1,int v2,int v3,int v4

	prm = v1,v2,hdc,v3,v4,0
	dllproc "ImageList_Draw",prm,6,D_COMCTL
	return


	;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	;getinfo_imglist
	;Image listの情報取得
	;................................................................................
	#deffunc getinfo_imglist var v1,int v2,int v3,int v4

	_v4 = v4
	prm = v2,v3
	getptr prm.2,a		;a:IMAGEINFO

	dllproc "ImageList_GetImageInfo",prm,3,D_COMCTL

	if(_v4) : _v4-- : v1 = a(_v4) : else : v1 = a(6),a(7)
	return


	#undef SIZE_OF_SHFILEINFO

	;module終わり>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	#global

#endif /* __hsp30__ */	;================================================================================
	;モジュール input
	;ver 2.2
	;	インプット
	;	llmod3.hspが必要です
	;================================================================================

	; inputモジュール命令一覧
	;
	; keybd_event			キーボード操作
	; mouse_event			マウス操作
	;
	; 計	2個


	;使い方
	;================================================================================
	; keybd_event n1,n2,n3		キーボード操作
	;
	;  n1 : キーコード
	;  n2 : キーを放すフラグ
	;  n3 : オプション
	;================================================================================
	;
	;<>説明
	; キーボード操作を行います。
	; n1に押したいキーのキーコードを指定します。
	; n2を0にしてこの命令を実行するとn1を前回実行したときと同じキーコード、
	; n2を1にしてもう一度この命令を実行しないとキーを放したことになりません。
	; n2を-1にすると押して放したことになります。
	; n3のオプションはスクリーンショットキーを押すときに使用します。n3を0に
	; するとフルスクリーン、1にするとアクティブなウィンドウがクリップボードに
	; コピーされます。
	;
	; keybd_eventは他のプログラムのウィンドウがアクティブな場合でも実行されます。
	;
	;
	;<>キーコード
	; キーコードはgetkeyで使用するものと同じです。
	; ほかにも以下のようなものがあります。
	;n1の値
	; 44		スクリーンショット
	; 45		INS
	; 46		DEL
	; 106		テンキーの'*'
	; 107		テンキーの'+'
	; 108		テンキーの','
	; 109		テンキーの'-'
	; 110		テンキーの'.'
	; 111		テンキーの'/'
	;
	;<>例
	;	#include "llmod.as"
	;	#include "input.as"
	;
	;	exec "notepad"
	;	s="ABCDEFG" : strlen L,s
	;
	;	repeat L
	;		peek c,s,cnt
	;		keybd_event c,-1
	;	loop
	;
	;	keybd_event 18,-1	;ALT
	;	keybd_event 'F',-1	;ﾌｧｲﾙ(F)
	;	keybd_event 'O',-1	;開く(O)
	;
	;	keybd_event 'N',-1	;セーブ確認ダイアログのいいえ(N)
	;
	;	s="INPUTnAS" : strlen L,s	;'n'はキーコードで'.'(110)を表す
	;
	;	;ここのコメントを外すとSHIFTを押したことになり大文字になります
	;	;keybd_event 16
	;
	;	repeat L
	;		peek c,s,cnt
	;		keybd_event c,-1
	;	loop
	;
	;	;上のコメントを外したときはここのコメントも外してください
	;	;keybd_event 16,1
	;
	;	keybd_event 13,-1	;ENTER
	;
	;	stop
	;


	;================================================================================
	; mouse_event n1,n2,n3		マウス操作
	;
	;  n1 : 操作タイプ
	;  n2 : 水平方向の移動量
	;  n3 : 垂直方向の移動量
	;================================================================================
	;
	;<>説明
	; マウス操作を行います。
	; n1に指定するタイプでマウス操作を行うことができます。
	; 水平方向の移動量は、画面左から右へ移動させるときが正、その逆が負
	; 垂直方向の移動量は、画面上から下へ移動させるときが正、その逆が負
	; であることに注意してください。
	;
	; mouse_eventはHSPのプログラムがアクティブでないときでもマウス操作に影響します。
	;
	;<>操作タイプ
	; n1の値は以下のものを組み合わせて使用することができます。
	;
	; n1の値
	; $1	マウス移動
	; $2	左のボタンを押す
	; $4	左のボタンを放す
	; $8	右のボタンを押す
	; $10	右のボタンを放す
	; $20	中のボタンを押す
	; $40	中のボタンを放す
	;
	;<>例
	;	#include "llmod.as"
	;	#include "input.as"
	;
	;*lp
	;	movx=0 : movy=0
	;	getkey k,37 : if k : movx-	;←キー
	;	getkey k,38 : if k : movy-	;↑キー
	;	getkey k,39 : if k : movx+	;→キー
	;	getkey k,40 : if k : movy+	;↓キー
	;
	;	;SHIFTが押されたら左ボタンを押す
	;	getkey kSHIFT,16 : if kSHIFT : Lbtn=$2 : else Lbtn=0
	;	mouse_event $1+Lbtn, movx, movy
	;
	;	;SHIFTを押すとマウスの左ボタンを押したことになりkが1になる
	;	getkey k,1 : if k : pset mousex,mousey
	;
	;	;SHIFTが押されてたら左ボタンを放す
	;	if kSHIFT : mouse_event $4
	;
	;	await 1
	;	goto lp
	;

#ifdef __hsp30__

	;module始め>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	#module "_input"


	;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	;keybd_event
	;キーボード操作
	;................................................................................
	#deffunc keybd_event int v1,int v2,int v3
	if(pkeybd_event == 0) {
		dll_getfunc pkeybd_event,"keybd_event",D_USER
		if(pkeybd_event == 0) : return
	}

	;#define KEYEVENTF_EXTENDEDKEY	1
	;#define KEYEVENTF_KEYUP	2

	prm = v1,v3,v2
	prm.3 = 0
	prm.4 = 0

	;prm.2が正ならKEYEVENTF_KEYUPにする
	if(prm.2) {
		if(prm.2 > 0) : prm.2 = 2 : else : prm.2 = 0 : prm.4 = 1
	}

	ll_callfunc prm,4,pkeybd_event
	if(prm.4) : prm.2 = 2 : ll_callfunc prm,4,pkeybd_event
	return


	;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	;mouse_event
	;マウス操作
	;................................................................................
	#deffunc mouse_event int v1,int v2,int v3,int v4
	if(pGetMessageExtraInfo == 0) {
		dll_getfunc pGetMessageExtraInfo,"GetMessageExtraInfo",D_USER
		dll_getfunc pmouse_event,"mouse_event",D_USER
		if(pGetMessageExtraInfo == 0)|(pmouse_event == 0) : return
	}

	;#define MOUSEEVENTF_MOVE	1
	;#define MOUSEEVENTF_LEFTDOWN	2
	;#define MOUSEEVENTF_LEFTUP	4
	;#define MOUSEEVENTF_RIGHTDOWN	8
	;#define MOUSEEVENTF_RIGHTUP	16
	;#define MOUSEEVENTF_MIDDLEDOWN	32
	;#define MOUSEEVENTF_MIDDLEUP	64
	;#define MOUSEEVENTF_WHEEL	0x0800 /* wheel button rolled   NT only*/
	;#define MOUSEEVENTF_ABSOLUTE	0x8000 /* absolute move */

	prm.0 = v1,v2,v3,v4

	ll_callfnv pGetMessageExtraInfo
	prm.4 = dllret

	ll_callfunc prm,5,pmouse_event
	return

	;module終わり>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	#global

#endif /* __hsp30__ */	;================================================================================
	;モジュール listview
	;ver 2.2
	;	リストビュー
	;	llmod3.hspが必要です
	;================================================================================

	; listviewモジュール命令一覧
	;
	; listview			リストビューの作成
	; sel_listview		操作するリストビューを選択
	; listadd			リストビューにアイテムを追加
	; listdel			リストビューのアイテムを消去
	; listaddcl			リストビューに欄を追加
	; listdelcl			欄を消去
	; listsel			リストビューのアイテムを選択
	; listget			リストビューのアイテムを取得
	; listmax			リストビューのアイテムの数を取得
	; listicon			リストビューのアイコンを設定
	; listhit			マウスの下にあるアイテムを取得
	;
	; 計	11個


	;使い方
	;================================================================================
	; listview n1,n2,n3		リストビューの作成
	;
	;  n1 : 幅
	;  n2 : 高さ
	;  n3 : スタイル
	;================================================================================
	;
	;<>説明
	; リストビューを作成します。
	; リストビューは、Explorerの右側にある様なオブジェクトです。
	; 幅や高さを省略するとobjsizeで設定した幅、高さが使われます。
	;
	;<>この命令を呼び出した後のstatの値
	; リストビューのID
	;
	;<>スタイル
	; スタイルは以下の値を足して、複数のスタイルを指定することができます。
	; 0	大きいアイコン表示
	; 1	詳細表示
	; 2	小さいアイコン表示
	; 3	リスト表示
	; 4	複数選択できないようにする
	; 8	listviewが選択されていないときでも、選択されているアイテムの色を変える
	; $10	昇順でアイテムをソートする
	; $20	降順でアイテムをソートする
	; $40	セットしたイメージリストをlistview消去時に消去しない
	;	(複数のlistviewで同じイメージを使う場合に指定する)
	; $80	アイコン表示のとき、アイテムのテキストを折り返さない
	;	(デフォルトではテキストは長いと折り返される)
	; $100	?
	; $800	?
	; $2000	スクロールバーがつかない
	; $4000	欄の名前を表示する部分を付けない
	;
	; 以下のスタイルはcomctl32.dllのバージョンによっては有効にならない場合があります。
	; $10000	リスト表示時に罫線を付ける
	; $40000	チェックボックスを付ける
	; $100000	欄の名前を表示する所をドラッグ&ドロップできる
	; $200000	リスト表示時にアイテムが選択されたときサブアイテムも色を変える
	; $400000	アイテムの上にマウスポインタが来たときカーソルを指の形にする
	; $800000	アイテムクリックされたときカーソルを指の形にする
	; $1000000	スクロールバーを平らなスタイルに変える
	; $8000000	$400000,$800000のスタイルを指定したとき、アイテムの上に
	;		マウスポインタが来ると下線がつく
	; $10000000	$400000,$800000のスタイルを指定したとき、下線がつく
	;
	; ※チェックボックスを付けたときのスタイルで、アイテムがチェックされているかを
	; 調べるときは以下のようにしてください
	;
	;	;list_id : listviewのID
	;	;idx : アイテムのインデックス
	;	prm=list_id,4140,idx,61440
	;	sendmsg prm
	;	chk=stat>>12-1
	;	if chk : dialog ""+idx+"番目のアイテムはチェックされています"
	;
	; リストビューのスタイルは作成後でも以下のようにして変更することができます。
	;	;lstはリストビューのID、styleは新しく設定するスタイル
	;	prm=lst,-16,style|$50000000
	;	setwndlong prm
	;
	; スタイルを省略するとここで設定したデフォルトスタイルが使用されます。

	#define DEFAULT_LISTVIEW_STYLE	0

	;================================================================================
	; sel_listview n1		操作するリストビューを選択
	;
	;  n1 : リストビューのID
	;================================================================================
	;
	;<>説明
	; この命令使用後はn1で指定したリストビューに対して各操作を行います。
	; リストビュー新規に作成すると、自動的にそのリストビューが
	; 各操作の対象になります。
	; 複数のリストビューを作成したときは、この命令で操作するリストビュー
	; を選択してください。
	;

	;================================================================================
	; listadd n1,"s2",n3,n4,n5,n6		リストビューにアイテムを追加
	;
	;  n1 : アイテムの位置
	;  s2 : アイテムのテキスト
	;  n3 : 欄の番号
	;  n4 : アイコン番号
	;  n5 : アイテムの状態
	;  n6 : アイテムに持たせる数値
	;================================================================================
	;
	;<>説明
	; リストビューのn1番目の位置にアイテムをつけ加えます。
	; n3には何番目の欄に追加するかを指定するインデックス、
	; n4にはアイコン番号、n5にはアイテムの状態を入れます。
	;
	; 欄への追加は、listaddclで欄を追加しているときのみ有効です。
	; またアイコン番号は、listiconでアイコンを追加している場合のみ有効になり、
	; 欄へ追加するときはアイコン番号は無視されます。
	;
	; n6に値を入れてアイテムにその数値を持たせることができます。
	;
	;<>この命令を呼び出した後のstatの値
	; 追加したアイテムのインデックス(-1ならエラー)
	;
	;<>アイテムの状態
	; listviewのアイテムの状態には、以下のものがあります。
	;
	; 状態				数値
	; フォーカスがあっている	1
	; 選択されている		2
	; 切り取られた状態		4
	; ハイライト			8
	;
	;※ハイライトはlistselで選択状態を解除しないと元に戻りません。
	;
	;例)
	;	;3番目にアイテム追加、0番目の欄、アイコン番号を15
	;	listadd 3,"new item",0,15
	;
	;	;0番目の1つめの欄にアイテムを追加、
	;	;フォーカスを合わせる
	;	listadd 0,"new sub item",1,0,1
	;

	;================================================================================
	; listdel n1			リストビューのアイテムを消去
	;
	;  n1 : アイテムのインデックス
	;================================================================================
	;
	;<>説明
	; n1番目のアイテムを消去します。
	; n1を-1にすると全てのアイテムを消去します。
	;

	;================================================================================
	; listaddcl n1,"s2",n3,n4		リストビューに欄を追加
	;
	;  n1 : 欄のインデックス
	;  s2 : 欄の名前
	;  n3 : 欄の幅
	;  n4 : 欄の名前の位置
	;================================================================================
	;
	;<>説明
	; 欄を追加します。
	; n3を省略したときのデフォルト値は100です。
	;<>n4の値
	; 0	左寄せ
	; 1	右寄せ
	; 2	中央
	;

	;================================================================================
	; listdelcl n1			欄を消去
	;
	;  n1 : 欄のインデックス
	;================================================================================
	;
	;<>説明
	; n1番目の欄を消去します。
	;

	;================================================================================
	; listsel n1,n2			リストビューのアイテムを選択
	;
	;  n1 : アイテムのインデックス
	;  n2 : 選択状態のタイプ
	;================================================================================
	;
	;<>説明
	; n1番目のアイテムを選択します。
	; n2を-1にすると選択状態を解除します。
	; n2を省略するとフォーカスをあわせて、選択状態にします。
	;
	; 状態				数値
	; フォーカスがあっている	1
	; 選択されている		2
	; 切り取られた状態		4
	; ハイライト			8
	;

	;================================================================================
	; listget v1,n2,n3,n4		リストビューのアイテムを取得
	;
	;  v1 : 取得したものを入れる変数
	;  n2 : アイテムのインデックス
	;  n3 : 取得するもの
	;  n4 : 取得するアイテムの状態
	;================================================================================
	;
	;<>説明
	; 主にアイテムのインデックスを取得します。
	; n3で以下の値を代入すると取得するものが変わってきます。
	;
	;<>n3の値					n4の値
	; 1	n2の上のアイテムのindexを取得		0 or 取得するアイテムの状態
	; 2	n2の下のアイテムのindexを取得		0 or 取得するアイテムの状態
	; 3	n2の左のアイテムのindexを取得		0 or 取得するアイテムの状態
	; 4	n2の右のアイテムのindexを取得		0 or 取得するアイテムの状態
	; 5	n2のテキスト取得			変数のサイズ or -1
	; 6	n2のアイテムに持たせた値を取得		0 or 1
	;
	; n3を5にしたときはstatにアイテムに持たせた値が入ります。
	; n3を5にしたときn4を-1にすると、v1に入っている文字列を使ってアイテムのテキスト
	; を再設定できます。
	; n3を6にしたときn4を1にすると、v1に入っている値を使ってアイテムに持たせた値を
	; 再設定できます。
	;
	; n4を以下の値にするとn4で指定した状態のアイテムを(n2+1)番目のアイテムから
	; n3で指定した方向に向かって検索します。
	; (n3を0にすると方向は指定しません)
	; n4の状態のアイテムが見つかればv1にアイテムのインデックスが代入されます。
	; 見つからなかった場合はv1に-1が代入されます。
	; n2を-1にすると先頭のアイテムから検索します。
	;
	; n4の値
	; 0		状態は指定しない
	; 1		フォーカスがあっている
	; 2		選択されている
	; 4		切り取られた状態
	; 8		ハイライト
	;
	;<>例
	;	#include "llmod.as"
	;	#include "listview.as"
	;
	;	listview winx-6,winy/2,1
	;	lv=stat
	;	listaddcl 0,"name"
	;	repeat 30 : listadd cnt,"アイテム No."+cnt : loop
	;
	;	button "check",*check
	;	alloc bf,1024*32 : bf=""
	;	mesbox bf,winx-6,winy-csry-26
	;	_objsel lv
	;	stop
	;
	;*check
	;	bf="" : notesel bf : start=-1	;先頭から検索
	;	repeat -1
	;		listget chk,start,0,2	;選択状態のアイテムを探す
	;		if chk=-1 : break	;見つからない場合-1が代入される
	;		listget s,chk,5		;見つかったアイテムのテキストを取得
	;		noteadd s+"は選択されています"
	;		start=chk
	;	loop
	;	objprm 1,bf
	;	stop
	;

	;================================================================================
	; listmax v1,n2			リストビューのアイテムの数を取得
	;
	;  v1 : リストビュー内のアイテムの数を入れる数値変数
	;  n2 : フラグ
	;================================================================================
	;
	;<>説明
	; リストビュー内のアイテムの数を取得します。
	; n2を1にするとリストビュー内に完全に見えているアイテムの数を取得します。
	;

	;================================================================================
	; listicon v1,n2,n3		リストビューのアイコンを設定
	;
	;  v1 : アイコンが入った数値変数(get_iconで取得したもの)
	;  n2 : アイコンの数
	;  n3 : セットするアイコンの大小
	;================================================================================
	;
	;<>説明
	; リストビューのアイテムのアイコンを設定します。
	; アイコンをセットするには、imgモジュールが必要です。
	;
	;※必ず、listview.asより先にimg.asをインクルードしてください。
	;
	; n3を0にすると大きいアイコンを表示するときのアイコンをセットし、
	; n3を1にすると小さいアイコンを表示するときのアイコンをセットします。
	;
	;<>例
	;	#include "llmod.as"
	;	#include "img.as"	;listiconを使う時は必要(listview.asより前に)
	;	#include "listview.as"
	;	;まずリストビューを作成
	;	listview 300,200,1|2|4|$20
	;
	;	;shell32.dllの3番目と4番目のアイコン(小さい方)を使う
	;	;(*get_iconについてはimg.asの説明を読んでください。)
	;	filename="shell32.dll"
	;	get_icon icons.0,filename,3,1
	;	get_icon icons.1,filename,4,1
	;
	;	;小さいアイコンを2つセットする
	;	listicon icons,2,1
	;	img_id=stat	;セットしたアイコンについての情報が入った特別な値
	;
	;	;アイテムを追加
	;	;0行目の0番目の欄にアイコン番号1のアイコンを付けたアイテムを追加
	;	listadd 0,"folder 1",0,1
	;	itm1=stat
	;		;
	;		;
	;
	;<>この命令を呼び出した後のstatの値
	; セットしたアイコンについての情報が入った特別な値が返されます。
	; (イメージリストと呼ばれるものです。)
	;
	; listviewはtreeboxと違って、_clrobjなどでlistviewが消去されると、
	; アイコンをセットして消費したメモリを自動的に開放するので、
	;	destroy_imglist 'listicon実行後にstatに代入された値'
	; を実行する必要はありません。
	; ただし、listviewのスタイルに'セットしたイメージリストをlistview消去時に消去しない'
	; を指定している場合は、メモリは自動的に開放されません。このときは、
	;	destroy_imglist 'listicon実行後にstatに代入された値'
	; を実行してください。
	;

	;================================================================================
	; listhit			マウスの下にあるアイテムを取得
	;================================================================================
	;
	;<>説明
	; マウスの下にあるアイテムのインデックスを取得します。
	;
	;<>この命令を呼び出した後のstatの値
	; マウスの下にあるアイテムのインデックスが代入されます。
	; マウスの下にアイテムが無ければ-1が代入されます。
	;

#ifdef __hsp30__

	;module始め>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	#module "_listview"


	;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	;listview
	;List-Viewの作成
	;................................................................................
	#deffunc listview int v1,int v2,int v3

	_v3 = v3
	if(_v3 == 0) : _v3 = DEFAULT_LISTVIEW_STYLE

	;#define LVS_NOSORTHEADER	$8000
	a = _v3 >> 16			;ExStyle 下位16ビットは標準のスタイル
	_v3 = _v3 & $ffff | $8000		;ソートしないので常にLVS_NOSORTHEADERを加える

	;#define WS_CHILD		0x40000000
	;#define WS_VISIBLE		0x10000000
	;#define WS_CLIPCHILDREN	0x2000000

	_v3 = _v3 | $52000000
	alloc m,64		;リセット
	m = ginfo@hsp(22),ginfo@hsp(23),v1,v2,_v3,0,$200
	_makewnd m,"SysListView32"
	handle_of_list = m

	;#define LVM_FIRST	0x1000
	;#define LVM_SETEXTENDEDLISTVIEWSTYLE (LVM_FIRST + 54)
	if(a) : sendmsg objinfo(handle_of_list,2),$1036,0,a

	return handle_of_list


	;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	;sel_listview
	;
	;................................................................................
	#deffunc sel_listview int v1
	stt = handle_of_list
	handle_of_list = v1
	return stt


	;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	;listadd
	;List-Viewにアイテムを加える
	;................................................................................
	#deffunc listadd int v1,str v2,int v3,int v4,int v5,int v6

	;typedef struct _LV_ITEM {  
	;    UINT   mask; 
	;    int    iItem; 
	;    int    iSubItem; 
	;    UINT   state; 
	;    UINT   stateMask; 
	;    LPTSTR  pszText; 
	;    int    cchTextMax; 
	;    int    iImage;       // index of the list view item's icon 
	;    LPARAM lParam;       // 32-bit value to associate with item 
	;} LV_ITEM; 

	;LV_ITEM mask
	;#define LVIF_TEXT	1
	;#define LVIF_IMAGE	2
	;#define LVIF_PARAM	4
	;#define LVIF_STATE	8
	;#define LVIF_DI_SETITEM	4096

;	alloc lvi,64
;	lvi=9		;mask
;	lvi.1=v1	;iItem
;	lvi.2=v3	;iSubItem
;	lvi.3=v5	;state
;	lvi.4=v7	;stateMask
;	strlen m,v2 : if m>=64 : alloc lcl_s,m+1
;	lcl_s=v2
;	getptr p,lcl_s
;	lvi.5=p		;pszText

	_v2 = v2
	dim lvi,9
	getptr p,_v2
	lvi = 9,v1,v3,v5,0,p

	;#define LVIS_FOCUSED		1
	;#define LVIS_SELECTED		2
	;#define LVIS_CUT		4
	;#define LVIS_DROPHILITED	8
	;#define LVIS_OVERLAYMASK	3840
	;#define LVIS_STATEIMAGEMASK	61440

	;#define LVM_SETITEMA		4102
	if(v3) : m = 4102 : else {
		;サブアイテム追加じゃないとき

;		lvi=lvi | 2			;image mask
;		lvi.7=v4			;iImage
;		lvi=lvi | 4			;param mask
;		lvi.8=v6			;lParam
		lvi += 6
		lvi.7 = v4,v6
		;#define LVM_INSERTITEMA	4103
		m = 4103
	}

	getptr p,lvi

	sendmsg objinfo(handle_of_list,2),m,0,p
	return


	;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	;listdel
	;List-Viewのitemを消去する
	;................................................................................
	#deffunc listdel int v1

	;#define LVM_DELETEITEM		4104
	;#define LVM_DELETEALLITEMS	4105

	prm = 4104
	if(v1 == -1) : prm++		;index = -1で全て消去
	sendmsg objinfo(handle_of_list,2),prm,v1,0
	return


	;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	;listaddcl
	;List-Viewに欄を加える
	;................................................................................
	#deffunc listaddcl int v1,str v2,int v3,int v4

	;#define LVCF_FMT	1
	;#define LVCF_WIDTH	2
	;#define LVCF_TEXT	4
	;#define LVCF_SUBITEM	8

	;#define LVCFMT_LEFT	0
	;#define LVCFMT_RIGHT	1
	;#define LVCFMT_CENTER	2

	;typedef struct _LV_COLUMN {  
	;    UINT mask; 
	;    int fmt; 
	;    int cx; 
	;    LPTSTR pszText; 
	;    int cchTextMax; 
	;    int iSubItem; 
	;} LV_COLUMN; 

;	lcl_s=v2
;	a=1|2|4|8
;	a=15
;	a.1=v4
;	a.5=v1
;	if v3 : a.2=v3 : else a.2=100
;	getptr a.3, lcl_s

	_v2 = v2
	_v3 = v3
	if(_v3 == 0) : _v3 = 100
	getptr p,_v2
	a = 15,v4,_v3,p,0,v1

	;#define LVM_INSERTCOLUMNA	4123
	getptr p,a
	sendmsg objinfo(handle_of_list,2),4123,a.5,p
	return


	;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	;listdelcl
	;List-Viewの欄を消去する
	;................................................................................
	#deffunc listdelcl int v1

;欄は一度に全て消去しない
;	if v1=-1 {	;index=-1で全て消去
;		;#define LVM_GETCOLUMNA	4121
;		a=1
;		getptr p,a
;		prm=handle_of_list,4121,0,p
;		repeat -1
;			prm.2=cnt
;			sendmsg prm
;			if stat=0 : m=cnt : break
;		loop
;		v1=0
;	} else m=0

	;#define LVM_DELETECOLUMN	4124
	sendmsg objinfo(handle_of_list,2),4124,v1,0
	return

	;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	;listsel
	;List-Viewのitemを選択する
	;................................................................................
	#deffunc listsel int v1,int v2,int v3

	;#define LVIS_FOCUSED		1
	;#define LVIS_SELECTED		2
	;#define LVIS_CUT		4
	;#define LVIS_DROPHILITED	8
	;#define LVIS_OVERLAYMASK	3840
	;#define LVIS_STATEIMAGEMASK	61440

	_v2 = v2
	if(_v2 == 0) : _v2 = 3 : else : if(_v2 == -1) : _v2 = 0

	;LV_ITEM mask
	;#define LVIF_TEXT	1
	;#define LVIF_IMAGE	2
	;#define LVIF_PARAM	4
	;#define LVIF_STATE	8
	;#define LVIF_DI_SETITEM	4096

;	lvi=8		;mask
;	lvi.1=v1	;iItem
;	lvi.2=0
;	lvi.3=v2	;state
;	lvi.4=-1	;stateMask
	lvi = 8,v1,0,_v2,-1

;	if v3 : lvi=lvi|2

	getptr p,lvi
	;#define LVM_SETITEMA		4102
	sendmsg objinfo(handle_of_list,2),4102,0,p
	return


	;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	;listmax
	;List-View内にあるitemの数を調べる
	;................................................................................
	#deffunc listmax var v1,int v2

	;#define LVM_GETITEMCOUNT	4100
	;#define LVM_GETCOUNTPERPAGE	4136
	if(v2) : m = 4136 : else : m = 4100
	sendmsg objinfo(handle_of_list,2),m,0,0
	v1 = stat
	return


	;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	;listget
	;itemの取得
	;................................................................................
	#deffunc listget var v1,int v2,int v3,int v4,int v5

	;v5はlistgetの説明には書いていない。v5に1以上の値を入れると
	;v5番目の欄のテキストの設定、再設定ができる。

	;				v3(flag)
	;#define LVNI_ALL	0	0	x
	;#define LVNI_ABOVE	$100	1	上のアイテムのindexを取得
	;#define LVNI_BELOW	$200	2	下のアイテムのindexを取得
	;#define LVNI_TOLEFT	$400	3	左のアイテムのindexを取得
	;#define LVNI_TORIGHT	$800	4	右のアイテムのindexを取得
	;x				5	テキスト取得

	;				v3
	;#define LVNI_FOCUSED	1	1
	;#define LVNI_SELECTED	2	2
	;#define LVNI_CUT	4	4
	;#define LVNI_DROPHILITED 8	8

	_v4 = v4
	dim lvi,9
	if(v3 >= 5) {
		getptr p,lvi
		if(v3 == 5) {
			lvi = 5,v2,v5		;mask, iItem, iSubItem
			getptr lvi.5,v1		;pszText
			;バッファのサイズを省略したときの大きさ
			if(_v4 == 0) : _v4 = 64
			lvi.6 = _v4		;cchTextMax

			;#define LVM_GETITEMA	4101
			;#define LVM_SETITEMA	4102
			m = 4101
			if(_v4 < 0) : lvi = 1 : m++	;再設定
			sendmsg objinfo(handle_of_list,2),m,0,p
			stt = lvi.8	;lParam
		} else {
			lvi = 4,v2		;mask, iItem
			m = 4101
			if(_v4) : lvi.8 = v1 : m++	;再設定
			sendmsg objinfo(handle_of_list,2),m,0,p
			v1 = lvi.8	;lParam
			stt = 0
		}
	}else{
		a = 0,$100,$200,$400,$800
		;#define LVM_GETNEXTITEM	4108
		sendmsg objinfo(handle_of_list,2),4108,v2,a.v3 + _v4
		v1 = stat
		stt = 0
	}
	return stt


	;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	;listimglist
	;List-Viewのitemのイメージリストをセット
	;................................................................................
	#deffunc listimglist int v1,int v2

	;#define LVSIL_NORMAL	0
	;#define LVSIL_SMALL	1
	;#define LVSIL_STATE	2

	;#define LVM_SETIMAGELIST	4099
	sendmsg objinfo(handle_of_list,2),4099,v2,v1
	return


	;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	;listicon
	;List-Viewのitemのアイコンをセット
	;img.hspが必要
	;................................................................................
	#deffunc listicon array v1,int v2,int v3

	_v3 = v3
	if(_v3) : _v3 = 16 : m = 1 : else : _v3 = 32 : m = 0
	create_imglist _v3,_v3,1 | 4,v2
	a = stat
	if(a == 0) : return 0

	repeat v2
		addicon_imglist a,v1(cnt)
	loop

	listimglist a,m

	return a


	;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	;listhit
	;List-View
	;................................................................................
	#deffunc listhit int v1

	m = ginfo(0),ginfo(1)
	getptr p,m
	prm = objinfo(handle_of_list,2),p
	dllproc "ScreenToClient",prm,2,D_USER

	;#define LVHT_NOWHERE		1
	;#define LVHT_ONITEMICON	2
	;#define LVHT_ONITEMLABEL	4
	;#define LVHT_ABOVE		8
	;#define LVHT_ONITEMSTATEICON	8
	;#define LVHT_BELOW		16
	;#define LVHT_TORIGHT		32
	;#define LVHT_TOLEFT		64
	;#define LVHT_ONITEM	(LVHT_ONITEMICON|LVHT_ONITEMLABEL|LVHT_ONITEMSTATEICON)
	;2+4+8=14

	if(v1) : m.2 = v1 : else : m.2 = 14
	m.3 = 0

	;#define LVM_HITTEST	4114
	sendmsg objinfo(handle_of_list,2),4114,0,p
	return

	;module終わり>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	#global

#endif /* __hsp30__ */	;================================================================================
	;モジュール llmod3.hsp
	;ver 1.0.4
	;================================================================================


	;使い方
	;================================================================================
	; getptr v1,v2
	;
	;  v1 : ポインタを入れる変数
	;  v2 : ポインタを取得する変数
	;================================================================================
	;
	;<>説明
	; v2に指定した変数のポインタをv1に代入します。
	;

	;================================================================================
	; dllproc "s1",v2,n3,n4
	;
	;  s1 : 関数名
	;  v2 : 関数に渡す引数が入った数値変数
	;  n3 : 引数の数
	;  n4 : ll_libloadでロードしたdllのハンドル
	;================================================================================
	;
	;<>説明
	; n4に指定したdll内のs1の関数を使用します。
	; 関数の返り値はグローバル変数dllretに代入されます。
	; llmod内では主用なdllがロードされていて、そのdllを使用する場合は
	; 以下の数値を使って関数を使用できます。
	;	DLL名
	;	kernel32.dll	0 (D_KERNEL)
	;	user32.dll	1 (D_USER)
	;	shell32.dll	2 (D_SHELL)
	;	comctl32.dll	3 (D_COMCTL)
	;	comdlg.dll	4 (D_COMDLG)
	;	gdi32.dll	5 (D_GDI)
	;
	;<>例
	;(1)
	;	ll_libload dll,"user32"		;user32.dllをロード
	;	s="test"
	;	getptr p,s
	;	prm=0,p,p,0
	;	dllproc "MessageBoxA",prm,4,dll
	;	mes dllret
	;	ll_libfree dll
	;
	;(2)
	;	s="test2"
	;	getptr p,s
	;	prm=0,p,p,0
	;	dllproc "MessageBoxA",prm,4,D_USER
	;	mes dllret
	;

#ifdef __hsp30__

#ifndef __llmod3__
#define __llmod3__

;HSP3対応用
#uselib "kernel32.dll"
#func global LoadLibrary "LoadLibraryA" str
#func global GetProcAddress "GetProcAddress" int,sptr
#func global FreeLibrary "FreeLibrary" int
;loadlib.dll用
#func global lstrlen "lstrlenA" sptr


;dllproc用
#define global D_KERNEL		0
#define global D_USER		1
#define global D_SHELL		2
#define global D_COMCTL		3
#define global D_COMDLG		4
#define global D_GDI		5


	;グローバル変数
	dllret = 0


;loadlib.dll互換マクロ
#define global ll_libload(%1,%2) LoadLibrary %2 : %1 = stat
#define global ll_callfunc(%1,%2,%3) dllret = callfunc(%1,%3,%2)
#define global ll_callfnv(%1) dllret = callfunc(prm@llmod3,%1,0)
#define global ll_getproc(%1,%2,%3) GetProcAddress %3,%2 : %1 = stat
#define global ll_getptr(%1) dllret = varptr(%1)
#define global ll_libfree(%1) FreeLibrary %1
#define global ll_peek(%1,%2,%3) dupptr lcl_cl@llmod3,%2,%3,vartype(%1) : memcpy %1,lcl_cl@llmod3,%3
#define global ll_peek1(%1,%2) dupptr lcl_cl@llmod3,%2,1 : %1 = peek(lcl_cl@llmod3,0)
#define global ll_peek2(%1,%2) dupptr lcl_cl@llmod3,%2,2 : %1 = wpeek(lcl_cl@llmod3,0)
#define global ll_peek4(%1,%2) dupptr lcl_cl@llmod3,%2,4 : %1 = lpeek(lcl_cl@llmod3,0)
#define global ll_poke(%1,%2,%3) lstrlen %2 : dupptr lcl_cl@llmod3,%2,stat : memcpy lcl_cl@llmod3,%1,%3
#define global ll_poke1(%1,%2) dupptr lcl_cl@llmod3,%2,1 : poke lcl_cl@llmod3,0,%1
#define global ll_poke2(%1,%2) dupptr lcl_cl@llmod3,%2,2 : wpoke lcl_cl@llmod3,0,%1
#define global ll_poke4(%1,%2) dupptr lcl_cl@llmod3,%2,4 : lpoke lcl_cl@llmod3,0,%1

;llmod互換マクロ
#define global getptr(%1,%2) %1 = varptr(%2)
#define global _get_instance(%1) %1 = hinstance
#define global _cls(%1=0) cls %1
#define global _clrobj(%1) clrobj %1
#define global _objsel(%1) objsel %1


;module初め>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#module "llmod3"


;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
;	dll_getfunc
;................................................................................

#deffunc dll_getfunc var _v1,str _v2,int _v3
	if(_v3 & 0xffffff00) {
		lcl_hinst = _v3
	} else {
		lcl_hinst = mjrdll(_v3)
	}
	GetProcAddress lcl_hinst,_v2
	_v1 = stat
	if(_v1 == 0) {
		dialog "can not find '"+_v2+"'\ndll="+_v3
	}
return


;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
;	getptr
;	getptr p,var
;	変数varのポインタをpに代入
;................................................................................

;#deffunc getptr var _v1,var _v2
;	_v1 = varptr(_v2)
;return


;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
;	_init_llmod
;	よく使うDLLをロードしておく
;	(LoadLibraryでloadしたDLLはHSP終了時に自動的に開放される)
;................................................................................

#deffunc _init_llmod

	if(mjrdll) {
		return
	}

	; loadlibマクロ用クローン変数
	lcl_cl = 0

	sdim lcl_s,64,16
	lcl_s(D_KERNEL)	= "kernel32"
	lcl_s(D_USER)	= "user32"
	lcl_s(D_SHELL)	= "shell32"
	lcl_s(D_COMCTL)	= "comctl32"
	lcl_s(D_COMDLG)	= "comdlg32"
	lcl_s(D_GDI)	= "gdi32"

	repeat 6
		LoadLibrary lcl_s(cnt)
		mjrdll(cnt) = stat
	loop

#define F_GetActiveWindow	0

	lcl_s = "GetActiveWindow"
	repeat 1
		GetProcAddress mjrdll(D_USER),lcl_s.cnt
		mjrfunc.cnt = stat
	loop

	alloc lcl_s,64

return


;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
;	dllproc
;................................................................................

#deffunc dllproc str funcname,array prms,int prm_n,int dll_no
	if(dll_no & 0xffffff00) {
		lcl_hinst = dll_no
	} else {
		lcl_hinst = mjrdll(dll_no)
	}
	GetProcAddress lcl_hinst,funcname
	func = stat
	if(func) {
		_stat = callfunc(prms,func,prm_n)
	} else {
		dialog "can not find '"+funcname+"'\ndll="+dll_no
		getkey a,16
		if(a) {
			end
		}
	}
return _stat


;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
;	getmjrdll
;................................................................................

#deffunc getmjrdll var v1,int v2
	v1 = mjrdll(v2)
return


;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
;	getmjrfunc
;................................................................................

#deffunc getmjrfunc var v1,int v2
	v1 = mjrfunc(v2)
return


;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
;	_cls
;	モジュールで作ったcontrolとHSPのオブジェクトを全てクリアする
;................................................................................

;#deffunc _cls int v1
	;互換用
;	cls v1
;return


;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
;	_get_instance
;	instanceの取得
;................................................................................

;#deffunc _get_instance var v1
;	v1 = hinstance
;return


;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
;	_get_active_window
;	active windowの取得
;................................................................................

#deffunc _get_active_window var v1
	v1 = callfunc(prm,mjrfunc.F_GetActiveWindow,0)
return


;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
;	setwndlong
;	SetWindowLong
;................................................................................

#deffunc setwndlong var v1,int v2

	;#define GWL_WNDPROC         (-4)
	;#define GWL_HINSTANCE       (-6)
	;#define GWL_HWNDPARENT      (-8)
	;#define GWL_STYLE           (-16)
	;#define GWL_EXSTYLE         (-20)
	;#define GWL_USERDATA        (-21)
	;#define GWL_ID              (-12)

	if(v2) {
		lcl_s = "G"
		a = 2		;GetWindowLongにする (節約)
	} else {
		lcl_s = "S"
		a = 3		;SetWindowLongにする (節約)
	}
	lcl_s += "etWindowLongA"
	dllproc lcl_s,v1,a,D_USER

return


;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
;	_null_sep_str
;................................................................................

#deffunc _null_sep_str var _v1,int _n1

	L = strlen(_v1)
	a = 0
	prm = 0
	repeat L
		a = peek(_v1,cnt)
		if(a == _n1) {
			poke _v1,cnt,0
			prm++
		}
	loop

return prm


;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
;	_makewnd
;	CreateWindowEx
;................................................................................

#deffunc _makewnd array handle,str s2

	pos handle.0,handle.1
	winobj s2,"",handle.6,handle.4,handle.2,handle.3,0,0
	handle = stat

return


;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
;	_is_wnd
;................................................................................

#deffunc _is_wnd int v1
	_v1 = v1
	dllproc "IsWindow",_v1,1,D_USER
return


;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
;	_hspobjhandle
;	HSPのObjectIDからハンドルを調べてstatに代入
;................................................................................

#deffunc _hspobjhandle int v1
return objinfo(v1,2)


;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
;	_hspobjid
;	ハンドルからHSPのObjectIDを調べてstatに代入
;................................................................................

#deffunc _hspobjid int v1
	mref bmscr,67
	_stat = -1
	repeat bmscr.72
		if(v1 == objinfo(cnt,2)) : _stat = cnt : break
	loop
return _stat


;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
;	_objsel
;................................................................................

;#deffunc _objsel int v1
	// 互換用
;	objsel v1
;return


;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
;	_clrobj
;................................................................................

;#deffunc _clrobj int v1
	;互換用
;	clrobj v1
;return


;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
;	charupper
;	変数内の英字を大文字に変換
;................................................................................

#deffunc charupper var v1
	getptr p,v1
	dllproc "CharUpperA",p,1,D_USER
return


;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
;	charlower
;	変数内の英字を小文字に変換
;................................................................................

#deffunc charlower var v1
	getptr p,v1
	dllproc "CharLowerA",p,1,D_USER
return


#undef F_GetActiveWindow


;module終わり>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#global

	_init_llmod		;149行 よく使うDLLをロードしておく

#endif /* __llmod3__ */

#endif /* __hsp30__ */	;================================================================================
	;モジュール misc
	;ver 2.1
	;	その他
	;	llmod3.hspが必要です
	;================================================================================


	; btnimg
	; tooltip
	; strtoint
	;
	; 計	3個

#ifdef __hsp30__

	;-------------------------------------------------------------------------------
	#module

	;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	;btnimg buttonID,windowID,x,y,width,height
	; buttonID	:イメージを貼りつけるボタンのID(0〜63)
	; windowID	:イメージが描画されているウィンドウのID(0〜7)
	; x		:イメージの位置
	; y		:イメージの位置
	; width		:イメージの幅
	; height	:イメージの高さ
	;
	;<>説明
	; buttonにイメージを貼りつけます。
	;
	;例
	;	buffer 1
	;	picload "mybmp.bmp"	;ウィンドウID 1 にビットマップを表示
	;	bmp_w=winx:bmp_h=winy
	;	gsel 0
	;	button "",*label : btn_id=0
	;
	;	;ウィンドウID 1の(0,0)-(bmp_w,bmp_h)の範囲の画像をボタンに描画する
	;	btmimg btn_id,1,0,0,bmp_w,bmp_h
	;................................................................................
	#deffunc btnimg int v1,int v2,int v3,int v4,int v5,int v6
	mref bmscr,67

	p = v2
	p(1) = bmscr(18)	;現在アクティブなウィンドウID
	gsel p

	if(firstcall == 0) : dim hbmp,6,64 : firstcall = 1

	p = bmscr(18) : if(p > 1) : p--
	if(hbmp(p,v1)) : prm = hbmp(p,v1) : dllproc "DeleteObject",prm,1,D_GDI

	gsel p(1)
	_hspobjhandle v1
	a = stat
	if(a == 0) : return
	s = ""
	getptr p,s
	prm = a,p,64
	dllproc "GetClassNameA",prm,3,D_USER
	charupper s
	if(s != "BUTTON") : return

	gsel p
	prm = hdc,v5,v6
	dllproc "CreateCompatibleBitmap",prm,3,D_GDI
	p = bmscr(18) : if(p > 1) : p--
	hbmp(p,v1) = stat
	a(1) = hbmp(p,v1)

	prm = hdc		;hdc
	dllproc "CreateCompatibleDC",prm,1,D_GDI
	hmemdc = stat

	prm = hmemdc,a(1)
	dllproc "SelectObject",prm,2,D_GDI

	#define SRCCOPY	0xCC0020

	prm = hmemdc,0,0,v5,v6,hdc,v3,v4,SRCCOPY
	dllproc "BitBlt",prm,9,D_GDI

	;#define GWL_STYLE	(-16)
	#define BS_BITMAP	128
	#define BS_ICON	64
	prm = a,-16,$50000000 | BS_BITMAP
	setwndlong prm

	#define BM_SETIMAGE	247
	#define IMAGE_BITMAP	0
	#define IMAGE_ICON	1
	sendmsg a,BM_SETIMAGE,IMAGE_BITMAP,a.1

	dllproc "DeleteDC",hmemdc,1,D_GDI

	gsel p(1)

	return
	#global
	;-------------------------------------------------------------------------------



	;-------------------------------------------------------------------------------
	#module

	;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	;tooltip ObjectID,String,BkColor
	; ObjectID	: button,input,treeboxなどのID
	; String	: ツールチップ上に表示する文字列
	; BkColor	: ツールチップの背景色
	;
	;<>説明
	; オブジェクトにツールチップを付けます。
	; ツールチップとはマウスがbuttonなどのオブジェクト上で一定時間停止したときに
	; 現れる小さなオブジェクトです。
	;
	;例)
	;	button "test",label	: btn_id=0
	;	tooltip btn_id,"テストします"
	;
	;................................................................................
	#deffunc tooltip int v1,str v2,int v3
	mref bmscr,67

	#define TTS_ALWAYSTIP	1
	#define TTS_NOPREFIX	2
	#define CW_USEDEF	0x80000000

	a = strlen(v2)
	if(a >= 64) {
		sdim s,a + 1
	}
	s = v2

	a = bmscr(18)		;bmscr.wid
	if(handle_of_tt(a) == 0) {
		prm = TTS_NOPREFIX ;|TTS_ALWAYSTIP
		m = CW_USEDEF,CW_USEDEF,CW_USEDEF,CW_USEDEF,prm,0,0
		_makewnd m,"tooltips_class32"
		handle_of_tt(a) = m
	}
	h_tt = objinfo(handle_of_tt(a),2)

	#define TTF_IDISHWND	1
	#define TTF_CENTERTIP	2
	#define TTF_RTLREADING	4
	#define TTF_SUBCLASS	16

	_is_wnd v1
	if(stat) : a = v1 : else : a = objinfo(v1,2)
	getptr p,s
	ti(0) = 40,TTF_IDISHWND | TTF_SUBCLASS ;|TTF_CENTERTIP
	ti(2) = hwnd			;hwnd
	ti(3) = a				;uid
	ti(8) = hinstance
	ti(9) = p				;ptext

	getptr p,ti
	#define TTM_ADDTOOLA	1028
	sendmsg h_tt,TTM_ADDTOOLA,0,p

	;以下はIE 3.0以上でなければ無効

	;#define WM_USER	1024
	;#define TTM_SETMAXTIPWIDTH	(WM_USER + 24)
	;#define TTM_SETTIPBKCOLOR	(WM_USER + 19)
	;#define TTM_SETTIPTEXTCOLOR	(WM_USER + 20)

	sendmsg h_tt,$400 + 24,0,$7fffffff
	if(v3) : sendmsg h_tt,$400 + 19,v3,0
	return m
	#global
	;-------------------------------------------------------------------------------


	;-------------------------------------------------------------------------------
	#module

	;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	;strtoint String,Base
	; String	: 数値に変換する文字列
	; Base		: 基数(2〜36)
	;
	;<>説明
	; 文字列を数値に変換します。
	;
	;例)
	;	strtoint "111101",2	;2進数とみなして変換
	;	mes stat
	;
	;	strtoint "0x1F"		;先頭が"0x"だと16進数とみなされる(Base省略時)
	;	mes stat
	;
	;	strtoint "0376"		;先頭が"0"だと8進数とみなされる(Base省略時)
	;	mes stat
	;
	;	strtoint "23413",7	;7進数とみなして変換
	;	mes stat
	;
	;	strtoint "za",36	;36進数とみなして変換
	;	mes stat
	;................................................................................
	#deffunc strtoint str v1,int v2

	s = v1
	ll_libload dll,"msvcrt"
	if(dll == 0) {
		ll_libload dll,"crtdll"
	}
	if(dll == 0) {
		return 0
	}
	getptr prm,s
	prm.1 = 0,v2
	dllproc "strtol",prm,3,dll
	ll_libfree dll
	return dllret


	#undef SRCCOPY

	#undef BS_BITMAP
	#undef BS_ICON
	#undef BM_SETIMAGE
	#undef IMAGE_BITMAP
	#undef IMAGE_ICON


	#undef TTS_ALWAYSTIP
	#undef TTS_NOPREFIX
	#undef CW_USEDEF
	#undef TTF_IDISHWND
	#undef TTF_CENTERTIP
	#undef TTF_RTLREADING
	#undef TTF_SUBCLASS
	#undef TTM_ADDTOOLA

	#global
	;-------------------------------------------------------------------------------

#endif /* __hsp30__ */	;================================================================================
	;モジュール msgdlg
	;ver 2.0
	;	メッセージダイアログ
	;	llmod3.hspが必要です
	;================================================================================

	; msgdlgモジュール命令一覧
	;
	; msgdlg			拡張dialog
	;
	; 計	1個


	;使い方
	;================================================================================
	; msgdlg "s1","s2",n3,n4		拡張dialog(type 0〜3 )
	;
	;  s1 : メッセージが入った文字列変数または文字列
	;  s2 : タイトルが入った文字列変数または文字列
	;  n3 : タイプ
	;  n4 : アイコンタイプ
	;================================================================================
	;
	;<>説明
	; HSPのdialog命令の拡張版です。
	;
	; タイプ
	;  0 Ok
	;  1 Ok ｷｬﾝｾﾙ
	;  2 中止　再試行　無視
	;  3 はい　いいえ　ｷｬﾝｾﾙ
	;  4 はい　いいえ
	;  5 再開試行 ｷｬﾝｾﾙ
	;
	; アイコンタイプ
	;  0 アイコン無し
	;  1 エラー(x)
	;  2 クエスチョンマーク(?)
	;  3 警告(!)
	;  4 情報(i)
	;  5 EXEが持っているアイコン
	;
	;<>この命令を呼び出した後のstatの値
	; 値 選択されたボタン
	;  1 Ok
	;  2 ｷｬﾝｾﾙ
	;  3 中止
	;  4 再試行
	;  5 無視
	;  6 はい
	;  7 いいえ
	; -1 エラー発生
	;
	;<>例
	;	msgdlg "今日はここで終了しますか？","プログラムの終了",3,5
	;	if stat=6 : dialog "はい　が選択されました"
	;	if stat=7 : dialog "いいえ　が選択されました"
	;	if stat=2 : dialog "ｷｬﾝｾﾙ　が選択されました"
	;
	;<>備考
	; タイプに以下の値を加えるとデフォルトボタンが変えられます。
	;  0	ボタン1
	;  $100	ボタン2
	;  $200	ボタン3
	; アイコンタイプに以下の値を加えるとビープ音が変えられます。
	;  0	高い音(ノーマル)
	;  $100	警告音
	;

#ifdef __hsp30__

	;module始め>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	#module "_msgdlg"

	;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	;msgdlg
	;................................................................................
	#deffunc msgdlg str msg,str capt,int type,int ico

	a = strlen(msg)  : if(a >= 64) : sdim lcl_msg,a + 1
	a = strlen(capt) : if(a >= 64) : sdim lcl_capt,a + 1
	_ico = ico
	lcl_msg = msg	;保存しておかないとまずい
	lcl_capt = capt
	
	dim lcl_os,37 : lcl_os.0 = 148
	getptr p,lcl_os
	dllproc "GetVersionExA",p,1,D_KERNEL

	a = 0
	if(_ico & $100) : a = $30 : _ico = _ico - $100
	dllproc "MessageBeep",a,1,D_USER

	prm.0 = 40
	_get_active_window a
	prm.1 = a
	_get_instance a
	prm.2 = a

	getptr prm.3,lcl_msg
	getptr prm.4,lcl_capt

	if(_ico == 5) : _ico = $80 : else : _ico = _ico << 4
	prm.5 = type + _ico
	prm.6 = 128
	getptr p,prm

	dllproc "MessageBoxIndirectA",p,1,D_USER
	p = stat

	alloc lcl_msg,64
	alloc lcl_capt,64

	return p

	#global
	;module終わり>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

#endif /* __hsp30__ */	;================================================================================
	;モジュール multiopen
	;ver 2.0
	;	ファイル名を取得
	;	llmod3.hspが必要です
	;================================================================================

	; multiopenモジュール命令一覧
	;
	; multiopen			複数のファイル名を取得
	;
	; 計	1個


	;使い方
	;================================================================================
	; multiopen v1,v2,n3,n4		複数のファイル名を取得
	;
	;  v1 : 選択されたファイル名を受け取るための変数
	;  v2 : 情報
	;  n3 : フィルタのインデックス(1から)
	;  n4 : Read Onlyボックスを付ける
	;================================================================================
	;
	;<>説明
	; HSPのdialog(type 16,17)で複数のファイルを選択できるようにしたものです。
	; multiopen呼び出し時に、v1.0,v1.1にそれぞれv1,v2のサイズを代入しておきます。
	; v2には例のような形式でフィルタを代入します。
	; n3を省略、またはマイナスの値を使ったときの動作は備考参照。
	; n4を1にするとReadOnlyボックスを付けます。2にするとReadOnlyボックスを
	; チェックした状態にします。
	;
	;<>この命令を呼び出した後のstatの値
	; 0 キャンセルされた
	; 1 ファイルが選択されてOKボタンが押された
	; 2 ファイルが選択されてOKボタンが押された(ReadOnlyがチェックされている。ただし
	; 複数選択されていない場合のみ)
	;
	;<>例
	;	buf_size=512 : info_size=128
	;	alloc buf,buf_size
	;	alloc info,info_size
	;
	;	buf="ﾌｧｲﾙを開くtest title" : info="a:\\windows"
	;	multiopen buf,info
	;
	;	buf=buf_size
	;	buf.1=info_size
	;	info="HSP2 ｽｸﾘﾌﾟﾄﾌｧｲﾙ(*.as)|*.as|ﾃｷｽﾄﾌｧｲﾙ(*.txt)|*.txt|全てのﾌｧｲﾙ|*.*|"
	;	multiopen buf,info,1
	;	if stat=0 : mes "キャンセルされました" : else {
	;		notesel buf
	;		notemax mx
	;		mes "選択されたファイル数 "+mx
	;		repeat mx
	;			noteget a,cnt
	;			mes a
	;		loop
	;		if mx=1 : mes "拡張子は"+info : else mes "フォルダ "+info
	;	}
	;
	;<>備考
	; p3を0(省略)にしてp1,p2に文字列を入れるとp1がタイトルになり、p2は初期フォルダに
	; なります。
	; p3をマイナス値にすると保存するファイル名を得るときに使うことができます。(ただし
	; 複数選択はできません)
	;
	; 複数のファイルが選択されたかはnotesel,notemaxを使って調べます。
	; ファイルが一つしか選択されなかった場合、p1にはファイル名のフルパスが代入され、
	; p2にはファイルの拡張子が代入されます。
	; ファイルが複数選ばれた場合は、p1にnotegetで取得できる形式でファイル名が複数
	; 入っていて、p2には選択されたファイルがあるフォルダが代入されます。(p1のファイル
	; 名は'\r'で区切られています。)

#ifdef __hsp30__

	;module始め>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	#module "_multiopen"


	;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	;multiopen
	;................................................................................
	#deffunc multiopen array buf,var info,int filt_idx,int read_only
	mref stt,64

	if(first_call == 0) : ttle = "" : inidir = "" : first_call = 1
	if(filt_idx == 0) {
		a = strlen(buf)  : if(a >= 64) : sdim ttle,a + 1 : else : sdim ttle,64
		a = strlen(info) : if(a >= 64) : sdim inidir,a + 1 : else : sdim inidir,64
		ttle = "" : inidir = ""
		ttle = buf
		inidir = info
		return
	}
	if(filt_idx < 0) : filt_idx =- filt_idx : b_save = 1 : else : b_save = 0

	a = strlen(info)
	if(a >= 64) : sdim lcl_info,a + 1
	lcl_info = info		;保存しておかないとまずい

	_null_sep_str lcl_info,'|'

	defext = ""
;	a=0
;	repeat -1
;		peek a,lcl_info,cnt
;		if a=0 : peek defext,lcl_info,cnt+3 : break
;	loop


;	alloc prm,76
	dim prm,16
	prm.0 = 76

	;@@@@ Instanceの取得 @@@@
	_get_instance prm.2

	;@@@@ Active Windows の取得 @@@@
	_get_active_window prm.1

	getptr prm.3,lcl_info
	prm.4 = 0,0,filt_idx

	prm.8 = buf.0
	prm.10 = buf.1

	sdim buf,prm.8	;1024*4
	;buf = ""
	sdim buf,prm.10	;1024*4
	;info = ""

	getptr prm.7,buf
	getptr prm.9,info

	getptr prm.11,inidir
	getptr prm.12,ttle

	;#define OFN_ALLOWMULTISELECT	512
	;#define OFN_CREATEPROMPT	0x2000
	;#define OFN_ENABLEHOOK	32
	;#define OFN_ENABLETEMPLATE	64
	;#define OFN_ENABLETEMPLATEHANDLE	128
	;#define OFN_EXPLORER	0x80000
	;#define OFN_EXTENSIONDIFFERENT	0x400
	;#define OFN_FILEMUSTEXIST	0x1000
	;#define OFN_HIDEREADONLY	4
	;#define OFN_LONGNAMES	0x200000
	;#define OFN_NOCHANGEDIR	8
	;#define OFN_NODEREFERENCELINKS	0x100000
	;#define OFN_NOLONGNAMES	0x40000
	;#define OFN_NONETWORKBUTTON	0x20000
	;#define OFN_NOREADONLYRETURN	0x8000
	;#define OFN_NOTESTFILECREATE	0x10000
	;#define OFN_NOVALIDATE	256
	;#define OFN_OVERWRITEPROMPT	2
	;#define OFN_PATHMUSTEXIST	0x800
	;#define OFN_READONLY	1
	;#define OFN_SHAREAWARE	0x4000
	;#define OFN_SHOWHELP	16
	;#define OFN_SHAREFALLTHROUGH	2
	;#define OFN_SHARENOWARN	1
	;#define OFN_SHAREWARN	0

	if(b_save) {
	; OFN_PATHMUSTEXIST | OFN_OVERWRITEPROMPT
	;	prm.13=$800 | 2
		prm.13 = $802
	} else {
	; OFN_FILEMUSTEXIST | OFN_ALLOWMULTISELECT | OFN_EXPLORER
	;	prm.13=$1000 | $200 | $80000
		prm.13 = $81200
		if(read_only == 0) : prm.13 = (prm.13) | 4
		if(read_only == 2) : prm.13++
	}
	prm.14 = 0
	getptr prm.15,defext
	prm.16 = 0,0,0

	getptr a,prm

	if(b_save) {
		dllproc "GetSaveFileNameA",a,1,D_COMDLG
	} else {
		dllproc "GetOpenFileNameA",a,1,D_COMDLG
	}
	ret = stat


	alloc lcl_info,64	;確保しておいたバッファをもどす

	if(ret) {
		a = (prm.14 >> 16) & $ffff
		if(a) {			;シングルセレクト
			;info = peek(buf,a)
			getstr info,buf,a
		} else {			;マルチセレクト
			getstr info,buf,0
/*
			repeat -1
				a = peek(buf,cnt)
				if(a == 0) {
					a = peek(buf,cnt + 1)
					if(a == 0) : prm = cnt : break
				}
			loop

			getptr a,buf
			defext = 0
			defext = strlen(info)
			dupptr clone,a + defext + 1,1,4
			buf = peek(clone,prm + 1)
*/
			repeat -1
				a = peek(buf,cnt)
				if(a == 0) {
					poke buf,cnt,13
					a = peek(buf,cnt + 1)
					if(a == 0) : break
				}
			loop
			a=strlen(info)+1
			memcpy buf,buf,strlen(buf)-a+1,0,a
		}
	}

	if(ret) : stt = 1 : else : stt = 0
	if(read_only & (prm.13 & 1)) : stt = 2

	return
	#global
	;module終わり>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

#endif /* __hsp30__ */	;================================================================================
	;モジュール obj
	;ver 2.1
	;	Object(Window)関連
	;	llmod3.hspが必要です
	;================================================================================

	; objモジュールの命令一覧
	;
	; objgray			オブジェクトの使用可、不可設定
	; getobjsize			オブジェクトのサイズ、位置取得
	; p_scrwnd			スクリーン座標系をウィンドウ座標系に変換
	; p_wndscr			ウィンドウ座標系をスクリーン座標系に変換
	; resizeobj			オブジェクトのサイズ変更
	;
	; 計	5個


	;使い方
	;================================================================================
	; objgray n1,n2		オブジェクトの使用可、不可設定
	;
	;  n1 : オブジェクトのID
	;  n2 : 使用可にするか不可するかのフラグ
	;================================================================================
	;
	;<>説明
	; buttonなどのオブジェクトを使用可にしたり、不可にしたりします。
	; n1にはbuttonやlistviewなどのIDを代入します。
	; n2を0にするとオブジェクトを使用できない状態にし、1にすると使用できる
	; 状態にします。
	; n2を-1にするとそのオブジェクトが使用可か不可かを調べます。
	;
	;<>この命令を呼び出した後のstatの値
	; 1  	エラー無し
	; 0,-1	エラー
	;n2を-1にしたとき
	; 1  	使用可
	; 0	使用不可
	;

	;================================================================================
	; getobjsize v1,n2		オブジェクトのサイズと位置取得
	;
	;  v1 : オブジェクトのサイズ、位置を取得するための数値変数
	;  n2 : オブジェクトのID
	;================================================================================
	;
	;<>説明
	; オブジェクトのサイズと位置を取得します。
	; n2にはbuttonやlistviewなどのIDを代入します。
	; v1にはオブジェクトのサイズ、位置が以下のように代入されます。
	;	v1.0	幅
	;	v1.1	高さ
	;	v1.2	左上のx座標
	;	v1.3	左上のy座標
	;	v1.4	右下のx座標
	;	v1.5	右下のy座標
	; 各座標はウィンドウ座標系です。
	;

	;================================================================================
	; p_scrwnd v1			スクリーン座標系をウィンドウ座標系に変換
	;
	;  v1 : スクリーン座標系が入った数値変数
	;================================================================================
	;
	;<>説明
	; スクリーン座標系をウィンドウ座標系に変換します。
	; v1にx座標、y座標を代入しておきます。
	; 描画対象となっているウィンドを基準にします。
	;例)
	;	ginfo
	;	x=prmx,prmy
	;	p_scrwnd x	;スクリーン座標系をウィンドウ座標系に変換
	;

	;================================================================================
	; p_wndscr v1			ウィンドウ座標系をスクリーン座標系に変換
	;
	;  v1 : ウィンドウ座標系が入った数値変数
	;================================================================================
	;
	;<>説明
	; ウィンドウ座標系をスクリーン座標系に変換します。
	; v1にx座標、y座標を代入しておきます。
	; 描画対象となっているウィンドを基準にします。
	;例)
	;	x=mousex,mousey
	;	p_wndscr x	;ウィンドウ座標(100,30)をスクリーン座標に変換
	;

	;================================================================================
	; resizeobj n1,v2,n3		オブジェクトのサイズ変更
	;
	;  n1 : オブジェクトのID
	;  v2 : サイズ、位置が入った数値変数
	;  n3 : 位置、サイズを変更しないかどうかのフラグ
	;================================================================================
	;
	;<>説明
	; オブジェクトn1のサイズを変更します。
	; v2には幅、高さ、x座標,y座表の順に代入しておきます。
	; n3を1にすると位置を変えずにサイズだけ変更します。
	; n3を2にするとサイズを変えずに位置だけ変更します。
	;
	;例)
	;	button "width*2",wx2
	;	button "height*2",hx2
	;	input s,100,20
	;	ipt_id=2
	;	;幅を40、高さを30にして(0,80)に移動する
	;	s=40,30,0,80
	;	resizeobj ipt_id,s
	;	stop
	;*wx2
	;	;幅を2倍にする
	;	getobjsize s,ipt_id
	;	s=s*2
	;	resizeobj ipt_id,s
	;	stop
	;*hx2
	;	;高さを2倍にする
	;	getobjsize s,ipt_id
	;	s.1=s.1*2
	;	resizeobj ipt_id,s
	;	stop
	;

#ifdef __hsp30__

	;module始め>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	#module "obj"

	;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	;objgray
	;オブジェクトの使用可、不可状態設定
	;................................................................................
	#deffunc objgray int v1,int v2

	_v1 = v1
	_hspobjhandle _v1
	if(stat) : _v1 = stat
	prm = _v1,v2
	if(v2 < 0) {
		dllproc "IsWindowEnabled",prm,1,D_USER
	}else{
		dllproc "EnableWindow",prm,2,D_USER
	}

	return


	;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	;p_scrwnd
	;スクリーン座標系をウィンドウ座標系に変換
	;
	;p_wndscr
	;ウィンドウ座標系をスクリーン座標系に変換
	;................................................................................
	#deffunc p_scrwnd var v4
		p = "ScreenToClient" : goto *@f

	#deffunc p_wndscr var v4
		p = "ClientToScreen"
*@
	getptr prm.1,v4
	prm = hwnd
	dllproc p,prm,2,D_USER
	return


	;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	;getobjsize
	;オブジェクトのサイズ(rect)取得
	;................................................................................
	#deffunc getobjsize array v1,int v2

	;typedef struct _RECT {    // rc  
	;    LONG left; 
	;    LONG top; 
	;    LONG right; 
	;    LONG bottom; 
	;} RECT; 

	_v2 = v2
	_hspobjhandle _v2
	if(stat) : _v2 = stat
	getptr p,v1(2)	;rect
	prm = _v2,p
	dllproc "GetWindowRect",prm,2,D_USER
	prm = stat
	v1 = v1(4) - v1(2),v1(5) - v1(3)
	p_scrwnd v1(2)
	p_scrwnd v1(4)

	return prm


	;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	;resizeobj
	;オブジェクトのサイズ変更
	;................................................................................
	#deffunc resizeobj int v1,array v2,int v3

	_v1 = v1
	_hspobjhandle _v1
	if(stat) : _v1 = stat
	a = _v1,v2(2),v2(3),v2,v2(1),1	;handle, x,y, w,h
	if(v3) {			
		getobjsize m,a		;getobjsizeでm.0からw,h,x,yが代入される
		if(stat == -1) : return -1
		if(v3 == 1) : a(1) = m(2),m(3)		;位置を変更しない
		if(v3 == 2) : a(3) = m,m.1		;サイズを変更しない
	}

	dllproc "MoveWindow",a,6,D_USER
	return

	#global
	;module終わり>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

#endif /* __hsp30__ */	;================================================================================
	;モジュール progbox
	;ver 2.0
	;	プログレスボックス
	;	llmod3.hspが必要です
	;================================================================================

	; progboxモジュール命令一覧
	;
	; progbox			プログレスボックスの作成
	; sel_progbox			操作するプログレスボックスを選択
	; progrng			プログレスボックスの範囲を設定
	; progset			プログレスボックスの各設定
	;
	; 計	4個


	;使い方
	;================================================================================
	; progbox n1,n2,n3		プログレスボックスの作成
	;
	;  n1 : 幅
	;  n2 : 高さ
	;  n3 : スタイル
	;================================================================================
	;
	;<>説明
	; プログレスボックスを作成します。
	; プログレスボックスは、進捗状況を表示するのに便利です。
	; 幅や高さを省略するとobjsizeで設定した幅、高さが使われます。
	;
	;<>この命令を呼び出した後のstatの値
	; プログレスボックスのID
	;
	;<>スタイル(comctl32.dllのバージョンが4.70以上でなければ無効です)
	; n4の値
	; 1	進み方がスムーズになります。
	; 4	垂直に目盛りが進みます。
	;


	;================================================================================
	; sel_progbox n1		操作するプログレスボックスを選択
	;
	;  n1 : プログレスボックスのID
	;================================================================================
	;
	;<>説明
	; この命令使用後はn1で指定したプログレスボックスに対して各操作を行います。
	; プログレスボックス新規に作成すると、自動的にそのプログレスボックスが
	; 各操作の対象になります。
	; 複数のプログレスボックスを作成したときは、この命令で操作するプログレス
	; ボックスを選択してください。
	;

	;================================================================================
	; progrng n1,n2,n3		プログレスボックスの範囲を設定
	;
	;  n1 : 最小値
	;  n2 : 最大値
	;  n3 : 最大値の拡張フラグ
	;================================================================================
	;
	;<>説明
	; プログレスボックスの範囲の設定をします。
	; 設定できる値は、最小値が0以上、最大値は65535以下です。
	; n3に1を代入すると最大値が$ffffffffまでになります。ただしこの設定は
	; comctl32.dllのバージョンが4.70以上でなければ無効です。
	;
	;<>この命令を呼び出した後のstatの値
	; 以前セットしていた範囲 [ 最小値 | (最大値<<16)]の形式 (n3=0のときのみ)
	;

	;================================================================================
	; progset n1,n2			プログレスボックスの各設定
	;
	;  n1 : セットする値
	;  n2 : セットするタイプ
	;================================================================================
	;
	;<>説明
	; プログレスボックスの各設定を行います。
	; セットするタイプは以下の通りです。
	;
	;目的			n1の値		n2の値		progset実行後のstatの値
	; 進ませる		0		0		進ませる前の位置
	; 進ませる量のセット	進ませる量	0		以前セットした進ませる量
	; 位置をセット		セットする位置	1		セットする前の位置
	; 特定の量を増加させる	増加させる量	2		増加させる前の位置
	;
	;(以下のものはcomctl32.dllのバージョンが4.70以上でなければ無効です)
	;
	; 目盛りの色		色		3		セットする前の色
	; 目盛りの後ろの色	色		4		セットする前の色
	; (色は   r|(g<<8)|(g<<16)   の形式)
	; (値が 0 になっている所は省略できる)
	; statの値が'セットする前の色'となっている所は、セットする前の色がシステムの
	; デフォルトの色だった場合 -16777216($ff000000)がstatに代入されます。また、色を
	; セットするときに$ff000000を使うとシステムのデフォルトの色に設定できます。
	;
	;
	;<>例
	;	progbox 300,20		;幅300,高さ20のプログレスボックスを作る
	;	progrng 0,200		;範囲は0から200
	;
	;*lp
	;	progset			;目盛りを進ませる
	;		;
	;		;
	;	goto lp
	;

#ifdef __hsp30__

	;module始め>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	#module "_progbox"


	;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	;progbox
	;ProgressBarの作成
	;................................................................................
	#deffunc progbox int _v1,int _v2,int _v3

	;#define WS_CHILD	0x40000000
	;#define WS_VISIBLE	0x10000000
	v3 = _v3 | $50000000
	alloc m,64		;リセット
	m = ginfo@hsp(22),ginfo@hsp(23),_v1,_v2,v3,0,$200
	_makewnd m,"msctls_progress32"
	handle_of_prog = m
	return handle_of_prog

	;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	;sel_progbox
	;
	;................................................................................
	#deffunc sel_progbox int _v1
	stt = handle_of_prog
	handle_of_prog = _v1
	return stt


	;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	;progrng
	;ProgressBarの範囲の設定
	;................................................................................
	#deffunc progrng int _v1,int _v2,int _v3

	v1 = _v1
	v2 = _v2

	if(_v3) {
		;#define PBM_SETRANGE32		(WM_USER+6) //WM_USER 1024
		;// lParam = high, wParam = low
		m = 1030
	} else {
		;範囲のセット
		;#define PBM_SETRANGE	1025
		v2 = v1 | (v2 << 16)
		m = 1025 : v1 = 0
	}
	sendmsg objinfo(handle_of_prog,2),m,v1,v2
	return

	;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	;progset
	;ProgressBarの設定
	;................................................................................
	#deffunc progset int _v1,int _v2

	v1 = _v1
	v2 = _v2

	if(v2) {
		m = 0,1026,1027,1033,$2001
		m = m.v2
		if(v2 < 3) : v2 = 0 : else : v2 = v1 : v1 = 0
;		if(v2 == 1) {
;			;v2=1
;			;位置をセット
;			;#define PBM_SETPOS	1026
;			m = 1026 : v2 = 0
;		}
;		if(v2 == 2) {
;			;v2=2
;			;特定の量を増加させる
;			;#define PBM_DELTAPOS	1027
;			m = 1027:v2=0
;		}
;		if(v2 == 3) {
;			;v2=3
;			;#define PBM_SETBARCOLOR		(WM_USER+9)
;			m=1033 : v2=v1 : v1=0
;		}
;		if v2=4 {
;			;v2=4
;			;#define PBM_SETBKCOLOR		CCM_SETBKCOLOR
;			;// lParam = bkColor
;			;#define CCM_FIRST		0x2000
;			;// Common control shared messages
;			;#define CCM_SETBKCOLOR		(CCM_FIRST + 1)
;			;// lParam is bkColor
;			m = $2001 : v2 = v1 : v1 = 0
;		}
	} else {
		if(v1) {
			;進む量のセット
			;#define PBM_SETSTEP	1028
			m = 1028 : v2 = 0
		} else {
			;進ませる
			;#define PBM_STEPIT	1029
			m = 1029 : v1 = 0 : v2 = 0
		}
	}
	sendmsg objinfo(handle_of_prog,2),m,v1,v2
	return


	;module終わり>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	#global

#endif /* __hsp30__ */	;================================================================================
	;モジュール scrsvr
	;ver 2.0
	;	スクリーンセーバー関連
	;	llmod3.hspが必要です
	;================================================================================

	; scrsvrモジュール命令一覧
	;
	; ss_running		スクリーンセーバーが作動しているかシステムに知らせる
	; ss_chgpwd		Windows標準のパスワード変更ダイアログ
	; ss_chkpwd		Windows標準のパスワードチェックダイアログ
	;
	; 計	3個


	;使い方
	;================================================================================
	; ss_running n1		スクリーンセーバーが作動しているかシステムに知らせる
	;
	;  n1 : 作動しているか、いないかのフラグ
	;================================================================================
	;
	;<>説明
	; スクリーンセーバーが作動しているかシステム(Windows)に知らせます。
	; n1に1を代入すると、システム(Windows)にスクリーンセーバーが
	; 作動中であることを知らせます。
	; n1に0を代入すると、スクリーンセーバーは作動してない、とシステムに知らせます。
	;
	; ※ n1を1にしてこの命令を実行すると、ALT+CTRL+DEL,ALT+TAB,winボタンなどの
	; キーが効かなくなります。
	; n1を1にしてこの命令を実行したら、必ずn1を0にしてもう一度この命令を実行して
	; ください。
	;
	;
	;<>この命令を呼び出した後のstatの値
	; 0		エラー
	; 上記以外	エラー無し
	;

	;================================================================================
	; ss_chgpwd		Windows標準のパスワード変更ダイアログ
	;================================================================================
	;
	;<>説明
	; Windows標準のパスワード変更ダイアログを呼び出します。
	;
	;<>この命令を呼び出した後のstatの値
	; 0		パスワードが変更された
	; 上記以外	キャンセルされた
	;

	;================================================================================
	; ss_chkpwd		Windows標準のパスワードチェックダイアログ
	;================================================================================
	;
	;<>説明
	; Windows標準のパスワードチェックダイアログを呼び出します。
	; ただし、コントロールパネルの'画面のプロパティ'で'ﾊﾟｽﾜｰﾄﾞによる保護'が
	; チェックされている場合のみです。
	;
	;<>この命令を呼び出した後のstatの値
	; 0	キャンセルされた
	; 上記以外	正確なパスワードが入力された
	;		('ﾊﾟｽﾜｰﾄﾞによる保護'がチェックされていない場合も含む)
	;

#ifdef __hsp30__

	;module始め>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	#module "scrsvr"


	;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	;ss_running
	;スクリーンセーバーが作動しているかシステムに知らせる
	;................................................................................
	#deffunc ss_running int p

	;#define SPI_SCREENSAVERRUNNING	97
	prm.1 = p
	prm.0 = 97
	getptr prm.2,s
	prm.3 = 0
	dllproc "SystemParametersInfoA",prm,4,D_USER	;succeed nonzero,falied 0
	return


	;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	;ss_chgpwd
	;Windows標準のパスワード変更ダイアログ
	;................................................................................
	#deffunc ss_chgpwd

	_get_active_window prm.1
	ll_libload dll,"mpr"
	if(dll == 0) {
		return
	}
	s = "SCRSAVE"
	getptr prm.0,s
	prm.2 = 0,0

	dllproc "PwdChangePasswordA",prm,4,dll
	;if stat!0 : dll_free dll : stt=-1 : return
	prm = stat
	ll_libfree dll

	return prm		;return 0 if password is changed, otherwise return nonzero


	;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	;ss_chkpwd
	;Windows標準のパスワードチェックダイアログ
	;................................................................................
	#deffunc ss_chkpwd

	_get_active_window prm
	ll_libload dll,"password.cpl"
	if(dll == 0) : stt = 1 : return	;dllのロードが失敗したら、パスワードはあっている
					;ものとみなす(終わらなくなるのを防ぐため)
	dllproc "VerifyScreenSavePwd",prm,1,dll
	prm = stat
	ll_libfree dll
	return prm		;パスワードがあってなければ0を返す


	;module終わり>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	#global

#endif /* __hsp30__ */	;================================================================================
	;モジュール trackbox
	;ver 2.1
	;	トラックボックス
	;	llmod3.hspが必要です
	;================================================================================

	; trackboxモジュール命令一覧
	;
	; trackbox			トラックボックスの作成
	; sel_trackbox			操作するトラックボックスを選択
	; trackpos			トラックボックスのつまみの位置の設定と取得
	; trackrng			トラックボックスの範囲の設定と取得
	; trackmrk			トラックボックスの目盛りの設定と取得
	; tracksel			トラックボックスの選択範囲の設定と取得
	;
	; 計	6個


	;使い方
	;================================================================================
	; trackbox n1,n2,n3		トラックボックスの作成
	;
	;  n1 : 幅
	;  n2 : 高さ
	;  n3 : スタイル
	;================================================================================
	;
	;<>説明
	; トラックボックスを作成します。
	; トラックボックスとはつまみを持ったオブジェクトです。
	; 決まった選択範囲の中から数値を得たいときなどに使うのに便利です。
	; 幅や高さを省略するとobjsizeで設定した幅、高さが使われます。
	;
	;<>この命令を呼び出した後のstatの値
	; トラックボックスのID
	;
	;<>trackboxのスタイル
	; n4は以下の値を組み合わせて持つことができます。例えば、
	;	n4=2|8|$100	;または n4=2+8+$100
	;	trackbox 200,70,n4
	; なら垂直で両側に目盛りが付き、ツールチップを持つスタイルになります。
	;
	;n4の値
	; 0	水平
	; 1	自動で目盛りを付ける
	; 2	垂直
	; 4	'水平'のとき	目盛りを上側に付ける
	;	'垂直'のとき	目盛りを左側に付ける
	; 8	目盛りを両側に付ける
	; $10	目盛りを付けない
	; $20	つまみの部分に選択領域を付ける
	; $40	$20 のスタイルのとき、つまみが動いても選択領域を固定したままにする
	; $80	つまみなし
	; $100	つまみがクリックされているときツールチップを付ける(このスタイルは
	;	comctl32.dllのバージョンによっては効果がない場合があります。)
	;
	;<>例	幅300,高さ50,ツールチップをもつtrackboxを作る
	;	trackbox 300,50,$100
	;
	; スタイルを省略するとここで設定したデフォルトスタイルが使用されます。

	#define DEFAULT_TRACKBOX_STYLE	0

	;================================================================================
	; sel_trackbox n1		操作するトラックボックスを選択
	;
	;  n1 : トラックボックスのID
	;================================================================================
	;
	;<>説明
	; この命令使用後はn1で指定したトラックボックスに対して各操作を行います。
	; トラックボックス新規に作成すると、自動的にそのトラックボックスが各操作の対象
	; になります。
	; 複数のトラックボックスを作成したときは、この命令で操作するトラックボックス
	; を選択してください。
	;

	;================================================================================
	; trackpos n1,n2		トラックボックスのつまみの位置の設定と取得
	;
	;  n1 : 設定する位置
	;  n2 : 位置を取得するフラグ
	;================================================================================
	;
	;<>説明
	; トラックボックスのつまみの位置を設定します。
	; n2を1にするとつまみの位置を取得します。
	;
	;<>この命令を呼び出した後のstatの値
	; n2を1にするとstatにつまみの位置が代入されます。
	; それ以外はstatは0になります。
	;

	;================================================================================
	; trackrng n1,n2,n3		トラックボックスの範囲の設定と取得
	;
	;  n1 : 最小値
	;  n2 : 最大値
	;  n3 : 範囲を取得するフラグ
	;================================================================================
	;
	;<>説明
	; トラックボックスの範囲を設定、取得します。
	; n3を1にすると設定範囲の値を取得します。
	;
	;<>この命令を呼び出した後のstatの値
	; n3を1にして、n1を1にするとtrackboxの最小位置、n2を1にすると
	; 最大位置がstatに代入されます。
	; それ以外はstatは0になります。
	;

	;================================================================================
	; trackmrk n1,n2		トラックボックスの目盛りの設定と取得
	;
	;  n1 : 目盛りをつける位置
	;  n2 : フラグ
	;================================================================================
	;
	;<>説明
	; トラックボックスの目盛りの位置を設定、取得します。
	;
	;n2の値		機能
	; 0		n1で指定した位置に目盛りを付けます。
	; 1		付けられている目盛りの数を取得します。
	; 2		間隔をn1で指定した値にして目盛り付けます。ただし、トラックボックス
	;		のスタイルを'自動で目盛りを付ける'(1)にしたときのみ有効です。
	; 3		n1番目の目盛りの位置を取得します。
	; 4		付けられている目盛りをすべてクリアします。
	;

	;================================================================================
	; tracksel n1,n2,n3		トラックボックスの選択範囲の設定と取得
	;
	;  n1 : 最小値
	;  n2 : 最大値
	;  n3 : フラグ
	;================================================================================
	;
	;<>説明
	; トラックボックスの選択範囲を設定、取得します。
	; ただし、トラックボックス作成時に'つまみの部分に選択領域を付ける'($20)という
	; スタイルを指定している場合に限ります。
	;
	; n3を0にするとn1-n2の範囲を選択します。
	; n3を1にすると開始位置(n1の値)のみをセットします。
	; n3を2にすると終了位置(n2の値)のみをセットします。
	; n3を3にすると選択範囲をクリアします。
	;
	;<>この命令を呼び出した後のstatの値
	; n1、n2をともに0すると選択開始位置がstatに代入されます。
	; n1、n2をともに1すると選択終了位置がstatに代入されます。
	;

#ifdef __hsp30__

	;module始め>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	#module "_trackbox"


	;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	;trackbox
	;TrackBarの作成
	;................................................................................
	#deffunc trackbox int _v1,int _v2,int _v3

	v3 = _v3		;保存しとく

	if(v3 == 0) : v3 = DEFAULT_TRACKBOX_STYLE

	;#define WS_CHILD	0x40000000
	;#define WS_VISIBLE	0x10000000
	v3 = v3 | $50000000
	dim m,7		;リセット
	m = ginfo@hsp(22),ginfo@hsp(23),_v1,_v2,v3,0,$200
	_makewnd m,"msctls_trackbar32"
	handle_of_track = m
	return handle_of_track


	;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	;sel_trackbox
	;
	;................................................................................
	#deffunc sel_trackbox int _v1
	stt = handle_of_track
	handle_of_track = _v1
	return stt


	;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	;trackpos
	;TrackBarの位置に関する命令
	;................................................................................
	#deffunc trackpos int _v1,int _v2

	;つまみの位置を取得			#define TBM_GETPOS	1024
	;つまみの位置をセット			#define TBM_SETPOS	1029
	v1 = _v1
	if(_v2) : m = 1024 : v3 = 0 : else : m = 1029 : v3 = 1

	sendmsg objinfo(handle_of_track,2),m,v3,v1
	return


	;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	;trackrng
	;TrackBarの範囲に関する命令
	;................................................................................
	#deffunc trackrng int _v1,int _v2,int _v3

	if(_v3) {
		;トラックバーの最小の位置を取得
		;#define TBM_GETRANGEMIN	1025
		;トラックバーの最大の位置を取得
		;#define TBM_GETRANGEMAX	1026

		if(_v1) : m = 1025 : else : m = 1026
		sendmsg objinfo(handle_of_track,2),m,0,0
		ret = stat
	} else {
		;m=1030 : v2= v1|(v2<<16) : v1=1
		;範囲の設定				#define TBM_SETRANGE	1030
		;#define TBM_SETRANGEMIN	1031
		;#define TBM_SETRANGEMAX	1032
		sendmsg objinfo(handle_of_track,2),1031,1,_v1
		sendmsg objinfo(handle_of_track,2),1032,1,_v2
		ret = 0
	}
	return ret

	;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	;trackmrk
	;TrackBarの目盛りに関する命令
	;................................................................................
	#deffunc trackmrk int _v1,int _v2,int _v3

	; 保存しとく(HSP3.0)
	v1 = _v1
	v2 = _v2

	if(v2) {
		;v2=1
		;目盛りの数を取得			#define TBM_GETNUMTICS	1040

		;v2=2
		;目盛りの間隔をセット			#define TBM_SETTICFREQ	1044
		;* スタイルを'自動で目盛りを付ける'したときのみ有効

		;v2=3
		;目盛りの位置を取得			#define TBM_GETTIC	1027

		;v2=4
		;目盛りをすべてクリア			#define TBM_CLEARTICS	1033

		m = 0,1040,1044,1027,1033
		m = m.v2
		if(v2 == 4) : v1 = _v3 ^ 1 : else : if(v2 == 2) : v2 = _v3
	} else {
		;目盛りをセット				#define TBM_SETTIC	1028
		m = 1028 : v2 = v1 : v1 = 0
	}
	sendmsg objinfo(handle_of_track,2),m,v1,v2
	return

	;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	;tracksel
	;TrackBarの選択領域に関する命令
	;................................................................................
	#deffunc tracksel int _v1,int _v2,int _v3
	;選択領域をセット(スタイルが$20を持つとき)
	;#define TBM_SETSEL	1034 は使わない

	; 保存しとく
	v1 = _v1
	v2 = _v2
	v3 = _v3

	if(v1 == v2) {
		;選択開始位置取得 v1=v2=0	#define TBM_GETSELSTART	1041
		;選択終了位置取得 v1=v2=1	#define TBM_GETSELEND	1042
		if(v1) : m = 1042 : else : m = 1041
		v1 = 0 : v2 = 0
	} else {
		a = (v3 >> 4) ^ 1		;Redraw flag	v3に$10を足すとRedrawしない
		v3 = v3 & $f
		if(v3) {
			;#define TBM_CLEARSEL		1043
			;#define TBM_SETSELSTART	1035
			;#define TBM_SETSELEND		1036
			m = 0,1035,1036,1043
			m = m.v3
			
			if(v3 == 3) : v2 = 0 : else : if(v3 == 1) : v2 = v1
			v1 = a
		}else{
			#define TBM_SETSELSTART	1035
			#define TBM_SETSELEND	1036
			sendmsg objinfo(handle_of_track,2),1035,a,v1
			sendmsg objinfo(handle_of_track,2),1036,a,v2
			return 0
		}
	}

	sendmsg objinfo(handle_of_track,2),m,v1,v2
	return

	#undef TBM_SETSELSTART
	#undef TBM_SETSELEND

	;module終わり>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	#global

#endif /* __hsp30__ */	;================================================================================
	;モジュール treebox
	;ver 2.2
	;	ツリーボックス
	;	llmod3.hspが必要です
	;================================================================================

	; treeboxモジュール命令一覧
	;
	; treebox			ツリーボックスの作成
	; sel_treebox			操作するツリーボックスを選択
	; treeadd			ツリーボックスにアイテムを追加
	; treedel			ツリーボックスのアイテムを消去
	; treesel			ツリーボックスのアイテムを選択
	; treeget			ツリーボックスの各情報を取得
	; treemax			ツリーボックスのアイテムの数を取得
	; treesort			ツリーボックスのアイテムをソート
	; treeicon			ツリーボックスのアイコンを設定
	; treehit			マウスの下にあるアイテムを取得
	;
	; 計	10個


	;使い方
	;================================================================================
	; treebox n1,n2,n3		ツリーボックスの作成
	;
	;  n1 : 幅
	;  n2 : 高さ
	;  n3 : スタイル
	;================================================================================
	;
	;<>説明
	; ツリーボックスを作成します。
	; ツリーボックスとはエクスプローラーの左側にあるようなものです。
	; 幅や高さを省略するとobjsizeで設定した幅、高さが使われます。
	;
	;<>この命令を呼び出した後のstatの値
	; ツリーボックスのID
	;
	;<>スタイル
	; スタイルは以下の値を組み合わせて使うことができます。
	;n3の値
	; 1		アイテムが子を持つとき'+','-'のマークが付く
	; 2		アイテムとアイテムを繋ぐ線がつく
	; 4		最初のアイテムに線が付く(2が指定されているときのみ)
	; 8		※この数字は使わないで下さい。
	; $10		※この数字は使わないで下さい。
	; $20		ツリーボックスが選択されていないときにも選択されているアイテムが
	;		分かるように色が付く
	; $40		※よく分からない(tom)
	; $80		アイテムがツリーボックスからはみ出ていてもツールチップがつかない
	;
	;※以下のスタイルはcomctl32.dllのバージョンによっては使用できないものもあります。
	; $100		項目にチェックボックスが付く
	; $200		マウスがアイテムの上に来ると下線が付く
	; $400		マウスでクリックされたアイテムのみが展開される
	; $800		※よく分からない(tom)
	; $1000		スタイル2 が指定されていないとき、選択されたアイテムの背景が変わる
	; $2000		アイテムがツリーボックス内に収まらない時でも、スクロールバー
	;		が付かない
	; $4000		※よく分からない(tom)
	; $8000		水平スクロールバーが付かない
	;
	; スタイルを省略するとここで設定したデフォルトスタイルが使用されます。

	#define DEFAULT_TREEBOX_STYLE	0
	#define TREE_ROOT	$ffff0000

	;================================================================================
	; sel_treebox n1		操作するツリーボックスを選択
	;
	;  n1 : ツリーボックスのID
	;================================================================================
	;
	;<>説明
	; この命令使用後はn1で指定したツリーボックスに対して各操作を行います。
	; 新規にツリーボックスを作成すると、自動的にそのツリーボックスが各操作の対象
	; になります。
	; 複数のツリーボックスを作成したときは、この命令で操作するツリーボックスを
	; 選択してください。
	;

	;================================================================================
	; treeadd n1,"s2",n3,n4,n5,n6		ツリーボックスにアイテムを追加
	;
	;  n1 : 親アイテムのID
	;  s2 : アイテムのテキスト
	;  n3 : アイテムの追加の仕方
	;  n4 : アイテムが収縮している時のアイコン番号
	;  n5 : アイテムが展開している時のアイコン番号
	;  n6 : アイテムに持たせる数値
	;================================================================================
	;
	;<>説明
	; ツリーボックスにn1を親にしてアイテムを加えます。
	; n1に0を代入すると一番目のアイテムになります。
	; n3にはどのようにアイテムを追加するか、n4には収縮している時のアイコン番号
	; (0から)、n5には展開しているときのアイコン番号(0から)を入れます。
	;
	; どのように追加するかは、1で先頭の子として追加、0または2で一番最後の子と
	; して追加、3でソートして追加、となります。
	; アイコンはtreeiconでセットします。
	;
	; n6に値を入れてアイテムにその数値を持たせることができます。
	; n6で設定した数値はtreegetで取得できます。
	;
	;<>この命令を呼び出した後のstatの値
	; 追加したアイテムのID(0ならエラー)
	;
	;<>例
	;	;親をitm3、ソートして追加、収縮しているときのアイコン番号を0、
	;	;展開しているときのアイコン番号を1にしてアイテムを追加
	;	treeadd itm3,"new item",3,0,1
	;	new_itm_id=stat
	;

	;================================================================================
	; treedel n1			ツリーボックスのアイテムを消去
	;
	;  n1 : アイテムのID
	;================================================================================
	;
	;<>説明
	; n1で指定したアイテムを消去します。
	;

	;================================================================================
	; treesel n1,n2			ツリーボックスのアイテムを選択
	;
	;  n1 : アイテムのID
	;  n2 : 選択状態のタイプ
	;================================================================================
	;
	;<>説明
	; n1で指定したアイテムを選択します。
	; n2に$10を足すとアイテムが子をもっているとき、そのアイテムを収縮します。
	; n2に$20を足すとアイテムが子をもっているとき、そのアイテムを展開します。
	;
	;n2の値		選択状態
	; 0		普通のタイプ
	; 1		DragDropのtargetのようなタイプ
	; 2		itemを先頭に持っていって選択(家の環境ではならないような... tom)
	; +$10		展開
	; +$20		収縮
	; +$30		逆の状態にする
	;

	;================================================================================
	; treeget v1,n2,n3,n4		ツリーボックスの各情報を取得
	;
	;  v1 : 取得したものを入れる変数
	;  n2 : 取得するタイプ
	;  n3 : n2によって変わる
	;  n4 : n2によって変わる
	;================================================================================
	;
	;<>説明
	; 主にアイテムのIDを取得します。
	; n2で以下の値を代入すると取得するものが変わってきます。
	;
	;n2の値						n3の値		n4の値
	; 0	選択されているｱｲﾃﾑのIDを取得		0		0
	; 1	次のｱｲﾃﾑのID(同じレベル)を取得		アイテムのID	0
	; 2	前のｱｲﾃﾑのID(同じレベル)を取得		アイテムのID	0
	; 3	親ｱｲﾃﾑのIDを取得			アイテムのID	0
	; 4	一番目の子どもｱｲﾃﾑのIDを取得		アイテムのID	0
	; 5	最初に見えているｱｲﾃﾑのIDを取得		アイテムのID	0
	; 6	アイテムのテキスト取得			アイテムのID	変数のサイズ or -1
	; 7	アイテムに持たせた値を取得		アイテムのID	0 or 1
	; -1	ルートを取得				0		0
	;
	; 値が0の所は省略できます。
	; n2が6の場合、n4に何文字まで取得するか指定します。63文字以内なら省略できます。
	; n2が6のときはstatにtreeaddでアイテムに持たせた値が代入されます。
	;
	; n2を6にしたときn4を-1にすると、v1に入っている文字列を使ってアイテムのテキスト
	; を再設定できます。
	; n2を7にしたときn4を1にすると、v1に入っている値を使ってアイテムに持たせた値を
	; 再設定できます。
	;

	;================================================================================
	; treemax v1,n2			ツリーボックスのアイテムの数を取得
	;
	;  v1 : ツリーボックス内のアイテムの数を入れる数値変数
	;  n2 : フラグ
	;================================================================================
	;
	;<>説明
	; ツリーボックス内のアイテムの数を取得します。
	; n2を1にするとツリーボックス内に完全に見えているアイテムの数を取得します。
	;

	;================================================================================
	; treesort n1			ツリーボックスのアイテムをソート
	;
	;  n1 : アイテムのID
	;================================================================================
	;
	;<>説明
	; n1で指定したアイテムの子をソートします。
	; n1を省略するとトップのアイテムをソートします。
	;

	;================================================================================
	; treeicon v1,n2		ツリーボックスのアイコンを設定
	;
	;  v1 : アイコンが入った数値変数(get_iconで取得したもの)
	;  n2 : アイコンの数
	;================================================================================
	;
	;<>説明
	; ツリーボックスのアイテムのアイコンを設定します。
	; アイコンをセットするには、imgモジュールが必要です。
	;
	;※必ず、treebox.asより先にimg.asをインクルードしてください。
	;
	;例)
	;	#include "llmod.as"
	;	#include "img.as"	;treeiconを使う時は必要(treebox.asより前に)
	;	#include "treebox.as"
	;	;まずツリーボックスを作成
	;	treebox 300,200,1|2|4|$20
	;
	;	;shell32.dllの3番目と4番目のアイコン(小さい方)を使う
	;	;(*get_iconについてはimg.asの説明を読んでください。)
	;	filename="shell32.dll"
	;	get_icon icons.0,filename,3,1
	;	get_icon icons.1,filename,4,1
	;
	;	treeicon icons,2
	;	img_id=stat	;セットしたアイコンについての情報が入った特別な値
	;
	;	;アイテムを追加
	;	;親無し、最後に追加、アイコンは収縮時0、展開時1番目のものを使う
	;	treeadd 0,"folder 1",,0,1
	;	itm1=stat
	;		;
	;		;
	;
	;<>この命令を呼び出した後のstatの値
	; セットしたアイコンについての情報が入った特別な値が返されます。
	; (イメージリストと呼ばれるものです。)
	; treeboxがいらなくなってtreeboxを消去したときはなるべく
	;	destroy_imglist 'treeicon実行後にstatに代入された値'
	; を実行してください。
	; (アイコンをセットするとメモリを消費します。destroy_imglistを実行することで
	; セットして消費したメモリを開放します。)
	; treeboxがまだあるうちにdestroy_imglistを実行すると、セットされたアイコンは
	; 無効になります。
	;

	;================================================================================
	; treehit			マウスの下にあるアイテムを取得
	;================================================================================
	;
	;<>説明
	; マウスの下にあるアイテムのIDを取得します。
	;
	;<>この命令を呼び出した後のstatの値
	; マウスの下にあるアイテムのIDが代入されます。
	; マウスの下にアイテムが無ければ0が代入されます。
	;

#ifdef __hsp30__

	;module始め>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	#module "_treebox"

	;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	;treebox
	;Tree-Viewの作成
	;................................................................................
	#deffunc treebox int v1,int v2,int v3

	_v3 = v3
	if(_v3 == 0) : _v3 = DEFAULT_TREEBOX_STYLE

	;#define WS_CHILD	0x40000000
	;#define WS_VISIBLE	0x10000000
	_v3 = _v3 | $50000000
	alloc m,64		;リセット
	m = ginfo@hsp(22),ginfo@hsp(23),v1,v2,_v3,0,$200
	_makewnd m,"SysTreeView32"
	handle_of_tree = m
	return handle_of_tree


	;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	;sel_treebox
	;
	;................................................................................
	#deffunc sel_treebox int v1
	stt = handle_of_tree	;セットする前のハンドルをstatに代入
	handle_of_tree = v1
	return stt


	;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	;treeadd
	;Tree-Viewにアイテムを加える
	;................................................................................
	#deffunc treeadd int v1,str v2,int v3,int v4,int v5,int v6

	;TV_ITEM mask
	;#define TVIF_TEXT		1
	;#define TVIF_IMAGE		2
	;#define TVIF_PARAM		4
	;#define TVIF_STATE		8
	;#define TVIF_HANDLE		16
	;#define TVIF_SELECTEDIMAGE	32
	;#define TVIF_CHILDREN		64

;	tvi.0=1|2|4|32	;mask
;	tvi.0=39	;mask
;	strlen m,v2 : if m>=64 : alloc lcl_s,m+1
;	tvi.5=m		;cchTextMax
;	lcl_s=v2
;	getptr p,lcl_s
;	tvi.4=p		;pszText
;	tvi.6=v1.2	;iImage
;	tvi.7=v1.3	;iSelectedImage
;	tvi.9=v3	;lParam
;
;	strlen m,v2 : if m>=64 : alloc lcl_s,m+1
;	lcl_s=v2
;	getptr p,lcl_s
;	tvi=39,0,0,0,p,m,v1.2,v1.3,0,v3
	_v2 = v2
	getptr p,_v2

	;#define TVI_ROOT	$ffff0000 ;-65536
	;#define TVI_FIRST	$ffff0001 ;-65535
	;#define TVI_LAST	$ffff0002 ;-65534
	;#define TVI_SORT	$ffff0003 ;-65533

	;親をセットしてなければ、親はルート
	_v1 = v1
	if(_v1 == 0) : _v1 = TREE_ROOT

	tvins = _v1,v3 | $ffff0000,39,0,0,0,p,m,v4,v5,0,v6

	getptr p,tvins

	;#define TVM_INSERTITEMA	4352
	sendmsg objinfo(handle_of_tree,2),4352,0,p
	return


	;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	;treedel
	;Tree-Viewのitemを消去する
	;................................................................................
	#deffunc treedel int v1
	;#define TVM_DELETEITEM	4353
	sendmsg objinfo(handle_of_tree,2),4353,0,v1
	return


	;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	;treesel
	;Tree-Viewのitemを選択する
	;................................................................................
	#deffunc treesel int v1,int v2

	;					flag
	;#define TVGN_CARET		9	0	普通のタイプ
	;#define TVGN_DROPHILITE	8	1	DragDropのtargetのようなタイプ
	;#define TVGN_FIRSTVISIBLE	5	2	itemを先頭に持っていって選択


	a = v2 & $f0
	if(a) {
		a = a >> 4
		;#define TVE_COLLAPSE	1
		;#define TVE_COLLAPSERESET	32768
		;#define TVE_EXPAND	2
		;#define TVE_TOGGLE	3

		;#define TVM_EXPAND	4354
		sendmsg objinfo(handle_of_tree,2),4354,a,v1
	}

	_v2 = v2 & $f
	if(_v2 == 2) : _v2 = 5 : else : _v2 = 9 - v2
	;#define TVM_SELECTITEM	4363
	sendmsg objinfo(handle_of_tree,2),4363,_v2,v1
	return


	;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	;treemax
	;Tree-View内にあるitemの数を調べる
	;................................................................................
	#deffunc treemax var v1,int v2

	;#define TVM_GETVISIBLECOUNT	4368
	;#define TVM_GETCOUNT		4357
	if(v2) : m = 4368 : else : m = 4357
	sendmsg objinfo(handle_of_tree,2),m,0,0
	v1 = stat
	return


	;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	;treeget
	;itemの取得
	;................................................................................
	#deffunc treeget var v1,int v2,int v3,int v4
	;					flag
	;#define TVGN_CARET		9	0 選択されているitemを取得
	;#define TVGN_NEXT		1	1 次のアイテム(同じレベル)を取得
	;#define TVGN_PREVIOUS		2	2 前のアイテム(同じレベル)を取得
	;#define TVGN_PARENT		3	3 親itemを取得
	;#define TVGN_CHILD		4	4 一番目の子どものitemを取得
	;#define TVGN_FIRSTVISIBLE	5	5 見えている最初のitemを取得
	;xxxxx				x	6 itemのテキスト取得(statにitemのlparamが入る)
	;#define TVGN_ROOT		0	-1 ルートを取得

	;未サポート
	;#define TVGN_PREVIOUSVISIBLE	7	前の見えているitem
	;#define TVGN_NEXTVISIBLE	6	次の見えているitem
	;#define TVGN_DROPHILITE	8	dragdropのtarget

	_v2 = v2
	_v4 = v4
	dim tvi,10
	if(v2 >= 6) {
		getptr p,tvi
		if(v2 == 6) {
			if(_v4 == 0) : _v4 = 64	;バッファのサイズを省略したときの大きさ
			tvi.5 = _v4		;cchTextMax
			getptr tvi.4,v1		;pszText
			tvi = 5,v3		;mask, hItem

			;#define TVM_GETITEMA	4364
			;#define TVM_SETITEMA	4365
			m = 4364
			if(_v4 < 0) : tvi = 1 : m++	;再設定

			sendmsg objinfo(handle_of_tree,2),m,0,p
			stt = tvi.9
		} else {	;v2=7
			tvi = 4,v3		;mask, hItem
			;#define TVM_SETITEMA	4365
			m = 4364
			if(_v4) : tvi.9 = v1 : m++	;再設定
			sendmsg objinfo(handle_of_tree,2),m,0,p
			v1 = tvi.9
			stt = 0
		}
	} else {
		if(_v2 == 0) : _v2 = 9 : else : if(_v2 == -1) : _v2 = 0
		;#define TVM_GETNEXTITEM	4362
		sendmsg objinfo(handle_of_tree,2),4362,_v2,v3
		v1 = stat
		stt = 0
	}
	return stt


	;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	;treesort
	;Tree-View内にあるitemの子をソート(文字列ソート)
	;(var.0を$ffff0000にするとルートの子をソートする)
	;................................................................................
	#deffunc treesort int v1
	;#define TVM_SORTCHILDREN	4371
	_v1 = v1
	if(_v1 == 0) : _v1 = $ffff0000
	sendmsg objinfo(handle_of_tree,2),4371,0,_v1
	return


	;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	;treeimglist
	;Tree-Viewのitemのイメージリストをセット
	;................................................................................
	#deffunc treeimglist int v1

	;#define TVSIL_NORMAL		0
	;#define TVSIL_STATE		2
	;#define TVM_SETIMAGELIST	4361
	sendmsg objinfo(handle_of_tree,2),4361,0,v1
	return


	;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	;treeicon
	;Tree-Viewのitemのアイコンをセット
	;img.asが必要
	;................................................................................
	#deffunc treeicon array v1,int v2

	create_imglist 16,16,1|4,v2
	a = stat
	if(a == 0) : stt = 0 : return

	repeat v2
		addicon_imglist a,v1(cnt)
	loop

	treeimglist a

;ここで image list を消すとまずい
;(セットしたimage listを消すと、treeviewのimageも表示されなくなる)
;	if a {
;		dll_load dll,"comctl32"
;		dll_getfunc func,"ImageList_Destroy",dll
;		dll_func a,1,func
;		dll_free dll		;comctl32 free---------------------------
;	}

	stt = a
	return


	;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	;treehit
	;Tree-View
	;................................................................................
	#deffunc treehit int v1

	m = ginfo(0),ginfo(1)
	getptr p,m
	prm = objinfo(handle_of_tree,2),p
	dllproc "ScreenToClient",prm,2,D_USER

	;#define TVHT_ONITEMICON	2
	;#define TVHT_ONITEMLABEL	4
	;#define TVHT_ONITEMINDENT	8
	;#define TVHT_ONITEMBUTTON	16
	;#define TVHT_ONITEMRIGHT	32
	;#define TVHT_ONITEMSTATEICON	64
	;#define TVHT_ONITEM		70
	if(v1) : m(2) = v1 : else : m(2) = 70
	m(3) = 0

	;#define TVM_HITTEST	4369
	sendmsg objinfo(handle_of_tree,2),4369,0,p
	return

	;module終わり>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	#global

#endif /* __hsp30__ */

;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
;tree_edit	Ｘ使用不可
;................................................................................
;#define TVS_EDITLABELS		8	をスタイルに付ければできると思ったがダメ
;TVN_ENDLABELEDITを処理しないとダメ
;	#deffunc tree_edit 1
;	mref var,16	;var.0=item, var.1=h_tree
;	mref stt,64
;#define TVM_EDITLABELA	4366
;	prm=var.1,4366,0,var.0
;	sendmsg prm
;	return


	;================================================================================
	;モジュール udbtn
	;ver 2.1
	;	アップダウンボタン
	;	llmod3.hspが必要です
	;================================================================================

	; udbtnモジュール命令一覧
	;
	; udbtn				アップダウンボタンの作成
	; sel_udbtn			操作するアップダウンボタンの選択
	; udset				アップダウンボタンの設定
	; udget				アップダウンボタンの各種情報の取得
	;
	; 計	4個


	;使い方
	;================================================================================
	; udbtn n1,n2,n3,n4		アップダウンボタンの作成
	;
	;  n1 : 幅
	;  n2 : 高さ
	;  n3 : スタイル
	;  n4 : アップダウンボタンを付けるオブジェクトのID
	;================================================================================
	;
	;<>説明
	; アップダウンボタンを作成します。
	; アップダウンボタンとは矢印ボタンを持ったオブジェクトです。
	; input等の入力ボックスから数値を得たいときなどに使うと便利です。
	; (一応button等にも付けることはできます。)
	; n4にはbuttonなどのオブジェクトのIDを入れます。
	; 幅や高さを省略するとobjsizeで設定した幅、高さが使われます。
	;
	;<>この命令を呼び出した後のstatの値
	; アップダウンボタンのID
	;
	;<>udbtnのスタイル
	; n4は以下の値を組み合わせて持つことができます。
	;
	;n4の値	スタイル
	; 1	最小、最大値に達したときに折り返す
	; 4	オブジェクトの右側に付ける
	; 8	オブジェクトの左側に付ける
	; $20	方向キーで数値を変えられるようにする
	; $40	水平タイプ
	; $80	数字をカンマで区切らない
	;
	; スタイルを省略するとここで設定したデフォルトスタイルが使用されます。

	#define DEFAULT_UDBTN_STYLE	0

	;================================================================================
	; sel_udbtn n1		操作するアップダウンボタンの選択
	;
	;  n1 : アップダウンボタンのID
	;================================================================================
	;
	;<>説明
	; この命令使用後はn1で指定したアップダウンボタンに対して各操作を行います。
	; アップダウンボタン新規に作成すると、自動的にそのアップダウンボタンが
	; 各操作の対象になります。
	; 複数のアップダウンボタンを作成したときは、この命令で操作するアップダウン
	; ボックスを選択してください。
	;

	;================================================================================
	; udset n1,n2,n3		アップダウンボタンの設定
	;
	;  n1 : セットするタイプ
	;  n2 : n1によって変わる
	;  n3 : n1によって変わる
	;================================================================================
	;
	;<>説明
	; アップダウンボタンの設定をします。
	; 設定するものはn1の値によって異なります。
	;
	;n1の値
	; 0	アップダウンボタンの相手を設定します。
	;	n2にオブジェクトのIDを指定します。
	;
	; 1	アップダウンボタンの範囲を設定します。
	;	n2に最小値(0から$7FFFまで),n3に最大値(0から$7FFFまで)を指定します。
	;
	; 2	アップダウンボタンの位置を設定します。
	;	n2にアップダウンボタンの位置を指定します。
	;
	; 3	アップダウンボタンの数値を16進で表示します。
	;	n2を省略すると16進になり、0以外の値を入れると10進に戻ります。
	;
	; 4	アップダウンボタンの増加量を変化させる時間を設定します。
	;	n2に設定する数、n3に設定する時間、増加量が入った数値変数
	;	のポインタを指定します。
	;	(例)
	;		udbtn 100,100
	;		;最初は1ずつ、3秒後に10ずつ、6秒後に50ずつ増加させるようにする
	;		a=0,1,  3,10,  6,50
	;		getptr p,a
	;		udset 4,3,p		;設定する時間は3つ
	;
	;
	;<>この命令を呼び出した後のstatの値
	;n1の値		statの値
	; 0		セットする前の相手のID
	; 1		0
	; 2		セットする前の位置
	; 3		セットする前の表示タイプ
	; 4		セットが成功した場合は1、失敗した場合は0
	;

	;================================================================================
	; udget n1			アップダウンボタンの各種情報の取得
	;
	;  n1 : 取得するタイプ
	;================================================================================
	;
	;<>説明
	; アップダウンボタンの各種情報を取得します。
	; 取得するものはn1の値によって異なります。
	; 各情報はstatに代入されます。
	;
	;n1の値
	; 0	アップダウンボタンの相手を取得します。
	; 1	アップダウンボタンの範囲を取得します。
	;	statの値は ' 最小値 | (最大値<<16) ' の形式になっています。
	; 2	アップダウンボタンの位置を取得します。
	; 3	アップダウンボタンの数値の表示の仕方を取得します。
	;

#ifdef __hsp30__

	;module始め>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	#module "_udbtn"

	;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	;sel_udbtn
	;
	;................................................................................
	#deffunc sel_udbtn int v1
	stt = handle_of_ud
	handle_of_ud = v1
	return


	;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	;udset
	;UpdownControlの設定
	;................................................................................
	#deffunc udset int flag,int v1,int v2

	_v1 = v1
	_v2 = v2
	if(flag == 0) {
		;親の設定
		;#define UDM_SETBUDDY	1129
		m = 1129 : _v2 = 0	;v1=objid
		_hspobjhandle v1
		if(stat) : _v1 = stat : else {
			_is_wnd _v1
			if(stat == 0) : return -1
		}
	}
	if(flag == 1) {
		;範囲のセット
		;#define UDM_SETRANGE	1125
		_v2 = (_v1 << 16) | _v2
		m = 1125 : _v1 = 0
	}
	if(flag == 2) {
		;位置のセット
		;#define UDM_SETPOS	1127
		m = 1127 : _v2 = _v1 : _v1 = 0
	}
	if(flag == 3) {
		;ベースのセット
		;#define UDM_SETBASE	1133
		m = 1133 : _v2 = 0
		if(_v1) : _v1 = 10 : else : _v1 = 16
	}
	if(flag == 4) {
		;一定の時間ボタンを押し続けたときに増加させる量のセット
		;#define UDM_SETACCEL	1131
		m = 1131
	}
	sendmsg objinfo(handle_of_ud,2),m,_v1,_v2
	ret = stat
	if(flag == 0) {
		_hspobjid ret
		if(stat != -1) : ret = stat
	}
	return ret

	;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	;udget
	;UpdownControlの各情報取得
	;................................................................................
	#deffunc udget int flag,int v1,int v2

;	if flag=0 {
;		;親の取得
;		;#define UDM_GETBUDDY	1130
;		m=1130
;	}
;	if flag=1 {
;		;範囲の取得
;		;#define UDM_GETRANGE	1126
;		m=1126
;	}
;	if flag=2 {
;		;位置のセット
;		;#define UDM_GETPOS	1128
;		m=1128 : v2=v1 : v1=0
;	}
;	if flag=3 {
;		;ベースの取得
;		;#define UDM_GETBASE	1134
;		m=1134
;	}
;	if flag=4 {
;		;一定の時間ボタンを押し続けたときに増加させる量の取得
;		;#define UDM_GETACCEL	1132
;		m=1132
;		;v1は取得する設定値の数
;		;v2は値を受ける変数のポインタ
;	}
	m = 1130,1126,1128,1134,1132
	m = m.flag
	if(flag == 2) : v2 = v1 : v1 = 0
	sendmsg objinfo(handle_of_ud,2),m,v1,v2
	ret = stat
	if(flag == 0) {
		_hspobjid ret
		if(stat >= 0) : ret = stat
	}
	return ret


	;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	;udbtn
	;UpdownControlの作成
	;................................................................................
	#deffunc udbtn int v1,int v2,int v3,int v4

	_v3 = v3
	if(_v3 == 0) : _v3 = DEFAULT_UDBTN_STYLE

	; x $10	作成するときアップダウンボタンの位置をオブジェクトの上に来るように
	;	するとアップダウンボタンの下にあるオブジェクトに自動的に付く

	;#define WS_CHILD	0x40000000
	;#define WS_VISIBLE	0x10000000
	; 2	数値を増減させる
	_v3 = _v3 | $50000002
	alloc m,64		;リセット
	m = ginfo@hsp(22),ginfo@hsp(23),v1,v2,_v3,0,$200
	_makewnd m,"msctls_updown32"
	handle_of_ud = m
	udset ,v4
	return handle_of_ud

	;module終わり>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	#global

#endif /* __hsp30__ */	;================================================================================
	;モジュール unicode
	;ver 2.0
	;	Unicode関連
	;	llmod3.hspが必要です
	;================================================================================

	; uni_multiモジュールの命令一覧
	;
	; to_uni			Unicodeへ変換
	; from_uni			UnicodeからANSIに変換
	;
	; 計	2個


	;使い方
	;================================================================================
	; to_uni v1,v2,n3		Unicodeへ変換
	;
	;  v1 : Unicodeを格納する変数
	;  v2 : Unicodeに変換する文字列変数
	;  n3 : Unicodeに変換する文字列の長さ
	;================================================================================
	;
	;<>説明
	; ANSI文字列(SJIS)をUNICODEに変換します。
	;
	;<>この命令を呼び出した後のstatの値
	; バッファに書き込まれたUnicode文字の数
	;  0 変換失敗
	;
	;<>例
	;	s="Unicodeに変換する文字列"
	;	strlen sl,s
	;	;alloc buf,(sl+1)*2	;この場合(sl+1)*2が64に満たないのでallocは必要ない
	;	to_uni buf,s,sl+1
	;	usize=stat
	;	if usize=-1 : dialog "エラーが発生しました"
	;	if usize=0 : dialog "変換が失敗しました"
	;	if usize>0 : bsave "unicode.dat",buf,usize*2
	;
	;<>備考
	; unicode呼び出し後にstatに入る値の'バッファに書き込まれたUnicode文字の数'は、
	;	1バイト(半角)文字は1文字､2バイト(全角)文字も1文字
	; と数えます。例えば
	;	s="abcあいう"
	; をすべてUnicodeに変換したあとのstat値は6+1(*注 +1は最後の文字列終結文字ぶん)。
	; となります。
	;
	; 'Unicodeに変換する文字列の長さ'を-1にすると指定した文字列全てを変換します。
	; 'Unicodeに変換する文字列の長さ'を0にするとUnicodeを格納するのに必要な変数
	; のサイズを返します。(バイト単位)
	;

	;================================================================================
	; from_uni v1,v2,n3		UnicodeからANSIに変換
	;
	;  v1 : Multibyteを格納する変数
	;  v2 : Multibyteに変換するUnicode文字列が入っている変数
	;  n3 : Multibyteに変換するUnicode文字列の長さ
	;================================================================================
	;
	;<>説明
	; UNICODEをANSI文字列に変換します。
	;
	;<>この命令を呼び出した後のstatの値
	; バッファに書き込まれたMultibyte文字の数
	; 0  変換失敗
	;
	;<>例
	;	exist "unicode.dat"
	;	bload "unicode.dat",uni,strsize
	;	buf=""
	;	from_uni buf,uni,-1
	;	mbsize=stat
	;	if mbsize=-1 : dialog "エラーが発生しました"
	;	if mbsize=0 : dialog "変換が失敗しました"
	;	if mbsize>0 : dialog buf
	;
	;<>備考
	; この命令を呼び出した後のstatの値、'バッファに書き込まれたMultibyte文字の数'は
	;	1バイト(半角)文字は1文字､2バイト(全角)文字は2文字
	; と数えます。
	;
	; 'Multibyteに変換するUnicode文字列の長さ'を-1にすると全て変換します。
	; 'Multibyteに変換するUnicode文字列の長さ'を0にするとMultibyteを格納するのに
	; 必要な変数のサイズを返します。(バイト単位)
	;

#ifdef __hsp30__

	;module始め>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	#module "unicode"


	;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	;to_uni
	;Unicodeへ変換
	;................................................................................
	#deffunc to_uni var buf,var mb,int mb_len
	mref stt,64

	lcl_mb_len = strlen(mb)
	if(lcl_mb_len >= 64) : sdim lcl_mb,lcl_mb_len + 1
	lcl_mb = mb	;保存しておかないとまずい

	prm.0 = 0
	prm.1 = 0
	getptr prm.2,lcl_mb
	prm.3 = mb_len

	if(mb_len == 0) {
		prm.5 = 0 : prm.3 = -1
	} else {
		prm.5 = (lcl_mb_len + 1) * 2
	}

	getptr prm.4,buf

	cnv
	;@@@@ Unicodeに変換 @@@@
	dllproc "MultiByteToWideChar",prm,6,D_KERNEL
;	if stat<0 : stt=-1 : return
	prm = stat

	if(prm.5 == 0) : prm = prm * 2
	stt = prm

	return


	;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	;from_uni
	;UnicodeからANSIへ変換
	;................................................................................
	#deffunc from_uni var buf,var uni,int uni_len
	mref stt,64

	prm = 0
	repeat -1
		prm = wpeek(uni,cnt * 2)
		if(prm == 0) : lcl_uni_len = cnt : break
	loop

	prm.0 = 0
	prm.1 = 0

	getptr prm.2,uni
	prm.3 = uni_len

	getptr prm.4,buf
	if(uni_len == 0) {
		prm.5 = 0
		prm.3 = -1
	} else {
		prm.5 = (lcl_uni_len + 1) * 2	;<-ほんとは違う

	prm.6 = 0
	prm.7 = 0

	;@@@@ Multibyteに変換 @@@@
	dllproc "WideCharToMultiByte",prm,8,D_KERNEL


	return
	#global
	;module終わり>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

#endif /* __hsp30__ */	;================================================================================
	;モジュール winver
	;ver 2.2
	;	バージョン関連
	;	llmod3.hspが必要です
	;================================================================================

	; winverモジュールの命令一覧
	;
	; winver			Windowsのバージョン取得
	; verinfo			バージョン情報取得
	;
	; 計	2個


	;使い方
	;================================================================================
	; winver v1			Windowsのバージョン取得
	;
	;  v1 : バージョンを受け取るための数値変数
	;================================================================================
	;
	;<>説明
	; ウィンドウズのバージョンを取得します。
	; 変数には以下の値が入ります。
	; v.0           プラットフォーム	;発売日
	;	0	Windows 3.1		;1994  2
	;	95	Windows 95		;1995 11(7) 
	;	98	Windows 98		;1998  7(6)
	;	100	Windows Me		;2000  9
	;	$100	Windows NT 3.x		;1993  7
	;	$101	Windows NT 4.x		;1996 12(6)
	;	2000	Windows 2000		;2000  2
	;	2001	Windows XP		;2001 11
	;	2003	Windows Server 2003		;2001 11
	;	2007	Windows Vista		;2007 1
	;	2007	Windows Server 2008		;2008 4(2)
	;	2009	Windows 7		;2009 10
	;	2009	Windows Server 2008 R2		;2009 10
	;	-1	NT系の不明なプラットフォーム		;-  -
	; v.1    メジャーバージョン
	; v.2    マイナーバージョン
	; v.3    ビルドナンバー
	; v.4    メジャー&マイナーバージョン(プラットフォームが Windows 95,98,Meの時のみ)
	;
	;<>例
	;	winver ver : s = refstr
	;	if ver<100  : v = ""+ver
	;	if ver=100  : v = "Me"
	;	if ver=$100 : v = "NT 3.5"
	;	if ver=$101 : v = "NT 4.0"
	;	if ver=2000 : v = "2000"
	;	if ver=2001 : v = "XP"
	;	mes "platform = Windows "+v
	;	mes "メジャーバージョン = "+ver.1
	;	mes "マイナーバージョン = "+ver.2
	;	mes "ビルドナンバー = "+ver.3
	;	if ver<=100 : mes "メジャー&マイナーバージョン"+ver.4
	;	mes "szCSDVersion:"+s
	;

	;================================================================================
	; verinfo "s1",n2		バージョン情報取得
	;
	;  s1 : ファイル名
	;  n2 : 取得するタイプ
	;================================================================================
	;
	;<>説明
	; s1で指定したファイルから、バージョン情報を取得します。
	; s1にはdllやexeなどのバイナリファイルを指定します。
	; refstrにバージョン情報が代入されます。
	;
	; 16bitファイルからはバージョンを取得できません。
	; エラーが起きた場合はstatに1が代入されます。
	;
	;<>取得するタイプ
	; n2の値	取得するもの
	; 0		会社名
	; 1		ファイルの説明
	; 2		ファイルバージョン
	; 3		内部ファイル名
	; 4		著作権
	; 5		もとのファイル名
	; 6		製品名
	; 7		製品バージョン
	;
	;<>例
	;	#include "llmod.as"
	;	#include "winver.as"
	;
	;	file="user32.dll"   : gosub get_verinfo
	;	file="comctl32.dll" : gosub get_verinfo
	;	stop
	;
	;*get_verinfo
	;	s=windir+"\\system\\"+file
	;	mes "●ファイル"+s+"のバージョン情報"
	;	repeat 8
	;		verinfo s,cnt
	;		mes refstr
	;	loop
	;	return
	;

#ifdef __hsp30__

	;module始め>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	#module "_winver"


	;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	;winver
	;Windowsのバージョン取得
	;................................................................................
	#deffunc winver array ver
	mref stt,64
	mref rfstr,65

	;document PlatformSDK Feb 2003
	;Development Guid
	; Windows 95/98/Me Programming
	;  Release Notes
	;  (Detecting Releases of Windows 95/98/Me, GetVersionEx, OSVERSIONINFO)

	dim lcl_ver,37
	getptr a,lcl_ver
	lcl_ver(0) = 148		;sizeof OSVERSIONINFO
	dllproc "GetVersionExA",a,1,D_KERNEL

	//rfstr = peek(lcl_ver(5),128)
	memcpy rfstr,lcl_ver,128,0,20

	ver(1) = lcl_ver(1)		;MajorVersion
	ver(2) = lcl_ver(2)		;MinorVersion

	;typedef struct _OSVERSIONINFO {  
	;	DWORD dwOSVersionInfoSize;	0
	;	DWORD dwMajorVersion;		1
	;	DWORD dwMinorVersion;		2
	;	DWORD dwBuildNumber;		3
	;	DWORD dwPlatformId;		4
	;	TCHAR szCSDVersion[128];
	;} OSVERSIONINFO;

	;#define VER_PLATFORM_WIN32s		0
	;#define VER_PLATFORM_WIN32_WINDOWS	1
	;#define VER_PLATFORM_WIN32_NT		2

	if(lcl_ver(4) == 0) {	;VER_PLATFORM_WIN32s
		ver = 0				;win3.1
		ver(3) = 0 : ver(4) = 0
	}
	if(lcl_ver(4) == 1) {	;VER_PLATFORM_WIN32_WINDOWS
			ver = 95
			if(ver(2) == 10) {
				ver = 98		;win 98
			}
			else {
				if(ver(2) == 90) {
					ver = 100		;win Me
				}
			}
	
			ver(3) = lcl_ver(3) >> 16 & $ffff : ver(4) = lcl_ver(3) & $ffff
	
			;s=refstr : peek c,s,1
			;Windows 95
			;  c = 'A' : OEM Service Release 1
			;  c = 'B' : OEM Service Release 2
			;  c = 'C' : OEM Service Release 2.5
			;Windows 98
			;  c = 'A'      : Second Edition
			;  ver.4 = 2000 : Service Pack 1
	}
	if(lcl_ver(4) == 2) {	;VER_PLATFORM_WIN32_NT
			if(ver(1) == 3) {
				ver = $100	;win nt 3.5
			}
			else {
				if(ver(1) == 4) {
					ver = $101	;win nt 4.0
				}
				else {
					if(ver(1) == 5) {
						ver = 2000	;win 2000
						if(ver(2) == 1) {
							ver = 2001	;win XP
						}
						else {
							if (ver(2) == 2) {
								ver = 2003	;win Server 2003 family
							}
						}
					}
					else {
						ver = -1	;unknown
						if(ver(1) == 6) {
							if(ver(2) == 0) {
								ver = 2007	;win Vista / win Server 2008 family
							}
							else {
								if(ver(2) == 1) {
									ver = 2009	;win 7 / win Server 2008 R2 family
								}
							}
						}
					}
				}
			}
			ver(3) = lcl_ver(3) : ver(4) = 0
	}

	alloc lcl_ver,64
	stt = 0
	return


	;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	;verinfo
	;バージョン情報取得
	;(llmod3未対応)
	;................................................................................
	#deffunc verinfo str v1,int v2
	/*
	if(verdll == 0) {
		s = "version.dll"
		ll_libload verdll,s
		if(verdll == 0) : dialog s + "が見つかりません" : return
	}
	mref stt,64
	mref rfstr,65

	rfstr = ""
	if(v2 > 7) : stt = 1 : return

	L = strlen(v1) : if(L >= 64) : sdim s,L + 1
	getptr p,s
	getptr p(1),a
	s = v1
	a = 1
	dllproc "GetFileVersionInfoSizeA",p,2,verdll
	L = stat
	if(L == 0) : stt = 1 : return		;no version information exist
	if(L >= 64) : alloc buf,L + 1
	getptr pbuf,buf
	getptr p(2),a(1)

	prm = p,0,L,pbuf
	dllproc "GetFileVersionInfoA",prm,4,verdll
	if(stat == 0) : stt = 1 : return

	s = "\\VarFileInfo\\Translation"
	prm = pbuf,p,p(1),p(2)
	dllproc "VerQueryValueA",prm,4,verdll

	//dupptr clone,a,a(1),4
	//ss = peek(clone,a.1) : str ss,16 + 8
	//memcpy ss,clone,,,a(1) : str ss,16 + 8
	str ss,16 + 8
	sdim charset,8
	//charset = peek(ss,4) : poke ss,4,0 : charset += ss
	memcpy charset,ss,4 : poke ss,4,0 : charset += ss
	charupper charset

	sdim ss,64,8
	ss = "CompanyName","FileDescription","FileVersion","InternalName"
	ss(4) = "LegalCopyright","OriginalFilename","ProductName","ProductVersion"

	s = "\\StringFileInfo\\"+charset+"\\"
	s += ss(v2)

	prm = pbuf,p,p(1),p(2)
	dllproc "VerQueryValueA",prm,4,verdll
	if(a(1) == 0) : stt = 1 : return
	alloc ss,64

	dupptr clone,a,a(1),4
	//rfstr = peek(clone,a.1)
	memcpy restr,clone,a(1)
	*/
	return


	#global
	;module終わり>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>